// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/conf/channel_config.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/conf/channel_config.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace ipc {
class ChannelConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelConfig> {
} _ChannelConfig_default_instance_;
class ChannelManagerConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChannelManagerConfig> {
} _ChannelManagerConfig_default_instance_;

namespace protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConfig, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConfig, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConfig, message_history_limit_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelConfig, latch_),
  2,
  0,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerConfig, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerConfig, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerConfig, config_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelManagerConfig, is_lcm_),
  ~0u,
  0,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 9, sizeof(ChannelConfig)},
  { 13, 20, sizeof(ChannelManagerConfig)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelConfig_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ChannelManagerConfig_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/ipc/conf/channel_config.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _ChannelConfig_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _ChannelManagerConfig_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _ChannelConfig_default_instance_.DefaultConstruct();
  _ChannelManagerConfig_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n%modules/ipc/conf/channel_config.proto\022"
      "\007atd.ipc\"\243\017\n\rChannelConfig\0220\n\004type\030\001 \002(\016"
      "2\".atd.ipc.ChannelConfig.MessageType\022)\n\004"
      "mode\030\002 \002(\0162\033.atd.ipc.ChannelConfig.Mode\022"
      "!\n\025message_history_limit\030\003 \001(\005:\00210\022\024\n\005la"
      "tch\030\004 \001(\010:\005false\"\255\r\n\013MessageType\022\014\n\007LCM_"
      "Vcu\020\204\007\022\014\n\007LCM_Ins\020\206\007\022\021\n\014LCM_Mobileye\020\207\007\022"
      "\023\n\016LCM_Ultrasonic\020\210\007\022\014\n\007LCM_Uwb\020\211\007\022\021\n\014LC"
      "M_OFILMloc\020\212\007\022\024\n\017LCM_MELaneLines\020\213\007\022\023\n\016L"
      "CM_USDistance\020\214\007\022\027\n\022LCM_LogitechCamera\020\215"
      "\007\022\017\n\nLCM_RawIns\020\216\007\022\017\n\nLCM_LocMap\020\217\007\022\022\n\rL"
      "CM_NaviRoute\020\220\007\022\027\n\022LCM_MapRDisOnePark\020\221\007"
      "\022\023\n\016LCM_MapRDisTsr\020\222\007\022\027\n\022LCM_MapTargetLa"
      "nes\020\223\007\022\025\n\020LCM_ProxyRequest\020\224\007\022\023\n\016LCM_Raw"
      "Ins300C\020\225\007\022\022\n\rLCM_Coupleout\020\226\007\022\022\n\rLCM_Ad"
      "pStatus\020\227\007\022\033\n\026LCM_OFILMParkingSearch\020\254\007\022"
      "\017\n\nLCM_EKFOut\020\347\007\022\023\n\016LCM_MomentaLoc\020\346\007\022\020\n"
      "\013LCM_OWNSINS\020\345\007\022\024\n\017LCM_MEFreeSpace\020\230\007\022\022\n"
      "\rLCM_MEObjects\020\231\007\022\030\n\023LCM_PerceptionLines"
      "\020\232\007\022\025\n\020LCM_BoschObjects\020\233\007\022\023\n\016LCM_RDAObj"
      "ects\020\234\007\022\024\n\017LCM_FSDAObjects\020\235\007\022\026\n\021LCM_Per"
      "ceptionTSR\020\236\007\022\025\n\020LCM_SV51FrontMwr\020\240\007\022\031\n\024"
      "LCM_SV51FrontLeftMwr\020\241\007\022\032\n\025LCM_SV51Front"
      "RightMwr\020\242\007\022\030\n\023LCM_SV51RearLeftMwr\020\243\007\022\031\n"
      "\024LCM_SV51RearRightMwr\020\244\007\022\032\n\025LCM_Percepti"
      "onObjects\020\245\007\022\030\n\023LCM_TRACKED_OBJECTS\020\246\007\022\020"
      "\n\014SystemStatus\020\001\022\013\n\007Monitor\020\002\022\n\n\006FixMsg\020"
      "\n\022\r\n\tDriverIns\020\013\022\r\n\tDriverUwb\020\014\022\007\n\003IMU\020\r"
      "\022\020\n\014DelimitedMsg\020\016\022\026\n\022DriverMobileyeLane"
      "\020\017\022\024\n\020DriverUltrasonic\020\020\022\r\n\tDriverVcu\020\021\022"
      "\024\n\020Drivermomentaloc\020\022\022\n\n\006DrList\020\036\022\r\n\tDrI"
      "nsList\020\037\022\007\n\003Pfs\020(\022\021\n\rPfsAfterMatch\020)\022\014\n\010"
      "GridList\020*\022\020\n\014Localization\020+\022\023\n\017Localiza"
      "tionAbs\020,\022\030\n\024GridListMatchDisplay\020-\022\030\n\024L"
      "ocalizationMapMatch\020.\022\020\n\014EngineLocMap\0202\022"
      "\025\n\021EngineTargetLanes\0203\022\026\n\022EngineTargetAr"
      "rows\0204\022\030\n\024EngineRemainDistance\0205\022\020\n\014Engi"
      "neSurMap\0206\022\026\n\022EngineLocMapBuffer\0207\022\033\n\027En"
      "gineTargetLanesBuffer\0208\022\034\n\030EngineTargetA"
      "rrowsBuffer\0209\022\036\n\032EngineRemainDistanceBuf"
      "fer\020:\022\026\n\022EngineSurMapBuffer\020;\022\025\n\021EngineD"
      "estination\020<\022\013\n\007GridLog\020=\022\017\n\013MeFreeSpace"
      "\020F\022\024\n\020ConstructionArea\020G\022\t\n\005MeHLB\020H\022\020\n\014L"
      "ane_Support\020I\022\t\n\005MeLDW\020K\022\n\n\006LS_ADV\020L\022\020\n\014"
      "MeLsRoadEdge\020M\022\017\n\013SematicLine\020N\022\017\n\013Semat"
      "icMark\020O\022\016\n\nSL_Descrip\020P\022\r\n\tMeObjects\020Q\022"
      "\007\n\003TFL\020R\022\007\n\003TSR\020S\022\021\n\rMeApplication\020T\022\014\n\010"
      "MeCommon\020U\022\t\n\005FCFVD\020V\022\013\n\007FCF_VRU\020W\022\014\n\010Fa"
      "ilSafe\020X\"L\n\004Mode\022\020\n\014RECEIVE_ONLY\020\000\022\020\n\014PU"
      "BLISH_ONLY\020\001\022\n\n\006DUPLEX\020\002\022\024\n\020RTE_RECEIVE_"
      "ONLY\020\003\"N\n\024ChannelManagerConfig\022&\n\006config"
      "\030\001 \003(\0132\026.atd.ipc.ChannelConfig\022\016\n\006is_lcm"
      "\030\002 \002(\010"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 2086);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/ipc/conf/channel_config.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto

const ::google::protobuf::EnumDescriptor* ChannelConfig_MessageType_descriptor() {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::file_level_enum_descriptors[0];
}
bool ChannelConfig_MessageType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 30:
    case 31:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 70:
    case 71:
    case 72:
    case 73:
    case 75:
    case 76:
    case 77:
    case 78:
    case 79:
    case 80:
    case 81:
    case 82:
    case 83:
    case 84:
    case 85:
    case 86:
    case 87:
    case 88:
    case 900:
    case 902:
    case 903:
    case 904:
    case 905:
    case 906:
    case 907:
    case 908:
    case 909:
    case 910:
    case 911:
    case 912:
    case 913:
    case 914:
    case 915:
    case 916:
    case 917:
    case 918:
    case 919:
    case 920:
    case 921:
    case 922:
    case 923:
    case 924:
    case 925:
    case 926:
    case 928:
    case 929:
    case 930:
    case 931:
    case 932:
    case 933:
    case 934:
    case 940:
    case 997:
    case 998:
    case 999:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChannelConfig_MessageType ChannelConfig::LCM_Vcu;
const ChannelConfig_MessageType ChannelConfig::LCM_Ins;
const ChannelConfig_MessageType ChannelConfig::LCM_Mobileye;
const ChannelConfig_MessageType ChannelConfig::LCM_Ultrasonic;
const ChannelConfig_MessageType ChannelConfig::LCM_Uwb;
const ChannelConfig_MessageType ChannelConfig::LCM_OFILMloc;
const ChannelConfig_MessageType ChannelConfig::LCM_MELaneLines;
const ChannelConfig_MessageType ChannelConfig::LCM_USDistance;
const ChannelConfig_MessageType ChannelConfig::LCM_LogitechCamera;
const ChannelConfig_MessageType ChannelConfig::LCM_RawIns;
const ChannelConfig_MessageType ChannelConfig::LCM_LocMap;
const ChannelConfig_MessageType ChannelConfig::LCM_NaviRoute;
const ChannelConfig_MessageType ChannelConfig::LCM_MapRDisOnePark;
const ChannelConfig_MessageType ChannelConfig::LCM_MapRDisTsr;
const ChannelConfig_MessageType ChannelConfig::LCM_MapTargetLanes;
const ChannelConfig_MessageType ChannelConfig::LCM_ProxyRequest;
const ChannelConfig_MessageType ChannelConfig::LCM_RawIns300C;
const ChannelConfig_MessageType ChannelConfig::LCM_Coupleout;
const ChannelConfig_MessageType ChannelConfig::LCM_AdpStatus;
const ChannelConfig_MessageType ChannelConfig::LCM_OFILMParkingSearch;
const ChannelConfig_MessageType ChannelConfig::LCM_EKFOut;
const ChannelConfig_MessageType ChannelConfig::LCM_MomentaLoc;
const ChannelConfig_MessageType ChannelConfig::LCM_OWNSINS;
const ChannelConfig_MessageType ChannelConfig::LCM_MEFreeSpace;
const ChannelConfig_MessageType ChannelConfig::LCM_MEObjects;
const ChannelConfig_MessageType ChannelConfig::LCM_PerceptionLines;
const ChannelConfig_MessageType ChannelConfig::LCM_BoschObjects;
const ChannelConfig_MessageType ChannelConfig::LCM_RDAObjects;
const ChannelConfig_MessageType ChannelConfig::LCM_FSDAObjects;
const ChannelConfig_MessageType ChannelConfig::LCM_PerceptionTSR;
const ChannelConfig_MessageType ChannelConfig::LCM_SV51FrontMwr;
const ChannelConfig_MessageType ChannelConfig::LCM_SV51FrontLeftMwr;
const ChannelConfig_MessageType ChannelConfig::LCM_SV51FrontRightMwr;
const ChannelConfig_MessageType ChannelConfig::LCM_SV51RearLeftMwr;
const ChannelConfig_MessageType ChannelConfig::LCM_SV51RearRightMwr;
const ChannelConfig_MessageType ChannelConfig::LCM_PerceptionObjects;
const ChannelConfig_MessageType ChannelConfig::LCM_TRACKED_OBJECTS;
const ChannelConfig_MessageType ChannelConfig::SystemStatus;
const ChannelConfig_MessageType ChannelConfig::Monitor;
const ChannelConfig_MessageType ChannelConfig::FixMsg;
const ChannelConfig_MessageType ChannelConfig::DriverIns;
const ChannelConfig_MessageType ChannelConfig::DriverUwb;
const ChannelConfig_MessageType ChannelConfig::IMU;
const ChannelConfig_MessageType ChannelConfig::DelimitedMsg;
const ChannelConfig_MessageType ChannelConfig::DriverMobileyeLane;
const ChannelConfig_MessageType ChannelConfig::DriverUltrasonic;
const ChannelConfig_MessageType ChannelConfig::DriverVcu;
const ChannelConfig_MessageType ChannelConfig::Drivermomentaloc;
const ChannelConfig_MessageType ChannelConfig::DrList;
const ChannelConfig_MessageType ChannelConfig::DrInsList;
const ChannelConfig_MessageType ChannelConfig::Pfs;
const ChannelConfig_MessageType ChannelConfig::PfsAfterMatch;
const ChannelConfig_MessageType ChannelConfig::GridList;
const ChannelConfig_MessageType ChannelConfig::Localization;
const ChannelConfig_MessageType ChannelConfig::LocalizationAbs;
const ChannelConfig_MessageType ChannelConfig::GridListMatchDisplay;
const ChannelConfig_MessageType ChannelConfig::LocalizationMapMatch;
const ChannelConfig_MessageType ChannelConfig::EngineLocMap;
const ChannelConfig_MessageType ChannelConfig::EngineTargetLanes;
const ChannelConfig_MessageType ChannelConfig::EngineTargetArrows;
const ChannelConfig_MessageType ChannelConfig::EngineRemainDistance;
const ChannelConfig_MessageType ChannelConfig::EngineSurMap;
const ChannelConfig_MessageType ChannelConfig::EngineLocMapBuffer;
const ChannelConfig_MessageType ChannelConfig::EngineTargetLanesBuffer;
const ChannelConfig_MessageType ChannelConfig::EngineTargetArrowsBuffer;
const ChannelConfig_MessageType ChannelConfig::EngineRemainDistanceBuffer;
const ChannelConfig_MessageType ChannelConfig::EngineSurMapBuffer;
const ChannelConfig_MessageType ChannelConfig::EngineDestination;
const ChannelConfig_MessageType ChannelConfig::GridLog;
const ChannelConfig_MessageType ChannelConfig::MeFreeSpace;
const ChannelConfig_MessageType ChannelConfig::ConstructionArea;
const ChannelConfig_MessageType ChannelConfig::MeHLB;
const ChannelConfig_MessageType ChannelConfig::Lane_Support;
const ChannelConfig_MessageType ChannelConfig::MeLDW;
const ChannelConfig_MessageType ChannelConfig::LS_ADV;
const ChannelConfig_MessageType ChannelConfig::MeLsRoadEdge;
const ChannelConfig_MessageType ChannelConfig::SematicLine;
const ChannelConfig_MessageType ChannelConfig::SematicMark;
const ChannelConfig_MessageType ChannelConfig::SL_Descrip;
const ChannelConfig_MessageType ChannelConfig::MeObjects;
const ChannelConfig_MessageType ChannelConfig::TFL;
const ChannelConfig_MessageType ChannelConfig::TSR;
const ChannelConfig_MessageType ChannelConfig::MeApplication;
const ChannelConfig_MessageType ChannelConfig::MeCommon;
const ChannelConfig_MessageType ChannelConfig::FCFVD;
const ChannelConfig_MessageType ChannelConfig::FCF_VRU;
const ChannelConfig_MessageType ChannelConfig::FailSafe;
const ChannelConfig_MessageType ChannelConfig::MessageType_MIN;
const ChannelConfig_MessageType ChannelConfig::MessageType_MAX;
const int ChannelConfig::MessageType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* ChannelConfig_Mode_descriptor() {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::file_level_enum_descriptors[1];
}
bool ChannelConfig_Mode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ChannelConfig_Mode ChannelConfig::RECEIVE_ONLY;
const ChannelConfig_Mode ChannelConfig::PUBLISH_ONLY;
const ChannelConfig_Mode ChannelConfig::DUPLEX;
const ChannelConfig_Mode ChannelConfig::RTE_RECEIVE_ONLY;
const ChannelConfig_Mode ChannelConfig::Mode_MIN;
const ChannelConfig_Mode ChannelConfig::Mode_MAX;
const int ChannelConfig::Mode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelConfig::kTypeFieldNumber;
const int ChannelConfig::kModeFieldNumber;
const int ChannelConfig::kMessageHistoryLimitFieldNumber;
const int ChannelConfig::kLatchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelConfig::ChannelConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.ipc.ChannelConfig)
}
ChannelConfig::ChannelConfig(const ChannelConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mode_, &from.mode_,
    reinterpret_cast<char*>(&message_history_limit_) -
    reinterpret_cast<char*>(&mode_) + sizeof(message_history_limit_));
  // @@protoc_insertion_point(copy_constructor:atd.ipc.ChannelConfig)
}

void ChannelConfig::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&mode_, 0, reinterpret_cast<char*>(&latch_) -
    reinterpret_cast<char*>(&mode_) + sizeof(latch_));
  type_ = 900;
  message_history_limit_ = 10;
}

ChannelConfig::~ChannelConfig() {
  // @@protoc_insertion_point(destructor:atd.ipc.ChannelConfig)
  SharedDtor();
}

void ChannelConfig::SharedDtor() {
}

void ChannelConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelConfig::descriptor() {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelConfig& ChannelConfig::default_instance() {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelConfig* ChannelConfig::New(::google::protobuf::Arena* arena) const {
  ChannelConfig* n = new ChannelConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.ipc.ChannelConfig)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&mode_, 0, reinterpret_cast<char*>(&latch_) -
      reinterpret_cast<char*>(&mode_) + sizeof(latch_));
    type_ = 900;
    message_history_limit_ = 10;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atd.ipc.ChannelConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .atd.ipc.ChannelConfig.MessageType type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::ipc::ChannelConfig_MessageType_IsValid(value)) {
            set_type(static_cast< ::atd::ipc::ChannelConfig_MessageType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .atd.ipc.ChannelConfig.Mode mode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::ipc::ChannelConfig_Mode_IsValid(value)) {
            set_mode(static_cast< ::atd::ipc::ChannelConfig_Mode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 message_history_limit = 3 [default = 10];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_message_history_limit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &message_history_limit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool latch = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_latch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &latch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.ipc.ChannelConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.ipc.ChannelConfig)
  return false;
#undef DO_
}

void ChannelConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.ipc.ChannelConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .atd.ipc.ChannelConfig.MessageType type = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // required .atd.ipc.ChannelConfig.Mode mode = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->mode(), output);
  }

  // optional int32 message_history_limit = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->message_history_limit(), output);
  }

  // optional bool latch = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->latch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:atd.ipc.ChannelConfig)
}

::google::protobuf::uint8* ChannelConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atd.ipc.ChannelConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .atd.ipc.ChannelConfig.MessageType type = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // required .atd.ipc.ChannelConfig.Mode mode = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->mode(), target);
  }

  // optional int32 message_history_limit = 3 [default = 10];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->message_history_limit(), target);
  }

  // optional bool latch = 4 [default = false];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->latch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atd.ipc.ChannelConfig)
  return target;
}

size_t ChannelConfig::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atd.ipc.ChannelConfig)
  size_t total_size = 0;

  if (has_mode()) {
    // required .atd.ipc.ChannelConfig.Mode mode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  if (has_type()) {
    // required .atd.ipc.ChannelConfig.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  return total_size;
}
size_t ChannelConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.ipc.ChannelConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required .atd.ipc.ChannelConfig.Mode mode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());

    // required .atd.ipc.ChannelConfig.MessageType type = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional bool latch = 4 [default = false];
  if (has_latch()) {
    total_size += 1 + 1;
  }

  // optional int32 message_history_limit = 3 [default = 10];
  if (has_message_history_limit()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->message_history_limit());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atd.ipc.ChannelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atd.ipc.ChannelConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atd.ipc.ChannelConfig)
    MergeFrom(*source);
  }
}

void ChannelConfig::MergeFrom(const ChannelConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.ipc.ChannelConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mode_ = from.mode_;
    }
    if (cached_has_bits & 0x00000002u) {
      latch_ = from.latch_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000008u) {
      message_history_limit_ = from.message_history_limit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChannelConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atd.ipc.ChannelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelConfig::CopyFrom(const ChannelConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.ipc.ChannelConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void ChannelConfig::Swap(ChannelConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelConfig::InternalSwap(ChannelConfig* other) {
  std::swap(mode_, other->mode_);
  std::swap(latch_, other->latch_);
  std::swap(type_, other->type_);
  std::swap(message_history_limit_, other->message_history_limit_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelConfig::GetMetadata() const {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelConfig

// required .atd.ipc.ChannelConfig.MessageType type = 1;
bool ChannelConfig::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChannelConfig::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ChannelConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChannelConfig::clear_type() {
  type_ = 900;
  clear_has_type();
}
::atd::ipc::ChannelConfig_MessageType ChannelConfig::type() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.type)
  return static_cast< ::atd::ipc::ChannelConfig_MessageType >(type_);
}
void ChannelConfig::set_type(::atd::ipc::ChannelConfig_MessageType value) {
  assert(::atd::ipc::ChannelConfig_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.type)
}

// required .atd.ipc.ChannelConfig.Mode mode = 2;
bool ChannelConfig::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChannelConfig::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
void ChannelConfig::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelConfig::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
::atd::ipc::ChannelConfig_Mode ChannelConfig::mode() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.mode)
  return static_cast< ::atd::ipc::ChannelConfig_Mode >(mode_);
}
void ChannelConfig::set_mode(::atd::ipc::ChannelConfig_Mode value) {
  assert(::atd::ipc::ChannelConfig_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.mode)
}

// optional int32 message_history_limit = 3 [default = 10];
bool ChannelConfig::has_message_history_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChannelConfig::set_has_message_history_limit() {
  _has_bits_[0] |= 0x00000008u;
}
void ChannelConfig::clear_has_message_history_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChannelConfig::clear_message_history_limit() {
  message_history_limit_ = 10;
  clear_has_message_history_limit();
}
::google::protobuf::int32 ChannelConfig::message_history_limit() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.message_history_limit)
  return message_history_limit_;
}
void ChannelConfig::set_message_history_limit(::google::protobuf::int32 value) {
  set_has_message_history_limit();
  message_history_limit_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.message_history_limit)
}

// optional bool latch = 4 [default = false];
bool ChannelConfig::has_latch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChannelConfig::set_has_latch() {
  _has_bits_[0] |= 0x00000002u;
}
void ChannelConfig::clear_has_latch() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChannelConfig::clear_latch() {
  latch_ = false;
  clear_has_latch();
}
bool ChannelConfig::latch() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.latch)
  return latch_;
}
void ChannelConfig::set_latch(bool value) {
  set_has_latch();
  latch_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.latch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChannelManagerConfig::kConfigFieldNumber;
const int ChannelManagerConfig::kIsLcmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChannelManagerConfig::ChannelManagerConfig()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.ipc.ChannelManagerConfig)
}
ChannelManagerConfig::ChannelManagerConfig(const ChannelManagerConfig& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      config_(from.config_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  is_lcm_ = from.is_lcm_;
  // @@protoc_insertion_point(copy_constructor:atd.ipc.ChannelManagerConfig)
}

void ChannelManagerConfig::SharedCtor() {
  _cached_size_ = 0;
  is_lcm_ = false;
}

ChannelManagerConfig::~ChannelManagerConfig() {
  // @@protoc_insertion_point(destructor:atd.ipc.ChannelManagerConfig)
  SharedDtor();
}

void ChannelManagerConfig::SharedDtor() {
}

void ChannelManagerConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelManagerConfig::descriptor() {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ChannelManagerConfig& ChannelManagerConfig::default_instance() {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChannelManagerConfig* ChannelManagerConfig::New(::google::protobuf::Arena* arena) const {
  ChannelManagerConfig* n = new ChannelManagerConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChannelManagerConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.ipc.ChannelManagerConfig)
  config_.Clear();
  is_lcm_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChannelManagerConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atd.ipc.ChannelManagerConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .atd.ipc.ChannelConfig config = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bool is_lcm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_is_lcm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_lcm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.ipc.ChannelManagerConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.ipc.ChannelManagerConfig)
  return false;
#undef DO_
}

void ChannelManagerConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.ipc.ChannelManagerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atd.ipc.ChannelConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->config(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // required bool is_lcm = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_lcm(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:atd.ipc.ChannelManagerConfig)
}

::google::protobuf::uint8* ChannelManagerConfig::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atd.ipc.ChannelManagerConfig)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atd.ipc.ChannelConfig config = 1;
  for (unsigned int i = 0, n = this->config_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->config(i), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // required bool is_lcm = 2;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_lcm(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atd.ipc.ChannelManagerConfig)
  return target;
}

size_t ChannelManagerConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.ipc.ChannelManagerConfig)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  // required bool is_lcm = 2;
  if (has_is_lcm()) {
    total_size += 1 + 1;
  }
  // repeated .atd.ipc.ChannelConfig config = 1;
  {
    unsigned int count = this->config_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelManagerConfig::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atd.ipc.ChannelManagerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  const ChannelManagerConfig* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ChannelManagerConfig>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atd.ipc.ChannelManagerConfig)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atd.ipc.ChannelManagerConfig)
    MergeFrom(*source);
  }
}

void ChannelManagerConfig::MergeFrom(const ChannelManagerConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.ipc.ChannelManagerConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  config_.MergeFrom(from.config_);
  if (from.has_is_lcm()) {
    set_is_lcm(from.is_lcm());
  }
}

void ChannelManagerConfig::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atd.ipc.ChannelManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelManagerConfig::CopyFrom(const ChannelManagerConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.ipc.ChannelManagerConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelManagerConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->config())) return false;
  return true;
}

void ChannelManagerConfig::Swap(ChannelManagerConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChannelManagerConfig::InternalSwap(ChannelManagerConfig* other) {
  config_.InternalSwap(&other->config_);
  std::swap(is_lcm_, other->is_lcm_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ChannelManagerConfig::GetMetadata() const {
  protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelManagerConfig

// repeated .atd.ipc.ChannelConfig config = 1;
int ChannelManagerConfig::config_size() const {
  return config_.size();
}
void ChannelManagerConfig::clear_config() {
  config_.Clear();
}
const ::atd::ipc::ChannelConfig& ChannelManagerConfig::config(int index) const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelManagerConfig.config)
  return config_.Get(index);
}
::atd::ipc::ChannelConfig* ChannelManagerConfig::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:atd.ipc.ChannelManagerConfig.config)
  return config_.Mutable(index);
}
::atd::ipc::ChannelConfig* ChannelManagerConfig::add_config() {
  // @@protoc_insertion_point(field_add:atd.ipc.ChannelManagerConfig.config)
  return config_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::ipc::ChannelConfig >*
ChannelManagerConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:atd.ipc.ChannelManagerConfig.config)
  return &config_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::ipc::ChannelConfig >&
ChannelManagerConfig::config() const {
  // @@protoc_insertion_point(field_list:atd.ipc.ChannelManagerConfig.config)
  return config_;
}

// required bool is_lcm = 2;
bool ChannelManagerConfig::has_is_lcm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChannelManagerConfig::set_has_is_lcm() {
  _has_bits_[0] |= 0x00000001u;
}
void ChannelManagerConfig::clear_has_is_lcm() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChannelManagerConfig::clear_is_lcm() {
  is_lcm_ = false;
  clear_has_is_lcm();
}
bool ChannelManagerConfig::is_lcm() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelManagerConfig.is_lcm)
  return is_lcm_;
}
void ChannelManagerConfig::set_is_lcm(bool value) {
  set_has_is_lcm();
  is_lcm_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelManagerConfig.is_lcm)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ipc
}  // namespace atd

// @@protoc_insertion_point(global_scope)
