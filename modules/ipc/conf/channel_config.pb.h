// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/conf/channel_config.proto

#ifndef PROTOBUF_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace atd {
namespace ipc {
class ChannelConfig;
class ChannelConfigDefaultTypeInternal;
extern ChannelConfigDefaultTypeInternal _ChannelConfig_default_instance_;
class ChannelManagerConfig;
class ChannelManagerConfigDefaultTypeInternal;
extern ChannelManagerConfigDefaultTypeInternal _ChannelManagerConfig_default_instance_;
}  // namespace ipc
}  // namespace atd

namespace atd {
namespace ipc {

namespace protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto

enum ChannelConfig_MessageType {
  ChannelConfig_MessageType_LCM_Vcu = 900,
  ChannelConfig_MessageType_LCM_Ins = 902,
  ChannelConfig_MessageType_LCM_Mobileye = 903,
  ChannelConfig_MessageType_LCM_Ultrasonic = 904,
  ChannelConfig_MessageType_LCM_Uwb = 905,
  ChannelConfig_MessageType_LCM_OFILMloc = 906,
  ChannelConfig_MessageType_LCM_MELaneLines = 907,
  ChannelConfig_MessageType_LCM_USDistance = 908,
  ChannelConfig_MessageType_LCM_LogitechCamera = 909,
  ChannelConfig_MessageType_LCM_RawIns = 910,
  ChannelConfig_MessageType_LCM_LocMap = 911,
  ChannelConfig_MessageType_LCM_NaviRoute = 912,
  ChannelConfig_MessageType_LCM_MapRDisOnePark = 913,
  ChannelConfig_MessageType_LCM_MapRDisTsr = 914,
  ChannelConfig_MessageType_LCM_MapTargetLanes = 915,
  ChannelConfig_MessageType_LCM_ProxyRequest = 916,
  ChannelConfig_MessageType_LCM_RawIns300C = 917,
  ChannelConfig_MessageType_LCM_Coupleout = 918,
  ChannelConfig_MessageType_LCM_AdpStatus = 919,
  ChannelConfig_MessageType_LCM_OFILMParkingSearch = 940,
  ChannelConfig_MessageType_LCM_EKFOut = 999,
  ChannelConfig_MessageType_LCM_MomentaLoc = 998,
  ChannelConfig_MessageType_LCM_OWNSINS = 997,
  ChannelConfig_MessageType_LCM_MEFreeSpace = 920,
  ChannelConfig_MessageType_LCM_MEObjects = 921,
  ChannelConfig_MessageType_LCM_PerceptionLines = 922,
  ChannelConfig_MessageType_LCM_BoschObjects = 923,
  ChannelConfig_MessageType_LCM_RDAObjects = 924,
  ChannelConfig_MessageType_LCM_FSDAObjects = 925,
  ChannelConfig_MessageType_LCM_PerceptionTSR = 926,
  ChannelConfig_MessageType_LCM_SV51FrontMwr = 928,
  ChannelConfig_MessageType_LCM_SV51FrontLeftMwr = 929,
  ChannelConfig_MessageType_LCM_SV51FrontRightMwr = 930,
  ChannelConfig_MessageType_LCM_SV51RearLeftMwr = 931,
  ChannelConfig_MessageType_LCM_SV51RearRightMwr = 932,
  ChannelConfig_MessageType_LCM_PerceptionObjects = 933,
  ChannelConfig_MessageType_LCM_TRACKED_OBJECTS = 934,
  ChannelConfig_MessageType_SystemStatus = 1,
  ChannelConfig_MessageType_Monitor = 2,
  ChannelConfig_MessageType_FixMsg = 10,
  ChannelConfig_MessageType_DriverIns = 11,
  ChannelConfig_MessageType_DriverUwb = 12,
  ChannelConfig_MessageType_IMU = 13,
  ChannelConfig_MessageType_DelimitedMsg = 14,
  ChannelConfig_MessageType_DriverMobileyeLane = 15,
  ChannelConfig_MessageType_DriverUltrasonic = 16,
  ChannelConfig_MessageType_DriverVcu = 17,
  ChannelConfig_MessageType_Drivermomentaloc = 18,
  ChannelConfig_MessageType_DrList = 30,
  ChannelConfig_MessageType_DrInsList = 31,
  ChannelConfig_MessageType_Pfs = 40,
  ChannelConfig_MessageType_PfsAfterMatch = 41,
  ChannelConfig_MessageType_GridList = 42,
  ChannelConfig_MessageType_Localization = 43,
  ChannelConfig_MessageType_LocalizationAbs = 44,
  ChannelConfig_MessageType_GridListMatchDisplay = 45,
  ChannelConfig_MessageType_LocalizationMapMatch = 46,
  ChannelConfig_MessageType_EngineLocMap = 50,
  ChannelConfig_MessageType_EngineTargetLanes = 51,
  ChannelConfig_MessageType_EngineTargetArrows = 52,
  ChannelConfig_MessageType_EngineRemainDistance = 53,
  ChannelConfig_MessageType_EngineSurMap = 54,
  ChannelConfig_MessageType_EngineLocMapBuffer = 55,
  ChannelConfig_MessageType_EngineTargetLanesBuffer = 56,
  ChannelConfig_MessageType_EngineTargetArrowsBuffer = 57,
  ChannelConfig_MessageType_EngineRemainDistanceBuffer = 58,
  ChannelConfig_MessageType_EngineSurMapBuffer = 59,
  ChannelConfig_MessageType_EngineDestination = 60,
  ChannelConfig_MessageType_GridLog = 61,
  ChannelConfig_MessageType_MeFreeSpace = 70,
  ChannelConfig_MessageType_ConstructionArea = 71,
  ChannelConfig_MessageType_MeHLB = 72,
  ChannelConfig_MessageType_Lane_Support = 73,
  ChannelConfig_MessageType_MeLDW = 75,
  ChannelConfig_MessageType_LS_ADV = 76,
  ChannelConfig_MessageType_MeLsRoadEdge = 77,
  ChannelConfig_MessageType_SematicLine = 78,
  ChannelConfig_MessageType_SematicMark = 79,
  ChannelConfig_MessageType_SL_Descrip = 80,
  ChannelConfig_MessageType_MeObjects = 81,
  ChannelConfig_MessageType_TFL = 82,
  ChannelConfig_MessageType_TSR = 83,
  ChannelConfig_MessageType_MeApplication = 84,
  ChannelConfig_MessageType_MeCommon = 85,
  ChannelConfig_MessageType_FCFVD = 86,
  ChannelConfig_MessageType_FCF_VRU = 87,
  ChannelConfig_MessageType_FailSafe = 88
};
bool ChannelConfig_MessageType_IsValid(int value);
const ChannelConfig_MessageType ChannelConfig_MessageType_MessageType_MIN = ChannelConfig_MessageType_SystemStatus;
const ChannelConfig_MessageType ChannelConfig_MessageType_MessageType_MAX = ChannelConfig_MessageType_LCM_EKFOut;
const int ChannelConfig_MessageType_MessageType_ARRAYSIZE = ChannelConfig_MessageType_MessageType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelConfig_MessageType_descriptor();
inline const ::std::string& ChannelConfig_MessageType_Name(ChannelConfig_MessageType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelConfig_MessageType_descriptor(), value);
}
inline bool ChannelConfig_MessageType_Parse(
    const ::std::string& name, ChannelConfig_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelConfig_MessageType>(
    ChannelConfig_MessageType_descriptor(), name, value);
}
enum ChannelConfig_Mode {
  ChannelConfig_Mode_RECEIVE_ONLY = 0,
  ChannelConfig_Mode_PUBLISH_ONLY = 1,
  ChannelConfig_Mode_DUPLEX = 2,
  ChannelConfig_Mode_RTE_RECEIVE_ONLY = 3
};
bool ChannelConfig_Mode_IsValid(int value);
const ChannelConfig_Mode ChannelConfig_Mode_Mode_MIN = ChannelConfig_Mode_RECEIVE_ONLY;
const ChannelConfig_Mode ChannelConfig_Mode_Mode_MAX = ChannelConfig_Mode_RTE_RECEIVE_ONLY;
const int ChannelConfig_Mode_Mode_ARRAYSIZE = ChannelConfig_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ChannelConfig_Mode_descriptor();
inline const ::std::string& ChannelConfig_Mode_Name(ChannelConfig_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ChannelConfig_Mode_descriptor(), value);
}
inline bool ChannelConfig_Mode_Parse(
    const ::std::string& name, ChannelConfig_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ChannelConfig_Mode>(
    ChannelConfig_Mode_descriptor(), name, value);
}
// ===================================================================

class ChannelConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:atd.ipc.ChannelConfig) */ {
 public:
  ChannelConfig();
  virtual ~ChannelConfig();

  ChannelConfig(const ChannelConfig& from);

  inline ChannelConfig& operator=(const ChannelConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelConfig& default_instance();

  static inline const ChannelConfig* internal_default_instance() {
    return reinterpret_cast<const ChannelConfig*>(
               &_ChannelConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChannelConfig* other);

  // implements Message ----------------------------------------------

  inline ChannelConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelConfig& from);
  void MergeFrom(const ChannelConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ChannelConfig_MessageType MessageType;
  static const MessageType LCM_Vcu =
    ChannelConfig_MessageType_LCM_Vcu;
  static const MessageType LCM_Ins =
    ChannelConfig_MessageType_LCM_Ins;
  static const MessageType LCM_Mobileye =
    ChannelConfig_MessageType_LCM_Mobileye;
  static const MessageType LCM_Ultrasonic =
    ChannelConfig_MessageType_LCM_Ultrasonic;
  static const MessageType LCM_Uwb =
    ChannelConfig_MessageType_LCM_Uwb;
  static const MessageType LCM_OFILMloc =
    ChannelConfig_MessageType_LCM_OFILMloc;
  static const MessageType LCM_MELaneLines =
    ChannelConfig_MessageType_LCM_MELaneLines;
  static const MessageType LCM_USDistance =
    ChannelConfig_MessageType_LCM_USDistance;
  static const MessageType LCM_LogitechCamera =
    ChannelConfig_MessageType_LCM_LogitechCamera;
  static const MessageType LCM_RawIns =
    ChannelConfig_MessageType_LCM_RawIns;
  static const MessageType LCM_LocMap =
    ChannelConfig_MessageType_LCM_LocMap;
  static const MessageType LCM_NaviRoute =
    ChannelConfig_MessageType_LCM_NaviRoute;
  static const MessageType LCM_MapRDisOnePark =
    ChannelConfig_MessageType_LCM_MapRDisOnePark;
  static const MessageType LCM_MapRDisTsr =
    ChannelConfig_MessageType_LCM_MapRDisTsr;
  static const MessageType LCM_MapTargetLanes =
    ChannelConfig_MessageType_LCM_MapTargetLanes;
  static const MessageType LCM_ProxyRequest =
    ChannelConfig_MessageType_LCM_ProxyRequest;
  static const MessageType LCM_RawIns300C =
    ChannelConfig_MessageType_LCM_RawIns300C;
  static const MessageType LCM_Coupleout =
    ChannelConfig_MessageType_LCM_Coupleout;
  static const MessageType LCM_AdpStatus =
    ChannelConfig_MessageType_LCM_AdpStatus;
  static const MessageType LCM_OFILMParkingSearch =
    ChannelConfig_MessageType_LCM_OFILMParkingSearch;
  static const MessageType LCM_EKFOut =
    ChannelConfig_MessageType_LCM_EKFOut;
  static const MessageType LCM_MomentaLoc =
    ChannelConfig_MessageType_LCM_MomentaLoc;
  static const MessageType LCM_OWNSINS =
    ChannelConfig_MessageType_LCM_OWNSINS;
  static const MessageType LCM_MEFreeSpace =
    ChannelConfig_MessageType_LCM_MEFreeSpace;
  static const MessageType LCM_MEObjects =
    ChannelConfig_MessageType_LCM_MEObjects;
  static const MessageType LCM_PerceptionLines =
    ChannelConfig_MessageType_LCM_PerceptionLines;
  static const MessageType LCM_BoschObjects =
    ChannelConfig_MessageType_LCM_BoschObjects;
  static const MessageType LCM_RDAObjects =
    ChannelConfig_MessageType_LCM_RDAObjects;
  static const MessageType LCM_FSDAObjects =
    ChannelConfig_MessageType_LCM_FSDAObjects;
  static const MessageType LCM_PerceptionTSR =
    ChannelConfig_MessageType_LCM_PerceptionTSR;
  static const MessageType LCM_SV51FrontMwr =
    ChannelConfig_MessageType_LCM_SV51FrontMwr;
  static const MessageType LCM_SV51FrontLeftMwr =
    ChannelConfig_MessageType_LCM_SV51FrontLeftMwr;
  static const MessageType LCM_SV51FrontRightMwr =
    ChannelConfig_MessageType_LCM_SV51FrontRightMwr;
  static const MessageType LCM_SV51RearLeftMwr =
    ChannelConfig_MessageType_LCM_SV51RearLeftMwr;
  static const MessageType LCM_SV51RearRightMwr =
    ChannelConfig_MessageType_LCM_SV51RearRightMwr;
  static const MessageType LCM_PerceptionObjects =
    ChannelConfig_MessageType_LCM_PerceptionObjects;
  static const MessageType LCM_TRACKED_OBJECTS =
    ChannelConfig_MessageType_LCM_TRACKED_OBJECTS;
  static const MessageType SystemStatus =
    ChannelConfig_MessageType_SystemStatus;
  static const MessageType Monitor =
    ChannelConfig_MessageType_Monitor;
  static const MessageType FixMsg =
    ChannelConfig_MessageType_FixMsg;
  static const MessageType DriverIns =
    ChannelConfig_MessageType_DriverIns;
  static const MessageType DriverUwb =
    ChannelConfig_MessageType_DriverUwb;
  static const MessageType IMU =
    ChannelConfig_MessageType_IMU;
  static const MessageType DelimitedMsg =
    ChannelConfig_MessageType_DelimitedMsg;
  static const MessageType DriverMobileyeLane =
    ChannelConfig_MessageType_DriverMobileyeLane;
  static const MessageType DriverUltrasonic =
    ChannelConfig_MessageType_DriverUltrasonic;
  static const MessageType DriverVcu =
    ChannelConfig_MessageType_DriverVcu;
  static const MessageType Drivermomentaloc =
    ChannelConfig_MessageType_Drivermomentaloc;
  static const MessageType DrList =
    ChannelConfig_MessageType_DrList;
  static const MessageType DrInsList =
    ChannelConfig_MessageType_DrInsList;
  static const MessageType Pfs =
    ChannelConfig_MessageType_Pfs;
  static const MessageType PfsAfterMatch =
    ChannelConfig_MessageType_PfsAfterMatch;
  static const MessageType GridList =
    ChannelConfig_MessageType_GridList;
  static const MessageType Localization =
    ChannelConfig_MessageType_Localization;
  static const MessageType LocalizationAbs =
    ChannelConfig_MessageType_LocalizationAbs;
  static const MessageType GridListMatchDisplay =
    ChannelConfig_MessageType_GridListMatchDisplay;
  static const MessageType LocalizationMapMatch =
    ChannelConfig_MessageType_LocalizationMapMatch;
  static const MessageType EngineLocMap =
    ChannelConfig_MessageType_EngineLocMap;
  static const MessageType EngineTargetLanes =
    ChannelConfig_MessageType_EngineTargetLanes;
  static const MessageType EngineTargetArrows =
    ChannelConfig_MessageType_EngineTargetArrows;
  static const MessageType EngineRemainDistance =
    ChannelConfig_MessageType_EngineRemainDistance;
  static const MessageType EngineSurMap =
    ChannelConfig_MessageType_EngineSurMap;
  static const MessageType EngineLocMapBuffer =
    ChannelConfig_MessageType_EngineLocMapBuffer;
  static const MessageType EngineTargetLanesBuffer =
    ChannelConfig_MessageType_EngineTargetLanesBuffer;
  static const MessageType EngineTargetArrowsBuffer =
    ChannelConfig_MessageType_EngineTargetArrowsBuffer;
  static const MessageType EngineRemainDistanceBuffer =
    ChannelConfig_MessageType_EngineRemainDistanceBuffer;
  static const MessageType EngineSurMapBuffer =
    ChannelConfig_MessageType_EngineSurMapBuffer;
  static const MessageType EngineDestination =
    ChannelConfig_MessageType_EngineDestination;
  static const MessageType GridLog =
    ChannelConfig_MessageType_GridLog;
  static const MessageType MeFreeSpace =
    ChannelConfig_MessageType_MeFreeSpace;
  static const MessageType ConstructionArea =
    ChannelConfig_MessageType_ConstructionArea;
  static const MessageType MeHLB =
    ChannelConfig_MessageType_MeHLB;
  static const MessageType Lane_Support =
    ChannelConfig_MessageType_Lane_Support;
  static const MessageType MeLDW =
    ChannelConfig_MessageType_MeLDW;
  static const MessageType LS_ADV =
    ChannelConfig_MessageType_LS_ADV;
  static const MessageType MeLsRoadEdge =
    ChannelConfig_MessageType_MeLsRoadEdge;
  static const MessageType SematicLine =
    ChannelConfig_MessageType_SematicLine;
  static const MessageType SematicMark =
    ChannelConfig_MessageType_SematicMark;
  static const MessageType SL_Descrip =
    ChannelConfig_MessageType_SL_Descrip;
  static const MessageType MeObjects =
    ChannelConfig_MessageType_MeObjects;
  static const MessageType TFL =
    ChannelConfig_MessageType_TFL;
  static const MessageType TSR =
    ChannelConfig_MessageType_TSR;
  static const MessageType MeApplication =
    ChannelConfig_MessageType_MeApplication;
  static const MessageType MeCommon =
    ChannelConfig_MessageType_MeCommon;
  static const MessageType FCFVD =
    ChannelConfig_MessageType_FCFVD;
  static const MessageType FCF_VRU =
    ChannelConfig_MessageType_FCF_VRU;
  static const MessageType FailSafe =
    ChannelConfig_MessageType_FailSafe;
  static inline bool MessageType_IsValid(int value) {
    return ChannelConfig_MessageType_IsValid(value);
  }
  static const MessageType MessageType_MIN =
    ChannelConfig_MessageType_MessageType_MIN;
  static const MessageType MessageType_MAX =
    ChannelConfig_MessageType_MessageType_MAX;
  static const int MessageType_ARRAYSIZE =
    ChannelConfig_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  MessageType_descriptor() {
    return ChannelConfig_MessageType_descriptor();
  }
  static inline const ::std::string& MessageType_Name(MessageType value) {
    return ChannelConfig_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(const ::std::string& name,
      MessageType* value) {
    return ChannelConfig_MessageType_Parse(name, value);
  }

  typedef ChannelConfig_Mode Mode;
  static const Mode RECEIVE_ONLY =
    ChannelConfig_Mode_RECEIVE_ONLY;
  static const Mode PUBLISH_ONLY =
    ChannelConfig_Mode_PUBLISH_ONLY;
  static const Mode DUPLEX =
    ChannelConfig_Mode_DUPLEX;
  static const Mode RTE_RECEIVE_ONLY =
    ChannelConfig_Mode_RTE_RECEIVE_ONLY;
  static inline bool Mode_IsValid(int value) {
    return ChannelConfig_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    ChannelConfig_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    ChannelConfig_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    ChannelConfig_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return ChannelConfig_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return ChannelConfig_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return ChannelConfig_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .atd.ipc.ChannelConfig.Mode mode = 2;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::atd::ipc::ChannelConfig_Mode mode() const;
  void set_mode(::atd::ipc::ChannelConfig_Mode value);

  // optional bool latch = 4 [default = false];
  bool has_latch() const;
  void clear_latch();
  static const int kLatchFieldNumber = 4;
  bool latch() const;
  void set_latch(bool value);

  // required .atd.ipc.ChannelConfig.MessageType type = 1;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::atd::ipc::ChannelConfig_MessageType type() const;
  void set_type(::atd::ipc::ChannelConfig_MessageType value);

  // optional int32 message_history_limit = 3 [default = 10];
  bool has_message_history_limit() const;
  void clear_message_history_limit();
  static const int kMessageHistoryLimitFieldNumber = 3;
  ::google::protobuf::int32 message_history_limit() const;
  void set_message_history_limit(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.ipc.ChannelConfig)
 private:
  void set_has_type();
  void clear_has_type();
  void set_has_mode();
  void clear_has_mode();
  void set_has_message_history_limit();
  void clear_has_message_history_limit();
  void set_has_latch();
  void clear_has_latch();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int mode_;
  bool latch_;
  int type_;
  ::google::protobuf::int32 message_history_limit_;
  friend struct protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChannelManagerConfig : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:atd.ipc.ChannelManagerConfig) */ {
 public:
  ChannelManagerConfig();
  virtual ~ChannelManagerConfig();

  ChannelManagerConfig(const ChannelManagerConfig& from);

  inline ChannelManagerConfig& operator=(const ChannelManagerConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChannelManagerConfig& default_instance();

  static inline const ChannelManagerConfig* internal_default_instance() {
    return reinterpret_cast<const ChannelManagerConfig*>(
               &_ChannelManagerConfig_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ChannelManagerConfig* other);

  // implements Message ----------------------------------------------

  inline ChannelManagerConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  ChannelManagerConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChannelManagerConfig& from);
  void MergeFrom(const ChannelManagerConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChannelManagerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.ipc.ChannelConfig config = 1;
  int config_size() const;
  void clear_config();
  static const int kConfigFieldNumber = 1;
  const ::atd::ipc::ChannelConfig& config(int index) const;
  ::atd::ipc::ChannelConfig* mutable_config(int index);
  ::atd::ipc::ChannelConfig* add_config();
  ::google::protobuf::RepeatedPtrField< ::atd::ipc::ChannelConfig >*
      mutable_config();
  const ::google::protobuf::RepeatedPtrField< ::atd::ipc::ChannelConfig >&
      config() const;

  // required bool is_lcm = 2;
  bool has_is_lcm() const;
  void clear_is_lcm();
  static const int kIsLcmFieldNumber = 2;
  bool is_lcm() const;
  void set_is_lcm(bool value);

  // @@protoc_insertion_point(class_scope:atd.ipc.ChannelManagerConfig)
 private:
  void set_has_is_lcm();
  void clear_has_is_lcm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::ipc::ChannelConfig > config_;
  bool is_lcm_;
  friend struct protobuf_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ChannelConfig

// required .atd.ipc.ChannelConfig.MessageType type = 1;
inline bool ChannelConfig::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChannelConfig::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChannelConfig::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChannelConfig::clear_type() {
  type_ = 900;
  clear_has_type();
}
inline ::atd::ipc::ChannelConfig_MessageType ChannelConfig::type() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.type)
  return static_cast< ::atd::ipc::ChannelConfig_MessageType >(type_);
}
inline void ChannelConfig::set_type(::atd::ipc::ChannelConfig_MessageType value) {
  assert(::atd::ipc::ChannelConfig_MessageType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.type)
}

// required .atd.ipc.ChannelConfig.Mode mode = 2;
inline bool ChannelConfig::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelConfig::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelConfig::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelConfig::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::atd::ipc::ChannelConfig_Mode ChannelConfig::mode() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.mode)
  return static_cast< ::atd::ipc::ChannelConfig_Mode >(mode_);
}
inline void ChannelConfig::set_mode(::atd::ipc::ChannelConfig_Mode value) {
  assert(::atd::ipc::ChannelConfig_Mode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.mode)
}

// optional int32 message_history_limit = 3 [default = 10];
inline bool ChannelConfig::has_message_history_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChannelConfig::set_has_message_history_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChannelConfig::clear_has_message_history_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChannelConfig::clear_message_history_limit() {
  message_history_limit_ = 10;
  clear_has_message_history_limit();
}
inline ::google::protobuf::int32 ChannelConfig::message_history_limit() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.message_history_limit)
  return message_history_limit_;
}
inline void ChannelConfig::set_message_history_limit(::google::protobuf::int32 value) {
  set_has_message_history_limit();
  message_history_limit_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.message_history_limit)
}

// optional bool latch = 4 [default = false];
inline bool ChannelConfig::has_latch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChannelConfig::set_has_latch() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChannelConfig::clear_has_latch() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChannelConfig::clear_latch() {
  latch_ = false;
  clear_has_latch();
}
inline bool ChannelConfig::latch() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelConfig.latch)
  return latch_;
}
inline void ChannelConfig::set_latch(bool value) {
  set_has_latch();
  latch_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelConfig.latch)
}

// -------------------------------------------------------------------

// ChannelManagerConfig

// repeated .atd.ipc.ChannelConfig config = 1;
inline int ChannelManagerConfig::config_size() const {
  return config_.size();
}
inline void ChannelManagerConfig::clear_config() {
  config_.Clear();
}
inline const ::atd::ipc::ChannelConfig& ChannelManagerConfig::config(int index) const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelManagerConfig.config)
  return config_.Get(index);
}
inline ::atd::ipc::ChannelConfig* ChannelManagerConfig::mutable_config(int index) {
  // @@protoc_insertion_point(field_mutable:atd.ipc.ChannelManagerConfig.config)
  return config_.Mutable(index);
}
inline ::atd::ipc::ChannelConfig* ChannelManagerConfig::add_config() {
  // @@protoc_insertion_point(field_add:atd.ipc.ChannelManagerConfig.config)
  return config_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::ipc::ChannelConfig >*
ChannelManagerConfig::mutable_config() {
  // @@protoc_insertion_point(field_mutable_list:atd.ipc.ChannelManagerConfig.config)
  return &config_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::ipc::ChannelConfig >&
ChannelManagerConfig::config() const {
  // @@protoc_insertion_point(field_list:atd.ipc.ChannelManagerConfig.config)
  return config_;
}

// required bool is_lcm = 2;
inline bool ChannelManagerConfig::has_is_lcm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChannelManagerConfig::set_has_is_lcm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChannelManagerConfig::clear_has_is_lcm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChannelManagerConfig::clear_is_lcm() {
  is_lcm_ = false;
  clear_has_is_lcm();
}
inline bool ChannelManagerConfig::is_lcm() const {
  // @@protoc_insertion_point(field_get:atd.ipc.ChannelManagerConfig.is_lcm)
  return is_lcm_;
}
inline void ChannelManagerConfig::set_is_lcm(bool value) {
  set_has_is_lcm();
  is_lcm_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.ChannelManagerConfig.is_lcm)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace ipc
}  // namespace atd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::atd::ipc::ChannelConfig_MessageType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atd::ipc::ChannelConfig_MessageType>() {
  return ::atd::ipc::ChannelConfig_MessageType_descriptor();
}
template <> struct is_proto_enum< ::atd::ipc::ChannelConfig_Mode> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atd::ipc::ChannelConfig_Mode>() {
  return ::atd::ipc::ChannelConfig_Mode_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fconf_2fchannel_5fconfig_2eproto__INCLUDED
