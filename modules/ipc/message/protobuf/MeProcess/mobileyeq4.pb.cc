// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/MeProcess/mobileyeq4.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/MeProcess/mobileyeq4.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace meprocess {
class Dt_Record_AppDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_App> {
} _Dt_Record_App_default_instance_;
class Dt_Record_CommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_Common> {
} _Dt_Record_Common_default_instance_;
class CACommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CACommon> {
} _CACommon_default_instance_;
class Dt_Record_ConstructionAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_ConstructionArea> {
} _Dt_Record_ConstructionArea_default_instance_;
class ConAreaDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConArea> {
} _ConArea_default_instance_;
class Dt_Record_FCFDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_FCF> {
} _Dt_Record_FCF_default_instance_;
class VRUCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VRUCommon> {
} _VRUCommon_default_instance_;
class Dt_Record_FCF_VRUDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_FCF_VRU> {
} _Dt_Record_FCF_VRU_default_instance_;
class FCF_VRUDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FCF_VRU> {
} _FCF_VRU_default_instance_;
class Dt_Record_FailSafeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_FailSafe> {
} _Dt_Record_FailSafe_default_instance_;
class FSPCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FSPCommon> {
} _FSPCommon_default_instance_;
class Dt_Record_MeFreeSpaceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_MeFreeSpace> {
} _Dt_Record_MeFreeSpace_default_instance_;
class FSPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FSPoint> {
} _FSPoint_default_instance_;
class Dt_Record_HLBDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_HLB> {
} _Dt_Record_HLB_default_instance_;
class Dt_Record_LDWDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_LDW> {
} _Dt_Record_LDW_default_instance_;
class LSCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LSCommon> {
} _LSCommon_default_instance_;
class LineParamDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LineParam> {
} _LineParam_default_instance_;
class Dt_Record_Lane_SupportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_Lane_Support> {
} _Dt_Record_Lane_Support_default_instance_;
class LS_Host_LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LS_Host_Line> {
} _LS_Host_Line_default_instance_;
class LS_Adjacent_LineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LS_Adjacent_Line> {
} _LS_Adjacent_Line_default_instance_;
class ADVCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ADVCommon> {
} _ADVCommon_default_instance_;
class Dt_Record_LS_ADVDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_LS_ADV> {
} _Dt_Record_LS_ADV_default_instance_;
class LS_INTPDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LS_INTP> {
} _LS_INTP_default_instance_;
class RoadEdgeCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoadEdgeCommon> {
} _RoadEdgeCommon_default_instance_;
class Dt_Record_LS_Road_EdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_LS_Road_Edge> {
} _Dt_Record_LS_Road_Edge_default_instance_;
class RoadEdgeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RoadEdge> {
} _RoadEdge_default_instance_;
class ObjCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ObjCommon> {
} _ObjCommon_default_instance_;
class Dt_Record_MeObjectsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_MeObjects> {
} _Dt_Record_MeObjects_default_instance_;
class MeObjectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MeObject> {
} _MeObject_default_instance_;
class SLDCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLDCommon> {
} _SLDCommon_default_instance_;
class Dt_Record_SL_DescripDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_SL_Descrip> {
} _Dt_Record_SL_Descrip_default_instance_;
class SLDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLD> {
} _SLD_default_instance_;
class SLCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SLCommon> {
} _SLCommon_default_instance_;
class Dt_Record_SematicLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_SematicLine> {
} _Dt_Record_SematicLine_default_instance_;
class SematicLineDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SematicLine> {
} _SematicLine_default_instance_;
class SMCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SMCommon> {
} _SMCommon_default_instance_;
class Dt_Record_SematicMarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_SematicMark> {
} _Dt_Record_SematicMark_default_instance_;
class SematicMarkDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SematicMark> {
} _SematicMark_default_instance_;
class TFLCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFLCommon> {
} _TFLCommon_default_instance_;
class Dt_Record_TFLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_TFL> {
} _Dt_Record_TFL_default_instance_;
class TFLDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TFL> {
} _TFL_default_instance_;
class TSRCommonDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TSRCommon> {
} _TSRCommon_default_instance_;
class Dt_Record_TSRDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Record_TSR> {
} _Dt_Record_TSR_default_instance_;
class TSRDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TSR> {
} _TSR_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Dt_Record_App_default_instance_.Shutdown();
  _Dt_Record_Common_default_instance_.Shutdown();
  _CACommon_default_instance_.Shutdown();
  _Dt_Record_ConstructionArea_default_instance_.Shutdown();
  _ConArea_default_instance_.Shutdown();
  _Dt_Record_FCF_default_instance_.Shutdown();
  _VRUCommon_default_instance_.Shutdown();
  _Dt_Record_FCF_VRU_default_instance_.Shutdown();
  _FCF_VRU_default_instance_.Shutdown();
  _Dt_Record_FailSafe_default_instance_.Shutdown();
  _FSPCommon_default_instance_.Shutdown();
  _Dt_Record_MeFreeSpace_default_instance_.Shutdown();
  _FSPoint_default_instance_.Shutdown();
  _Dt_Record_HLB_default_instance_.Shutdown();
  _Dt_Record_LDW_default_instance_.Shutdown();
  _LSCommon_default_instance_.Shutdown();
  _LineParam_default_instance_.Shutdown();
  _Dt_Record_Lane_Support_default_instance_.Shutdown();
  _LS_Host_Line_default_instance_.Shutdown();
  _LS_Adjacent_Line_default_instance_.Shutdown();
  _ADVCommon_default_instance_.Shutdown();
  _Dt_Record_LS_ADV_default_instance_.Shutdown();
  _LS_INTP_default_instance_.Shutdown();
  _RoadEdgeCommon_default_instance_.Shutdown();
  _Dt_Record_LS_Road_Edge_default_instance_.Shutdown();
  _RoadEdge_default_instance_.Shutdown();
  _ObjCommon_default_instance_.Shutdown();
  _Dt_Record_MeObjects_default_instance_.Shutdown();
  _MeObject_default_instance_.Shutdown();
  _SLDCommon_default_instance_.Shutdown();
  _Dt_Record_SL_Descrip_default_instance_.Shutdown();
  _SLD_default_instance_.Shutdown();
  _SLCommon_default_instance_.Shutdown();
  _Dt_Record_SematicLine_default_instance_.Shutdown();
  _SematicLine_default_instance_.Shutdown();
  _SMCommon_default_instance_.Shutdown();
  _Dt_Record_SematicMark_default_instance_.Shutdown();
  _SematicMark_default_instance_.Shutdown();
  _TFLCommon_default_instance_.Shutdown();
  _Dt_Record_TFL_default_instance_.Shutdown();
  _TFL_default_instance_.Shutdown();
  _TSRCommon_default_instance_.Shutdown();
  _Dt_Record_TSR_default_instance_.Shutdown();
  _TSR_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  _Dt_Record_App_default_instance_.DefaultConstruct();
  _Dt_Record_Common_default_instance_.DefaultConstruct();
  _CACommon_default_instance_.DefaultConstruct();
  _Dt_Record_ConstructionArea_default_instance_.DefaultConstruct();
  _ConArea_default_instance_.DefaultConstruct();
  _Dt_Record_FCF_default_instance_.DefaultConstruct();
  _VRUCommon_default_instance_.DefaultConstruct();
  _Dt_Record_FCF_VRU_default_instance_.DefaultConstruct();
  _FCF_VRU_default_instance_.DefaultConstruct();
  _Dt_Record_FailSafe_default_instance_.DefaultConstruct();
  _FSPCommon_default_instance_.DefaultConstruct();
  _Dt_Record_MeFreeSpace_default_instance_.DefaultConstruct();
  _FSPoint_default_instance_.DefaultConstruct();
  _Dt_Record_HLB_default_instance_.DefaultConstruct();
  _Dt_Record_LDW_default_instance_.DefaultConstruct();
  _LSCommon_default_instance_.DefaultConstruct();
  _LineParam_default_instance_.DefaultConstruct();
  _Dt_Record_Lane_Support_default_instance_.DefaultConstruct();
  _LS_Host_Line_default_instance_.DefaultConstruct();
  _LS_Adjacent_Line_default_instance_.DefaultConstruct();
  _ADVCommon_default_instance_.DefaultConstruct();
  _Dt_Record_LS_ADV_default_instance_.DefaultConstruct();
  _LS_INTP_default_instance_.DefaultConstruct();
  _RoadEdgeCommon_default_instance_.DefaultConstruct();
  _Dt_Record_LS_Road_Edge_default_instance_.DefaultConstruct();
  _RoadEdge_default_instance_.DefaultConstruct();
  _ObjCommon_default_instance_.DefaultConstruct();
  _Dt_Record_MeObjects_default_instance_.DefaultConstruct();
  _MeObject_default_instance_.DefaultConstruct();
  _SLDCommon_default_instance_.DefaultConstruct();
  _Dt_Record_SL_Descrip_default_instance_.DefaultConstruct();
  _SLD_default_instance_.DefaultConstruct();
  _SLCommon_default_instance_.DefaultConstruct();
  _Dt_Record_SematicLine_default_instance_.DefaultConstruct();
  _SematicLine_default_instance_.DefaultConstruct();
  _SMCommon_default_instance_.DefaultConstruct();
  _Dt_Record_SematicMark_default_instance_.DefaultConstruct();
  _SematicMark_default_instance_.DefaultConstruct();
  _TFLCommon_default_instance_.DefaultConstruct();
  _Dt_Record_TFL_default_instance_.DefaultConstruct();
  _TFL_default_instance_.DefaultConstruct();
  _TSRCommon_default_instance_.DefaultConstruct();
  _Dt_Record_TSR_default_instance_.DefaultConstruct();
  _TSR_default_instance_.DefaultConstruct();
  _Dt_Record_App_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_App_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_Common_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_Common_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_ConstructionArea_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_ConstructionArea_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_ConstructionArea_default_instance_.get_mutable()->stcacommon_ = const_cast< ::atd::meprocess::CACommon*>(
      ::atd::meprocess::CACommon::internal_default_instance());
  _Dt_Record_FCF_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_FCF_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_FCF_VRU_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_FCF_VRU_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_FCF_VRU_default_instance_.get_mutable()->stvrucommon_ = const_cast< ::atd::meprocess::VRUCommon*>(
      ::atd::meprocess::VRUCommon::internal_default_instance());
  _Dt_Record_FailSafe_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_FailSafe_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_MeFreeSpace_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_MeFreeSpace_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_MeFreeSpace_default_instance_.get_mutable()->stfspcommon_ = const_cast< ::atd::meprocess::FSPCommon*>(
      ::atd::meprocess::FSPCommon::internal_default_instance());
  _Dt_Record_HLB_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_HLB_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_LDW_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_LDW_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_Lane_Support_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_Lane_Support_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_Lane_Support_default_instance_.get_mutable()->stlscommon_ = const_cast< ::atd::meprocess::LSCommon*>(
      ::atd::meprocess::LSCommon::internal_default_instance());
  _Dt_Record_Lane_Support_default_instance_.get_mutable()->leftline_ = const_cast< ::atd::meprocess::LineParam*>(
      ::atd::meprocess::LineParam::internal_default_instance());
  _Dt_Record_Lane_Support_default_instance_.get_mutable()->rightline_ = const_cast< ::atd::meprocess::LineParam*>(
      ::atd::meprocess::LineParam::internal_default_instance());
  _Dt_Record_Lane_Support_default_instance_.get_mutable()->nextleftline_ = const_cast< ::atd::meprocess::LineParam*>(
      ::atd::meprocess::LineParam::internal_default_instance());
  _Dt_Record_Lane_Support_default_instance_.get_mutable()->nextrightline_ = const_cast< ::atd::meprocess::LineParam*>(
      ::atd::meprocess::LineParam::internal_default_instance());
  _Dt_Record_LS_ADV_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_LS_ADV_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_LS_ADV_default_instance_.get_mutable()->stadvcommon_ = const_cast< ::atd::meprocess::ADVCommon*>(
      ::atd::meprocess::ADVCommon::internal_default_instance());
  _Dt_Record_LS_Road_Edge_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_LS_Road_Edge_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_LS_Road_Edge_default_instance_.get_mutable()->stroadedgecommon_ = const_cast< ::atd::meprocess::RoadEdgeCommon*>(
      ::atd::meprocess::RoadEdgeCommon::internal_default_instance());
  _Dt_Record_MeObjects_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_MeObjects_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_MeObjects_default_instance_.get_mutable()->stobjcommon_ = const_cast< ::atd::meprocess::ObjCommon*>(
      ::atd::meprocess::ObjCommon::internal_default_instance());
  _Dt_Record_SL_Descrip_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_SL_Descrip_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_SL_Descrip_default_instance_.get_mutable()->stsldcommon_ = const_cast< ::atd::meprocess::SLDCommon*>(
      ::atd::meprocess::SLDCommon::internal_default_instance());
  _Dt_Record_SematicLine_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_SematicLine_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_SematicLine_default_instance_.get_mutable()->stslcommon_ = const_cast< ::atd::meprocess::SLCommon*>(
      ::atd::meprocess::SLCommon::internal_default_instance());
  _Dt_Record_SematicMark_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_SematicMark_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_SematicMark_default_instance_.get_mutable()->stsmcommon_ = const_cast< ::atd::meprocess::SMCommon*>(
      ::atd::meprocess::SMCommon::internal_default_instance());
  _Dt_Record_TFL_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_TFL_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_TFL_default_instance_.get_mutable()->sttflcommon_ = const_cast< ::atd::meprocess::TFLCommon*>(
      ::atd::meprocess::TFLCommon::internal_default_instance());
  _Dt_Record_TSR_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Dt_Record_TSR_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Dt_Record_TSR_default_instance_.get_mutable()->sttsrcommon_ = const_cast< ::atd::meprocess::TSRCommon*>(
      ::atd::meprocess::TSRCommon::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto

bool Dt_Record_App_Fatal_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 10:
    case 11:
    case 20:
    case 21:
    case 50:
    case 51:
    case 52:
    case 70:
    case 80:
    case 81:
    case 82:
    case 90:
    case 91:
    case 127:
    case 129:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_OK;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_ERROR;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_FS_ERROR;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_CALIBRATION_ERROR;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_GVPU_STATE_TERMINAL;
const Dt_Record_App_Fatal_errorType Dt_Record_App::EDR_WROTE_TO_FLASH;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_INIT_FAILED;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_INIT_CAMERA_INIT;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_I2C_VIDEO_GRAB_FAILED;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_I2C_CAMERA_SELF_RESET;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_I2C_TIMEOUT_ERROR;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_PATTERN_TEST;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_CAM_PARAMS_CCFT_CRC_FAILED;
const Dt_Record_App_Fatal_errorType Dt_Record_App::PLL_COMPARISON_ERROR;
const Dt_Record_App_Fatal_errorType Dt_Record_App::APP_CPS_STL_FAILED;
const Dt_Record_App_Fatal_errorType Dt_Record_App::PV_GENERAL_ERROR;
const Dt_Record_App_Fatal_errorType Dt_Record_App::PV_VERIFICATION_ERROR;
const Dt_Record_App_Fatal_errorType Dt_Record_App::Fatal_errorType_MIN;
const Dt_Record_App_Fatal_errorType Dt_Record_App::Fatal_errorType_MAX;
const int Dt_Record_App::Fatal_errorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_App_Minor_errorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 5001:
    case 5002:
    case 5003:
    case 5004:
    case 5005:
    case 5006:
    case 5007:
    case 5008:
    case 5009:
    case 5010:
    case 5011:
    case 5012:
    case 5013:
    case 5014:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_OK;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_ERROR;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERROR;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_LOAD_SETTING;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_LOAD_REGISTRY;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_INIT_REGISTRY;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_INIT;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_INIT_BB;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_INIT_BB_REG;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_OPEN_BLACKBOX;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_INIT_EP;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_POST_INIT_EP;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_INIT_CREATE_LOGGER;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_INIT_IL;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_CHECK_REG_VERSIONS;
const Dt_Record_App_Minor_errorType Dt_Record_App::BM_EM_ERR_FAILED_NB_OPERATION;
const Dt_Record_App_Minor_errorType Dt_Record_App::Minor_errorType_MIN;
const Dt_Record_App_Minor_errorType Dt_Record_App::Minor_errorType_MAX;
const int Dt_Record_App::Minor_errorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_App_Temperture_ddrType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_App_Temperture_ddrType Dt_Record_App::TEMP_ERROR;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::RANGE_OK;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::BELOW_SPEC;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::ABOVE_SPEC;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::ABOVE_85C;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::TEMP_EVEN_COLDER;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::TEMP_COOL;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::TEMP_RANGE_WARM;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::TEMP_RANGE_EVEN_WARMER;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::Temperture_ddrType_MIN;
const Dt_Record_App_Temperture_ddrType Dt_Record_App::Temperture_ddrType_MAX;
const int Dt_Record_App::Temperture_ddrType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_Common_Com_daytime_indicatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common::DAY;
const Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common::NIGHT;
const Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common::DUSK;
const Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common::Com_daytime_indicatorType_MIN;
const Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common::Com_daytime_indicatorType_MAX;
const int Dt_Record_Common::Com_daytime_indicatorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_Common_Com_hil_mode_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common::NOT_ACTIVE;
const Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common::ACTIVE;
const Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common::Com_hil_mode_statusType_MIN;
const Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common::Com_hil_mode_statusType_MAX;
const int Dt_Record_Common::Com_hil_mode_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_Common_Com_exposure_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_Common_Com_exposure_typeType Dt_Record_Common::TEXTURE;
const Dt_Record_Common_Com_exposure_typeType Dt_Record_Common::COLOR;
const Dt_Record_Common_Com_exposure_typeType Dt_Record_Common::Com_exposure_typeType_MIN;
const Dt_Record_Common_Com_exposure_typeType Dt_Record_Common::Com_exposure_typeType_MAX;
const int Dt_Record_Common::Com_exposure_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CACommon_Ca_region_codeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CACommon_Ca_region_codeType CACommon::WORLD;
const CACommon_Ca_region_codeType CACommon::EUROPE_x000D_;
const CACommon_Ca_region_codeType CACommon::UK;
const CACommon_Ca_region_codeType CACommon::GULF;
const CACommon_Ca_region_codeType CACommon::USA_x000D_;
const CACommon_Ca_region_codeType CACommon::CANADA_x000D_;
const CACommon_Ca_region_codeType CACommon::JAPAN_x000D_;
const CACommon_Ca_region_codeType CACommon::CHINA_x000D_;
const CACommon_Ca_region_codeType CACommon::SOUTH_AFRICA_x000D_;
const CACommon_Ca_region_codeType CACommon::KOREA_x000D_;
const CACommon_Ca_region_codeType CACommon::AUSTRALIA_x000D_;
const CACommon_Ca_region_codeType CACommon::Ca_region_codeType_MIN;
const CACommon_Ca_region_codeType CACommon::Ca_region_codeType_MAX;
const int CACommon::Ca_region_codeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ConArea_Ca_ca_object_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConArea_Ca_ca_object_typeType ConArea::INVALID;
const ConArea_Ca_ca_object_typeType ConArea::ROAD_CLOSED;
const ConArea_Ca_ca_object_typeType ConArea::CONE;
const ConArea_Ca_ca_object_typeType ConArea::BAREL;
const ConArea_Ca_ca_object_typeType ConArea::OBSTRUCTION_LEFT;
const ConArea_Ca_ca_object_typeType ConArea::OBSTRUCTION_RIGHT;
const ConArea_Ca_ca_object_typeType ConArea::Ca_ca_object_typeType_MIN;
const ConArea_Ca_ca_object_typeType ConArea::Ca_ca_object_typeType_MAX;
const int ConArea::Ca_ca_object_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_alert_fcvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::NONE;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_VALIDATION;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MAX_REL_V;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MIN_SPEED;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MAX_DISTANCE;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MIN_TIME_FOR_CCM_AFTER_CCM;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MIN_REL_V;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_LATERAL_AVOIDANCE;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MAX_WARN_LENGTH;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MAX_YAW_RATE;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_Safety_CRC;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MAX_SPEED_REDUCTION;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MAX_SPEED;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::AEB_MAX_STEERING_ANGLE;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::Fcf_vd_alert_fcvType_MIN;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF::Fcf_vd_alert_fcvType_MAX;
const int Dt_Record_FCF::Fcf_vd_alert_fcvType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Reserved_1Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::NO_FUSION;
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::AVOID;
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::CONTINUE;
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::START;
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::Reserved_1Type_MIN;
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::Reserved_1Type_MAX;
const int Dt_Record_FCF::Reserved_1Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_aeb_supp_aType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_VALIDATION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MAX_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MIN_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MIN_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_LATERAL_AVOIDANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MAX_WARN_LENGTH_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MAX_YAW_RATE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_Safety_CRC_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_REDUCTION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::FCF_VD_AEB_Supp_A_AEB_MAX_STEERING_ANGLE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::Fcf_vd_aeb_supp_aType_MIN;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF::Fcf_vd_aeb_supp_aType_MAX;
const int Dt_Record_FCF::Fcf_vd_aeb_supp_aType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_fcw_supp_aType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCF_VD_FCW_Supp_A_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_ACCELERETION_SUPPRESSION;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_NRTA_OOVER_SPEED;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_MAXIMUM_TIME_FOR_WARNING;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_LATERAL_AVIODANCE;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_ACCELERETION_SUPPRESSION_LENGTH;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_ABOVE_MAX_DISTANCE;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_NOT_READY_TO_ASSIST;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_CLUTCH_SUPPRESSIO;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_BRAKING_SUPPRESSION;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_NRTA_UNDER_SPEED;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::FCW_MINIMUM_TIME_BETWEEN_WARNINGS;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::BRAKING_SUPPRESSION_LENGTH;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::Fcf_vd_fcw_supp_aType_MIN;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF::Fcf_vd_fcw_supp_aType_MAX;
const int Dt_Record_FCF::Fcf_vd_fcw_supp_aType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_aeb_supp_bType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_VALIDATION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MAX_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MIN_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MIN_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_LATERAL_AVOIDANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MAX_WARN_LENGTH_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MAX_YAW_RATE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_Safety_CRC_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_REDUCTION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::FCF_VD_AEB_Supp_B_AEB_MAX_STEERING_ANGLE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::Fcf_vd_aeb_supp_bType_MIN;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF::Fcf_vd_aeb_supp_bType_MAX;
const int Dt_Record_FCF::Fcf_vd_aeb_supp_bType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_fcw_supp_bType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_NRTA_OOVER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_MAXIMUM_TIME_FOR_WARNING_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_LATERAL_AVIODANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_ABOVE_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_NOT_READY_TO_ASSIST_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_CLUTCH_SUPPRESSIO_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_BRAKING_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_NRTA_UNDER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::FCF_VD_FCW_Supp_B_BRAKING_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::Fcf_vd_fcw_supp_bType_MIN;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF::Fcf_vd_fcw_supp_bType_MAX;
const int Dt_Record_FCF::Fcf_vd_fcw_supp_bType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_aeb_supp_cType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_VALIDATION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MAX_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MIN_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MIN_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_LATERAL_AVOIDANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MAX_WARN_LENGTH_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MAX_YAW_RATE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_Safety_CRC_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_REDUCTION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::FCF_VD_AEB_Supp_C_AEB_MAX_STEERING_ANGLE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::Fcf_vd_aeb_supp_cType_MIN;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF::Fcf_vd_aeb_supp_cType_MAX;
const int Dt_Record_FCF::Fcf_vd_aeb_supp_cType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_fcw_supp_cType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_NRTA_OOVER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_MAXIMUM_TIME_FOR_WARNING_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_LATERAL_AVIODANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_ABOVE_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_NOT_READY_TO_ASSIST_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_CLUTCH_SUPPRESSIO_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_BRAKING_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_NRTA_UNDER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::FCF_VD_FCW_Supp_C_BRAKING_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::Fcf_vd_fcw_supp_cType_MIN;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF::Fcf_vd_fcw_supp_cType_MAX;
const int Dt_Record_FCF::Fcf_vd_fcw_supp_cType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_aeb_supp_dType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_VALIDATION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MAX_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MIN_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MIN_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_LATERAL_AVOIDANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MAX_WARN_LENGTH_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MAX_YAW_RATE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_Safety_CRC_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_REDUCTION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::FCF_VD_AEB_Supp_D_AEB_MAX_STEERING_ANGLE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::Fcf_vd_aeb_supp_dType_MIN;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF::Fcf_vd_aeb_supp_dType_MAX;
const int Dt_Record_FCF::Fcf_vd_aeb_supp_dType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_fcw_supp_dType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_NRTA_OOVER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_MAXIMUM_TIME_FOR_WARNING_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_LATERAL_AVIODANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_ABOVE_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_NOT_READY_TO_ASSIST_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_CLUTCH_SUPPRESSIO_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_BRAKING_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_NRTA_UNDER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::FCF_VD_FCW_Supp_D_BRAKING_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::Fcf_vd_fcw_supp_dType_MIN;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF::Fcf_vd_fcw_supp_dType_MAX;
const int Dt_Record_FCF::Fcf_vd_fcw_supp_dType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_aeb_supp_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_VALIDATION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MAX_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MIN_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MIN_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_LATERAL_AVOIDANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MAX_WARN_LENGTH_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MAX_YAW_RATE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_Safety_CRC_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_REDUCTION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::FCF_VD_AEB_Supp_E_AEB_MAX_STEERING_ANGLE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::Fcf_vd_aeb_supp_eType_MIN;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF::Fcf_vd_aeb_supp_eType_MAX;
const int Dt_Record_FCF::Fcf_vd_aeb_supp_eType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_fcw_supp_eType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_NRTA_OOVER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_MAXIMUM_TIME_FOR_WARNING_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_LATERAL_AVIODANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_ABOVE_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_NOT_READY_TO_ASSIST_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_CLUTCH_SUPPRESSIO_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_BRAKING_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_NRTA_UNDER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::FCF_VD_FCW_Supp_E_BRAKING_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::Fcf_vd_fcw_supp_eType_MIN;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF::Fcf_vd_fcw_supp_eType_MAX;
const int Dt_Record_FCF::Fcf_vd_fcw_supp_eType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_aeb_supp_fType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
    case 4096:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_VALIDATION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MAX_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MIN_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MIN_REL_V_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_LATERAL_AVOIDANCE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MAX_WARN_LENGTH_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MAX_YAW_RATE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_Safety_CRC_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_REDUCTION_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::FCF_VD_AEB_Supp_F_AEB_MAX_STEERING_ANGLE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::Fcf_vd_aeb_supp_fType_MIN;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF::Fcf_vd_aeb_supp_fType_MAX;
const int Dt_Record_FCF::Fcf_vd_aeb_supp_fType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FCF_Fcf_vd_fcw_supp_fType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
    case 128:
    case 256:
    case 512:
    case 1024:
    case 2048:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_NRTA_OOVER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_MAXIMUM_TIME_FOR_WARNING_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_LATERAL_AVIODANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_ABOVE_MAX_DISTANCE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_NOT_READY_TO_ASSIST_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_CLUTCH_SUPPRESSIO_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_BRAKING_SUPPRESSION_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_NRTA_UNDER_SPEED_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::FCF_VD_FCW_Supp_F_BRAKING_SUPPRESSION_LENGTH_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::Fcf_vd_fcw_supp_fType_MIN;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF::Fcf_vd_fcw_supp_fType_MAX;
const int Dt_Record_FCF::Fcf_vd_fcw_supp_fType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VRUCommon_Fcf_vru_fcvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VRUCommon_Fcf_vru_fcvType VRUCommon::NO_FUSION;
const VRUCommon_Fcf_vru_fcvType VRUCommon::AVOID;
const VRUCommon_Fcf_vru_fcvType VRUCommon::CONTINUE;
const VRUCommon_Fcf_vru_fcvType VRUCommon::START;
const VRUCommon_Fcf_vru_fcvType VRUCommon::Fcf_vru_fcvType_MIN;
const VRUCommon_Fcf_vru_fcvType VRUCommon::Fcf_vru_fcvType_MAX;
const int VRUCommon::Fcf_vru_fcvType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VRUCommon_Fcf_vru_supress_fcvType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::MAX_SPEED;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::MIN_SPEED;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::BRAKE;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::MAX_YAW;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::REAR_GEAR;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::STEERING_ANGLE;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::RESERVED_1;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::Fcf_vru_supress_fcvType_MIN;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon::Fcf_vru_supress_fcvType_MAX;
const int VRUCommon::Fcf_vru_supress_fcvType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FCF_VRU_Fcf_vru_alert_lType_IsValid(int value) {
  switch (value) {
    case 39270:
    case 43605:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FCF_VRU_Fcf_vru_alert_lType FCF_VRU::NO_ALERT;
const FCF_VRU_Fcf_vru_alert_lType FCF_VRU::ALERT;
const FCF_VRU_Fcf_vru_alert_lType FCF_VRU::Fcf_vru_alert_lType_MIN;
const FCF_VRU_Fcf_vru_alert_lType FCF_VRU::Fcf_vru_alert_lType_MAX;
const int FCF_VRU::Fcf_vru_alert_lType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FCF_VRU_Fcf_vru_supress_lType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::MAX_SPEED;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::MIN_SPEED;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::BRAKE;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::MAX_YAW;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::REAR_GEAR;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::STEERING_ANGLE;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::RESERVED_1;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::Fcf_vru_supress_lType_MIN;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU::Fcf_vru_supress_lType_MAX;
const int FCF_VRU::Fcf_vru_supress_lType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_impacted_technologiesType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::ACC;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RESERVED_1;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RESERVED_2;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RESERVED_3;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RESERVED_4;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RESERVED_5;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RESERVED_6;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RESERVED_7;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::TSR;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::FLA;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::PED;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::LD;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::VD;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::RPE;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::FREE_SPACE;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::HEATER;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::Fs_impacted_technologiesType_MIN;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe::Fs_impacted_technologiesType_MAX;
const int Dt_Record_FailSafe::Fs_impacted_technologiesType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_rain_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::NOT_READY;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::NONE;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::Fs_rain_0Type_25;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::Fs_rain_0Type_50;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::Fs_rain_0Type_75;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::Fs_rain_0Type_99;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::Fs_rain_0Type_MIN;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::Fs_rain_0Type_MAX;
const int Dt_Record_FailSafe::Fs_rain_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_fog_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::FS_Fog_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::FS_Fog_0_NONE_;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::FS_Fog_0_25_;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::FS_Fog_0_50_;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::FS_Fog_0_75_;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::FS_Fog_0_99_;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::Fs_fog_0Type_MIN;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::Fs_fog_0Type_MAX;
const int Dt_Record_FailSafe::Fs_fog_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_splashes_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::FS_Splashes_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::FS_Splashes_0_NONE_;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::FS_Splashes_0_25_;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::FS_Splashes_0_50_;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::FS_Splashes_0_75_;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::FS_Splashes_0_99_;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::Fs_splashes_0Type_MIN;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::Fs_splashes_0Type_MAX;
const int Dt_Record_FailSafe::Fs_splashes_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_self_glare_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::FS_Self_Glare_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::FS_Self_Glare_0_NONE_;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::FS_Self_Glare_0_25_;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::FS_Self_Glare_0_50_;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::FS_Self_Glare_0_75_;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::FS_Self_Glare_0_99_;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::Fs_self_glare_0Type_MIN;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::Fs_self_glare_0Type_MAX;
const int Dt_Record_FailSafe::Fs_self_glare_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_sun_ray_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::FS_Sun_Ray_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::FS_Sun_Ray_0_NONE_;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::FS_Sun_Ray_0_25_;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::FS_Sun_Ray_0_50_;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::FS_Sun_Ray_0_75_;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::FS_Sun_Ray_0_99_;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::Fs_sun_ray_0Type_MIN;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::Fs_sun_ray_0Type_MAX;
const int Dt_Record_FailSafe::Fs_sun_ray_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_low_sun_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::FS_Low_Sun_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::FS_Low_Sun_0_NONE_;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::FS_Low_Sun_0_25_;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::FS_Low_Sun_0_50_;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::FS_Low_Sun_0_75_;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::FS_Low_Sun_0_99_;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::Fs_low_sun_0Type_MIN;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::Fs_low_sun_0Type_MAX;
const int Dt_Record_FailSafe::Fs_low_sun_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_blur_image_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::FS_Blur_Image_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::FS_Blur_Image_0_NONE_;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::FS_Blur_Image_0_25_;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::FS_Blur_Image_0_50_;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::FS_Blur_Image_0_75_;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::FS_Blur_Image_0_99_;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::Fs_blur_image_0Type_MIN;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::Fs_blur_image_0Type_MAX;
const int Dt_Record_FailSafe::Fs_blur_image_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_partial_blockage_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::FS_Partial_Blockage_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::FS_Partial_Blockage_0_NONE_;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::FS_Partial_Blockage_0_25_;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::FS_Partial_Blockage_0_50_;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::FS_Partial_Blockage_0_75_;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::FS_Partial_Blockage_0_99_;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::Fs_partial_blockage_0Type_MIN;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::Fs_partial_blockage_0Type_MAX;
const int Dt_Record_FailSafe::Fs_partial_blockage_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_full_blockage_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::FS_Full_Blockage_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::FS_Full_Blockage_0_NONE_;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::FS_Full_Blockage_0_25_;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::FS_Full_Blockage_0_50_;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::FS_Full_Blockage_0_75_;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::FS_Full_Blockage_0_99_;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::Fs_full_blockage_0Type_MIN;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::Fs_full_blockage_0Type_MAX;
const int Dt_Record_FailSafe::Fs_full_blockage_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_frozen_windshield_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::FS_Frozen_Windshield_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::FS_Frozen_Windshield_0_NONE_;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::FS_Frozen_Windshield_0_25_;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::FS_Frozen_Windshield_0_50_;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::FS_Frozen_Windshield_0_75_;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::FS_Frozen_Windshield_0_99_;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::Fs_frozen_windshield_0Type_MIN;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::Fs_frozen_windshield_0Type_MAX;
const int Dt_Record_FailSafe::Fs_frozen_windshield_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_out_of_calib_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::FS_Out_Of_Calib_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::FS_Out_Of_Calib_0_NONE_;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::FS_Out_Of_Calib_0_25_;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::FS_Out_Of_Calib_0_50_;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::FS_Out_Of_Calib_0_75_;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::FS_Out_Of_Calib_0_99_;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::Fs_out_of_calib_0Type_MIN;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::Fs_out_of_calib_0Type_MAX;
const int Dt_Record_FailSafe::Fs_out_of_calib_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_FailSafe_Fs_out_of_focus_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe::FS_Out_Of_Focus_0_NONE_;
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe::TSR_OUT_OF_CALIB;
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe::TSR_OUT_OF_CALIB_AEB;
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe::TSR_OUT_OF_CALIB_YAW;
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe::TSR_OUT_OF_CALIB_HORIZON;
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe::Fs_out_of_focus_0Type_MIN;
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe::Fs_out_of_focus_0Type_MAX;
const int Dt_Record_FailSafe::Fs_out_of_focus_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FSPoint_Fsp_mobility_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FSPoint_Fsp_mobility_statusType FSPoint::NA_x000D_;
const FSPoint_Fsp_mobility_statusType FSPoint::MOVING_x000D_;
const FSPoint_Fsp_mobility_statusType FSPoint::NON_MOVING_x000D_;
const FSPoint_Fsp_mobility_statusType FSPoint::NEVER_MOVED;
const FSPoint_Fsp_mobility_statusType FSPoint::Fsp_mobility_statusType_MIN;
const FSPoint_Fsp_mobility_statusType FSPoint::Fsp_mobility_statusType_MAX;
const int FSPoint::Fsp_mobility_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FSPoint_Fsp_classification_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FSPoint_Fsp_classification_typeType FSPoint::NOT_AVAILABLE_x000D_;
const FSPoint_Fsp_classification_typeType FSPoint::ELEVATED_ROAD_STRUCTURE_x000D_;
const FSPoint_Fsp_classification_typeType FSPoint::CURB_x000D_;
const FSPoint_Fsp_classification_typeType FSPoint::NON_ELEVATED_ROAD_EDGE_x000D_;
const FSPoint_Fsp_classification_typeType FSPoint::NO_OBSTACLE_UP_TO_VISIBILITY_x000D_;
const FSPoint_Fsp_classification_typeType FSPoint::UNKNOWN;
const FSPoint_Fsp_classification_typeType FSPoint::Fsp_classification_typeType_MIN;
const FSPoint_Fsp_classification_typeType FSPoint::Fsp_classification_typeType_MAX;
const int FSPoint::Fsp_classification_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_HLB_Hlb_running_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::INVALID_TYPE;
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::HLB_OFF;
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::HLB_INACTIVE;
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::HLB_FULL;
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::Hlb_running_modeType_MIN;
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::Hlb_running_modeType_MAX;
const int Dt_Record_HLB::Hlb_running_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_HLB_Hlb_inactive_reasonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::INVALID_REASON;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::OBVIOUSLY_BRIGHT;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::LOW_DETECTION_RATE;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::OVER_FLOW;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::IN_GRACE;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::DEACTIVATED;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::DUSK_DELAY;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::Hlb_inactive_reasonType_MIN;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::Hlb_inactive_reasonType_MAX;
const int Dt_Record_HLB::Hlb_inactive_reasonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_HLB_Hlb_decisionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB::UNKNOWN;
const Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB::HIGH;
const Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB::LOW;
const Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB::Hlb_decisionType_MIN;
const Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB::Hlb_decisionType_MAX;
const int Dt_Record_HLB::Hlb_decisionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_HLB_Hlb_reasonType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::TAIL_LIGHT;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::LIT_NIGHT;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::LIT_NIGHT_US;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::LIT_NIGHT_ECE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::IN_VERY_SHARPE_CURVE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::IN_CURVE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::IN_BLINKING_TRAFFICLIGHT_SCENE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::APPROACHING_JUNCTION;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::ONCOMING;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::ONCOMING_GRACE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::TAIL_LIGHT_GRACE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::LOW_SPEED;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::STREET_LIGHTS;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::SL_SCENE_GRACE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::BRIGHT_SCENE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::OBVIOUSLY_BRIGHT_SCENE;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::Hlb_reasonType_MIN;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB::Hlb_reasonType_MAX;
const int Dt_Record_HLB::Hlb_reasonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_LDW_Ldw_suppresion_reasonType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::NO_SUPP;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::SPEED;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::RIGHT_SUPP;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::MISS_LINE;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::LANE_WIDTH;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::STEERING_RATE;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::RIGHT_TURN_ACTIVE;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::LEFT_TURN_ACTIVE;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::BRAKE;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::ACCELERATION;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::LEFT_SUPP;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::Ldw_suppresion_reasonType_MIN;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW::Ldw_suppresion_reasonType_MAX;
const int Dt_Record_LDW::Ldw_suppresion_reasonType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_LDW_Ldw_warning_status_leftType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW::SUPPRESSED;
const Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW::ENABLED;
const Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW::ACTIVE;
const Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW::Ldw_warning_status_leftType_MIN;
const Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW::Ldw_warning_status_leftType_MAX;
const int Dt_Record_LDW::Ldw_warning_status_leftType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_LDW_Ldw_warning_status_rightType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW::LDW_Warning_Status_Right_SUPPRESSED_;
const Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW::LDW_Warning_Status_Right_ENABLED_;
const Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW::LDW_Warning_Status_Right_ACTIVE_;
const Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW::Ldw_warning_status_rightType_MIN;
const Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW::Ldw_warning_status_rightType_MAX;
const int Dt_Record_LDW::Ldw_warning_status_rightType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Record_Lane_Support_CurHostLaneStutus_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::PerfectSituation;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::PreLBasedOnLaneWidth;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::PreRBaseOnLaneWidth;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::ApprochLaneCrossing;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::LCrossing;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::RCrossing;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::CurHostLaneStutus_MIN;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support::CurHostLaneStutus_MAX;
const int Dt_Record_Lane_Support::CurHostLaneStutus_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Host_Line_ColorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Host_Line_ColorType LS_Host_Line::UNDECIDED;
const LS_Host_Line_ColorType LS_Host_Line::WHITE;
const LS_Host_Line_ColorType LS_Host_Line::YELLOW_ORANGE_RED;
const LS_Host_Line_ColorType LS_Host_Line::BLUE_GREEN;
const LS_Host_Line_ColorType LS_Host_Line::ColorType_MIN;
const LS_Host_Line_ColorType LS_Host_Line::ColorType_MAX;
const int LS_Host_Line::ColorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Host_Line_Prediction_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Host_Line_Prediction_typeType LS_Host_Line::NONE;
const LS_Host_Line_Prediction_typeType LS_Host_Line::OCCLUDED;
const LS_Host_Line_Prediction_typeType LS_Host_Line::OTHER_SIDE;
const LS_Host_Line_Prediction_typeType LS_Host_Line::OVERRIDE;
const LS_Host_Line_Prediction_typeType LS_Host_Line::DIST_BASED_EXTRAPOLATION;
const LS_Host_Line_Prediction_typeType LS_Host_Line::HEADWAY_ORIENTED;
const LS_Host_Line_Prediction_typeType LS_Host_Line::Prediction_typeType_MIN;
const LS_Host_Line_Prediction_typeType LS_Host_Line::Prediction_typeType_MAX;
const int LS_Host_Line::Prediction_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Host_Line_Type_classificationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Host_Line_Type_classificationType LS_Host_Line::Type_Classification_UNDECIDED_;
const LS_Host_Line_Type_classificationType LS_Host_Line::SOLID;
const LS_Host_Line_Type_classificationType LS_Host_Line::DECELERATION;
const LS_Host_Line_Type_classificationType LS_Host_Line::HOV_LANE;
const LS_Host_Line_Type_classificationType LS_Host_Line::RESEREVED_1;
const LS_Host_Line_Type_classificationType LS_Host_Line::RESEREVED_2;
const LS_Host_Line_Type_classificationType LS_Host_Line::RESEREVED_3;
const LS_Host_Line_Type_classificationType LS_Host_Line::RESEREVED_4;
const LS_Host_Line_Type_classificationType LS_Host_Line::DASHEDUNDECIDED;
const LS_Host_Line_Type_classificationType LS_Host_Line::ROAD_EDGE_NA;
const LS_Host_Line_Type_classificationType LS_Host_Line::DLM;
const LS_Host_Line_Type_classificationType LS_Host_Line::BOTTS;
const LS_Host_Line_Type_classificationType LS_Host_Line::ELEVATED_STRUCTURE_NA;
const LS_Host_Line_Type_classificationType LS_Host_Line::CURB_NA;
const LS_Host_Line_Type_classificationType LS_Host_Line::CONES_POLES_NA;
const LS_Host_Line_Type_classificationType LS_Host_Line::PARKING_CARS_NA;
const LS_Host_Line_Type_classificationType LS_Host_Line::Type_classificationType_MIN;
const LS_Host_Line_Type_classificationType LS_Host_Line::Type_classificationType_MAX;
const int LS_Host_Line::Type_classificationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Host_Line_Dlm_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Host_Line_Dlm_typeType LS_Host_Line::NOT_DLM;
const LS_Host_Line_Dlm_typeType LS_Host_Line::SOLID_DASHED;
const LS_Host_Line_Dlm_typeType LS_Host_Line::DASHED_SOLID;
const LS_Host_Line_Dlm_typeType LS_Host_Line::SOLID_SOLID;
const LS_Host_Line_Dlm_typeType LS_Host_Line::DASHED_DASHED;
const LS_Host_Line_Dlm_typeType LS_Host_Line::DLM_Type_UNDECIDED_;
const LS_Host_Line_Dlm_typeType LS_Host_Line::Dlm_typeType_MIN;
const LS_Host_Line_Dlm_typeType LS_Host_Line::Dlm_typeType_MAX;
const int LS_Host_Line::Dlm_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Host_Line_Decel_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Host_Line_Decel_typeType LS_Host_Line::NO_DECEL;
const LS_Host_Line_Decel_typeType LS_Host_Line::DECEL_Type_SOLID_;
const LS_Host_Line_Decel_typeType LS_Host_Line::DASHED;
const LS_Host_Line_Decel_typeType LS_Host_Line::RESERVED_1;
const LS_Host_Line_Decel_typeType LS_Host_Line::RESERVED_2;
const LS_Host_Line_Decel_typeType LS_Host_Line::RESERVED_3;
const LS_Host_Line_Decel_typeType LS_Host_Line::Decel_typeType_MIN;
const LS_Host_Line_Decel_typeType LS_Host_Line::Decel_typeType_MAX;
const int LS_Host_Line::Decel_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Adjacent_Line_ColorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Adjacent_Line_ColorType LS_Adjacent_Line::UNDECIDED;
const LS_Adjacent_Line_ColorType LS_Adjacent_Line::WHITE;
const LS_Adjacent_Line_ColorType LS_Adjacent_Line::YELLOW_ORANGE_RED;
const LS_Adjacent_Line_ColorType LS_Adjacent_Line::BLUE_GREEN;
const LS_Adjacent_Line_ColorType LS_Adjacent_Line::ColorType_MIN;
const LS_Adjacent_Line_ColorType LS_Adjacent_Line::ColorType_MAX;
const int LS_Adjacent_Line::ColorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Adjacent_Line_Prediction_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::NONE;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::OCCLUDED;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::OTHER_SIDE;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::OVERRIDE;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::DIST_BASED_EXTRAPOLATION;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::HEADWAY_ORIENTED;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::Prediction_typeType_MIN;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line::Prediction_typeType_MAX;
const int LS_Adjacent_Line::Prediction_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Adjacent_Line_Type_classType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::Type_Class_UNDECIDED_;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::SOLID;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::DECELERATION;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::HOV_LANE;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::RESEREVED_1;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::RESEREVED_2;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::RESEREVED_3;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::RESEREVED_4;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::DASHEDUNDECIDED;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::ROAD_EDGE_NA;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::DLM;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::BOTTS;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::ELEVATED_STRUCTURE_NA;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::CURB_NA;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::CONES_POLES_NA;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::PARKING_CARS_NA;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::Type_classType_MIN;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line::Type_classType_MAX;
const int LS_Adjacent_Line::Type_classType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Adjacent_Line_Dlm_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::NOT_DLM;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::SOLID_DASHED;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::DASHED_SOLID;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::SOLID_SOLID;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::DASHED_DASHED;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::DLM_Type_UNDECIDED_;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::Dlm_typeType_MIN;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::Dlm_typeType_MAX;
const int LS_Adjacent_Line::Dlm_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Adjacent_Line_Decel_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::NO_DECEL;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::DECEL_Type_SOLID_;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::DASHED;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::RESERVED_1;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::RESERVED_2;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::RESERVED_3;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::Decel_typeType_MIN;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::Decel_typeType_MAX;
const int LS_Adjacent_Line::Decel_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_Adjacent_Line_Line_roleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::Line_Role_NONE_;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::HOST_LEFT;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::Line_Role_RESERVED_2_;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::Line_Role_RESERVED_3_;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::RESERVED_4;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::RESERVED_0;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::RESERVED_6;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::RESERVED_7;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::HOST_RIGHT;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::NEXT_LEFT__LEFT_LANEMARK;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::NEXT_LEFT__RIGHT_LANEMARK;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::NEXT_RIGHT__LEFT_LANEMARK;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::NEXT_RIGHT__RIGHT_LANEMARK;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::LEFT_ROAD_EDGE;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::RIGHT_ROAD_EDGE;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::Line_Role_RESERVED_1_;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::Line_roleType_MIN;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::Line_roleType_MAX;
const int LS_Adjacent_Line::Line_roleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_INTP_Intp_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_INTP_Intp_typeType LS_INTP::SPLIT;
const LS_INTP_Intp_typeType LS_INTP::MERGE;
const LS_INTP_Intp_typeType LS_INTP::Intp_typeType_MIN;
const LS_INTP_Intp_typeType LS_INTP::Intp_typeType_MAX;
const int LS_INTP::Intp_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool LS_INTP_Intp_line_roleType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const LS_INTP_Intp_line_roleType LS_INTP::NONE;
const LS_INTP_Intp_line_roleType LS_INTP::HOST_LEFT;
const LS_INTP_Intp_line_roleType LS_INTP::RESERVED_2;
const LS_INTP_Intp_line_roleType LS_INTP::RESERVED_3;
const LS_INTP_Intp_line_roleType LS_INTP::RESERVED_4;
const LS_INTP_Intp_line_roleType LS_INTP::RESERVED_5;
const LS_INTP_Intp_line_roleType LS_INTP::RESERVED_6;
const LS_INTP_Intp_line_roleType LS_INTP::RESERVED_7;
const LS_INTP_Intp_line_roleType LS_INTP::HOST_RIGHT;
const LS_INTP_Intp_line_roleType LS_INTP::NEXT_LEFT__LEFT_LANEMARK;
const LS_INTP_Intp_line_roleType LS_INTP::NEXT_LEFT__RIGHT_LANEMARK;
const LS_INTP_Intp_line_roleType LS_INTP::NEXT_RIGHT__LEFT_LANEMARK;
const LS_INTP_Intp_line_roleType LS_INTP::NEXT_RIGHT__RIGHT_LANEMARK;
const LS_INTP_Intp_line_roleType LS_INTP::LEFT_ROAD_EDGE;
const LS_INTP_Intp_line_roleType LS_INTP::RIGHT_ROAD_EDGE;
const LS_INTP_Intp_line_roleType LS_INTP::RESERVED_1;
const LS_INTP_Intp_line_roleType LS_INTP::Intp_line_roleType_MIN;
const LS_INTP_Intp_line_roleType LS_INTP::Intp_line_roleType_MAX;
const int LS_INTP::Intp_line_roleType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RoadEdge_Ls_road_edge_type_avg__classType_IsValid(int value) {
  switch (value) {
    case 0:
    case 3:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::UNDECIDED;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::ROAD_EDGE;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::ELEVATED_STRUCTURE;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::CURB;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::CONES_POLES;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::PARKING_CARS;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::Ls_road_edge_type_avg__classType_MIN;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::Ls_road_edge_type_avg__classType_MAX;
const int RoadEdge::Ls_road_edge_type_avg__classType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RoadEdge_Ls_road_edge_prediction_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::NONE;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::OCCLUDED;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::OTHER_SIDE;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::OVERRIDE;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::DIST_BASED_EXTRAPOLATION;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::HEADWAY_ORIENTED;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::Ls_road_edge_prediction_typeType_MIN;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge::Ls_road_edge_prediction_typeType_MAX;
const int RoadEdge::Ls_road_edge_prediction_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RoadEdge_Ls_road_edge_sideType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadEdge_Ls_road_edge_sideType RoadEdge::UNKNOWN;
const RoadEdge_Ls_road_edge_sideType RoadEdge::LEFT;
const RoadEdge_Ls_road_edge_sideType RoadEdge::RIGHT;
const RoadEdge_Ls_road_edge_sideType RoadEdge::Ls_road_edge_sideType_MIN;
const RoadEdge_Ls_road_edge_sideType RoadEdge::Ls_road_edge_sideType_MAX;
const int RoadEdge::Ls_road_edge_sideType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RoadEdge_Ls_road_edge_indexType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RoadEdge_Ls_road_edge_indexType RoadEdge::LS_Road_Edge_Index_UNKNOWN_;
const RoadEdge_Ls_road_edge_indexType RoadEdge::FIRST;
const RoadEdge_Ls_road_edge_indexType RoadEdge::SECOND;
const RoadEdge_Ls_road_edge_indexType RoadEdge::RESERVED;
const RoadEdge_Ls_road_edge_indexType RoadEdge::Ls_road_edge_indexType_MIN;
const RoadEdge_Ls_road_edge_indexType RoadEdge::Ls_road_edge_indexType_MAX;
const int RoadEdge::Ls_road_edge_indexType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ObjCommon_Obj_vd_cipv_lostType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjCommon_Obj_vd_cipv_lostType ObjCommon::NO_LOSS;
const ObjCommon_Obj_vd_cipv_lostType ObjCommon::LOST_TARGET_FOV_OUT;
const ObjCommon_Obj_vd_cipv_lostType ObjCommon::LOST_TARGET_FOV_IN;
const ObjCommon_Obj_vd_cipv_lostType ObjCommon::Obj_vd_cipv_lostType_MIN;
const ObjCommon_Obj_vd_cipv_lostType ObjCommon::Obj_vd_cipv_lostType_MAX;
const int ObjCommon::Obj_vd_cipv_lostType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ObjCommon_Obj_vd_allow_acceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ObjCommon_Obj_vd_allow_acceType ObjCommon::FREE_SPACE;
const ObjCommon_Obj_vd_allow_acceType ObjCommon::SPACE_NOT_FREE;
const ObjCommon_Obj_vd_allow_acceType ObjCommon::FREE_SPACE_UNKNOWN;
const ObjCommon_Obj_vd_allow_acceType ObjCommon::Obj_vd_allow_acceType_MIN;
const ObjCommon_Obj_vd_allow_acceType ObjCommon::Obj_vd_allow_acceType_MAX;
const int ObjCommon::Obj_vd_allow_acceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MeObject_Obj_measuring_statusType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeObject_Obj_measuring_statusType MeObject::OLD_NEW;
const MeObject_Obj_measuring_statusType MeObject::PREDICTED_MEASURED;
const MeObject_Obj_measuring_statusType MeObject::NOTVALID_VALID;
const MeObject_Obj_measuring_statusType MeObject::Obj_measuring_statusType_MIN;
const MeObject_Obj_measuring_statusType MeObject::Obj_measuring_statusType_MAX;
const int MeObject::Obj_measuring_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MeObject_Obj_object_classType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeObject_Obj_object_classType MeObject::INVALID_Obj_Type;
const MeObject_Obj_object_classType MeObject::CAR;
const MeObject_Obj_object_classType MeObject::TRUCK;
const MeObject_Obj_object_classType MeObject::BIKE;
const MeObject_Obj_object_classType MeObject::BICYCLE;
const MeObject_Obj_object_classType MeObject::PEDESTRIAN;
const MeObject_Obj_object_classType MeObject::GENERAL_OBJECT;
const MeObject_Obj_object_classType MeObject::ANIMAL;
const MeObject_Obj_object_classType MeObject::UNCERTAIN_VCL;
const MeObject_Obj_object_classType MeObject::Obj_object_classType_MIN;
const MeObject_Obj_object_classType MeObject::Obj_object_classType_MAX;
const int MeObject::Obj_object_classType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MeObject_Obj_lane_assignmentType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeObject_Obj_lane_assignmentType MeObject::UNKNOWN_lane_assign;
const MeObject_Obj_lane_assignmentType MeObject::LEFT_LEFT;
const MeObject_Obj_lane_assignmentType MeObject::LEFT;
const MeObject_Obj_lane_assignmentType MeObject::HOST;
const MeObject_Obj_lane_assignmentType MeObject::RIGHT;
const MeObject_Obj_lane_assignmentType MeObject::RIGHT_RIGHT;
const MeObject_Obj_lane_assignmentType MeObject::Obj_lane_assignmentType_MIN;
const MeObject_Obj_lane_assignmentType MeObject::Obj_lane_assignmentType_MAX;
const int MeObject::Obj_lane_assignmentType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MeObject_Obj_motion_category_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeObject_Obj_motion_category MeObject::INVALID;
const MeObject_Obj_motion_category MeObject::UNDEFINED;
const MeObject_Obj_motion_category MeObject::PASSING;
const MeObject_Obj_motion_category MeObject::PASSING_IN;
const MeObject_Obj_motion_category MeObject::PASSING_OUT;
const MeObject_Obj_motion_category MeObject::CLOSE_CUT_IN;
const MeObject_Obj_motion_category MeObject::MOVING_IN;
const MeObject_Obj_motion_category MeObject::MOVING_OUT;
const MeObject_Obj_motion_category MeObject::CROSSING;
const MeObject_Obj_motion_category MeObject::LTAP;
const MeObject_Obj_motion_category MeObject::RTAP;
const MeObject_Obj_motion_category MeObject::MOVING;
const MeObject_Obj_motion_category MeObject::PRECEDING;
const MeObject_Obj_motion_category MeObject::ONCOMING;
const MeObject_Obj_motion_category MeObject::Obj_motion_category_MIN;
const MeObject_Obj_motion_category MeObject::Obj_motion_category_MAX;
const int MeObject::Obj_motion_category_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MeObject_Obj_motion_status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeObject_Obj_motion_status MeObject::INVALID_STATUS;
const MeObject_Obj_motion_status MeObject::UNKONWN;
const MeObject_Obj_motion_status MeObject::MOVING_motion_status;
const MeObject_Obj_motion_status MeObject::STATIONARY;
const MeObject_Obj_motion_status MeObject::STOPPED;
const MeObject_Obj_motion_status MeObject::MOVING_SLOWLY;
const MeObject_Obj_motion_status MeObject::Obj_motion_status_MIN;
const MeObject_Obj_motion_status MeObject::Obj_motion_status_MAX;
const int MeObject::Obj_motion_status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MeObject_Obj_motion_orientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 6:
    case 7:
    case 9:
    case 11:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MeObject_Obj_motion_orientation MeObject::INVALID_ORIENTATION_STATUS;
const MeObject_Obj_motion_orientation MeObject::DRIFTING_RIGHT;
const MeObject_Obj_motion_orientation MeObject::CROSSING_RIGHT;
const MeObject_Obj_motion_orientation MeObject::OC_DRIFTING_RIGHT;
const MeObject_Obj_motion_orientation MeObject::ONCOMMING;
const MeObject_Obj_motion_orientation MeObject::OC_DRIFTING_LEFT;
const MeObject_Obj_motion_orientation MeObject::CROSSING_LEFT;
const MeObject_Obj_motion_orientation MeObject::DRIFTING_LEFT;
const MeObject_Obj_motion_orientation MeObject::PRECEEDING;
const MeObject_Obj_motion_orientation MeObject::UNKNOWN_ORIENTATION_STATUS;
const MeObject_Obj_motion_orientation MeObject::Obj_motion_orientation_MIN;
const MeObject_Obj_motion_orientation MeObject::Obj_motion_orientation_MAX;
const int MeObject::Obj_motion_orientation_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SLD_Sld_role_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SLD_Sld_role_0Type SLD::LEFT_2;
const SLD_Sld_role_0Type SLD::LEFT_1;
const SLD_Sld_role_0Type SLD::HOST;
const SLD_Sld_role_0Type SLD::RIGHT_1;
const SLD_Sld_role_0Type SLD::RIGHT_2;
const SLD_Sld_role_0Type SLD::Sld_role_0Type_MIN;
const SLD_Sld_role_0Type SLD::Sld_role_0Type_MAX;
const int SLD::Sld_role_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SLD_Sld_view_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SLD_Sld_view_0Type SLD::UNKNOWN;
const SLD_Sld_view_0Type SLD::FAR;
const SLD_Sld_view_0Type SLD::CLOSE;
const SLD_Sld_view_0Type SLD::Sld_view_0Type_MIN;
const SLD_Sld_view_0Type SLD::Sld_view_0Type_MAX;
const int SLD::Sld_view_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SLD_Sld_direction_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SLD_Sld_direction_0Type SLD::SLD_Direction_0_UNKNOWN_;
const SLD_Sld_direction_0Type SLD::STRAIGHT;
const SLD_Sld_direction_0Type SLD::RIGHT;
const SLD_Sld_direction_0Type SLD::LEFT;
const SLD_Sld_direction_0Type SLD::Sld_direction_0Type_MIN;
const SLD_Sld_direction_0Type SLD::Sld_direction_0Type_MAX;
const int SLD::Sld_direction_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SLD_Sld_type_0Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SLD_Sld_type_0Type SLD::UNKNOWN_CLASS;
const SLD_Sld_type_0Type SLD::REGULAR;
const SLD_Sld_type_0Type SLD::NO_LANE;
const SLD_Sld_type_0Type SLD::RESERVED_0;
const SLD_Sld_type_0Type SLD::RESERVED_1;
const SLD_Sld_type_0Type SLD::RESERVED_2;
const SLD_Sld_type_0Type SLD::RESERVED_3;
const SLD_Sld_type_0Type SLD::RESERVED_4;
const SLD_Sld_type_0Type SLD::RESERVED_5;
const SLD_Sld_type_0Type SLD::SHOULDER;
const SLD_Sld_type_0Type SLD::OPENING;
const SLD_Sld_type_0Type SLD::CLOSING;
const SLD_Sld_type_0Type SLD::BICYCLE_LANE;
const SLD_Sld_type_0Type SLD::PARKING;
const SLD_Sld_type_0Type SLD::CARPOOL;
const SLD_Sld_type_0Type SLD::BAY;
const SLD_Sld_type_0Type SLD::BUS_LANE;
const SLD_Sld_type_0Type SLD::Sld_type_0Type_MIN;
const SLD_Sld_type_0Type SLD::Sld_type_0Type_MAX;
const int SLD::Sld_type_0Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SematicLine_Sl_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SematicLine_Sl_typeType SematicLine::SOLID;
const SematicLine_Sl_typeType SematicLine::DASHED;
const SematicLine_Sl_typeType SematicLine::TRIANGULAR;
const SematicLine_Sl_typeType SematicLine::Sl_typeType_MIN;
const SematicLine_Sl_typeType SematicLine::Sl_typeType_MAX;
const int SematicLine::Sl_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SematicLine_Sl_colorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SematicLine_Sl_colorType SematicLine::GREEN_BLUE;
const SematicLine_Sl_colorType SematicLine::WHITE;
const SematicLine_Sl_colorType SematicLine::YELLOW_ORANGE_RED;
const SematicLine_Sl_colorType SematicLine::Sl_colorType_MIN;
const SematicLine_Sl_colorType SematicLine::Sl_colorType_MAX;
const int SematicLine::Sl_colorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SematicLine_Sl_measure_statusType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SematicLine_Sl_measure_statusType SematicLine::UNKNOWN;
const SematicLine_Sl_measure_statusType SematicLine::IN_IMAGE;
const SematicLine_Sl_measure_statusType SematicLine::PREDICTED;
const SematicLine_Sl_measure_statusType SematicLine::Sl_measure_statusType_MIN;
const SematicLine_Sl_measure_statusType SematicLine::Sl_measure_statusType_MAX;
const int SematicLine::Sl_measure_statusType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TFL_Tfl_colorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TFL_Tfl_colorType TFL::UNKNOWN_x000D_;
const TFL_Tfl_colorType TFL::RED_x000D_;
const TFL_Tfl_colorType TFL::YELLOW_x000D_;
const TFL_Tfl_colorType TFL::GREEN_x000D_;
const TFL_Tfl_colorType TFL::RED_YELLOW;
const TFL_Tfl_colorType TFL::Tfl_colorType_MIN;
const TFL_Tfl_colorType TFL::Tfl_colorType_MAX;
const int TFL::Tfl_colorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TFL_Tfl_relevance_directionType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TFL_Tfl_relevance_directionType TFL::TFL_Relevance_Direction_UNKNOWN_x000D__;
const TFL_Tfl_relevance_directionType TFL::FORWARED_CENTER_x000D_;
const TFL_Tfl_relevance_directionType TFL::FORWARED_RIGHT;
const TFL_Tfl_relevance_directionType TFL::LEFT_x000D_;
const TFL_Tfl_relevance_directionType TFL::RIGHT_x000D_;
const TFL_Tfl_relevance_directionType TFL::FORWARED_LEFT_x000D_;
const TFL_Tfl_relevance_directionType TFL::Tfl_relevance_directionType_MIN;
const TFL_Tfl_relevance_directionType TFL::Tfl_relevance_directionType_MAX;
const int TFL::Tfl_relevance_directionType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TFL_Tfl_structure_orientationType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TFL_Tfl_structure_orientationType TFL::TFL_Structure_Orientation_UNKNOWN_x000D__;
const TFL_Tfl_structure_orientationType TFL::VERTICAL_x000D_;
const TFL_Tfl_structure_orientationType TFL::HORIZENTAL;
const TFL_Tfl_structure_orientationType TFL::Tfl_structure_orientationType_MIN;
const TFL_Tfl_structure_orientationType TFL::Tfl_structure_orientationType_MAX;
const int TFL::Tfl_structure_orientationType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TFL_Tfl_modeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TFL_Tfl_modeType TFL::TFL_Mode_UNKNOWN_x000D__;
const TFL_Tfl_modeType TFL::CONTINUOUS_x000D_;
const TFL_Tfl_modeType TFL::BLINKING;
const TFL_Tfl_modeType TFL::Tfl_modeType_MIN;
const TFL_Tfl_modeType TFL::Tfl_modeType_MAX;
const int TFL::Tfl_modeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TFL_Tfl_shapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TFL_Tfl_shapeType TFL::TFL_Shape_UNKNOWN_x000D__;
const TFL_Tfl_shapeType TFL::CIRCULAR_x000D_;
const TFL_Tfl_shapeType TFL::DIAGONAL_x000D_;
const TFL_Tfl_shapeType TFL::FORWARED_x000D_;
const TFL_Tfl_shapeType TFL::ARROW_x000D_;
const TFL_Tfl_shapeType TFL::TFL_Shape_LEFT_x000D__;
const TFL_Tfl_shapeType TFL::PEDS;
const TFL_Tfl_shapeType TFL::TFL_Shape_RIGHT_x000D__;
const TFL_Tfl_shapeType TFL::Tfl_shapeType_MIN;
const TFL_Tfl_shapeType TFL::Tfl_shapeType_MAX;
const int TFL::Tfl_shapeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TSR_Tsr_relevancyType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TSR_Tsr_relevancyType TSR::RELEVANT_SIGN;
const TSR_Tsr_relevancyType TSR::HIGHWAY_EXIT_SIGN;
const TSR_Tsr_relevancyType TSR::OTHER_FILTER_REASON;
const TSR_Tsr_relevancyType TSR::LANE_ASSIGNMENT_SIGN;
const TSR_Tsr_relevancyType TSR::PARALLEL_ROAD_SIGN;
const TSR_Tsr_relevancyType TSR::SIGN_ON_TURN;
const TSR_Tsr_relevancyType TSR::FAR_IRRELEVANT_SIGN;
const TSR_Tsr_relevancyType TSR::INTERNAL_SIGN_CONTRADICTION;
const TSR_Tsr_relevancyType TSR::ERROR_SIGN_CODE;
const TSR_Tsr_relevancyType TSR::CIPV_IN_FRONT;
const TSR_Tsr_relevancyType TSR::CONTRADICT_ARROW_SIGN;
const TSR_Tsr_relevancyType TSR::Tsr_relevancyType_MIN;
const TSR_Tsr_relevancyType TSR::Tsr_relevancyType_MAX;
const int TSR::Tsr_relevancyType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TSR_Tsr_filter_typeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TSR_Tsr_filter_typeType TSR::NO_SLI_FILTER;
const TSR_Tsr_filter_typeType TSR::TRUCK;
const TSR_Tsr_filter_typeType TSR::EMBEDDED;
const TSR_Tsr_filter_typeType TSR::MINIMUN;
const TSR_Tsr_filter_typeType TSR::ROAD_NUMBER;
const TSR_Tsr_filter_typeType TSR::RESERVED_1;
const TSR_Tsr_filter_typeType TSR::RESERVED_2;
const TSR_Tsr_filter_typeType TSR::RESERVED_3;
const TSR_Tsr_filter_typeType TSR::Tsr_filter_typeType_MIN;
const TSR_Tsr_filter_typeType TSR::Tsr_filter_typeType_MAX;
const int TSR::Tsr_filter_typeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TSR_Tsr_sign_shapeType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TSR_Tsr_sign_shapeType TSR::UNKNON;
const TSR_Tsr_sign_shapeType TSR::CIRCLE;
const TSR_Tsr_sign_shapeType TSR::RECTANGLE;
const TSR_Tsr_sign_shapeType TSR::TRIANGLE_UP;
const TSR_Tsr_sign_shapeType TSR::TRIANGLE_DOWN;
const TSR_Tsr_sign_shapeType TSR::DIAMOND;
const TSR_Tsr_sign_shapeType TSR::RESERVED_0;
const TSR_Tsr_sign_shapeType TSR::TSR_Sign_Shape_RESERVED_2_;
const TSR_Tsr_sign_shapeType TSR::TSR_Sign_Shape_RESERVED_3_;
const TSR_Tsr_sign_shapeType TSR::Tsr_sign_shapeType_MIN;
const TSR_Tsr_sign_shapeType TSR::Tsr_sign_shapeType_MAX;
const int TSR::Tsr_sign_shapeType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool TSR_Tsr_sign_structureType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const TSR_Tsr_sign_structureType TSR::UNKNOWN;
const TSR_Tsr_sign_structureType TSR::STANDARD;
const TSR_Tsr_sign_structureType TSR::VARIABLE;
const TSR_Tsr_sign_structureType TSR::ELECTRONIC;
const TSR_Tsr_sign_structureType TSR::Tsr_sign_structureType_MIN;
const TSR_Tsr_sign_structureType TSR::Tsr_sign_structureType_MAX;
const int TSR::Tsr_sign_structureType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_App::kReserved1FieldNumber;
const int Dt_Record_App::kApplicationMessageVersionFieldNumber;
const int Dt_Record_App::kMainStateFieldNumber;
const int Dt_Record_App::kSubStateFieldNumber;
const int Dt_Record_App::kEyeqProcessIndexFieldNumber;
const int Dt_Record_App::kEyeqTimestampFieldNumber;
const int Dt_Record_App::kEyeqCurrentTimestampFieldNumber;
const int Dt_Record_App::kApplicationDiagnosticsPart1FieldNumber;
const int Dt_Record_App::kApplicationDiagnosticsPart2FieldNumber;
const int Dt_Record_App::kFatalErrorFieldNumber;
const int Dt_Record_App::kReserved2FieldNumber;
const int Dt_Record_App::kMinorErrorFieldNumber;
const int Dt_Record_App::kEyeqtemperature1FieldNumber;
const int Dt_Record_App::kEyeqtemperature2FieldNumber;
const int Dt_Record_App::kTempertureDdrFieldNumber;
const int Dt_Record_App::kReserved4FieldNumber;
const int Dt_Record_App::kCfgStatusFieldNumber;
const int Dt_Record_App::kSpihealthstatusFieldNumber;
const int Dt_Record_App::kSpierrorsFieldNumber;
const int Dt_Record_App::kReserved5FieldNumber;
const int Dt_Record_App::kValidCamerasInformationFieldNumber;
const int Dt_Record_App::kCamera1TemperatureFieldNumber;
const int Dt_Record_App::kCamera2TemperatureFieldNumber;
const int Dt_Record_App::kCamera3TemperatureFieldNumber;
const int Dt_Record_App::kCamera4TemperatureFieldNumber;
const int Dt_Record_App::kCamera5TemperatureFieldNumber;
const int Dt_Record_App::kCamera6TemperatureFieldNumber;
const int Dt_Record_App::kCamera7TemperatureFieldNumber;
const int Dt_Record_App::kCamera8TemperatureFieldNumber;
const int Dt_Record_App::kCamera1VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera2VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera3VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera4VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera5VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera6VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera7VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera8VideoerrorrangeFieldNumber;
const int Dt_Record_App::kCamera1VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera2VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera3VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera4VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera5VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera6VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera7VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera8VideoerrorflagsPt1FieldNumber;
const int Dt_Record_App::kCamera1VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kCamera2VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kCamera3VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kCamera4VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kCamera5VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kCamera6VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kCamera7VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kCamera8VideoerrorflagsPt2FieldNumber;
const int Dt_Record_App::kHeaderFieldNumber;
const int Dt_Record_App::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_App::Dt_Record_App()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_App)
}
Dt_Record_App::Dt_Record_App(const Dt_Record_App& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&reserved_1_, &from.reserved_1_,
    reinterpret_cast<char*>(&temperture_ddr_) -
    reinterpret_cast<char*>(&reserved_1_) + sizeof(temperture_ddr_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_App)
}

void Dt_Record_App::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&camera8_videoerrorflags_pt2_) -
    reinterpret_cast<char*>(&header_) + sizeof(camera8_videoerrorflags_pt2_));
  temperture_ddr_ = -1;
  _cached_size_ = 0;
}

Dt_Record_App::~Dt_Record_App() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_App)
  SharedDtor();
}

void Dt_Record_App::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Dt_Record_App::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_App& Dt_Record_App::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_App* Dt_Record_App::New(::google::protobuf::Arena* arena) const {
  Dt_Record_App* n = new Dt_Record_App;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_App::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_App)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&reserved_1_, 0, reinterpret_cast<char*>(&eyeq_timestamp_) -
      reinterpret_cast<char*>(&reserved_1_) + sizeof(eyeq_timestamp_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&eyeq_current_timestamp_, 0, reinterpret_cast<char*>(&eyeqtemperature2_) -
      reinterpret_cast<char*>(&eyeq_current_timestamp_) + sizeof(eyeqtemperature2_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&reserved_4_, 0, reinterpret_cast<char*>(&camera2_temperature_) -
      reinterpret_cast<char*>(&reserved_4_) + sizeof(camera2_temperature_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&camera3_temperature_, 0, reinterpret_cast<char*>(&camera2_videoerrorrange_) -
      reinterpret_cast<char*>(&camera3_temperature_) + sizeof(camera2_videoerrorrange_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&camera3_videoerrorrange_, 0, reinterpret_cast<char*>(&camera2_videoerrorflags_pt1_) -
      reinterpret_cast<char*>(&camera3_videoerrorrange_) + sizeof(camera2_videoerrorflags_pt1_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&camera3_videoerrorflags_pt1_, 0, reinterpret_cast<char*>(&camera2_videoerrorflags_pt2_) -
      reinterpret_cast<char*>(&camera3_videoerrorflags_pt1_) + sizeof(camera2_videoerrorflags_pt2_));
  }
  if (_has_bits_[48 / 32] & 8323072u) {
    ::memset(&camera3_videoerrorflags_pt2_, 0, reinterpret_cast<char*>(&camera8_videoerrorflags_pt2_) -
      reinterpret_cast<char*>(&camera3_videoerrorflags_pt2_) + sizeof(camera8_videoerrorflags_pt2_));
    temperture_ddr_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_App::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_App)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 reserved_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 application_message_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_application_message_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &application_message_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 main_state = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_main_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &main_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sub_state = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sub_state();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sub_state_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eyeq_process_index = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_eyeq_process_index();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eyeq_process_index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eyeq_timestamp = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_eyeq_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eyeq_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float eyeq_current_timestamp = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_eyeq_current_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &eyeq_current_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 application_diagnostics_part_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_application_diagnostics_part_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &application_diagnostics_part_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 application_diagnostics_part_2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_application_diagnostics_part_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &application_diagnostics_part_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_App.Fatal_errorType fatal_error = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_App_Fatal_errorType_IsValid(value)) {
            set_fatal_error(static_cast< ::atd::meprocess::Dt_Record_App_Fatal_errorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_App.Minor_errorType minor_error = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_App_Minor_errorType_IsValid(value)) {
            set_minor_error(static_cast< ::atd::meprocess::Dt_Record_App_Minor_errorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eyeqtemperature1 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_eyeqtemperature1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eyeqtemperature1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 eyeqtemperature2 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_eyeqtemperature2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eyeqtemperature2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_App.Temperture_ddrType temperture_ddr = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_App_Temperture_ddrType_IsValid(value)) {
            set_temperture_ddr(static_cast< ::atd::meprocess::Dt_Record_App_Temperture_ddrType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(120u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 cfg_status = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_cfg_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cfg_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 spihealthstatus = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_spihealthstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spihealthstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 spierrors = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_spierrors();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &spierrors_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_5 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_reserved_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 valid_cameras_information = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_valid_cameras_information();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &valid_cameras_information_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera1_temperature = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_camera1_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera1_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera2_temperature = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_camera2_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera2_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera3_temperature = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_camera3_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera3_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera4_temperature = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_camera4_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera4_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera5_temperature = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_camera5_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera5_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera6_temperature = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_camera6_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera6_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera7_temperature = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_camera7_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera7_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera8_temperature = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_camera8_temperature();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera8_temperature_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera1_videoerrorrange = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(240u)) {
          set_has_camera1_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera1_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera2_videoerrorrange = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_camera2_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera2_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera3_videoerrorrange = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_camera3_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera3_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera4_videoerrorrange = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_camera4_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera4_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera5_videoerrorrange = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_camera5_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera5_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera6_videoerrorrange = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_camera6_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera6_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera7_videoerrorrange = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(288u)) {
          set_has_camera7_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera7_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 camera8_videoerrorrange = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(296u)) {
          set_has_camera8_videoerrorrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &camera8_videoerrorrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera1_videoerrorflags_pt1 = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(309u)) {
          set_has_camera1_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera1_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera2_videoerrorflags_pt1 = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(317u)) {
          set_has_camera2_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera2_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera3_videoerrorflags_pt1 = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(325u)) {
          set_has_camera3_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera3_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera4_videoerrorflags_pt1 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(333u)) {
          set_has_camera4_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera4_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera5_videoerrorflags_pt1 = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(341u)) {
          set_has_camera5_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera5_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera6_videoerrorflags_pt1 = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(349u)) {
          set_has_camera6_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera6_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera7_videoerrorflags_pt1 = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(357u)) {
          set_has_camera7_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera7_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera8_videoerrorflags_pt1 = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(365u)) {
          set_has_camera8_videoerrorflags_pt1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera8_videoerrorflags_pt1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera1_videoerrorflags_pt2 = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(373u)) {
          set_has_camera1_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera1_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera2_videoerrorflags_pt2 = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(381u)) {
          set_has_camera2_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera2_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera3_videoerrorflags_pt2 = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(389u)) {
          set_has_camera3_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera3_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera4_videoerrorflags_pt2 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(397u)) {
          set_has_camera4_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera4_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera5_videoerrorflags_pt2 = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(405u)) {
          set_has_camera5_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera5_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera6_videoerrorflags_pt2 = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(413u)) {
          set_has_camera6_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera6_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera7_videoerrorflags_pt2 = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(421u)) {
          set_has_camera7_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera7_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float camera8_videoerrorflags_pt2 = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(429u)) {
          set_has_camera8_videoerrorflags_pt2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &camera8_videoerrorflags_pt2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(434u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(442u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_App)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_App)
  return false;
#undef DO_
}

void Dt_Record_App::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_App)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 reserved_1 = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reserved_1(), output);
  }

  // optional int32 application_message_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->application_message_version(), output);
  }

  // optional int32 main_state = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->main_state(), output);
  }

  // optional int32 sub_state = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sub_state(), output);
  }

  // optional float eyeq_process_index = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->eyeq_process_index(), output);
  }

  // optional float eyeq_timestamp = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->eyeq_timestamp(), output);
  }

  // optional float eyeq_current_timestamp = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->eyeq_current_timestamp(), output);
  }

  // optional int32 application_diagnostics_part_1 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->application_diagnostics_part_1(), output);
  }

  // optional int32 application_diagnostics_part_2 = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->application_diagnostics_part_2(), output);
  }

  // optional .atd.meprocess.Dt_Record_App.Fatal_errorType fatal_error = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->fatal_error(), output);
  }

  // optional int32 reserved_2 = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved_2(), output);
  }

  // optional .atd.meprocess.Dt_Record_App.Minor_errorType minor_error = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->minor_error(), output);
  }

  // optional int32 eyeqtemperature1 = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->eyeqtemperature1(), output);
  }

  // optional int32 eyeqtemperature2 = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->eyeqtemperature2(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional .atd.meprocess.Dt_Record_App.Temperture_ddrType temperture_ddr = 15;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->temperture_ddr(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 reserved_4 = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reserved_4(), output);
  }

  // optional int32 cfg_status = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->cfg_status(), output);
  }

  // optional int32 spihealthstatus = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->spihealthstatus(), output);
  }

  // optional int32 spierrors = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->spierrors(), output);
  }

  // optional int32 reserved_5 = 20;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->reserved_5(), output);
  }

  // optional int32 valid_cameras_information = 21;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->valid_cameras_information(), output);
  }

  // optional int32 camera1_temperature = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->camera1_temperature(), output);
  }

  // optional int32 camera2_temperature = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->camera2_temperature(), output);
  }

  // optional int32 camera3_temperature = 24;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->camera3_temperature(), output);
  }

  // optional int32 camera4_temperature = 25;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->camera4_temperature(), output);
  }

  // optional int32 camera5_temperature = 26;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->camera5_temperature(), output);
  }

  // optional int32 camera6_temperature = 27;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->camera6_temperature(), output);
  }

  // optional int32 camera7_temperature = 28;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->camera7_temperature(), output);
  }

  // optional int32 camera8_temperature = 29;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->camera8_temperature(), output);
  }

  // optional int32 camera1_videoerrorrange = 30;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->camera1_videoerrorrange(), output);
  }

  // optional int32 camera2_videoerrorrange = 31;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->camera2_videoerrorrange(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 camera3_videoerrorrange = 32;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->camera3_videoerrorrange(), output);
  }

  // optional int32 camera4_videoerrorrange = 33;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->camera4_videoerrorrange(), output);
  }

  // optional int32 camera5_videoerrorrange = 34;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->camera5_videoerrorrange(), output);
  }

  // optional int32 camera6_videoerrorrange = 35;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->camera6_videoerrorrange(), output);
  }

  // optional int32 camera7_videoerrorrange = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->camera7_videoerrorrange(), output);
  }

  // optional int32 camera8_videoerrorrange = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->camera8_videoerrorrange(), output);
  }

  // optional float camera1_videoerrorflags_pt1 = 38;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(38, this->camera1_videoerrorflags_pt1(), output);
  }

  // optional float camera2_videoerrorflags_pt1 = 39;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->camera2_videoerrorflags_pt1(), output);
  }

  // optional float camera3_videoerrorflags_pt1 = 40;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->camera3_videoerrorflags_pt1(), output);
  }

  // optional float camera4_videoerrorflags_pt1 = 41;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(41, this->camera4_videoerrorflags_pt1(), output);
  }

  // optional float camera5_videoerrorflags_pt1 = 42;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->camera5_videoerrorflags_pt1(), output);
  }

  // optional float camera6_videoerrorflags_pt1 = 43;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->camera6_videoerrorflags_pt1(), output);
  }

  // optional float camera7_videoerrorflags_pt1 = 44;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(44, this->camera7_videoerrorflags_pt1(), output);
  }

  // optional float camera8_videoerrorflags_pt1 = 45;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->camera8_videoerrorflags_pt1(), output);
  }

  // optional float camera1_videoerrorflags_pt2 = 46;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->camera1_videoerrorflags_pt2(), output);
  }

  // optional float camera2_videoerrorflags_pt2 = 47;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(47, this->camera2_videoerrorflags_pt2(), output);
  }

  // optional float camera3_videoerrorflags_pt2 = 48;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->camera3_videoerrorflags_pt2(), output);
  }

  // optional float camera4_videoerrorflags_pt2 = 49;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(49, this->camera4_videoerrorflags_pt2(), output);
  }

  // optional float camera5_videoerrorflags_pt2 = 50;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->camera5_videoerrorflags_pt2(), output);
  }

  // optional float camera6_videoerrorflags_pt2 = 51;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(51, this->camera6_videoerrorflags_pt2(), output);
  }

  // optional float camera7_videoerrorflags_pt2 = 52;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->camera7_videoerrorflags_pt2(), output);
  }

  // optional float camera8_videoerrorflags_pt2 = 53;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(53, this->camera8_videoerrorflags_pt2(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 54;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      54, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 55;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      55, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_App)
}

size_t Dt_Record_App::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_App)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 54;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 55;
    if (has_reservedmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional int32 reserved_1 = 1;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional int32 application_message_version = 2;
    if (has_application_message_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->application_message_version());
    }

    // optional int32 main_state = 3;
    if (has_main_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->main_state());
    }

    // optional int32 sub_state = 4;
    if (has_sub_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sub_state());
    }

    // optional float eyeq_process_index = 5;
    if (has_eyeq_process_index()) {
      total_size += 1 + 4;
    }

    // optional float eyeq_timestamp = 6;
    if (has_eyeq_timestamp()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float eyeq_current_timestamp = 7;
    if (has_eyeq_current_timestamp()) {
      total_size += 1 + 4;
    }

    // optional int32 application_diagnostics_part_1 = 8;
    if (has_application_diagnostics_part_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->application_diagnostics_part_1());
    }

    // optional int32 application_diagnostics_part_2 = 9;
    if (has_application_diagnostics_part_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->application_diagnostics_part_2());
    }

    // optional .atd.meprocess.Dt_Record_App.Fatal_errorType fatal_error = 10;
    if (has_fatal_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fatal_error());
    }

    // optional int32 reserved_2 = 11;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional .atd.meprocess.Dt_Record_App.Minor_errorType minor_error = 12;
    if (has_minor_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->minor_error());
    }

    // optional int32 eyeqtemperature1 = 13;
    if (has_eyeqtemperature1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eyeqtemperature1());
    }

    // optional int32 eyeqtemperature2 = 14;
    if (has_eyeqtemperature2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eyeqtemperature2());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 reserved_4 = 16;
    if (has_reserved_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional int32 cfg_status = 17;
    if (has_cfg_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cfg_status());
    }

    // optional int32 spihealthstatus = 18;
    if (has_spihealthstatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spihealthstatus());
    }

    // optional int32 spierrors = 19;
    if (has_spierrors()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->spierrors());
    }

    // optional int32 reserved_5 = 20;
    if (has_reserved_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_5());
    }

    // optional int32 valid_cameras_information = 21;
    if (has_valid_cameras_information()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->valid_cameras_information());
    }

    // optional int32 camera1_temperature = 22;
    if (has_camera1_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera1_temperature());
    }

    // optional int32 camera2_temperature = 23;
    if (has_camera2_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera2_temperature());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 camera3_temperature = 24;
    if (has_camera3_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera3_temperature());
    }

    // optional int32 camera4_temperature = 25;
    if (has_camera4_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera4_temperature());
    }

    // optional int32 camera5_temperature = 26;
    if (has_camera5_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera5_temperature());
    }

    // optional int32 camera6_temperature = 27;
    if (has_camera6_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera6_temperature());
    }

    // optional int32 camera7_temperature = 28;
    if (has_camera7_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera7_temperature());
    }

    // optional int32 camera8_temperature = 29;
    if (has_camera8_temperature()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera8_temperature());
    }

    // optional int32 camera1_videoerrorrange = 30;
    if (has_camera1_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera1_videoerrorrange());
    }

    // optional int32 camera2_videoerrorrange = 31;
    if (has_camera2_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera2_videoerrorrange());
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional int32 camera3_videoerrorrange = 32;
    if (has_camera3_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera3_videoerrorrange());
    }

    // optional int32 camera4_videoerrorrange = 33;
    if (has_camera4_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera4_videoerrorrange());
    }

    // optional int32 camera5_videoerrorrange = 34;
    if (has_camera5_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera5_videoerrorrange());
    }

    // optional int32 camera6_videoerrorrange = 35;
    if (has_camera6_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera6_videoerrorrange());
    }

    // optional int32 camera7_videoerrorrange = 36;
    if (has_camera7_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera7_videoerrorrange());
    }

    // optional int32 camera8_videoerrorrange = 37;
    if (has_camera8_videoerrorrange()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->camera8_videoerrorrange());
    }

    // optional float camera1_videoerrorflags_pt1 = 38;
    if (has_camera1_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

    // optional float camera2_videoerrorflags_pt1 = 39;
    if (has_camera2_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional float camera3_videoerrorflags_pt1 = 40;
    if (has_camera3_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

    // optional float camera4_videoerrorflags_pt1 = 41;
    if (has_camera4_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

    // optional float camera5_videoerrorflags_pt1 = 42;
    if (has_camera5_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

    // optional float camera6_videoerrorflags_pt1 = 43;
    if (has_camera6_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

    // optional float camera7_videoerrorflags_pt1 = 44;
    if (has_camera7_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

    // optional float camera8_videoerrorflags_pt1 = 45;
    if (has_camera8_videoerrorflags_pt1()) {
      total_size += 2 + 4;
    }

    // optional float camera1_videoerrorflags_pt2 = 46;
    if (has_camera1_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

    // optional float camera2_videoerrorflags_pt2 = 47;
    if (has_camera2_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[48 / 32] & 8323072u) {
    // optional float camera3_videoerrorflags_pt2 = 48;
    if (has_camera3_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

    // optional float camera4_videoerrorflags_pt2 = 49;
    if (has_camera4_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

    // optional float camera5_videoerrorflags_pt2 = 50;
    if (has_camera5_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

    // optional float camera6_videoerrorflags_pt2 = 51;
    if (has_camera6_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

    // optional float camera7_videoerrorflags_pt2 = 52;
    if (has_camera7_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

    // optional float camera8_videoerrorflags_pt2 = 53;
    if (has_camera8_videoerrorflags_pt2()) {
      total_size += 2 + 4;
    }

    // optional .atd.meprocess.Dt_Record_App.Temperture_ddrType temperture_ddr = 15;
    if (has_temperture_ddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->temperture_ddr());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_App::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_App*>(&from));
}

void Dt_Record_App::MergeFrom(const Dt_Record_App& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_App)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      application_message_version_ = from.application_message_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      main_state_ = from.main_state_;
    }
    if (cached_has_bits & 0x00000020u) {
      sub_state_ = from.sub_state_;
    }
    if (cached_has_bits & 0x00000040u) {
      eyeq_process_index_ = from.eyeq_process_index_;
    }
    if (cached_has_bits & 0x00000080u) {
      eyeq_timestamp_ = from.eyeq_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      eyeq_current_timestamp_ = from.eyeq_current_timestamp_;
    }
    if (cached_has_bits & 0x00000200u) {
      application_diagnostics_part_1_ = from.application_diagnostics_part_1_;
    }
    if (cached_has_bits & 0x00000400u) {
      application_diagnostics_part_2_ = from.application_diagnostics_part_2_;
    }
    if (cached_has_bits & 0x00000800u) {
      fatal_error_ = from.fatal_error_;
    }
    if (cached_has_bits & 0x00001000u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00002000u) {
      minor_error_ = from.minor_error_;
    }
    if (cached_has_bits & 0x00004000u) {
      eyeqtemperature1_ = from.eyeqtemperature1_;
    }
    if (cached_has_bits & 0x00008000u) {
      eyeqtemperature2_ = from.eyeqtemperature2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00020000u) {
      cfg_status_ = from.cfg_status_;
    }
    if (cached_has_bits & 0x00040000u) {
      spihealthstatus_ = from.spihealthstatus_;
    }
    if (cached_has_bits & 0x00080000u) {
      spierrors_ = from.spierrors_;
    }
    if (cached_has_bits & 0x00100000u) {
      reserved_5_ = from.reserved_5_;
    }
    if (cached_has_bits & 0x00200000u) {
      valid_cameras_information_ = from.valid_cameras_information_;
    }
    if (cached_has_bits & 0x00400000u) {
      camera1_temperature_ = from.camera1_temperature_;
    }
    if (cached_has_bits & 0x00800000u) {
      camera2_temperature_ = from.camera2_temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      camera3_temperature_ = from.camera3_temperature_;
    }
    if (cached_has_bits & 0x02000000u) {
      camera4_temperature_ = from.camera4_temperature_;
    }
    if (cached_has_bits & 0x04000000u) {
      camera5_temperature_ = from.camera5_temperature_;
    }
    if (cached_has_bits & 0x08000000u) {
      camera6_temperature_ = from.camera6_temperature_;
    }
    if (cached_has_bits & 0x10000000u) {
      camera7_temperature_ = from.camera7_temperature_;
    }
    if (cached_has_bits & 0x20000000u) {
      camera8_temperature_ = from.camera8_temperature_;
    }
    if (cached_has_bits & 0x40000000u) {
      camera1_videoerrorrange_ = from.camera1_videoerrorrange_;
    }
    if (cached_has_bits & 0x80000000u) {
      camera2_videoerrorrange_ = from.camera2_videoerrorrange_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      camera3_videoerrorrange_ = from.camera3_videoerrorrange_;
    }
    if (cached_has_bits & 0x00000002u) {
      camera4_videoerrorrange_ = from.camera4_videoerrorrange_;
    }
    if (cached_has_bits & 0x00000004u) {
      camera5_videoerrorrange_ = from.camera5_videoerrorrange_;
    }
    if (cached_has_bits & 0x00000008u) {
      camera6_videoerrorrange_ = from.camera6_videoerrorrange_;
    }
    if (cached_has_bits & 0x00000010u) {
      camera7_videoerrorrange_ = from.camera7_videoerrorrange_;
    }
    if (cached_has_bits & 0x00000020u) {
      camera8_videoerrorrange_ = from.camera8_videoerrorrange_;
    }
    if (cached_has_bits & 0x00000040u) {
      camera1_videoerrorflags_pt1_ = from.camera1_videoerrorflags_pt1_;
    }
    if (cached_has_bits & 0x00000080u) {
      camera2_videoerrorflags_pt1_ = from.camera2_videoerrorflags_pt1_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      camera3_videoerrorflags_pt1_ = from.camera3_videoerrorflags_pt1_;
    }
    if (cached_has_bits & 0x00000200u) {
      camera4_videoerrorflags_pt1_ = from.camera4_videoerrorflags_pt1_;
    }
    if (cached_has_bits & 0x00000400u) {
      camera5_videoerrorflags_pt1_ = from.camera5_videoerrorflags_pt1_;
    }
    if (cached_has_bits & 0x00000800u) {
      camera6_videoerrorflags_pt1_ = from.camera6_videoerrorflags_pt1_;
    }
    if (cached_has_bits & 0x00001000u) {
      camera7_videoerrorflags_pt1_ = from.camera7_videoerrorflags_pt1_;
    }
    if (cached_has_bits & 0x00002000u) {
      camera8_videoerrorflags_pt1_ = from.camera8_videoerrorflags_pt1_;
    }
    if (cached_has_bits & 0x00004000u) {
      camera1_videoerrorflags_pt2_ = from.camera1_videoerrorflags_pt2_;
    }
    if (cached_has_bits & 0x00008000u) {
      camera2_videoerrorflags_pt2_ = from.camera2_videoerrorflags_pt2_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 8323072u) {
    if (cached_has_bits & 0x00010000u) {
      camera3_videoerrorflags_pt2_ = from.camera3_videoerrorflags_pt2_;
    }
    if (cached_has_bits & 0x00020000u) {
      camera4_videoerrorflags_pt2_ = from.camera4_videoerrorflags_pt2_;
    }
    if (cached_has_bits & 0x00040000u) {
      camera5_videoerrorflags_pt2_ = from.camera5_videoerrorflags_pt2_;
    }
    if (cached_has_bits & 0x00080000u) {
      camera6_videoerrorflags_pt2_ = from.camera6_videoerrorflags_pt2_;
    }
    if (cached_has_bits & 0x00100000u) {
      camera7_videoerrorflags_pt2_ = from.camera7_videoerrorflags_pt2_;
    }
    if (cached_has_bits & 0x00200000u) {
      camera8_videoerrorflags_pt2_ = from.camera8_videoerrorflags_pt2_;
    }
    if (cached_has_bits & 0x00400000u) {
      temperture_ddr_ = from.temperture_ddr_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Dt_Record_App::CopyFrom(const Dt_Record_App& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_App)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_App::IsInitialized() const {
  return true;
}

void Dt_Record_App::Swap(Dt_Record_App* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_App::InternalSwap(Dt_Record_App* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(application_message_version_, other->application_message_version_);
  std::swap(main_state_, other->main_state_);
  std::swap(sub_state_, other->sub_state_);
  std::swap(eyeq_process_index_, other->eyeq_process_index_);
  std::swap(eyeq_timestamp_, other->eyeq_timestamp_);
  std::swap(eyeq_current_timestamp_, other->eyeq_current_timestamp_);
  std::swap(application_diagnostics_part_1_, other->application_diagnostics_part_1_);
  std::swap(application_diagnostics_part_2_, other->application_diagnostics_part_2_);
  std::swap(fatal_error_, other->fatal_error_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(minor_error_, other->minor_error_);
  std::swap(eyeqtemperature1_, other->eyeqtemperature1_);
  std::swap(eyeqtemperature2_, other->eyeqtemperature2_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(cfg_status_, other->cfg_status_);
  std::swap(spihealthstatus_, other->spihealthstatus_);
  std::swap(spierrors_, other->spierrors_);
  std::swap(reserved_5_, other->reserved_5_);
  std::swap(valid_cameras_information_, other->valid_cameras_information_);
  std::swap(camera1_temperature_, other->camera1_temperature_);
  std::swap(camera2_temperature_, other->camera2_temperature_);
  std::swap(camera3_temperature_, other->camera3_temperature_);
  std::swap(camera4_temperature_, other->camera4_temperature_);
  std::swap(camera5_temperature_, other->camera5_temperature_);
  std::swap(camera6_temperature_, other->camera6_temperature_);
  std::swap(camera7_temperature_, other->camera7_temperature_);
  std::swap(camera8_temperature_, other->camera8_temperature_);
  std::swap(camera1_videoerrorrange_, other->camera1_videoerrorrange_);
  std::swap(camera2_videoerrorrange_, other->camera2_videoerrorrange_);
  std::swap(camera3_videoerrorrange_, other->camera3_videoerrorrange_);
  std::swap(camera4_videoerrorrange_, other->camera4_videoerrorrange_);
  std::swap(camera5_videoerrorrange_, other->camera5_videoerrorrange_);
  std::swap(camera6_videoerrorrange_, other->camera6_videoerrorrange_);
  std::swap(camera7_videoerrorrange_, other->camera7_videoerrorrange_);
  std::swap(camera8_videoerrorrange_, other->camera8_videoerrorrange_);
  std::swap(camera1_videoerrorflags_pt1_, other->camera1_videoerrorflags_pt1_);
  std::swap(camera2_videoerrorflags_pt1_, other->camera2_videoerrorflags_pt1_);
  std::swap(camera3_videoerrorflags_pt1_, other->camera3_videoerrorflags_pt1_);
  std::swap(camera4_videoerrorflags_pt1_, other->camera4_videoerrorflags_pt1_);
  std::swap(camera5_videoerrorflags_pt1_, other->camera5_videoerrorflags_pt1_);
  std::swap(camera6_videoerrorflags_pt1_, other->camera6_videoerrorflags_pt1_);
  std::swap(camera7_videoerrorflags_pt1_, other->camera7_videoerrorflags_pt1_);
  std::swap(camera8_videoerrorflags_pt1_, other->camera8_videoerrorflags_pt1_);
  std::swap(camera1_videoerrorflags_pt2_, other->camera1_videoerrorflags_pt2_);
  std::swap(camera2_videoerrorflags_pt2_, other->camera2_videoerrorflags_pt2_);
  std::swap(camera3_videoerrorflags_pt2_, other->camera3_videoerrorflags_pt2_);
  std::swap(camera4_videoerrorflags_pt2_, other->camera4_videoerrorflags_pt2_);
  std::swap(camera5_videoerrorflags_pt2_, other->camera5_videoerrorflags_pt2_);
  std::swap(camera6_videoerrorflags_pt2_, other->camera6_videoerrorflags_pt2_);
  std::swap(camera7_videoerrorflags_pt2_, other->camera7_videoerrorflags_pt2_);
  std::swap(camera8_videoerrorflags_pt2_, other->camera8_videoerrorflags_pt2_);
  std::swap(temperture_ddr_, other->temperture_ddr_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_App::GetTypeName() const {
  return "atd.meprocess.Dt_Record_App";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_App

// optional int32 reserved_1 = 1;
bool Dt_Record_App::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_App::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_App::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_App::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 Dt_Record_App::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_1)
  return reserved_1_;
}
void Dt_Record_App::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_1)
}

// optional int32 application_message_version = 2;
bool Dt_Record_App::has_application_message_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Record_App::set_has_application_message_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Record_App::clear_has_application_message_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Record_App::clear_application_message_version() {
  application_message_version_ = 0;
  clear_has_application_message_version();
}
::google::protobuf::int32 Dt_Record_App::application_message_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.application_message_version)
  return application_message_version_;
}
void Dt_Record_App::set_application_message_version(::google::protobuf::int32 value) {
  set_has_application_message_version();
  application_message_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.application_message_version)
}

// optional int32 main_state = 3;
bool Dt_Record_App::has_main_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Record_App::set_has_main_state() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Record_App::clear_has_main_state() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Record_App::clear_main_state() {
  main_state_ = 0;
  clear_has_main_state();
}
::google::protobuf::int32 Dt_Record_App::main_state() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.main_state)
  return main_state_;
}
void Dt_Record_App::set_main_state(::google::protobuf::int32 value) {
  set_has_main_state();
  main_state_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.main_state)
}

// optional int32 sub_state = 4;
bool Dt_Record_App::has_sub_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Record_App::set_has_sub_state() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Record_App::clear_has_sub_state() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Record_App::clear_sub_state() {
  sub_state_ = 0;
  clear_has_sub_state();
}
::google::protobuf::int32 Dt_Record_App::sub_state() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.sub_state)
  return sub_state_;
}
void Dt_Record_App::set_sub_state(::google::protobuf::int32 value) {
  set_has_sub_state();
  sub_state_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.sub_state)
}

// optional float eyeq_process_index = 5;
bool Dt_Record_App::has_eyeq_process_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Record_App::set_has_eyeq_process_index() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Record_App::clear_has_eyeq_process_index() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Record_App::clear_eyeq_process_index() {
  eyeq_process_index_ = 0;
  clear_has_eyeq_process_index();
}
float Dt_Record_App::eyeq_process_index() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeq_process_index)
  return eyeq_process_index_;
}
void Dt_Record_App::set_eyeq_process_index(float value) {
  set_has_eyeq_process_index();
  eyeq_process_index_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeq_process_index)
}

// optional float eyeq_timestamp = 6;
bool Dt_Record_App::has_eyeq_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Record_App::set_has_eyeq_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Record_App::clear_has_eyeq_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Record_App::clear_eyeq_timestamp() {
  eyeq_timestamp_ = 0;
  clear_has_eyeq_timestamp();
}
float Dt_Record_App::eyeq_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeq_timestamp)
  return eyeq_timestamp_;
}
void Dt_Record_App::set_eyeq_timestamp(float value) {
  set_has_eyeq_timestamp();
  eyeq_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeq_timestamp)
}

// optional float eyeq_current_timestamp = 7;
bool Dt_Record_App::has_eyeq_current_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Dt_Record_App::set_has_eyeq_current_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
void Dt_Record_App::clear_has_eyeq_current_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
void Dt_Record_App::clear_eyeq_current_timestamp() {
  eyeq_current_timestamp_ = 0;
  clear_has_eyeq_current_timestamp();
}
float Dt_Record_App::eyeq_current_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeq_current_timestamp)
  return eyeq_current_timestamp_;
}
void Dt_Record_App::set_eyeq_current_timestamp(float value) {
  set_has_eyeq_current_timestamp();
  eyeq_current_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeq_current_timestamp)
}

// optional int32 application_diagnostics_part_1 = 8;
bool Dt_Record_App::has_application_diagnostics_part_1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Dt_Record_App::set_has_application_diagnostics_part_1() {
  _has_bits_[0] |= 0x00000200u;
}
void Dt_Record_App::clear_has_application_diagnostics_part_1() {
  _has_bits_[0] &= ~0x00000200u;
}
void Dt_Record_App::clear_application_diagnostics_part_1() {
  application_diagnostics_part_1_ = 0;
  clear_has_application_diagnostics_part_1();
}
::google::protobuf::int32 Dt_Record_App::application_diagnostics_part_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.application_diagnostics_part_1)
  return application_diagnostics_part_1_;
}
void Dt_Record_App::set_application_diagnostics_part_1(::google::protobuf::int32 value) {
  set_has_application_diagnostics_part_1();
  application_diagnostics_part_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.application_diagnostics_part_1)
}

// optional int32 application_diagnostics_part_2 = 9;
bool Dt_Record_App::has_application_diagnostics_part_2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Dt_Record_App::set_has_application_diagnostics_part_2() {
  _has_bits_[0] |= 0x00000400u;
}
void Dt_Record_App::clear_has_application_diagnostics_part_2() {
  _has_bits_[0] &= ~0x00000400u;
}
void Dt_Record_App::clear_application_diagnostics_part_2() {
  application_diagnostics_part_2_ = 0;
  clear_has_application_diagnostics_part_2();
}
::google::protobuf::int32 Dt_Record_App::application_diagnostics_part_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.application_diagnostics_part_2)
  return application_diagnostics_part_2_;
}
void Dt_Record_App::set_application_diagnostics_part_2(::google::protobuf::int32 value) {
  set_has_application_diagnostics_part_2();
  application_diagnostics_part_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.application_diagnostics_part_2)
}

// optional .atd.meprocess.Dt_Record_App.Fatal_errorType fatal_error = 10;
bool Dt_Record_App::has_fatal_error() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Dt_Record_App::set_has_fatal_error() {
  _has_bits_[0] |= 0x00000800u;
}
void Dt_Record_App::clear_has_fatal_error() {
  _has_bits_[0] &= ~0x00000800u;
}
void Dt_Record_App::clear_fatal_error() {
  fatal_error_ = 0;
  clear_has_fatal_error();
}
::atd::meprocess::Dt_Record_App_Fatal_errorType Dt_Record_App::fatal_error() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.fatal_error)
  return static_cast< ::atd::meprocess::Dt_Record_App_Fatal_errorType >(fatal_error_);
}
void Dt_Record_App::set_fatal_error(::atd::meprocess::Dt_Record_App_Fatal_errorType value) {
  assert(::atd::meprocess::Dt_Record_App_Fatal_errorType_IsValid(value));
  set_has_fatal_error();
  fatal_error_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.fatal_error)
}

// optional int32 reserved_2 = 11;
bool Dt_Record_App::has_reserved_2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Dt_Record_App::set_has_reserved_2() {
  _has_bits_[0] |= 0x00001000u;
}
void Dt_Record_App::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00001000u;
}
void Dt_Record_App::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 Dt_Record_App::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_2)
  return reserved_2_;
}
void Dt_Record_App::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_2)
}

// optional .atd.meprocess.Dt_Record_App.Minor_errorType minor_error = 12;
bool Dt_Record_App::has_minor_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Dt_Record_App::set_has_minor_error() {
  _has_bits_[0] |= 0x00002000u;
}
void Dt_Record_App::clear_has_minor_error() {
  _has_bits_[0] &= ~0x00002000u;
}
void Dt_Record_App::clear_minor_error() {
  minor_error_ = 0;
  clear_has_minor_error();
}
::atd::meprocess::Dt_Record_App_Minor_errorType Dt_Record_App::minor_error() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.minor_error)
  return static_cast< ::atd::meprocess::Dt_Record_App_Minor_errorType >(minor_error_);
}
void Dt_Record_App::set_minor_error(::atd::meprocess::Dt_Record_App_Minor_errorType value) {
  assert(::atd::meprocess::Dt_Record_App_Minor_errorType_IsValid(value));
  set_has_minor_error();
  minor_error_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.minor_error)
}

// optional int32 eyeqtemperature1 = 13;
bool Dt_Record_App::has_eyeqtemperature1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Dt_Record_App::set_has_eyeqtemperature1() {
  _has_bits_[0] |= 0x00004000u;
}
void Dt_Record_App::clear_has_eyeqtemperature1() {
  _has_bits_[0] &= ~0x00004000u;
}
void Dt_Record_App::clear_eyeqtemperature1() {
  eyeqtemperature1_ = 0;
  clear_has_eyeqtemperature1();
}
::google::protobuf::int32 Dt_Record_App::eyeqtemperature1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeqtemperature1)
  return eyeqtemperature1_;
}
void Dt_Record_App::set_eyeqtemperature1(::google::protobuf::int32 value) {
  set_has_eyeqtemperature1();
  eyeqtemperature1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeqtemperature1)
}

// optional int32 eyeqtemperature2 = 14;
bool Dt_Record_App::has_eyeqtemperature2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Dt_Record_App::set_has_eyeqtemperature2() {
  _has_bits_[0] |= 0x00008000u;
}
void Dt_Record_App::clear_has_eyeqtemperature2() {
  _has_bits_[0] &= ~0x00008000u;
}
void Dt_Record_App::clear_eyeqtemperature2() {
  eyeqtemperature2_ = 0;
  clear_has_eyeqtemperature2();
}
::google::protobuf::int32 Dt_Record_App::eyeqtemperature2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeqtemperature2)
  return eyeqtemperature2_;
}
void Dt_Record_App::set_eyeqtemperature2(::google::protobuf::int32 value) {
  set_has_eyeqtemperature2();
  eyeqtemperature2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeqtemperature2)
}

// optional .atd.meprocess.Dt_Record_App.Temperture_ddrType temperture_ddr = 15;
bool Dt_Record_App::has_temperture_ddr() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void Dt_Record_App::set_has_temperture_ddr() {
  _has_bits_[1] |= 0x00400000u;
}
void Dt_Record_App::clear_has_temperture_ddr() {
  _has_bits_[1] &= ~0x00400000u;
}
void Dt_Record_App::clear_temperture_ddr() {
  temperture_ddr_ = -1;
  clear_has_temperture_ddr();
}
::atd::meprocess::Dt_Record_App_Temperture_ddrType Dt_Record_App::temperture_ddr() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.temperture_ddr)
  return static_cast< ::atd::meprocess::Dt_Record_App_Temperture_ddrType >(temperture_ddr_);
}
void Dt_Record_App::set_temperture_ddr(::atd::meprocess::Dt_Record_App_Temperture_ddrType value) {
  assert(::atd::meprocess::Dt_Record_App_Temperture_ddrType_IsValid(value));
  set_has_temperture_ddr();
  temperture_ddr_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.temperture_ddr)
}

// optional int32 reserved_4 = 16;
bool Dt_Record_App::has_reserved_4() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Dt_Record_App::set_has_reserved_4() {
  _has_bits_[0] |= 0x00010000u;
}
void Dt_Record_App::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00010000u;
}
void Dt_Record_App::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 Dt_Record_App::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_4)
  return reserved_4_;
}
void Dt_Record_App::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_4)
}

// optional int32 cfg_status = 17;
bool Dt_Record_App::has_cfg_status() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Dt_Record_App::set_has_cfg_status() {
  _has_bits_[0] |= 0x00020000u;
}
void Dt_Record_App::clear_has_cfg_status() {
  _has_bits_[0] &= ~0x00020000u;
}
void Dt_Record_App::clear_cfg_status() {
  cfg_status_ = 0;
  clear_has_cfg_status();
}
::google::protobuf::int32 Dt_Record_App::cfg_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.cfg_status)
  return cfg_status_;
}
void Dt_Record_App::set_cfg_status(::google::protobuf::int32 value) {
  set_has_cfg_status();
  cfg_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.cfg_status)
}

// optional int32 spihealthstatus = 18;
bool Dt_Record_App::has_spihealthstatus() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Dt_Record_App::set_has_spihealthstatus() {
  _has_bits_[0] |= 0x00040000u;
}
void Dt_Record_App::clear_has_spihealthstatus() {
  _has_bits_[0] &= ~0x00040000u;
}
void Dt_Record_App::clear_spihealthstatus() {
  spihealthstatus_ = 0;
  clear_has_spihealthstatus();
}
::google::protobuf::int32 Dt_Record_App::spihealthstatus() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.spihealthstatus)
  return spihealthstatus_;
}
void Dt_Record_App::set_spihealthstatus(::google::protobuf::int32 value) {
  set_has_spihealthstatus();
  spihealthstatus_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.spihealthstatus)
}

// optional int32 spierrors = 19;
bool Dt_Record_App::has_spierrors() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Dt_Record_App::set_has_spierrors() {
  _has_bits_[0] |= 0x00080000u;
}
void Dt_Record_App::clear_has_spierrors() {
  _has_bits_[0] &= ~0x00080000u;
}
void Dt_Record_App::clear_spierrors() {
  spierrors_ = 0;
  clear_has_spierrors();
}
::google::protobuf::int32 Dt_Record_App::spierrors() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.spierrors)
  return spierrors_;
}
void Dt_Record_App::set_spierrors(::google::protobuf::int32 value) {
  set_has_spierrors();
  spierrors_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.spierrors)
}

// optional int32 reserved_5 = 20;
bool Dt_Record_App::has_reserved_5() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Dt_Record_App::set_has_reserved_5() {
  _has_bits_[0] |= 0x00100000u;
}
void Dt_Record_App::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00100000u;
}
void Dt_Record_App::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
::google::protobuf::int32 Dt_Record_App::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_5)
  return reserved_5_;
}
void Dt_Record_App::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_5)
}

// optional int32 valid_cameras_information = 21;
bool Dt_Record_App::has_valid_cameras_information() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Dt_Record_App::set_has_valid_cameras_information() {
  _has_bits_[0] |= 0x00200000u;
}
void Dt_Record_App::clear_has_valid_cameras_information() {
  _has_bits_[0] &= ~0x00200000u;
}
void Dt_Record_App::clear_valid_cameras_information() {
  valid_cameras_information_ = 0;
  clear_has_valid_cameras_information();
}
::google::protobuf::int32 Dt_Record_App::valid_cameras_information() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.valid_cameras_information)
  return valid_cameras_information_;
}
void Dt_Record_App::set_valid_cameras_information(::google::protobuf::int32 value) {
  set_has_valid_cameras_information();
  valid_cameras_information_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.valid_cameras_information)
}

// optional int32 camera1_temperature = 22;
bool Dt_Record_App::has_camera1_temperature() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Dt_Record_App::set_has_camera1_temperature() {
  _has_bits_[0] |= 0x00400000u;
}
void Dt_Record_App::clear_has_camera1_temperature() {
  _has_bits_[0] &= ~0x00400000u;
}
void Dt_Record_App::clear_camera1_temperature() {
  camera1_temperature_ = 0;
  clear_has_camera1_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera1_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_temperature)
  return camera1_temperature_;
}
void Dt_Record_App::set_camera1_temperature(::google::protobuf::int32 value) {
  set_has_camera1_temperature();
  camera1_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_temperature)
}

// optional int32 camera2_temperature = 23;
bool Dt_Record_App::has_camera2_temperature() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Dt_Record_App::set_has_camera2_temperature() {
  _has_bits_[0] |= 0x00800000u;
}
void Dt_Record_App::clear_has_camera2_temperature() {
  _has_bits_[0] &= ~0x00800000u;
}
void Dt_Record_App::clear_camera2_temperature() {
  camera2_temperature_ = 0;
  clear_has_camera2_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera2_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_temperature)
  return camera2_temperature_;
}
void Dt_Record_App::set_camera2_temperature(::google::protobuf::int32 value) {
  set_has_camera2_temperature();
  camera2_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_temperature)
}

// optional int32 camera3_temperature = 24;
bool Dt_Record_App::has_camera3_temperature() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Dt_Record_App::set_has_camera3_temperature() {
  _has_bits_[0] |= 0x01000000u;
}
void Dt_Record_App::clear_has_camera3_temperature() {
  _has_bits_[0] &= ~0x01000000u;
}
void Dt_Record_App::clear_camera3_temperature() {
  camera3_temperature_ = 0;
  clear_has_camera3_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera3_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_temperature)
  return camera3_temperature_;
}
void Dt_Record_App::set_camera3_temperature(::google::protobuf::int32 value) {
  set_has_camera3_temperature();
  camera3_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_temperature)
}

// optional int32 camera4_temperature = 25;
bool Dt_Record_App::has_camera4_temperature() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Dt_Record_App::set_has_camera4_temperature() {
  _has_bits_[0] |= 0x02000000u;
}
void Dt_Record_App::clear_has_camera4_temperature() {
  _has_bits_[0] &= ~0x02000000u;
}
void Dt_Record_App::clear_camera4_temperature() {
  camera4_temperature_ = 0;
  clear_has_camera4_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera4_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_temperature)
  return camera4_temperature_;
}
void Dt_Record_App::set_camera4_temperature(::google::protobuf::int32 value) {
  set_has_camera4_temperature();
  camera4_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_temperature)
}

// optional int32 camera5_temperature = 26;
bool Dt_Record_App::has_camera5_temperature() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Dt_Record_App::set_has_camera5_temperature() {
  _has_bits_[0] |= 0x04000000u;
}
void Dt_Record_App::clear_has_camera5_temperature() {
  _has_bits_[0] &= ~0x04000000u;
}
void Dt_Record_App::clear_camera5_temperature() {
  camera5_temperature_ = 0;
  clear_has_camera5_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera5_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_temperature)
  return camera5_temperature_;
}
void Dt_Record_App::set_camera5_temperature(::google::protobuf::int32 value) {
  set_has_camera5_temperature();
  camera5_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_temperature)
}

// optional int32 camera6_temperature = 27;
bool Dt_Record_App::has_camera6_temperature() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Dt_Record_App::set_has_camera6_temperature() {
  _has_bits_[0] |= 0x08000000u;
}
void Dt_Record_App::clear_has_camera6_temperature() {
  _has_bits_[0] &= ~0x08000000u;
}
void Dt_Record_App::clear_camera6_temperature() {
  camera6_temperature_ = 0;
  clear_has_camera6_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera6_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_temperature)
  return camera6_temperature_;
}
void Dt_Record_App::set_camera6_temperature(::google::protobuf::int32 value) {
  set_has_camera6_temperature();
  camera6_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_temperature)
}

// optional int32 camera7_temperature = 28;
bool Dt_Record_App::has_camera7_temperature() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Dt_Record_App::set_has_camera7_temperature() {
  _has_bits_[0] |= 0x10000000u;
}
void Dt_Record_App::clear_has_camera7_temperature() {
  _has_bits_[0] &= ~0x10000000u;
}
void Dt_Record_App::clear_camera7_temperature() {
  camera7_temperature_ = 0;
  clear_has_camera7_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera7_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_temperature)
  return camera7_temperature_;
}
void Dt_Record_App::set_camera7_temperature(::google::protobuf::int32 value) {
  set_has_camera7_temperature();
  camera7_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_temperature)
}

// optional int32 camera8_temperature = 29;
bool Dt_Record_App::has_camera8_temperature() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Dt_Record_App::set_has_camera8_temperature() {
  _has_bits_[0] |= 0x20000000u;
}
void Dt_Record_App::clear_has_camera8_temperature() {
  _has_bits_[0] &= ~0x20000000u;
}
void Dt_Record_App::clear_camera8_temperature() {
  camera8_temperature_ = 0;
  clear_has_camera8_temperature();
}
::google::protobuf::int32 Dt_Record_App::camera8_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_temperature)
  return camera8_temperature_;
}
void Dt_Record_App::set_camera8_temperature(::google::protobuf::int32 value) {
  set_has_camera8_temperature();
  camera8_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_temperature)
}

// optional int32 camera1_videoerrorrange = 30;
bool Dt_Record_App::has_camera1_videoerrorrange() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void Dt_Record_App::set_has_camera1_videoerrorrange() {
  _has_bits_[0] |= 0x40000000u;
}
void Dt_Record_App::clear_has_camera1_videoerrorrange() {
  _has_bits_[0] &= ~0x40000000u;
}
void Dt_Record_App::clear_camera1_videoerrorrange() {
  camera1_videoerrorrange_ = 0;
  clear_has_camera1_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera1_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_videoerrorrange)
  return camera1_videoerrorrange_;
}
void Dt_Record_App::set_camera1_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera1_videoerrorrange();
  camera1_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_videoerrorrange)
}

// optional int32 camera2_videoerrorrange = 31;
bool Dt_Record_App::has_camera2_videoerrorrange() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Dt_Record_App::set_has_camera2_videoerrorrange() {
  _has_bits_[0] |= 0x80000000u;
}
void Dt_Record_App::clear_has_camera2_videoerrorrange() {
  _has_bits_[0] &= ~0x80000000u;
}
void Dt_Record_App::clear_camera2_videoerrorrange() {
  camera2_videoerrorrange_ = 0;
  clear_has_camera2_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera2_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_videoerrorrange)
  return camera2_videoerrorrange_;
}
void Dt_Record_App::set_camera2_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera2_videoerrorrange();
  camera2_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_videoerrorrange)
}

// optional int32 camera3_videoerrorrange = 32;
bool Dt_Record_App::has_camera3_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void Dt_Record_App::set_has_camera3_videoerrorrange() {
  _has_bits_[1] |= 0x00000001u;
}
void Dt_Record_App::clear_has_camera3_videoerrorrange() {
  _has_bits_[1] &= ~0x00000001u;
}
void Dt_Record_App::clear_camera3_videoerrorrange() {
  camera3_videoerrorrange_ = 0;
  clear_has_camera3_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera3_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_videoerrorrange)
  return camera3_videoerrorrange_;
}
void Dt_Record_App::set_camera3_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera3_videoerrorrange();
  camera3_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_videoerrorrange)
}

// optional int32 camera4_videoerrorrange = 33;
bool Dt_Record_App::has_camera4_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void Dt_Record_App::set_has_camera4_videoerrorrange() {
  _has_bits_[1] |= 0x00000002u;
}
void Dt_Record_App::clear_has_camera4_videoerrorrange() {
  _has_bits_[1] &= ~0x00000002u;
}
void Dt_Record_App::clear_camera4_videoerrorrange() {
  camera4_videoerrorrange_ = 0;
  clear_has_camera4_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera4_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_videoerrorrange)
  return camera4_videoerrorrange_;
}
void Dt_Record_App::set_camera4_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera4_videoerrorrange();
  camera4_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_videoerrorrange)
}

// optional int32 camera5_videoerrorrange = 34;
bool Dt_Record_App::has_camera5_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void Dt_Record_App::set_has_camera5_videoerrorrange() {
  _has_bits_[1] |= 0x00000004u;
}
void Dt_Record_App::clear_has_camera5_videoerrorrange() {
  _has_bits_[1] &= ~0x00000004u;
}
void Dt_Record_App::clear_camera5_videoerrorrange() {
  camera5_videoerrorrange_ = 0;
  clear_has_camera5_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera5_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_videoerrorrange)
  return camera5_videoerrorrange_;
}
void Dt_Record_App::set_camera5_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera5_videoerrorrange();
  camera5_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_videoerrorrange)
}

// optional int32 camera6_videoerrorrange = 35;
bool Dt_Record_App::has_camera6_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void Dt_Record_App::set_has_camera6_videoerrorrange() {
  _has_bits_[1] |= 0x00000008u;
}
void Dt_Record_App::clear_has_camera6_videoerrorrange() {
  _has_bits_[1] &= ~0x00000008u;
}
void Dt_Record_App::clear_camera6_videoerrorrange() {
  camera6_videoerrorrange_ = 0;
  clear_has_camera6_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera6_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_videoerrorrange)
  return camera6_videoerrorrange_;
}
void Dt_Record_App::set_camera6_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera6_videoerrorrange();
  camera6_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_videoerrorrange)
}

// optional int32 camera7_videoerrorrange = 36;
bool Dt_Record_App::has_camera7_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void Dt_Record_App::set_has_camera7_videoerrorrange() {
  _has_bits_[1] |= 0x00000010u;
}
void Dt_Record_App::clear_has_camera7_videoerrorrange() {
  _has_bits_[1] &= ~0x00000010u;
}
void Dt_Record_App::clear_camera7_videoerrorrange() {
  camera7_videoerrorrange_ = 0;
  clear_has_camera7_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera7_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_videoerrorrange)
  return camera7_videoerrorrange_;
}
void Dt_Record_App::set_camera7_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera7_videoerrorrange();
  camera7_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_videoerrorrange)
}

// optional int32 camera8_videoerrorrange = 37;
bool Dt_Record_App::has_camera8_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void Dt_Record_App::set_has_camera8_videoerrorrange() {
  _has_bits_[1] |= 0x00000020u;
}
void Dt_Record_App::clear_has_camera8_videoerrorrange() {
  _has_bits_[1] &= ~0x00000020u;
}
void Dt_Record_App::clear_camera8_videoerrorrange() {
  camera8_videoerrorrange_ = 0;
  clear_has_camera8_videoerrorrange();
}
::google::protobuf::int32 Dt_Record_App::camera8_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_videoerrorrange)
  return camera8_videoerrorrange_;
}
void Dt_Record_App::set_camera8_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera8_videoerrorrange();
  camera8_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_videoerrorrange)
}

// optional float camera1_videoerrorflags_pt1 = 38;
bool Dt_Record_App::has_camera1_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void Dt_Record_App::set_has_camera1_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000040u;
}
void Dt_Record_App::clear_has_camera1_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000040u;
}
void Dt_Record_App::clear_camera1_videoerrorflags_pt1() {
  camera1_videoerrorflags_pt1_ = 0;
  clear_has_camera1_videoerrorflags_pt1();
}
float Dt_Record_App::camera1_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt1)
  return camera1_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera1_videoerrorflags_pt1(float value) {
  set_has_camera1_videoerrorflags_pt1();
  camera1_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt1)
}

// optional float camera2_videoerrorflags_pt1 = 39;
bool Dt_Record_App::has_camera2_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void Dt_Record_App::set_has_camera2_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000080u;
}
void Dt_Record_App::clear_has_camera2_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000080u;
}
void Dt_Record_App::clear_camera2_videoerrorflags_pt1() {
  camera2_videoerrorflags_pt1_ = 0;
  clear_has_camera2_videoerrorflags_pt1();
}
float Dt_Record_App::camera2_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt1)
  return camera2_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera2_videoerrorflags_pt1(float value) {
  set_has_camera2_videoerrorflags_pt1();
  camera2_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt1)
}

// optional float camera3_videoerrorflags_pt1 = 40;
bool Dt_Record_App::has_camera3_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void Dt_Record_App::set_has_camera3_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000100u;
}
void Dt_Record_App::clear_has_camera3_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000100u;
}
void Dt_Record_App::clear_camera3_videoerrorflags_pt1() {
  camera3_videoerrorflags_pt1_ = 0;
  clear_has_camera3_videoerrorflags_pt1();
}
float Dt_Record_App::camera3_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt1)
  return camera3_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera3_videoerrorflags_pt1(float value) {
  set_has_camera3_videoerrorflags_pt1();
  camera3_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt1)
}

// optional float camera4_videoerrorflags_pt1 = 41;
bool Dt_Record_App::has_camera4_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void Dt_Record_App::set_has_camera4_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000200u;
}
void Dt_Record_App::clear_has_camera4_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000200u;
}
void Dt_Record_App::clear_camera4_videoerrorflags_pt1() {
  camera4_videoerrorflags_pt1_ = 0;
  clear_has_camera4_videoerrorflags_pt1();
}
float Dt_Record_App::camera4_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt1)
  return camera4_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera4_videoerrorflags_pt1(float value) {
  set_has_camera4_videoerrorflags_pt1();
  camera4_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt1)
}

// optional float camera5_videoerrorflags_pt1 = 42;
bool Dt_Record_App::has_camera5_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void Dt_Record_App::set_has_camera5_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000400u;
}
void Dt_Record_App::clear_has_camera5_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000400u;
}
void Dt_Record_App::clear_camera5_videoerrorflags_pt1() {
  camera5_videoerrorflags_pt1_ = 0;
  clear_has_camera5_videoerrorflags_pt1();
}
float Dt_Record_App::camera5_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt1)
  return camera5_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera5_videoerrorflags_pt1(float value) {
  set_has_camera5_videoerrorflags_pt1();
  camera5_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt1)
}

// optional float camera6_videoerrorflags_pt1 = 43;
bool Dt_Record_App::has_camera6_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void Dt_Record_App::set_has_camera6_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000800u;
}
void Dt_Record_App::clear_has_camera6_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000800u;
}
void Dt_Record_App::clear_camera6_videoerrorflags_pt1() {
  camera6_videoerrorflags_pt1_ = 0;
  clear_has_camera6_videoerrorflags_pt1();
}
float Dt_Record_App::camera6_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt1)
  return camera6_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera6_videoerrorflags_pt1(float value) {
  set_has_camera6_videoerrorflags_pt1();
  camera6_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt1)
}

// optional float camera7_videoerrorflags_pt1 = 44;
bool Dt_Record_App::has_camera7_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void Dt_Record_App::set_has_camera7_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00001000u;
}
void Dt_Record_App::clear_has_camera7_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00001000u;
}
void Dt_Record_App::clear_camera7_videoerrorflags_pt1() {
  camera7_videoerrorflags_pt1_ = 0;
  clear_has_camera7_videoerrorflags_pt1();
}
float Dt_Record_App::camera7_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt1)
  return camera7_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera7_videoerrorflags_pt1(float value) {
  set_has_camera7_videoerrorflags_pt1();
  camera7_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt1)
}

// optional float camera8_videoerrorflags_pt1 = 45;
bool Dt_Record_App::has_camera8_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void Dt_Record_App::set_has_camera8_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00002000u;
}
void Dt_Record_App::clear_has_camera8_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00002000u;
}
void Dt_Record_App::clear_camera8_videoerrorflags_pt1() {
  camera8_videoerrorflags_pt1_ = 0;
  clear_has_camera8_videoerrorflags_pt1();
}
float Dt_Record_App::camera8_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt1)
  return camera8_videoerrorflags_pt1_;
}
void Dt_Record_App::set_camera8_videoerrorflags_pt1(float value) {
  set_has_camera8_videoerrorflags_pt1();
  camera8_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt1)
}

// optional float camera1_videoerrorflags_pt2 = 46;
bool Dt_Record_App::has_camera1_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void Dt_Record_App::set_has_camera1_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00004000u;
}
void Dt_Record_App::clear_has_camera1_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00004000u;
}
void Dt_Record_App::clear_camera1_videoerrorflags_pt2() {
  camera1_videoerrorflags_pt2_ = 0;
  clear_has_camera1_videoerrorflags_pt2();
}
float Dt_Record_App::camera1_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt2)
  return camera1_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera1_videoerrorflags_pt2(float value) {
  set_has_camera1_videoerrorflags_pt2();
  camera1_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt2)
}

// optional float camera2_videoerrorflags_pt2 = 47;
bool Dt_Record_App::has_camera2_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void Dt_Record_App::set_has_camera2_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00008000u;
}
void Dt_Record_App::clear_has_camera2_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00008000u;
}
void Dt_Record_App::clear_camera2_videoerrorflags_pt2() {
  camera2_videoerrorflags_pt2_ = 0;
  clear_has_camera2_videoerrorflags_pt2();
}
float Dt_Record_App::camera2_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt2)
  return camera2_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera2_videoerrorflags_pt2(float value) {
  set_has_camera2_videoerrorflags_pt2();
  camera2_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt2)
}

// optional float camera3_videoerrorflags_pt2 = 48;
bool Dt_Record_App::has_camera3_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void Dt_Record_App::set_has_camera3_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00010000u;
}
void Dt_Record_App::clear_has_camera3_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00010000u;
}
void Dt_Record_App::clear_camera3_videoerrorflags_pt2() {
  camera3_videoerrorflags_pt2_ = 0;
  clear_has_camera3_videoerrorflags_pt2();
}
float Dt_Record_App::camera3_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt2)
  return camera3_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera3_videoerrorflags_pt2(float value) {
  set_has_camera3_videoerrorflags_pt2();
  camera3_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt2)
}

// optional float camera4_videoerrorflags_pt2 = 49;
bool Dt_Record_App::has_camera4_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void Dt_Record_App::set_has_camera4_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00020000u;
}
void Dt_Record_App::clear_has_camera4_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00020000u;
}
void Dt_Record_App::clear_camera4_videoerrorflags_pt2() {
  camera4_videoerrorflags_pt2_ = 0;
  clear_has_camera4_videoerrorflags_pt2();
}
float Dt_Record_App::camera4_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt2)
  return camera4_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera4_videoerrorflags_pt2(float value) {
  set_has_camera4_videoerrorflags_pt2();
  camera4_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt2)
}

// optional float camera5_videoerrorflags_pt2 = 50;
bool Dt_Record_App::has_camera5_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void Dt_Record_App::set_has_camera5_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00040000u;
}
void Dt_Record_App::clear_has_camera5_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00040000u;
}
void Dt_Record_App::clear_camera5_videoerrorflags_pt2() {
  camera5_videoerrorflags_pt2_ = 0;
  clear_has_camera5_videoerrorflags_pt2();
}
float Dt_Record_App::camera5_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt2)
  return camera5_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera5_videoerrorflags_pt2(float value) {
  set_has_camera5_videoerrorflags_pt2();
  camera5_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt2)
}

// optional float camera6_videoerrorflags_pt2 = 51;
bool Dt_Record_App::has_camera6_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void Dt_Record_App::set_has_camera6_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00080000u;
}
void Dt_Record_App::clear_has_camera6_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00080000u;
}
void Dt_Record_App::clear_camera6_videoerrorflags_pt2() {
  camera6_videoerrorflags_pt2_ = 0;
  clear_has_camera6_videoerrorflags_pt2();
}
float Dt_Record_App::camera6_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt2)
  return camera6_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera6_videoerrorflags_pt2(float value) {
  set_has_camera6_videoerrorflags_pt2();
  camera6_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt2)
}

// optional float camera7_videoerrorflags_pt2 = 52;
bool Dt_Record_App::has_camera7_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void Dt_Record_App::set_has_camera7_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00100000u;
}
void Dt_Record_App::clear_has_camera7_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00100000u;
}
void Dt_Record_App::clear_camera7_videoerrorflags_pt2() {
  camera7_videoerrorflags_pt2_ = 0;
  clear_has_camera7_videoerrorflags_pt2();
}
float Dt_Record_App::camera7_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt2)
  return camera7_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera7_videoerrorflags_pt2(float value) {
  set_has_camera7_videoerrorflags_pt2();
  camera7_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt2)
}

// optional float camera8_videoerrorflags_pt2 = 53;
bool Dt_Record_App::has_camera8_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void Dt_Record_App::set_has_camera8_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00200000u;
}
void Dt_Record_App::clear_has_camera8_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00200000u;
}
void Dt_Record_App::clear_camera8_videoerrorflags_pt2() {
  camera8_videoerrorflags_pt2_ = 0;
  clear_has_camera8_videoerrorflags_pt2();
}
float Dt_Record_App::camera8_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt2)
  return camera8_videoerrorflags_pt2_;
}
void Dt_Record_App::set_camera8_videoerrorflags_pt2(float value) {
  set_has_camera8_videoerrorflags_pt2();
  camera8_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt2)
}

// optional .atd.common.Header header = 54;
bool Dt_Record_App::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_App::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_App::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_App::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_App::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_App::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_App.header)
  return header_;
}
::atd::common::Header* Dt_Record_App::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_App.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_App::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_App.header)
}

// optional .atd.common.Reserved reservedmsg = 55;
bool Dt_Record_App::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_App::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_App::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_App::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_App::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_App::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_App.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_App::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_App.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_App::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_App.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_Common::kComZeroByteFieldNumber;
const int Dt_Record_Common::kComProtocolVersionFieldNumber;
const int Dt_Record_Common::kComSyncFrameIdFieldNumber;
const int Dt_Record_Common::kReserved1FieldNumber;
const int Dt_Record_Common::kComFrameMcuTsStartFieldNumber;
const int Dt_Record_Common::kComLastMcuSyncTsFieldNumber;
const int Dt_Record_Common::kComLastClockSyncErrorFieldNumber;
const int Dt_Record_Common::kReserved2FieldNumber;
const int Dt_Record_Common::kComEyeqFrameIdFieldNumber;
const int Dt_Record_Common::kComCamFrameIdFieldNumber;
const int Dt_Record_Common::kComDaytimeIndicatorFieldNumber;
const int Dt_Record_Common::kComDaytimeIndQualityFieldNumber;
const int Dt_Record_Common::kComHilModeStatusFieldNumber;
const int Dt_Record_Common::kComExposureTypeFieldNumber;
const int Dt_Record_Common::kReserved3FieldNumber;
const int Dt_Record_Common::kHeaderFieldNumber;
const int Dt_Record_Common::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_Common::Dt_Record_Common()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_Common)
}
Dt_Record_Common::Dt_Record_Common(const Dt_Record_Common& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&com_zero_byte_, &from.com_zero_byte_,
    reinterpret_cast<char*>(&reserved_3_) -
    reinterpret_cast<char*>(&com_zero_byte_) + sizeof(reserved_3_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_Common)
}

void Dt_Record_Common::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reserved_3_) -
    reinterpret_cast<char*>(&header_) + sizeof(reserved_3_));
}

Dt_Record_Common::~Dt_Record_Common() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_Common)
  SharedDtor();
}

void Dt_Record_Common::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Dt_Record_Common::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_Common& Dt_Record_Common::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_Common* Dt_Record_Common::New(::google::protobuf::Arena* arena) const {
  Dt_Record_Common* n = new Dt_Record_Common;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_Common::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_Common)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&com_zero_byte_, 0, reinterpret_cast<char*>(&com_last_mcu_sync_ts_) -
      reinterpret_cast<char*>(&com_zero_byte_) + sizeof(com_last_mcu_sync_ts_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&com_last_clock_sync_error_, 0, reinterpret_cast<char*>(&com_exposure_type_) -
      reinterpret_cast<char*>(&com_last_clock_sync_error_) + sizeof(com_exposure_type_));
  }
  reserved_3_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_Common::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_Common)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 com_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_com_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &com_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 com_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_com_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &com_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 com_sync_frame_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_com_sync_frame_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &com_sync_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double com_frame_mcu_ts_start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_com_frame_mcu_ts_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &com_frame_mcu_ts_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double com_last_mcu_sync_ts = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_com_last_mcu_sync_ts();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &com_last_mcu_sync_ts_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float com_last_clock_sync_error = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_com_last_clock_sync_error();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &com_last_clock_sync_error_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float com_eyeq_frame_id = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_com_eyeq_frame_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &com_eyeq_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float com_cam_frame_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_com_cam_frame_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &com_cam_frame_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_Common.Com_daytime_indicatorType com_daytime_indicator = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType_IsValid(value)) {
            set_com_daytime_indicator(static_cast< ::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float com_daytime_ind_quality = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_com_daytime_ind_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &com_daytime_ind_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_Common.Com_hil_mode_statusType com_hil_mode_status = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType_IsValid(value)) {
            set_com_hil_mode_status(static_cast< ::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(104u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_Common.Com_exposure_typeType com_exposure_type = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_Common_Com_exposure_typeType_IsValid(value)) {
            set_com_exposure_type(static_cast< ::atd::meprocess::Dt_Record_Common_Com_exposure_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(112u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float reserved_3 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_Common)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_Common)
  return false;
#undef DO_
}

void Dt_Record_Common::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_Common)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 com_zero_byte = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->com_zero_byte(), output);
  }

  // optional int32 com_protocol_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->com_protocol_version(), output);
  }

  // optional int32 com_sync_frame_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->com_sync_frame_id(), output);
  }

  // optional int32 reserved_1 = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reserved_1(), output);
  }

  // optional double com_frame_mcu_ts_start = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->com_frame_mcu_ts_start(), output);
  }

  // optional double com_last_mcu_sync_ts = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->com_last_mcu_sync_ts(), output);
  }

  // optional float com_last_clock_sync_error = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->com_last_clock_sync_error(), output);
  }

  // optional int32 reserved_2 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reserved_2(), output);
  }

  // optional float com_eyeq_frame_id = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->com_eyeq_frame_id(), output);
  }

  // optional float com_cam_frame_id = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->com_cam_frame_id(), output);
  }

  // optional .atd.meprocess.Dt_Record_Common.Com_daytime_indicatorType com_daytime_indicator = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->com_daytime_indicator(), output);
  }

  // optional float com_daytime_ind_quality = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->com_daytime_ind_quality(), output);
  }

  // optional .atd.meprocess.Dt_Record_Common.Com_hil_mode_statusType com_hil_mode_status = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->com_hil_mode_status(), output);
  }

  // optional .atd.meprocess.Dt_Record_Common.Com_exposure_typeType com_exposure_type = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->com_exposure_type(), output);
  }

  // optional float reserved_3 = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->reserved_3(), output);
  }

  // optional .atd.common.Header header = 16;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      16, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 17;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      17, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_Common)
}

size_t Dt_Record_Common::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_Common)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 16;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 17;
    if (has_reservedmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional int32 com_zero_byte = 1;
    if (has_com_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->com_zero_byte());
    }

    // optional int32 com_protocol_version = 2;
    if (has_com_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->com_protocol_version());
    }

    // optional int32 com_sync_frame_id = 3;
    if (has_com_sync_frame_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->com_sync_frame_id());
    }

    // optional int32 reserved_1 = 4;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional double com_frame_mcu_ts_start = 5;
    if (has_com_frame_mcu_ts_start()) {
      total_size += 1 + 8;
    }

    // optional double com_last_mcu_sync_ts = 6;
    if (has_com_last_mcu_sync_ts()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float com_last_clock_sync_error = 7;
    if (has_com_last_clock_sync_error()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_2 = 8;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional float com_eyeq_frame_id = 9;
    if (has_com_eyeq_frame_id()) {
      total_size += 1 + 4;
    }

    // optional float com_cam_frame_id = 10;
    if (has_com_cam_frame_id()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.Dt_Record_Common.Com_daytime_indicatorType com_daytime_indicator = 11;
    if (has_com_daytime_indicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->com_daytime_indicator());
    }

    // optional float com_daytime_ind_quality = 12;
    if (has_com_daytime_ind_quality()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.Dt_Record_Common.Com_hil_mode_statusType com_hil_mode_status = 13;
    if (has_com_hil_mode_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->com_hil_mode_status());
    }

    // optional .atd.meprocess.Dt_Record_Common.Com_exposure_typeType com_exposure_type = 14;
    if (has_com_exposure_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->com_exposure_type());
    }

  }
  // optional float reserved_3 = 15;
  if (has_reserved_3()) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_Common::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_Common*>(&from));
}

void Dt_Record_Common::MergeFrom(const Dt_Record_Common& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_Common)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      com_zero_byte_ = from.com_zero_byte_;
    }
    if (cached_has_bits & 0x00000008u) {
      com_protocol_version_ = from.com_protocol_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      com_sync_frame_id_ = from.com_sync_frame_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      com_frame_mcu_ts_start_ = from.com_frame_mcu_ts_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      com_last_mcu_sync_ts_ = from.com_last_mcu_sync_ts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      com_last_clock_sync_error_ = from.com_last_clock_sync_error_;
    }
    if (cached_has_bits & 0x00000200u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00000400u) {
      com_eyeq_frame_id_ = from.com_eyeq_frame_id_;
    }
    if (cached_has_bits & 0x00000800u) {
      com_cam_frame_id_ = from.com_cam_frame_id_;
    }
    if (cached_has_bits & 0x00001000u) {
      com_daytime_indicator_ = from.com_daytime_indicator_;
    }
    if (cached_has_bits & 0x00002000u) {
      com_daytime_ind_quality_ = from.com_daytime_ind_quality_;
    }
    if (cached_has_bits & 0x00004000u) {
      com_hil_mode_status_ = from.com_hil_mode_status_;
    }
    if (cached_has_bits & 0x00008000u) {
      com_exposure_type_ = from.com_exposure_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    set_reserved_3(from.reserved_3());
  }
}

void Dt_Record_Common::CopyFrom(const Dt_Record_Common& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_Common)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_Common::IsInitialized() const {
  return true;
}

void Dt_Record_Common::Swap(Dt_Record_Common* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_Common::InternalSwap(Dt_Record_Common* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(com_zero_byte_, other->com_zero_byte_);
  std::swap(com_protocol_version_, other->com_protocol_version_);
  std::swap(com_sync_frame_id_, other->com_sync_frame_id_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(com_frame_mcu_ts_start_, other->com_frame_mcu_ts_start_);
  std::swap(com_last_mcu_sync_ts_, other->com_last_mcu_sync_ts_);
  std::swap(com_last_clock_sync_error_, other->com_last_clock_sync_error_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(com_eyeq_frame_id_, other->com_eyeq_frame_id_);
  std::swap(com_cam_frame_id_, other->com_cam_frame_id_);
  std::swap(com_daytime_indicator_, other->com_daytime_indicator_);
  std::swap(com_daytime_ind_quality_, other->com_daytime_ind_quality_);
  std::swap(com_hil_mode_status_, other->com_hil_mode_status_);
  std::swap(com_exposure_type_, other->com_exposure_type_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_Common::GetTypeName() const {
  return "atd.meprocess.Dt_Record_Common";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_Common

// optional int32 com_zero_byte = 1;
bool Dt_Record_Common::has_com_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_Common::set_has_com_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_Common::clear_has_com_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_Common::clear_com_zero_byte() {
  com_zero_byte_ = 0;
  clear_has_com_zero_byte();
}
::google::protobuf::int32 Dt_Record_Common::com_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_zero_byte)
  return com_zero_byte_;
}
void Dt_Record_Common::set_com_zero_byte(::google::protobuf::int32 value) {
  set_has_com_zero_byte();
  com_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_zero_byte)
}

// optional int32 com_protocol_version = 2;
bool Dt_Record_Common::has_com_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Record_Common::set_has_com_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Record_Common::clear_has_com_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Record_Common::clear_com_protocol_version() {
  com_protocol_version_ = 0;
  clear_has_com_protocol_version();
}
::google::protobuf::int32 Dt_Record_Common::com_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_protocol_version)
  return com_protocol_version_;
}
void Dt_Record_Common::set_com_protocol_version(::google::protobuf::int32 value) {
  set_has_com_protocol_version();
  com_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_protocol_version)
}

// optional int32 com_sync_frame_id = 3;
bool Dt_Record_Common::has_com_sync_frame_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Record_Common::set_has_com_sync_frame_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Record_Common::clear_has_com_sync_frame_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Record_Common::clear_com_sync_frame_id() {
  com_sync_frame_id_ = 0;
  clear_has_com_sync_frame_id();
}
::google::protobuf::int32 Dt_Record_Common::com_sync_frame_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_sync_frame_id)
  return com_sync_frame_id_;
}
void Dt_Record_Common::set_com_sync_frame_id(::google::protobuf::int32 value) {
  set_has_com_sync_frame_id();
  com_sync_frame_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_sync_frame_id)
}

// optional int32 reserved_1 = 4;
bool Dt_Record_Common::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Record_Common::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Record_Common::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Record_Common::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 Dt_Record_Common::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reserved_1)
  return reserved_1_;
}
void Dt_Record_Common::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.reserved_1)
}

// optional double com_frame_mcu_ts_start = 5;
bool Dt_Record_Common::has_com_frame_mcu_ts_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Record_Common::set_has_com_frame_mcu_ts_start() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Record_Common::clear_has_com_frame_mcu_ts_start() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Record_Common::clear_com_frame_mcu_ts_start() {
  com_frame_mcu_ts_start_ = 0;
  clear_has_com_frame_mcu_ts_start();
}
double Dt_Record_Common::com_frame_mcu_ts_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_frame_mcu_ts_start)
  return com_frame_mcu_ts_start_;
}
void Dt_Record_Common::set_com_frame_mcu_ts_start(double value) {
  set_has_com_frame_mcu_ts_start();
  com_frame_mcu_ts_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_frame_mcu_ts_start)
}

// optional double com_last_mcu_sync_ts = 6;
bool Dt_Record_Common::has_com_last_mcu_sync_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Record_Common::set_has_com_last_mcu_sync_ts() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Record_Common::clear_has_com_last_mcu_sync_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Record_Common::clear_com_last_mcu_sync_ts() {
  com_last_mcu_sync_ts_ = 0;
  clear_has_com_last_mcu_sync_ts();
}
double Dt_Record_Common::com_last_mcu_sync_ts() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_last_mcu_sync_ts)
  return com_last_mcu_sync_ts_;
}
void Dt_Record_Common::set_com_last_mcu_sync_ts(double value) {
  set_has_com_last_mcu_sync_ts();
  com_last_mcu_sync_ts_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_last_mcu_sync_ts)
}

// optional float com_last_clock_sync_error = 7;
bool Dt_Record_Common::has_com_last_clock_sync_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Dt_Record_Common::set_has_com_last_clock_sync_error() {
  _has_bits_[0] |= 0x00000100u;
}
void Dt_Record_Common::clear_has_com_last_clock_sync_error() {
  _has_bits_[0] &= ~0x00000100u;
}
void Dt_Record_Common::clear_com_last_clock_sync_error() {
  com_last_clock_sync_error_ = 0;
  clear_has_com_last_clock_sync_error();
}
float Dt_Record_Common::com_last_clock_sync_error() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_last_clock_sync_error)
  return com_last_clock_sync_error_;
}
void Dt_Record_Common::set_com_last_clock_sync_error(float value) {
  set_has_com_last_clock_sync_error();
  com_last_clock_sync_error_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_last_clock_sync_error)
}

// optional int32 reserved_2 = 8;
bool Dt_Record_Common::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Dt_Record_Common::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000200u;
}
void Dt_Record_Common::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000200u;
}
void Dt_Record_Common::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 Dt_Record_Common::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reserved_2)
  return reserved_2_;
}
void Dt_Record_Common::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.reserved_2)
}

// optional float com_eyeq_frame_id = 9;
bool Dt_Record_Common::has_com_eyeq_frame_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Dt_Record_Common::set_has_com_eyeq_frame_id() {
  _has_bits_[0] |= 0x00000400u;
}
void Dt_Record_Common::clear_has_com_eyeq_frame_id() {
  _has_bits_[0] &= ~0x00000400u;
}
void Dt_Record_Common::clear_com_eyeq_frame_id() {
  com_eyeq_frame_id_ = 0;
  clear_has_com_eyeq_frame_id();
}
float Dt_Record_Common::com_eyeq_frame_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_eyeq_frame_id)
  return com_eyeq_frame_id_;
}
void Dt_Record_Common::set_com_eyeq_frame_id(float value) {
  set_has_com_eyeq_frame_id();
  com_eyeq_frame_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_eyeq_frame_id)
}

// optional float com_cam_frame_id = 10;
bool Dt_Record_Common::has_com_cam_frame_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Dt_Record_Common::set_has_com_cam_frame_id() {
  _has_bits_[0] |= 0x00000800u;
}
void Dt_Record_Common::clear_has_com_cam_frame_id() {
  _has_bits_[0] &= ~0x00000800u;
}
void Dt_Record_Common::clear_com_cam_frame_id() {
  com_cam_frame_id_ = 0;
  clear_has_com_cam_frame_id();
}
float Dt_Record_Common::com_cam_frame_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_cam_frame_id)
  return com_cam_frame_id_;
}
void Dt_Record_Common::set_com_cam_frame_id(float value) {
  set_has_com_cam_frame_id();
  com_cam_frame_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_cam_frame_id)
}

// optional .atd.meprocess.Dt_Record_Common.Com_daytime_indicatorType com_daytime_indicator = 11;
bool Dt_Record_Common::has_com_daytime_indicator() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Dt_Record_Common::set_has_com_daytime_indicator() {
  _has_bits_[0] |= 0x00001000u;
}
void Dt_Record_Common::clear_has_com_daytime_indicator() {
  _has_bits_[0] &= ~0x00001000u;
}
void Dt_Record_Common::clear_com_daytime_indicator() {
  com_daytime_indicator_ = 0;
  clear_has_com_daytime_indicator();
}
::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common::com_daytime_indicator() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_daytime_indicator)
  return static_cast< ::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType >(com_daytime_indicator_);
}
void Dt_Record_Common::set_com_daytime_indicator(::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType value) {
  assert(::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType_IsValid(value));
  set_has_com_daytime_indicator();
  com_daytime_indicator_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_daytime_indicator)
}

// optional float com_daytime_ind_quality = 12;
bool Dt_Record_Common::has_com_daytime_ind_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Dt_Record_Common::set_has_com_daytime_ind_quality() {
  _has_bits_[0] |= 0x00002000u;
}
void Dt_Record_Common::clear_has_com_daytime_ind_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
void Dt_Record_Common::clear_com_daytime_ind_quality() {
  com_daytime_ind_quality_ = 0;
  clear_has_com_daytime_ind_quality();
}
float Dt_Record_Common::com_daytime_ind_quality() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_daytime_ind_quality)
  return com_daytime_ind_quality_;
}
void Dt_Record_Common::set_com_daytime_ind_quality(float value) {
  set_has_com_daytime_ind_quality();
  com_daytime_ind_quality_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_daytime_ind_quality)
}

// optional .atd.meprocess.Dt_Record_Common.Com_hil_mode_statusType com_hil_mode_status = 13;
bool Dt_Record_Common::has_com_hil_mode_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Dt_Record_Common::set_has_com_hil_mode_status() {
  _has_bits_[0] |= 0x00004000u;
}
void Dt_Record_Common::clear_has_com_hil_mode_status() {
  _has_bits_[0] &= ~0x00004000u;
}
void Dt_Record_Common::clear_com_hil_mode_status() {
  com_hil_mode_status_ = 0;
  clear_has_com_hil_mode_status();
}
::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common::com_hil_mode_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_hil_mode_status)
  return static_cast< ::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType >(com_hil_mode_status_);
}
void Dt_Record_Common::set_com_hil_mode_status(::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType value) {
  assert(::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType_IsValid(value));
  set_has_com_hil_mode_status();
  com_hil_mode_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_hil_mode_status)
}

// optional .atd.meprocess.Dt_Record_Common.Com_exposure_typeType com_exposure_type = 14;
bool Dt_Record_Common::has_com_exposure_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Dt_Record_Common::set_has_com_exposure_type() {
  _has_bits_[0] |= 0x00008000u;
}
void Dt_Record_Common::clear_has_com_exposure_type() {
  _has_bits_[0] &= ~0x00008000u;
}
void Dt_Record_Common::clear_com_exposure_type() {
  com_exposure_type_ = 0;
  clear_has_com_exposure_type();
}
::atd::meprocess::Dt_Record_Common_Com_exposure_typeType Dt_Record_Common::com_exposure_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_exposure_type)
  return static_cast< ::atd::meprocess::Dt_Record_Common_Com_exposure_typeType >(com_exposure_type_);
}
void Dt_Record_Common::set_com_exposure_type(::atd::meprocess::Dt_Record_Common_Com_exposure_typeType value) {
  assert(::atd::meprocess::Dt_Record_Common_Com_exposure_typeType_IsValid(value));
  set_has_com_exposure_type();
  com_exposure_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_exposure_type)
}

// optional float reserved_3 = 15;
bool Dt_Record_Common::has_reserved_3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Dt_Record_Common::set_has_reserved_3() {
  _has_bits_[0] |= 0x00010000u;
}
void Dt_Record_Common::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00010000u;
}
void Dt_Record_Common::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
float Dt_Record_Common::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reserved_3)
  return reserved_3_;
}
void Dt_Record_Common::set_reserved_3(float value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.reserved_3)
}

// optional .atd.common.Header header = 16;
bool Dt_Record_Common::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_Common::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_Common::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_Common::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_Common::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_Common::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Common.header)
  return header_;
}
::atd::common::Header* Dt_Record_Common::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Common.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_Common::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Common.header)
}

// optional .atd.common.Reserved reservedmsg = 17;
bool Dt_Record_Common::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_Common::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_Common::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_Common::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_Common::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_Common::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Common.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_Common::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Common.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_Common::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Common.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CACommon::kZeroByteFieldNumber;
const int CACommon::kCaProtocolVersionFieldNumber;
const int CACommon::kCaSyncIdFieldNumber;
const int CACommon::kCaRegionCodeFieldNumber;
const int CACommon::kCaObjectsCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CACommon::CACommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.CACommon)
}
CACommon::CACommon(const CACommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zero_byte_, &from.zero_byte_,
    reinterpret_cast<char*>(&ca_objects_count_) -
    reinterpret_cast<char*>(&zero_byte_) + sizeof(ca_objects_count_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.CACommon)
}

void CACommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&zero_byte_, 0, reinterpret_cast<char*>(&ca_objects_count_) -
    reinterpret_cast<char*>(&zero_byte_) + sizeof(ca_objects_count_));
}

CACommon::~CACommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.CACommon)
  SharedDtor();
}

void CACommon::SharedDtor() {
}

void CACommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CACommon& CACommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

CACommon* CACommon::New(::google::protobuf::Arena* arena) const {
  CACommon* n = new CACommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CACommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.CACommon)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&zero_byte_, 0, reinterpret_cast<char*>(&ca_objects_count_) -
      reinterpret_cast<char*>(&zero_byte_) + sizeof(ca_objects_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CACommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.CACommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ca_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ca_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ca_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ca_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ca_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ca_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.CACommon.Ca_region_codeType ca_region_code = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::CACommon_Ca_region_codeType_IsValid(value)) {
            set_ca_region_code(static_cast< ::atd::meprocess::CACommon_Ca_region_codeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ca_objects_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ca_objects_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ca_objects_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.CACommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.CACommon)
  return false;
#undef DO_
}

void CACommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.CACommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zero_byte(), output);
  }

  // optional int32 ca_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ca_protocol_version(), output);
  }

  // optional int32 ca_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ca_sync_id(), output);
  }

  // optional .atd.meprocess.CACommon.Ca_region_codeType ca_region_code = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ca_region_code(), output);
  }

  // optional int32 ca_objects_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ca_objects_count(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.CACommon)
}

size_t CACommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.CACommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 zero_byte = 1;
    if (has_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_byte());
    }

    // optional int32 ca_protocol_version = 2;
    if (has_ca_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ca_protocol_version());
    }

    // optional int32 ca_sync_id = 3;
    if (has_ca_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ca_sync_id());
    }

    // optional .atd.meprocess.CACommon.Ca_region_codeType ca_region_code = 4;
    if (has_ca_region_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ca_region_code());
    }

    // optional int32 ca_objects_count = 5;
    if (has_ca_objects_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ca_objects_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CACommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CACommon*>(&from));
}

void CACommon::MergeFrom(const CACommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.CACommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      zero_byte_ = from.zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      ca_protocol_version_ = from.ca_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      ca_sync_id_ = from.ca_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ca_region_code_ = from.ca_region_code_;
    }
    if (cached_has_bits & 0x00000010u) {
      ca_objects_count_ = from.ca_objects_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CACommon::CopyFrom(const CACommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.CACommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CACommon::IsInitialized() const {
  return true;
}

void CACommon::Swap(CACommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CACommon::InternalSwap(CACommon* other) {
  std::swap(zero_byte_, other->zero_byte_);
  std::swap(ca_protocol_version_, other->ca_protocol_version_);
  std::swap(ca_sync_id_, other->ca_sync_id_);
  std::swap(ca_region_code_, other->ca_region_code_);
  std::swap(ca_objects_count_, other->ca_objects_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CACommon::GetTypeName() const {
  return "atd.meprocess.CACommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CACommon

// optional int32 zero_byte = 1;
bool CACommon::has_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CACommon::set_has_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void CACommon::clear_has_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void CACommon::clear_zero_byte() {
  zero_byte_ = 0;
  clear_has_zero_byte();
}
::google::protobuf::int32 CACommon::zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.zero_byte)
  return zero_byte_;
}
void CACommon::set_zero_byte(::google::protobuf::int32 value) {
  set_has_zero_byte();
  zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.zero_byte)
}

// optional int32 ca_protocol_version = 2;
bool CACommon::has_ca_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CACommon::set_has_ca_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void CACommon::clear_has_ca_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void CACommon::clear_ca_protocol_version() {
  ca_protocol_version_ = 0;
  clear_has_ca_protocol_version();
}
::google::protobuf::int32 CACommon::ca_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_protocol_version)
  return ca_protocol_version_;
}
void CACommon::set_ca_protocol_version(::google::protobuf::int32 value) {
  set_has_ca_protocol_version();
  ca_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_protocol_version)
}

// optional int32 ca_sync_id = 3;
bool CACommon::has_ca_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CACommon::set_has_ca_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void CACommon::clear_has_ca_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void CACommon::clear_ca_sync_id() {
  ca_sync_id_ = 0;
  clear_has_ca_sync_id();
}
::google::protobuf::int32 CACommon::ca_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_sync_id)
  return ca_sync_id_;
}
void CACommon::set_ca_sync_id(::google::protobuf::int32 value) {
  set_has_ca_sync_id();
  ca_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_sync_id)
}

// optional .atd.meprocess.CACommon.Ca_region_codeType ca_region_code = 4;
bool CACommon::has_ca_region_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CACommon::set_has_ca_region_code() {
  _has_bits_[0] |= 0x00000008u;
}
void CACommon::clear_has_ca_region_code() {
  _has_bits_[0] &= ~0x00000008u;
}
void CACommon::clear_ca_region_code() {
  ca_region_code_ = 0;
  clear_has_ca_region_code();
}
::atd::meprocess::CACommon_Ca_region_codeType CACommon::ca_region_code() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_region_code)
  return static_cast< ::atd::meprocess::CACommon_Ca_region_codeType >(ca_region_code_);
}
void CACommon::set_ca_region_code(::atd::meprocess::CACommon_Ca_region_codeType value) {
  assert(::atd::meprocess::CACommon_Ca_region_codeType_IsValid(value));
  set_has_ca_region_code();
  ca_region_code_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_region_code)
}

// optional int32 ca_objects_count = 5;
bool CACommon::has_ca_objects_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CACommon::set_has_ca_objects_count() {
  _has_bits_[0] |= 0x00000010u;
}
void CACommon::clear_has_ca_objects_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void CACommon::clear_ca_objects_count() {
  ca_objects_count_ = 0;
  clear_has_ca_objects_count();
}
::google::protobuf::int32 CACommon::ca_objects_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_objects_count)
  return ca_objects_count_;
}
void CACommon::set_ca_objects_count(::google::protobuf::int32 value) {
  set_has_ca_objects_count();
  ca_objects_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_objects_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_ConstructionArea::kHeaderFieldNumber;
const int Dt_Record_ConstructionArea::kReservedmsgFieldNumber;
const int Dt_Record_ConstructionArea::kStcacommonFieldNumber;
const int Dt_Record_ConstructionArea::kDtArray14CaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_ConstructionArea::Dt_Record_ConstructionArea()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_ConstructionArea)
}
Dt_Record_ConstructionArea::Dt_Record_ConstructionArea(const Dt_Record_ConstructionArea& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_14_ca_(from.dt_array_14_ca_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stcacommon()) {
    stcacommon_ = new ::atd::meprocess::CACommon(*from.stcacommon_);
  } else {
    stcacommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_ConstructionArea)
}

void Dt_Record_ConstructionArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stcacommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stcacommon_));
}

Dt_Record_ConstructionArea::~Dt_Record_ConstructionArea() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_ConstructionArea)
  SharedDtor();
}

void Dt_Record_ConstructionArea::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stcacommon_;
  }
}

void Dt_Record_ConstructionArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_ConstructionArea& Dt_Record_ConstructionArea::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_ConstructionArea* Dt_Record_ConstructionArea::New(::google::protobuf::Arena* arena) const {
  Dt_Record_ConstructionArea* n = new Dt_Record_ConstructionArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_ConstructionArea::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_ConstructionArea)
  dt_array_14_ca_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stcacommon()) {
      GOOGLE_DCHECK(stcacommon_ != NULL);
      stcacommon_->::atd::meprocess::CACommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_ConstructionArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_ConstructionArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.CACommon stcacommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stcacommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.ConArea dt_array_14_ca = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_14_ca()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_ConstructionArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_ConstructionArea)
  return false;
#undef DO_
}

void Dt_Record_ConstructionArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_ConstructionArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.CACommon stcacommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stcacommon_, output);
  }

  // repeated .atd.meprocess.ConArea dt_array_14_ca = 4;
  for (unsigned int i = 0, n = this->dt_array_14_ca_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_14_ca(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_ConstructionArea)
}

size_t Dt_Record_ConstructionArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_ConstructionArea)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.ConArea dt_array_14_ca = 4;
  {
    unsigned int count = this->dt_array_14_ca_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_14_ca(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.CACommon stcacommon = 3;
    if (has_stcacommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stcacommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_ConstructionArea::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_ConstructionArea*>(&from));
}

void Dt_Record_ConstructionArea::MergeFrom(const Dt_Record_ConstructionArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_ConstructionArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_14_ca_.MergeFrom(from.dt_array_14_ca_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stcacommon()->::atd::meprocess::CACommon::MergeFrom(from.stcacommon());
    }
  }
}

void Dt_Record_ConstructionArea::CopyFrom(const Dt_Record_ConstructionArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_ConstructionArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_ConstructionArea::IsInitialized() const {
  return true;
}

void Dt_Record_ConstructionArea::Swap(Dt_Record_ConstructionArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_ConstructionArea::InternalSwap(Dt_Record_ConstructionArea* other) {
  dt_array_14_ca_.InternalSwap(&other->dt_array_14_ca_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stcacommon_, other->stcacommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_ConstructionArea::GetTypeName() const {
  return "atd.meprocess.Dt_Record_ConstructionArea";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_ConstructionArea

// optional .atd.common.Header header = 1;
bool Dt_Record_ConstructionArea::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_ConstructionArea::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_ConstructionArea::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_ConstructionArea::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_ConstructionArea::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_ConstructionArea::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.header)
  return header_;
}
::atd::common::Header* Dt_Record_ConstructionArea::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_ConstructionArea.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_ConstructionArea::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_ConstructionArea.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_ConstructionArea::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_ConstructionArea::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_ConstructionArea::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_ConstructionArea::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_ConstructionArea::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_ConstructionArea::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_ConstructionArea::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_ConstructionArea::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
}

// optional .atd.meprocess.CACommon stcacommon = 3;
bool Dt_Record_ConstructionArea::has_stcacommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_ConstructionArea::set_has_stcacommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_ConstructionArea::clear_has_stcacommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_ConstructionArea::clear_stcacommon() {
  if (stcacommon_ != NULL) stcacommon_->::atd::meprocess::CACommon::Clear();
  clear_has_stcacommon();
}
const ::atd::meprocess::CACommon& Dt_Record_ConstructionArea::stcacommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
  return stcacommon_ != NULL ? *stcacommon_
                         : *::atd::meprocess::CACommon::internal_default_instance();
}
::atd::meprocess::CACommon* Dt_Record_ConstructionArea::mutable_stcacommon() {
  set_has_stcacommon();
  if (stcacommon_ == NULL) {
    stcacommon_ = new ::atd::meprocess::CACommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
  return stcacommon_;
}
::atd::meprocess::CACommon* Dt_Record_ConstructionArea::release_stcacommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
  clear_has_stcacommon();
  ::atd::meprocess::CACommon* temp = stcacommon_;
  stcacommon_ = NULL;
  return temp;
}
void Dt_Record_ConstructionArea::set_allocated_stcacommon(::atd::meprocess::CACommon* stcacommon) {
  delete stcacommon_;
  stcacommon_ = stcacommon;
  if (stcacommon) {
    set_has_stcacommon();
  } else {
    clear_has_stcacommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
}

// repeated .atd.meprocess.ConArea dt_array_14_ca = 4;
int Dt_Record_ConstructionArea::dt_array_14_ca_size() const {
  return dt_array_14_ca_.size();
}
void Dt_Record_ConstructionArea::clear_dt_array_14_ca() {
  dt_array_14_ca_.Clear();
}
const ::atd::meprocess::ConArea& Dt_Record_ConstructionArea::dt_array_14_ca(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_.Get(index);
}
::atd::meprocess::ConArea* Dt_Record_ConstructionArea::mutable_dt_array_14_ca(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_.Mutable(index);
}
::atd::meprocess::ConArea* Dt_Record_ConstructionArea::add_dt_array_14_ca() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::ConArea >*
Dt_Record_ConstructionArea::mutable_dt_array_14_ca() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return &dt_array_14_ca_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::ConArea >&
Dt_Record_ConstructionArea::dt_array_14_ca() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConArea::kCaIdFieldNumber;
const int ConArea::kCaFrameAgeFieldNumber;
const int ConArea::kCaCaObjectTypeFieldNumber;
const int ConArea::kReserved1FieldNumber;
const int ConArea::kCaLongDistanceFieldNumber;
const int ConArea::kCaLongDistancstdFieldNumber;
const int ConArea::kCaLatDistanceFieldNumber;
const int ConArea::kCaLatDistancstdFieldNumber;
const int ConArea::kReserved2FieldNumber;
const int ConArea::kCaHeightFieldNumber;
const int ConArea::kCaHeightStdFieldNumber;
const int ConArea::kReserved3FieldNumber;
const int ConArea::kCaObjectHeightFieldNumber;
const int ConArea::kCaObjectHeightStdFieldNumber;
const int ConArea::kReserved4FieldNumber;
const int ConArea::kCaObjectWidthFieldNumber;
const int ConArea::kCaObjectWidthStdFieldNumber;
const int ConArea::kCaBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConArea::ConArea()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.ConArea)
}
ConArea::ConArea(const ConArea& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ca_id_, &from.ca_id_,
    reinterpret_cast<char*>(&ca_buffer_) -
    reinterpret_cast<char*>(&ca_id_) + sizeof(ca_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.ConArea)
}

void ConArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ca_id_, 0, reinterpret_cast<char*>(&ca_buffer_) -
    reinterpret_cast<char*>(&ca_id_) + sizeof(ca_buffer_));
}

ConArea::~ConArea() {
  // @@protoc_insertion_point(destructor:atd.meprocess.ConArea)
  SharedDtor();
}

void ConArea::SharedDtor() {
}

void ConArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConArea& ConArea::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConArea* ConArea::New(::google::protobuf::Arena* arena) const {
  ConArea* n = new ConArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConArea::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.ConArea)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ca_id_, 0, reinterpret_cast<char*>(&ca_lat_distancstd_) -
      reinterpret_cast<char*>(&ca_id_) + sizeof(ca_lat_distancstd_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&reserved_2_, 0, reinterpret_cast<char*>(&ca_object_width_) -
      reinterpret_cast<char*>(&reserved_2_) + sizeof(ca_object_width_));
  }
  if (_has_bits_[16 / 32] & 196608u) {
    ::memset(&ca_object_width_std_, 0, reinterpret_cast<char*>(&ca_buffer_) -
      reinterpret_cast<char*>(&ca_object_width_std_) + sizeof(ca_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ConArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.ConArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ca_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ca_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ca_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ca_frame_age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ca_frame_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ca_frame_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.ConArea.Ca_ca_object_typeType ca_ca_object_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::ConArea_Ca_ca_object_typeType_IsValid(value)) {
            set_ca_ca_object_type(static_cast< ::atd::meprocess::ConArea_Ca_ca_object_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_long_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_ca_long_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_long_distancstd = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_ca_long_distancstd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_long_distancstd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_lat_distance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_ca_lat_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_lat_distancstd = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_ca_lat_distancstd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_lat_distancstd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_height = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_ca_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_height_std = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_ca_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_3 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_object_height = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_ca_object_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_object_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_object_height_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_ca_object_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_object_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_object_width = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_ca_object_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_object_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ca_object_width_std = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_ca_object_width_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ca_object_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ca_buffer = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_ca_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ca_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.ConArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.ConArea)
  return false;
#undef DO_
}

void ConArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.ConArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ca_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ca_id(), output);
  }

  // optional int32 ca_frame_age = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ca_frame_age(), output);
  }

  // optional .atd.meprocess.ConArea.Ca_ca_object_typeType ca_ca_object_type = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->ca_ca_object_type(), output);
  }

  // optional int32 reserved_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reserved_1(), output);
  }

  // optional float ca_long_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->ca_long_distance(), output);
  }

  // optional float ca_long_distancstd = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ca_long_distancstd(), output);
  }

  // optional float ca_lat_distance = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ca_lat_distance(), output);
  }

  // optional float ca_lat_distancstd = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ca_lat_distancstd(), output);
  }

  // optional int32 reserved_2 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reserved_2(), output);
  }

  // optional float ca_height = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ca_height(), output);
  }

  // optional float ca_height_std = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->ca_height_std(), output);
  }

  // optional int32 reserved_3 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reserved_3(), output);
  }

  // optional float ca_object_height = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->ca_object_height(), output);
  }

  // optional float ca_object_height_std = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->ca_object_height_std(), output);
  }

  // optional int32 reserved_4 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->reserved_4(), output);
  }

  // optional float ca_object_width = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->ca_object_width(), output);
  }

  // optional float ca_object_width_std = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->ca_object_width_std(), output);
  }

  // optional int32 ca_buffer = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->ca_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.ConArea)
}

size_t ConArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.ConArea)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 ca_id = 1;
    if (has_ca_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ca_id());
    }

    // optional int32 ca_frame_age = 2;
    if (has_ca_frame_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ca_frame_age());
    }

    // optional .atd.meprocess.ConArea.Ca_ca_object_typeType ca_ca_object_type = 3;
    if (has_ca_ca_object_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ca_ca_object_type());
    }

    // optional int32 reserved_1 = 4;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional float ca_long_distance = 5;
    if (has_ca_long_distance()) {
      total_size += 1 + 4;
    }

    // optional float ca_long_distancstd = 6;
    if (has_ca_long_distancstd()) {
      total_size += 1 + 4;
    }

    // optional float ca_lat_distance = 7;
    if (has_ca_lat_distance()) {
      total_size += 1 + 4;
    }

    // optional float ca_lat_distancstd = 8;
    if (has_ca_lat_distancstd()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 reserved_2 = 9;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional float ca_height = 10;
    if (has_ca_height()) {
      total_size += 1 + 4;
    }

    // optional float ca_height_std = 11;
    if (has_ca_height_std()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_3 = 12;
    if (has_reserved_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_3());
    }

    // optional float ca_object_height = 13;
    if (has_ca_object_height()) {
      total_size += 1 + 4;
    }

    // optional float ca_object_height_std = 14;
    if (has_ca_object_height_std()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_4 = 15;
    if (has_reserved_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional float ca_object_width = 16;
    if (has_ca_object_width()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 196608u) {
    // optional float ca_object_width_std = 17;
    if (has_ca_object_width_std()) {
      total_size += 2 + 4;
    }

    // optional int32 ca_buffer = 18;
    if (has_ca_buffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ca_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConArea::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConArea*>(&from));
}

void ConArea::MergeFrom(const ConArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.ConArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ca_id_ = from.ca_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ca_frame_age_ = from.ca_frame_age_;
    }
    if (cached_has_bits & 0x00000004u) {
      ca_ca_object_type_ = from.ca_ca_object_type_;
    }
    if (cached_has_bits & 0x00000008u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      ca_long_distance_ = from.ca_long_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      ca_long_distancstd_ = from.ca_long_distancstd_;
    }
    if (cached_has_bits & 0x00000040u) {
      ca_lat_distance_ = from.ca_lat_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      ca_lat_distancstd_ = from.ca_lat_distancstd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00000200u) {
      ca_height_ = from.ca_height_;
    }
    if (cached_has_bits & 0x00000400u) {
      ca_height_std_ = from.ca_height_std_;
    }
    if (cached_has_bits & 0x00000800u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00001000u) {
      ca_object_height_ = from.ca_object_height_;
    }
    if (cached_has_bits & 0x00002000u) {
      ca_object_height_std_ = from.ca_object_height_std_;
    }
    if (cached_has_bits & 0x00004000u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00008000u) {
      ca_object_width_ = from.ca_object_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 196608u) {
    if (cached_has_bits & 0x00010000u) {
      ca_object_width_std_ = from.ca_object_width_std_;
    }
    if (cached_has_bits & 0x00020000u) {
      ca_buffer_ = from.ca_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ConArea::CopyFrom(const ConArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.ConArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConArea::IsInitialized() const {
  return true;
}

void ConArea::Swap(ConArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConArea::InternalSwap(ConArea* other) {
  std::swap(ca_id_, other->ca_id_);
  std::swap(ca_frame_age_, other->ca_frame_age_);
  std::swap(ca_ca_object_type_, other->ca_ca_object_type_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(ca_long_distance_, other->ca_long_distance_);
  std::swap(ca_long_distancstd_, other->ca_long_distancstd_);
  std::swap(ca_lat_distance_, other->ca_lat_distance_);
  std::swap(ca_lat_distancstd_, other->ca_lat_distancstd_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(ca_height_, other->ca_height_);
  std::swap(ca_height_std_, other->ca_height_std_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(ca_object_height_, other->ca_object_height_);
  std::swap(ca_object_height_std_, other->ca_object_height_std_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(ca_object_width_, other->ca_object_width_);
  std::swap(ca_object_width_std_, other->ca_object_width_std_);
  std::swap(ca_buffer_, other->ca_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ConArea::GetTypeName() const {
  return "atd.meprocess.ConArea";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConArea

// optional int32 ca_id = 1;
bool ConArea::has_ca_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConArea::set_has_ca_id() {
  _has_bits_[0] |= 0x00000001u;
}
void ConArea::clear_has_ca_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConArea::clear_ca_id() {
  ca_id_ = 0;
  clear_has_ca_id();
}
::google::protobuf::int32 ConArea::ca_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_id)
  return ca_id_;
}
void ConArea::set_ca_id(::google::protobuf::int32 value) {
  set_has_ca_id();
  ca_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_id)
}

// optional int32 ca_frame_age = 2;
bool ConArea::has_ca_frame_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConArea::set_has_ca_frame_age() {
  _has_bits_[0] |= 0x00000002u;
}
void ConArea::clear_has_ca_frame_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConArea::clear_ca_frame_age() {
  ca_frame_age_ = 0;
  clear_has_ca_frame_age();
}
::google::protobuf::int32 ConArea::ca_frame_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_frame_age)
  return ca_frame_age_;
}
void ConArea::set_ca_frame_age(::google::protobuf::int32 value) {
  set_has_ca_frame_age();
  ca_frame_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_frame_age)
}

// optional .atd.meprocess.ConArea.Ca_ca_object_typeType ca_ca_object_type = 3;
bool ConArea::has_ca_ca_object_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConArea::set_has_ca_ca_object_type() {
  _has_bits_[0] |= 0x00000004u;
}
void ConArea::clear_has_ca_ca_object_type() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConArea::clear_ca_ca_object_type() {
  ca_ca_object_type_ = 0;
  clear_has_ca_ca_object_type();
}
::atd::meprocess::ConArea_Ca_ca_object_typeType ConArea::ca_ca_object_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_ca_object_type)
  return static_cast< ::atd::meprocess::ConArea_Ca_ca_object_typeType >(ca_ca_object_type_);
}
void ConArea::set_ca_ca_object_type(::atd::meprocess::ConArea_Ca_ca_object_typeType value) {
  assert(::atd::meprocess::ConArea_Ca_ca_object_typeType_IsValid(value));
  set_has_ca_ca_object_type();
  ca_ca_object_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_ca_object_type)
}

// optional int32 reserved_1 = 4;
bool ConArea::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ConArea::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000008u;
}
void ConArea::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000008u;
}
void ConArea::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 ConArea::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_1)
  return reserved_1_;
}
void ConArea::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_1)
}

// optional float ca_long_distance = 5;
bool ConArea::has_ca_long_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ConArea::set_has_ca_long_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void ConArea::clear_has_ca_long_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void ConArea::clear_ca_long_distance() {
  ca_long_distance_ = 0;
  clear_has_ca_long_distance();
}
float ConArea::ca_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_long_distance)
  return ca_long_distance_;
}
void ConArea::set_ca_long_distance(float value) {
  set_has_ca_long_distance();
  ca_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_long_distance)
}

// optional float ca_long_distancstd = 6;
bool ConArea::has_ca_long_distancstd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ConArea::set_has_ca_long_distancstd() {
  _has_bits_[0] |= 0x00000020u;
}
void ConArea::clear_has_ca_long_distancstd() {
  _has_bits_[0] &= ~0x00000020u;
}
void ConArea::clear_ca_long_distancstd() {
  ca_long_distancstd_ = 0;
  clear_has_ca_long_distancstd();
}
float ConArea::ca_long_distancstd() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_long_distancstd)
  return ca_long_distancstd_;
}
void ConArea::set_ca_long_distancstd(float value) {
  set_has_ca_long_distancstd();
  ca_long_distancstd_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_long_distancstd)
}

// optional float ca_lat_distance = 7;
bool ConArea::has_ca_lat_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ConArea::set_has_ca_lat_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void ConArea::clear_has_ca_lat_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void ConArea::clear_ca_lat_distance() {
  ca_lat_distance_ = 0;
  clear_has_ca_lat_distance();
}
float ConArea::ca_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_lat_distance)
  return ca_lat_distance_;
}
void ConArea::set_ca_lat_distance(float value) {
  set_has_ca_lat_distance();
  ca_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_lat_distance)
}

// optional float ca_lat_distancstd = 8;
bool ConArea::has_ca_lat_distancstd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ConArea::set_has_ca_lat_distancstd() {
  _has_bits_[0] |= 0x00000080u;
}
void ConArea::clear_has_ca_lat_distancstd() {
  _has_bits_[0] &= ~0x00000080u;
}
void ConArea::clear_ca_lat_distancstd() {
  ca_lat_distancstd_ = 0;
  clear_has_ca_lat_distancstd();
}
float ConArea::ca_lat_distancstd() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_lat_distancstd)
  return ca_lat_distancstd_;
}
void ConArea::set_ca_lat_distancstd(float value) {
  set_has_ca_lat_distancstd();
  ca_lat_distancstd_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_lat_distancstd)
}

// optional int32 reserved_2 = 9;
bool ConArea::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ConArea::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000100u;
}
void ConArea::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000100u;
}
void ConArea::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 ConArea::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_2)
  return reserved_2_;
}
void ConArea::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_2)
}

// optional float ca_height = 10;
bool ConArea::has_ca_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ConArea::set_has_ca_height() {
  _has_bits_[0] |= 0x00000200u;
}
void ConArea::clear_has_ca_height() {
  _has_bits_[0] &= ~0x00000200u;
}
void ConArea::clear_ca_height() {
  ca_height_ = 0;
  clear_has_ca_height();
}
float ConArea::ca_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_height)
  return ca_height_;
}
void ConArea::set_ca_height(float value) {
  set_has_ca_height();
  ca_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_height)
}

// optional float ca_height_std = 11;
bool ConArea::has_ca_height_std() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ConArea::set_has_ca_height_std() {
  _has_bits_[0] |= 0x00000400u;
}
void ConArea::clear_has_ca_height_std() {
  _has_bits_[0] &= ~0x00000400u;
}
void ConArea::clear_ca_height_std() {
  ca_height_std_ = 0;
  clear_has_ca_height_std();
}
float ConArea::ca_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_height_std)
  return ca_height_std_;
}
void ConArea::set_ca_height_std(float value) {
  set_has_ca_height_std();
  ca_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_height_std)
}

// optional int32 reserved_3 = 12;
bool ConArea::has_reserved_3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ConArea::set_has_reserved_3() {
  _has_bits_[0] |= 0x00000800u;
}
void ConArea::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00000800u;
}
void ConArea::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
::google::protobuf::int32 ConArea::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_3)
  return reserved_3_;
}
void ConArea::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_3)
}

// optional float ca_object_height = 13;
bool ConArea::has_ca_object_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ConArea::set_has_ca_object_height() {
  _has_bits_[0] |= 0x00001000u;
}
void ConArea::clear_has_ca_object_height() {
  _has_bits_[0] &= ~0x00001000u;
}
void ConArea::clear_ca_object_height() {
  ca_object_height_ = 0;
  clear_has_ca_object_height();
}
float ConArea::ca_object_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_height)
  return ca_object_height_;
}
void ConArea::set_ca_object_height(float value) {
  set_has_ca_object_height();
  ca_object_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_height)
}

// optional float ca_object_height_std = 14;
bool ConArea::has_ca_object_height_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ConArea::set_has_ca_object_height_std() {
  _has_bits_[0] |= 0x00002000u;
}
void ConArea::clear_has_ca_object_height_std() {
  _has_bits_[0] &= ~0x00002000u;
}
void ConArea::clear_ca_object_height_std() {
  ca_object_height_std_ = 0;
  clear_has_ca_object_height_std();
}
float ConArea::ca_object_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_height_std)
  return ca_object_height_std_;
}
void ConArea::set_ca_object_height_std(float value) {
  set_has_ca_object_height_std();
  ca_object_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_height_std)
}

// optional int32 reserved_4 = 15;
bool ConArea::has_reserved_4() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ConArea::set_has_reserved_4() {
  _has_bits_[0] |= 0x00004000u;
}
void ConArea::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00004000u;
}
void ConArea::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 ConArea::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_4)
  return reserved_4_;
}
void ConArea::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_4)
}

// optional float ca_object_width = 16;
bool ConArea::has_ca_object_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ConArea::set_has_ca_object_width() {
  _has_bits_[0] |= 0x00008000u;
}
void ConArea::clear_has_ca_object_width() {
  _has_bits_[0] &= ~0x00008000u;
}
void ConArea::clear_ca_object_width() {
  ca_object_width_ = 0;
  clear_has_ca_object_width();
}
float ConArea::ca_object_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_width)
  return ca_object_width_;
}
void ConArea::set_ca_object_width(float value) {
  set_has_ca_object_width();
  ca_object_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_width)
}

// optional float ca_object_width_std = 17;
bool ConArea::has_ca_object_width_std() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ConArea::set_has_ca_object_width_std() {
  _has_bits_[0] |= 0x00010000u;
}
void ConArea::clear_has_ca_object_width_std() {
  _has_bits_[0] &= ~0x00010000u;
}
void ConArea::clear_ca_object_width_std() {
  ca_object_width_std_ = 0;
  clear_has_ca_object_width_std();
}
float ConArea::ca_object_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_width_std)
  return ca_object_width_std_;
}
void ConArea::set_ca_object_width_std(float value) {
  set_has_ca_object_width_std();
  ca_object_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_width_std)
}

// optional int32 ca_buffer = 18;
bool ConArea::has_ca_buffer() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ConArea::set_has_ca_buffer() {
  _has_bits_[0] |= 0x00020000u;
}
void ConArea::clear_has_ca_buffer() {
  _has_bits_[0] &= ~0x00020000u;
}
void ConArea::clear_ca_buffer() {
  ca_buffer_ = 0;
  clear_has_ca_buffer();
}
::google::protobuf::int32 ConArea::ca_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_buffer)
  return ca_buffer_;
}
void ConArea::set_ca_buffer(::google::protobuf::int32 value) {
  set_has_ca_buffer();
  ca_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_FCF::kFcfVdZeroByteFieldNumber;
const int Dt_Record_FCF::kFcfVdProtocolVersionFieldNumber;
const int Dt_Record_FCF::kFcfVdSyncidFieldNumber;
const int Dt_Record_FCF::kFcfVdIdFcvFieldNumber;
const int Dt_Record_FCF::kFcfVdAlertFcvFieldNumber;
const int Dt_Record_FCF::kReserved1FieldNumber;
const int Dt_Record_FCF::kFcfVdAebSuppFcvFieldNumber;
const int Dt_Record_FCF::kFcfVdAlertAFieldNumber;
const int Dt_Record_FCF::kFcfVdIdAFieldNumber;
const int Dt_Record_FCF::kFcfVdSetTypeAFieldNumber;
const int Dt_Record_FCF::kReserved2FieldNumber;
const int Dt_Record_FCF::kFcfVdAebSuppAFieldNumber;
const int Dt_Record_FCF::kFcfVdFcwSuppAFieldNumber;
const int Dt_Record_FCF::kFcfVdAlertBFieldNumber;
const int Dt_Record_FCF::kFcfVdIdBFieldNumber;
const int Dt_Record_FCF::kFcfVdSetTypeBFieldNumber;
const int Dt_Record_FCF::kReserved3FieldNumber;
const int Dt_Record_FCF::kFcfVdAebSuppBFieldNumber;
const int Dt_Record_FCF::kFcfVdFcwSuppBFieldNumber;
const int Dt_Record_FCF::kFcfVdAlertCFieldNumber;
const int Dt_Record_FCF::kFcfVdIdCFieldNumber;
const int Dt_Record_FCF::kFcfVdSetTypeCFieldNumber;
const int Dt_Record_FCF::kReserved4FieldNumber;
const int Dt_Record_FCF::kFcfVdAebSuppCFieldNumber;
const int Dt_Record_FCF::kFcfVdFcwSuppCFieldNumber;
const int Dt_Record_FCF::kFcfVdAlertDFieldNumber;
const int Dt_Record_FCF::kFcfVdIdDFieldNumber;
const int Dt_Record_FCF::kFcfVdSetTypeDFieldNumber;
const int Dt_Record_FCF::kReserved5FieldNumber;
const int Dt_Record_FCF::kFcfVdAebSuppDFieldNumber;
const int Dt_Record_FCF::kFcfVdFcwSuppDFieldNumber;
const int Dt_Record_FCF::kFcfVdAlertEFieldNumber;
const int Dt_Record_FCF::kFcfVdIdEFieldNumber;
const int Dt_Record_FCF::kFcfVdSetTypeEFieldNumber;
const int Dt_Record_FCF::kReserved6FieldNumber;
const int Dt_Record_FCF::kFcfVdAebSuppEFieldNumber;
const int Dt_Record_FCF::kFcfVdFcwSuppEFieldNumber;
const int Dt_Record_FCF::kFcfVdAlertFFieldNumber;
const int Dt_Record_FCF::kFcfVdIdFFieldNumber;
const int Dt_Record_FCF::kFcfVdSetTypeFFieldNumber;
const int Dt_Record_FCF::kReserved7FieldNumber;
const int Dt_Record_FCF::kFcfVdAebSuppFFieldNumber;
const int Dt_Record_FCF::kFcfVdFcwSuppFFieldNumber;
const int Dt_Record_FCF::kHeaderFieldNumber;
const int Dt_Record_FCF::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_FCF::Dt_Record_FCF()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_FCF)
}
Dt_Record_FCF::Dt_Record_FCF(const Dt_Record_FCF& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&fcf_vd_zero_byte_, &from.fcf_vd_zero_byte_,
    reinterpret_cast<char*>(&fcf_vd_fcw_supp_f_) -
    reinterpret_cast<char*>(&fcf_vd_zero_byte_) + sizeof(fcf_vd_fcw_supp_f_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_FCF)
}

void Dt_Record_FCF::SharedCtor() {
  ::memset(&header_, 0, reinterpret_cast<char*>(&fcf_vd_fcw_supp_f_) -
    reinterpret_cast<char*>(&header_) + sizeof(fcf_vd_fcw_supp_f_));
  _cached_size_ = 0;
}

Dt_Record_FCF::~Dt_Record_FCF() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_FCF)
  SharedDtor();
}

void Dt_Record_FCF::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Dt_Record_FCF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_FCF& Dt_Record_FCF::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_FCF* Dt_Record_FCF::New(::google::protobuf::Arena* arena) const {
  Dt_Record_FCF* n = new Dt_Record_FCF;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_FCF::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_FCF)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&fcf_vd_zero_byte_, 0, reinterpret_cast<char*>(&reserved_1_) -
      reinterpret_cast<char*>(&fcf_vd_zero_byte_) + sizeof(reserved_1_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&fcf_vd_aeb_supp_fcv_, 0, reinterpret_cast<char*>(&fcf_vd_id_b_) -
      reinterpret_cast<char*>(&fcf_vd_aeb_supp_fcv_) + sizeof(fcf_vd_id_b_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&reserved_3_, 0, reinterpret_cast<char*>(&fcf_vd_alert_c_) -
      reinterpret_cast<char*>(&reserved_3_) + sizeof(fcf_vd_alert_c_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&fcf_vd_id_c_, 0, reinterpret_cast<char*>(&fcf_vd_aeb_supp_d_) -
      reinterpret_cast<char*>(&fcf_vd_id_c_) + sizeof(fcf_vd_aeb_supp_d_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&fcf_vd_fcw_supp_d_, 0, reinterpret_cast<char*>(&fcf_vd_set_type_f_) -
      reinterpret_cast<char*>(&fcf_vd_fcw_supp_d_) + sizeof(fcf_vd_set_type_f_));
  }
  if (_has_bits_[40 / 32] & 7936u) {
    ::memset(&fcf_vd_alert_f_, 0, reinterpret_cast<char*>(&fcf_vd_fcw_supp_f_) -
      reinterpret_cast<char*>(&fcf_vd_alert_f_) + sizeof(fcf_vd_fcw_supp_f_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_FCF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_FCF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fcf_vd_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fcf_vd_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fcf_vd_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_syncid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fcf_vd_syncid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_syncid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_id_fcv = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fcf_vd_id_fcv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_id_fcv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_alert_fcv = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_fcf_vd_alert_fcv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_alert_fcv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FCF.Reserved_1Type reserved_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FCF_Reserved_1Type_IsValid(value)) {
            set_reserved_1(static_cast< ::atd::meprocess::Dt_Record_FCF_Reserved_1Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_aeb_supp_fcv = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_fcf_vd_aeb_supp_fcv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_aeb_supp_fcv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_alert_a = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_fcf_vd_alert_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_alert_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_id_a = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_fcf_vd_id_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_id_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vd_set_type_a = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_fcf_vd_set_type_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vd_set_type_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_aeb_supp_a = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_fcf_vd_aeb_supp_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_aeb_supp_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_fcw_supp_a = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_fcf_vd_fcw_supp_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_fcw_supp_a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_alert_b = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_fcf_vd_alert_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_alert_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_id_b = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_fcf_vd_id_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_id_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vd_set_type_b = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_fcf_vd_set_type_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vd_set_type_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_3 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_aeb_supp_b = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_fcf_vd_aeb_supp_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_aeb_supp_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_fcw_supp_b = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          set_has_fcf_vd_fcw_supp_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_fcw_supp_b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_alert_c = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_fcf_vd_alert_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_alert_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_id_c = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_fcf_vd_id_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_id_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vd_set_type_c = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_fcf_vd_set_type_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vd_set_type_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_aeb_supp_c = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_fcf_vd_aeb_supp_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_aeb_supp_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_fcw_supp_c = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          set_has_fcf_vd_fcw_supp_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_fcw_supp_c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_alert_d = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_fcf_vd_alert_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_alert_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_id_d = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_fcf_vd_id_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_id_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vd_set_type_d = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(224u)) {
          set_has_fcf_vd_set_type_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vd_set_type_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_5 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_reserved_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_aeb_supp_d = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u)) {
          set_has_fcf_vd_aeb_supp_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_aeb_supp_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_fcw_supp_d = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(253u)) {
          set_has_fcf_vd_fcw_supp_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_fcw_supp_d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_alert_e = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(256u)) {
          set_has_fcf_vd_alert_e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_alert_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_id_e = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(264u)) {
          set_has_fcf_vd_id_e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_id_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vd_set_type_e = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_fcf_vd_set_type_e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vd_set_type_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_6 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_reserved_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_aeb_supp_e = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(293u)) {
          set_has_fcf_vd_aeb_supp_e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_aeb_supp_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_fcw_supp_e = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(301u)) {
          set_has_fcf_vd_fcw_supp_e();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_fcw_supp_e_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_alert_f = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_fcf_vd_alert_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_alert_f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vd_id_f = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(312u)) {
          set_has_fcf_vd_id_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vd_id_f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vd_set_type_f = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(320u)) {
          set_has_fcf_vd_set_type_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vd_set_type_f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_7 = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_reserved_7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_aeb_supp_f = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(341u)) {
          set_has_fcf_vd_aeb_supp_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_aeb_supp_f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vd_fcw_supp_f = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(349u)) {
          set_has_fcf_vd_fcw_supp_f();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vd_fcw_supp_f_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(354u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(362u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_FCF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_FCF)
  return false;
#undef DO_
}

void Dt_Record_FCF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_FCF)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fcf_vd_zero_byte = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fcf_vd_zero_byte(), output);
  }

  // optional int32 fcf_vd_protocol_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fcf_vd_protocol_version(), output);
  }

  // optional int32 fcf_vd_syncid = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fcf_vd_syncid(), output);
  }

  // optional int32 fcf_vd_id_fcv = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fcf_vd_id_fcv(), output);
  }

  // optional float fcf_vd_alert_fcv = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fcf_vd_alert_fcv(), output);
  }

  // optional .atd.meprocess.Dt_Record_FCF.Reserved_1Type reserved_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->reserved_1(), output);
  }

  // optional float fcf_vd_aeb_supp_fcv = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fcf_vd_aeb_supp_fcv(), output);
  }

  // optional int32 fcf_vd_alert_a = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fcf_vd_alert_a(), output);
  }

  // optional int32 fcf_vd_id_a = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fcf_vd_id_a(), output);
  }

  // optional bool fcf_vd_set_type_a = 10;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fcf_vd_set_type_a(), output);
  }

  // optional int32 reserved_2 = 11;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved_2(), output);
  }

  // optional float fcf_vd_aeb_supp_a = 12;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fcf_vd_aeb_supp_a(), output);
  }

  // optional float fcf_vd_fcw_supp_a = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->fcf_vd_fcw_supp_a(), output);
  }

  // optional int32 fcf_vd_alert_b = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->fcf_vd_alert_b(), output);
  }

  // optional int32 fcf_vd_id_b = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->fcf_vd_id_b(), output);
  }

  // optional bool fcf_vd_set_type_b = 16;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->fcf_vd_set_type_b(), output);
  }

  // optional int32 reserved_3 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->reserved_3(), output);
  }

  // optional float fcf_vd_aeb_supp_b = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->fcf_vd_aeb_supp_b(), output);
  }

  // optional float fcf_vd_fcw_supp_b = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->fcf_vd_fcw_supp_b(), output);
  }

  // optional int32 fcf_vd_alert_c = 20;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->fcf_vd_alert_c(), output);
  }

  // optional int32 fcf_vd_id_c = 21;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fcf_vd_id_c(), output);
  }

  // optional bool fcf_vd_set_type_c = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->fcf_vd_set_type_c(), output);
  }

  // optional int32 reserved_4 = 23;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->reserved_4(), output);
  }

  // optional float fcf_vd_aeb_supp_c = 24;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->fcf_vd_aeb_supp_c(), output);
  }

  // optional float fcf_vd_fcw_supp_c = 25;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->fcf_vd_fcw_supp_c(), output);
  }

  // optional int32 fcf_vd_alert_d = 26;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->fcf_vd_alert_d(), output);
  }

  // optional int32 fcf_vd_id_d = 27;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->fcf_vd_id_d(), output);
  }

  // optional bool fcf_vd_set_type_d = 28;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(28, this->fcf_vd_set_type_d(), output);
  }

  // optional int32 reserved_5 = 29;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->reserved_5(), output);
  }

  // optional float fcf_vd_aeb_supp_d = 30;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->fcf_vd_aeb_supp_d(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float fcf_vd_fcw_supp_d = 31;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(31, this->fcf_vd_fcw_supp_d(), output);
  }

  // optional int32 fcf_vd_alert_e = 32;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->fcf_vd_alert_e(), output);
  }

  // optional int32 fcf_vd_id_e = 33;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->fcf_vd_id_e(), output);
  }

  // optional bool fcf_vd_set_type_e = 34;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->fcf_vd_set_type_e(), output);
  }

  // optional int32 reserved_6 = 35;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->reserved_6(), output);
  }

  // optional float fcf_vd_aeb_supp_e = 36;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->fcf_vd_aeb_supp_e(), output);
  }

  // optional float fcf_vd_fcw_supp_e = 37;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->fcf_vd_fcw_supp_e(), output);
  }

  // optional int32 fcf_vd_alert_f = 38;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->fcf_vd_alert_f(), output);
  }

  // optional int32 fcf_vd_id_f = 39;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->fcf_vd_id_f(), output);
  }

  // optional bool fcf_vd_set_type_f = 40;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(40, this->fcf_vd_set_type_f(), output);
  }

  // optional int32 reserved_7 = 41;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->reserved_7(), output);
  }

  // optional float fcf_vd_aeb_supp_f = 42;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->fcf_vd_aeb_supp_f(), output);
  }

  // optional float fcf_vd_fcw_supp_f = 43;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->fcf_vd_fcw_supp_f(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 44;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      44, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 45;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      45, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_FCF)
}

size_t Dt_Record_FCF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_FCF)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 44;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 45;
    if (has_reservedmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional int32 fcf_vd_zero_byte = 1;
    if (has_fcf_vd_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_zero_byte());
    }

    // optional int32 fcf_vd_protocol_version = 2;
    if (has_fcf_vd_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_protocol_version());
    }

    // optional int32 fcf_vd_syncid = 3;
    if (has_fcf_vd_syncid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_syncid());
    }

    // optional int32 fcf_vd_id_fcv = 4;
    if (has_fcf_vd_id_fcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_id_fcv());
    }

    // optional float fcf_vd_alert_fcv = 5;
    if (has_fcf_vd_alert_fcv()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.Dt_Record_FCF.Reserved_1Type reserved_1 = 6;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reserved_1());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float fcf_vd_aeb_supp_fcv = 7;
    if (has_fcf_vd_aeb_supp_fcv()) {
      total_size += 1 + 4;
    }

    // optional int32 fcf_vd_alert_a = 8;
    if (has_fcf_vd_alert_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_alert_a());
    }

    // optional int32 fcf_vd_id_a = 9;
    if (has_fcf_vd_id_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_id_a());
    }

    // optional int32 reserved_2 = 11;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional float fcf_vd_aeb_supp_a = 12;
    if (has_fcf_vd_aeb_supp_a()) {
      total_size += 1 + 4;
    }

    // optional float fcf_vd_fcw_supp_a = 13;
    if (has_fcf_vd_fcw_supp_a()) {
      total_size += 1 + 4;
    }

    // optional int32 fcf_vd_alert_b = 14;
    if (has_fcf_vd_alert_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_alert_b());
    }

    // optional int32 fcf_vd_id_b = 15;
    if (has_fcf_vd_id_b()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_id_b());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional int32 reserved_3 = 17;
    if (has_reserved_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_3());
    }

    // optional float fcf_vd_aeb_supp_b = 18;
    if (has_fcf_vd_aeb_supp_b()) {
      total_size += 2 + 4;
    }

    // optional float fcf_vd_fcw_supp_b = 19;
    if (has_fcf_vd_fcw_supp_b()) {
      total_size += 2 + 4;
    }

    // optional bool fcf_vd_set_type_a = 10;
    if (has_fcf_vd_set_type_a()) {
      total_size += 1 + 1;
    }

    // optional bool fcf_vd_set_type_b = 16;
    if (has_fcf_vd_set_type_b()) {
      total_size += 2 + 1;
    }

    // optional bool fcf_vd_set_type_c = 22;
    if (has_fcf_vd_set_type_c()) {
      total_size += 2 + 1;
    }

    // optional bool fcf_vd_set_type_d = 28;
    if (has_fcf_vd_set_type_d()) {
      total_size += 2 + 1;
    }

    // optional int32 fcf_vd_alert_c = 20;
    if (has_fcf_vd_alert_c()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_alert_c());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional int32 fcf_vd_id_c = 21;
    if (has_fcf_vd_id_c()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_id_c());
    }

    // optional int32 reserved_4 = 23;
    if (has_reserved_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional float fcf_vd_aeb_supp_c = 24;
    if (has_fcf_vd_aeb_supp_c()) {
      total_size += 2 + 4;
    }

    // optional float fcf_vd_fcw_supp_c = 25;
    if (has_fcf_vd_fcw_supp_c()) {
      total_size += 2 + 4;
    }

    // optional int32 fcf_vd_alert_d = 26;
    if (has_fcf_vd_alert_d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_alert_d());
    }

    // optional int32 fcf_vd_id_d = 27;
    if (has_fcf_vd_id_d()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_id_d());
    }

    // optional int32 reserved_5 = 29;
    if (has_reserved_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_5());
    }

    // optional float fcf_vd_aeb_supp_d = 30;
    if (has_fcf_vd_aeb_supp_d()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional float fcf_vd_fcw_supp_d = 31;
    if (has_fcf_vd_fcw_supp_d()) {
      total_size += 2 + 4;
    }

    // optional int32 fcf_vd_alert_e = 32;
    if (has_fcf_vd_alert_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_alert_e());
    }

    // optional int32 fcf_vd_id_e = 33;
    if (has_fcf_vd_id_e()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_id_e());
    }

    // optional int32 reserved_6 = 35;
    if (has_reserved_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_6());
    }

    // optional float fcf_vd_aeb_supp_e = 36;
    if (has_fcf_vd_aeb_supp_e()) {
      total_size += 2 + 4;
    }

    // optional float fcf_vd_fcw_supp_e = 37;
    if (has_fcf_vd_fcw_supp_e()) {
      total_size += 2 + 4;
    }

    // optional bool fcf_vd_set_type_e = 34;
    if (has_fcf_vd_set_type_e()) {
      total_size += 2 + 1;
    }

    // optional bool fcf_vd_set_type_f = 40;
    if (has_fcf_vd_set_type_f()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[40 / 32] & 7936u) {
    // optional int32 fcf_vd_alert_f = 38;
    if (has_fcf_vd_alert_f()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_alert_f());
    }

    // optional int32 fcf_vd_id_f = 39;
    if (has_fcf_vd_id_f()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vd_id_f());
    }

    // optional int32 reserved_7 = 41;
    if (has_reserved_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_7());
    }

    // optional float fcf_vd_aeb_supp_f = 42;
    if (has_fcf_vd_aeb_supp_f()) {
      total_size += 2 + 4;
    }

    // optional float fcf_vd_fcw_supp_f = 43;
    if (has_fcf_vd_fcw_supp_f()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_FCF::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_FCF*>(&from));
}

void Dt_Record_FCF::MergeFrom(const Dt_Record_FCF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_FCF)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      fcf_vd_zero_byte_ = from.fcf_vd_zero_byte_;
    }
    if (cached_has_bits & 0x00000008u) {
      fcf_vd_protocol_version_ = from.fcf_vd_protocol_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      fcf_vd_syncid_ = from.fcf_vd_syncid_;
    }
    if (cached_has_bits & 0x00000020u) {
      fcf_vd_id_fcv_ = from.fcf_vd_id_fcv_;
    }
    if (cached_has_bits & 0x00000040u) {
      fcf_vd_alert_fcv_ = from.fcf_vd_alert_fcv_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_1_ = from.reserved_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      fcf_vd_aeb_supp_fcv_ = from.fcf_vd_aeb_supp_fcv_;
    }
    if (cached_has_bits & 0x00000200u) {
      fcf_vd_alert_a_ = from.fcf_vd_alert_a_;
    }
    if (cached_has_bits & 0x00000400u) {
      fcf_vd_id_a_ = from.fcf_vd_id_a_;
    }
    if (cached_has_bits & 0x00000800u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00001000u) {
      fcf_vd_aeb_supp_a_ = from.fcf_vd_aeb_supp_a_;
    }
    if (cached_has_bits & 0x00002000u) {
      fcf_vd_fcw_supp_a_ = from.fcf_vd_fcw_supp_a_;
    }
    if (cached_has_bits & 0x00004000u) {
      fcf_vd_alert_b_ = from.fcf_vd_alert_b_;
    }
    if (cached_has_bits & 0x00008000u) {
      fcf_vd_id_b_ = from.fcf_vd_id_b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00020000u) {
      fcf_vd_aeb_supp_b_ = from.fcf_vd_aeb_supp_b_;
    }
    if (cached_has_bits & 0x00040000u) {
      fcf_vd_fcw_supp_b_ = from.fcf_vd_fcw_supp_b_;
    }
    if (cached_has_bits & 0x00080000u) {
      fcf_vd_set_type_a_ = from.fcf_vd_set_type_a_;
    }
    if (cached_has_bits & 0x00100000u) {
      fcf_vd_set_type_b_ = from.fcf_vd_set_type_b_;
    }
    if (cached_has_bits & 0x00200000u) {
      fcf_vd_set_type_c_ = from.fcf_vd_set_type_c_;
    }
    if (cached_has_bits & 0x00400000u) {
      fcf_vd_set_type_d_ = from.fcf_vd_set_type_d_;
    }
    if (cached_has_bits & 0x00800000u) {
      fcf_vd_alert_c_ = from.fcf_vd_alert_c_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      fcf_vd_id_c_ = from.fcf_vd_id_c_;
    }
    if (cached_has_bits & 0x02000000u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x04000000u) {
      fcf_vd_aeb_supp_c_ = from.fcf_vd_aeb_supp_c_;
    }
    if (cached_has_bits & 0x08000000u) {
      fcf_vd_fcw_supp_c_ = from.fcf_vd_fcw_supp_c_;
    }
    if (cached_has_bits & 0x10000000u) {
      fcf_vd_alert_d_ = from.fcf_vd_alert_d_;
    }
    if (cached_has_bits & 0x20000000u) {
      fcf_vd_id_d_ = from.fcf_vd_id_d_;
    }
    if (cached_has_bits & 0x40000000u) {
      reserved_5_ = from.reserved_5_;
    }
    if (cached_has_bits & 0x80000000u) {
      fcf_vd_aeb_supp_d_ = from.fcf_vd_aeb_supp_d_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fcf_vd_fcw_supp_d_ = from.fcf_vd_fcw_supp_d_;
    }
    if (cached_has_bits & 0x00000002u) {
      fcf_vd_alert_e_ = from.fcf_vd_alert_e_;
    }
    if (cached_has_bits & 0x00000004u) {
      fcf_vd_id_e_ = from.fcf_vd_id_e_;
    }
    if (cached_has_bits & 0x00000008u) {
      reserved_6_ = from.reserved_6_;
    }
    if (cached_has_bits & 0x00000010u) {
      fcf_vd_aeb_supp_e_ = from.fcf_vd_aeb_supp_e_;
    }
    if (cached_has_bits & 0x00000020u) {
      fcf_vd_fcw_supp_e_ = from.fcf_vd_fcw_supp_e_;
    }
    if (cached_has_bits & 0x00000040u) {
      fcf_vd_set_type_e_ = from.fcf_vd_set_type_e_;
    }
    if (cached_has_bits & 0x00000080u) {
      fcf_vd_set_type_f_ = from.fcf_vd_set_type_f_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      fcf_vd_alert_f_ = from.fcf_vd_alert_f_;
    }
    if (cached_has_bits & 0x00000200u) {
      fcf_vd_id_f_ = from.fcf_vd_id_f_;
    }
    if (cached_has_bits & 0x00000400u) {
      reserved_7_ = from.reserved_7_;
    }
    if (cached_has_bits & 0x00000800u) {
      fcf_vd_aeb_supp_f_ = from.fcf_vd_aeb_supp_f_;
    }
    if (cached_has_bits & 0x00001000u) {
      fcf_vd_fcw_supp_f_ = from.fcf_vd_fcw_supp_f_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
}

void Dt_Record_FCF::CopyFrom(const Dt_Record_FCF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_FCF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_FCF::IsInitialized() const {
  return true;
}

void Dt_Record_FCF::Swap(Dt_Record_FCF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_FCF::InternalSwap(Dt_Record_FCF* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(fcf_vd_zero_byte_, other->fcf_vd_zero_byte_);
  std::swap(fcf_vd_protocol_version_, other->fcf_vd_protocol_version_);
  std::swap(fcf_vd_syncid_, other->fcf_vd_syncid_);
  std::swap(fcf_vd_id_fcv_, other->fcf_vd_id_fcv_);
  std::swap(fcf_vd_alert_fcv_, other->fcf_vd_alert_fcv_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(fcf_vd_aeb_supp_fcv_, other->fcf_vd_aeb_supp_fcv_);
  std::swap(fcf_vd_alert_a_, other->fcf_vd_alert_a_);
  std::swap(fcf_vd_id_a_, other->fcf_vd_id_a_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(fcf_vd_aeb_supp_a_, other->fcf_vd_aeb_supp_a_);
  std::swap(fcf_vd_fcw_supp_a_, other->fcf_vd_fcw_supp_a_);
  std::swap(fcf_vd_alert_b_, other->fcf_vd_alert_b_);
  std::swap(fcf_vd_id_b_, other->fcf_vd_id_b_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(fcf_vd_aeb_supp_b_, other->fcf_vd_aeb_supp_b_);
  std::swap(fcf_vd_fcw_supp_b_, other->fcf_vd_fcw_supp_b_);
  std::swap(fcf_vd_set_type_a_, other->fcf_vd_set_type_a_);
  std::swap(fcf_vd_set_type_b_, other->fcf_vd_set_type_b_);
  std::swap(fcf_vd_set_type_c_, other->fcf_vd_set_type_c_);
  std::swap(fcf_vd_set_type_d_, other->fcf_vd_set_type_d_);
  std::swap(fcf_vd_alert_c_, other->fcf_vd_alert_c_);
  std::swap(fcf_vd_id_c_, other->fcf_vd_id_c_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(fcf_vd_aeb_supp_c_, other->fcf_vd_aeb_supp_c_);
  std::swap(fcf_vd_fcw_supp_c_, other->fcf_vd_fcw_supp_c_);
  std::swap(fcf_vd_alert_d_, other->fcf_vd_alert_d_);
  std::swap(fcf_vd_id_d_, other->fcf_vd_id_d_);
  std::swap(reserved_5_, other->reserved_5_);
  std::swap(fcf_vd_aeb_supp_d_, other->fcf_vd_aeb_supp_d_);
  std::swap(fcf_vd_fcw_supp_d_, other->fcf_vd_fcw_supp_d_);
  std::swap(fcf_vd_alert_e_, other->fcf_vd_alert_e_);
  std::swap(fcf_vd_id_e_, other->fcf_vd_id_e_);
  std::swap(reserved_6_, other->reserved_6_);
  std::swap(fcf_vd_aeb_supp_e_, other->fcf_vd_aeb_supp_e_);
  std::swap(fcf_vd_fcw_supp_e_, other->fcf_vd_fcw_supp_e_);
  std::swap(fcf_vd_set_type_e_, other->fcf_vd_set_type_e_);
  std::swap(fcf_vd_set_type_f_, other->fcf_vd_set_type_f_);
  std::swap(fcf_vd_alert_f_, other->fcf_vd_alert_f_);
  std::swap(fcf_vd_id_f_, other->fcf_vd_id_f_);
  std::swap(reserved_7_, other->reserved_7_);
  std::swap(fcf_vd_aeb_supp_f_, other->fcf_vd_aeb_supp_f_);
  std::swap(fcf_vd_fcw_supp_f_, other->fcf_vd_fcw_supp_f_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_FCF::GetTypeName() const {
  return "atd.meprocess.Dt_Record_FCF";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_FCF

// optional int32 fcf_vd_zero_byte = 1;
bool Dt_Record_FCF::has_fcf_vd_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_FCF::clear_has_fcf_vd_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_FCF::clear_fcf_vd_zero_byte() {
  fcf_vd_zero_byte_ = 0;
  clear_has_fcf_vd_zero_byte();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_zero_byte)
  return fcf_vd_zero_byte_;
}
void Dt_Record_FCF::set_fcf_vd_zero_byte(::google::protobuf::int32 value) {
  set_has_fcf_vd_zero_byte();
  fcf_vd_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_zero_byte)
}

// optional int32 fcf_vd_protocol_version = 2;
bool Dt_Record_FCF::has_fcf_vd_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Record_FCF::clear_has_fcf_vd_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Record_FCF::clear_fcf_vd_protocol_version() {
  fcf_vd_protocol_version_ = 0;
  clear_has_fcf_vd_protocol_version();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_protocol_version)
  return fcf_vd_protocol_version_;
}
void Dt_Record_FCF::set_fcf_vd_protocol_version(::google::protobuf::int32 value) {
  set_has_fcf_vd_protocol_version();
  fcf_vd_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_protocol_version)
}

// optional int32 fcf_vd_syncid = 3;
bool Dt_Record_FCF::has_fcf_vd_syncid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_syncid() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Record_FCF::clear_has_fcf_vd_syncid() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Record_FCF::clear_fcf_vd_syncid() {
  fcf_vd_syncid_ = 0;
  clear_has_fcf_vd_syncid();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_syncid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_syncid)
  return fcf_vd_syncid_;
}
void Dt_Record_FCF::set_fcf_vd_syncid(::google::protobuf::int32 value) {
  set_has_fcf_vd_syncid();
  fcf_vd_syncid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_syncid)
}

// optional int32 fcf_vd_id_fcv = 4;
bool Dt_Record_FCF::has_fcf_vd_id_fcv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_id_fcv() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Record_FCF::clear_has_fcf_vd_id_fcv() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Record_FCF::clear_fcf_vd_id_fcv() {
  fcf_vd_id_fcv_ = 0;
  clear_has_fcf_vd_id_fcv();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_fcv)
  return fcf_vd_id_fcv_;
}
void Dt_Record_FCF::set_fcf_vd_id_fcv(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_fcv();
  fcf_vd_id_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_fcv)
}

// optional float fcf_vd_alert_fcv = 5;
bool Dt_Record_FCF::has_fcf_vd_alert_fcv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_alert_fcv() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Record_FCF::clear_has_fcf_vd_alert_fcv() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Record_FCF::clear_fcf_vd_alert_fcv() {
  fcf_vd_alert_fcv_ = 0;
  clear_has_fcf_vd_alert_fcv();
}
float Dt_Record_FCF::fcf_vd_alert_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_fcv)
  return fcf_vd_alert_fcv_;
}
void Dt_Record_FCF::set_fcf_vd_alert_fcv(float value) {
  set_has_fcf_vd_alert_fcv();
  fcf_vd_alert_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_fcv)
}

// optional .atd.meprocess.Dt_Record_FCF.Reserved_1Type reserved_1 = 6;
bool Dt_Record_FCF::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Record_FCF::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Record_FCF::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Record_FCF::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::atd::meprocess::Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_1)
  return static_cast< ::atd::meprocess::Dt_Record_FCF_Reserved_1Type >(reserved_1_);
}
void Dt_Record_FCF::set_reserved_1(::atd::meprocess::Dt_Record_FCF_Reserved_1Type value) {
  assert(::atd::meprocess::Dt_Record_FCF_Reserved_1Type_IsValid(value));
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_1)
}

// optional float fcf_vd_aeb_supp_fcv = 7;
bool Dt_Record_FCF::has_fcf_vd_aeb_supp_fcv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_fcv() {
  _has_bits_[0] |= 0x00000100u;
}
void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_fcv() {
  _has_bits_[0] &= ~0x00000100u;
}
void Dt_Record_FCF::clear_fcf_vd_aeb_supp_fcv() {
  fcf_vd_aeb_supp_fcv_ = 0;
  clear_has_fcf_vd_aeb_supp_fcv();
}
float Dt_Record_FCF::fcf_vd_aeb_supp_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_fcv)
  return fcf_vd_aeb_supp_fcv_;
}
void Dt_Record_FCF::set_fcf_vd_aeb_supp_fcv(float value) {
  set_has_fcf_vd_aeb_supp_fcv();
  fcf_vd_aeb_supp_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_fcv)
}

// optional int32 fcf_vd_alert_a = 8;
bool Dt_Record_FCF::has_fcf_vd_alert_a() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_alert_a() {
  _has_bits_[0] |= 0x00000200u;
}
void Dt_Record_FCF::clear_has_fcf_vd_alert_a() {
  _has_bits_[0] &= ~0x00000200u;
}
void Dt_Record_FCF::clear_fcf_vd_alert_a() {
  fcf_vd_alert_a_ = 0;
  clear_has_fcf_vd_alert_a();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_a)
  return fcf_vd_alert_a_;
}
void Dt_Record_FCF::set_fcf_vd_alert_a(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_a();
  fcf_vd_alert_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_a)
}

// optional int32 fcf_vd_id_a = 9;
bool Dt_Record_FCF::has_fcf_vd_id_a() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_id_a() {
  _has_bits_[0] |= 0x00000400u;
}
void Dt_Record_FCF::clear_has_fcf_vd_id_a() {
  _has_bits_[0] &= ~0x00000400u;
}
void Dt_Record_FCF::clear_fcf_vd_id_a() {
  fcf_vd_id_a_ = 0;
  clear_has_fcf_vd_id_a();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_a)
  return fcf_vd_id_a_;
}
void Dt_Record_FCF::set_fcf_vd_id_a(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_a();
  fcf_vd_id_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_a)
}

// optional bool fcf_vd_set_type_a = 10;
bool Dt_Record_FCF::has_fcf_vd_set_type_a() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_set_type_a() {
  _has_bits_[0] |= 0x00080000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_set_type_a() {
  _has_bits_[0] &= ~0x00080000u;
}
void Dt_Record_FCF::clear_fcf_vd_set_type_a() {
  fcf_vd_set_type_a_ = false;
  clear_has_fcf_vd_set_type_a();
}
bool Dt_Record_FCF::fcf_vd_set_type_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_a)
  return fcf_vd_set_type_a_;
}
void Dt_Record_FCF::set_fcf_vd_set_type_a(bool value) {
  set_has_fcf_vd_set_type_a();
  fcf_vd_set_type_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_a)
}

// optional int32 reserved_2 = 11;
bool Dt_Record_FCF::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Dt_Record_FCF::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000800u;
}
void Dt_Record_FCF::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000800u;
}
void Dt_Record_FCF::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 Dt_Record_FCF::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_2)
  return reserved_2_;
}
void Dt_Record_FCF::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_2)
}

// optional float fcf_vd_aeb_supp_a = 12;
bool Dt_Record_FCF::has_fcf_vd_aeb_supp_a() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_a() {
  _has_bits_[0] |= 0x00001000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_a() {
  _has_bits_[0] &= ~0x00001000u;
}
void Dt_Record_FCF::clear_fcf_vd_aeb_supp_a() {
  fcf_vd_aeb_supp_a_ = 0;
  clear_has_fcf_vd_aeb_supp_a();
}
float Dt_Record_FCF::fcf_vd_aeb_supp_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_a)
  return fcf_vd_aeb_supp_a_;
}
void Dt_Record_FCF::set_fcf_vd_aeb_supp_a(float value) {
  set_has_fcf_vd_aeb_supp_a();
  fcf_vd_aeb_supp_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_a)
}

// optional float fcf_vd_fcw_supp_a = 13;
bool Dt_Record_FCF::has_fcf_vd_fcw_supp_a() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_a() {
  _has_bits_[0] |= 0x00002000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_a() {
  _has_bits_[0] &= ~0x00002000u;
}
void Dt_Record_FCF::clear_fcf_vd_fcw_supp_a() {
  fcf_vd_fcw_supp_a_ = 0;
  clear_has_fcf_vd_fcw_supp_a();
}
float Dt_Record_FCF::fcf_vd_fcw_supp_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_a)
  return fcf_vd_fcw_supp_a_;
}
void Dt_Record_FCF::set_fcf_vd_fcw_supp_a(float value) {
  set_has_fcf_vd_fcw_supp_a();
  fcf_vd_fcw_supp_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_a)
}

// optional int32 fcf_vd_alert_b = 14;
bool Dt_Record_FCF::has_fcf_vd_alert_b() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_alert_b() {
  _has_bits_[0] |= 0x00004000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_alert_b() {
  _has_bits_[0] &= ~0x00004000u;
}
void Dt_Record_FCF::clear_fcf_vd_alert_b() {
  fcf_vd_alert_b_ = 0;
  clear_has_fcf_vd_alert_b();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_b)
  return fcf_vd_alert_b_;
}
void Dt_Record_FCF::set_fcf_vd_alert_b(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_b();
  fcf_vd_alert_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_b)
}

// optional int32 fcf_vd_id_b = 15;
bool Dt_Record_FCF::has_fcf_vd_id_b() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_id_b() {
  _has_bits_[0] |= 0x00008000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_id_b() {
  _has_bits_[0] &= ~0x00008000u;
}
void Dt_Record_FCF::clear_fcf_vd_id_b() {
  fcf_vd_id_b_ = 0;
  clear_has_fcf_vd_id_b();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_b)
  return fcf_vd_id_b_;
}
void Dt_Record_FCF::set_fcf_vd_id_b(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_b();
  fcf_vd_id_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_b)
}

// optional bool fcf_vd_set_type_b = 16;
bool Dt_Record_FCF::has_fcf_vd_set_type_b() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_set_type_b() {
  _has_bits_[0] |= 0x00100000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_set_type_b() {
  _has_bits_[0] &= ~0x00100000u;
}
void Dt_Record_FCF::clear_fcf_vd_set_type_b() {
  fcf_vd_set_type_b_ = false;
  clear_has_fcf_vd_set_type_b();
}
bool Dt_Record_FCF::fcf_vd_set_type_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_b)
  return fcf_vd_set_type_b_;
}
void Dt_Record_FCF::set_fcf_vd_set_type_b(bool value) {
  set_has_fcf_vd_set_type_b();
  fcf_vd_set_type_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_b)
}

// optional int32 reserved_3 = 17;
bool Dt_Record_FCF::has_reserved_3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Dt_Record_FCF::set_has_reserved_3() {
  _has_bits_[0] |= 0x00010000u;
}
void Dt_Record_FCF::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00010000u;
}
void Dt_Record_FCF::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
::google::protobuf::int32 Dt_Record_FCF::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_3)
  return reserved_3_;
}
void Dt_Record_FCF::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_3)
}

// optional float fcf_vd_aeb_supp_b = 18;
bool Dt_Record_FCF::has_fcf_vd_aeb_supp_b() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_b() {
  _has_bits_[0] |= 0x00020000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_b() {
  _has_bits_[0] &= ~0x00020000u;
}
void Dt_Record_FCF::clear_fcf_vd_aeb_supp_b() {
  fcf_vd_aeb_supp_b_ = 0;
  clear_has_fcf_vd_aeb_supp_b();
}
float Dt_Record_FCF::fcf_vd_aeb_supp_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_b)
  return fcf_vd_aeb_supp_b_;
}
void Dt_Record_FCF::set_fcf_vd_aeb_supp_b(float value) {
  set_has_fcf_vd_aeb_supp_b();
  fcf_vd_aeb_supp_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_b)
}

// optional float fcf_vd_fcw_supp_b = 19;
bool Dt_Record_FCF::has_fcf_vd_fcw_supp_b() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_b() {
  _has_bits_[0] |= 0x00040000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_b() {
  _has_bits_[0] &= ~0x00040000u;
}
void Dt_Record_FCF::clear_fcf_vd_fcw_supp_b() {
  fcf_vd_fcw_supp_b_ = 0;
  clear_has_fcf_vd_fcw_supp_b();
}
float Dt_Record_FCF::fcf_vd_fcw_supp_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_b)
  return fcf_vd_fcw_supp_b_;
}
void Dt_Record_FCF::set_fcf_vd_fcw_supp_b(float value) {
  set_has_fcf_vd_fcw_supp_b();
  fcf_vd_fcw_supp_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_b)
}

// optional int32 fcf_vd_alert_c = 20;
bool Dt_Record_FCF::has_fcf_vd_alert_c() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_alert_c() {
  _has_bits_[0] |= 0x00800000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_alert_c() {
  _has_bits_[0] &= ~0x00800000u;
}
void Dt_Record_FCF::clear_fcf_vd_alert_c() {
  fcf_vd_alert_c_ = 0;
  clear_has_fcf_vd_alert_c();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_c)
  return fcf_vd_alert_c_;
}
void Dt_Record_FCF::set_fcf_vd_alert_c(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_c();
  fcf_vd_alert_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_c)
}

// optional int32 fcf_vd_id_c = 21;
bool Dt_Record_FCF::has_fcf_vd_id_c() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_id_c() {
  _has_bits_[0] |= 0x01000000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_id_c() {
  _has_bits_[0] &= ~0x01000000u;
}
void Dt_Record_FCF::clear_fcf_vd_id_c() {
  fcf_vd_id_c_ = 0;
  clear_has_fcf_vd_id_c();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_c)
  return fcf_vd_id_c_;
}
void Dt_Record_FCF::set_fcf_vd_id_c(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_c();
  fcf_vd_id_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_c)
}

// optional bool fcf_vd_set_type_c = 22;
bool Dt_Record_FCF::has_fcf_vd_set_type_c() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_set_type_c() {
  _has_bits_[0] |= 0x00200000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_set_type_c() {
  _has_bits_[0] &= ~0x00200000u;
}
void Dt_Record_FCF::clear_fcf_vd_set_type_c() {
  fcf_vd_set_type_c_ = false;
  clear_has_fcf_vd_set_type_c();
}
bool Dt_Record_FCF::fcf_vd_set_type_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_c)
  return fcf_vd_set_type_c_;
}
void Dt_Record_FCF::set_fcf_vd_set_type_c(bool value) {
  set_has_fcf_vd_set_type_c();
  fcf_vd_set_type_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_c)
}

// optional int32 reserved_4 = 23;
bool Dt_Record_FCF::has_reserved_4() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Dt_Record_FCF::set_has_reserved_4() {
  _has_bits_[0] |= 0x02000000u;
}
void Dt_Record_FCF::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x02000000u;
}
void Dt_Record_FCF::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 Dt_Record_FCF::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_4)
  return reserved_4_;
}
void Dt_Record_FCF::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_4)
}

// optional float fcf_vd_aeb_supp_c = 24;
bool Dt_Record_FCF::has_fcf_vd_aeb_supp_c() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_c() {
  _has_bits_[0] |= 0x04000000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_c() {
  _has_bits_[0] &= ~0x04000000u;
}
void Dt_Record_FCF::clear_fcf_vd_aeb_supp_c() {
  fcf_vd_aeb_supp_c_ = 0;
  clear_has_fcf_vd_aeb_supp_c();
}
float Dt_Record_FCF::fcf_vd_aeb_supp_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_c)
  return fcf_vd_aeb_supp_c_;
}
void Dt_Record_FCF::set_fcf_vd_aeb_supp_c(float value) {
  set_has_fcf_vd_aeb_supp_c();
  fcf_vd_aeb_supp_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_c)
}

// optional float fcf_vd_fcw_supp_c = 25;
bool Dt_Record_FCF::has_fcf_vd_fcw_supp_c() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_c() {
  _has_bits_[0] |= 0x08000000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_c() {
  _has_bits_[0] &= ~0x08000000u;
}
void Dt_Record_FCF::clear_fcf_vd_fcw_supp_c() {
  fcf_vd_fcw_supp_c_ = 0;
  clear_has_fcf_vd_fcw_supp_c();
}
float Dt_Record_FCF::fcf_vd_fcw_supp_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_c)
  return fcf_vd_fcw_supp_c_;
}
void Dt_Record_FCF::set_fcf_vd_fcw_supp_c(float value) {
  set_has_fcf_vd_fcw_supp_c();
  fcf_vd_fcw_supp_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_c)
}

// optional int32 fcf_vd_alert_d = 26;
bool Dt_Record_FCF::has_fcf_vd_alert_d() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_alert_d() {
  _has_bits_[0] |= 0x10000000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_alert_d() {
  _has_bits_[0] &= ~0x10000000u;
}
void Dt_Record_FCF::clear_fcf_vd_alert_d() {
  fcf_vd_alert_d_ = 0;
  clear_has_fcf_vd_alert_d();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_d)
  return fcf_vd_alert_d_;
}
void Dt_Record_FCF::set_fcf_vd_alert_d(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_d();
  fcf_vd_alert_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_d)
}

// optional int32 fcf_vd_id_d = 27;
bool Dt_Record_FCF::has_fcf_vd_id_d() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_id_d() {
  _has_bits_[0] |= 0x20000000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_id_d() {
  _has_bits_[0] &= ~0x20000000u;
}
void Dt_Record_FCF::clear_fcf_vd_id_d() {
  fcf_vd_id_d_ = 0;
  clear_has_fcf_vd_id_d();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_d)
  return fcf_vd_id_d_;
}
void Dt_Record_FCF::set_fcf_vd_id_d(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_d();
  fcf_vd_id_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_d)
}

// optional bool fcf_vd_set_type_d = 28;
bool Dt_Record_FCF::has_fcf_vd_set_type_d() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_set_type_d() {
  _has_bits_[0] |= 0x00400000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_set_type_d() {
  _has_bits_[0] &= ~0x00400000u;
}
void Dt_Record_FCF::clear_fcf_vd_set_type_d() {
  fcf_vd_set_type_d_ = false;
  clear_has_fcf_vd_set_type_d();
}
bool Dt_Record_FCF::fcf_vd_set_type_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_d)
  return fcf_vd_set_type_d_;
}
void Dt_Record_FCF::set_fcf_vd_set_type_d(bool value) {
  set_has_fcf_vd_set_type_d();
  fcf_vd_set_type_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_d)
}

// optional int32 reserved_5 = 29;
bool Dt_Record_FCF::has_reserved_5() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void Dt_Record_FCF::set_has_reserved_5() {
  _has_bits_[0] |= 0x40000000u;
}
void Dt_Record_FCF::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x40000000u;
}
void Dt_Record_FCF::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
::google::protobuf::int32 Dt_Record_FCF::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_5)
  return reserved_5_;
}
void Dt_Record_FCF::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_5)
}

// optional float fcf_vd_aeb_supp_d = 30;
bool Dt_Record_FCF::has_fcf_vd_aeb_supp_d() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_d() {
  _has_bits_[0] |= 0x80000000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_d() {
  _has_bits_[0] &= ~0x80000000u;
}
void Dt_Record_FCF::clear_fcf_vd_aeb_supp_d() {
  fcf_vd_aeb_supp_d_ = 0;
  clear_has_fcf_vd_aeb_supp_d();
}
float Dt_Record_FCF::fcf_vd_aeb_supp_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_d)
  return fcf_vd_aeb_supp_d_;
}
void Dt_Record_FCF::set_fcf_vd_aeb_supp_d(float value) {
  set_has_fcf_vd_aeb_supp_d();
  fcf_vd_aeb_supp_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_d)
}

// optional float fcf_vd_fcw_supp_d = 31;
bool Dt_Record_FCF::has_fcf_vd_fcw_supp_d() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_d() {
  _has_bits_[1] |= 0x00000001u;
}
void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_d() {
  _has_bits_[1] &= ~0x00000001u;
}
void Dt_Record_FCF::clear_fcf_vd_fcw_supp_d() {
  fcf_vd_fcw_supp_d_ = 0;
  clear_has_fcf_vd_fcw_supp_d();
}
float Dt_Record_FCF::fcf_vd_fcw_supp_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_d)
  return fcf_vd_fcw_supp_d_;
}
void Dt_Record_FCF::set_fcf_vd_fcw_supp_d(float value) {
  set_has_fcf_vd_fcw_supp_d();
  fcf_vd_fcw_supp_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_d)
}

// optional int32 fcf_vd_alert_e = 32;
bool Dt_Record_FCF::has_fcf_vd_alert_e() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_alert_e() {
  _has_bits_[1] |= 0x00000002u;
}
void Dt_Record_FCF::clear_has_fcf_vd_alert_e() {
  _has_bits_[1] &= ~0x00000002u;
}
void Dt_Record_FCF::clear_fcf_vd_alert_e() {
  fcf_vd_alert_e_ = 0;
  clear_has_fcf_vd_alert_e();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_e)
  return fcf_vd_alert_e_;
}
void Dt_Record_FCF::set_fcf_vd_alert_e(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_e();
  fcf_vd_alert_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_e)
}

// optional int32 fcf_vd_id_e = 33;
bool Dt_Record_FCF::has_fcf_vd_id_e() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_id_e() {
  _has_bits_[1] |= 0x00000004u;
}
void Dt_Record_FCF::clear_has_fcf_vd_id_e() {
  _has_bits_[1] &= ~0x00000004u;
}
void Dt_Record_FCF::clear_fcf_vd_id_e() {
  fcf_vd_id_e_ = 0;
  clear_has_fcf_vd_id_e();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_e)
  return fcf_vd_id_e_;
}
void Dt_Record_FCF::set_fcf_vd_id_e(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_e();
  fcf_vd_id_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_e)
}

// optional bool fcf_vd_set_type_e = 34;
bool Dt_Record_FCF::has_fcf_vd_set_type_e() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_set_type_e() {
  _has_bits_[1] |= 0x00000040u;
}
void Dt_Record_FCF::clear_has_fcf_vd_set_type_e() {
  _has_bits_[1] &= ~0x00000040u;
}
void Dt_Record_FCF::clear_fcf_vd_set_type_e() {
  fcf_vd_set_type_e_ = false;
  clear_has_fcf_vd_set_type_e();
}
bool Dt_Record_FCF::fcf_vd_set_type_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_e)
  return fcf_vd_set_type_e_;
}
void Dt_Record_FCF::set_fcf_vd_set_type_e(bool value) {
  set_has_fcf_vd_set_type_e();
  fcf_vd_set_type_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_e)
}

// optional int32 reserved_6 = 35;
bool Dt_Record_FCF::has_reserved_6() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void Dt_Record_FCF::set_has_reserved_6() {
  _has_bits_[1] |= 0x00000008u;
}
void Dt_Record_FCF::clear_has_reserved_6() {
  _has_bits_[1] &= ~0x00000008u;
}
void Dt_Record_FCF::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
::google::protobuf::int32 Dt_Record_FCF::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_6)
  return reserved_6_;
}
void Dt_Record_FCF::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_6)
}

// optional float fcf_vd_aeb_supp_e = 36;
bool Dt_Record_FCF::has_fcf_vd_aeb_supp_e() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_e() {
  _has_bits_[1] |= 0x00000010u;
}
void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_e() {
  _has_bits_[1] &= ~0x00000010u;
}
void Dt_Record_FCF::clear_fcf_vd_aeb_supp_e() {
  fcf_vd_aeb_supp_e_ = 0;
  clear_has_fcf_vd_aeb_supp_e();
}
float Dt_Record_FCF::fcf_vd_aeb_supp_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_e)
  return fcf_vd_aeb_supp_e_;
}
void Dt_Record_FCF::set_fcf_vd_aeb_supp_e(float value) {
  set_has_fcf_vd_aeb_supp_e();
  fcf_vd_aeb_supp_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_e)
}

// optional float fcf_vd_fcw_supp_e = 37;
bool Dt_Record_FCF::has_fcf_vd_fcw_supp_e() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_e() {
  _has_bits_[1] |= 0x00000020u;
}
void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_e() {
  _has_bits_[1] &= ~0x00000020u;
}
void Dt_Record_FCF::clear_fcf_vd_fcw_supp_e() {
  fcf_vd_fcw_supp_e_ = 0;
  clear_has_fcf_vd_fcw_supp_e();
}
float Dt_Record_FCF::fcf_vd_fcw_supp_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_e)
  return fcf_vd_fcw_supp_e_;
}
void Dt_Record_FCF::set_fcf_vd_fcw_supp_e(float value) {
  set_has_fcf_vd_fcw_supp_e();
  fcf_vd_fcw_supp_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_e)
}

// optional int32 fcf_vd_alert_f = 38;
bool Dt_Record_FCF::has_fcf_vd_alert_f() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_alert_f() {
  _has_bits_[1] |= 0x00000100u;
}
void Dt_Record_FCF::clear_has_fcf_vd_alert_f() {
  _has_bits_[1] &= ~0x00000100u;
}
void Dt_Record_FCF::clear_fcf_vd_alert_f() {
  fcf_vd_alert_f_ = 0;
  clear_has_fcf_vd_alert_f();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_f)
  return fcf_vd_alert_f_;
}
void Dt_Record_FCF::set_fcf_vd_alert_f(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_f();
  fcf_vd_alert_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_f)
}

// optional int32 fcf_vd_id_f = 39;
bool Dt_Record_FCF::has_fcf_vd_id_f() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_id_f() {
  _has_bits_[1] |= 0x00000200u;
}
void Dt_Record_FCF::clear_has_fcf_vd_id_f() {
  _has_bits_[1] &= ~0x00000200u;
}
void Dt_Record_FCF::clear_fcf_vd_id_f() {
  fcf_vd_id_f_ = 0;
  clear_has_fcf_vd_id_f();
}
::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_f)
  return fcf_vd_id_f_;
}
void Dt_Record_FCF::set_fcf_vd_id_f(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_f();
  fcf_vd_id_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_f)
}

// optional bool fcf_vd_set_type_f = 40;
bool Dt_Record_FCF::has_fcf_vd_set_type_f() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_set_type_f() {
  _has_bits_[1] |= 0x00000080u;
}
void Dt_Record_FCF::clear_has_fcf_vd_set_type_f() {
  _has_bits_[1] &= ~0x00000080u;
}
void Dt_Record_FCF::clear_fcf_vd_set_type_f() {
  fcf_vd_set_type_f_ = false;
  clear_has_fcf_vd_set_type_f();
}
bool Dt_Record_FCF::fcf_vd_set_type_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_f)
  return fcf_vd_set_type_f_;
}
void Dt_Record_FCF::set_fcf_vd_set_type_f(bool value) {
  set_has_fcf_vd_set_type_f();
  fcf_vd_set_type_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_f)
}

// optional int32 reserved_7 = 41;
bool Dt_Record_FCF::has_reserved_7() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void Dt_Record_FCF::set_has_reserved_7() {
  _has_bits_[1] |= 0x00000400u;
}
void Dt_Record_FCF::clear_has_reserved_7() {
  _has_bits_[1] &= ~0x00000400u;
}
void Dt_Record_FCF::clear_reserved_7() {
  reserved_7_ = 0;
  clear_has_reserved_7();
}
::google::protobuf::int32 Dt_Record_FCF::reserved_7() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_7)
  return reserved_7_;
}
void Dt_Record_FCF::set_reserved_7(::google::protobuf::int32 value) {
  set_has_reserved_7();
  reserved_7_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_7)
}

// optional float fcf_vd_aeb_supp_f = 42;
bool Dt_Record_FCF::has_fcf_vd_aeb_supp_f() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_f() {
  _has_bits_[1] |= 0x00000800u;
}
void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_f() {
  _has_bits_[1] &= ~0x00000800u;
}
void Dt_Record_FCF::clear_fcf_vd_aeb_supp_f() {
  fcf_vd_aeb_supp_f_ = 0;
  clear_has_fcf_vd_aeb_supp_f();
}
float Dt_Record_FCF::fcf_vd_aeb_supp_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_f)
  return fcf_vd_aeb_supp_f_;
}
void Dt_Record_FCF::set_fcf_vd_aeb_supp_f(float value) {
  set_has_fcf_vd_aeb_supp_f();
  fcf_vd_aeb_supp_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_f)
}

// optional float fcf_vd_fcw_supp_f = 43;
bool Dt_Record_FCF::has_fcf_vd_fcw_supp_f() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_f() {
  _has_bits_[1] |= 0x00001000u;
}
void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_f() {
  _has_bits_[1] &= ~0x00001000u;
}
void Dt_Record_FCF::clear_fcf_vd_fcw_supp_f() {
  fcf_vd_fcw_supp_f_ = 0;
  clear_has_fcf_vd_fcw_supp_f();
}
float Dt_Record_FCF::fcf_vd_fcw_supp_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_f)
  return fcf_vd_fcw_supp_f_;
}
void Dt_Record_FCF::set_fcf_vd_fcw_supp_f(float value) {
  set_has_fcf_vd_fcw_supp_f();
  fcf_vd_fcw_supp_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_f)
}

// optional .atd.common.Header header = 44;
bool Dt_Record_FCF::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_FCF::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_FCF::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_FCF::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_FCF::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_FCF::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF.header)
  return header_;
}
::atd::common::Header* Dt_Record_FCF::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_FCF::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF.header)
}

// optional .atd.common.Reserved reservedmsg = 45;
bool Dt_Record_FCF::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_FCF::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_FCF::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_FCF::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_FCF::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_FCF::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_FCF::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_FCF::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VRUCommon::kFcfVruZeroByteFieldNumber;
const int VRUCommon::kFcfVruProtocolVersionFieldNumber;
const int VRUCommon::kFcfVruSyncIdFieldNumber;
const int VRUCommon::kFcfVruMcpIdFieldNumber;
const int VRUCommon::kFcfVruMcpTtcFieldNumber;
const int VRUCommon::kFcfMcpVruIsbicyclesFieldNumber;
const int VRUCommon::kFcfVruFcvFieldNumber;
const int VRUCommon::kFcfVruSupressFcvFieldNumber;
const int VRUCommon::kFcfVruCurrInPathFcvFieldNumber;
const int VRUCommon::kFcfVruPredInPathFcvFieldNumber;
const int VRUCommon::kReserved1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VRUCommon::VRUCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.VRUCommon)
}
VRUCommon::VRUCommon(const VRUCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fcf_vru_zero_byte_, &from.fcf_vru_zero_byte_,
    reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&fcf_vru_zero_byte_) + sizeof(reserved_1_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.VRUCommon)
}

void VRUCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fcf_vru_zero_byte_, 0, reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&fcf_vru_zero_byte_) + sizeof(reserved_1_));
}

VRUCommon::~VRUCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.VRUCommon)
  SharedDtor();
}

void VRUCommon::SharedDtor() {
}

void VRUCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VRUCommon& VRUCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

VRUCommon* VRUCommon::New(::google::protobuf::Arena* arena) const {
  VRUCommon* n = new VRUCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VRUCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.VRUCommon)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&fcf_vru_zero_byte_, 0, reinterpret_cast<char*>(&fcf_mcp_vru_isbicycles_) -
      reinterpret_cast<char*>(&fcf_vru_zero_byte_) + sizeof(fcf_mcp_vru_isbicycles_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&fcf_vru_curr_in_path_fcv_, 0, reinterpret_cast<char*>(&reserved_1_) -
      reinterpret_cast<char*>(&fcf_vru_curr_in_path_fcv_) + sizeof(reserved_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VRUCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.VRUCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fcf_vru_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fcf_vru_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vru_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vru_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fcf_vru_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vru_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vru_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fcf_vru_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vru_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vru_mcp_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fcf_vru_mcp_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vru_mcp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vru_mcp_ttc = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_fcf_vru_mcp_ttc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vru_mcp_ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_mcp_vru_isbicycles = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_fcf_mcp_vru_isbicycles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_mcp_vru_isbicycles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.VRUCommon.Fcf_vru_fcvType fcf_vru_fcv = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::VRUCommon_Fcf_vru_fcvType_IsValid(value)) {
            set_fcf_vru_fcv(static_cast< ::atd::meprocess::VRUCommon_Fcf_vru_fcvType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vru_supress_fcv = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_fcf_vru_supress_fcv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vru_supress_fcv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vru_curr_in_path_fcv = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_fcf_vru_curr_in_path_fcv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vru_curr_in_path_fcv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vru_pred_in_path_fcv = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_fcf_vru_pred_in_path_fcv();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vru_pred_in_path_fcv_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.VRUCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.VRUCommon)
  return false;
#undef DO_
}

void VRUCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.VRUCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fcf_vru_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fcf_vru_zero_byte(), output);
  }

  // optional int32 fcf_vru_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fcf_vru_protocol_version(), output);
  }

  // optional int32 fcf_vru_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fcf_vru_sync_id(), output);
  }

  // optional int32 fcf_vru_mcp_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fcf_vru_mcp_id(), output);
  }

  // optional float fcf_vru_mcp_ttc = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fcf_vru_mcp_ttc(), output);
  }

  // optional bool fcf_mcp_vru_isbicycles = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->fcf_mcp_vru_isbicycles(), output);
  }

  // optional .atd.meprocess.VRUCommon.Fcf_vru_fcvType fcf_vru_fcv = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->fcf_vru_fcv(), output);
  }

  // optional int32 fcf_vru_supress_fcv = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->fcf_vru_supress_fcv(), output);
  }

  // optional bool fcf_vru_curr_in_path_fcv = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->fcf_vru_curr_in_path_fcv(), output);
  }

  // optional bool fcf_vru_pred_in_path_fcv = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->fcf_vru_pred_in_path_fcv(), output);
  }

  // optional int32 reserved_1 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved_1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.VRUCommon)
}

size_t VRUCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.VRUCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 fcf_vru_zero_byte = 1;
    if (has_fcf_vru_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vru_zero_byte());
    }

    // optional int32 fcf_vru_protocol_version = 2;
    if (has_fcf_vru_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vru_protocol_version());
    }

    // optional int32 fcf_vru_sync_id = 3;
    if (has_fcf_vru_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vru_sync_id());
    }

    // optional int32 fcf_vru_mcp_id = 4;
    if (has_fcf_vru_mcp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vru_mcp_id());
    }

    // optional float fcf_vru_mcp_ttc = 5;
    if (has_fcf_vru_mcp_ttc()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.VRUCommon.Fcf_vru_fcvType fcf_vru_fcv = 7;
    if (has_fcf_vru_fcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fcf_vru_fcv());
    }

    // optional int32 fcf_vru_supress_fcv = 8;
    if (has_fcf_vru_supress_fcv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vru_supress_fcv());
    }

    // optional bool fcf_mcp_vru_isbicycles = 6;
    if (has_fcf_mcp_vru_isbicycles()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional bool fcf_vru_curr_in_path_fcv = 9;
    if (has_fcf_vru_curr_in_path_fcv()) {
      total_size += 1 + 1;
    }

    // optional bool fcf_vru_pred_in_path_fcv = 10;
    if (has_fcf_vru_pred_in_path_fcv()) {
      total_size += 1 + 1;
    }

    // optional int32 reserved_1 = 11;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VRUCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VRUCommon*>(&from));
}

void VRUCommon::MergeFrom(const VRUCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.VRUCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fcf_vru_zero_byte_ = from.fcf_vru_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      fcf_vru_protocol_version_ = from.fcf_vru_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      fcf_vru_sync_id_ = from.fcf_vru_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fcf_vru_mcp_id_ = from.fcf_vru_mcp_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      fcf_vru_mcp_ttc_ = from.fcf_vru_mcp_ttc_;
    }
    if (cached_has_bits & 0x00000020u) {
      fcf_vru_fcv_ = from.fcf_vru_fcv_;
    }
    if (cached_has_bits & 0x00000040u) {
      fcf_vru_supress_fcv_ = from.fcf_vru_supress_fcv_;
    }
    if (cached_has_bits & 0x00000080u) {
      fcf_mcp_vru_isbicycles_ = from.fcf_mcp_vru_isbicycles_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      fcf_vru_curr_in_path_fcv_ = from.fcf_vru_curr_in_path_fcv_;
    }
    if (cached_has_bits & 0x00000200u) {
      fcf_vru_pred_in_path_fcv_ = from.fcf_vru_pred_in_path_fcv_;
    }
    if (cached_has_bits & 0x00000400u) {
      reserved_1_ = from.reserved_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VRUCommon::CopyFrom(const VRUCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.VRUCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VRUCommon::IsInitialized() const {
  return true;
}

void VRUCommon::Swap(VRUCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VRUCommon::InternalSwap(VRUCommon* other) {
  std::swap(fcf_vru_zero_byte_, other->fcf_vru_zero_byte_);
  std::swap(fcf_vru_protocol_version_, other->fcf_vru_protocol_version_);
  std::swap(fcf_vru_sync_id_, other->fcf_vru_sync_id_);
  std::swap(fcf_vru_mcp_id_, other->fcf_vru_mcp_id_);
  std::swap(fcf_vru_mcp_ttc_, other->fcf_vru_mcp_ttc_);
  std::swap(fcf_vru_fcv_, other->fcf_vru_fcv_);
  std::swap(fcf_vru_supress_fcv_, other->fcf_vru_supress_fcv_);
  std::swap(fcf_mcp_vru_isbicycles_, other->fcf_mcp_vru_isbicycles_);
  std::swap(fcf_vru_curr_in_path_fcv_, other->fcf_vru_curr_in_path_fcv_);
  std::swap(fcf_vru_pred_in_path_fcv_, other->fcf_vru_pred_in_path_fcv_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VRUCommon::GetTypeName() const {
  return "atd.meprocess.VRUCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VRUCommon

// optional int32 fcf_vru_zero_byte = 1;
bool VRUCommon::has_fcf_vru_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VRUCommon::set_has_fcf_vru_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void VRUCommon::clear_has_fcf_vru_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void VRUCommon::clear_fcf_vru_zero_byte() {
  fcf_vru_zero_byte_ = 0;
  clear_has_fcf_vru_zero_byte();
}
::google::protobuf::int32 VRUCommon::fcf_vru_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_zero_byte)
  return fcf_vru_zero_byte_;
}
void VRUCommon::set_fcf_vru_zero_byte(::google::protobuf::int32 value) {
  set_has_fcf_vru_zero_byte();
  fcf_vru_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_zero_byte)
}

// optional int32 fcf_vru_protocol_version = 2;
bool VRUCommon::has_fcf_vru_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VRUCommon::set_has_fcf_vru_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void VRUCommon::clear_has_fcf_vru_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void VRUCommon::clear_fcf_vru_protocol_version() {
  fcf_vru_protocol_version_ = 0;
  clear_has_fcf_vru_protocol_version();
}
::google::protobuf::int32 VRUCommon::fcf_vru_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_protocol_version)
  return fcf_vru_protocol_version_;
}
void VRUCommon::set_fcf_vru_protocol_version(::google::protobuf::int32 value) {
  set_has_fcf_vru_protocol_version();
  fcf_vru_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_protocol_version)
}

// optional int32 fcf_vru_sync_id = 3;
bool VRUCommon::has_fcf_vru_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VRUCommon::set_has_fcf_vru_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void VRUCommon::clear_has_fcf_vru_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void VRUCommon::clear_fcf_vru_sync_id() {
  fcf_vru_sync_id_ = 0;
  clear_has_fcf_vru_sync_id();
}
::google::protobuf::int32 VRUCommon::fcf_vru_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_sync_id)
  return fcf_vru_sync_id_;
}
void VRUCommon::set_fcf_vru_sync_id(::google::protobuf::int32 value) {
  set_has_fcf_vru_sync_id();
  fcf_vru_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_sync_id)
}

// optional int32 fcf_vru_mcp_id = 4;
bool VRUCommon::has_fcf_vru_mcp_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VRUCommon::set_has_fcf_vru_mcp_id() {
  _has_bits_[0] |= 0x00000008u;
}
void VRUCommon::clear_has_fcf_vru_mcp_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void VRUCommon::clear_fcf_vru_mcp_id() {
  fcf_vru_mcp_id_ = 0;
  clear_has_fcf_vru_mcp_id();
}
::google::protobuf::int32 VRUCommon::fcf_vru_mcp_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_mcp_id)
  return fcf_vru_mcp_id_;
}
void VRUCommon::set_fcf_vru_mcp_id(::google::protobuf::int32 value) {
  set_has_fcf_vru_mcp_id();
  fcf_vru_mcp_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_mcp_id)
}

// optional float fcf_vru_mcp_ttc = 5;
bool VRUCommon::has_fcf_vru_mcp_ttc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VRUCommon::set_has_fcf_vru_mcp_ttc() {
  _has_bits_[0] |= 0x00000010u;
}
void VRUCommon::clear_has_fcf_vru_mcp_ttc() {
  _has_bits_[0] &= ~0x00000010u;
}
void VRUCommon::clear_fcf_vru_mcp_ttc() {
  fcf_vru_mcp_ttc_ = 0;
  clear_has_fcf_vru_mcp_ttc();
}
float VRUCommon::fcf_vru_mcp_ttc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_mcp_ttc)
  return fcf_vru_mcp_ttc_;
}
void VRUCommon::set_fcf_vru_mcp_ttc(float value) {
  set_has_fcf_vru_mcp_ttc();
  fcf_vru_mcp_ttc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_mcp_ttc)
}

// optional bool fcf_mcp_vru_isbicycles = 6;
bool VRUCommon::has_fcf_mcp_vru_isbicycles() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VRUCommon::set_has_fcf_mcp_vru_isbicycles() {
  _has_bits_[0] |= 0x00000080u;
}
void VRUCommon::clear_has_fcf_mcp_vru_isbicycles() {
  _has_bits_[0] &= ~0x00000080u;
}
void VRUCommon::clear_fcf_mcp_vru_isbicycles() {
  fcf_mcp_vru_isbicycles_ = false;
  clear_has_fcf_mcp_vru_isbicycles();
}
bool VRUCommon::fcf_mcp_vru_isbicycles() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_mcp_vru_isbicycles)
  return fcf_mcp_vru_isbicycles_;
}
void VRUCommon::set_fcf_mcp_vru_isbicycles(bool value) {
  set_has_fcf_mcp_vru_isbicycles();
  fcf_mcp_vru_isbicycles_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_mcp_vru_isbicycles)
}

// optional .atd.meprocess.VRUCommon.Fcf_vru_fcvType fcf_vru_fcv = 7;
bool VRUCommon::has_fcf_vru_fcv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VRUCommon::set_has_fcf_vru_fcv() {
  _has_bits_[0] |= 0x00000020u;
}
void VRUCommon::clear_has_fcf_vru_fcv() {
  _has_bits_[0] &= ~0x00000020u;
}
void VRUCommon::clear_fcf_vru_fcv() {
  fcf_vru_fcv_ = 0;
  clear_has_fcf_vru_fcv();
}
::atd::meprocess::VRUCommon_Fcf_vru_fcvType VRUCommon::fcf_vru_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_fcv)
  return static_cast< ::atd::meprocess::VRUCommon_Fcf_vru_fcvType >(fcf_vru_fcv_);
}
void VRUCommon::set_fcf_vru_fcv(::atd::meprocess::VRUCommon_Fcf_vru_fcvType value) {
  assert(::atd::meprocess::VRUCommon_Fcf_vru_fcvType_IsValid(value));
  set_has_fcf_vru_fcv();
  fcf_vru_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_fcv)
}

// optional int32 fcf_vru_supress_fcv = 8;
bool VRUCommon::has_fcf_vru_supress_fcv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VRUCommon::set_has_fcf_vru_supress_fcv() {
  _has_bits_[0] |= 0x00000040u;
}
void VRUCommon::clear_has_fcf_vru_supress_fcv() {
  _has_bits_[0] &= ~0x00000040u;
}
void VRUCommon::clear_fcf_vru_supress_fcv() {
  fcf_vru_supress_fcv_ = 0;
  clear_has_fcf_vru_supress_fcv();
}
::google::protobuf::int32 VRUCommon::fcf_vru_supress_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_supress_fcv)
  return fcf_vru_supress_fcv_;
}
void VRUCommon::set_fcf_vru_supress_fcv(::google::protobuf::int32 value) {
  set_has_fcf_vru_supress_fcv();
  fcf_vru_supress_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_supress_fcv)
}

// optional bool fcf_vru_curr_in_path_fcv = 9;
bool VRUCommon::has_fcf_vru_curr_in_path_fcv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VRUCommon::set_has_fcf_vru_curr_in_path_fcv() {
  _has_bits_[0] |= 0x00000100u;
}
void VRUCommon::clear_has_fcf_vru_curr_in_path_fcv() {
  _has_bits_[0] &= ~0x00000100u;
}
void VRUCommon::clear_fcf_vru_curr_in_path_fcv() {
  fcf_vru_curr_in_path_fcv_ = false;
  clear_has_fcf_vru_curr_in_path_fcv();
}
bool VRUCommon::fcf_vru_curr_in_path_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_curr_in_path_fcv)
  return fcf_vru_curr_in_path_fcv_;
}
void VRUCommon::set_fcf_vru_curr_in_path_fcv(bool value) {
  set_has_fcf_vru_curr_in_path_fcv();
  fcf_vru_curr_in_path_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_curr_in_path_fcv)
}

// optional bool fcf_vru_pred_in_path_fcv = 10;
bool VRUCommon::has_fcf_vru_pred_in_path_fcv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void VRUCommon::set_has_fcf_vru_pred_in_path_fcv() {
  _has_bits_[0] |= 0x00000200u;
}
void VRUCommon::clear_has_fcf_vru_pred_in_path_fcv() {
  _has_bits_[0] &= ~0x00000200u;
}
void VRUCommon::clear_fcf_vru_pred_in_path_fcv() {
  fcf_vru_pred_in_path_fcv_ = false;
  clear_has_fcf_vru_pred_in_path_fcv();
}
bool VRUCommon::fcf_vru_pred_in_path_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_pred_in_path_fcv)
  return fcf_vru_pred_in_path_fcv_;
}
void VRUCommon::set_fcf_vru_pred_in_path_fcv(bool value) {
  set_has_fcf_vru_pred_in_path_fcv();
  fcf_vru_pred_in_path_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_pred_in_path_fcv)
}

// optional int32 reserved_1 = 11;
bool VRUCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void VRUCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000400u;
}
void VRUCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000400u;
}
void VRUCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 VRUCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.reserved_1)
  return reserved_1_;
}
void VRUCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.reserved_1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_FCF_VRU::kHeaderFieldNumber;
const int Dt_Record_FCF_VRU::kReservedmsgFieldNumber;
const int Dt_Record_FCF_VRU::kStvrucommonFieldNumber;
const int Dt_Record_FCF_VRU::kDtArray6VruFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_FCF_VRU::Dt_Record_FCF_VRU()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_FCF_VRU)
}
Dt_Record_FCF_VRU::Dt_Record_FCF_VRU(const Dt_Record_FCF_VRU& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_6_vru_(from.dt_array_6_vru_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stvrucommon()) {
    stvrucommon_ = new ::atd::meprocess::VRUCommon(*from.stvrucommon_);
  } else {
    stvrucommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_FCF_VRU)
}

void Dt_Record_FCF_VRU::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stvrucommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stvrucommon_));
}

Dt_Record_FCF_VRU::~Dt_Record_FCF_VRU() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_FCF_VRU)
  SharedDtor();
}

void Dt_Record_FCF_VRU::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stvrucommon_;
  }
}

void Dt_Record_FCF_VRU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_FCF_VRU& Dt_Record_FCF_VRU::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_FCF_VRU* Dt_Record_FCF_VRU::New(::google::protobuf::Arena* arena) const {
  Dt_Record_FCF_VRU* n = new Dt_Record_FCF_VRU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_FCF_VRU::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_FCF_VRU)
  dt_array_6_vru_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stvrucommon()) {
      GOOGLE_DCHECK(stvrucommon_ != NULL);
      stvrucommon_->::atd::meprocess::VRUCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_FCF_VRU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_FCF_VRU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.VRUCommon stvrucommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stvrucommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.FCF_VRU dt_array_6_vru = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_6_vru()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_FCF_VRU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_FCF_VRU)
  return false;
#undef DO_
}

void Dt_Record_FCF_VRU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_FCF_VRU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.VRUCommon stvrucommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stvrucommon_, output);
  }

  // repeated .atd.meprocess.FCF_VRU dt_array_6_vru = 4;
  for (unsigned int i = 0, n = this->dt_array_6_vru_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_6_vru(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_FCF_VRU)
}

size_t Dt_Record_FCF_VRU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_FCF_VRU)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.FCF_VRU dt_array_6_vru = 4;
  {
    unsigned int count = this->dt_array_6_vru_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_6_vru(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.VRUCommon stvrucommon = 3;
    if (has_stvrucommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stvrucommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_FCF_VRU::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_FCF_VRU*>(&from));
}

void Dt_Record_FCF_VRU::MergeFrom(const Dt_Record_FCF_VRU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_FCF_VRU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_6_vru_.MergeFrom(from.dt_array_6_vru_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stvrucommon()->::atd::meprocess::VRUCommon::MergeFrom(from.stvrucommon());
    }
  }
}

void Dt_Record_FCF_VRU::CopyFrom(const Dt_Record_FCF_VRU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_FCF_VRU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_FCF_VRU::IsInitialized() const {
  return true;
}

void Dt_Record_FCF_VRU::Swap(Dt_Record_FCF_VRU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_FCF_VRU::InternalSwap(Dt_Record_FCF_VRU* other) {
  dt_array_6_vru_.InternalSwap(&other->dt_array_6_vru_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stvrucommon_, other->stvrucommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_FCF_VRU::GetTypeName() const {
  return "atd.meprocess.Dt_Record_FCF_VRU";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_FCF_VRU

// optional .atd.common.Header header = 1;
bool Dt_Record_FCF_VRU::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_FCF_VRU::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_FCF_VRU::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_FCF_VRU::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_FCF_VRU::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_FCF_VRU::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.header)
  return header_;
}
::atd::common::Header* Dt_Record_FCF_VRU::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF_VRU.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_FCF_VRU::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF_VRU.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_FCF_VRU::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_FCF_VRU::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_FCF_VRU::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_FCF_VRU::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_FCF_VRU::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_FCF_VRU::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_FCF_VRU::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_FCF_VRU::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
}

// optional .atd.meprocess.VRUCommon stvrucommon = 3;
bool Dt_Record_FCF_VRU::has_stvrucommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_FCF_VRU::set_has_stvrucommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_FCF_VRU::clear_has_stvrucommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_FCF_VRU::clear_stvrucommon() {
  if (stvrucommon_ != NULL) stvrucommon_->::atd::meprocess::VRUCommon::Clear();
  clear_has_stvrucommon();
}
const ::atd::meprocess::VRUCommon& Dt_Record_FCF_VRU::stvrucommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
  return stvrucommon_ != NULL ? *stvrucommon_
                         : *::atd::meprocess::VRUCommon::internal_default_instance();
}
::atd::meprocess::VRUCommon* Dt_Record_FCF_VRU::mutable_stvrucommon() {
  set_has_stvrucommon();
  if (stvrucommon_ == NULL) {
    stvrucommon_ = new ::atd::meprocess::VRUCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
  return stvrucommon_;
}
::atd::meprocess::VRUCommon* Dt_Record_FCF_VRU::release_stvrucommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
  clear_has_stvrucommon();
  ::atd::meprocess::VRUCommon* temp = stvrucommon_;
  stvrucommon_ = NULL;
  return temp;
}
void Dt_Record_FCF_VRU::set_allocated_stvrucommon(::atd::meprocess::VRUCommon* stvrucommon) {
  delete stvrucommon_;
  stvrucommon_ = stvrucommon;
  if (stvrucommon) {
    set_has_stvrucommon();
  } else {
    clear_has_stvrucommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
}

// repeated .atd.meprocess.FCF_VRU dt_array_6_vru = 4;
int Dt_Record_FCF_VRU::dt_array_6_vru_size() const {
  return dt_array_6_vru_.size();
}
void Dt_Record_FCF_VRU::clear_dt_array_6_vru() {
  dt_array_6_vru_.Clear();
}
const ::atd::meprocess::FCF_VRU& Dt_Record_FCF_VRU::dt_array_6_vru(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_.Get(index);
}
::atd::meprocess::FCF_VRU* Dt_Record_FCF_VRU::mutable_dt_array_6_vru(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_.Mutable(index);
}
::atd::meprocess::FCF_VRU* Dt_Record_FCF_VRU::add_dt_array_6_vru() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::FCF_VRU >*
Dt_Record_FCF_VRU::mutable_dt_array_6_vru() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return &dt_array_6_vru_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FCF_VRU >&
Dt_Record_FCF_VRU::dt_array_6_vru() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FCF_VRU::kFcfVruAlertLFieldNumber;
const int FCF_VRU::kFcfVruSupressLFieldNumber;
const int FCF_VRU::kFcfVruTtcThreshLFieldNumber;
const int FCF_VRU::kFcfVruCurrInPathLFieldNumber;
const int FCF_VRU::kFcfVruPredInPathLFieldNumber;
const int FCF_VRU::kFcfVruBufferLFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FCF_VRU::FCF_VRU()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.FCF_VRU)
}
FCF_VRU::FCF_VRU(const FCF_VRU& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fcf_vru_supress_l_, &from.fcf_vru_supress_l_,
    reinterpret_cast<char*>(&fcf_vru_alert_l_) -
    reinterpret_cast<char*>(&fcf_vru_supress_l_) + sizeof(fcf_vru_alert_l_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.FCF_VRU)
}

void FCF_VRU::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fcf_vru_supress_l_, 0, reinterpret_cast<char*>(&fcf_vru_buffer_l_) -
    reinterpret_cast<char*>(&fcf_vru_supress_l_) + sizeof(fcf_vru_buffer_l_));
  fcf_vru_alert_l_ = 39270;
}

FCF_VRU::~FCF_VRU() {
  // @@protoc_insertion_point(destructor:atd.meprocess.FCF_VRU)
  SharedDtor();
}

void FCF_VRU::SharedDtor() {
}

void FCF_VRU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FCF_VRU& FCF_VRU::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

FCF_VRU* FCF_VRU::New(::google::protobuf::Arena* arena) const {
  FCF_VRU* n = new FCF_VRU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FCF_VRU::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.FCF_VRU)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&fcf_vru_supress_l_, 0, reinterpret_cast<char*>(&fcf_vru_buffer_l_) -
      reinterpret_cast<char*>(&fcf_vru_supress_l_) + sizeof(fcf_vru_buffer_l_));
    fcf_vru_alert_l_ = 39270;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FCF_VRU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.FCF_VRU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.meprocess.FCF_VRU.Fcf_vru_alert_lType fcf_vru_alert_l = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType_IsValid(value)) {
            set_fcf_vru_alert_l(static_cast< ::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fcf_vru_supress_l = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fcf_vru_supress_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fcf_vru_supress_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vru_ttc_thresh_l = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_fcf_vru_ttc_thresh_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vru_ttc_thresh_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vru_curr_in_path_l = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fcf_vru_curr_in_path_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vru_curr_in_path_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fcf_vru_pred_in_path_l = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_fcf_vru_pred_in_path_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fcf_vru_pred_in_path_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fcf_vru_buffer_l = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_fcf_vru_buffer_l();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fcf_vru_buffer_l_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.FCF_VRU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.FCF_VRU)
  return false;
#undef DO_
}

void FCF_VRU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.FCF_VRU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.meprocess.FCF_VRU.Fcf_vru_alert_lType fcf_vru_alert_l = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->fcf_vru_alert_l(), output);
  }

  // optional int32 fcf_vru_supress_l = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fcf_vru_supress_l(), output);
  }

  // optional float fcf_vru_ttc_thresh_l = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fcf_vru_ttc_thresh_l(), output);
  }

  // optional bool fcf_vru_curr_in_path_l = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->fcf_vru_curr_in_path_l(), output);
  }

  // optional bool fcf_vru_pred_in_path_l = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->fcf_vru_pred_in_path_l(), output);
  }

  // optional float fcf_vru_buffer_l = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fcf_vru_buffer_l(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.FCF_VRU)
}

size_t FCF_VRU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.FCF_VRU)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 fcf_vru_supress_l = 2;
    if (has_fcf_vru_supress_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fcf_vru_supress_l());
    }

    // optional float fcf_vru_ttc_thresh_l = 3;
    if (has_fcf_vru_ttc_thresh_l()) {
      total_size += 1 + 4;
    }

    // optional bool fcf_vru_curr_in_path_l = 4;
    if (has_fcf_vru_curr_in_path_l()) {
      total_size += 1 + 1;
    }

    // optional bool fcf_vru_pred_in_path_l = 5;
    if (has_fcf_vru_pred_in_path_l()) {
      total_size += 1 + 1;
    }

    // optional float fcf_vru_buffer_l = 6;
    if (has_fcf_vru_buffer_l()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.FCF_VRU.Fcf_vru_alert_lType fcf_vru_alert_l = 1;
    if (has_fcf_vru_alert_l()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fcf_vru_alert_l());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FCF_VRU::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FCF_VRU*>(&from));
}

void FCF_VRU::MergeFrom(const FCF_VRU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.FCF_VRU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      fcf_vru_supress_l_ = from.fcf_vru_supress_l_;
    }
    if (cached_has_bits & 0x00000002u) {
      fcf_vru_ttc_thresh_l_ = from.fcf_vru_ttc_thresh_l_;
    }
    if (cached_has_bits & 0x00000004u) {
      fcf_vru_curr_in_path_l_ = from.fcf_vru_curr_in_path_l_;
    }
    if (cached_has_bits & 0x00000008u) {
      fcf_vru_pred_in_path_l_ = from.fcf_vru_pred_in_path_l_;
    }
    if (cached_has_bits & 0x00000010u) {
      fcf_vru_buffer_l_ = from.fcf_vru_buffer_l_;
    }
    if (cached_has_bits & 0x00000020u) {
      fcf_vru_alert_l_ = from.fcf_vru_alert_l_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCF_VRU::CopyFrom(const FCF_VRU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.FCF_VRU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCF_VRU::IsInitialized() const {
  return true;
}

void FCF_VRU::Swap(FCF_VRU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FCF_VRU::InternalSwap(FCF_VRU* other) {
  std::swap(fcf_vru_supress_l_, other->fcf_vru_supress_l_);
  std::swap(fcf_vru_ttc_thresh_l_, other->fcf_vru_ttc_thresh_l_);
  std::swap(fcf_vru_curr_in_path_l_, other->fcf_vru_curr_in_path_l_);
  std::swap(fcf_vru_pred_in_path_l_, other->fcf_vru_pred_in_path_l_);
  std::swap(fcf_vru_buffer_l_, other->fcf_vru_buffer_l_);
  std::swap(fcf_vru_alert_l_, other->fcf_vru_alert_l_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FCF_VRU::GetTypeName() const {
  return "atd.meprocess.FCF_VRU";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FCF_VRU

// optional .atd.meprocess.FCF_VRU.Fcf_vru_alert_lType fcf_vru_alert_l = 1;
bool FCF_VRU::has_fcf_vru_alert_l() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FCF_VRU::set_has_fcf_vru_alert_l() {
  _has_bits_[0] |= 0x00000020u;
}
void FCF_VRU::clear_has_fcf_vru_alert_l() {
  _has_bits_[0] &= ~0x00000020u;
}
void FCF_VRU::clear_fcf_vru_alert_l() {
  fcf_vru_alert_l_ = 39270;
  clear_has_fcf_vru_alert_l();
}
::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType FCF_VRU::fcf_vru_alert_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_alert_l)
  return static_cast< ::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType >(fcf_vru_alert_l_);
}
void FCF_VRU::set_fcf_vru_alert_l(::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType value) {
  assert(::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType_IsValid(value));
  set_has_fcf_vru_alert_l();
  fcf_vru_alert_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_alert_l)
}

// optional int32 fcf_vru_supress_l = 2;
bool FCF_VRU::has_fcf_vru_supress_l() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FCF_VRU::set_has_fcf_vru_supress_l() {
  _has_bits_[0] |= 0x00000001u;
}
void FCF_VRU::clear_has_fcf_vru_supress_l() {
  _has_bits_[0] &= ~0x00000001u;
}
void FCF_VRU::clear_fcf_vru_supress_l() {
  fcf_vru_supress_l_ = 0;
  clear_has_fcf_vru_supress_l();
}
::google::protobuf::int32 FCF_VRU::fcf_vru_supress_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_supress_l)
  return fcf_vru_supress_l_;
}
void FCF_VRU::set_fcf_vru_supress_l(::google::protobuf::int32 value) {
  set_has_fcf_vru_supress_l();
  fcf_vru_supress_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_supress_l)
}

// optional float fcf_vru_ttc_thresh_l = 3;
bool FCF_VRU::has_fcf_vru_ttc_thresh_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FCF_VRU::set_has_fcf_vru_ttc_thresh_l() {
  _has_bits_[0] |= 0x00000002u;
}
void FCF_VRU::clear_has_fcf_vru_ttc_thresh_l() {
  _has_bits_[0] &= ~0x00000002u;
}
void FCF_VRU::clear_fcf_vru_ttc_thresh_l() {
  fcf_vru_ttc_thresh_l_ = 0;
  clear_has_fcf_vru_ttc_thresh_l();
}
float FCF_VRU::fcf_vru_ttc_thresh_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_ttc_thresh_l)
  return fcf_vru_ttc_thresh_l_;
}
void FCF_VRU::set_fcf_vru_ttc_thresh_l(float value) {
  set_has_fcf_vru_ttc_thresh_l();
  fcf_vru_ttc_thresh_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_ttc_thresh_l)
}

// optional bool fcf_vru_curr_in_path_l = 4;
bool FCF_VRU::has_fcf_vru_curr_in_path_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FCF_VRU::set_has_fcf_vru_curr_in_path_l() {
  _has_bits_[0] |= 0x00000004u;
}
void FCF_VRU::clear_has_fcf_vru_curr_in_path_l() {
  _has_bits_[0] &= ~0x00000004u;
}
void FCF_VRU::clear_fcf_vru_curr_in_path_l() {
  fcf_vru_curr_in_path_l_ = false;
  clear_has_fcf_vru_curr_in_path_l();
}
bool FCF_VRU::fcf_vru_curr_in_path_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_curr_in_path_l)
  return fcf_vru_curr_in_path_l_;
}
void FCF_VRU::set_fcf_vru_curr_in_path_l(bool value) {
  set_has_fcf_vru_curr_in_path_l();
  fcf_vru_curr_in_path_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_curr_in_path_l)
}

// optional bool fcf_vru_pred_in_path_l = 5;
bool FCF_VRU::has_fcf_vru_pred_in_path_l() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FCF_VRU::set_has_fcf_vru_pred_in_path_l() {
  _has_bits_[0] |= 0x00000008u;
}
void FCF_VRU::clear_has_fcf_vru_pred_in_path_l() {
  _has_bits_[0] &= ~0x00000008u;
}
void FCF_VRU::clear_fcf_vru_pred_in_path_l() {
  fcf_vru_pred_in_path_l_ = false;
  clear_has_fcf_vru_pred_in_path_l();
}
bool FCF_VRU::fcf_vru_pred_in_path_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_pred_in_path_l)
  return fcf_vru_pred_in_path_l_;
}
void FCF_VRU::set_fcf_vru_pred_in_path_l(bool value) {
  set_has_fcf_vru_pred_in_path_l();
  fcf_vru_pred_in_path_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_pred_in_path_l)
}

// optional float fcf_vru_buffer_l = 6;
bool FCF_VRU::has_fcf_vru_buffer_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FCF_VRU::set_has_fcf_vru_buffer_l() {
  _has_bits_[0] |= 0x00000010u;
}
void FCF_VRU::clear_has_fcf_vru_buffer_l() {
  _has_bits_[0] &= ~0x00000010u;
}
void FCF_VRU::clear_fcf_vru_buffer_l() {
  fcf_vru_buffer_l_ = 0;
  clear_has_fcf_vru_buffer_l();
}
float FCF_VRU::fcf_vru_buffer_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_buffer_l)
  return fcf_vru_buffer_l_;
}
void FCF_VRU::set_fcf_vru_buffer_l(float value) {
  set_has_fcf_vru_buffer_l();
  fcf_vru_buffer_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_buffer_l)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_FailSafe::kFsZeroByteFieldNumber;
const int Dt_Record_FailSafe::kFsProtocolVersionFieldNumber;
const int Dt_Record_FailSafe::kFsSyncIdFieldNumber;
const int Dt_Record_FailSafe::kFsCamerasNumberFieldNumber;
const int Dt_Record_FailSafe::kReserved1FieldNumber;
const int Dt_Record_FailSafe::kFsImpactedTechnologiesFieldNumber;
const int Dt_Record_FailSafe::kFsCameraId0FieldNumber;
const int Dt_Record_FailSafe::kFsRain0FieldNumber;
const int Dt_Record_FailSafe::kFsFog0FieldNumber;
const int Dt_Record_FailSafe::kFsSplashes0FieldNumber;
const int Dt_Record_FailSafe::kFsSelfGlare0FieldNumber;
const int Dt_Record_FailSafe::kFsSunRay0FieldNumber;
const int Dt_Record_FailSafe::kFsLowSun0FieldNumber;
const int Dt_Record_FailSafe::kFsBlurImage0FieldNumber;
const int Dt_Record_FailSafe::kFsPartialBlockage0FieldNumber;
const int Dt_Record_FailSafe::kFsFullBlockage0FieldNumber;
const int Dt_Record_FailSafe::kFsFrozenWindshield0FieldNumber;
const int Dt_Record_FailSafe::kFsOutOfCalib0FieldNumber;
const int Dt_Record_FailSafe::kFsOutOfFocus0FieldNumber;
const int Dt_Record_FailSafe::kReserved2FieldNumber;
const int Dt_Record_FailSafe::kHeaderFieldNumber;
const int Dt_Record_FailSafe::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_FailSafe::Dt_Record_FailSafe()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_FailSafe)
}
Dt_Record_FailSafe::Dt_Record_FailSafe(const Dt_Record_FailSafe& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&fs_zero_byte_, &from.fs_zero_byte_,
    reinterpret_cast<char*>(&reserved_2_) -
    reinterpret_cast<char*>(&fs_zero_byte_) + sizeof(reserved_2_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_FailSafe)
}

void Dt_Record_FailSafe::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reserved_2_) -
    reinterpret_cast<char*>(&header_) + sizeof(reserved_2_));
}

Dt_Record_FailSafe::~Dt_Record_FailSafe() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_FailSafe)
  SharedDtor();
}

void Dt_Record_FailSafe::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Dt_Record_FailSafe::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_FailSafe& Dt_Record_FailSafe::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_FailSafe* Dt_Record_FailSafe::New(::google::protobuf::Arena* arena) const {
  Dt_Record_FailSafe* n = new Dt_Record_FailSafe;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_FailSafe::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_FailSafe)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&fs_zero_byte_, 0, reinterpret_cast<char*>(&fs_impacted_technologies_) -
      reinterpret_cast<char*>(&fs_zero_byte_) + sizeof(fs_impacted_technologies_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&fs_camera_id_0_, 0, reinterpret_cast<char*>(&fs_blur_image_0_) -
      reinterpret_cast<char*>(&fs_camera_id_0_) + sizeof(fs_blur_image_0_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&fs_partial_blockage_0_, 0, reinterpret_cast<char*>(&reserved_2_) -
      reinterpret_cast<char*>(&fs_partial_blockage_0_) + sizeof(reserved_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_FailSafe::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_FailSafe)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fs_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fs_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fs_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fs_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fs_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fs_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fs_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fs_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fs_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fs_cameras_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fs_cameras_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fs_cameras_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fs_impacted_technologies = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_fs_impacted_technologies();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fs_impacted_technologies_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fs_camera_id_0 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_fs_camera_id_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fs_camera_id_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_rain_0Type fs_rain_0 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type_IsValid(value)) {
            set_fs_rain_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_fog_0Type fs_fog_0 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type_IsValid(value)) {
            set_fs_fog_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_splashes_0Type fs_splashes_0 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type_IsValid(value)) {
            set_fs_splashes_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_self_glare_0Type fs_self_glare_0 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type_IsValid(value)) {
            set_fs_self_glare_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_sun_ray_0Type fs_sun_ray_0 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type_IsValid(value)) {
            set_fs_sun_ray_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_low_sun_0Type fs_low_sun_0 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type_IsValid(value)) {
            set_fs_low_sun_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(104u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_blur_image_0Type fs_blur_image_0 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type_IsValid(value)) {
            set_fs_blur_image_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(112u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_partial_blockage_0Type fs_partial_blockage_0 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type_IsValid(value)) {
            set_fs_partial_blockage_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(120u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_full_blockage_0Type fs_full_blockage_0 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type_IsValid(value)) {
            set_fs_full_blockage_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(128u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_frozen_windshield_0Type fs_frozen_windshield_0 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type_IsValid(value)) {
            set_fs_frozen_windshield_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(136u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_FailSafe.Fs_out_of_calib_0Type fs_out_of_calib_0 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type_IsValid(value)) {
            set_fs_out_of_calib_0(static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(144u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fs_out_of_focus_0 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_fs_out_of_focus_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fs_out_of_focus_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(170u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(178u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_FailSafe)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_FailSafe)
  return false;
#undef DO_
}

void Dt_Record_FailSafe::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_FailSafe)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fs_zero_byte = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fs_zero_byte(), output);
  }

  // optional int32 fs_protocol_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fs_protocol_version(), output);
  }

  // optional int32 fs_sync_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fs_sync_id(), output);
  }

  // optional int32 fs_cameras_number = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fs_cameras_number(), output);
  }

  // optional int32 reserved_1 = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reserved_1(), output);
  }

  // optional int32 fs_impacted_technologies = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fs_impacted_technologies(), output);
  }

  // optional int32 fs_camera_id_0 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fs_camera_id_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_rain_0Type fs_rain_0 = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->fs_rain_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_fog_0Type fs_fog_0 = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->fs_fog_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_splashes_0Type fs_splashes_0 = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->fs_splashes_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_self_glare_0Type fs_self_glare_0 = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->fs_self_glare_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_sun_ray_0Type fs_sun_ray_0 = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->fs_sun_ray_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_low_sun_0Type fs_low_sun_0 = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->fs_low_sun_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_blur_image_0Type fs_blur_image_0 = 14;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->fs_blur_image_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_partial_blockage_0Type fs_partial_blockage_0 = 15;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      15, this->fs_partial_blockage_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_full_blockage_0Type fs_full_blockage_0 = 16;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->fs_full_blockage_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_frozen_windshield_0Type fs_frozen_windshield_0 = 17;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->fs_frozen_windshield_0(), output);
  }

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_out_of_calib_0Type fs_out_of_calib_0 = 18;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->fs_out_of_calib_0(), output);
  }

  // optional int32 fs_out_of_focus_0 = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fs_out_of_focus_0(), output);
  }

  // optional int32 reserved_2 = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->reserved_2(), output);
  }

  // optional .atd.common.Header header = 21;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      21, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 22;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      22, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_FailSafe)
}

size_t Dt_Record_FailSafe::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_FailSafe)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 21;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 22;
    if (has_reservedmsg()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional int32 fs_zero_byte = 1;
    if (has_fs_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fs_zero_byte());
    }

    // optional int32 fs_protocol_version = 2;
    if (has_fs_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fs_protocol_version());
    }

    // optional int32 fs_sync_id = 3;
    if (has_fs_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fs_sync_id());
    }

    // optional int32 fs_cameras_number = 4;
    if (has_fs_cameras_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fs_cameras_number());
    }

    // optional int32 reserved_1 = 5;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional int32 fs_impacted_technologies = 6;
    if (has_fs_impacted_technologies()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fs_impacted_technologies());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 fs_camera_id_0 = 7;
    if (has_fs_camera_id_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fs_camera_id_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_rain_0Type fs_rain_0 = 8;
    if (has_fs_rain_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_rain_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_fog_0Type fs_fog_0 = 9;
    if (has_fs_fog_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_fog_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_splashes_0Type fs_splashes_0 = 10;
    if (has_fs_splashes_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_splashes_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_self_glare_0Type fs_self_glare_0 = 11;
    if (has_fs_self_glare_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_self_glare_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_sun_ray_0Type fs_sun_ray_0 = 12;
    if (has_fs_sun_ray_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_sun_ray_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_low_sun_0Type fs_low_sun_0 = 13;
    if (has_fs_low_sun_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_low_sun_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_blur_image_0Type fs_blur_image_0 = 14;
    if (has_fs_blur_image_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_blur_image_0());
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_partial_blockage_0Type fs_partial_blockage_0 = 15;
    if (has_fs_partial_blockage_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_partial_blockage_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_full_blockage_0Type fs_full_blockage_0 = 16;
    if (has_fs_full_blockage_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_full_blockage_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_frozen_windshield_0Type fs_frozen_windshield_0 = 17;
    if (has_fs_frozen_windshield_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_frozen_windshield_0());
    }

    // optional .atd.meprocess.Dt_Record_FailSafe.Fs_out_of_calib_0Type fs_out_of_calib_0 = 18;
    if (has_fs_out_of_calib_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fs_out_of_calib_0());
    }

    // optional int32 fs_out_of_focus_0 = 19;
    if (has_fs_out_of_focus_0()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fs_out_of_focus_0());
    }

    // optional int32 reserved_2 = 20;
    if (has_reserved_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_FailSafe::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_FailSafe*>(&from));
}

void Dt_Record_FailSafe::MergeFrom(const Dt_Record_FailSafe& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_FailSafe)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      fs_zero_byte_ = from.fs_zero_byte_;
    }
    if (cached_has_bits & 0x00000008u) {
      fs_protocol_version_ = from.fs_protocol_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      fs_sync_id_ = from.fs_sync_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      fs_cameras_number_ = from.fs_cameras_number_;
    }
    if (cached_has_bits & 0x00000040u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000080u) {
      fs_impacted_technologies_ = from.fs_impacted_technologies_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      fs_camera_id_0_ = from.fs_camera_id_0_;
    }
    if (cached_has_bits & 0x00000200u) {
      fs_rain_0_ = from.fs_rain_0_;
    }
    if (cached_has_bits & 0x00000400u) {
      fs_fog_0_ = from.fs_fog_0_;
    }
    if (cached_has_bits & 0x00000800u) {
      fs_splashes_0_ = from.fs_splashes_0_;
    }
    if (cached_has_bits & 0x00001000u) {
      fs_self_glare_0_ = from.fs_self_glare_0_;
    }
    if (cached_has_bits & 0x00002000u) {
      fs_sun_ray_0_ = from.fs_sun_ray_0_;
    }
    if (cached_has_bits & 0x00004000u) {
      fs_low_sun_0_ = from.fs_low_sun_0_;
    }
    if (cached_has_bits & 0x00008000u) {
      fs_blur_image_0_ = from.fs_blur_image_0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      fs_partial_blockage_0_ = from.fs_partial_blockage_0_;
    }
    if (cached_has_bits & 0x00020000u) {
      fs_full_blockage_0_ = from.fs_full_blockage_0_;
    }
    if (cached_has_bits & 0x00040000u) {
      fs_frozen_windshield_0_ = from.fs_frozen_windshield_0_;
    }
    if (cached_has_bits & 0x00080000u) {
      fs_out_of_calib_0_ = from.fs_out_of_calib_0_;
    }
    if (cached_has_bits & 0x00100000u) {
      fs_out_of_focus_0_ = from.fs_out_of_focus_0_;
    }
    if (cached_has_bits & 0x00200000u) {
      reserved_2_ = from.reserved_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dt_Record_FailSafe::CopyFrom(const Dt_Record_FailSafe& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_FailSafe)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_FailSafe::IsInitialized() const {
  return true;
}

void Dt_Record_FailSafe::Swap(Dt_Record_FailSafe* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_FailSafe::InternalSwap(Dt_Record_FailSafe* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(fs_zero_byte_, other->fs_zero_byte_);
  std::swap(fs_protocol_version_, other->fs_protocol_version_);
  std::swap(fs_sync_id_, other->fs_sync_id_);
  std::swap(fs_cameras_number_, other->fs_cameras_number_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(fs_impacted_technologies_, other->fs_impacted_technologies_);
  std::swap(fs_camera_id_0_, other->fs_camera_id_0_);
  std::swap(fs_rain_0_, other->fs_rain_0_);
  std::swap(fs_fog_0_, other->fs_fog_0_);
  std::swap(fs_splashes_0_, other->fs_splashes_0_);
  std::swap(fs_self_glare_0_, other->fs_self_glare_0_);
  std::swap(fs_sun_ray_0_, other->fs_sun_ray_0_);
  std::swap(fs_low_sun_0_, other->fs_low_sun_0_);
  std::swap(fs_blur_image_0_, other->fs_blur_image_0_);
  std::swap(fs_partial_blockage_0_, other->fs_partial_blockage_0_);
  std::swap(fs_full_blockage_0_, other->fs_full_blockage_0_);
  std::swap(fs_frozen_windshield_0_, other->fs_frozen_windshield_0_);
  std::swap(fs_out_of_calib_0_, other->fs_out_of_calib_0_);
  std::swap(fs_out_of_focus_0_, other->fs_out_of_focus_0_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_FailSafe::GetTypeName() const {
  return "atd.meprocess.Dt_Record_FailSafe";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_FailSafe

// optional int32 fs_zero_byte = 1;
bool Dt_Record_FailSafe::has_fs_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_FailSafe::clear_has_fs_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_FailSafe::clear_fs_zero_byte() {
  fs_zero_byte_ = 0;
  clear_has_fs_zero_byte();
}
::google::protobuf::int32 Dt_Record_FailSafe::fs_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_zero_byte)
  return fs_zero_byte_;
}
void Dt_Record_FailSafe::set_fs_zero_byte(::google::protobuf::int32 value) {
  set_has_fs_zero_byte();
  fs_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_zero_byte)
}

// optional int32 fs_protocol_version = 2;
bool Dt_Record_FailSafe::has_fs_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Record_FailSafe::clear_has_fs_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Record_FailSafe::clear_fs_protocol_version() {
  fs_protocol_version_ = 0;
  clear_has_fs_protocol_version();
}
::google::protobuf::int32 Dt_Record_FailSafe::fs_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_protocol_version)
  return fs_protocol_version_;
}
void Dt_Record_FailSafe::set_fs_protocol_version(::google::protobuf::int32 value) {
  set_has_fs_protocol_version();
  fs_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_protocol_version)
}

// optional int32 fs_sync_id = 3;
bool Dt_Record_FailSafe::has_fs_sync_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_sync_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Record_FailSafe::clear_has_fs_sync_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Record_FailSafe::clear_fs_sync_id() {
  fs_sync_id_ = 0;
  clear_has_fs_sync_id();
}
::google::protobuf::int32 Dt_Record_FailSafe::fs_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_sync_id)
  return fs_sync_id_;
}
void Dt_Record_FailSafe::set_fs_sync_id(::google::protobuf::int32 value) {
  set_has_fs_sync_id();
  fs_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_sync_id)
}

// optional int32 fs_cameras_number = 4;
bool Dt_Record_FailSafe::has_fs_cameras_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_cameras_number() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Record_FailSafe::clear_has_fs_cameras_number() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Record_FailSafe::clear_fs_cameras_number() {
  fs_cameras_number_ = 0;
  clear_has_fs_cameras_number();
}
::google::protobuf::int32 Dt_Record_FailSafe::fs_cameras_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_cameras_number)
  return fs_cameras_number_;
}
void Dt_Record_FailSafe::set_fs_cameras_number(::google::protobuf::int32 value) {
  set_has_fs_cameras_number();
  fs_cameras_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_cameras_number)
}

// optional int32 reserved_1 = 5;
bool Dt_Record_FailSafe::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Record_FailSafe::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Record_FailSafe::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Record_FailSafe::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 Dt_Record_FailSafe::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.reserved_1)
  return reserved_1_;
}
void Dt_Record_FailSafe::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.reserved_1)
}

// optional int32 fs_impacted_technologies = 6;
bool Dt_Record_FailSafe::has_fs_impacted_technologies() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_impacted_technologies() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Record_FailSafe::clear_has_fs_impacted_technologies() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Record_FailSafe::clear_fs_impacted_technologies() {
  fs_impacted_technologies_ = 0;
  clear_has_fs_impacted_technologies();
}
::google::protobuf::int32 Dt_Record_FailSafe::fs_impacted_technologies() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_impacted_technologies)
  return fs_impacted_technologies_;
}
void Dt_Record_FailSafe::set_fs_impacted_technologies(::google::protobuf::int32 value) {
  set_has_fs_impacted_technologies();
  fs_impacted_technologies_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_impacted_technologies)
}

// optional int32 fs_camera_id_0 = 7;
bool Dt_Record_FailSafe::has_fs_camera_id_0() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_camera_id_0() {
  _has_bits_[0] |= 0x00000100u;
}
void Dt_Record_FailSafe::clear_has_fs_camera_id_0() {
  _has_bits_[0] &= ~0x00000100u;
}
void Dt_Record_FailSafe::clear_fs_camera_id_0() {
  fs_camera_id_0_ = 0;
  clear_has_fs_camera_id_0();
}
::google::protobuf::int32 Dt_Record_FailSafe::fs_camera_id_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_camera_id_0)
  return fs_camera_id_0_;
}
void Dt_Record_FailSafe::set_fs_camera_id_0(::google::protobuf::int32 value) {
  set_has_fs_camera_id_0();
  fs_camera_id_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_camera_id_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_rain_0Type fs_rain_0 = 8;
bool Dt_Record_FailSafe::has_fs_rain_0() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_rain_0() {
  _has_bits_[0] |= 0x00000200u;
}
void Dt_Record_FailSafe::clear_has_fs_rain_0() {
  _has_bits_[0] &= ~0x00000200u;
}
void Dt_Record_FailSafe::clear_fs_rain_0() {
  fs_rain_0_ = 0;
  clear_has_fs_rain_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::fs_rain_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_rain_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type >(fs_rain_0_);
}
void Dt_Record_FailSafe::set_fs_rain_0(::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type_IsValid(value));
  set_has_fs_rain_0();
  fs_rain_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_rain_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_fog_0Type fs_fog_0 = 9;
bool Dt_Record_FailSafe::has_fs_fog_0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_fog_0() {
  _has_bits_[0] |= 0x00000400u;
}
void Dt_Record_FailSafe::clear_has_fs_fog_0() {
  _has_bits_[0] &= ~0x00000400u;
}
void Dt_Record_FailSafe::clear_fs_fog_0() {
  fs_fog_0_ = 0;
  clear_has_fs_fog_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::fs_fog_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_fog_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type >(fs_fog_0_);
}
void Dt_Record_FailSafe::set_fs_fog_0(::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type_IsValid(value));
  set_has_fs_fog_0();
  fs_fog_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_fog_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_splashes_0Type fs_splashes_0 = 10;
bool Dt_Record_FailSafe::has_fs_splashes_0() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_splashes_0() {
  _has_bits_[0] |= 0x00000800u;
}
void Dt_Record_FailSafe::clear_has_fs_splashes_0() {
  _has_bits_[0] &= ~0x00000800u;
}
void Dt_Record_FailSafe::clear_fs_splashes_0() {
  fs_splashes_0_ = 0;
  clear_has_fs_splashes_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::fs_splashes_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_splashes_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type >(fs_splashes_0_);
}
void Dt_Record_FailSafe::set_fs_splashes_0(::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type_IsValid(value));
  set_has_fs_splashes_0();
  fs_splashes_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_splashes_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_self_glare_0Type fs_self_glare_0 = 11;
bool Dt_Record_FailSafe::has_fs_self_glare_0() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_self_glare_0() {
  _has_bits_[0] |= 0x00001000u;
}
void Dt_Record_FailSafe::clear_has_fs_self_glare_0() {
  _has_bits_[0] &= ~0x00001000u;
}
void Dt_Record_FailSafe::clear_fs_self_glare_0() {
  fs_self_glare_0_ = 0;
  clear_has_fs_self_glare_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::fs_self_glare_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_self_glare_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type >(fs_self_glare_0_);
}
void Dt_Record_FailSafe::set_fs_self_glare_0(::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type_IsValid(value));
  set_has_fs_self_glare_0();
  fs_self_glare_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_self_glare_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_sun_ray_0Type fs_sun_ray_0 = 12;
bool Dt_Record_FailSafe::has_fs_sun_ray_0() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_sun_ray_0() {
  _has_bits_[0] |= 0x00002000u;
}
void Dt_Record_FailSafe::clear_has_fs_sun_ray_0() {
  _has_bits_[0] &= ~0x00002000u;
}
void Dt_Record_FailSafe::clear_fs_sun_ray_0() {
  fs_sun_ray_0_ = 0;
  clear_has_fs_sun_ray_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::fs_sun_ray_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_sun_ray_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type >(fs_sun_ray_0_);
}
void Dt_Record_FailSafe::set_fs_sun_ray_0(::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type_IsValid(value));
  set_has_fs_sun_ray_0();
  fs_sun_ray_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_sun_ray_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_low_sun_0Type fs_low_sun_0 = 13;
bool Dt_Record_FailSafe::has_fs_low_sun_0() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_low_sun_0() {
  _has_bits_[0] |= 0x00004000u;
}
void Dt_Record_FailSafe::clear_has_fs_low_sun_0() {
  _has_bits_[0] &= ~0x00004000u;
}
void Dt_Record_FailSafe::clear_fs_low_sun_0() {
  fs_low_sun_0_ = 0;
  clear_has_fs_low_sun_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::fs_low_sun_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_low_sun_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type >(fs_low_sun_0_);
}
void Dt_Record_FailSafe::set_fs_low_sun_0(::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type_IsValid(value));
  set_has_fs_low_sun_0();
  fs_low_sun_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_low_sun_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_blur_image_0Type fs_blur_image_0 = 14;
bool Dt_Record_FailSafe::has_fs_blur_image_0() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_blur_image_0() {
  _has_bits_[0] |= 0x00008000u;
}
void Dt_Record_FailSafe::clear_has_fs_blur_image_0() {
  _has_bits_[0] &= ~0x00008000u;
}
void Dt_Record_FailSafe::clear_fs_blur_image_0() {
  fs_blur_image_0_ = 0;
  clear_has_fs_blur_image_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::fs_blur_image_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_blur_image_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type >(fs_blur_image_0_);
}
void Dt_Record_FailSafe::set_fs_blur_image_0(::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type_IsValid(value));
  set_has_fs_blur_image_0();
  fs_blur_image_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_blur_image_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_partial_blockage_0Type fs_partial_blockage_0 = 15;
bool Dt_Record_FailSafe::has_fs_partial_blockage_0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_partial_blockage_0() {
  _has_bits_[0] |= 0x00010000u;
}
void Dt_Record_FailSafe::clear_has_fs_partial_blockage_0() {
  _has_bits_[0] &= ~0x00010000u;
}
void Dt_Record_FailSafe::clear_fs_partial_blockage_0() {
  fs_partial_blockage_0_ = 0;
  clear_has_fs_partial_blockage_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::fs_partial_blockage_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_partial_blockage_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type >(fs_partial_blockage_0_);
}
void Dt_Record_FailSafe::set_fs_partial_blockage_0(::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type_IsValid(value));
  set_has_fs_partial_blockage_0();
  fs_partial_blockage_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_partial_blockage_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_full_blockage_0Type fs_full_blockage_0 = 16;
bool Dt_Record_FailSafe::has_fs_full_blockage_0() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_full_blockage_0() {
  _has_bits_[0] |= 0x00020000u;
}
void Dt_Record_FailSafe::clear_has_fs_full_blockage_0() {
  _has_bits_[0] &= ~0x00020000u;
}
void Dt_Record_FailSafe::clear_fs_full_blockage_0() {
  fs_full_blockage_0_ = 0;
  clear_has_fs_full_blockage_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::fs_full_blockage_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_full_blockage_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type >(fs_full_blockage_0_);
}
void Dt_Record_FailSafe::set_fs_full_blockage_0(::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type_IsValid(value));
  set_has_fs_full_blockage_0();
  fs_full_blockage_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_full_blockage_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_frozen_windshield_0Type fs_frozen_windshield_0 = 17;
bool Dt_Record_FailSafe::has_fs_frozen_windshield_0() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_frozen_windshield_0() {
  _has_bits_[0] |= 0x00040000u;
}
void Dt_Record_FailSafe::clear_has_fs_frozen_windshield_0() {
  _has_bits_[0] &= ~0x00040000u;
}
void Dt_Record_FailSafe::clear_fs_frozen_windshield_0() {
  fs_frozen_windshield_0_ = 0;
  clear_has_fs_frozen_windshield_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::fs_frozen_windshield_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_frozen_windshield_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type >(fs_frozen_windshield_0_);
}
void Dt_Record_FailSafe::set_fs_frozen_windshield_0(::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type_IsValid(value));
  set_has_fs_frozen_windshield_0();
  fs_frozen_windshield_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_frozen_windshield_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_out_of_calib_0Type fs_out_of_calib_0 = 18;
bool Dt_Record_FailSafe::has_fs_out_of_calib_0() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_out_of_calib_0() {
  _has_bits_[0] |= 0x00080000u;
}
void Dt_Record_FailSafe::clear_has_fs_out_of_calib_0() {
  _has_bits_[0] &= ~0x00080000u;
}
void Dt_Record_FailSafe::clear_fs_out_of_calib_0() {
  fs_out_of_calib_0_ = 0;
  clear_has_fs_out_of_calib_0();
}
::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::fs_out_of_calib_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_out_of_calib_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type >(fs_out_of_calib_0_);
}
void Dt_Record_FailSafe::set_fs_out_of_calib_0(::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type_IsValid(value));
  set_has_fs_out_of_calib_0();
  fs_out_of_calib_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_out_of_calib_0)
}

// optional int32 fs_out_of_focus_0 = 19;
bool Dt_Record_FailSafe::has_fs_out_of_focus_0() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Dt_Record_FailSafe::set_has_fs_out_of_focus_0() {
  _has_bits_[0] |= 0x00100000u;
}
void Dt_Record_FailSafe::clear_has_fs_out_of_focus_0() {
  _has_bits_[0] &= ~0x00100000u;
}
void Dt_Record_FailSafe::clear_fs_out_of_focus_0() {
  fs_out_of_focus_0_ = 0;
  clear_has_fs_out_of_focus_0();
}
::google::protobuf::int32 Dt_Record_FailSafe::fs_out_of_focus_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_out_of_focus_0)
  return fs_out_of_focus_0_;
}
void Dt_Record_FailSafe::set_fs_out_of_focus_0(::google::protobuf::int32 value) {
  set_has_fs_out_of_focus_0();
  fs_out_of_focus_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_out_of_focus_0)
}

// optional int32 reserved_2 = 20;
bool Dt_Record_FailSafe::has_reserved_2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Dt_Record_FailSafe::set_has_reserved_2() {
  _has_bits_[0] |= 0x00200000u;
}
void Dt_Record_FailSafe::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00200000u;
}
void Dt_Record_FailSafe::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 Dt_Record_FailSafe::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.reserved_2)
  return reserved_2_;
}
void Dt_Record_FailSafe::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.reserved_2)
}

// optional .atd.common.Header header = 21;
bool Dt_Record_FailSafe::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_FailSafe::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_FailSafe::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_FailSafe::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_FailSafe::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_FailSafe::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FailSafe.header)
  return header_;
}
::atd::common::Header* Dt_Record_FailSafe::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FailSafe.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_FailSafe::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FailSafe.header)
}

// optional .atd.common.Reserved reservedmsg = 22;
bool Dt_Record_FailSafe::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_FailSafe::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_FailSafe::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_FailSafe::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_FailSafe::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_FailSafe::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_FailSafe::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_FailSafe::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FSPCommon::kFspZeroByteFieldNumber;
const int FSPCommon::kFspProtocolVersionFieldNumber;
const int FSPCommon::kFspSyncIdFieldNumber;
const int FSPCommon::kFspNumOfObstaclesFieldNumber;
const int FSPCommon::kReserved1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FSPCommon::FSPCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.FSPCommon)
}
FSPCommon::FSPCommon(const FSPCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fsp_zero_byte_, &from.fsp_zero_byte_,
    reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&fsp_zero_byte_) + sizeof(reserved_1_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.FSPCommon)
}

void FSPCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fsp_zero_byte_, 0, reinterpret_cast<char*>(&reserved_1_) -
    reinterpret_cast<char*>(&fsp_zero_byte_) + sizeof(reserved_1_));
}

FSPCommon::~FSPCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.FSPCommon)
  SharedDtor();
}

void FSPCommon::SharedDtor() {
}

void FSPCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FSPCommon& FSPCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

FSPCommon* FSPCommon::New(::google::protobuf::Arena* arena) const {
  FSPCommon* n = new FSPCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FSPCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.FSPCommon)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&fsp_zero_byte_, 0, reinterpret_cast<char*>(&reserved_1_) -
      reinterpret_cast<char*>(&fsp_zero_byte_) + sizeof(reserved_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FSPCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.FSPCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fsp_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fsp_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fsp_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fsp_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fsp_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fsp_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fsp_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_fsp_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fsp_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fsp_num_of_obstacles = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_fsp_num_of_obstacles();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fsp_num_of_obstacles_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.FSPCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.FSPCommon)
  return false;
#undef DO_
}

void FSPCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.FSPCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fsp_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fsp_zero_byte(), output);
  }

  // optional int32 fsp_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fsp_protocol_version(), output);
  }

  // optional int32 fsp_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fsp_sync_id(), output);
  }

  // optional int32 fsp_num_of_obstacles = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fsp_num_of_obstacles(), output);
  }

  // optional bool reserved_1 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->reserved_1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.FSPCommon)
}

size_t FSPCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.FSPCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 fsp_zero_byte = 1;
    if (has_fsp_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fsp_zero_byte());
    }

    // optional int32 fsp_protocol_version = 2;
    if (has_fsp_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fsp_protocol_version());
    }

    // optional int32 fsp_sync_id = 3;
    if (has_fsp_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fsp_sync_id());
    }

    // optional int32 fsp_num_of_obstacles = 4;
    if (has_fsp_num_of_obstacles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fsp_num_of_obstacles());
    }

    // optional bool reserved_1 = 5;
    if (has_reserved_1()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSPCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FSPCommon*>(&from));
}

void FSPCommon::MergeFrom(const FSPCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.FSPCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      fsp_zero_byte_ = from.fsp_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      fsp_protocol_version_ = from.fsp_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      fsp_sync_id_ = from.fsp_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      fsp_num_of_obstacles_ = from.fsp_num_of_obstacles_;
    }
    if (cached_has_bits & 0x00000010u) {
      reserved_1_ = from.reserved_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FSPCommon::CopyFrom(const FSPCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.FSPCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSPCommon::IsInitialized() const {
  return true;
}

void FSPCommon::Swap(FSPCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FSPCommon::InternalSwap(FSPCommon* other) {
  std::swap(fsp_zero_byte_, other->fsp_zero_byte_);
  std::swap(fsp_protocol_version_, other->fsp_protocol_version_);
  std::swap(fsp_sync_id_, other->fsp_sync_id_);
  std::swap(fsp_num_of_obstacles_, other->fsp_num_of_obstacles_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FSPCommon::GetTypeName() const {
  return "atd.meprocess.FSPCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FSPCommon

// optional int32 fsp_zero_byte = 1;
bool FSPCommon::has_fsp_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FSPCommon::set_has_fsp_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void FSPCommon::clear_has_fsp_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void FSPCommon::clear_fsp_zero_byte() {
  fsp_zero_byte_ = 0;
  clear_has_fsp_zero_byte();
}
::google::protobuf::int32 FSPCommon::fsp_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_zero_byte)
  return fsp_zero_byte_;
}
void FSPCommon::set_fsp_zero_byte(::google::protobuf::int32 value) {
  set_has_fsp_zero_byte();
  fsp_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_zero_byte)
}

// optional int32 fsp_protocol_version = 2;
bool FSPCommon::has_fsp_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FSPCommon::set_has_fsp_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void FSPCommon::clear_has_fsp_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void FSPCommon::clear_fsp_protocol_version() {
  fsp_protocol_version_ = 0;
  clear_has_fsp_protocol_version();
}
::google::protobuf::int32 FSPCommon::fsp_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_protocol_version)
  return fsp_protocol_version_;
}
void FSPCommon::set_fsp_protocol_version(::google::protobuf::int32 value) {
  set_has_fsp_protocol_version();
  fsp_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_protocol_version)
}

// optional int32 fsp_sync_id = 3;
bool FSPCommon::has_fsp_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FSPCommon::set_has_fsp_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void FSPCommon::clear_has_fsp_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void FSPCommon::clear_fsp_sync_id() {
  fsp_sync_id_ = 0;
  clear_has_fsp_sync_id();
}
::google::protobuf::int32 FSPCommon::fsp_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_sync_id)
  return fsp_sync_id_;
}
void FSPCommon::set_fsp_sync_id(::google::protobuf::int32 value) {
  set_has_fsp_sync_id();
  fsp_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_sync_id)
}

// optional int32 fsp_num_of_obstacles = 4;
bool FSPCommon::has_fsp_num_of_obstacles() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FSPCommon::set_has_fsp_num_of_obstacles() {
  _has_bits_[0] |= 0x00000008u;
}
void FSPCommon::clear_has_fsp_num_of_obstacles() {
  _has_bits_[0] &= ~0x00000008u;
}
void FSPCommon::clear_fsp_num_of_obstacles() {
  fsp_num_of_obstacles_ = 0;
  clear_has_fsp_num_of_obstacles();
}
::google::protobuf::int32 FSPCommon::fsp_num_of_obstacles() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_num_of_obstacles)
  return fsp_num_of_obstacles_;
}
void FSPCommon::set_fsp_num_of_obstacles(::google::protobuf::int32 value) {
  set_has_fsp_num_of_obstacles();
  fsp_num_of_obstacles_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_num_of_obstacles)
}

// optional bool reserved_1 = 5;
bool FSPCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FSPCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000010u;
}
void FSPCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000010u;
}
void FSPCommon::clear_reserved_1() {
  reserved_1_ = false;
  clear_has_reserved_1();
}
bool FSPCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.reserved_1)
  return reserved_1_;
}
void FSPCommon::set_reserved_1(bool value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.reserved_1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_MeFreeSpace::kHeaderFieldNumber;
const int Dt_Record_MeFreeSpace::kReservedmsgFieldNumber;
const int Dt_Record_MeFreeSpace::kStfspcommonFieldNumber;
const int Dt_Record_MeFreeSpace::kDtArray120FspointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_MeFreeSpace::Dt_Record_MeFreeSpace()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_MeFreeSpace)
}
Dt_Record_MeFreeSpace::Dt_Record_MeFreeSpace(const Dt_Record_MeFreeSpace& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_120_fspoint_(from.dt_array_120_fspoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stfspcommon()) {
    stfspcommon_ = new ::atd::meprocess::FSPCommon(*from.stfspcommon_);
  } else {
    stfspcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_MeFreeSpace)
}

void Dt_Record_MeFreeSpace::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stfspcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stfspcommon_));
}

Dt_Record_MeFreeSpace::~Dt_Record_MeFreeSpace() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_MeFreeSpace)
  SharedDtor();
}

void Dt_Record_MeFreeSpace::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stfspcommon_;
  }
}

void Dt_Record_MeFreeSpace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_MeFreeSpace& Dt_Record_MeFreeSpace::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_MeFreeSpace* Dt_Record_MeFreeSpace::New(::google::protobuf::Arena* arena) const {
  Dt_Record_MeFreeSpace* n = new Dt_Record_MeFreeSpace;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_MeFreeSpace::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_MeFreeSpace)
  dt_array_120_fspoint_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stfspcommon()) {
      GOOGLE_DCHECK(stfspcommon_ != NULL);
      stfspcommon_->::atd::meprocess::FSPCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_MeFreeSpace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_MeFreeSpace)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.FSPCommon stfspcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stfspcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.FSPoint dt_array_120_fspoint = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_120_fspoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_MeFreeSpace)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_MeFreeSpace)
  return false;
#undef DO_
}

void Dt_Record_MeFreeSpace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_MeFreeSpace)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.FSPCommon stfspcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stfspcommon_, output);
  }

  // repeated .atd.meprocess.FSPoint dt_array_120_fspoint = 4;
  for (unsigned int i = 0, n = this->dt_array_120_fspoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_120_fspoint(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_MeFreeSpace)
}

size_t Dt_Record_MeFreeSpace::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_MeFreeSpace)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.FSPoint dt_array_120_fspoint = 4;
  {
    unsigned int count = this->dt_array_120_fspoint_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_120_fspoint(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.FSPCommon stfspcommon = 3;
    if (has_stfspcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stfspcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_MeFreeSpace::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_MeFreeSpace*>(&from));
}

void Dt_Record_MeFreeSpace::MergeFrom(const Dt_Record_MeFreeSpace& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_MeFreeSpace)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_120_fspoint_.MergeFrom(from.dt_array_120_fspoint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stfspcommon()->::atd::meprocess::FSPCommon::MergeFrom(from.stfspcommon());
    }
  }
}

void Dt_Record_MeFreeSpace::CopyFrom(const Dt_Record_MeFreeSpace& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_MeFreeSpace)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_MeFreeSpace::IsInitialized() const {
  return true;
}

void Dt_Record_MeFreeSpace::Swap(Dt_Record_MeFreeSpace* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_MeFreeSpace::InternalSwap(Dt_Record_MeFreeSpace* other) {
  dt_array_120_fspoint_.InternalSwap(&other->dt_array_120_fspoint_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stfspcommon_, other->stfspcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_MeFreeSpace::GetTypeName() const {
  return "atd.meprocess.Dt_Record_MeFreeSpace";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_MeFreeSpace

// optional .atd.common.Header header = 1;
bool Dt_Record_MeFreeSpace::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_MeFreeSpace::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_MeFreeSpace::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_MeFreeSpace::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_MeFreeSpace::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_MeFreeSpace::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.header)
  return header_;
}
::atd::common::Header* Dt_Record_MeFreeSpace::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeFreeSpace.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_MeFreeSpace::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeFreeSpace.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_MeFreeSpace::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_MeFreeSpace::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_MeFreeSpace::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_MeFreeSpace::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_MeFreeSpace::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_MeFreeSpace::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_MeFreeSpace::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_MeFreeSpace::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
}

// optional .atd.meprocess.FSPCommon stfspcommon = 3;
bool Dt_Record_MeFreeSpace::has_stfspcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_MeFreeSpace::set_has_stfspcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_MeFreeSpace::clear_has_stfspcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_MeFreeSpace::clear_stfspcommon() {
  if (stfspcommon_ != NULL) stfspcommon_->::atd::meprocess::FSPCommon::Clear();
  clear_has_stfspcommon();
}
const ::atd::meprocess::FSPCommon& Dt_Record_MeFreeSpace::stfspcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
  return stfspcommon_ != NULL ? *stfspcommon_
                         : *::atd::meprocess::FSPCommon::internal_default_instance();
}
::atd::meprocess::FSPCommon* Dt_Record_MeFreeSpace::mutable_stfspcommon() {
  set_has_stfspcommon();
  if (stfspcommon_ == NULL) {
    stfspcommon_ = new ::atd::meprocess::FSPCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
  return stfspcommon_;
}
::atd::meprocess::FSPCommon* Dt_Record_MeFreeSpace::release_stfspcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
  clear_has_stfspcommon();
  ::atd::meprocess::FSPCommon* temp = stfspcommon_;
  stfspcommon_ = NULL;
  return temp;
}
void Dt_Record_MeFreeSpace::set_allocated_stfspcommon(::atd::meprocess::FSPCommon* stfspcommon) {
  delete stfspcommon_;
  stfspcommon_ = stfspcommon;
  if (stfspcommon) {
    set_has_stfspcommon();
  } else {
    clear_has_stfspcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
}

// repeated .atd.meprocess.FSPoint dt_array_120_fspoint = 4;
int Dt_Record_MeFreeSpace::dt_array_120_fspoint_size() const {
  return dt_array_120_fspoint_.size();
}
void Dt_Record_MeFreeSpace::clear_dt_array_120_fspoint() {
  dt_array_120_fspoint_.Clear();
}
const ::atd::meprocess::FSPoint& Dt_Record_MeFreeSpace::dt_array_120_fspoint(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_.Get(index);
}
::atd::meprocess::FSPoint* Dt_Record_MeFreeSpace::mutable_dt_array_120_fspoint(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_.Mutable(index);
}
::atd::meprocess::FSPoint* Dt_Record_MeFreeSpace::add_dt_array_120_fspoint() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::FSPoint >*
Dt_Record_MeFreeSpace::mutable_dt_array_120_fspoint() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return &dt_array_120_fspoint_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FSPoint >&
Dt_Record_MeFreeSpace::dt_array_120_fspoint() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FSPoint::kFspIdFieldNumber;
const int FSPoint::kFspIsValidFieldNumber;
const int FSPoint::kFspExistenceProbFieldNumber;
const int FSPoint::kFspEmptinessProbFieldNumber;
const int FSPoint::kFspMobilityStatusFieldNumber;
const int FSPoint::kFspClassificationTypeFieldNumber;
const int FSPoint::kFspRangeStdFieldNumber;
const int FSPoint::kFspRangeFieldNumber;
const int FSPoint::kFspHeightFieldNumber;
const int FSPoint::kFspHeightStdFieldNumber;
const int FSPoint::kReserved2FieldNumber;
const int FSPoint::kFspAzimuthAngleFieldNumber;
const int FSPoint::kFspBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FSPoint::FSPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.FSPoint)
}
FSPoint::FSPoint(const FSPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&fsp_id_, &from.fsp_id_,
    reinterpret_cast<char*>(&fsp_buffer_) -
    reinterpret_cast<char*>(&fsp_id_) + sizeof(fsp_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.FSPoint)
}

void FSPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&fsp_id_, 0, reinterpret_cast<char*>(&fsp_buffer_) -
    reinterpret_cast<char*>(&fsp_id_) + sizeof(fsp_buffer_));
}

FSPoint::~FSPoint() {
  // @@protoc_insertion_point(destructor:atd.meprocess.FSPoint)
  SharedDtor();
}

void FSPoint::SharedDtor() {
}

void FSPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FSPoint& FSPoint::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

FSPoint* FSPoint::New(::google::protobuf::Arena* arena) const {
  FSPoint* n = new FSPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FSPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.FSPoint)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&fsp_id_, 0, reinterpret_cast<char*>(&fsp_range_) -
      reinterpret_cast<char*>(&fsp_id_) + sizeof(fsp_range_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&fsp_height_, 0, reinterpret_cast<char*>(&fsp_buffer_) -
      reinterpret_cast<char*>(&fsp_height_) + sizeof(fsp_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FSPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.FSPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 fsp_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_fsp_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fsp_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool fsp_is_valid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_fsp_is_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fsp_is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fsp_existence_prob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_fsp_existence_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsp_existence_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fsp_emptiness_prob = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_fsp_emptiness_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsp_emptiness_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.FSPoint.Fsp_mobility_statusType fsp_mobility_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::FSPoint_Fsp_mobility_statusType_IsValid(value)) {
            set_fsp_mobility_status(static_cast< ::atd::meprocess::FSPoint_Fsp_mobility_statusType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.FSPoint.Fsp_classification_typeType fsp_classification_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::FSPoint_Fsp_classification_typeType_IsValid(value)) {
            set_fsp_classification_type(static_cast< ::atd::meprocess::FSPoint_Fsp_classification_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fsp_range_std = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_fsp_range_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsp_range_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fsp_range = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_fsp_range();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsp_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fsp_height = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_fsp_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsp_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fsp_height_std = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_fsp_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsp_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fsp_azimuth_angle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_fsp_azimuth_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsp_azimuth_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fsp_buffer = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_fsp_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fsp_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.FSPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.FSPoint)
  return false;
#undef DO_
}

void FSPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.FSPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 fsp_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fsp_id(), output);
  }

  // optional bool fsp_is_valid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->fsp_is_valid(), output);
  }

  // optional float fsp_existence_prob = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fsp_existence_prob(), output);
  }

  // optional float fsp_emptiness_prob = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fsp_emptiness_prob(), output);
  }

  // optional .atd.meprocess.FSPoint.Fsp_mobility_statusType fsp_mobility_status = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->fsp_mobility_status(), output);
  }

  // optional .atd.meprocess.FSPoint.Fsp_classification_typeType fsp_classification_type = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->fsp_classification_type(), output);
  }

  // optional float fsp_range_std = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->fsp_range_std(), output);
  }

  // optional float fsp_range = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fsp_range(), output);
  }

  // optional float fsp_height = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->fsp_height(), output);
  }

  // optional float fsp_height_std = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->fsp_height_std(), output);
  }

  // optional int32 reserved_2 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved_2(), output);
  }

  // optional float fsp_azimuth_angle = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->fsp_azimuth_angle(), output);
  }

  // optional int32 fsp_buffer = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fsp_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.FSPoint)
}

size_t FSPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.FSPoint)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 fsp_id = 1;
    if (has_fsp_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fsp_id());
    }

    // optional bool fsp_is_valid = 2;
    if (has_fsp_is_valid()) {
      total_size += 1 + 1;
    }

    // optional float fsp_existence_prob = 3;
    if (has_fsp_existence_prob()) {
      total_size += 1 + 4;
    }

    // optional float fsp_emptiness_prob = 4;
    if (has_fsp_emptiness_prob()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.FSPoint.Fsp_mobility_statusType fsp_mobility_status = 5;
    if (has_fsp_mobility_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fsp_mobility_status());
    }

    // optional .atd.meprocess.FSPoint.Fsp_classification_typeType fsp_classification_type = 6;
    if (has_fsp_classification_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fsp_classification_type());
    }

    // optional float fsp_range_std = 7;
    if (has_fsp_range_std()) {
      total_size += 1 + 4;
    }

    // optional float fsp_range = 8;
    if (has_fsp_range()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional float fsp_height = 9;
    if (has_fsp_height()) {
      total_size += 1 + 4;
    }

    // optional float fsp_height_std = 10;
    if (has_fsp_height_std()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_2 = 11;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional float fsp_azimuth_angle = 12;
    if (has_fsp_azimuth_angle()) {
      total_size += 1 + 4;
    }

    // optional int32 fsp_buffer = 13;
    if (has_fsp_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fsp_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FSPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FSPoint*>(&from));
}

void FSPoint::MergeFrom(const FSPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.FSPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      fsp_id_ = from.fsp_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      fsp_is_valid_ = from.fsp_is_valid_;
    }
    if (cached_has_bits & 0x00000004u) {
      fsp_existence_prob_ = from.fsp_existence_prob_;
    }
    if (cached_has_bits & 0x00000008u) {
      fsp_emptiness_prob_ = from.fsp_emptiness_prob_;
    }
    if (cached_has_bits & 0x00000010u) {
      fsp_mobility_status_ = from.fsp_mobility_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      fsp_classification_type_ = from.fsp_classification_type_;
    }
    if (cached_has_bits & 0x00000040u) {
      fsp_range_std_ = from.fsp_range_std_;
    }
    if (cached_has_bits & 0x00000080u) {
      fsp_range_ = from.fsp_range_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      fsp_height_ = from.fsp_height_;
    }
    if (cached_has_bits & 0x00000200u) {
      fsp_height_std_ = from.fsp_height_std_;
    }
    if (cached_has_bits & 0x00000400u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00000800u) {
      fsp_azimuth_angle_ = from.fsp_azimuth_angle_;
    }
    if (cached_has_bits & 0x00001000u) {
      fsp_buffer_ = from.fsp_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FSPoint::CopyFrom(const FSPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.FSPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FSPoint::IsInitialized() const {
  return true;
}

void FSPoint::Swap(FSPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FSPoint::InternalSwap(FSPoint* other) {
  std::swap(fsp_id_, other->fsp_id_);
  std::swap(fsp_is_valid_, other->fsp_is_valid_);
  std::swap(fsp_existence_prob_, other->fsp_existence_prob_);
  std::swap(fsp_emptiness_prob_, other->fsp_emptiness_prob_);
  std::swap(fsp_mobility_status_, other->fsp_mobility_status_);
  std::swap(fsp_classification_type_, other->fsp_classification_type_);
  std::swap(fsp_range_std_, other->fsp_range_std_);
  std::swap(fsp_range_, other->fsp_range_);
  std::swap(fsp_height_, other->fsp_height_);
  std::swap(fsp_height_std_, other->fsp_height_std_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(fsp_azimuth_angle_, other->fsp_azimuth_angle_);
  std::swap(fsp_buffer_, other->fsp_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FSPoint::GetTypeName() const {
  return "atd.meprocess.FSPoint";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FSPoint

// optional int32 fsp_id = 1;
bool FSPoint::has_fsp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FSPoint::set_has_fsp_id() {
  _has_bits_[0] |= 0x00000001u;
}
void FSPoint::clear_has_fsp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void FSPoint::clear_fsp_id() {
  fsp_id_ = 0;
  clear_has_fsp_id();
}
::google::protobuf::int32 FSPoint::fsp_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_id)
  return fsp_id_;
}
void FSPoint::set_fsp_id(::google::protobuf::int32 value) {
  set_has_fsp_id();
  fsp_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_id)
}

// optional bool fsp_is_valid = 2;
bool FSPoint::has_fsp_is_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FSPoint::set_has_fsp_is_valid() {
  _has_bits_[0] |= 0x00000002u;
}
void FSPoint::clear_has_fsp_is_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
void FSPoint::clear_fsp_is_valid() {
  fsp_is_valid_ = false;
  clear_has_fsp_is_valid();
}
bool FSPoint::fsp_is_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_is_valid)
  return fsp_is_valid_;
}
void FSPoint::set_fsp_is_valid(bool value) {
  set_has_fsp_is_valid();
  fsp_is_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_is_valid)
}

// optional float fsp_existence_prob = 3;
bool FSPoint::has_fsp_existence_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FSPoint::set_has_fsp_existence_prob() {
  _has_bits_[0] |= 0x00000004u;
}
void FSPoint::clear_has_fsp_existence_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
void FSPoint::clear_fsp_existence_prob() {
  fsp_existence_prob_ = 0;
  clear_has_fsp_existence_prob();
}
float FSPoint::fsp_existence_prob() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_existence_prob)
  return fsp_existence_prob_;
}
void FSPoint::set_fsp_existence_prob(float value) {
  set_has_fsp_existence_prob();
  fsp_existence_prob_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_existence_prob)
}

// optional float fsp_emptiness_prob = 4;
bool FSPoint::has_fsp_emptiness_prob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FSPoint::set_has_fsp_emptiness_prob() {
  _has_bits_[0] |= 0x00000008u;
}
void FSPoint::clear_has_fsp_emptiness_prob() {
  _has_bits_[0] &= ~0x00000008u;
}
void FSPoint::clear_fsp_emptiness_prob() {
  fsp_emptiness_prob_ = 0;
  clear_has_fsp_emptiness_prob();
}
float FSPoint::fsp_emptiness_prob() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_emptiness_prob)
  return fsp_emptiness_prob_;
}
void FSPoint::set_fsp_emptiness_prob(float value) {
  set_has_fsp_emptiness_prob();
  fsp_emptiness_prob_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_emptiness_prob)
}

// optional .atd.meprocess.FSPoint.Fsp_mobility_statusType fsp_mobility_status = 5;
bool FSPoint::has_fsp_mobility_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void FSPoint::set_has_fsp_mobility_status() {
  _has_bits_[0] |= 0x00000010u;
}
void FSPoint::clear_has_fsp_mobility_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void FSPoint::clear_fsp_mobility_status() {
  fsp_mobility_status_ = 0;
  clear_has_fsp_mobility_status();
}
::atd::meprocess::FSPoint_Fsp_mobility_statusType FSPoint::fsp_mobility_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_mobility_status)
  return static_cast< ::atd::meprocess::FSPoint_Fsp_mobility_statusType >(fsp_mobility_status_);
}
void FSPoint::set_fsp_mobility_status(::atd::meprocess::FSPoint_Fsp_mobility_statusType value) {
  assert(::atd::meprocess::FSPoint_Fsp_mobility_statusType_IsValid(value));
  set_has_fsp_mobility_status();
  fsp_mobility_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_mobility_status)
}

// optional .atd.meprocess.FSPoint.Fsp_classification_typeType fsp_classification_type = 6;
bool FSPoint::has_fsp_classification_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void FSPoint::set_has_fsp_classification_type() {
  _has_bits_[0] |= 0x00000020u;
}
void FSPoint::clear_has_fsp_classification_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void FSPoint::clear_fsp_classification_type() {
  fsp_classification_type_ = 0;
  clear_has_fsp_classification_type();
}
::atd::meprocess::FSPoint_Fsp_classification_typeType FSPoint::fsp_classification_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_classification_type)
  return static_cast< ::atd::meprocess::FSPoint_Fsp_classification_typeType >(fsp_classification_type_);
}
void FSPoint::set_fsp_classification_type(::atd::meprocess::FSPoint_Fsp_classification_typeType value) {
  assert(::atd::meprocess::FSPoint_Fsp_classification_typeType_IsValid(value));
  set_has_fsp_classification_type();
  fsp_classification_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_classification_type)
}

// optional float fsp_range_std = 7;
bool FSPoint::has_fsp_range_std() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void FSPoint::set_has_fsp_range_std() {
  _has_bits_[0] |= 0x00000040u;
}
void FSPoint::clear_has_fsp_range_std() {
  _has_bits_[0] &= ~0x00000040u;
}
void FSPoint::clear_fsp_range_std() {
  fsp_range_std_ = 0;
  clear_has_fsp_range_std();
}
float FSPoint::fsp_range_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_range_std)
  return fsp_range_std_;
}
void FSPoint::set_fsp_range_std(float value) {
  set_has_fsp_range_std();
  fsp_range_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_range_std)
}

// optional float fsp_range = 8;
bool FSPoint::has_fsp_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void FSPoint::set_has_fsp_range() {
  _has_bits_[0] |= 0x00000080u;
}
void FSPoint::clear_has_fsp_range() {
  _has_bits_[0] &= ~0x00000080u;
}
void FSPoint::clear_fsp_range() {
  fsp_range_ = 0;
  clear_has_fsp_range();
}
float FSPoint::fsp_range() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_range)
  return fsp_range_;
}
void FSPoint::set_fsp_range(float value) {
  set_has_fsp_range();
  fsp_range_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_range)
}

// optional float fsp_height = 9;
bool FSPoint::has_fsp_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void FSPoint::set_has_fsp_height() {
  _has_bits_[0] |= 0x00000100u;
}
void FSPoint::clear_has_fsp_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void FSPoint::clear_fsp_height() {
  fsp_height_ = 0;
  clear_has_fsp_height();
}
float FSPoint::fsp_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_height)
  return fsp_height_;
}
void FSPoint::set_fsp_height(float value) {
  set_has_fsp_height();
  fsp_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_height)
}

// optional float fsp_height_std = 10;
bool FSPoint::has_fsp_height_std() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void FSPoint::set_has_fsp_height_std() {
  _has_bits_[0] |= 0x00000200u;
}
void FSPoint::clear_has_fsp_height_std() {
  _has_bits_[0] &= ~0x00000200u;
}
void FSPoint::clear_fsp_height_std() {
  fsp_height_std_ = 0;
  clear_has_fsp_height_std();
}
float FSPoint::fsp_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_height_std)
  return fsp_height_std_;
}
void FSPoint::set_fsp_height_std(float value) {
  set_has_fsp_height_std();
  fsp_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_height_std)
}

// optional int32 reserved_2 = 11;
bool FSPoint::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void FSPoint::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000400u;
}
void FSPoint::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000400u;
}
void FSPoint::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 FSPoint::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.reserved_2)
  return reserved_2_;
}
void FSPoint::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.reserved_2)
}

// optional float fsp_azimuth_angle = 12;
bool FSPoint::has_fsp_azimuth_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void FSPoint::set_has_fsp_azimuth_angle() {
  _has_bits_[0] |= 0x00000800u;
}
void FSPoint::clear_has_fsp_azimuth_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
void FSPoint::clear_fsp_azimuth_angle() {
  fsp_azimuth_angle_ = 0;
  clear_has_fsp_azimuth_angle();
}
float FSPoint::fsp_azimuth_angle() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_azimuth_angle)
  return fsp_azimuth_angle_;
}
void FSPoint::set_fsp_azimuth_angle(float value) {
  set_has_fsp_azimuth_angle();
  fsp_azimuth_angle_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_azimuth_angle)
}

// optional int32 fsp_buffer = 13;
bool FSPoint::has_fsp_buffer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void FSPoint::set_has_fsp_buffer() {
  _has_bits_[0] |= 0x00001000u;
}
void FSPoint::clear_has_fsp_buffer() {
  _has_bits_[0] &= ~0x00001000u;
}
void FSPoint::clear_fsp_buffer() {
  fsp_buffer_ = 0;
  clear_has_fsp_buffer();
}
::google::protobuf::int32 FSPoint::fsp_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_buffer)
  return fsp_buffer_;
}
void FSPoint::set_fsp_buffer(::google::protobuf::int32 value) {
  set_has_fsp_buffer();
  fsp_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_HLB::kHlbZeroByteFieldNumber;
const int Dt_Record_HLB::kHlbProtocolVersionFieldNumber;
const int Dt_Record_HLB::kHlbSyncIdFieldNumber;
const int Dt_Record_HLB::kHlbRunningModeFieldNumber;
const int Dt_Record_HLB::kHlbInactiveReasonFieldNumber;
const int Dt_Record_HLB::kHlbDecisionFieldNumber;
const int Dt_Record_HLB::kReserved1FieldNumber;
const int Dt_Record_HLB::kHlbReasonFieldNumber;
const int Dt_Record_HLB::kHeaderFieldNumber;
const int Dt_Record_HLB::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_HLB::Dt_Record_HLB()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_HLB)
}
Dt_Record_HLB::Dt_Record_HLB(const Dt_Record_HLB& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&hlb_zero_byte_, &from.hlb_zero_byte_,
    reinterpret_cast<char*>(&hlb_reason_) -
    reinterpret_cast<char*>(&hlb_zero_byte_) + sizeof(hlb_reason_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_HLB)
}

void Dt_Record_HLB::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&hlb_reason_) -
    reinterpret_cast<char*>(&header_) + sizeof(hlb_reason_));
}

Dt_Record_HLB::~Dt_Record_HLB() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_HLB)
  SharedDtor();
}

void Dt_Record_HLB::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Dt_Record_HLB::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_HLB& Dt_Record_HLB::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_HLB* Dt_Record_HLB::New(::google::protobuf::Arena* arena) const {
  Dt_Record_HLB* n = new Dt_Record_HLB;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_HLB::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_HLB)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&hlb_zero_byte_, 0, reinterpret_cast<char*>(&hlb_decision_) -
      reinterpret_cast<char*>(&hlb_zero_byte_) + sizeof(hlb_decision_));
  }
  if (_has_bits_[8 / 32] & 768u) {
    ::memset(&reserved_1_, 0, reinterpret_cast<char*>(&hlb_reason_) -
      reinterpret_cast<char*>(&reserved_1_) + sizeof(hlb_reason_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_HLB::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_HLB)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 hlb_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_hlb_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hlb_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hlb_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_hlb_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hlb_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hlb_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_hlb_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hlb_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_HLB.Hlb_running_modeType hlb_running_mode = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType_IsValid(value)) {
            set_hlb_running_mode(static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_HLB.Hlb_inactive_reasonType hlb_inactive_reason = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType_IsValid(value)) {
            set_hlb_inactive_reason(static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_HLB.Hlb_decisionType hlb_decision = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_HLB_Hlb_decisionType_IsValid(value)) {
            set_hlb_decision(static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_decisionType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float hlb_reason = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_hlb_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hlb_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_HLB)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_HLB)
  return false;
#undef DO_
}

void Dt_Record_HLB::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_HLB)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 hlb_zero_byte = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hlb_zero_byte(), output);
  }

  // optional int32 hlb_protocol_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hlb_protocol_version(), output);
  }

  // optional int32 hlb_sync_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hlb_sync_id(), output);
  }

  // optional .atd.meprocess.Dt_Record_HLB.Hlb_running_modeType hlb_running_mode = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->hlb_running_mode(), output);
  }

  // optional .atd.meprocess.Dt_Record_HLB.Hlb_inactive_reasonType hlb_inactive_reason = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->hlb_inactive_reason(), output);
  }

  // optional .atd.meprocess.Dt_Record_HLB.Hlb_decisionType hlb_decision = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->hlb_decision(), output);
  }

  // optional bool reserved_1 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reserved_1(), output);
  }

  // optional float hlb_reason = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->hlb_reason(), output);
  }

  // optional .atd.common.Header header = 9;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_HLB)
}

size_t Dt_Record_HLB::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_HLB)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 9;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 10;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional int32 hlb_zero_byte = 1;
    if (has_hlb_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hlb_zero_byte());
    }

    // optional int32 hlb_protocol_version = 2;
    if (has_hlb_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hlb_protocol_version());
    }

    // optional int32 hlb_sync_id = 3;
    if (has_hlb_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hlb_sync_id());
    }

    // optional .atd.meprocess.Dt_Record_HLB.Hlb_running_modeType hlb_running_mode = 4;
    if (has_hlb_running_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hlb_running_mode());
    }

    // optional .atd.meprocess.Dt_Record_HLB.Hlb_inactive_reasonType hlb_inactive_reason = 5;
    if (has_hlb_inactive_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hlb_inactive_reason());
    }

    // optional .atd.meprocess.Dt_Record_HLB.Hlb_decisionType hlb_decision = 6;
    if (has_hlb_decision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->hlb_decision());
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional bool reserved_1 = 7;
    if (has_reserved_1()) {
      total_size += 1 + 1;
    }

    // optional float hlb_reason = 8;
    if (has_hlb_reason()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_HLB::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_HLB*>(&from));
}

void Dt_Record_HLB::MergeFrom(const Dt_Record_HLB& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_HLB)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      hlb_zero_byte_ = from.hlb_zero_byte_;
    }
    if (cached_has_bits & 0x00000008u) {
      hlb_protocol_version_ = from.hlb_protocol_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      hlb_sync_id_ = from.hlb_sync_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      hlb_running_mode_ = from.hlb_running_mode_;
    }
    if (cached_has_bits & 0x00000040u) {
      hlb_inactive_reason_ = from.hlb_inactive_reason_;
    }
    if (cached_has_bits & 0x00000080u) {
      hlb_decision_ = from.hlb_decision_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 768u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      hlb_reason_ = from.hlb_reason_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dt_Record_HLB::CopyFrom(const Dt_Record_HLB& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_HLB)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_HLB::IsInitialized() const {
  return true;
}

void Dt_Record_HLB::Swap(Dt_Record_HLB* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_HLB::InternalSwap(Dt_Record_HLB* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(hlb_zero_byte_, other->hlb_zero_byte_);
  std::swap(hlb_protocol_version_, other->hlb_protocol_version_);
  std::swap(hlb_sync_id_, other->hlb_sync_id_);
  std::swap(hlb_running_mode_, other->hlb_running_mode_);
  std::swap(hlb_inactive_reason_, other->hlb_inactive_reason_);
  std::swap(hlb_decision_, other->hlb_decision_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(hlb_reason_, other->hlb_reason_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_HLB::GetTypeName() const {
  return "atd.meprocess.Dt_Record_HLB";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_HLB

// optional int32 hlb_zero_byte = 1;
bool Dt_Record_HLB::has_hlb_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_HLB::set_has_hlb_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_HLB::clear_has_hlb_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_HLB::clear_hlb_zero_byte() {
  hlb_zero_byte_ = 0;
  clear_has_hlb_zero_byte();
}
::google::protobuf::int32 Dt_Record_HLB::hlb_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_zero_byte)
  return hlb_zero_byte_;
}
void Dt_Record_HLB::set_hlb_zero_byte(::google::protobuf::int32 value) {
  set_has_hlb_zero_byte();
  hlb_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_zero_byte)
}

// optional int32 hlb_protocol_version = 2;
bool Dt_Record_HLB::has_hlb_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Record_HLB::set_has_hlb_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Record_HLB::clear_has_hlb_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Record_HLB::clear_hlb_protocol_version() {
  hlb_protocol_version_ = 0;
  clear_has_hlb_protocol_version();
}
::google::protobuf::int32 Dt_Record_HLB::hlb_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_protocol_version)
  return hlb_protocol_version_;
}
void Dt_Record_HLB::set_hlb_protocol_version(::google::protobuf::int32 value) {
  set_has_hlb_protocol_version();
  hlb_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_protocol_version)
}

// optional int32 hlb_sync_id = 3;
bool Dt_Record_HLB::has_hlb_sync_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Record_HLB::set_has_hlb_sync_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Record_HLB::clear_has_hlb_sync_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Record_HLB::clear_hlb_sync_id() {
  hlb_sync_id_ = 0;
  clear_has_hlb_sync_id();
}
::google::protobuf::int32 Dt_Record_HLB::hlb_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_sync_id)
  return hlb_sync_id_;
}
void Dt_Record_HLB::set_hlb_sync_id(::google::protobuf::int32 value) {
  set_has_hlb_sync_id();
  hlb_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_sync_id)
}

// optional .atd.meprocess.Dt_Record_HLB.Hlb_running_modeType hlb_running_mode = 4;
bool Dt_Record_HLB::has_hlb_running_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Record_HLB::set_has_hlb_running_mode() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Record_HLB::clear_has_hlb_running_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Record_HLB::clear_hlb_running_mode() {
  hlb_running_mode_ = 0;
  clear_has_hlb_running_mode();
}
::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::hlb_running_mode() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_running_mode)
  return static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType >(hlb_running_mode_);
}
void Dt_Record_HLB::set_hlb_running_mode(::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType value) {
  assert(::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType_IsValid(value));
  set_has_hlb_running_mode();
  hlb_running_mode_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_running_mode)
}

// optional .atd.meprocess.Dt_Record_HLB.Hlb_inactive_reasonType hlb_inactive_reason = 5;
bool Dt_Record_HLB::has_hlb_inactive_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Record_HLB::set_has_hlb_inactive_reason() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Record_HLB::clear_has_hlb_inactive_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Record_HLB::clear_hlb_inactive_reason() {
  hlb_inactive_reason_ = 0;
  clear_has_hlb_inactive_reason();
}
::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::hlb_inactive_reason() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_inactive_reason)
  return static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType >(hlb_inactive_reason_);
}
void Dt_Record_HLB::set_hlb_inactive_reason(::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType value) {
  assert(::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType_IsValid(value));
  set_has_hlb_inactive_reason();
  hlb_inactive_reason_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_inactive_reason)
}

// optional .atd.meprocess.Dt_Record_HLB.Hlb_decisionType hlb_decision = 6;
bool Dt_Record_HLB::has_hlb_decision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Record_HLB::set_has_hlb_decision() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Record_HLB::clear_has_hlb_decision() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Record_HLB::clear_hlb_decision() {
  hlb_decision_ = 0;
  clear_has_hlb_decision();
}
::atd::meprocess::Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB::hlb_decision() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_decision)
  return static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_decisionType >(hlb_decision_);
}
void Dt_Record_HLB::set_hlb_decision(::atd::meprocess::Dt_Record_HLB_Hlb_decisionType value) {
  assert(::atd::meprocess::Dt_Record_HLB_Hlb_decisionType_IsValid(value));
  set_has_hlb_decision();
  hlb_decision_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_decision)
}

// optional bool reserved_1 = 7;
bool Dt_Record_HLB::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Dt_Record_HLB::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000100u;
}
void Dt_Record_HLB::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000100u;
}
void Dt_Record_HLB::clear_reserved_1() {
  reserved_1_ = false;
  clear_has_reserved_1();
}
bool Dt_Record_HLB::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.reserved_1)
  return reserved_1_;
}
void Dt_Record_HLB::set_reserved_1(bool value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.reserved_1)
}

// optional float hlb_reason = 8;
bool Dt_Record_HLB::has_hlb_reason() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Dt_Record_HLB::set_has_hlb_reason() {
  _has_bits_[0] |= 0x00000200u;
}
void Dt_Record_HLB::clear_has_hlb_reason() {
  _has_bits_[0] &= ~0x00000200u;
}
void Dt_Record_HLB::clear_hlb_reason() {
  hlb_reason_ = 0;
  clear_has_hlb_reason();
}
float Dt_Record_HLB::hlb_reason() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_reason)
  return hlb_reason_;
}
void Dt_Record_HLB::set_hlb_reason(float value) {
  set_has_hlb_reason();
  hlb_reason_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_reason)
}

// optional .atd.common.Header header = 9;
bool Dt_Record_HLB::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_HLB::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_HLB::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_HLB::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_HLB::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_HLB::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_HLB.header)
  return header_;
}
::atd::common::Header* Dt_Record_HLB::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_HLB.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_HLB::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_HLB.header)
}

// optional .atd.common.Reserved reservedmsg = 10;
bool Dt_Record_HLB::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_HLB::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_HLB::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_HLB::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_HLB::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_HLB::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_HLB.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_HLB::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_HLB.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_HLB::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_HLB.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_LDW::kLdwZeroByteFieldNumber;
const int Dt_Record_LDW::kLdwProtocolVersionFieldNumber;
const int Dt_Record_LDW::kLdwSyncIdFieldNumber;
const int Dt_Record_LDW::kLdwLineValidLeftFieldNumber;
const int Dt_Record_LDW::kLdwLineValidRightFieldNumber;
const int Dt_Record_LDW::kReserved1FieldNumber;
const int Dt_Record_LDW::kLdwSuppresionReasonFieldNumber;
const int Dt_Record_LDW::kLdwTimeToWarningLeftFieldNumber;
const int Dt_Record_LDW::kLdwTimeToWarningRightFieldNumber;
const int Dt_Record_LDW::kLdwWarningStatusLeftFieldNumber;
const int Dt_Record_LDW::kLdwWarningStatusRightFieldNumber;
const int Dt_Record_LDW::kReserved2FieldNumber;
const int Dt_Record_LDW::kHeaderFieldNumber;
const int Dt_Record_LDW::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_LDW::Dt_Record_LDW()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_LDW)
}
Dt_Record_LDW::Dt_Record_LDW(const Dt_Record_LDW& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&ldw_zero_byte_, &from.ldw_zero_byte_,
    reinterpret_cast<char*>(&reserved_2_) -
    reinterpret_cast<char*>(&ldw_zero_byte_) + sizeof(reserved_2_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_LDW)
}

void Dt_Record_LDW::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reserved_2_) -
    reinterpret_cast<char*>(&header_) + sizeof(reserved_2_));
}

Dt_Record_LDW::~Dt_Record_LDW() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_LDW)
  SharedDtor();
}

void Dt_Record_LDW::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Dt_Record_LDW::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_LDW& Dt_Record_LDW::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_LDW* Dt_Record_LDW::New(::google::protobuf::Arena* arena) const {
  Dt_Record_LDW* n = new Dt_Record_LDW;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_LDW::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_LDW)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&ldw_zero_byte_, 0, reinterpret_cast<char*>(&reserved_1_) -
      reinterpret_cast<char*>(&ldw_zero_byte_) + sizeof(reserved_1_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&ldw_suppresion_reason_, 0, reinterpret_cast<char*>(&reserved_2_) -
      reinterpret_cast<char*>(&ldw_suppresion_reason_) + sizeof(reserved_2_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_LDW::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_LDW)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ldw_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ldw_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ldw_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ldw_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ldw_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ldw_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ldw_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ldw_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ldw_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ldw_line_valid_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ldw_line_valid_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ldw_line_valid_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ldw_line_valid_right = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ldw_line_valid_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ldw_line_valid_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ldw_suppresion_reason = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ldw_suppresion_reason();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ldw_suppresion_reason_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ldw_time_to_warning_left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_ldw_time_to_warning_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ldw_time_to_warning_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ldw_time_to_warning_right = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_ldw_time_to_warning_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ldw_time_to_warning_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_leftType ldw_warning_status_left = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType_IsValid(value)) {
            set_ldw_warning_status_left(static_cast< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_rightType ldw_warning_status_right = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType_IsValid(value)) {
            set_ldw_warning_status_right(static_cast< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_LDW)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_LDW)
  return false;
#undef DO_
}

void Dt_Record_LDW::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_LDW)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ldw_zero_byte = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ldw_zero_byte(), output);
  }

  // optional int32 ldw_protocol_version = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ldw_protocol_version(), output);
  }

  // optional int32 ldw_sync_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ldw_sync_id(), output);
  }

  // optional bool ldw_line_valid_left = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ldw_line_valid_left(), output);
  }

  // optional bool ldw_line_valid_right = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ldw_line_valid_right(), output);
  }

  // optional int32 reserved_1 = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reserved_1(), output);
  }

  // optional int32 ldw_suppresion_reason = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ldw_suppresion_reason(), output);
  }

  // optional float ldw_time_to_warning_left = 8;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->ldw_time_to_warning_left(), output);
  }

  // optional float ldw_time_to_warning_right = 9;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ldw_time_to_warning_right(), output);
  }

  // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_leftType ldw_warning_status_left = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ldw_warning_status_left(), output);
  }

  // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_rightType ldw_warning_status_right = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->ldw_warning_status_right(), output);
  }

  // optional int32 reserved_2 = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reserved_2(), output);
  }

  // optional .atd.common.Header header = 13;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 14;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_LDW)
}

size_t Dt_Record_LDW::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_LDW)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 13;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 14;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional int32 ldw_zero_byte = 1;
    if (has_ldw_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ldw_zero_byte());
    }

    // optional int32 ldw_protocol_version = 2;
    if (has_ldw_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ldw_protocol_version());
    }

    // optional int32 ldw_sync_id = 3;
    if (has_ldw_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ldw_sync_id());
    }

    // optional bool ldw_line_valid_left = 4;
    if (has_ldw_line_valid_left()) {
      total_size += 1 + 1;
    }

    // optional bool ldw_line_valid_right = 5;
    if (has_ldw_line_valid_right()) {
      total_size += 1 + 1;
    }

    // optional int32 reserved_1 = 6;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 ldw_suppresion_reason = 7;
    if (has_ldw_suppresion_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ldw_suppresion_reason());
    }

    // optional float ldw_time_to_warning_left = 8;
    if (has_ldw_time_to_warning_left()) {
      total_size += 1 + 4;
    }

    // optional float ldw_time_to_warning_right = 9;
    if (has_ldw_time_to_warning_right()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_leftType ldw_warning_status_left = 10;
    if (has_ldw_warning_status_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ldw_warning_status_left());
    }

    // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_rightType ldw_warning_status_right = 11;
    if (has_ldw_warning_status_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ldw_warning_status_right());
    }

    // optional int32 reserved_2 = 12;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_LDW::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_LDW*>(&from));
}

void Dt_Record_LDW::MergeFrom(const Dt_Record_LDW& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_LDW)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      ldw_zero_byte_ = from.ldw_zero_byte_;
    }
    if (cached_has_bits & 0x00000008u) {
      ldw_protocol_version_ = from.ldw_protocol_version_;
    }
    if (cached_has_bits & 0x00000010u) {
      ldw_sync_id_ = from.ldw_sync_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      ldw_line_valid_left_ = from.ldw_line_valid_left_;
    }
    if (cached_has_bits & 0x00000040u) {
      ldw_line_valid_right_ = from.ldw_line_valid_right_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_1_ = from.reserved_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      ldw_suppresion_reason_ = from.ldw_suppresion_reason_;
    }
    if (cached_has_bits & 0x00000200u) {
      ldw_time_to_warning_left_ = from.ldw_time_to_warning_left_;
    }
    if (cached_has_bits & 0x00000400u) {
      ldw_time_to_warning_right_ = from.ldw_time_to_warning_right_;
    }
    if (cached_has_bits & 0x00000800u) {
      ldw_warning_status_left_ = from.ldw_warning_status_left_;
    }
    if (cached_has_bits & 0x00001000u) {
      ldw_warning_status_right_ = from.ldw_warning_status_right_;
    }
    if (cached_has_bits & 0x00002000u) {
      reserved_2_ = from.reserved_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dt_Record_LDW::CopyFrom(const Dt_Record_LDW& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_LDW)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_LDW::IsInitialized() const {
  return true;
}

void Dt_Record_LDW::Swap(Dt_Record_LDW* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_LDW::InternalSwap(Dt_Record_LDW* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(ldw_zero_byte_, other->ldw_zero_byte_);
  std::swap(ldw_protocol_version_, other->ldw_protocol_version_);
  std::swap(ldw_sync_id_, other->ldw_sync_id_);
  std::swap(ldw_line_valid_left_, other->ldw_line_valid_left_);
  std::swap(ldw_line_valid_right_, other->ldw_line_valid_right_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(ldw_suppresion_reason_, other->ldw_suppresion_reason_);
  std::swap(ldw_time_to_warning_left_, other->ldw_time_to_warning_left_);
  std::swap(ldw_time_to_warning_right_, other->ldw_time_to_warning_right_);
  std::swap(ldw_warning_status_left_, other->ldw_warning_status_left_);
  std::swap(ldw_warning_status_right_, other->ldw_warning_status_right_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_LDW::GetTypeName() const {
  return "atd.meprocess.Dt_Record_LDW";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_LDW

// optional int32 ldw_zero_byte = 1;
bool Dt_Record_LDW::has_ldw_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_LDW::set_has_ldw_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_LDW::clear_has_ldw_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_LDW::clear_ldw_zero_byte() {
  ldw_zero_byte_ = 0;
  clear_has_ldw_zero_byte();
}
::google::protobuf::int32 Dt_Record_LDW::ldw_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_zero_byte)
  return ldw_zero_byte_;
}
void Dt_Record_LDW::set_ldw_zero_byte(::google::protobuf::int32 value) {
  set_has_ldw_zero_byte();
  ldw_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_zero_byte)
}

// optional int32 ldw_protocol_version = 2;
bool Dt_Record_LDW::has_ldw_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Record_LDW::set_has_ldw_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Record_LDW::clear_has_ldw_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Record_LDW::clear_ldw_protocol_version() {
  ldw_protocol_version_ = 0;
  clear_has_ldw_protocol_version();
}
::google::protobuf::int32 Dt_Record_LDW::ldw_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_protocol_version)
  return ldw_protocol_version_;
}
void Dt_Record_LDW::set_ldw_protocol_version(::google::protobuf::int32 value) {
  set_has_ldw_protocol_version();
  ldw_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_protocol_version)
}

// optional int32 ldw_sync_id = 3;
bool Dt_Record_LDW::has_ldw_sync_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Record_LDW::set_has_ldw_sync_id() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Record_LDW::clear_has_ldw_sync_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Record_LDW::clear_ldw_sync_id() {
  ldw_sync_id_ = 0;
  clear_has_ldw_sync_id();
}
::google::protobuf::int32 Dt_Record_LDW::ldw_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_sync_id)
  return ldw_sync_id_;
}
void Dt_Record_LDW::set_ldw_sync_id(::google::protobuf::int32 value) {
  set_has_ldw_sync_id();
  ldw_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_sync_id)
}

// optional bool ldw_line_valid_left = 4;
bool Dt_Record_LDW::has_ldw_line_valid_left() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Record_LDW::set_has_ldw_line_valid_left() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Record_LDW::clear_has_ldw_line_valid_left() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Record_LDW::clear_ldw_line_valid_left() {
  ldw_line_valid_left_ = false;
  clear_has_ldw_line_valid_left();
}
bool Dt_Record_LDW::ldw_line_valid_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_line_valid_left)
  return ldw_line_valid_left_;
}
void Dt_Record_LDW::set_ldw_line_valid_left(bool value) {
  set_has_ldw_line_valid_left();
  ldw_line_valid_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_line_valid_left)
}

// optional bool ldw_line_valid_right = 5;
bool Dt_Record_LDW::has_ldw_line_valid_right() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Record_LDW::set_has_ldw_line_valid_right() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Record_LDW::clear_has_ldw_line_valid_right() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Record_LDW::clear_ldw_line_valid_right() {
  ldw_line_valid_right_ = false;
  clear_has_ldw_line_valid_right();
}
bool Dt_Record_LDW::ldw_line_valid_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_line_valid_right)
  return ldw_line_valid_right_;
}
void Dt_Record_LDW::set_ldw_line_valid_right(bool value) {
  set_has_ldw_line_valid_right();
  ldw_line_valid_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_line_valid_right)
}

// optional int32 reserved_1 = 6;
bool Dt_Record_LDW::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Record_LDW::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Record_LDW::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Record_LDW::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 Dt_Record_LDW::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.reserved_1)
  return reserved_1_;
}
void Dt_Record_LDW::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.reserved_1)
}

// optional int32 ldw_suppresion_reason = 7;
bool Dt_Record_LDW::has_ldw_suppresion_reason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Dt_Record_LDW::set_has_ldw_suppresion_reason() {
  _has_bits_[0] |= 0x00000100u;
}
void Dt_Record_LDW::clear_has_ldw_suppresion_reason() {
  _has_bits_[0] &= ~0x00000100u;
}
void Dt_Record_LDW::clear_ldw_suppresion_reason() {
  ldw_suppresion_reason_ = 0;
  clear_has_ldw_suppresion_reason();
}
::google::protobuf::int32 Dt_Record_LDW::ldw_suppresion_reason() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_suppresion_reason)
  return ldw_suppresion_reason_;
}
void Dt_Record_LDW::set_ldw_suppresion_reason(::google::protobuf::int32 value) {
  set_has_ldw_suppresion_reason();
  ldw_suppresion_reason_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_suppresion_reason)
}

// optional float ldw_time_to_warning_left = 8;
bool Dt_Record_LDW::has_ldw_time_to_warning_left() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Dt_Record_LDW::set_has_ldw_time_to_warning_left() {
  _has_bits_[0] |= 0x00000200u;
}
void Dt_Record_LDW::clear_has_ldw_time_to_warning_left() {
  _has_bits_[0] &= ~0x00000200u;
}
void Dt_Record_LDW::clear_ldw_time_to_warning_left() {
  ldw_time_to_warning_left_ = 0;
  clear_has_ldw_time_to_warning_left();
}
float Dt_Record_LDW::ldw_time_to_warning_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_left)
  return ldw_time_to_warning_left_;
}
void Dt_Record_LDW::set_ldw_time_to_warning_left(float value) {
  set_has_ldw_time_to_warning_left();
  ldw_time_to_warning_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_left)
}

// optional float ldw_time_to_warning_right = 9;
bool Dt_Record_LDW::has_ldw_time_to_warning_right() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Dt_Record_LDW::set_has_ldw_time_to_warning_right() {
  _has_bits_[0] |= 0x00000400u;
}
void Dt_Record_LDW::clear_has_ldw_time_to_warning_right() {
  _has_bits_[0] &= ~0x00000400u;
}
void Dt_Record_LDW::clear_ldw_time_to_warning_right() {
  ldw_time_to_warning_right_ = 0;
  clear_has_ldw_time_to_warning_right();
}
float Dt_Record_LDW::ldw_time_to_warning_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_right)
  return ldw_time_to_warning_right_;
}
void Dt_Record_LDW::set_ldw_time_to_warning_right(float value) {
  set_has_ldw_time_to_warning_right();
  ldw_time_to_warning_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_right)
}

// optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_leftType ldw_warning_status_left = 10;
bool Dt_Record_LDW::has_ldw_warning_status_left() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Dt_Record_LDW::set_has_ldw_warning_status_left() {
  _has_bits_[0] |= 0x00000800u;
}
void Dt_Record_LDW::clear_has_ldw_warning_status_left() {
  _has_bits_[0] &= ~0x00000800u;
}
void Dt_Record_LDW::clear_ldw_warning_status_left() {
  ldw_warning_status_left_ = 0;
  clear_has_ldw_warning_status_left();
}
::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW::ldw_warning_status_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_warning_status_left)
  return static_cast< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType >(ldw_warning_status_left_);
}
void Dt_Record_LDW::set_ldw_warning_status_left(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType value) {
  assert(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType_IsValid(value));
  set_has_ldw_warning_status_left();
  ldw_warning_status_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_warning_status_left)
}

// optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_rightType ldw_warning_status_right = 11;
bool Dt_Record_LDW::has_ldw_warning_status_right() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Dt_Record_LDW::set_has_ldw_warning_status_right() {
  _has_bits_[0] |= 0x00001000u;
}
void Dt_Record_LDW::clear_has_ldw_warning_status_right() {
  _has_bits_[0] &= ~0x00001000u;
}
void Dt_Record_LDW::clear_ldw_warning_status_right() {
  ldw_warning_status_right_ = 0;
  clear_has_ldw_warning_status_right();
}
::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW::ldw_warning_status_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_warning_status_right)
  return static_cast< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType >(ldw_warning_status_right_);
}
void Dt_Record_LDW::set_ldw_warning_status_right(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType value) {
  assert(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType_IsValid(value));
  set_has_ldw_warning_status_right();
  ldw_warning_status_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_warning_status_right)
}

// optional int32 reserved_2 = 12;
bool Dt_Record_LDW::has_reserved_2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Dt_Record_LDW::set_has_reserved_2() {
  _has_bits_[0] |= 0x00002000u;
}
void Dt_Record_LDW::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00002000u;
}
void Dt_Record_LDW::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 Dt_Record_LDW::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.reserved_2)
  return reserved_2_;
}
void Dt_Record_LDW::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.reserved_2)
}

// optional .atd.common.Header header = 13;
bool Dt_Record_LDW::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_LDW::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_LDW::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_LDW::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_LDW::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_LDW::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LDW.header)
  return header_;
}
::atd::common::Header* Dt_Record_LDW::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LDW.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_LDW::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LDW.header)
}

// optional .atd.common.Reserved reservedmsg = 14;
bool Dt_Record_LDW::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_LDW::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_LDW::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_LDW::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_LDW::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_LDW::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LDW.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_LDW::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LDW.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_LDW::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LDW.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LSCommon::kZeroByteFieldNumber;
const int LSCommon::kLsProtocolVersionFieldNumber;
const int LSCommon::kLsSyncIdFieldNumber;
const int LSCommon::kLsAdjacentNumberFieldNumber;
const int LSCommon::kLsCaIsConstructionAreaFieldNumber;
const int LSCommon::kLsHeaderBuffer1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LSCommon::LSCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.LSCommon)
}
LSCommon::LSCommon(const LSCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zero_byte_, &from.zero_byte_,
    reinterpret_cast<char*>(&ls_header_buffer_1_) -
    reinterpret_cast<char*>(&zero_byte_) + sizeof(ls_header_buffer_1_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.LSCommon)
}

void LSCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&zero_byte_, 0, reinterpret_cast<char*>(&ls_header_buffer_1_) -
    reinterpret_cast<char*>(&zero_byte_) + sizeof(ls_header_buffer_1_));
}

LSCommon::~LSCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.LSCommon)
  SharedDtor();
}

void LSCommon::SharedDtor() {
}

void LSCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LSCommon& LSCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

LSCommon* LSCommon::New(::google::protobuf::Arena* arena) const {
  LSCommon* n = new LSCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LSCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.LSCommon)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&zero_byte_, 0, reinterpret_cast<char*>(&ls_header_buffer_1_) -
      reinterpret_cast<char*>(&zero_byte_) + sizeof(ls_header_buffer_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LSCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.LSCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ls_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ls_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_adjacent_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ls_adjacent_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_adjacent_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_ca_is_construction_area = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ls_ca_is_construction_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_ca_is_construction_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_header_buffer_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ls_header_buffer_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_header_buffer_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.LSCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.LSCommon)
  return false;
#undef DO_
}

void LSCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.LSCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zero_byte(), output);
  }

  // optional int32 ls_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ls_protocol_version(), output);
  }

  // optional int32 ls_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ls_sync_id(), output);
  }

  // optional int32 ls_adjacent_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ls_adjacent_number(), output);
  }

  // optional bool ls_ca_is_construction_area = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ls_ca_is_construction_area(), output);
  }

  // optional int32 ls_header_buffer_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ls_header_buffer_1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.LSCommon)
}

size_t LSCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.LSCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 zero_byte = 1;
    if (has_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_byte());
    }

    // optional int32 ls_protocol_version = 2;
    if (has_ls_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_protocol_version());
    }

    // optional int32 ls_sync_id = 3;
    if (has_ls_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_sync_id());
    }

    // optional int32 ls_adjacent_number = 4;
    if (has_ls_adjacent_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_adjacent_number());
    }

    // optional bool ls_ca_is_construction_area = 5;
    if (has_ls_ca_is_construction_area()) {
      total_size += 1 + 1;
    }

    // optional int32 ls_header_buffer_1 = 6;
    if (has_ls_header_buffer_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_header_buffer_1());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LSCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LSCommon*>(&from));
}

void LSCommon::MergeFrom(const LSCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.LSCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      zero_byte_ = from.zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      ls_protocol_version_ = from.ls_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      ls_sync_id_ = from.ls_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ls_adjacent_number_ = from.ls_adjacent_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      ls_ca_is_construction_area_ = from.ls_ca_is_construction_area_;
    }
    if (cached_has_bits & 0x00000020u) {
      ls_header_buffer_1_ = from.ls_header_buffer_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LSCommon::CopyFrom(const LSCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.LSCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LSCommon::IsInitialized() const {
  return true;
}

void LSCommon::Swap(LSCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LSCommon::InternalSwap(LSCommon* other) {
  std::swap(zero_byte_, other->zero_byte_);
  std::swap(ls_protocol_version_, other->ls_protocol_version_);
  std::swap(ls_sync_id_, other->ls_sync_id_);
  std::swap(ls_adjacent_number_, other->ls_adjacent_number_);
  std::swap(ls_ca_is_construction_area_, other->ls_ca_is_construction_area_);
  std::swap(ls_header_buffer_1_, other->ls_header_buffer_1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LSCommon::GetTypeName() const {
  return "atd.meprocess.LSCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LSCommon

// optional int32 zero_byte = 1;
bool LSCommon::has_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LSCommon::set_has_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void LSCommon::clear_has_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void LSCommon::clear_zero_byte() {
  zero_byte_ = 0;
  clear_has_zero_byte();
}
::google::protobuf::int32 LSCommon::zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.zero_byte)
  return zero_byte_;
}
void LSCommon::set_zero_byte(::google::protobuf::int32 value) {
  set_has_zero_byte();
  zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.zero_byte)
}

// optional int32 ls_protocol_version = 2;
bool LSCommon::has_ls_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LSCommon::set_has_ls_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void LSCommon::clear_has_ls_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void LSCommon::clear_ls_protocol_version() {
  ls_protocol_version_ = 0;
  clear_has_ls_protocol_version();
}
::google::protobuf::int32 LSCommon::ls_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_protocol_version)
  return ls_protocol_version_;
}
void LSCommon::set_ls_protocol_version(::google::protobuf::int32 value) {
  set_has_ls_protocol_version();
  ls_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_protocol_version)
}

// optional int32 ls_sync_id = 3;
bool LSCommon::has_ls_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LSCommon::set_has_ls_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void LSCommon::clear_has_ls_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void LSCommon::clear_ls_sync_id() {
  ls_sync_id_ = 0;
  clear_has_ls_sync_id();
}
::google::protobuf::int32 LSCommon::ls_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_sync_id)
  return ls_sync_id_;
}
void LSCommon::set_ls_sync_id(::google::protobuf::int32 value) {
  set_has_ls_sync_id();
  ls_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_sync_id)
}

// optional int32 ls_adjacent_number = 4;
bool LSCommon::has_ls_adjacent_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LSCommon::set_has_ls_adjacent_number() {
  _has_bits_[0] |= 0x00000008u;
}
void LSCommon::clear_has_ls_adjacent_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void LSCommon::clear_ls_adjacent_number() {
  ls_adjacent_number_ = 0;
  clear_has_ls_adjacent_number();
}
::google::protobuf::int32 LSCommon::ls_adjacent_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_adjacent_number)
  return ls_adjacent_number_;
}
void LSCommon::set_ls_adjacent_number(::google::protobuf::int32 value) {
  set_has_ls_adjacent_number();
  ls_adjacent_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_adjacent_number)
}

// optional bool ls_ca_is_construction_area = 5;
bool LSCommon::has_ls_ca_is_construction_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LSCommon::set_has_ls_ca_is_construction_area() {
  _has_bits_[0] |= 0x00000010u;
}
void LSCommon::clear_has_ls_ca_is_construction_area() {
  _has_bits_[0] &= ~0x00000010u;
}
void LSCommon::clear_ls_ca_is_construction_area() {
  ls_ca_is_construction_area_ = false;
  clear_has_ls_ca_is_construction_area();
}
bool LSCommon::ls_ca_is_construction_area() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_ca_is_construction_area)
  return ls_ca_is_construction_area_;
}
void LSCommon::set_ls_ca_is_construction_area(bool value) {
  set_has_ls_ca_is_construction_area();
  ls_ca_is_construction_area_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_ca_is_construction_area)
}

// optional int32 ls_header_buffer_1 = 6;
bool LSCommon::has_ls_header_buffer_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LSCommon::set_has_ls_header_buffer_1() {
  _has_bits_[0] |= 0x00000020u;
}
void LSCommon::clear_has_ls_header_buffer_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void LSCommon::clear_ls_header_buffer_1() {
  ls_header_buffer_1_ = 0;
  clear_has_ls_header_buffer_1();
}
::google::protobuf::int32 LSCommon::ls_header_buffer_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_header_buffer_1)
  return ls_header_buffer_1_;
}
void LSCommon::set_ls_header_buffer_1(::google::protobuf::int32 value) {
  set_has_ls_header_buffer_1();
  ls_header_buffer_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_header_buffer_1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LineParam::kValidFieldNumber;
const int LineParam::kC0FieldNumber;
const int LineParam::kC1FieldNumber;
const int LineParam::kC2FieldNumber;
const int LineParam::kC3FieldNumber;
const int LineParam::kViewStartFieldNumber;
const int LineParam::kViewEndFieldNumber;
const int LineParam::kLineTypeFieldNumber;
const int LineParam::kLineQualityFieldNumber;
const int LineParam::kLinewidthFieldNumber;
const int LineParam::kC0StdFieldNumber;
const int LineParam::kC1StdFieldNumber;
const int LineParam::kC2StdFieldNumber;
const int LineParam::kC3StdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LineParam::LineParam()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.LineParam)
}
LineParam::LineParam(const LineParam& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&c0_, &from.c0_,
    reinterpret_cast<char*>(&c0_std_) -
    reinterpret_cast<char*>(&c0_) + sizeof(c0_std_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.LineParam)
}

void LineParam::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&c0_, 0, reinterpret_cast<char*>(&c0_std_) -
    reinterpret_cast<char*>(&c0_) + sizeof(c0_std_));
}

LineParam::~LineParam() {
  // @@protoc_insertion_point(destructor:atd.meprocess.LineParam)
  SharedDtor();
}

void LineParam::SharedDtor() {
}

void LineParam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LineParam& LineParam::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

LineParam* LineParam::New(::google::protobuf::Arena* arena) const {
  LineParam* n = new LineParam;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LineParam::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.LineParam)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&c0_, 0, reinterpret_cast<char*>(&linequality_) -
      reinterpret_cast<char*>(&c0_) + sizeof(linequality_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&linewidth_, 0, reinterpret_cast<char*>(&c0_std_) -
      reinterpret_cast<char*>(&linewidth_) + sizeof(c0_std_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LineParam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.LineParam)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float c0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_c0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_c1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c2 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_c2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_c3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_start = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_view_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_end = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_view_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lineType = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_linetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lineQuality = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_linequality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &linequality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float linewidth = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_linewidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &linewidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c1_std = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_c1_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c1_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c2_std = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_c2_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c2_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c3_std = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_c3_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c3_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c0_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_c0_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c0_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.LineParam)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.LineParam)
  return false;
#undef DO_
}

void LineParam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.LineParam)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float c0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->c0(), output);
  }

  // optional float c1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->c1(), output);
  }

  // optional float c2 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->c2(), output);
  }

  // optional float c3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->c3(), output);
  }

  // optional float view_start = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->view_start(), output);
  }

  // optional float view_end = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->view_end(), output);
  }

  // optional int32 lineType = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->linetype(), output);
  }

  // optional int32 lineQuality = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->linequality(), output);
  }

  // optional float linewidth = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->linewidth(), output);
  }

  // optional bool valid = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->valid(), output);
  }

  // optional float c1_std = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->c1_std(), output);
  }

  // optional float c2_std = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->c2_std(), output);
  }

  // optional float c3_std = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->c3_std(), output);
  }

  // optional float c0_std = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->c0_std(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.LineParam)
}

size_t LineParam::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.LineParam)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional float c0 = 1;
    if (has_c0()) {
      total_size += 1 + 4;
    }

    // optional float c1 = 2;
    if (has_c1()) {
      total_size += 1 + 4;
    }

    // optional float c2 = 3;
    if (has_c2()) {
      total_size += 1 + 4;
    }

    // optional float c3 = 4;
    if (has_c3()) {
      total_size += 1 + 4;
    }

    // optional float view_start = 5;
    if (has_view_start()) {
      total_size += 1 + 4;
    }

    // optional float view_end = 6;
    if (has_view_end()) {
      total_size += 1 + 4;
    }

    // optional int32 lineType = 7;
    if (has_linetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linetype());
    }

    // optional int32 lineQuality = 8;
    if (has_linequality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->linequality());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float linewidth = 9;
    if (has_linewidth()) {
      total_size += 1 + 4;
    }

    // optional bool valid = 10;
    if (has_valid()) {
      total_size += 1 + 1;
    }

    // optional float c1_std = 11;
    if (has_c1_std()) {
      total_size += 1 + 4;
    }

    // optional float c2_std = 12;
    if (has_c2_std()) {
      total_size += 1 + 4;
    }

    // optional float c3_std = 13;
    if (has_c3_std()) {
      total_size += 1 + 4;
    }

    // optional float c0_std = 14;
    if (has_c0_std()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineParam::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LineParam*>(&from));
}

void LineParam::MergeFrom(const LineParam& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.LineParam)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      c0_ = from.c0_;
    }
    if (cached_has_bits & 0x00000002u) {
      c1_ = from.c1_;
    }
    if (cached_has_bits & 0x00000004u) {
      c2_ = from.c2_;
    }
    if (cached_has_bits & 0x00000008u) {
      c3_ = from.c3_;
    }
    if (cached_has_bits & 0x00000010u) {
      view_start_ = from.view_start_;
    }
    if (cached_has_bits & 0x00000020u) {
      view_end_ = from.view_end_;
    }
    if (cached_has_bits & 0x00000040u) {
      linetype_ = from.linetype_;
    }
    if (cached_has_bits & 0x00000080u) {
      linequality_ = from.linequality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      linewidth_ = from.linewidth_;
    }
    if (cached_has_bits & 0x00000200u) {
      valid_ = from.valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      c1_std_ = from.c1_std_;
    }
    if (cached_has_bits & 0x00000800u) {
      c2_std_ = from.c2_std_;
    }
    if (cached_has_bits & 0x00001000u) {
      c3_std_ = from.c3_std_;
    }
    if (cached_has_bits & 0x00002000u) {
      c0_std_ = from.c0_std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LineParam::CopyFrom(const LineParam& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.LineParam)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineParam::IsInitialized() const {
  return true;
}

void LineParam::Swap(LineParam* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LineParam::InternalSwap(LineParam* other) {
  std::swap(c0_, other->c0_);
  std::swap(c1_, other->c1_);
  std::swap(c2_, other->c2_);
  std::swap(c3_, other->c3_);
  std::swap(view_start_, other->view_start_);
  std::swap(view_end_, other->view_end_);
  std::swap(linetype_, other->linetype_);
  std::swap(linequality_, other->linequality_);
  std::swap(linewidth_, other->linewidth_);
  std::swap(valid_, other->valid_);
  std::swap(c1_std_, other->c1_std_);
  std::swap(c2_std_, other->c2_std_);
  std::swap(c3_std_, other->c3_std_);
  std::swap(c0_std_, other->c0_std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LineParam::GetTypeName() const {
  return "atd.meprocess.LineParam";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LineParam

// optional bool valid = 10;
bool LineParam::has_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LineParam::set_has_valid() {
  _has_bits_[0] |= 0x00000200u;
}
void LineParam::clear_has_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
void LineParam::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool LineParam::valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.valid)
  return valid_;
}
void LineParam::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.valid)
}

// optional float c0 = 1;
bool LineParam::has_c0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LineParam::set_has_c0() {
  _has_bits_[0] |= 0x00000001u;
}
void LineParam::clear_has_c0() {
  _has_bits_[0] &= ~0x00000001u;
}
void LineParam::clear_c0() {
  c0_ = 0;
  clear_has_c0();
}
float LineParam::c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c0)
  return c0_;
}
void LineParam::set_c0(float value) {
  set_has_c0();
  c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c0)
}

// optional float c1 = 2;
bool LineParam::has_c1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LineParam::set_has_c1() {
  _has_bits_[0] |= 0x00000002u;
}
void LineParam::clear_has_c1() {
  _has_bits_[0] &= ~0x00000002u;
}
void LineParam::clear_c1() {
  c1_ = 0;
  clear_has_c1();
}
float LineParam::c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c1)
  return c1_;
}
void LineParam::set_c1(float value) {
  set_has_c1();
  c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c1)
}

// optional float c2 = 3;
bool LineParam::has_c2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LineParam::set_has_c2() {
  _has_bits_[0] |= 0x00000004u;
}
void LineParam::clear_has_c2() {
  _has_bits_[0] &= ~0x00000004u;
}
void LineParam::clear_c2() {
  c2_ = 0;
  clear_has_c2();
}
float LineParam::c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c2)
  return c2_;
}
void LineParam::set_c2(float value) {
  set_has_c2();
  c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c2)
}

// optional float c3 = 4;
bool LineParam::has_c3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LineParam::set_has_c3() {
  _has_bits_[0] |= 0x00000008u;
}
void LineParam::clear_has_c3() {
  _has_bits_[0] &= ~0x00000008u;
}
void LineParam::clear_c3() {
  c3_ = 0;
  clear_has_c3();
}
float LineParam::c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c3)
  return c3_;
}
void LineParam::set_c3(float value) {
  set_has_c3();
  c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c3)
}

// optional float view_start = 5;
bool LineParam::has_view_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LineParam::set_has_view_start() {
  _has_bits_[0] |= 0x00000010u;
}
void LineParam::clear_has_view_start() {
  _has_bits_[0] &= ~0x00000010u;
}
void LineParam::clear_view_start() {
  view_start_ = 0;
  clear_has_view_start();
}
float LineParam::view_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.view_start)
  return view_start_;
}
void LineParam::set_view_start(float value) {
  set_has_view_start();
  view_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.view_start)
}

// optional float view_end = 6;
bool LineParam::has_view_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LineParam::set_has_view_end() {
  _has_bits_[0] |= 0x00000020u;
}
void LineParam::clear_has_view_end() {
  _has_bits_[0] &= ~0x00000020u;
}
void LineParam::clear_view_end() {
  view_end_ = 0;
  clear_has_view_end();
}
float LineParam::view_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.view_end)
  return view_end_;
}
void LineParam::set_view_end(float value) {
  set_has_view_end();
  view_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.view_end)
}

// optional int32 lineType = 7;
bool LineParam::has_linetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LineParam::set_has_linetype() {
  _has_bits_[0] |= 0x00000040u;
}
void LineParam::clear_has_linetype() {
  _has_bits_[0] &= ~0x00000040u;
}
void LineParam::clear_linetype() {
  linetype_ = 0;
  clear_has_linetype();
}
::google::protobuf::int32 LineParam::linetype() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.lineType)
  return linetype_;
}
void LineParam::set_linetype(::google::protobuf::int32 value) {
  set_has_linetype();
  linetype_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.lineType)
}

// optional int32 lineQuality = 8;
bool LineParam::has_linequality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LineParam::set_has_linequality() {
  _has_bits_[0] |= 0x00000080u;
}
void LineParam::clear_has_linequality() {
  _has_bits_[0] &= ~0x00000080u;
}
void LineParam::clear_linequality() {
  linequality_ = 0;
  clear_has_linequality();
}
::google::protobuf::int32 LineParam::linequality() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.lineQuality)
  return linequality_;
}
void LineParam::set_linequality(::google::protobuf::int32 value) {
  set_has_linequality();
  linequality_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.lineQuality)
}

// optional float linewidth = 9;
bool LineParam::has_linewidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LineParam::set_has_linewidth() {
  _has_bits_[0] |= 0x00000100u;
}
void LineParam::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000100u;
}
void LineParam::clear_linewidth() {
  linewidth_ = 0;
  clear_has_linewidth();
}
float LineParam::linewidth() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.linewidth)
  return linewidth_;
}
void LineParam::set_linewidth(float value) {
  set_has_linewidth();
  linewidth_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.linewidth)
}

// optional float c0_std = 14;
bool LineParam::has_c0_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LineParam::set_has_c0_std() {
  _has_bits_[0] |= 0x00002000u;
}
void LineParam::clear_has_c0_std() {
  _has_bits_[0] &= ~0x00002000u;
}
void LineParam::clear_c0_std() {
  c0_std_ = 0;
  clear_has_c0_std();
}
float LineParam::c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c0_std)
  return c0_std_;
}
void LineParam::set_c0_std(float value) {
  set_has_c0_std();
  c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c0_std)
}

// optional float c1_std = 11;
bool LineParam::has_c1_std() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LineParam::set_has_c1_std() {
  _has_bits_[0] |= 0x00000400u;
}
void LineParam::clear_has_c1_std() {
  _has_bits_[0] &= ~0x00000400u;
}
void LineParam::clear_c1_std() {
  c1_std_ = 0;
  clear_has_c1_std();
}
float LineParam::c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c1_std)
  return c1_std_;
}
void LineParam::set_c1_std(float value) {
  set_has_c1_std();
  c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c1_std)
}

// optional float c2_std = 12;
bool LineParam::has_c2_std() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LineParam::set_has_c2_std() {
  _has_bits_[0] |= 0x00000800u;
}
void LineParam::clear_has_c2_std() {
  _has_bits_[0] &= ~0x00000800u;
}
void LineParam::clear_c2_std() {
  c2_std_ = 0;
  clear_has_c2_std();
}
float LineParam::c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c2_std)
  return c2_std_;
}
void LineParam::set_c2_std(float value) {
  set_has_c2_std();
  c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c2_std)
}

// optional float c3_std = 13;
bool LineParam::has_c3_std() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LineParam::set_has_c3_std() {
  _has_bits_[0] |= 0x00001000u;
}
void LineParam::clear_has_c3_std() {
  _has_bits_[0] &= ~0x00001000u;
}
void LineParam::clear_c3_std() {
  c3_std_ = 0;
  clear_has_c3_std();
}
float LineParam::c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c3_std)
  return c3_std_;
}
void LineParam::set_c3_std(float value) {
  set_has_c3_std();
  c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c3_std)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_Lane_Support::kHeaderFieldNumber;
const int Dt_Record_Lane_Support::kReservedmsgFieldNumber;
const int Dt_Record_Lane_Support::kStlscommonFieldNumber;
const int Dt_Record_Lane_Support::kDtArray2LsHostLineFieldNumber;
const int Dt_Record_Lane_Support::kDtArray4LsAdjacentLineFieldNumber;
const int Dt_Record_Lane_Support::kLeftLineFieldNumber;
const int Dt_Record_Lane_Support::kRightLineFieldNumber;
const int Dt_Record_Lane_Support::kMeLaneStatusFieldNumber;
const int Dt_Record_Lane_Support::kNextLeftLineFieldNumber;
const int Dt_Record_Lane_Support::kNextRightLineFieldNumber;
const int Dt_Record_Lane_Support::kRoleTypeLostAdjacentLineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_Lane_Support::Dt_Record_Lane_Support()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_Lane_Support)
}
Dt_Record_Lane_Support::Dt_Record_Lane_Support(const Dt_Record_Lane_Support& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_2_ls_host_line_(from.dt_array_2_ls_host_line_),
      dt_array_4_ls_adjacent_line_(from.dt_array_4_ls_adjacent_line_),
      roletypelostadjacentline_(from.roletypelostadjacentline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stlscommon()) {
    stlscommon_ = new ::atd::meprocess::LSCommon(*from.stlscommon_);
  } else {
    stlscommon_ = NULL;
  }
  if (from.has_leftline()) {
    leftline_ = new ::atd::meprocess::LineParam(*from.leftline_);
  } else {
    leftline_ = NULL;
  }
  if (from.has_rightline()) {
    rightline_ = new ::atd::meprocess::LineParam(*from.rightline_);
  } else {
    rightline_ = NULL;
  }
  if (from.has_nextleftline()) {
    nextleftline_ = new ::atd::meprocess::LineParam(*from.nextleftline_);
  } else {
    nextleftline_ = NULL;
  }
  if (from.has_nextrightline()) {
    nextrightline_ = new ::atd::meprocess::LineParam(*from.nextrightline_);
  } else {
    nextrightline_ = NULL;
  }
  melanestatus_ = from.melanestatus_;
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_Lane_Support)
}

void Dt_Record_Lane_Support::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&melanestatus_) -
    reinterpret_cast<char*>(&header_) + sizeof(melanestatus_));
}

Dt_Record_Lane_Support::~Dt_Record_Lane_Support() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_Lane_Support)
  SharedDtor();
}

void Dt_Record_Lane_Support::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stlscommon_;
  }
  if (this != internal_default_instance()) {
    delete leftline_;
  }
  if (this != internal_default_instance()) {
    delete rightline_;
  }
  if (this != internal_default_instance()) {
    delete nextleftline_;
  }
  if (this != internal_default_instance()) {
    delete nextrightline_;
  }
}

void Dt_Record_Lane_Support::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_Lane_Support& Dt_Record_Lane_Support::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_Lane_Support* Dt_Record_Lane_Support::New(::google::protobuf::Arena* arena) const {
  Dt_Record_Lane_Support* n = new Dt_Record_Lane_Support;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_Lane_Support::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_Lane_Support)
  dt_array_2_ls_host_line_.Clear();
  dt_array_4_ls_adjacent_line_.Clear();
  roletypelostadjacentline_.Clear();
  if (_has_bits_[0 / 32] & 127u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stlscommon()) {
      GOOGLE_DCHECK(stlscommon_ != NULL);
      stlscommon_->::atd::meprocess::LSCommon::Clear();
    }
    if (has_leftline()) {
      GOOGLE_DCHECK(leftline_ != NULL);
      leftline_->::atd::meprocess::LineParam::Clear();
    }
    if (has_rightline()) {
      GOOGLE_DCHECK(rightline_ != NULL);
      rightline_->::atd::meprocess::LineParam::Clear();
    }
    if (has_nextleftline()) {
      GOOGLE_DCHECK(nextleftline_ != NULL);
      nextleftline_->::atd::meprocess::LineParam::Clear();
    }
    if (has_nextrightline()) {
      GOOGLE_DCHECK(nextrightline_ != NULL);
      nextrightline_->::atd::meprocess::LineParam::Clear();
    }
  }
  melanestatus_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_Lane_Support::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_Lane_Support)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LSCommon stlscommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stlscommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.LS_Host_Line dt_array_2_ls_host_line = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_2_ls_host_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.LS_Adjacent_Line dt_array_4_ls_adjacent_line = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_4_ls_adjacent_line()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LineParam LeftLine = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leftline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LineParam RightLine = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 MeLaneStatus = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_melanestatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &melanestatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LineParam NextLeftLine = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextleftline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LineParam NextRightLine = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nextrightline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.LineParam RoleTypeLostAdjacentLine = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roletypelostadjacentline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_Lane_Support)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_Lane_Support)
  return false;
#undef DO_
}

void Dt_Record_Lane_Support::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_Lane_Support)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.LSCommon stlscommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stlscommon_, output);
  }

  // repeated .atd.meprocess.LS_Host_Line dt_array_2_ls_host_line = 4;
  for (unsigned int i = 0, n = this->dt_array_2_ls_host_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_2_ls_host_line(i), output);
  }

  // repeated .atd.meprocess.LS_Adjacent_Line dt_array_4_ls_adjacent_line = 6;
  for (unsigned int i = 0, n = this->dt_array_4_ls_adjacent_line_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->dt_array_4_ls_adjacent_line(i), output);
  }

  // optional .atd.meprocess.LineParam LeftLine = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->leftline_, output);
  }

  // optional .atd.meprocess.LineParam RightLine = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->rightline_, output);
  }

  // optional int32 MeLaneStatus = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->melanestatus(), output);
  }

  // optional .atd.meprocess.LineParam NextLeftLine = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->nextleftline_, output);
  }

  // optional .atd.meprocess.LineParam NextRightLine = 11;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->nextrightline_, output);
  }

  // repeated .atd.meprocess.LineParam RoleTypeLostAdjacentLine = 12;
  for (unsigned int i = 0, n = this->roletypelostadjacentline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, this->roletypelostadjacentline(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_Lane_Support)
}

size_t Dt_Record_Lane_Support::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_Lane_Support)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.LS_Host_Line dt_array_2_ls_host_line = 4;
  {
    unsigned int count = this->dt_array_2_ls_host_line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_2_ls_host_line(i));
    }
  }

  // repeated .atd.meprocess.LS_Adjacent_Line dt_array_4_ls_adjacent_line = 6;
  {
    unsigned int count = this->dt_array_4_ls_adjacent_line_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_4_ls_adjacent_line(i));
    }
  }

  // repeated .atd.meprocess.LineParam RoleTypeLostAdjacentLine = 12;
  {
    unsigned int count = this->roletypelostadjacentline_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->roletypelostadjacentline(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.LSCommon stlscommon = 3;
    if (has_stlscommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stlscommon_);
    }

    // optional .atd.meprocess.LineParam LeftLine = 7;
    if (has_leftline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leftline_);
    }

    // optional .atd.meprocess.LineParam RightLine = 8;
    if (has_rightline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rightline_);
    }

    // optional .atd.meprocess.LineParam NextLeftLine = 10;
    if (has_nextleftline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nextleftline_);
    }

    // optional .atd.meprocess.LineParam NextRightLine = 11;
    if (has_nextrightline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->nextrightline_);
    }

    // optional int32 MeLaneStatus = 9;
    if (has_melanestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->melanestatus());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_Lane_Support::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_Lane_Support*>(&from));
}

void Dt_Record_Lane_Support::MergeFrom(const Dt_Record_Lane_Support& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_Lane_Support)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_2_ls_host_line_.MergeFrom(from.dt_array_2_ls_host_line_);
  dt_array_4_ls_adjacent_line_.MergeFrom(from.dt_array_4_ls_adjacent_line_);
  roletypelostadjacentline_.MergeFrom(from.roletypelostadjacentline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stlscommon()->::atd::meprocess::LSCommon::MergeFrom(from.stlscommon());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_leftline()->::atd::meprocess::LineParam::MergeFrom(from.leftline());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_rightline()->::atd::meprocess::LineParam::MergeFrom(from.rightline());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_nextleftline()->::atd::meprocess::LineParam::MergeFrom(from.nextleftline());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_nextrightline()->::atd::meprocess::LineParam::MergeFrom(from.nextrightline());
    }
    if (cached_has_bits & 0x00000080u) {
      melanestatus_ = from.melanestatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dt_Record_Lane_Support::CopyFrom(const Dt_Record_Lane_Support& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_Lane_Support)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_Lane_Support::IsInitialized() const {
  return true;
}

void Dt_Record_Lane_Support::Swap(Dt_Record_Lane_Support* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_Lane_Support::InternalSwap(Dt_Record_Lane_Support* other) {
  dt_array_2_ls_host_line_.InternalSwap(&other->dt_array_2_ls_host_line_);
  dt_array_4_ls_adjacent_line_.InternalSwap(&other->dt_array_4_ls_adjacent_line_);
  roletypelostadjacentline_.InternalSwap(&other->roletypelostadjacentline_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stlscommon_, other->stlscommon_);
  std::swap(leftline_, other->leftline_);
  std::swap(rightline_, other->rightline_);
  std::swap(nextleftline_, other->nextleftline_);
  std::swap(nextrightline_, other->nextrightline_);
  std::swap(melanestatus_, other->melanestatus_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_Lane_Support::GetTypeName() const {
  return "atd.meprocess.Dt_Record_Lane_Support";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_Lane_Support

// optional .atd.common.Header header = 1;
bool Dt_Record_Lane_Support::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_Lane_Support::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_Lane_Support::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_Lane_Support::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_Lane_Support::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_Lane_Support::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.header)
  return header_;
}
::atd::common::Header* Dt_Record_Lane_Support::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_Lane_Support::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_Lane_Support::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_Lane_Support::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_Lane_Support::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_Lane_Support::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_Lane_Support::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_Lane_Support::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_Lane_Support::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_Lane_Support::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
}

// optional .atd.meprocess.LSCommon stlscommon = 3;
bool Dt_Record_Lane_Support::has_stlscommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_Lane_Support::set_has_stlscommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_Lane_Support::clear_has_stlscommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_Lane_Support::clear_stlscommon() {
  if (stlscommon_ != NULL) stlscommon_->::atd::meprocess::LSCommon::Clear();
  clear_has_stlscommon();
}
const ::atd::meprocess::LSCommon& Dt_Record_Lane_Support::stlscommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
  return stlscommon_ != NULL ? *stlscommon_
                         : *::atd::meprocess::LSCommon::internal_default_instance();
}
::atd::meprocess::LSCommon* Dt_Record_Lane_Support::mutable_stlscommon() {
  set_has_stlscommon();
  if (stlscommon_ == NULL) {
    stlscommon_ = new ::atd::meprocess::LSCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
  return stlscommon_;
}
::atd::meprocess::LSCommon* Dt_Record_Lane_Support::release_stlscommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
  clear_has_stlscommon();
  ::atd::meprocess::LSCommon* temp = stlscommon_;
  stlscommon_ = NULL;
  return temp;
}
void Dt_Record_Lane_Support::set_allocated_stlscommon(::atd::meprocess::LSCommon* stlscommon) {
  delete stlscommon_;
  stlscommon_ = stlscommon;
  if (stlscommon) {
    set_has_stlscommon();
  } else {
    clear_has_stlscommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
}

// repeated .atd.meprocess.LS_Host_Line dt_array_2_ls_host_line = 4;
int Dt_Record_Lane_Support::dt_array_2_ls_host_line_size() const {
  return dt_array_2_ls_host_line_.size();
}
void Dt_Record_Lane_Support::clear_dt_array_2_ls_host_line() {
  dt_array_2_ls_host_line_.Clear();
}
const ::atd::meprocess::LS_Host_Line& Dt_Record_Lane_Support::dt_array_2_ls_host_line(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_.Get(index);
}
::atd::meprocess::LS_Host_Line* Dt_Record_Lane_Support::mutable_dt_array_2_ls_host_line(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_.Mutable(index);
}
::atd::meprocess::LS_Host_Line* Dt_Record_Lane_Support::add_dt_array_2_ls_host_line() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Host_Line >*
Dt_Record_Lane_Support::mutable_dt_array_2_ls_host_line() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return &dt_array_2_ls_host_line_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Host_Line >&
Dt_Record_Lane_Support::dt_array_2_ls_host_line() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_;
}

// repeated .atd.meprocess.LS_Adjacent_Line dt_array_4_ls_adjacent_line = 6;
int Dt_Record_Lane_Support::dt_array_4_ls_adjacent_line_size() const {
  return dt_array_4_ls_adjacent_line_.size();
}
void Dt_Record_Lane_Support::clear_dt_array_4_ls_adjacent_line() {
  dt_array_4_ls_adjacent_line_.Clear();
}
const ::atd::meprocess::LS_Adjacent_Line& Dt_Record_Lane_Support::dt_array_4_ls_adjacent_line(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_.Get(index);
}
::atd::meprocess::LS_Adjacent_Line* Dt_Record_Lane_Support::mutable_dt_array_4_ls_adjacent_line(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_.Mutable(index);
}
::atd::meprocess::LS_Adjacent_Line* Dt_Record_Lane_Support::add_dt_array_4_ls_adjacent_line() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Adjacent_Line >*
Dt_Record_Lane_Support::mutable_dt_array_4_ls_adjacent_line() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return &dt_array_4_ls_adjacent_line_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Adjacent_Line >&
Dt_Record_Lane_Support::dt_array_4_ls_adjacent_line() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_;
}

// optional .atd.meprocess.LineParam LeftLine = 7;
bool Dt_Record_Lane_Support::has_leftline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Record_Lane_Support::set_has_leftline() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Record_Lane_Support::clear_has_leftline() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Record_Lane_Support::clear_leftline() {
  if (leftline_ != NULL) leftline_->::atd::meprocess::LineParam::Clear();
  clear_has_leftline();
}
const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::leftline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
  return leftline_ != NULL ? *leftline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_leftline() {
  set_has_leftline();
  if (leftline_ == NULL) {
    leftline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
  return leftline_;
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_leftline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
  clear_has_leftline();
  ::atd::meprocess::LineParam* temp = leftline_;
  leftline_ = NULL;
  return temp;
}
void Dt_Record_Lane_Support::set_allocated_leftline(::atd::meprocess::LineParam* leftline) {
  delete leftline_;
  leftline_ = leftline;
  if (leftline) {
    set_has_leftline();
  } else {
    clear_has_leftline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
}

// optional .atd.meprocess.LineParam RightLine = 8;
bool Dt_Record_Lane_Support::has_rightline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Record_Lane_Support::set_has_rightline() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Record_Lane_Support::clear_has_rightline() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Record_Lane_Support::clear_rightline() {
  if (rightline_ != NULL) rightline_->::atd::meprocess::LineParam::Clear();
  clear_has_rightline();
}
const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::rightline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.RightLine)
  return rightline_ != NULL ? *rightline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_rightline() {
  set_has_rightline();
  if (rightline_ == NULL) {
    rightline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.RightLine)
  return rightline_;
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_rightline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.RightLine)
  clear_has_rightline();
  ::atd::meprocess::LineParam* temp = rightline_;
  rightline_ = NULL;
  return temp;
}
void Dt_Record_Lane_Support::set_allocated_rightline(::atd::meprocess::LineParam* rightline) {
  delete rightline_;
  rightline_ = rightline;
  if (rightline) {
    set_has_rightline();
  } else {
    clear_has_rightline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.RightLine)
}

// optional int32 MeLaneStatus = 9;
bool Dt_Record_Lane_Support::has_melanestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Record_Lane_Support::set_has_melanestatus() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Record_Lane_Support::clear_has_melanestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Record_Lane_Support::clear_melanestatus() {
  melanestatus_ = 0;
  clear_has_melanestatus();
}
::google::protobuf::int32 Dt_Record_Lane_Support::melanestatus() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.MeLaneStatus)
  return melanestatus_;
}
void Dt_Record_Lane_Support::set_melanestatus(::google::protobuf::int32 value) {
  set_has_melanestatus();
  melanestatus_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Lane_Support.MeLaneStatus)
}

// optional .atd.meprocess.LineParam NextLeftLine = 10;
bool Dt_Record_Lane_Support::has_nextleftline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Record_Lane_Support::set_has_nextleftline() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Record_Lane_Support::clear_has_nextleftline() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Record_Lane_Support::clear_nextleftline() {
  if (nextleftline_ != NULL) nextleftline_->::atd::meprocess::LineParam::Clear();
  clear_has_nextleftline();
}
const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::nextleftline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
  return nextleftline_ != NULL ? *nextleftline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_nextleftline() {
  set_has_nextleftline();
  if (nextleftline_ == NULL) {
    nextleftline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
  return nextleftline_;
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_nextleftline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
  clear_has_nextleftline();
  ::atd::meprocess::LineParam* temp = nextleftline_;
  nextleftline_ = NULL;
  return temp;
}
void Dt_Record_Lane_Support::set_allocated_nextleftline(::atd::meprocess::LineParam* nextleftline) {
  delete nextleftline_;
  nextleftline_ = nextleftline;
  if (nextleftline) {
    set_has_nextleftline();
  } else {
    clear_has_nextleftline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
}

// optional .atd.meprocess.LineParam NextRightLine = 11;
bool Dt_Record_Lane_Support::has_nextrightline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Record_Lane_Support::set_has_nextrightline() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Record_Lane_Support::clear_has_nextrightline() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Record_Lane_Support::clear_nextrightline() {
  if (nextrightline_ != NULL) nextrightline_->::atd::meprocess::LineParam::Clear();
  clear_has_nextrightline();
}
const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::nextrightline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
  return nextrightline_ != NULL ? *nextrightline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_nextrightline() {
  set_has_nextrightline();
  if (nextrightline_ == NULL) {
    nextrightline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
  return nextrightline_;
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_nextrightline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
  clear_has_nextrightline();
  ::atd::meprocess::LineParam* temp = nextrightline_;
  nextrightline_ = NULL;
  return temp;
}
void Dt_Record_Lane_Support::set_allocated_nextrightline(::atd::meprocess::LineParam* nextrightline) {
  delete nextrightline_;
  nextrightline_ = nextrightline;
  if (nextrightline) {
    set_has_nextrightline();
  } else {
    clear_has_nextrightline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
}

// repeated .atd.meprocess.LineParam RoleTypeLostAdjacentLine = 12;
int Dt_Record_Lane_Support::roletypelostadjacentline_size() const {
  return roletypelostadjacentline_.size();
}
void Dt_Record_Lane_Support::clear_roletypelostadjacentline() {
  roletypelostadjacentline_.Clear();
}
const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::roletypelostadjacentline(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_.Get(index);
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_roletypelostadjacentline(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_.Mutable(index);
}
::atd::meprocess::LineParam* Dt_Record_Lane_Support::add_roletypelostadjacentline() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::LineParam >*
Dt_Record_Lane_Support::mutable_roletypelostadjacentline() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return &roletypelostadjacentline_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LineParam >&
Dt_Record_Lane_Support::roletypelostadjacentline() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LS_Host_Line::kValidFieldNumber;
const int LS_Host_Line::kTrackIdFieldNumber;
const int LS_Host_Line::kAgeFieldNumber;
const int LS_Host_Line::kExistenceProbabilityFieldNumber;
const int LS_Host_Line::kColorFieldNumber;
const int LS_Host_Line::kPredictionTypeFieldNumber;
const int LS_Host_Line::kReserved1FieldNumber;
const int LS_Host_Line::kTypeClassificationFieldNumber;
const int LS_Host_Line::kDlmTypeFieldNumber;
const int LS_Host_Line::kDecelTypeFieldNumber;
const int LS_Host_Line::kViewRangeStartFieldNumber;
const int LS_Host_Line::kReserved2FieldNumber;
const int LS_Host_Line::kViewRangeEndFieldNumber;
const int LS_Host_Line::kCrossingFieldNumber;
const int LS_Host_Line::kMarkerWidthFieldNumber;
const int LS_Host_Line::kMarkerWidthStdFieldNumber;
const int LS_Host_Line::kReserved3FieldNumber;
const int LS_Host_Line::kDashAverageLengthFieldNumber;
const int LS_Host_Line::kDashAverageGapFieldNumber;
const int LS_Host_Line::kReserved4FieldNumber;
const int LS_Host_Line::kLineC0FieldNumber;
const int LS_Host_Line::kLineC0StdFieldNumber;
const int LS_Host_Line::kReserved5FieldNumber;
const int LS_Host_Line::kEstimatedWidthFieldNumber;
const int LS_Host_Line::kLineC1FieldNumber;
const int LS_Host_Line::kLineC1StdFieldNumber;
const int LS_Host_Line::kReserved6FieldNumber;
const int LS_Host_Line::kLineC2FieldNumber;
const int LS_Host_Line::kLineC2StdFieldNumber;
const int LS_Host_Line::kLineC3FieldNumber;
const int LS_Host_Line::kLineC3StdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LS_Host_Line::LS_Host_Line()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.LS_Host_Line)
}
LS_Host_Line::LS_Host_Line(const LS_Host_Line& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&track_id_, &from.track_id_,
    reinterpret_cast<char*>(&line_c3_std_) -
    reinterpret_cast<char*>(&track_id_) + sizeof(line_c3_std_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.LS_Host_Line)
}

void LS_Host_Line::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&track_id_, 0, reinterpret_cast<char*>(&line_c3_std_) -
    reinterpret_cast<char*>(&track_id_) + sizeof(line_c3_std_));
}

LS_Host_Line::~LS_Host_Line() {
  // @@protoc_insertion_point(destructor:atd.meprocess.LS_Host_Line)
  SharedDtor();
}

void LS_Host_Line::SharedDtor() {
}

void LS_Host_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LS_Host_Line& LS_Host_Line::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

LS_Host_Line* LS_Host_Line::New(::google::protobuf::Arena* arena) const {
  LS_Host_Line* n = new LS_Host_Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LS_Host_Line::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.LS_Host_Line)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&track_id_, 0, reinterpret_cast<char*>(&valid_) -
      reinterpret_cast<char*>(&track_id_) + sizeof(valid_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&reserved_1_, 0, reinterpret_cast<char*>(&marker_width_) -
      reinterpret_cast<char*>(&reserved_1_) + sizeof(marker_width_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&marker_width_std_, 0, reinterpret_cast<char*>(&estimated_width_) -
      reinterpret_cast<char*>(&marker_width_std_) + sizeof(estimated_width_));
  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    ::memset(&line_c1_, 0, reinterpret_cast<char*>(&line_c3_std_) -
      reinterpret_cast<char*>(&line_c1_) + sizeof(line_c3_std_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LS_Host_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.LS_Host_Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 track_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float existence_probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_existence_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Host_Line.ColorType color = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Host_Line_ColorType_IsValid(value)) {
            set_color(static_cast< ::atd::meprocess::LS_Host_Line_ColorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prediction_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_prediction_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prediction_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Host_Line.Type_classificationType type_classification = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Host_Line_Type_classificationType_IsValid(value)) {
            set_type_classification(static_cast< ::atd::meprocess::LS_Host_Line_Type_classificationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Host_Line.Dlm_typeType dlm_type = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Host_Line_Dlm_typeType_IsValid(value)) {
            set_dlm_type(static_cast< ::atd::meprocess::LS_Host_Line_Dlm_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Host_Line.Decel_typeType decel_type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Host_Line_Decel_typeType_IsValid(value)) {
            set_decel_type(static_cast< ::atd::meprocess::LS_Host_Line_Decel_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_range_start = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_view_range_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_range_end = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_view_range_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool crossing = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_crossing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &crossing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float marker_width = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_marker_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float marker_width_std = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_marker_width_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_3 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dash_average_length = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_dash_average_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dash_average_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dash_average_gap = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          set_has_dash_average_gap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dash_average_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c0 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_line_c0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c0_std = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_line_c0_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c0_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_5 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_reserved_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float estimated_width = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_estimated_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &estimated_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c1 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          set_has_line_c1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c1_std = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u)) {
          set_has_line_c1_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c1_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_6 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_reserved_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c2 = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(225u)) {
          set_has_line_c2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c2_std = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(233u)) {
          set_has_line_c2_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c2_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c3 = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(241u)) {
          set_has_line_c3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c3_std = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(249u)) {
          set_has_line_c3_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c3_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.LS_Host_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.LS_Host_Line)
  return false;
#undef DO_
}

void LS_Host_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.LS_Host_Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool valid = 1;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // optional int32 track_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->track_id(), output);
  }

  // optional int32 age = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->age(), output);
  }

  // optional float existence_probability = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->existence_probability(), output);
  }

  // optional .atd.meprocess.LS_Host_Line.ColorType color = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->color(), output);
  }

  // optional int32 prediction_type = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->prediction_type(), output);
  }

  // optional bool reserved_1 = 7;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->reserved_1(), output);
  }

  // optional .atd.meprocess.LS_Host_Line.Type_classificationType type_classification = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->type_classification(), output);
  }

  // optional .atd.meprocess.LS_Host_Line.Dlm_typeType dlm_type = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->dlm_type(), output);
  }

  // optional .atd.meprocess.LS_Host_Line.Decel_typeType decel_type = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->decel_type(), output);
  }

  // optional float view_range_start = 11;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->view_range_start(), output);
  }

  // optional int32 reserved_2 = 12;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reserved_2(), output);
  }

  // optional float view_range_end = 13;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->view_range_end(), output);
  }

  // optional bool crossing = 14;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->crossing(), output);
  }

  // optional float marker_width = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->marker_width(), output);
  }

  // optional float marker_width_std = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->marker_width_std(), output);
  }

  // optional bool reserved_3 = 17;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->reserved_3(), output);
  }

  // optional float dash_average_length = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->dash_average_length(), output);
  }

  // optional float dash_average_gap = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->dash_average_gap(), output);
  }

  // optional int32 reserved_4 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->reserved_4(), output);
  }

  // optional float line_c0 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->line_c0(), output);
  }

  // optional float line_c0_std = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->line_c0_std(), output);
  }

  // optional int32 reserved_5 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->reserved_5(), output);
  }

  // optional float estimated_width = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->estimated_width(), output);
  }

  // optional float line_c1 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->line_c1(), output);
  }

  // optional float line_c1_std = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->line_c1_std(), output);
  }

  // optional bool reserved_6 = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->reserved_6(), output);
  }

  // optional double line_c2 = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->line_c2(), output);
  }

  // optional double line_c2_std = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(29, this->line_c2_std(), output);
  }

  // optional double line_c3 = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(30, this->line_c3(), output);
  }

  // optional double line_c3_std = 31;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(31, this->line_c3_std(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.LS_Host_Line)
}

size_t LS_Host_Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.LS_Host_Line)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 track_id = 2;
    if (has_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->track_id());
    }

    // optional int32 age = 3;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional float existence_probability = 4;
    if (has_existence_probability()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.LS_Host_Line.ColorType color = 5;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional int32 prediction_type = 6;
    if (has_prediction_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prediction_type());
    }

    // optional .atd.meprocess.LS_Host_Line.Type_classificationType type_classification = 8;
    if (has_type_classification()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_classification());
    }

    // optional .atd.meprocess.LS_Host_Line.Dlm_typeType dlm_type = 9;
    if (has_dlm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dlm_type());
    }

    // optional bool valid = 1;
    if (has_valid()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool reserved_1 = 7;
    if (has_reserved_1()) {
      total_size += 1 + 1;
    }

    // optional bool crossing = 14;
    if (has_crossing()) {
      total_size += 1 + 1;
    }

    // optional bool reserved_3 = 17;
    if (has_reserved_3()) {
      total_size += 2 + 1;
    }

    // optional .atd.meprocess.LS_Host_Line.Decel_typeType decel_type = 10;
    if (has_decel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->decel_type());
    }

    // optional float view_range_start = 11;
    if (has_view_range_start()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_2 = 12;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional float view_range_end = 13;
    if (has_view_range_end()) {
      total_size += 1 + 4;
    }

    // optional float marker_width = 15;
    if (has_marker_width()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float marker_width_std = 16;
    if (has_marker_width_std()) {
      total_size += 2 + 4;
    }

    // optional float dash_average_length = 18;
    if (has_dash_average_length()) {
      total_size += 2 + 4;
    }

    // optional float dash_average_gap = 19;
    if (has_dash_average_gap()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_4 = 20;
    if (has_reserved_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional float line_c0 = 21;
    if (has_line_c0()) {
      total_size += 2 + 4;
    }

    // optional float line_c0_std = 22;
    if (has_line_c0_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_5 = 23;
    if (has_reserved_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_5());
    }

    // optional float estimated_width = 24;
    if (has_estimated_width()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 2130706432u) {
    // optional float line_c1 = 25;
    if (has_line_c1()) {
      total_size += 2 + 4;
    }

    // optional float line_c1_std = 26;
    if (has_line_c1_std()) {
      total_size += 2 + 4;
    }

    // optional bool reserved_6 = 27;
    if (has_reserved_6()) {
      total_size += 2 + 1;
    }

    // optional double line_c2 = 28;
    if (has_line_c2()) {
      total_size += 2 + 8;
    }

    // optional double line_c2_std = 29;
    if (has_line_c2_std()) {
      total_size += 2 + 8;
    }

    // optional double line_c3 = 30;
    if (has_line_c3()) {
      total_size += 2 + 8;
    }

    // optional double line_c3_std = 31;
    if (has_line_c3_std()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LS_Host_Line::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LS_Host_Line*>(&from));
}

void LS_Host_Line::MergeFrom(const LS_Host_Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.LS_Host_Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      track_id_ = from.track_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000004u) {
      existence_probability_ = from.existence_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000010u) {
      prediction_type_ = from.prediction_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_classification_ = from.type_classification_;
    }
    if (cached_has_bits & 0x00000040u) {
      dlm_type_ = from.dlm_type_;
    }
    if (cached_has_bits & 0x00000080u) {
      valid_ = from.valid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000200u) {
      crossing_ = from.crossing_;
    }
    if (cached_has_bits & 0x00000400u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00000800u) {
      decel_type_ = from.decel_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      view_range_start_ = from.view_range_start_;
    }
    if (cached_has_bits & 0x00002000u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00004000u) {
      view_range_end_ = from.view_range_end_;
    }
    if (cached_has_bits & 0x00008000u) {
      marker_width_ = from.marker_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      marker_width_std_ = from.marker_width_std_;
    }
    if (cached_has_bits & 0x00020000u) {
      dash_average_length_ = from.dash_average_length_;
    }
    if (cached_has_bits & 0x00040000u) {
      dash_average_gap_ = from.dash_average_gap_;
    }
    if (cached_has_bits & 0x00080000u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00100000u) {
      line_c0_ = from.line_c0_;
    }
    if (cached_has_bits & 0x00200000u) {
      line_c0_std_ = from.line_c0_std_;
    }
    if (cached_has_bits & 0x00400000u) {
      reserved_5_ = from.reserved_5_;
    }
    if (cached_has_bits & 0x00800000u) {
      estimated_width_ = from.estimated_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 2130706432u) {
    if (cached_has_bits & 0x01000000u) {
      line_c1_ = from.line_c1_;
    }
    if (cached_has_bits & 0x02000000u) {
      line_c1_std_ = from.line_c1_std_;
    }
    if (cached_has_bits & 0x04000000u) {
      reserved_6_ = from.reserved_6_;
    }
    if (cached_has_bits & 0x08000000u) {
      line_c2_ = from.line_c2_;
    }
    if (cached_has_bits & 0x10000000u) {
      line_c2_std_ = from.line_c2_std_;
    }
    if (cached_has_bits & 0x20000000u) {
      line_c3_ = from.line_c3_;
    }
    if (cached_has_bits & 0x40000000u) {
      line_c3_std_ = from.line_c3_std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LS_Host_Line::CopyFrom(const LS_Host_Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.LS_Host_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LS_Host_Line::IsInitialized() const {
  return true;
}

void LS_Host_Line::Swap(LS_Host_Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LS_Host_Line::InternalSwap(LS_Host_Line* other) {
  std::swap(track_id_, other->track_id_);
  std::swap(age_, other->age_);
  std::swap(existence_probability_, other->existence_probability_);
  std::swap(color_, other->color_);
  std::swap(prediction_type_, other->prediction_type_);
  std::swap(type_classification_, other->type_classification_);
  std::swap(dlm_type_, other->dlm_type_);
  std::swap(valid_, other->valid_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(crossing_, other->crossing_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(decel_type_, other->decel_type_);
  std::swap(view_range_start_, other->view_range_start_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(view_range_end_, other->view_range_end_);
  std::swap(marker_width_, other->marker_width_);
  std::swap(marker_width_std_, other->marker_width_std_);
  std::swap(dash_average_length_, other->dash_average_length_);
  std::swap(dash_average_gap_, other->dash_average_gap_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(line_c0_, other->line_c0_);
  std::swap(line_c0_std_, other->line_c0_std_);
  std::swap(reserved_5_, other->reserved_5_);
  std::swap(estimated_width_, other->estimated_width_);
  std::swap(line_c1_, other->line_c1_);
  std::swap(line_c1_std_, other->line_c1_std_);
  std::swap(reserved_6_, other->reserved_6_);
  std::swap(line_c2_, other->line_c2_);
  std::swap(line_c2_std_, other->line_c2_std_);
  std::swap(line_c3_, other->line_c3_);
  std::swap(line_c3_std_, other->line_c3_std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LS_Host_Line::GetTypeName() const {
  return "atd.meprocess.LS_Host_Line";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LS_Host_Line

// optional bool valid = 1;
bool LS_Host_Line::has_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LS_Host_Line::set_has_valid() {
  _has_bits_[0] |= 0x00000080u;
}
void LS_Host_Line::clear_has_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
void LS_Host_Line::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
bool LS_Host_Line::valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.valid)
  return valid_;
}
void LS_Host_Line::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.valid)
}

// optional int32 track_id = 2;
bool LS_Host_Line::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LS_Host_Line::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LS_Host_Line::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LS_Host_Line::clear_track_id() {
  track_id_ = 0;
  clear_has_track_id();
}
::google::protobuf::int32 LS_Host_Line::track_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.track_id)
  return track_id_;
}
void LS_Host_Line::set_track_id(::google::protobuf::int32 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.track_id)
}

// optional int32 age = 3;
bool LS_Host_Line::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LS_Host_Line::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
void LS_Host_Line::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void LS_Host_Line::clear_age() {
  age_ = 0;
  clear_has_age();
}
::google::protobuf::int32 LS_Host_Line::age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.age)
  return age_;
}
void LS_Host_Line::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.age)
}

// optional float existence_probability = 4;
bool LS_Host_Line::has_existence_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LS_Host_Line::set_has_existence_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void LS_Host_Line::clear_has_existence_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void LS_Host_Line::clear_existence_probability() {
  existence_probability_ = 0;
  clear_has_existence_probability();
}
float LS_Host_Line::existence_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.existence_probability)
  return existence_probability_;
}
void LS_Host_Line::set_existence_probability(float value) {
  set_has_existence_probability();
  existence_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.existence_probability)
}

// optional .atd.meprocess.LS_Host_Line.ColorType color = 5;
bool LS_Host_Line::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LS_Host_Line::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void LS_Host_Line::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void LS_Host_Line::clear_color() {
  color_ = 0;
  clear_has_color();
}
::atd::meprocess::LS_Host_Line_ColorType LS_Host_Line::color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.color)
  return static_cast< ::atd::meprocess::LS_Host_Line_ColorType >(color_);
}
void LS_Host_Line::set_color(::atd::meprocess::LS_Host_Line_ColorType value) {
  assert(::atd::meprocess::LS_Host_Line_ColorType_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.color)
}

// optional int32 prediction_type = 6;
bool LS_Host_Line::has_prediction_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LS_Host_Line::set_has_prediction_type() {
  _has_bits_[0] |= 0x00000010u;
}
void LS_Host_Line::clear_has_prediction_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void LS_Host_Line::clear_prediction_type() {
  prediction_type_ = 0;
  clear_has_prediction_type();
}
::google::protobuf::int32 LS_Host_Line::prediction_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.prediction_type)
  return prediction_type_;
}
void LS_Host_Line::set_prediction_type(::google::protobuf::int32 value) {
  set_has_prediction_type();
  prediction_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.prediction_type)
}

// optional bool reserved_1 = 7;
bool LS_Host_Line::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LS_Host_Line::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000100u;
}
void LS_Host_Line::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000100u;
}
void LS_Host_Line::clear_reserved_1() {
  reserved_1_ = false;
  clear_has_reserved_1();
}
bool LS_Host_Line::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_1)
  return reserved_1_;
}
void LS_Host_Line::set_reserved_1(bool value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_1)
}

// optional .atd.meprocess.LS_Host_Line.Type_classificationType type_classification = 8;
bool LS_Host_Line::has_type_classification() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LS_Host_Line::set_has_type_classification() {
  _has_bits_[0] |= 0x00000020u;
}
void LS_Host_Line::clear_has_type_classification() {
  _has_bits_[0] &= ~0x00000020u;
}
void LS_Host_Line::clear_type_classification() {
  type_classification_ = 0;
  clear_has_type_classification();
}
::atd::meprocess::LS_Host_Line_Type_classificationType LS_Host_Line::type_classification() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.type_classification)
  return static_cast< ::atd::meprocess::LS_Host_Line_Type_classificationType >(type_classification_);
}
void LS_Host_Line::set_type_classification(::atd::meprocess::LS_Host_Line_Type_classificationType value) {
  assert(::atd::meprocess::LS_Host_Line_Type_classificationType_IsValid(value));
  set_has_type_classification();
  type_classification_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.type_classification)
}

// optional .atd.meprocess.LS_Host_Line.Dlm_typeType dlm_type = 9;
bool LS_Host_Line::has_dlm_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LS_Host_Line::set_has_dlm_type() {
  _has_bits_[0] |= 0x00000040u;
}
void LS_Host_Line::clear_has_dlm_type() {
  _has_bits_[0] &= ~0x00000040u;
}
void LS_Host_Line::clear_dlm_type() {
  dlm_type_ = 0;
  clear_has_dlm_type();
}
::atd::meprocess::LS_Host_Line_Dlm_typeType LS_Host_Line::dlm_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.dlm_type)
  return static_cast< ::atd::meprocess::LS_Host_Line_Dlm_typeType >(dlm_type_);
}
void LS_Host_Line::set_dlm_type(::atd::meprocess::LS_Host_Line_Dlm_typeType value) {
  assert(::atd::meprocess::LS_Host_Line_Dlm_typeType_IsValid(value));
  set_has_dlm_type();
  dlm_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.dlm_type)
}

// optional .atd.meprocess.LS_Host_Line.Decel_typeType decel_type = 10;
bool LS_Host_Line::has_decel_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LS_Host_Line::set_has_decel_type() {
  _has_bits_[0] |= 0x00000800u;
}
void LS_Host_Line::clear_has_decel_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void LS_Host_Line::clear_decel_type() {
  decel_type_ = 0;
  clear_has_decel_type();
}
::atd::meprocess::LS_Host_Line_Decel_typeType LS_Host_Line::decel_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.decel_type)
  return static_cast< ::atd::meprocess::LS_Host_Line_Decel_typeType >(decel_type_);
}
void LS_Host_Line::set_decel_type(::atd::meprocess::LS_Host_Line_Decel_typeType value) {
  assert(::atd::meprocess::LS_Host_Line_Decel_typeType_IsValid(value));
  set_has_decel_type();
  decel_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.decel_type)
}

// optional float view_range_start = 11;
bool LS_Host_Line::has_view_range_start() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LS_Host_Line::set_has_view_range_start() {
  _has_bits_[0] |= 0x00001000u;
}
void LS_Host_Line::clear_has_view_range_start() {
  _has_bits_[0] &= ~0x00001000u;
}
void LS_Host_Line::clear_view_range_start() {
  view_range_start_ = 0;
  clear_has_view_range_start();
}
float LS_Host_Line::view_range_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.view_range_start)
  return view_range_start_;
}
void LS_Host_Line::set_view_range_start(float value) {
  set_has_view_range_start();
  view_range_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.view_range_start)
}

// optional int32 reserved_2 = 12;
bool LS_Host_Line::has_reserved_2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LS_Host_Line::set_has_reserved_2() {
  _has_bits_[0] |= 0x00002000u;
}
void LS_Host_Line::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00002000u;
}
void LS_Host_Line::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 LS_Host_Line::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_2)
  return reserved_2_;
}
void LS_Host_Line::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_2)
}

// optional float view_range_end = 13;
bool LS_Host_Line::has_view_range_end() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LS_Host_Line::set_has_view_range_end() {
  _has_bits_[0] |= 0x00004000u;
}
void LS_Host_Line::clear_has_view_range_end() {
  _has_bits_[0] &= ~0x00004000u;
}
void LS_Host_Line::clear_view_range_end() {
  view_range_end_ = 0;
  clear_has_view_range_end();
}
float LS_Host_Line::view_range_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.view_range_end)
  return view_range_end_;
}
void LS_Host_Line::set_view_range_end(float value) {
  set_has_view_range_end();
  view_range_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.view_range_end)
}

// optional bool crossing = 14;
bool LS_Host_Line::has_crossing() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LS_Host_Line::set_has_crossing() {
  _has_bits_[0] |= 0x00000200u;
}
void LS_Host_Line::clear_has_crossing() {
  _has_bits_[0] &= ~0x00000200u;
}
void LS_Host_Line::clear_crossing() {
  crossing_ = false;
  clear_has_crossing();
}
bool LS_Host_Line::crossing() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.crossing)
  return crossing_;
}
void LS_Host_Line::set_crossing(bool value) {
  set_has_crossing();
  crossing_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.crossing)
}

// optional float marker_width = 15;
bool LS_Host_Line::has_marker_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LS_Host_Line::set_has_marker_width() {
  _has_bits_[0] |= 0x00008000u;
}
void LS_Host_Line::clear_has_marker_width() {
  _has_bits_[0] &= ~0x00008000u;
}
void LS_Host_Line::clear_marker_width() {
  marker_width_ = 0;
  clear_has_marker_width();
}
float LS_Host_Line::marker_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.marker_width)
  return marker_width_;
}
void LS_Host_Line::set_marker_width(float value) {
  set_has_marker_width();
  marker_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.marker_width)
}

// optional float marker_width_std = 16;
bool LS_Host_Line::has_marker_width_std() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LS_Host_Line::set_has_marker_width_std() {
  _has_bits_[0] |= 0x00010000u;
}
void LS_Host_Line::clear_has_marker_width_std() {
  _has_bits_[0] &= ~0x00010000u;
}
void LS_Host_Line::clear_marker_width_std() {
  marker_width_std_ = 0;
  clear_has_marker_width_std();
}
float LS_Host_Line::marker_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.marker_width_std)
  return marker_width_std_;
}
void LS_Host_Line::set_marker_width_std(float value) {
  set_has_marker_width_std();
  marker_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.marker_width_std)
}

// optional bool reserved_3 = 17;
bool LS_Host_Line::has_reserved_3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LS_Host_Line::set_has_reserved_3() {
  _has_bits_[0] |= 0x00000400u;
}
void LS_Host_Line::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00000400u;
}
void LS_Host_Line::clear_reserved_3() {
  reserved_3_ = false;
  clear_has_reserved_3();
}
bool LS_Host_Line::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_3)
  return reserved_3_;
}
void LS_Host_Line::set_reserved_3(bool value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_3)
}

// optional float dash_average_length = 18;
bool LS_Host_Line::has_dash_average_length() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LS_Host_Line::set_has_dash_average_length() {
  _has_bits_[0] |= 0x00020000u;
}
void LS_Host_Line::clear_has_dash_average_length() {
  _has_bits_[0] &= ~0x00020000u;
}
void LS_Host_Line::clear_dash_average_length() {
  dash_average_length_ = 0;
  clear_has_dash_average_length();
}
float LS_Host_Line::dash_average_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.dash_average_length)
  return dash_average_length_;
}
void LS_Host_Line::set_dash_average_length(float value) {
  set_has_dash_average_length();
  dash_average_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.dash_average_length)
}

// optional float dash_average_gap = 19;
bool LS_Host_Line::has_dash_average_gap() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LS_Host_Line::set_has_dash_average_gap() {
  _has_bits_[0] |= 0x00040000u;
}
void LS_Host_Line::clear_has_dash_average_gap() {
  _has_bits_[0] &= ~0x00040000u;
}
void LS_Host_Line::clear_dash_average_gap() {
  dash_average_gap_ = 0;
  clear_has_dash_average_gap();
}
float LS_Host_Line::dash_average_gap() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.dash_average_gap)
  return dash_average_gap_;
}
void LS_Host_Line::set_dash_average_gap(float value) {
  set_has_dash_average_gap();
  dash_average_gap_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.dash_average_gap)
}

// optional int32 reserved_4 = 20;
bool LS_Host_Line::has_reserved_4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LS_Host_Line::set_has_reserved_4() {
  _has_bits_[0] |= 0x00080000u;
}
void LS_Host_Line::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00080000u;
}
void LS_Host_Line::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 LS_Host_Line::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_4)
  return reserved_4_;
}
void LS_Host_Line::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_4)
}

// optional float line_c0 = 21;
bool LS_Host_Line::has_line_c0() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LS_Host_Line::set_has_line_c0() {
  _has_bits_[0] |= 0x00100000u;
}
void LS_Host_Line::clear_has_line_c0() {
  _has_bits_[0] &= ~0x00100000u;
}
void LS_Host_Line::clear_line_c0() {
  line_c0_ = 0;
  clear_has_line_c0();
}
float LS_Host_Line::line_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c0)
  return line_c0_;
}
void LS_Host_Line::set_line_c0(float value) {
  set_has_line_c0();
  line_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c0)
}

// optional float line_c0_std = 22;
bool LS_Host_Line::has_line_c0_std() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LS_Host_Line::set_has_line_c0_std() {
  _has_bits_[0] |= 0x00200000u;
}
void LS_Host_Line::clear_has_line_c0_std() {
  _has_bits_[0] &= ~0x00200000u;
}
void LS_Host_Line::clear_line_c0_std() {
  line_c0_std_ = 0;
  clear_has_line_c0_std();
}
float LS_Host_Line::line_c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c0_std)
  return line_c0_std_;
}
void LS_Host_Line::set_line_c0_std(float value) {
  set_has_line_c0_std();
  line_c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c0_std)
}

// optional int32 reserved_5 = 23;
bool LS_Host_Line::has_reserved_5() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LS_Host_Line::set_has_reserved_5() {
  _has_bits_[0] |= 0x00400000u;
}
void LS_Host_Line::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00400000u;
}
void LS_Host_Line::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
::google::protobuf::int32 LS_Host_Line::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_5)
  return reserved_5_;
}
void LS_Host_Line::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_5)
}

// optional float estimated_width = 24;
bool LS_Host_Line::has_estimated_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LS_Host_Line::set_has_estimated_width() {
  _has_bits_[0] |= 0x00800000u;
}
void LS_Host_Line::clear_has_estimated_width() {
  _has_bits_[0] &= ~0x00800000u;
}
void LS_Host_Line::clear_estimated_width() {
  estimated_width_ = 0;
  clear_has_estimated_width();
}
float LS_Host_Line::estimated_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.estimated_width)
  return estimated_width_;
}
void LS_Host_Line::set_estimated_width(float value) {
  set_has_estimated_width();
  estimated_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.estimated_width)
}

// optional float line_c1 = 25;
bool LS_Host_Line::has_line_c1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LS_Host_Line::set_has_line_c1() {
  _has_bits_[0] |= 0x01000000u;
}
void LS_Host_Line::clear_has_line_c1() {
  _has_bits_[0] &= ~0x01000000u;
}
void LS_Host_Line::clear_line_c1() {
  line_c1_ = 0;
  clear_has_line_c1();
}
float LS_Host_Line::line_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c1)
  return line_c1_;
}
void LS_Host_Line::set_line_c1(float value) {
  set_has_line_c1();
  line_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c1)
}

// optional float line_c1_std = 26;
bool LS_Host_Line::has_line_c1_std() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LS_Host_Line::set_has_line_c1_std() {
  _has_bits_[0] |= 0x02000000u;
}
void LS_Host_Line::clear_has_line_c1_std() {
  _has_bits_[0] &= ~0x02000000u;
}
void LS_Host_Line::clear_line_c1_std() {
  line_c1_std_ = 0;
  clear_has_line_c1_std();
}
float LS_Host_Line::line_c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c1_std)
  return line_c1_std_;
}
void LS_Host_Line::set_line_c1_std(float value) {
  set_has_line_c1_std();
  line_c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c1_std)
}

// optional bool reserved_6 = 27;
bool LS_Host_Line::has_reserved_6() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LS_Host_Line::set_has_reserved_6() {
  _has_bits_[0] |= 0x04000000u;
}
void LS_Host_Line::clear_has_reserved_6() {
  _has_bits_[0] &= ~0x04000000u;
}
void LS_Host_Line::clear_reserved_6() {
  reserved_6_ = false;
  clear_has_reserved_6();
}
bool LS_Host_Line::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_6)
  return reserved_6_;
}
void LS_Host_Line::set_reserved_6(bool value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_6)
}

// optional double line_c2 = 28;
bool LS_Host_Line::has_line_c2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LS_Host_Line::set_has_line_c2() {
  _has_bits_[0] |= 0x08000000u;
}
void LS_Host_Line::clear_has_line_c2() {
  _has_bits_[0] &= ~0x08000000u;
}
void LS_Host_Line::clear_line_c2() {
  line_c2_ = 0;
  clear_has_line_c2();
}
double LS_Host_Line::line_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c2)
  return line_c2_;
}
void LS_Host_Line::set_line_c2(double value) {
  set_has_line_c2();
  line_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c2)
}

// optional double line_c2_std = 29;
bool LS_Host_Line::has_line_c2_std() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void LS_Host_Line::set_has_line_c2_std() {
  _has_bits_[0] |= 0x10000000u;
}
void LS_Host_Line::clear_has_line_c2_std() {
  _has_bits_[0] &= ~0x10000000u;
}
void LS_Host_Line::clear_line_c2_std() {
  line_c2_std_ = 0;
  clear_has_line_c2_std();
}
double LS_Host_Line::line_c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c2_std)
  return line_c2_std_;
}
void LS_Host_Line::set_line_c2_std(double value) {
  set_has_line_c2_std();
  line_c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c2_std)
}

// optional double line_c3 = 30;
bool LS_Host_Line::has_line_c3() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void LS_Host_Line::set_has_line_c3() {
  _has_bits_[0] |= 0x20000000u;
}
void LS_Host_Line::clear_has_line_c3() {
  _has_bits_[0] &= ~0x20000000u;
}
void LS_Host_Line::clear_line_c3() {
  line_c3_ = 0;
  clear_has_line_c3();
}
double LS_Host_Line::line_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c3)
  return line_c3_;
}
void LS_Host_Line::set_line_c3(double value) {
  set_has_line_c3();
  line_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c3)
}

// optional double line_c3_std = 31;
bool LS_Host_Line::has_line_c3_std() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void LS_Host_Line::set_has_line_c3_std() {
  _has_bits_[0] |= 0x40000000u;
}
void LS_Host_Line::clear_has_line_c3_std() {
  _has_bits_[0] &= ~0x40000000u;
}
void LS_Host_Line::clear_line_c3_std() {
  line_c3_std_ = 0;
  clear_has_line_c3_std();
}
double LS_Host_Line::line_c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c3_std)
  return line_c3_std_;
}
void LS_Host_Line::set_line_c3_std(double value) {
  set_has_line_c3_std();
  line_c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c3_std)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LS_Adjacent_Line::kLaneTrackIdFieldNumber;
const int LS_Adjacent_Line::kAgeFieldNumber;
const int LS_Adjacent_Line::kExistProbabilityFieldNumber;
const int LS_Adjacent_Line::kColorFieldNumber;
const int LS_Adjacent_Line::kPredictionTypeFieldNumber;
const int LS_Adjacent_Line::kReserved13FieldNumber;
const int LS_Adjacent_Line::kViewRangeStartFieldNumber;
const int LS_Adjacent_Line::kViewRangeEndFieldNumber;
const int LS_Adjacent_Line::kReserved14FieldNumber;
const int LS_Adjacent_Line::kTypeClassFieldNumber;
const int LS_Adjacent_Line::kDlmTypeFieldNumber;
const int LS_Adjacent_Line::kDecelTypeFieldNumber;
const int LS_Adjacent_Line::kLineRoleFieldNumber;
const int LS_Adjacent_Line::kMarkerWidthFieldNumber;
const int LS_Adjacent_Line::kMarkerWidthStdFieldNumber;
const int LS_Adjacent_Line::kReserved15FieldNumber;
const int LS_Adjacent_Line::kDashAvgLengthFieldNumber;
const int LS_Adjacent_Line::kDashAvgGapFieldNumber;
const int LS_Adjacent_Line::kReserved16FieldNumber;
const int LS_Adjacent_Line::kLineC3FieldNumber;
const int LS_Adjacent_Line::kLineC3StdFieldNumber;
const int LS_Adjacent_Line::kLineC2FieldNumber;
const int LS_Adjacent_Line::kLineC2StdFieldNumber;
const int LS_Adjacent_Line::kLineC1FieldNumber;
const int LS_Adjacent_Line::kLineC1StdFieldNumber;
const int LS_Adjacent_Line::kReserved17FieldNumber;
const int LS_Adjacent_Line::kLineC0FieldNumber;
const int LS_Adjacent_Line::kLineC0StdFieldNumber;
const int LS_Adjacent_Line::kBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LS_Adjacent_Line::LS_Adjacent_Line()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.LS_Adjacent_Line)
}
LS_Adjacent_Line::LS_Adjacent_Line(const LS_Adjacent_Line& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&lane_track_id_, &from.lane_track_id_,
    reinterpret_cast<char*>(&buffer_) -
    reinterpret_cast<char*>(&lane_track_id_) + sizeof(buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.LS_Adjacent_Line)
}

void LS_Adjacent_Line::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&lane_track_id_, 0, reinterpret_cast<char*>(&buffer_) -
    reinterpret_cast<char*>(&lane_track_id_) + sizeof(buffer_));
}

LS_Adjacent_Line::~LS_Adjacent_Line() {
  // @@protoc_insertion_point(destructor:atd.meprocess.LS_Adjacent_Line)
  SharedDtor();
}

void LS_Adjacent_Line::SharedDtor() {
}

void LS_Adjacent_Line::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LS_Adjacent_Line& LS_Adjacent_Line::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

LS_Adjacent_Line* LS_Adjacent_Line::New(::google::protobuf::Arena* arena) const {
  LS_Adjacent_Line* n = new LS_Adjacent_Line;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LS_Adjacent_Line::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.LS_Adjacent_Line)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&lane_track_id_, 0, reinterpret_cast<char*>(&view_range_end_) -
      reinterpret_cast<char*>(&lane_track_id_) + sizeof(view_range_end_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&reserved_14_, 0, reinterpret_cast<char*>(&reserved_15_) -
      reinterpret_cast<char*>(&reserved_14_) + sizeof(reserved_15_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&dash_avg_length_, 0, reinterpret_cast<char*>(&line_c2_std_) -
      reinterpret_cast<char*>(&dash_avg_length_) + sizeof(line_c2_std_));
  }
  if (_has_bits_[24 / 32] & 520093696u) {
    ::memset(&line_c1_std_, 0, reinterpret_cast<char*>(&buffer_) -
      reinterpret_cast<char*>(&line_c1_std_) + sizeof(buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LS_Adjacent_Line::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.LS_Adjacent_Line)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 lane_track_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_lane_track_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lane_track_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float exist_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_exist_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &exist_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Adjacent_Line.ColorType color = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Adjacent_Line_ColorType_IsValid(value)) {
            set_color(static_cast< ::atd::meprocess::LS_Adjacent_Line_ColorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 prediction_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_prediction_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prediction_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_13 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_13();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_range_start = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_view_range_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float view_range_end = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_view_range_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_14 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_reserved_14();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_14_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Adjacent_Line.Type_classType type_class = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Adjacent_Line_Type_classType_IsValid(value)) {
            set_type_class(static_cast< ::atd::meprocess::LS_Adjacent_Line_Type_classType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Adjacent_Line.Dlm_typeType dlm_type = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Adjacent_Line_Dlm_typeType_IsValid(value)) {
            set_dlm_type(static_cast< ::atd::meprocess::LS_Adjacent_Line_Dlm_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Adjacent_Line.Decel_typeType decel_type = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Adjacent_Line_Decel_typeType_IsValid(value)) {
            set_decel_type(static_cast< ::atd::meprocess::LS_Adjacent_Line_Decel_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_Adjacent_Line.Line_roleType line_role = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_Adjacent_Line_Line_roleType_IsValid(value)) {
            set_line_role(static_cast< ::atd::meprocess::LS_Adjacent_Line_Line_roleType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(104u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float marker_width = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_marker_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float marker_width_std = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_marker_width_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &marker_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_15 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_reserved_15();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_15_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dash_avg_length = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_dash_avg_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dash_avg_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float dash_avg_gap = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_dash_avg_gap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &dash_avg_gap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_16 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_reserved_16();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_16_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c3 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_line_c3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c3_std = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_line_c3_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c3_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c2 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(177u)) {
          set_has_line_c2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double line_c2_std = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(185u)) {
          set_has_line_c2_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &line_c2_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c1 = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_line_c1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c1_std = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(205u)) {
          set_has_line_c1_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c1_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_17 = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_reserved_17();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_17_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c0 = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u)) {
          set_has_line_c0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float line_c0_std = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u)) {
          set_has_line_c0_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &line_c0_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 buffer = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.LS_Adjacent_Line)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.LS_Adjacent_Line)
  return false;
#undef DO_
}

void LS_Adjacent_Line::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.LS_Adjacent_Line)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 lane_track_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lane_track_id(), output);
  }

  // optional int32 age = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->age(), output);
  }

  // optional float exist_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->exist_probability(), output);
  }

  // optional .atd.meprocess.LS_Adjacent_Line.ColorType color = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->color(), output);
  }

  // optional int32 prediction_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->prediction_type(), output);
  }

  // optional int32 reserved_13 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reserved_13(), output);
  }

  // optional float view_range_start = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->view_range_start(), output);
  }

  // optional float view_range_end = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->view_range_end(), output);
  }

  // optional int32 reserved_14 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->reserved_14(), output);
  }

  // optional .atd.meprocess.LS_Adjacent_Line.Type_classType type_class = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type_class(), output);
  }

  // optional .atd.meprocess.LS_Adjacent_Line.Dlm_typeType dlm_type = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->dlm_type(), output);
  }

  // optional .atd.meprocess.LS_Adjacent_Line.Decel_typeType decel_type = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->decel_type(), output);
  }

  // optional .atd.meprocess.LS_Adjacent_Line.Line_roleType line_role = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->line_role(), output);
  }

  // optional float marker_width = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->marker_width(), output);
  }

  // optional float marker_width_std = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->marker_width_std(), output);
  }

  // optional int32 reserved_15 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reserved_15(), output);
  }

  // optional float dash_avg_length = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->dash_avg_length(), output);
  }

  // optional float dash_avg_gap = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->dash_avg_gap(), output);
  }

  // optional int32 reserved_16 = 19;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->reserved_16(), output);
  }

  // optional double line_c3 = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->line_c3(), output);
  }

  // optional double line_c3_std = 21;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->line_c3_std(), output);
  }

  // optional double line_c2 = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->line_c2(), output);
  }

  // optional double line_c2_std = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->line_c2_std(), output);
  }

  // optional float line_c1 = 24;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->line_c1(), output);
  }

  // optional float line_c1_std = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->line_c1_std(), output);
  }

  // optional int32 reserved_17 = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->reserved_17(), output);
  }

  // optional float line_c0 = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->line_c0(), output);
  }

  // optional float line_c0_std = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->line_c0_std(), output);
  }

  // optional int32 buffer = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.LS_Adjacent_Line)
}

size_t LS_Adjacent_Line::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.LS_Adjacent_Line)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 lane_track_id = 1;
    if (has_lane_track_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lane_track_id());
    }

    // optional int32 age = 2;
    if (has_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->age());
    }

    // optional float exist_probability = 3;
    if (has_exist_probability()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.LS_Adjacent_Line.ColorType color = 4;
    if (has_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->color());
    }

    // optional int32 prediction_type = 5;
    if (has_prediction_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prediction_type());
    }

    // optional int32 reserved_13 = 6;
    if (has_reserved_13()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_13());
    }

    // optional float view_range_start = 7;
    if (has_view_range_start()) {
      total_size += 1 + 4;
    }

    // optional float view_range_end = 8;
    if (has_view_range_end()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 reserved_14 = 9;
    if (has_reserved_14()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_14());
    }

    // optional .atd.meprocess.LS_Adjacent_Line.Type_classType type_class = 10;
    if (has_type_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type_class());
    }

    // optional .atd.meprocess.LS_Adjacent_Line.Dlm_typeType dlm_type = 11;
    if (has_dlm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dlm_type());
    }

    // optional .atd.meprocess.LS_Adjacent_Line.Decel_typeType decel_type = 12;
    if (has_decel_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->decel_type());
    }

    // optional .atd.meprocess.LS_Adjacent_Line.Line_roleType line_role = 13;
    if (has_line_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->line_role());
    }

    // optional float marker_width = 14;
    if (has_marker_width()) {
      total_size += 1 + 4;
    }

    // optional float marker_width_std = 15;
    if (has_marker_width_std()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_15 = 16;
    if (has_reserved_15()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_15());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float dash_avg_length = 17;
    if (has_dash_avg_length()) {
      total_size += 2 + 4;
    }

    // optional float dash_avg_gap = 18;
    if (has_dash_avg_gap()) {
      total_size += 2 + 4;
    }

    // optional double line_c3 = 20;
    if (has_line_c3()) {
      total_size += 2 + 8;
    }

    // optional double line_c3_std = 21;
    if (has_line_c3_std()) {
      total_size += 2 + 8;
    }

    // optional int32 reserved_16 = 19;
    if (has_reserved_16()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_16());
    }

    // optional float line_c1 = 24;
    if (has_line_c1()) {
      total_size += 2 + 4;
    }

    // optional double line_c2 = 22;
    if (has_line_c2()) {
      total_size += 2 + 8;
    }

    // optional double line_c2_std = 23;
    if (has_line_c2_std()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[24 / 32] & 520093696u) {
    // optional float line_c1_std = 25;
    if (has_line_c1_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_17 = 26;
    if (has_reserved_17()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_17());
    }

    // optional float line_c0 = 27;
    if (has_line_c0()) {
      total_size += 2 + 4;
    }

    // optional float line_c0_std = 28;
    if (has_line_c0_std()) {
      total_size += 2 + 4;
    }

    // optional int32 buffer = 29;
    if (has_buffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LS_Adjacent_Line::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LS_Adjacent_Line*>(&from));
}

void LS_Adjacent_Line::MergeFrom(const LS_Adjacent_Line& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.LS_Adjacent_Line)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      lane_track_id_ = from.lane_track_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      age_ = from.age_;
    }
    if (cached_has_bits & 0x00000004u) {
      exist_probability_ = from.exist_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      color_ = from.color_;
    }
    if (cached_has_bits & 0x00000010u) {
      prediction_type_ = from.prediction_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      reserved_13_ = from.reserved_13_;
    }
    if (cached_has_bits & 0x00000040u) {
      view_range_start_ = from.view_range_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      view_range_end_ = from.view_range_end_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      reserved_14_ = from.reserved_14_;
    }
    if (cached_has_bits & 0x00000200u) {
      type_class_ = from.type_class_;
    }
    if (cached_has_bits & 0x00000400u) {
      dlm_type_ = from.dlm_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      decel_type_ = from.decel_type_;
    }
    if (cached_has_bits & 0x00001000u) {
      line_role_ = from.line_role_;
    }
    if (cached_has_bits & 0x00002000u) {
      marker_width_ = from.marker_width_;
    }
    if (cached_has_bits & 0x00004000u) {
      marker_width_std_ = from.marker_width_std_;
    }
    if (cached_has_bits & 0x00008000u) {
      reserved_15_ = from.reserved_15_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      dash_avg_length_ = from.dash_avg_length_;
    }
    if (cached_has_bits & 0x00020000u) {
      dash_avg_gap_ = from.dash_avg_gap_;
    }
    if (cached_has_bits & 0x00040000u) {
      line_c3_ = from.line_c3_;
    }
    if (cached_has_bits & 0x00080000u) {
      line_c3_std_ = from.line_c3_std_;
    }
    if (cached_has_bits & 0x00100000u) {
      reserved_16_ = from.reserved_16_;
    }
    if (cached_has_bits & 0x00200000u) {
      line_c1_ = from.line_c1_;
    }
    if (cached_has_bits & 0x00400000u) {
      line_c2_ = from.line_c2_;
    }
    if (cached_has_bits & 0x00800000u) {
      line_c2_std_ = from.line_c2_std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 520093696u) {
    if (cached_has_bits & 0x01000000u) {
      line_c1_std_ = from.line_c1_std_;
    }
    if (cached_has_bits & 0x02000000u) {
      reserved_17_ = from.reserved_17_;
    }
    if (cached_has_bits & 0x04000000u) {
      line_c0_ = from.line_c0_;
    }
    if (cached_has_bits & 0x08000000u) {
      line_c0_std_ = from.line_c0_std_;
    }
    if (cached_has_bits & 0x10000000u) {
      buffer_ = from.buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LS_Adjacent_Line::CopyFrom(const LS_Adjacent_Line& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.LS_Adjacent_Line)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LS_Adjacent_Line::IsInitialized() const {
  return true;
}

void LS_Adjacent_Line::Swap(LS_Adjacent_Line* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LS_Adjacent_Line::InternalSwap(LS_Adjacent_Line* other) {
  std::swap(lane_track_id_, other->lane_track_id_);
  std::swap(age_, other->age_);
  std::swap(exist_probability_, other->exist_probability_);
  std::swap(color_, other->color_);
  std::swap(prediction_type_, other->prediction_type_);
  std::swap(reserved_13_, other->reserved_13_);
  std::swap(view_range_start_, other->view_range_start_);
  std::swap(view_range_end_, other->view_range_end_);
  std::swap(reserved_14_, other->reserved_14_);
  std::swap(type_class_, other->type_class_);
  std::swap(dlm_type_, other->dlm_type_);
  std::swap(decel_type_, other->decel_type_);
  std::swap(line_role_, other->line_role_);
  std::swap(marker_width_, other->marker_width_);
  std::swap(marker_width_std_, other->marker_width_std_);
  std::swap(reserved_15_, other->reserved_15_);
  std::swap(dash_avg_length_, other->dash_avg_length_);
  std::swap(dash_avg_gap_, other->dash_avg_gap_);
  std::swap(line_c3_, other->line_c3_);
  std::swap(line_c3_std_, other->line_c3_std_);
  std::swap(reserved_16_, other->reserved_16_);
  std::swap(line_c1_, other->line_c1_);
  std::swap(line_c2_, other->line_c2_);
  std::swap(line_c2_std_, other->line_c2_std_);
  std::swap(line_c1_std_, other->line_c1_std_);
  std::swap(reserved_17_, other->reserved_17_);
  std::swap(line_c0_, other->line_c0_);
  std::swap(line_c0_std_, other->line_c0_std_);
  std::swap(buffer_, other->buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LS_Adjacent_Line::GetTypeName() const {
  return "atd.meprocess.LS_Adjacent_Line";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LS_Adjacent_Line

// optional int32 lane_track_id = 1;
bool LS_Adjacent_Line::has_lane_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LS_Adjacent_Line::set_has_lane_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
void LS_Adjacent_Line::clear_has_lane_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void LS_Adjacent_Line::clear_lane_track_id() {
  lane_track_id_ = 0;
  clear_has_lane_track_id();
}
::google::protobuf::int32 LS_Adjacent_Line::lane_track_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.lane_track_id)
  return lane_track_id_;
}
void LS_Adjacent_Line::set_lane_track_id(::google::protobuf::int32 value) {
  set_has_lane_track_id();
  lane_track_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.lane_track_id)
}

// optional int32 age = 2;
bool LS_Adjacent_Line::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LS_Adjacent_Line::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
void LS_Adjacent_Line::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void LS_Adjacent_Line::clear_age() {
  age_ = 0;
  clear_has_age();
}
::google::protobuf::int32 LS_Adjacent_Line::age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.age)
  return age_;
}
void LS_Adjacent_Line::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.age)
}

// optional float exist_probability = 3;
bool LS_Adjacent_Line::has_exist_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LS_Adjacent_Line::set_has_exist_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void LS_Adjacent_Line::clear_has_exist_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void LS_Adjacent_Line::clear_exist_probability() {
  exist_probability_ = 0;
  clear_has_exist_probability();
}
float LS_Adjacent_Line::exist_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.exist_probability)
  return exist_probability_;
}
void LS_Adjacent_Line::set_exist_probability(float value) {
  set_has_exist_probability();
  exist_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.exist_probability)
}

// optional .atd.meprocess.LS_Adjacent_Line.ColorType color = 4;
bool LS_Adjacent_Line::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LS_Adjacent_Line::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
void LS_Adjacent_Line::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
void LS_Adjacent_Line::clear_color() {
  color_ = 0;
  clear_has_color();
}
::atd::meprocess::LS_Adjacent_Line_ColorType LS_Adjacent_Line::color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.color)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_ColorType >(color_);
}
void LS_Adjacent_Line::set_color(::atd::meprocess::LS_Adjacent_Line_ColorType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_ColorType_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.color)
}

// optional int32 prediction_type = 5;
bool LS_Adjacent_Line::has_prediction_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LS_Adjacent_Line::set_has_prediction_type() {
  _has_bits_[0] |= 0x00000010u;
}
void LS_Adjacent_Line::clear_has_prediction_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void LS_Adjacent_Line::clear_prediction_type() {
  prediction_type_ = 0;
  clear_has_prediction_type();
}
::google::protobuf::int32 LS_Adjacent_Line::prediction_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.prediction_type)
  return prediction_type_;
}
void LS_Adjacent_Line::set_prediction_type(::google::protobuf::int32 value) {
  set_has_prediction_type();
  prediction_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.prediction_type)
}

// optional int32 reserved_13 = 6;
bool LS_Adjacent_Line::has_reserved_13() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LS_Adjacent_Line::set_has_reserved_13() {
  _has_bits_[0] |= 0x00000020u;
}
void LS_Adjacent_Line::clear_has_reserved_13() {
  _has_bits_[0] &= ~0x00000020u;
}
void LS_Adjacent_Line::clear_reserved_13() {
  reserved_13_ = 0;
  clear_has_reserved_13();
}
::google::protobuf::int32 LS_Adjacent_Line::reserved_13() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_13)
  return reserved_13_;
}
void LS_Adjacent_Line::set_reserved_13(::google::protobuf::int32 value) {
  set_has_reserved_13();
  reserved_13_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_13)
}

// optional float view_range_start = 7;
bool LS_Adjacent_Line::has_view_range_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LS_Adjacent_Line::set_has_view_range_start() {
  _has_bits_[0] |= 0x00000040u;
}
void LS_Adjacent_Line::clear_has_view_range_start() {
  _has_bits_[0] &= ~0x00000040u;
}
void LS_Adjacent_Line::clear_view_range_start() {
  view_range_start_ = 0;
  clear_has_view_range_start();
}
float LS_Adjacent_Line::view_range_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.view_range_start)
  return view_range_start_;
}
void LS_Adjacent_Line::set_view_range_start(float value) {
  set_has_view_range_start();
  view_range_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.view_range_start)
}

// optional float view_range_end = 8;
bool LS_Adjacent_Line::has_view_range_end() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LS_Adjacent_Line::set_has_view_range_end() {
  _has_bits_[0] |= 0x00000080u;
}
void LS_Adjacent_Line::clear_has_view_range_end() {
  _has_bits_[0] &= ~0x00000080u;
}
void LS_Adjacent_Line::clear_view_range_end() {
  view_range_end_ = 0;
  clear_has_view_range_end();
}
float LS_Adjacent_Line::view_range_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.view_range_end)
  return view_range_end_;
}
void LS_Adjacent_Line::set_view_range_end(float value) {
  set_has_view_range_end();
  view_range_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.view_range_end)
}

// optional int32 reserved_14 = 9;
bool LS_Adjacent_Line::has_reserved_14() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void LS_Adjacent_Line::set_has_reserved_14() {
  _has_bits_[0] |= 0x00000100u;
}
void LS_Adjacent_Line::clear_has_reserved_14() {
  _has_bits_[0] &= ~0x00000100u;
}
void LS_Adjacent_Line::clear_reserved_14() {
  reserved_14_ = 0;
  clear_has_reserved_14();
}
::google::protobuf::int32 LS_Adjacent_Line::reserved_14() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_14)
  return reserved_14_;
}
void LS_Adjacent_Line::set_reserved_14(::google::protobuf::int32 value) {
  set_has_reserved_14();
  reserved_14_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_14)
}

// optional .atd.meprocess.LS_Adjacent_Line.Type_classType type_class = 10;
bool LS_Adjacent_Line::has_type_class() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void LS_Adjacent_Line::set_has_type_class() {
  _has_bits_[0] |= 0x00000200u;
}
void LS_Adjacent_Line::clear_has_type_class() {
  _has_bits_[0] &= ~0x00000200u;
}
void LS_Adjacent_Line::clear_type_class() {
  type_class_ = 0;
  clear_has_type_class();
}
::atd::meprocess::LS_Adjacent_Line_Type_classType LS_Adjacent_Line::type_class() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.type_class)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Type_classType >(type_class_);
}
void LS_Adjacent_Line::set_type_class(::atd::meprocess::LS_Adjacent_Line_Type_classType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Type_classType_IsValid(value));
  set_has_type_class();
  type_class_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.type_class)
}

// optional .atd.meprocess.LS_Adjacent_Line.Dlm_typeType dlm_type = 11;
bool LS_Adjacent_Line::has_dlm_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void LS_Adjacent_Line::set_has_dlm_type() {
  _has_bits_[0] |= 0x00000400u;
}
void LS_Adjacent_Line::clear_has_dlm_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void LS_Adjacent_Line::clear_dlm_type() {
  dlm_type_ = 0;
  clear_has_dlm_type();
}
::atd::meprocess::LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::dlm_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.dlm_type)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Dlm_typeType >(dlm_type_);
}
void LS_Adjacent_Line::set_dlm_type(::atd::meprocess::LS_Adjacent_Line_Dlm_typeType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Dlm_typeType_IsValid(value));
  set_has_dlm_type();
  dlm_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.dlm_type)
}

// optional .atd.meprocess.LS_Adjacent_Line.Decel_typeType decel_type = 12;
bool LS_Adjacent_Line::has_decel_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void LS_Adjacent_Line::set_has_decel_type() {
  _has_bits_[0] |= 0x00000800u;
}
void LS_Adjacent_Line::clear_has_decel_type() {
  _has_bits_[0] &= ~0x00000800u;
}
void LS_Adjacent_Line::clear_decel_type() {
  decel_type_ = 0;
  clear_has_decel_type();
}
::atd::meprocess::LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::decel_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.decel_type)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Decel_typeType >(decel_type_);
}
void LS_Adjacent_Line::set_decel_type(::atd::meprocess::LS_Adjacent_Line_Decel_typeType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Decel_typeType_IsValid(value));
  set_has_decel_type();
  decel_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.decel_type)
}

// optional .atd.meprocess.LS_Adjacent_Line.Line_roleType line_role = 13;
bool LS_Adjacent_Line::has_line_role() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void LS_Adjacent_Line::set_has_line_role() {
  _has_bits_[0] |= 0x00001000u;
}
void LS_Adjacent_Line::clear_has_line_role() {
  _has_bits_[0] &= ~0x00001000u;
}
void LS_Adjacent_Line::clear_line_role() {
  line_role_ = 0;
  clear_has_line_role();
}
::atd::meprocess::LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::line_role() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_role)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Line_roleType >(line_role_);
}
void LS_Adjacent_Line::set_line_role(::atd::meprocess::LS_Adjacent_Line_Line_roleType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Line_roleType_IsValid(value));
  set_has_line_role();
  line_role_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_role)
}

// optional float marker_width = 14;
bool LS_Adjacent_Line::has_marker_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void LS_Adjacent_Line::set_has_marker_width() {
  _has_bits_[0] |= 0x00002000u;
}
void LS_Adjacent_Line::clear_has_marker_width() {
  _has_bits_[0] &= ~0x00002000u;
}
void LS_Adjacent_Line::clear_marker_width() {
  marker_width_ = 0;
  clear_has_marker_width();
}
float LS_Adjacent_Line::marker_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.marker_width)
  return marker_width_;
}
void LS_Adjacent_Line::set_marker_width(float value) {
  set_has_marker_width();
  marker_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.marker_width)
}

// optional float marker_width_std = 15;
bool LS_Adjacent_Line::has_marker_width_std() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void LS_Adjacent_Line::set_has_marker_width_std() {
  _has_bits_[0] |= 0x00004000u;
}
void LS_Adjacent_Line::clear_has_marker_width_std() {
  _has_bits_[0] &= ~0x00004000u;
}
void LS_Adjacent_Line::clear_marker_width_std() {
  marker_width_std_ = 0;
  clear_has_marker_width_std();
}
float LS_Adjacent_Line::marker_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.marker_width_std)
  return marker_width_std_;
}
void LS_Adjacent_Line::set_marker_width_std(float value) {
  set_has_marker_width_std();
  marker_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.marker_width_std)
}

// optional int32 reserved_15 = 16;
bool LS_Adjacent_Line::has_reserved_15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void LS_Adjacent_Line::set_has_reserved_15() {
  _has_bits_[0] |= 0x00008000u;
}
void LS_Adjacent_Line::clear_has_reserved_15() {
  _has_bits_[0] &= ~0x00008000u;
}
void LS_Adjacent_Line::clear_reserved_15() {
  reserved_15_ = 0;
  clear_has_reserved_15();
}
::google::protobuf::int32 LS_Adjacent_Line::reserved_15() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_15)
  return reserved_15_;
}
void LS_Adjacent_Line::set_reserved_15(::google::protobuf::int32 value) {
  set_has_reserved_15();
  reserved_15_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_15)
}

// optional float dash_avg_length = 17;
bool LS_Adjacent_Line::has_dash_avg_length() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void LS_Adjacent_Line::set_has_dash_avg_length() {
  _has_bits_[0] |= 0x00010000u;
}
void LS_Adjacent_Line::clear_has_dash_avg_length() {
  _has_bits_[0] &= ~0x00010000u;
}
void LS_Adjacent_Line::clear_dash_avg_length() {
  dash_avg_length_ = 0;
  clear_has_dash_avg_length();
}
float LS_Adjacent_Line::dash_avg_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.dash_avg_length)
  return dash_avg_length_;
}
void LS_Adjacent_Line::set_dash_avg_length(float value) {
  set_has_dash_avg_length();
  dash_avg_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.dash_avg_length)
}

// optional float dash_avg_gap = 18;
bool LS_Adjacent_Line::has_dash_avg_gap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void LS_Adjacent_Line::set_has_dash_avg_gap() {
  _has_bits_[0] |= 0x00020000u;
}
void LS_Adjacent_Line::clear_has_dash_avg_gap() {
  _has_bits_[0] &= ~0x00020000u;
}
void LS_Adjacent_Line::clear_dash_avg_gap() {
  dash_avg_gap_ = 0;
  clear_has_dash_avg_gap();
}
float LS_Adjacent_Line::dash_avg_gap() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.dash_avg_gap)
  return dash_avg_gap_;
}
void LS_Adjacent_Line::set_dash_avg_gap(float value) {
  set_has_dash_avg_gap();
  dash_avg_gap_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.dash_avg_gap)
}

// optional int32 reserved_16 = 19;
bool LS_Adjacent_Line::has_reserved_16() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void LS_Adjacent_Line::set_has_reserved_16() {
  _has_bits_[0] |= 0x00100000u;
}
void LS_Adjacent_Line::clear_has_reserved_16() {
  _has_bits_[0] &= ~0x00100000u;
}
void LS_Adjacent_Line::clear_reserved_16() {
  reserved_16_ = 0;
  clear_has_reserved_16();
}
::google::protobuf::int32 LS_Adjacent_Line::reserved_16() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_16)
  return reserved_16_;
}
void LS_Adjacent_Line::set_reserved_16(::google::protobuf::int32 value) {
  set_has_reserved_16();
  reserved_16_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_16)
}

// optional double line_c3 = 20;
bool LS_Adjacent_Line::has_line_c3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c3() {
  _has_bits_[0] |= 0x00040000u;
}
void LS_Adjacent_Line::clear_has_line_c3() {
  _has_bits_[0] &= ~0x00040000u;
}
void LS_Adjacent_Line::clear_line_c3() {
  line_c3_ = 0;
  clear_has_line_c3();
}
double LS_Adjacent_Line::line_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c3)
  return line_c3_;
}
void LS_Adjacent_Line::set_line_c3(double value) {
  set_has_line_c3();
  line_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c3)
}

// optional double line_c3_std = 21;
bool LS_Adjacent_Line::has_line_c3_std() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c3_std() {
  _has_bits_[0] |= 0x00080000u;
}
void LS_Adjacent_Line::clear_has_line_c3_std() {
  _has_bits_[0] &= ~0x00080000u;
}
void LS_Adjacent_Line::clear_line_c3_std() {
  line_c3_std_ = 0;
  clear_has_line_c3_std();
}
double LS_Adjacent_Line::line_c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c3_std)
  return line_c3_std_;
}
void LS_Adjacent_Line::set_line_c3_std(double value) {
  set_has_line_c3_std();
  line_c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c3_std)
}

// optional double line_c2 = 22;
bool LS_Adjacent_Line::has_line_c2() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c2() {
  _has_bits_[0] |= 0x00400000u;
}
void LS_Adjacent_Line::clear_has_line_c2() {
  _has_bits_[0] &= ~0x00400000u;
}
void LS_Adjacent_Line::clear_line_c2() {
  line_c2_ = 0;
  clear_has_line_c2();
}
double LS_Adjacent_Line::line_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c2)
  return line_c2_;
}
void LS_Adjacent_Line::set_line_c2(double value) {
  set_has_line_c2();
  line_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c2)
}

// optional double line_c2_std = 23;
bool LS_Adjacent_Line::has_line_c2_std() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c2_std() {
  _has_bits_[0] |= 0x00800000u;
}
void LS_Adjacent_Line::clear_has_line_c2_std() {
  _has_bits_[0] &= ~0x00800000u;
}
void LS_Adjacent_Line::clear_line_c2_std() {
  line_c2_std_ = 0;
  clear_has_line_c2_std();
}
double LS_Adjacent_Line::line_c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c2_std)
  return line_c2_std_;
}
void LS_Adjacent_Line::set_line_c2_std(double value) {
  set_has_line_c2_std();
  line_c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c2_std)
}

// optional float line_c1 = 24;
bool LS_Adjacent_Line::has_line_c1() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c1() {
  _has_bits_[0] |= 0x00200000u;
}
void LS_Adjacent_Line::clear_has_line_c1() {
  _has_bits_[0] &= ~0x00200000u;
}
void LS_Adjacent_Line::clear_line_c1() {
  line_c1_ = 0;
  clear_has_line_c1();
}
float LS_Adjacent_Line::line_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c1)
  return line_c1_;
}
void LS_Adjacent_Line::set_line_c1(float value) {
  set_has_line_c1();
  line_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c1)
}

// optional float line_c1_std = 25;
bool LS_Adjacent_Line::has_line_c1_std() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c1_std() {
  _has_bits_[0] |= 0x01000000u;
}
void LS_Adjacent_Line::clear_has_line_c1_std() {
  _has_bits_[0] &= ~0x01000000u;
}
void LS_Adjacent_Line::clear_line_c1_std() {
  line_c1_std_ = 0;
  clear_has_line_c1_std();
}
float LS_Adjacent_Line::line_c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c1_std)
  return line_c1_std_;
}
void LS_Adjacent_Line::set_line_c1_std(float value) {
  set_has_line_c1_std();
  line_c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c1_std)
}

// optional int32 reserved_17 = 26;
bool LS_Adjacent_Line::has_reserved_17() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void LS_Adjacent_Line::set_has_reserved_17() {
  _has_bits_[0] |= 0x02000000u;
}
void LS_Adjacent_Line::clear_has_reserved_17() {
  _has_bits_[0] &= ~0x02000000u;
}
void LS_Adjacent_Line::clear_reserved_17() {
  reserved_17_ = 0;
  clear_has_reserved_17();
}
::google::protobuf::int32 LS_Adjacent_Line::reserved_17() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_17)
  return reserved_17_;
}
void LS_Adjacent_Line::set_reserved_17(::google::protobuf::int32 value) {
  set_has_reserved_17();
  reserved_17_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_17)
}

// optional float line_c0 = 27;
bool LS_Adjacent_Line::has_line_c0() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c0() {
  _has_bits_[0] |= 0x04000000u;
}
void LS_Adjacent_Line::clear_has_line_c0() {
  _has_bits_[0] &= ~0x04000000u;
}
void LS_Adjacent_Line::clear_line_c0() {
  line_c0_ = 0;
  clear_has_line_c0();
}
float LS_Adjacent_Line::line_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c0)
  return line_c0_;
}
void LS_Adjacent_Line::set_line_c0(float value) {
  set_has_line_c0();
  line_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c0)
}

// optional float line_c0_std = 28;
bool LS_Adjacent_Line::has_line_c0_std() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void LS_Adjacent_Line::set_has_line_c0_std() {
  _has_bits_[0] |= 0x08000000u;
}
void LS_Adjacent_Line::clear_has_line_c0_std() {
  _has_bits_[0] &= ~0x08000000u;
}
void LS_Adjacent_Line::clear_line_c0_std() {
  line_c0_std_ = 0;
  clear_has_line_c0_std();
}
float LS_Adjacent_Line::line_c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c0_std)
  return line_c0_std_;
}
void LS_Adjacent_Line::set_line_c0_std(float value) {
  set_has_line_c0_std();
  line_c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c0_std)
}

// optional int32 buffer = 29;
bool LS_Adjacent_Line::has_buffer() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void LS_Adjacent_Line::set_has_buffer() {
  _has_bits_[0] |= 0x10000000u;
}
void LS_Adjacent_Line::clear_has_buffer() {
  _has_bits_[0] &= ~0x10000000u;
}
void LS_Adjacent_Line::clear_buffer() {
  buffer_ = 0;
  clear_has_buffer();
}
::google::protobuf::int32 LS_Adjacent_Line::buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.buffer)
  return buffer_;
}
void LS_Adjacent_Line::set_buffer(::google::protobuf::int32 value) {
  set_has_buffer();
  buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ADVCommon::kLsAdvZeroByteFieldNumber;
const int ADVCommon::kLsAdvProtocolVersionFieldNumber;
const int ADVCommon::kLsAdvSyncIdFieldNumber;
const int ADVCommon::kLsIntpNumberFieldNumber;
const int ADVCommon::kLsCaIsConstructionAreaFieldNumber;
const int ADVCommon::kLsRoadVerticalSurfaceValidFieldNumber;
const int ADVCommon::kReserved1FieldNumber;
const int ADVCommon::kLsRoadVerticalSurfaceVrFieldNumber;
const int ADVCommon::kLsRoadVerticalSurfaceC0FieldNumber;
const int ADVCommon::kLsRoadVerticalSurfacC1FieldNumber;
const int ADVCommon::kReserved2FieldNumber;
const int ADVCommon::kLsRoadVerticalSurfacC2FieldNumber;
const int ADVCommon::kReserved3FieldNumber;
const int ADVCommon::kLsRoadVerticalSurfacC3FieldNumber;
const int ADVCommon::kLsPathPredValidFieldNumber;
const int ADVCommon::kLsPathPredC0FieldNumber;
const int ADVCommon::kReserved4FieldNumber;
const int ADVCommon::kLsPathPredC1FieldNumber;
const int ADVCommon::kLsPathPredC2FieldNumber;
const int ADVCommon::kReserved5FieldNumber;
const int ADVCommon::kLsPathPredC3FieldNumber;
const int ADVCommon::kLsPathPredConfFieldNumber;
const int ADVCommon::kLsPathPredHalfWidthFieldNumber;
const int ADVCommon::kLsIntpIsHighwayMergeLeftFieldNumber;
const int ADVCommon::kLsIntpIsHighwayMergeRightFieldNumber;
const int ADVCommon::kLsIntpIsHighwayExitLeftFieldNumber;
const int ADVCommon::kLsIntpIsHighwayExitRightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ADVCommon::ADVCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.ADVCommon)
}
ADVCommon::ADVCommon(const ADVCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ls_adv_zero_byte_, &from.ls_adv_zero_byte_,
    reinterpret_cast<char*>(&ls_intp_is_highway_exit_right_) -
    reinterpret_cast<char*>(&ls_adv_zero_byte_) + sizeof(ls_intp_is_highway_exit_right_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.ADVCommon)
}

void ADVCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ls_adv_zero_byte_, 0, reinterpret_cast<char*>(&ls_intp_is_highway_exit_right_) -
    reinterpret_cast<char*>(&ls_adv_zero_byte_) + sizeof(ls_intp_is_highway_exit_right_));
}

ADVCommon::~ADVCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.ADVCommon)
  SharedDtor();
}

void ADVCommon::SharedDtor() {
}

void ADVCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ADVCommon& ADVCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

ADVCommon* ADVCommon::New(::google::protobuf::Arena* arena) const {
  ADVCommon* n = new ADVCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ADVCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.ADVCommon)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ls_adv_zero_byte_, 0, reinterpret_cast<char*>(&ls_road_vertical_surfac_c1_) -
      reinterpret_cast<char*>(&ls_adv_zero_byte_) + sizeof(ls_road_vertical_surfac_c1_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&ls_road_vertical_surfac_c2_, 0, reinterpret_cast<char*>(&reserved_3_) -
      reinterpret_cast<char*>(&ls_road_vertical_surfac_c2_) + sizeof(reserved_3_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&ls_path_pred_c0_, 0, reinterpret_cast<char*>(&ls_path_pred_half_width_) -
      reinterpret_cast<char*>(&ls_path_pred_c0_) + sizeof(ls_path_pred_half_width_));
  }
  if (_has_bits_[24 / 32] & 117440512u) {
    ::memset(&ls_intp_is_highway_merge_right_, 0, reinterpret_cast<char*>(&ls_intp_is_highway_exit_right_) -
      reinterpret_cast<char*>(&ls_intp_is_highway_merge_right_) + sizeof(ls_intp_is_highway_exit_right_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ADVCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.ADVCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ls_adv_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ls_adv_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_adv_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_adv_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ls_adv_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_adv_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_adv__sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ls_adv__sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_adv__sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_intp_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ls_intp_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_intp_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_ca_is_construction_area = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ls_ca_is_construction_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_ca_is_construction_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_road_vertical_surface_valid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_ls_road_vertical_surface_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_road_vertical_surface_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_vertical_surface_vr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_ls_road_vertical_surface_vr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_vertical_surface_vr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_vertical_surface_c0 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_ls_road_vertical_surface_c0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_vertical_surface_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_vertical_surfac_c1 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_ls_road_vertical_surfac_c1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_vertical_surfac_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_road_vertical_surfac_c2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(97u)) {
          set_has_ls_road_vertical_surfac_c2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_road_vertical_surfac_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_3 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_road_vertical_surfac_c3 = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_ls_road_vertical_surfac_c3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_road_vertical_surfac_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_path_pred_valid = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_ls_path_pred_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_path_pred_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_path_pred_c0 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_ls_path_pred_c0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_path_pred_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_path_pred_c1 = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_ls_path_pred_c1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_path_pred_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_path_pred_c2 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_ls_path_pred_c2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_path_pred_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_5 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_reserved_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_path_pred_c3 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(169u)) {
          set_has_ls_path_pred_c3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_path_pred_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_path_pred_conf = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_ls_path_pred_conf();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_path_pred_conf_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_path_pred_half_width = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_ls_path_pred_half_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_path_pred_half_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_intp_is_highway_merge_left = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_ls_intp_is_highway_merge_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_intp_is_highway_merge_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_intp_is_highway_merge_right = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_ls_intp_is_highway_merge_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_intp_is_highway_merge_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_intp_is_highway_exit_left = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_ls_intp_is_highway_exit_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_intp_is_highway_exit_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool ls_intp_is_highway_exit_right = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_ls_intp_is_highway_exit_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ls_intp_is_highway_exit_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.ADVCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.ADVCommon)
  return false;
#undef DO_
}

void ADVCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.ADVCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ls_adv_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ls_adv_zero_byte(), output);
  }

  // optional int32 ls_adv_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ls_adv_protocol_version(), output);
  }

  // optional int32 ls_adv__sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ls_adv__sync_id(), output);
  }

  // optional int32 ls_intp_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ls_intp_number(), output);
  }

  // optional bool ls_ca_is_construction_area = 5;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ls_ca_is_construction_area(), output);
  }

  // optional bool ls_road_vertical_surface_valid = 6;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ls_road_vertical_surface_valid(), output);
  }

  // optional int32 reserved_1 = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->reserved_1(), output);
  }

  // optional int32 ls_road_vertical_surface_vr = 8;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ls_road_vertical_surface_vr(), output);
  }

  // optional float ls_road_vertical_surface_c0 = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ls_road_vertical_surface_c0(), output);
  }

  // optional float ls_road_vertical_surfac_c1 = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->ls_road_vertical_surfac_c1(), output);
  }

  // optional int32 reserved_2 = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved_2(), output);
  }

  // optional double ls_road_vertical_surfac_c2 = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ls_road_vertical_surfac_c2(), output);
  }

  // optional int32 reserved_3 = 13;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->reserved_3(), output);
  }

  // optional double ls_road_vertical_surfac_c3 = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->ls_road_vertical_surfac_c3(), output);
  }

  // optional bool ls_path_pred_valid = 15;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->ls_path_pred_valid(), output);
  }

  // optional float ls_path_pred_c0 = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->ls_path_pred_c0(), output);
  }

  // optional int32 reserved_4 = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->reserved_4(), output);
  }

  // optional float ls_path_pred_c1 = 18;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->ls_path_pred_c1(), output);
  }

  // optional double ls_path_pred_c2 = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->ls_path_pred_c2(), output);
  }

  // optional int32 reserved_5 = 20;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->reserved_5(), output);
  }

  // optional double ls_path_pred_c3 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->ls_path_pred_c3(), output);
  }

  // optional float ls_path_pred_conf = 22;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->ls_path_pred_conf(), output);
  }

  // optional float ls_path_pred_half_width = 23;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->ls_path_pred_half_width(), output);
  }

  // optional bool ls_intp_is_highway_merge_left = 24;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(24, this->ls_intp_is_highway_merge_left(), output);
  }

  // optional bool ls_intp_is_highway_merge_right = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->ls_intp_is_highway_merge_right(), output);
  }

  // optional bool ls_intp_is_highway_exit_left = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->ls_intp_is_highway_exit_left(), output);
  }

  // optional bool ls_intp_is_highway_exit_right = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->ls_intp_is_highway_exit_right(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.ADVCommon)
}

size_t ADVCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.ADVCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 ls_adv_zero_byte = 1;
    if (has_ls_adv_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_adv_zero_byte());
    }

    // optional int32 ls_adv_protocol_version = 2;
    if (has_ls_adv_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_adv_protocol_version());
    }

    // optional int32 ls_adv__sync_id = 3;
    if (has_ls_adv__sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_adv__sync_id());
    }

    // optional int32 ls_intp_number = 4;
    if (has_ls_intp_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_intp_number());
    }

    // optional int32 reserved_1 = 7;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional int32 ls_road_vertical_surface_vr = 8;
    if (has_ls_road_vertical_surface_vr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_vertical_surface_vr());
    }

    // optional float ls_road_vertical_surface_c0 = 9;
    if (has_ls_road_vertical_surface_c0()) {
      total_size += 1 + 4;
    }

    // optional float ls_road_vertical_surfac_c1 = 10;
    if (has_ls_road_vertical_surfac_c1()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double ls_road_vertical_surfac_c2 = 12;
    if (has_ls_road_vertical_surfac_c2()) {
      total_size += 1 + 8;
    }

    // optional int32 reserved_2 = 11;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional bool ls_ca_is_construction_area = 5;
    if (has_ls_ca_is_construction_area()) {
      total_size += 1 + 1;
    }

    // optional bool ls_road_vertical_surface_valid = 6;
    if (has_ls_road_vertical_surface_valid()) {
      total_size += 1 + 1;
    }

    // optional bool ls_path_pred_valid = 15;
    if (has_ls_path_pred_valid()) {
      total_size += 1 + 1;
    }

    // optional bool ls_intp_is_highway_merge_left = 24;
    if (has_ls_intp_is_highway_merge_left()) {
      total_size += 2 + 1;
    }

    // optional double ls_road_vertical_surfac_c3 = 14;
    if (has_ls_road_vertical_surfac_c3()) {
      total_size += 1 + 8;
    }

    // optional int32 reserved_3 = 13;
    if (has_reserved_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_3());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float ls_path_pred_c0 = 16;
    if (has_ls_path_pred_c0()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_4 = 17;
    if (has_reserved_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional float ls_path_pred_c1 = 18;
    if (has_ls_path_pred_c1()) {
      total_size += 2 + 4;
    }

    // optional double ls_path_pred_c2 = 19;
    if (has_ls_path_pred_c2()) {
      total_size += 2 + 8;
    }

    // optional double ls_path_pred_c3 = 21;
    if (has_ls_path_pred_c3()) {
      total_size += 2 + 8;
    }

    // optional int32 reserved_5 = 20;
    if (has_reserved_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_5());
    }

    // optional float ls_path_pred_conf = 22;
    if (has_ls_path_pred_conf()) {
      total_size += 2 + 4;
    }

    // optional float ls_path_pred_half_width = 23;
    if (has_ls_path_pred_half_width()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 117440512u) {
    // optional bool ls_intp_is_highway_merge_right = 25;
    if (has_ls_intp_is_highway_merge_right()) {
      total_size += 2 + 1;
    }

    // optional bool ls_intp_is_highway_exit_left = 26;
    if (has_ls_intp_is_highway_exit_left()) {
      total_size += 2 + 1;
    }

    // optional bool ls_intp_is_highway_exit_right = 27;
    if (has_ls_intp_is_highway_exit_right()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ADVCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ADVCommon*>(&from));
}

void ADVCommon::MergeFrom(const ADVCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.ADVCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ls_adv_zero_byte_ = from.ls_adv_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      ls_adv_protocol_version_ = from.ls_adv_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      ls_adv__sync_id_ = from.ls_adv__sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ls_intp_number_ = from.ls_intp_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      ls_road_vertical_surface_vr_ = from.ls_road_vertical_surface_vr_;
    }
    if (cached_has_bits & 0x00000040u) {
      ls_road_vertical_surface_c0_ = from.ls_road_vertical_surface_c0_;
    }
    if (cached_has_bits & 0x00000080u) {
      ls_road_vertical_surfac_c1_ = from.ls_road_vertical_surfac_c1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ls_road_vertical_surfac_c2_ = from.ls_road_vertical_surfac_c2_;
    }
    if (cached_has_bits & 0x00000200u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00000400u) {
      ls_ca_is_construction_area_ = from.ls_ca_is_construction_area_;
    }
    if (cached_has_bits & 0x00000800u) {
      ls_road_vertical_surface_valid_ = from.ls_road_vertical_surface_valid_;
    }
    if (cached_has_bits & 0x00001000u) {
      ls_path_pred_valid_ = from.ls_path_pred_valid_;
    }
    if (cached_has_bits & 0x00002000u) {
      ls_intp_is_highway_merge_left_ = from.ls_intp_is_highway_merge_left_;
    }
    if (cached_has_bits & 0x00004000u) {
      ls_road_vertical_surfac_c3_ = from.ls_road_vertical_surfac_c3_;
    }
    if (cached_has_bits & 0x00008000u) {
      reserved_3_ = from.reserved_3_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      ls_path_pred_c0_ = from.ls_path_pred_c0_;
    }
    if (cached_has_bits & 0x00020000u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00040000u) {
      ls_path_pred_c1_ = from.ls_path_pred_c1_;
    }
    if (cached_has_bits & 0x00080000u) {
      ls_path_pred_c2_ = from.ls_path_pred_c2_;
    }
    if (cached_has_bits & 0x00100000u) {
      ls_path_pred_c3_ = from.ls_path_pred_c3_;
    }
    if (cached_has_bits & 0x00200000u) {
      reserved_5_ = from.reserved_5_;
    }
    if (cached_has_bits & 0x00400000u) {
      ls_path_pred_conf_ = from.ls_path_pred_conf_;
    }
    if (cached_has_bits & 0x00800000u) {
      ls_path_pred_half_width_ = from.ls_path_pred_half_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 117440512u) {
    if (cached_has_bits & 0x01000000u) {
      ls_intp_is_highway_merge_right_ = from.ls_intp_is_highway_merge_right_;
    }
    if (cached_has_bits & 0x02000000u) {
      ls_intp_is_highway_exit_left_ = from.ls_intp_is_highway_exit_left_;
    }
    if (cached_has_bits & 0x04000000u) {
      ls_intp_is_highway_exit_right_ = from.ls_intp_is_highway_exit_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ADVCommon::CopyFrom(const ADVCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.ADVCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ADVCommon::IsInitialized() const {
  return true;
}

void ADVCommon::Swap(ADVCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ADVCommon::InternalSwap(ADVCommon* other) {
  std::swap(ls_adv_zero_byte_, other->ls_adv_zero_byte_);
  std::swap(ls_adv_protocol_version_, other->ls_adv_protocol_version_);
  std::swap(ls_adv__sync_id_, other->ls_adv__sync_id_);
  std::swap(ls_intp_number_, other->ls_intp_number_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(ls_road_vertical_surface_vr_, other->ls_road_vertical_surface_vr_);
  std::swap(ls_road_vertical_surface_c0_, other->ls_road_vertical_surface_c0_);
  std::swap(ls_road_vertical_surfac_c1_, other->ls_road_vertical_surfac_c1_);
  std::swap(ls_road_vertical_surfac_c2_, other->ls_road_vertical_surfac_c2_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(ls_ca_is_construction_area_, other->ls_ca_is_construction_area_);
  std::swap(ls_road_vertical_surface_valid_, other->ls_road_vertical_surface_valid_);
  std::swap(ls_path_pred_valid_, other->ls_path_pred_valid_);
  std::swap(ls_intp_is_highway_merge_left_, other->ls_intp_is_highway_merge_left_);
  std::swap(ls_road_vertical_surfac_c3_, other->ls_road_vertical_surfac_c3_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(ls_path_pred_c0_, other->ls_path_pred_c0_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(ls_path_pred_c1_, other->ls_path_pred_c1_);
  std::swap(ls_path_pred_c2_, other->ls_path_pred_c2_);
  std::swap(ls_path_pred_c3_, other->ls_path_pred_c3_);
  std::swap(reserved_5_, other->reserved_5_);
  std::swap(ls_path_pred_conf_, other->ls_path_pred_conf_);
  std::swap(ls_path_pred_half_width_, other->ls_path_pred_half_width_);
  std::swap(ls_intp_is_highway_merge_right_, other->ls_intp_is_highway_merge_right_);
  std::swap(ls_intp_is_highway_exit_left_, other->ls_intp_is_highway_exit_left_);
  std::swap(ls_intp_is_highway_exit_right_, other->ls_intp_is_highway_exit_right_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ADVCommon::GetTypeName() const {
  return "atd.meprocess.ADVCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ADVCommon

// optional int32 ls_adv_zero_byte = 1;
bool ADVCommon::has_ls_adv_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ADVCommon::set_has_ls_adv_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void ADVCommon::clear_has_ls_adv_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void ADVCommon::clear_ls_adv_zero_byte() {
  ls_adv_zero_byte_ = 0;
  clear_has_ls_adv_zero_byte();
}
::google::protobuf::int32 ADVCommon::ls_adv_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_adv_zero_byte)
  return ls_adv_zero_byte_;
}
void ADVCommon::set_ls_adv_zero_byte(::google::protobuf::int32 value) {
  set_has_ls_adv_zero_byte();
  ls_adv_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_adv_zero_byte)
}

// optional int32 ls_adv_protocol_version = 2;
bool ADVCommon::has_ls_adv_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ADVCommon::set_has_ls_adv_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ADVCommon::clear_has_ls_adv_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ADVCommon::clear_ls_adv_protocol_version() {
  ls_adv_protocol_version_ = 0;
  clear_has_ls_adv_protocol_version();
}
::google::protobuf::int32 ADVCommon::ls_adv_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_adv_protocol_version)
  return ls_adv_protocol_version_;
}
void ADVCommon::set_ls_adv_protocol_version(::google::protobuf::int32 value) {
  set_has_ls_adv_protocol_version();
  ls_adv_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_adv_protocol_version)
}

// optional int32 ls_adv__sync_id = 3;
bool ADVCommon::has_ls_adv__sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ADVCommon::set_has_ls_adv__sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ADVCommon::clear_has_ls_adv__sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ADVCommon::clear_ls_adv__sync_id() {
  ls_adv__sync_id_ = 0;
  clear_has_ls_adv__sync_id();
}
::google::protobuf::int32 ADVCommon::ls_adv__sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_adv__sync_id)
  return ls_adv__sync_id_;
}
void ADVCommon::set_ls_adv__sync_id(::google::protobuf::int32 value) {
  set_has_ls_adv__sync_id();
  ls_adv__sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_adv__sync_id)
}

// optional int32 ls_intp_number = 4;
bool ADVCommon::has_ls_intp_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ADVCommon::set_has_ls_intp_number() {
  _has_bits_[0] |= 0x00000008u;
}
void ADVCommon::clear_has_ls_intp_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void ADVCommon::clear_ls_intp_number() {
  ls_intp_number_ = 0;
  clear_has_ls_intp_number();
}
::google::protobuf::int32 ADVCommon::ls_intp_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_number)
  return ls_intp_number_;
}
void ADVCommon::set_ls_intp_number(::google::protobuf::int32 value) {
  set_has_ls_intp_number();
  ls_intp_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_number)
}

// optional bool ls_ca_is_construction_area = 5;
bool ADVCommon::has_ls_ca_is_construction_area() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ADVCommon::set_has_ls_ca_is_construction_area() {
  _has_bits_[0] |= 0x00000400u;
}
void ADVCommon::clear_has_ls_ca_is_construction_area() {
  _has_bits_[0] &= ~0x00000400u;
}
void ADVCommon::clear_ls_ca_is_construction_area() {
  ls_ca_is_construction_area_ = false;
  clear_has_ls_ca_is_construction_area();
}
bool ADVCommon::ls_ca_is_construction_area() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_ca_is_construction_area)
  return ls_ca_is_construction_area_;
}
void ADVCommon::set_ls_ca_is_construction_area(bool value) {
  set_has_ls_ca_is_construction_area();
  ls_ca_is_construction_area_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_ca_is_construction_area)
}

// optional bool ls_road_vertical_surface_valid = 6;
bool ADVCommon::has_ls_road_vertical_surface_valid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ADVCommon::set_has_ls_road_vertical_surface_valid() {
  _has_bits_[0] |= 0x00000800u;
}
void ADVCommon::clear_has_ls_road_vertical_surface_valid() {
  _has_bits_[0] &= ~0x00000800u;
}
void ADVCommon::clear_ls_road_vertical_surface_valid() {
  ls_road_vertical_surface_valid_ = false;
  clear_has_ls_road_vertical_surface_valid();
}
bool ADVCommon::ls_road_vertical_surface_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surface_valid)
  return ls_road_vertical_surface_valid_;
}
void ADVCommon::set_ls_road_vertical_surface_valid(bool value) {
  set_has_ls_road_vertical_surface_valid();
  ls_road_vertical_surface_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surface_valid)
}

// optional int32 reserved_1 = 7;
bool ADVCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ADVCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000010u;
}
void ADVCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000010u;
}
void ADVCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 ADVCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_1)
  return reserved_1_;
}
void ADVCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_1)
}

// optional int32 ls_road_vertical_surface_vr = 8;
bool ADVCommon::has_ls_road_vertical_surface_vr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ADVCommon::set_has_ls_road_vertical_surface_vr() {
  _has_bits_[0] |= 0x00000020u;
}
void ADVCommon::clear_has_ls_road_vertical_surface_vr() {
  _has_bits_[0] &= ~0x00000020u;
}
void ADVCommon::clear_ls_road_vertical_surface_vr() {
  ls_road_vertical_surface_vr_ = 0;
  clear_has_ls_road_vertical_surface_vr();
}
::google::protobuf::int32 ADVCommon::ls_road_vertical_surface_vr() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surface_vr)
  return ls_road_vertical_surface_vr_;
}
void ADVCommon::set_ls_road_vertical_surface_vr(::google::protobuf::int32 value) {
  set_has_ls_road_vertical_surface_vr();
  ls_road_vertical_surface_vr_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surface_vr)
}

// optional float ls_road_vertical_surface_c0 = 9;
bool ADVCommon::has_ls_road_vertical_surface_c0() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ADVCommon::set_has_ls_road_vertical_surface_c0() {
  _has_bits_[0] |= 0x00000040u;
}
void ADVCommon::clear_has_ls_road_vertical_surface_c0() {
  _has_bits_[0] &= ~0x00000040u;
}
void ADVCommon::clear_ls_road_vertical_surface_c0() {
  ls_road_vertical_surface_c0_ = 0;
  clear_has_ls_road_vertical_surface_c0();
}
float ADVCommon::ls_road_vertical_surface_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surface_c0)
  return ls_road_vertical_surface_c0_;
}
void ADVCommon::set_ls_road_vertical_surface_c0(float value) {
  set_has_ls_road_vertical_surface_c0();
  ls_road_vertical_surface_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surface_c0)
}

// optional float ls_road_vertical_surfac_c1 = 10;
bool ADVCommon::has_ls_road_vertical_surfac_c1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ADVCommon::set_has_ls_road_vertical_surfac_c1() {
  _has_bits_[0] |= 0x00000080u;
}
void ADVCommon::clear_has_ls_road_vertical_surfac_c1() {
  _has_bits_[0] &= ~0x00000080u;
}
void ADVCommon::clear_ls_road_vertical_surfac_c1() {
  ls_road_vertical_surfac_c1_ = 0;
  clear_has_ls_road_vertical_surfac_c1();
}
float ADVCommon::ls_road_vertical_surfac_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c1)
  return ls_road_vertical_surfac_c1_;
}
void ADVCommon::set_ls_road_vertical_surfac_c1(float value) {
  set_has_ls_road_vertical_surfac_c1();
  ls_road_vertical_surfac_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c1)
}

// optional int32 reserved_2 = 11;
bool ADVCommon::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ADVCommon::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000200u;
}
void ADVCommon::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000200u;
}
void ADVCommon::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 ADVCommon::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_2)
  return reserved_2_;
}
void ADVCommon::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_2)
}

// optional double ls_road_vertical_surfac_c2 = 12;
bool ADVCommon::has_ls_road_vertical_surfac_c2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ADVCommon::set_has_ls_road_vertical_surfac_c2() {
  _has_bits_[0] |= 0x00000100u;
}
void ADVCommon::clear_has_ls_road_vertical_surfac_c2() {
  _has_bits_[0] &= ~0x00000100u;
}
void ADVCommon::clear_ls_road_vertical_surfac_c2() {
  ls_road_vertical_surfac_c2_ = 0;
  clear_has_ls_road_vertical_surfac_c2();
}
double ADVCommon::ls_road_vertical_surfac_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c2)
  return ls_road_vertical_surfac_c2_;
}
void ADVCommon::set_ls_road_vertical_surfac_c2(double value) {
  set_has_ls_road_vertical_surfac_c2();
  ls_road_vertical_surfac_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c2)
}

// optional int32 reserved_3 = 13;
bool ADVCommon::has_reserved_3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ADVCommon::set_has_reserved_3() {
  _has_bits_[0] |= 0x00008000u;
}
void ADVCommon::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00008000u;
}
void ADVCommon::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
::google::protobuf::int32 ADVCommon::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_3)
  return reserved_3_;
}
void ADVCommon::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_3)
}

// optional double ls_road_vertical_surfac_c3 = 14;
bool ADVCommon::has_ls_road_vertical_surfac_c3() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ADVCommon::set_has_ls_road_vertical_surfac_c3() {
  _has_bits_[0] |= 0x00004000u;
}
void ADVCommon::clear_has_ls_road_vertical_surfac_c3() {
  _has_bits_[0] &= ~0x00004000u;
}
void ADVCommon::clear_ls_road_vertical_surfac_c3() {
  ls_road_vertical_surfac_c3_ = 0;
  clear_has_ls_road_vertical_surfac_c3();
}
double ADVCommon::ls_road_vertical_surfac_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c3)
  return ls_road_vertical_surfac_c3_;
}
void ADVCommon::set_ls_road_vertical_surfac_c3(double value) {
  set_has_ls_road_vertical_surfac_c3();
  ls_road_vertical_surfac_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c3)
}

// optional bool ls_path_pred_valid = 15;
bool ADVCommon::has_ls_path_pred_valid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ADVCommon::set_has_ls_path_pred_valid() {
  _has_bits_[0] |= 0x00001000u;
}
void ADVCommon::clear_has_ls_path_pred_valid() {
  _has_bits_[0] &= ~0x00001000u;
}
void ADVCommon::clear_ls_path_pred_valid() {
  ls_path_pred_valid_ = false;
  clear_has_ls_path_pred_valid();
}
bool ADVCommon::ls_path_pred_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_valid)
  return ls_path_pred_valid_;
}
void ADVCommon::set_ls_path_pred_valid(bool value) {
  set_has_ls_path_pred_valid();
  ls_path_pred_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_valid)
}

// optional float ls_path_pred_c0 = 16;
bool ADVCommon::has_ls_path_pred_c0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ADVCommon::set_has_ls_path_pred_c0() {
  _has_bits_[0] |= 0x00010000u;
}
void ADVCommon::clear_has_ls_path_pred_c0() {
  _has_bits_[0] &= ~0x00010000u;
}
void ADVCommon::clear_ls_path_pred_c0() {
  ls_path_pred_c0_ = 0;
  clear_has_ls_path_pred_c0();
}
float ADVCommon::ls_path_pred_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c0)
  return ls_path_pred_c0_;
}
void ADVCommon::set_ls_path_pred_c0(float value) {
  set_has_ls_path_pred_c0();
  ls_path_pred_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c0)
}

// optional int32 reserved_4 = 17;
bool ADVCommon::has_reserved_4() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ADVCommon::set_has_reserved_4() {
  _has_bits_[0] |= 0x00020000u;
}
void ADVCommon::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00020000u;
}
void ADVCommon::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 ADVCommon::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_4)
  return reserved_4_;
}
void ADVCommon::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_4)
}

// optional float ls_path_pred_c1 = 18;
bool ADVCommon::has_ls_path_pred_c1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ADVCommon::set_has_ls_path_pred_c1() {
  _has_bits_[0] |= 0x00040000u;
}
void ADVCommon::clear_has_ls_path_pred_c1() {
  _has_bits_[0] &= ~0x00040000u;
}
void ADVCommon::clear_ls_path_pred_c1() {
  ls_path_pred_c1_ = 0;
  clear_has_ls_path_pred_c1();
}
float ADVCommon::ls_path_pred_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c1)
  return ls_path_pred_c1_;
}
void ADVCommon::set_ls_path_pred_c1(float value) {
  set_has_ls_path_pred_c1();
  ls_path_pred_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c1)
}

// optional double ls_path_pred_c2 = 19;
bool ADVCommon::has_ls_path_pred_c2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ADVCommon::set_has_ls_path_pred_c2() {
  _has_bits_[0] |= 0x00080000u;
}
void ADVCommon::clear_has_ls_path_pred_c2() {
  _has_bits_[0] &= ~0x00080000u;
}
void ADVCommon::clear_ls_path_pred_c2() {
  ls_path_pred_c2_ = 0;
  clear_has_ls_path_pred_c2();
}
double ADVCommon::ls_path_pred_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c2)
  return ls_path_pred_c2_;
}
void ADVCommon::set_ls_path_pred_c2(double value) {
  set_has_ls_path_pred_c2();
  ls_path_pred_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c2)
}

// optional int32 reserved_5 = 20;
bool ADVCommon::has_reserved_5() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void ADVCommon::set_has_reserved_5() {
  _has_bits_[0] |= 0x00200000u;
}
void ADVCommon::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00200000u;
}
void ADVCommon::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
::google::protobuf::int32 ADVCommon::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_5)
  return reserved_5_;
}
void ADVCommon::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_5)
}

// optional double ls_path_pred_c3 = 21;
bool ADVCommon::has_ls_path_pred_c3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void ADVCommon::set_has_ls_path_pred_c3() {
  _has_bits_[0] |= 0x00100000u;
}
void ADVCommon::clear_has_ls_path_pred_c3() {
  _has_bits_[0] &= ~0x00100000u;
}
void ADVCommon::clear_ls_path_pred_c3() {
  ls_path_pred_c3_ = 0;
  clear_has_ls_path_pred_c3();
}
double ADVCommon::ls_path_pred_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c3)
  return ls_path_pred_c3_;
}
void ADVCommon::set_ls_path_pred_c3(double value) {
  set_has_ls_path_pred_c3();
  ls_path_pred_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c3)
}

// optional float ls_path_pred_conf = 22;
bool ADVCommon::has_ls_path_pred_conf() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void ADVCommon::set_has_ls_path_pred_conf() {
  _has_bits_[0] |= 0x00400000u;
}
void ADVCommon::clear_has_ls_path_pred_conf() {
  _has_bits_[0] &= ~0x00400000u;
}
void ADVCommon::clear_ls_path_pred_conf() {
  ls_path_pred_conf_ = 0;
  clear_has_ls_path_pred_conf();
}
float ADVCommon::ls_path_pred_conf() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_conf)
  return ls_path_pred_conf_;
}
void ADVCommon::set_ls_path_pred_conf(float value) {
  set_has_ls_path_pred_conf();
  ls_path_pred_conf_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_conf)
}

// optional float ls_path_pred_half_width = 23;
bool ADVCommon::has_ls_path_pred_half_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void ADVCommon::set_has_ls_path_pred_half_width() {
  _has_bits_[0] |= 0x00800000u;
}
void ADVCommon::clear_has_ls_path_pred_half_width() {
  _has_bits_[0] &= ~0x00800000u;
}
void ADVCommon::clear_ls_path_pred_half_width() {
  ls_path_pred_half_width_ = 0;
  clear_has_ls_path_pred_half_width();
}
float ADVCommon::ls_path_pred_half_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_half_width)
  return ls_path_pred_half_width_;
}
void ADVCommon::set_ls_path_pred_half_width(float value) {
  set_has_ls_path_pred_half_width();
  ls_path_pred_half_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_half_width)
}

// optional bool ls_intp_is_highway_merge_left = 24;
bool ADVCommon::has_ls_intp_is_highway_merge_left() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ADVCommon::set_has_ls_intp_is_highway_merge_left() {
  _has_bits_[0] |= 0x00002000u;
}
void ADVCommon::clear_has_ls_intp_is_highway_merge_left() {
  _has_bits_[0] &= ~0x00002000u;
}
void ADVCommon::clear_ls_intp_is_highway_merge_left() {
  ls_intp_is_highway_merge_left_ = false;
  clear_has_ls_intp_is_highway_merge_left();
}
bool ADVCommon::ls_intp_is_highway_merge_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_left)
  return ls_intp_is_highway_merge_left_;
}
void ADVCommon::set_ls_intp_is_highway_merge_left(bool value) {
  set_has_ls_intp_is_highway_merge_left();
  ls_intp_is_highway_merge_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_left)
}

// optional bool ls_intp_is_highway_merge_right = 25;
bool ADVCommon::has_ls_intp_is_highway_merge_right() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void ADVCommon::set_has_ls_intp_is_highway_merge_right() {
  _has_bits_[0] |= 0x01000000u;
}
void ADVCommon::clear_has_ls_intp_is_highway_merge_right() {
  _has_bits_[0] &= ~0x01000000u;
}
void ADVCommon::clear_ls_intp_is_highway_merge_right() {
  ls_intp_is_highway_merge_right_ = false;
  clear_has_ls_intp_is_highway_merge_right();
}
bool ADVCommon::ls_intp_is_highway_merge_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_right)
  return ls_intp_is_highway_merge_right_;
}
void ADVCommon::set_ls_intp_is_highway_merge_right(bool value) {
  set_has_ls_intp_is_highway_merge_right();
  ls_intp_is_highway_merge_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_right)
}

// optional bool ls_intp_is_highway_exit_left = 26;
bool ADVCommon::has_ls_intp_is_highway_exit_left() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void ADVCommon::set_has_ls_intp_is_highway_exit_left() {
  _has_bits_[0] |= 0x02000000u;
}
void ADVCommon::clear_has_ls_intp_is_highway_exit_left() {
  _has_bits_[0] &= ~0x02000000u;
}
void ADVCommon::clear_ls_intp_is_highway_exit_left() {
  ls_intp_is_highway_exit_left_ = false;
  clear_has_ls_intp_is_highway_exit_left();
}
bool ADVCommon::ls_intp_is_highway_exit_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_left)
  return ls_intp_is_highway_exit_left_;
}
void ADVCommon::set_ls_intp_is_highway_exit_left(bool value) {
  set_has_ls_intp_is_highway_exit_left();
  ls_intp_is_highway_exit_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_left)
}

// optional bool ls_intp_is_highway_exit_right = 27;
bool ADVCommon::has_ls_intp_is_highway_exit_right() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void ADVCommon::set_has_ls_intp_is_highway_exit_right() {
  _has_bits_[0] |= 0x04000000u;
}
void ADVCommon::clear_has_ls_intp_is_highway_exit_right() {
  _has_bits_[0] &= ~0x04000000u;
}
void ADVCommon::clear_ls_intp_is_highway_exit_right() {
  ls_intp_is_highway_exit_right_ = false;
  clear_has_ls_intp_is_highway_exit_right();
}
bool ADVCommon::ls_intp_is_highway_exit_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_right)
  return ls_intp_is_highway_exit_right_;
}
void ADVCommon::set_ls_intp_is_highway_exit_right(bool value) {
  set_has_ls_intp_is_highway_exit_right();
  ls_intp_is_highway_exit_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_right)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_LS_ADV::kHeaderFieldNumber;
const int Dt_Record_LS_ADV::kReservedmsgFieldNumber;
const int Dt_Record_LS_ADV::kStadvcommonFieldNumber;
const int Dt_Record_LS_ADV::kDtArray8LsIntpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_LS_ADV::Dt_Record_LS_ADV()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_LS_ADV)
}
Dt_Record_LS_ADV::Dt_Record_LS_ADV(const Dt_Record_LS_ADV& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_8_ls_intp_(from.dt_array_8_ls_intp_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stadvcommon()) {
    stadvcommon_ = new ::atd::meprocess::ADVCommon(*from.stadvcommon_);
  } else {
    stadvcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_LS_ADV)
}

void Dt_Record_LS_ADV::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stadvcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stadvcommon_));
}

Dt_Record_LS_ADV::~Dt_Record_LS_ADV() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_LS_ADV)
  SharedDtor();
}

void Dt_Record_LS_ADV::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stadvcommon_;
  }
}

void Dt_Record_LS_ADV::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_LS_ADV& Dt_Record_LS_ADV::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_LS_ADV* Dt_Record_LS_ADV::New(::google::protobuf::Arena* arena) const {
  Dt_Record_LS_ADV* n = new Dt_Record_LS_ADV;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_LS_ADV::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_LS_ADV)
  dt_array_8_ls_intp_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stadvcommon()) {
      GOOGLE_DCHECK(stadvcommon_ != NULL);
      stadvcommon_->::atd::meprocess::ADVCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_LS_ADV::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_LS_ADV)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.ADVCommon stadvcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stadvcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.LS_INTP dt_array_8_ls_intp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_8_ls_intp()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_LS_ADV)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_LS_ADV)
  return false;
#undef DO_
}

void Dt_Record_LS_ADV::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_LS_ADV)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.ADVCommon stadvcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stadvcommon_, output);
  }

  // repeated .atd.meprocess.LS_INTP dt_array_8_ls_intp = 4;
  for (unsigned int i = 0, n = this->dt_array_8_ls_intp_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_8_ls_intp(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_LS_ADV)
}

size_t Dt_Record_LS_ADV::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_LS_ADV)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.LS_INTP dt_array_8_ls_intp = 4;
  {
    unsigned int count = this->dt_array_8_ls_intp_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_8_ls_intp(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.ADVCommon stadvcommon = 3;
    if (has_stadvcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stadvcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_LS_ADV::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_LS_ADV*>(&from));
}

void Dt_Record_LS_ADV::MergeFrom(const Dt_Record_LS_ADV& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_LS_ADV)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_8_ls_intp_.MergeFrom(from.dt_array_8_ls_intp_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stadvcommon()->::atd::meprocess::ADVCommon::MergeFrom(from.stadvcommon());
    }
  }
}

void Dt_Record_LS_ADV::CopyFrom(const Dt_Record_LS_ADV& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_LS_ADV)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_LS_ADV::IsInitialized() const {
  return true;
}

void Dt_Record_LS_ADV::Swap(Dt_Record_LS_ADV* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_LS_ADV::InternalSwap(Dt_Record_LS_ADV* other) {
  dt_array_8_ls_intp_.InternalSwap(&other->dt_array_8_ls_intp_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stadvcommon_, other->stadvcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_LS_ADV::GetTypeName() const {
  return "atd.meprocess.Dt_Record_LS_ADV";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_LS_ADV

// optional .atd.common.Header header = 1;
bool Dt_Record_LS_ADV::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_LS_ADV::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_LS_ADV::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_LS_ADV::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_LS_ADV::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_LS_ADV::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.header)
  return header_;
}
::atd::common::Header* Dt_Record_LS_ADV::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_ADV.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_LS_ADV::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_ADV.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_LS_ADV::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_LS_ADV::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_LS_ADV::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_LS_ADV::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_LS_ADV::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_LS_ADV::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_LS_ADV::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_LS_ADV::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
}

// optional .atd.meprocess.ADVCommon stadvcommon = 3;
bool Dt_Record_LS_ADV::has_stadvcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_LS_ADV::set_has_stadvcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_LS_ADV::clear_has_stadvcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_LS_ADV::clear_stadvcommon() {
  if (stadvcommon_ != NULL) stadvcommon_->::atd::meprocess::ADVCommon::Clear();
  clear_has_stadvcommon();
}
const ::atd::meprocess::ADVCommon& Dt_Record_LS_ADV::stadvcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
  return stadvcommon_ != NULL ? *stadvcommon_
                         : *::atd::meprocess::ADVCommon::internal_default_instance();
}
::atd::meprocess::ADVCommon* Dt_Record_LS_ADV::mutable_stadvcommon() {
  set_has_stadvcommon();
  if (stadvcommon_ == NULL) {
    stadvcommon_ = new ::atd::meprocess::ADVCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
  return stadvcommon_;
}
::atd::meprocess::ADVCommon* Dt_Record_LS_ADV::release_stadvcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
  clear_has_stadvcommon();
  ::atd::meprocess::ADVCommon* temp = stadvcommon_;
  stadvcommon_ = NULL;
  return temp;
}
void Dt_Record_LS_ADV::set_allocated_stadvcommon(::atd::meprocess::ADVCommon* stadvcommon) {
  delete stadvcommon_;
  stadvcommon_ = stadvcommon;
  if (stadvcommon) {
    set_has_stadvcommon();
  } else {
    clear_has_stadvcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
}

// repeated .atd.meprocess.LS_INTP dt_array_8_ls_intp = 4;
int Dt_Record_LS_ADV::dt_array_8_ls_intp_size() const {
  return dt_array_8_ls_intp_.size();
}
void Dt_Record_LS_ADV::clear_dt_array_8_ls_intp() {
  dt_array_8_ls_intp_.Clear();
}
const ::atd::meprocess::LS_INTP& Dt_Record_LS_ADV::dt_array_8_ls_intp(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_.Get(index);
}
::atd::meprocess::LS_INTP* Dt_Record_LS_ADV::mutable_dt_array_8_ls_intp(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_.Mutable(index);
}
::atd::meprocess::LS_INTP* Dt_Record_LS_ADV::add_dt_array_8_ls_intp() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_INTP >*
Dt_Record_LS_ADV::mutable_dt_array_8_ls_intp() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return &dt_array_8_ls_intp_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_INTP >&
Dt_Record_LS_ADV::dt_array_8_ls_intp() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LS_INTP::kIntpTypeFieldNumber;
const int LS_INTP::kIntpIsStartFieldNumber;
const int LS_INTP::kIntpIsValidFieldNumber;
const int LS_INTP::kIntpLineRoleFieldNumber;
const int LS_INTP::kIntpLatDistanceFieldNumber;
const int LS_INTP::kReserved6FieldNumber;
const int LS_INTP::kIntpLongDistanceFieldNumber;
const int LS_INTP::kIntpBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LS_INTP::LS_INTP()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.LS_INTP)
}
LS_INTP::LS_INTP(const LS_INTP& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&intp_type_, &from.intp_type_,
    reinterpret_cast<char*>(&intp_buffer_) -
    reinterpret_cast<char*>(&intp_type_) + sizeof(intp_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.LS_INTP)
}

void LS_INTP::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&intp_type_, 0, reinterpret_cast<char*>(&intp_buffer_) -
    reinterpret_cast<char*>(&intp_type_) + sizeof(intp_buffer_));
}

LS_INTP::~LS_INTP() {
  // @@protoc_insertion_point(destructor:atd.meprocess.LS_INTP)
  SharedDtor();
}

void LS_INTP::SharedDtor() {
}

void LS_INTP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LS_INTP& LS_INTP::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

LS_INTP* LS_INTP::New(::google::protobuf::Arena* arena) const {
  LS_INTP* n = new LS_INTP;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LS_INTP::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.LS_INTP)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&intp_type_, 0, reinterpret_cast<char*>(&intp_buffer_) -
      reinterpret_cast<char*>(&intp_type_) + sizeof(intp_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LS_INTP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.LS_INTP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.meprocess.LS_INTP.Intp_typeType intp_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_INTP_Intp_typeType_IsValid(value)) {
            set_intp_type(static_cast< ::atd::meprocess::LS_INTP_Intp_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool intp_is_start = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_intp_is_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intp_is_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool intp_is_valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_intp_is_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &intp_is_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LS_INTP.Intp_line_roleType intp_line_role = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::LS_INTP_Intp_line_roleType_IsValid(value)) {
            set_intp_line_role(static_cast< ::atd::meprocess::LS_INTP_Intp_line_roleType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float intp_lat_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_intp_lat_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intp_lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_6 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float intp_long_distance = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_intp_long_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &intp_long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 intp_buffer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_intp_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intp_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.LS_INTP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.LS_INTP)
  return false;
#undef DO_
}

void LS_INTP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.LS_INTP)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.meprocess.LS_INTP.Intp_typeType intp_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->intp_type(), output);
  }

  // optional bool intp_is_start = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->intp_is_start(), output);
  }

  // optional bool intp_is_valid = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->intp_is_valid(), output);
  }

  // optional .atd.meprocess.LS_INTP.Intp_line_roleType intp_line_role = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->intp_line_role(), output);
  }

  // optional float intp_lat_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->intp_lat_distance(), output);
  }

  // optional int32 reserved_6 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reserved_6(), output);
  }

  // optional float intp_long_distance = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->intp_long_distance(), output);
  }

  // optional int32 intp_buffer = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->intp_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.LS_INTP)
}

size_t LS_INTP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.LS_INTP)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.meprocess.LS_INTP.Intp_typeType intp_type = 1;
    if (has_intp_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->intp_type());
    }

    // optional bool intp_is_start = 2;
    if (has_intp_is_start()) {
      total_size += 1 + 1;
    }

    // optional bool intp_is_valid = 3;
    if (has_intp_is_valid()) {
      total_size += 1 + 1;
    }

    // optional .atd.meprocess.LS_INTP.Intp_line_roleType intp_line_role = 4;
    if (has_intp_line_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->intp_line_role());
    }

    // optional float intp_lat_distance = 5;
    if (has_intp_lat_distance()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_6 = 6;
    if (has_reserved_6()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_6());
    }

    // optional float intp_long_distance = 7;
    if (has_intp_long_distance()) {
      total_size += 1 + 4;
    }

    // optional int32 intp_buffer = 8;
    if (has_intp_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->intp_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LS_INTP::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LS_INTP*>(&from));
}

void LS_INTP::MergeFrom(const LS_INTP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.LS_INTP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      intp_type_ = from.intp_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      intp_is_start_ = from.intp_is_start_;
    }
    if (cached_has_bits & 0x00000004u) {
      intp_is_valid_ = from.intp_is_valid_;
    }
    if (cached_has_bits & 0x00000008u) {
      intp_line_role_ = from.intp_line_role_;
    }
    if (cached_has_bits & 0x00000010u) {
      intp_lat_distance_ = from.intp_lat_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      reserved_6_ = from.reserved_6_;
    }
    if (cached_has_bits & 0x00000040u) {
      intp_long_distance_ = from.intp_long_distance_;
    }
    if (cached_has_bits & 0x00000080u) {
      intp_buffer_ = from.intp_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LS_INTP::CopyFrom(const LS_INTP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.LS_INTP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LS_INTP::IsInitialized() const {
  return true;
}

void LS_INTP::Swap(LS_INTP* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LS_INTP::InternalSwap(LS_INTP* other) {
  std::swap(intp_type_, other->intp_type_);
  std::swap(intp_is_start_, other->intp_is_start_);
  std::swap(intp_is_valid_, other->intp_is_valid_);
  std::swap(intp_line_role_, other->intp_line_role_);
  std::swap(intp_lat_distance_, other->intp_lat_distance_);
  std::swap(reserved_6_, other->reserved_6_);
  std::swap(intp_long_distance_, other->intp_long_distance_);
  std::swap(intp_buffer_, other->intp_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LS_INTP::GetTypeName() const {
  return "atd.meprocess.LS_INTP";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LS_INTP

// optional .atd.meprocess.LS_INTP.Intp_typeType intp_type = 1;
bool LS_INTP::has_intp_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LS_INTP::set_has_intp_type() {
  _has_bits_[0] |= 0x00000001u;
}
void LS_INTP::clear_has_intp_type() {
  _has_bits_[0] &= ~0x00000001u;
}
void LS_INTP::clear_intp_type() {
  intp_type_ = 0;
  clear_has_intp_type();
}
::atd::meprocess::LS_INTP_Intp_typeType LS_INTP::intp_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_type)
  return static_cast< ::atd::meprocess::LS_INTP_Intp_typeType >(intp_type_);
}
void LS_INTP::set_intp_type(::atd::meprocess::LS_INTP_Intp_typeType value) {
  assert(::atd::meprocess::LS_INTP_Intp_typeType_IsValid(value));
  set_has_intp_type();
  intp_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_type)
}

// optional bool intp_is_start = 2;
bool LS_INTP::has_intp_is_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LS_INTP::set_has_intp_is_start() {
  _has_bits_[0] |= 0x00000002u;
}
void LS_INTP::clear_has_intp_is_start() {
  _has_bits_[0] &= ~0x00000002u;
}
void LS_INTP::clear_intp_is_start() {
  intp_is_start_ = false;
  clear_has_intp_is_start();
}
bool LS_INTP::intp_is_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_is_start)
  return intp_is_start_;
}
void LS_INTP::set_intp_is_start(bool value) {
  set_has_intp_is_start();
  intp_is_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_is_start)
}

// optional bool intp_is_valid = 3;
bool LS_INTP::has_intp_is_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LS_INTP::set_has_intp_is_valid() {
  _has_bits_[0] |= 0x00000004u;
}
void LS_INTP::clear_has_intp_is_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
void LS_INTP::clear_intp_is_valid() {
  intp_is_valid_ = false;
  clear_has_intp_is_valid();
}
bool LS_INTP::intp_is_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_is_valid)
  return intp_is_valid_;
}
void LS_INTP::set_intp_is_valid(bool value) {
  set_has_intp_is_valid();
  intp_is_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_is_valid)
}

// optional .atd.meprocess.LS_INTP.Intp_line_roleType intp_line_role = 4;
bool LS_INTP::has_intp_line_role() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LS_INTP::set_has_intp_line_role() {
  _has_bits_[0] |= 0x00000008u;
}
void LS_INTP::clear_has_intp_line_role() {
  _has_bits_[0] &= ~0x00000008u;
}
void LS_INTP::clear_intp_line_role() {
  intp_line_role_ = 0;
  clear_has_intp_line_role();
}
::atd::meprocess::LS_INTP_Intp_line_roleType LS_INTP::intp_line_role() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_line_role)
  return static_cast< ::atd::meprocess::LS_INTP_Intp_line_roleType >(intp_line_role_);
}
void LS_INTP::set_intp_line_role(::atd::meprocess::LS_INTP_Intp_line_roleType value) {
  assert(::atd::meprocess::LS_INTP_Intp_line_roleType_IsValid(value));
  set_has_intp_line_role();
  intp_line_role_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_line_role)
}

// optional float intp_lat_distance = 5;
bool LS_INTP::has_intp_lat_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LS_INTP::set_has_intp_lat_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void LS_INTP::clear_has_intp_lat_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void LS_INTP::clear_intp_lat_distance() {
  intp_lat_distance_ = 0;
  clear_has_intp_lat_distance();
}
float LS_INTP::intp_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_lat_distance)
  return intp_lat_distance_;
}
void LS_INTP::set_intp_lat_distance(float value) {
  set_has_intp_lat_distance();
  intp_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_lat_distance)
}

// optional int32 reserved_6 = 6;
bool LS_INTP::has_reserved_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LS_INTP::set_has_reserved_6() {
  _has_bits_[0] |= 0x00000020u;
}
void LS_INTP::clear_has_reserved_6() {
  _has_bits_[0] &= ~0x00000020u;
}
void LS_INTP::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
::google::protobuf::int32 LS_INTP::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.reserved_6)
  return reserved_6_;
}
void LS_INTP::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.reserved_6)
}

// optional float intp_long_distance = 7;
bool LS_INTP::has_intp_long_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LS_INTP::set_has_intp_long_distance() {
  _has_bits_[0] |= 0x00000040u;
}
void LS_INTP::clear_has_intp_long_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
void LS_INTP::clear_intp_long_distance() {
  intp_long_distance_ = 0;
  clear_has_intp_long_distance();
}
float LS_INTP::intp_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_long_distance)
  return intp_long_distance_;
}
void LS_INTP::set_intp_long_distance(float value) {
  set_has_intp_long_distance();
  intp_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_long_distance)
}

// optional int32 intp_buffer = 8;
bool LS_INTP::has_intp_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LS_INTP::set_has_intp_buffer() {
  _has_bits_[0] |= 0x00000080u;
}
void LS_INTP::clear_has_intp_buffer() {
  _has_bits_[0] &= ~0x00000080u;
}
void LS_INTP::clear_intp_buffer() {
  intp_buffer_ = 0;
  clear_has_intp_buffer();
}
::google::protobuf::int32 LS_INTP::intp_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_buffer)
  return intp_buffer_;
}
void LS_INTP::set_intp_buffer(::google::protobuf::int32 value) {
  set_has_intp_buffer();
  intp_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadEdgeCommon::kLsRoadEdgeZeroByteFieldNumber;
const int RoadEdgeCommon::kLsRoadEdgeProtocolVersionFieldNumber;
const int RoadEdgeCommon::kLsRoadEdgeSyncIdFieldNumber;
const int RoadEdgeCommon::kLsRoadEdgeNumberFieldNumber;
const int RoadEdgeCommon::kLsRoadEdgeHeaderBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadEdgeCommon::RoadEdgeCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.RoadEdgeCommon)
}
RoadEdgeCommon::RoadEdgeCommon(const RoadEdgeCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ls_road_edge_zero_byte_, &from.ls_road_edge_zero_byte_,
    reinterpret_cast<char*>(&ls_road_edge_header_buffer_) -
    reinterpret_cast<char*>(&ls_road_edge_zero_byte_) + sizeof(ls_road_edge_header_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.RoadEdgeCommon)
}

void RoadEdgeCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ls_road_edge_zero_byte_, 0, reinterpret_cast<char*>(&ls_road_edge_header_buffer_) -
    reinterpret_cast<char*>(&ls_road_edge_zero_byte_) + sizeof(ls_road_edge_header_buffer_));
}

RoadEdgeCommon::~RoadEdgeCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.RoadEdgeCommon)
  SharedDtor();
}

void RoadEdgeCommon::SharedDtor() {
}

void RoadEdgeCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoadEdgeCommon& RoadEdgeCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoadEdgeCommon* RoadEdgeCommon::New(::google::protobuf::Arena* arena) const {
  RoadEdgeCommon* n = new RoadEdgeCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadEdgeCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.RoadEdgeCommon)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&ls_road_edge_zero_byte_, 0, reinterpret_cast<char*>(&ls_road_edge_header_buffer_) -
      reinterpret_cast<char*>(&ls_road_edge_zero_byte_) + sizeof(ls_road_edge_header_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadEdgeCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.RoadEdgeCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ls_road_edge_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ls_road_edge_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_edge_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ls_road_edge_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_edge_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ls_road_edge_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_edge_number = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_ls_road_edge_number();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_number_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_edge_header_buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ls_road_edge_header_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_header_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.RoadEdgeCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.RoadEdgeCommon)
  return false;
#undef DO_
}

void RoadEdgeCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.RoadEdgeCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ls_road_edge_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ls_road_edge_zero_byte(), output);
  }

  // optional int32 ls_road_edge_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ls_road_edge_protocol_version(), output);
  }

  // optional int32 ls_road_edge_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ls_road_edge_sync_id(), output);
  }

  // optional int32 ls_road_edge_number = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ls_road_edge_number(), output);
  }

  // optional int32 ls_road_edge_header_buffer = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ls_road_edge_header_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.RoadEdgeCommon)
}

size_t RoadEdgeCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.RoadEdgeCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 ls_road_edge_zero_byte = 1;
    if (has_ls_road_edge_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_zero_byte());
    }

    // optional int32 ls_road_edge_protocol_version = 2;
    if (has_ls_road_edge_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_protocol_version());
    }

    // optional int32 ls_road_edge_sync_id = 3;
    if (has_ls_road_edge_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_sync_id());
    }

    // optional int32 ls_road_edge_number = 4;
    if (has_ls_road_edge_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_number());
    }

    // optional int32 ls_road_edge_header_buffer = 5;
    if (has_ls_road_edge_header_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_header_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadEdgeCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoadEdgeCommon*>(&from));
}

void RoadEdgeCommon::MergeFrom(const RoadEdgeCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.RoadEdgeCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      ls_road_edge_zero_byte_ = from.ls_road_edge_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      ls_road_edge_protocol_version_ = from.ls_road_edge_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      ls_road_edge_sync_id_ = from.ls_road_edge_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ls_road_edge_number_ = from.ls_road_edge_number_;
    }
    if (cached_has_bits & 0x00000010u) {
      ls_road_edge_header_buffer_ = from.ls_road_edge_header_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoadEdgeCommon::CopyFrom(const RoadEdgeCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.RoadEdgeCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadEdgeCommon::IsInitialized() const {
  return true;
}

void RoadEdgeCommon::Swap(RoadEdgeCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadEdgeCommon::InternalSwap(RoadEdgeCommon* other) {
  std::swap(ls_road_edge_zero_byte_, other->ls_road_edge_zero_byte_);
  std::swap(ls_road_edge_protocol_version_, other->ls_road_edge_protocol_version_);
  std::swap(ls_road_edge_sync_id_, other->ls_road_edge_sync_id_);
  std::swap(ls_road_edge_number_, other->ls_road_edge_number_);
  std::swap(ls_road_edge_header_buffer_, other->ls_road_edge_header_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RoadEdgeCommon::GetTypeName() const {
  return "atd.meprocess.RoadEdgeCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadEdgeCommon

// optional int32 ls_road_edge_zero_byte = 1;
bool RoadEdgeCommon::has_ls_road_edge_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadEdgeCommon::set_has_ls_road_edge_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadEdgeCommon::clear_has_ls_road_edge_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadEdgeCommon::clear_ls_road_edge_zero_byte() {
  ls_road_edge_zero_byte_ = 0;
  clear_has_ls_road_edge_zero_byte();
}
::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_zero_byte)
  return ls_road_edge_zero_byte_;
}
void RoadEdgeCommon::set_ls_road_edge_zero_byte(::google::protobuf::int32 value) {
  set_has_ls_road_edge_zero_byte();
  ls_road_edge_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_zero_byte)
}

// optional int32 ls_road_edge_protocol_version = 2;
bool RoadEdgeCommon::has_ls_road_edge_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoadEdgeCommon::set_has_ls_road_edge_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void RoadEdgeCommon::clear_has_ls_road_edge_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoadEdgeCommon::clear_ls_road_edge_protocol_version() {
  ls_road_edge_protocol_version_ = 0;
  clear_has_ls_road_edge_protocol_version();
}
::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_protocol_version)
  return ls_road_edge_protocol_version_;
}
void RoadEdgeCommon::set_ls_road_edge_protocol_version(::google::protobuf::int32 value) {
  set_has_ls_road_edge_protocol_version();
  ls_road_edge_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_protocol_version)
}

// optional int32 ls_road_edge_sync_id = 3;
bool RoadEdgeCommon::has_ls_road_edge_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoadEdgeCommon::set_has_ls_road_edge_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void RoadEdgeCommon::clear_has_ls_road_edge_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoadEdgeCommon::clear_ls_road_edge_sync_id() {
  ls_road_edge_sync_id_ = 0;
  clear_has_ls_road_edge_sync_id();
}
::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_sync_id)
  return ls_road_edge_sync_id_;
}
void RoadEdgeCommon::set_ls_road_edge_sync_id(::google::protobuf::int32 value) {
  set_has_ls_road_edge_sync_id();
  ls_road_edge_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_sync_id)
}

// optional int32 ls_road_edge_number = 4;
bool RoadEdgeCommon::has_ls_road_edge_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoadEdgeCommon::set_has_ls_road_edge_number() {
  _has_bits_[0] |= 0x00000008u;
}
void RoadEdgeCommon::clear_has_ls_road_edge_number() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoadEdgeCommon::clear_ls_road_edge_number() {
  ls_road_edge_number_ = 0;
  clear_has_ls_road_edge_number();
}
::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_number)
  return ls_road_edge_number_;
}
void RoadEdgeCommon::set_ls_road_edge_number(::google::protobuf::int32 value) {
  set_has_ls_road_edge_number();
  ls_road_edge_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_number)
}

// optional int32 ls_road_edge_header_buffer = 5;
bool RoadEdgeCommon::has_ls_road_edge_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoadEdgeCommon::set_has_ls_road_edge_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
void RoadEdgeCommon::clear_has_ls_road_edge_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoadEdgeCommon::clear_ls_road_edge_header_buffer() {
  ls_road_edge_header_buffer_ = 0;
  clear_has_ls_road_edge_header_buffer();
}
::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_header_buffer)
  return ls_road_edge_header_buffer_;
}
void RoadEdgeCommon::set_ls_road_edge_header_buffer(::google::protobuf::int32 value) {
  set_has_ls_road_edge_header_buffer();
  ls_road_edge_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_header_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_LS_Road_Edge::kHeaderFieldNumber;
const int Dt_Record_LS_Road_Edge::kReservedmsgFieldNumber;
const int Dt_Record_LS_Road_Edge::kStroadedgecommonFieldNumber;
const int Dt_Record_LS_Road_Edge::kDtArray4LsRoadEdgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_LS_Road_Edge::Dt_Record_LS_Road_Edge()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_LS_Road_Edge)
}
Dt_Record_LS_Road_Edge::Dt_Record_LS_Road_Edge(const Dt_Record_LS_Road_Edge& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_4_ls_road_edge_(from.dt_array_4_ls_road_edge_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stroadedgecommon()) {
    stroadedgecommon_ = new ::atd::meprocess::RoadEdgeCommon(*from.stroadedgecommon_);
  } else {
    stroadedgecommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_LS_Road_Edge)
}

void Dt_Record_LS_Road_Edge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stroadedgecommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stroadedgecommon_));
}

Dt_Record_LS_Road_Edge::~Dt_Record_LS_Road_Edge() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_LS_Road_Edge)
  SharedDtor();
}

void Dt_Record_LS_Road_Edge::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stroadedgecommon_;
  }
}

void Dt_Record_LS_Road_Edge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_LS_Road_Edge& Dt_Record_LS_Road_Edge::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_LS_Road_Edge* Dt_Record_LS_Road_Edge::New(::google::protobuf::Arena* arena) const {
  Dt_Record_LS_Road_Edge* n = new Dt_Record_LS_Road_Edge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_LS_Road_Edge::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_LS_Road_Edge)
  dt_array_4_ls_road_edge_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stroadedgecommon()) {
      GOOGLE_DCHECK(stroadedgecommon_ != NULL);
      stroadedgecommon_->::atd::meprocess::RoadEdgeCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_LS_Road_Edge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_LS_Road_Edge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.RoadEdgeCommon stroadedgecommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stroadedgecommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.RoadEdge dt_array_4_ls_road_edge = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_4_ls_road_edge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_LS_Road_Edge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_LS_Road_Edge)
  return false;
#undef DO_
}

void Dt_Record_LS_Road_Edge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_LS_Road_Edge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.RoadEdgeCommon stroadedgecommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stroadedgecommon_, output);
  }

  // repeated .atd.meprocess.RoadEdge dt_array_4_ls_road_edge = 4;
  for (unsigned int i = 0, n = this->dt_array_4_ls_road_edge_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_4_ls_road_edge(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_LS_Road_Edge)
}

size_t Dt_Record_LS_Road_Edge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_LS_Road_Edge)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.RoadEdge dt_array_4_ls_road_edge = 4;
  {
    unsigned int count = this->dt_array_4_ls_road_edge_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_4_ls_road_edge(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.RoadEdgeCommon stroadedgecommon = 3;
    if (has_stroadedgecommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stroadedgecommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_LS_Road_Edge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_LS_Road_Edge*>(&from));
}

void Dt_Record_LS_Road_Edge::MergeFrom(const Dt_Record_LS_Road_Edge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_LS_Road_Edge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_4_ls_road_edge_.MergeFrom(from.dt_array_4_ls_road_edge_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stroadedgecommon()->::atd::meprocess::RoadEdgeCommon::MergeFrom(from.stroadedgecommon());
    }
  }
}

void Dt_Record_LS_Road_Edge::CopyFrom(const Dt_Record_LS_Road_Edge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_LS_Road_Edge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_LS_Road_Edge::IsInitialized() const {
  return true;
}

void Dt_Record_LS_Road_Edge::Swap(Dt_Record_LS_Road_Edge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_LS_Road_Edge::InternalSwap(Dt_Record_LS_Road_Edge* other) {
  dt_array_4_ls_road_edge_.InternalSwap(&other->dt_array_4_ls_road_edge_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stroadedgecommon_, other->stroadedgecommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_LS_Road_Edge::GetTypeName() const {
  return "atd.meprocess.Dt_Record_LS_Road_Edge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_LS_Road_Edge

// optional .atd.common.Header header = 1;
bool Dt_Record_LS_Road_Edge::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_LS_Road_Edge::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_LS_Road_Edge::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_LS_Road_Edge::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_LS_Road_Edge::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_LS_Road_Edge::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.header)
  return header_;
}
::atd::common::Header* Dt_Record_LS_Road_Edge::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_Road_Edge.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_LS_Road_Edge::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_Road_Edge.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_LS_Road_Edge::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_LS_Road_Edge::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_LS_Road_Edge::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_LS_Road_Edge::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_LS_Road_Edge::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_LS_Road_Edge::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_LS_Road_Edge::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_LS_Road_Edge::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
}

// optional .atd.meprocess.RoadEdgeCommon stroadedgecommon = 3;
bool Dt_Record_LS_Road_Edge::has_stroadedgecommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_LS_Road_Edge::set_has_stroadedgecommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_LS_Road_Edge::clear_has_stroadedgecommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_LS_Road_Edge::clear_stroadedgecommon() {
  if (stroadedgecommon_ != NULL) stroadedgecommon_->::atd::meprocess::RoadEdgeCommon::Clear();
  clear_has_stroadedgecommon();
}
const ::atd::meprocess::RoadEdgeCommon& Dt_Record_LS_Road_Edge::stroadedgecommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
  return stroadedgecommon_ != NULL ? *stroadedgecommon_
                         : *::atd::meprocess::RoadEdgeCommon::internal_default_instance();
}
::atd::meprocess::RoadEdgeCommon* Dt_Record_LS_Road_Edge::mutable_stroadedgecommon() {
  set_has_stroadedgecommon();
  if (stroadedgecommon_ == NULL) {
    stroadedgecommon_ = new ::atd::meprocess::RoadEdgeCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
  return stroadedgecommon_;
}
::atd::meprocess::RoadEdgeCommon* Dt_Record_LS_Road_Edge::release_stroadedgecommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
  clear_has_stroadedgecommon();
  ::atd::meprocess::RoadEdgeCommon* temp = stroadedgecommon_;
  stroadedgecommon_ = NULL;
  return temp;
}
void Dt_Record_LS_Road_Edge::set_allocated_stroadedgecommon(::atd::meprocess::RoadEdgeCommon* stroadedgecommon) {
  delete stroadedgecommon_;
  stroadedgecommon_ = stroadedgecommon;
  if (stroadedgecommon) {
    set_has_stroadedgecommon();
  } else {
    clear_has_stroadedgecommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
}

// repeated .atd.meprocess.RoadEdge dt_array_4_ls_road_edge = 4;
int Dt_Record_LS_Road_Edge::dt_array_4_ls_road_edge_size() const {
  return dt_array_4_ls_road_edge_.size();
}
void Dt_Record_LS_Road_Edge::clear_dt_array_4_ls_road_edge() {
  dt_array_4_ls_road_edge_.Clear();
}
const ::atd::meprocess::RoadEdge& Dt_Record_LS_Road_Edge::dt_array_4_ls_road_edge(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_.Get(index);
}
::atd::meprocess::RoadEdge* Dt_Record_LS_Road_Edge::mutable_dt_array_4_ls_road_edge(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_.Mutable(index);
}
::atd::meprocess::RoadEdge* Dt_Record_LS_Road_Edge::add_dt_array_4_ls_road_edge() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::RoadEdge >*
Dt_Record_LS_Road_Edge::mutable_dt_array_4_ls_road_edge() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return &dt_array_4_ls_road_edge_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::RoadEdge >&
Dt_Record_LS_Road_Edge::dt_array_4_ls_road_edge() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RoadEdge::kLsRoadEdgeIdFieldNumber;
const int RoadEdge::kLsRoadEdgeAgeFieldNumber;
const int RoadEdge::kLsRoadEdgeExistProbFieldNumber;
const int RoadEdge::kLsRoadEdgeTypeAvgClassFieldNumber;
const int RoadEdge::kLsRoadEdgePredictionTypeFieldNumber;
const int RoadEdge::kLsRoadEdgeHeightFieldNumber;
const int RoadEdge::kLsRoadEdgeViewRangeStartFieldNumber;
const int RoadEdge::kReserved1FieldNumber;
const int RoadEdge::kLsRoadEdgeViewRangeEndFieldNumber;
const int RoadEdge::kLsRoadEdgeSideFieldNumber;
const int RoadEdge::kLsRoadEdgeIndexFieldNumber;
const int RoadEdge::kReserved2FieldNumber;
const int RoadEdge::kLsRoadEdgeLineC3FieldNumber;
const int RoadEdge::kLsRoadEdgeLineC3StdFieldNumber;
const int RoadEdge::kLsRoadEdgeLineC2FieldNumber;
const int RoadEdge::kLsRoadEdgeLineC2StdFieldNumber;
const int RoadEdge::kLsRoadEdgeLineC1FieldNumber;
const int RoadEdge::kLsRoadEdgeLineC1StdFieldNumber;
const int RoadEdge::kReserved3FieldNumber;
const int RoadEdge::kLsRoadEdgeLineC0FieldNumber;
const int RoadEdge::kLsRoadEdgeLineC0StdFieldNumber;
const int RoadEdge::kLsRoadEdgeBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RoadEdge::RoadEdge()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.RoadEdge)
}
RoadEdge::RoadEdge(const RoadEdge& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&ls_road_edge_id_, &from.ls_road_edge_id_,
    reinterpret_cast<char*>(&ls_road_edge_buffer_) -
    reinterpret_cast<char*>(&ls_road_edge_id_) + sizeof(ls_road_edge_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.RoadEdge)
}

void RoadEdge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&ls_road_edge_id_, 0, reinterpret_cast<char*>(&ls_road_edge_buffer_) -
    reinterpret_cast<char*>(&ls_road_edge_id_) + sizeof(ls_road_edge_buffer_));
}

RoadEdge::~RoadEdge() {
  // @@protoc_insertion_point(destructor:atd.meprocess.RoadEdge)
  SharedDtor();
}

void RoadEdge::SharedDtor() {
}

void RoadEdge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RoadEdge& RoadEdge::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

RoadEdge* RoadEdge::New(::google::protobuf::Arena* arena) const {
  RoadEdge* n = new RoadEdge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RoadEdge::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.RoadEdge)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&ls_road_edge_id_, 0, reinterpret_cast<char*>(&reserved_1_) -
      reinterpret_cast<char*>(&ls_road_edge_id_) + sizeof(reserved_1_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&ls_road_edge_view_range_end_, 0, reinterpret_cast<char*>(&ls_road_edge_line_c2_std_) -
      reinterpret_cast<char*>(&ls_road_edge_view_range_end_) + sizeof(ls_road_edge_line_c2_std_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&ls_road_edge_line_c1_, 0, reinterpret_cast<char*>(&ls_road_edge_buffer_) -
      reinterpret_cast<char*>(&ls_road_edge_line_c1_) + sizeof(ls_road_edge_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RoadEdge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.RoadEdge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ls_road_edge_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_ls_road_edge_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_edge_age = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ls_road_edge_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_exist_prob = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_ls_road_edge_exist_prob();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_exist_prob_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.RoadEdge.Ls_road_edge_type_avg__classType ls_road_edge_type_avg__class = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType_IsValid(value)) {
            set_ls_road_edge_type_avg__class(static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_edge_prediction_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_ls_road_edge_prediction_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_prediction_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_height = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_ls_road_edge_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_view_range_start = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_ls_road_edge_view_range_start();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_view_range_start_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_view_range_end = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_ls_road_edge_view_range_end();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_view_range_end_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.RoadEdge.Ls_road_edge_sideType ls_road_edge_side = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::RoadEdge_Ls_road_edge_sideType_IsValid(value)) {
            set_ls_road_edge_side(static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_sideType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.RoadEdge.Ls_road_edge_indexType ls_road_edge_index = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::RoadEdge_Ls_road_edge_indexType_IsValid(value)) {
            set_ls_road_edge_index(static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_indexType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_road_edge_line_c3 = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_ls_road_edge_line_c3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_road_edge_line_c3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_road_edge_line_c3_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_ls_road_edge_line_c3_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_road_edge_line_c3_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_road_edge_line_c2 = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_ls_road_edge_line_c2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_road_edge_line_c2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double ls_road_edge_line_c2_std = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_ls_road_edge_line_c2_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ls_road_edge_line_c2_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_line_c1 = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_ls_road_edge_line_c1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_line_c1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_line_c1_std = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_ls_road_edge_line_c1_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_line_c1_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_3 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_line_c0 = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_ls_road_edge_line_c0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_line_c0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float ls_road_edge_line_c0_std = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_ls_road_edge_line_c0_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ls_road_edge_line_c0_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 ls_road_edge_buffer = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_ls_road_edge_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ls_road_edge_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.RoadEdge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.RoadEdge)
  return false;
#undef DO_
}

void RoadEdge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.RoadEdge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 ls_road_edge_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ls_road_edge_id(), output);
  }

  // optional int32 ls_road_edge_age = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ls_road_edge_age(), output);
  }

  // optional float ls_road_edge_exist_prob = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->ls_road_edge_exist_prob(), output);
  }

  // optional .atd.meprocess.RoadEdge.Ls_road_edge_type_avg__classType ls_road_edge_type_avg__class = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->ls_road_edge_type_avg__class(), output);
  }

  // optional int32 ls_road_edge_prediction_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->ls_road_edge_prediction_type(), output);
  }

  // optional float ls_road_edge_height = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ls_road_edge_height(), output);
  }

  // optional float ls_road_edge_view_range_start = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ls_road_edge_view_range_start(), output);
  }

  // optional int32 reserved_1 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->reserved_1(), output);
  }

  // optional float ls_road_edge_view_range_end = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->ls_road_edge_view_range_end(), output);
  }

  // optional .atd.meprocess.RoadEdge.Ls_road_edge_sideType ls_road_edge_side = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->ls_road_edge_side(), output);
  }

  // optional .atd.meprocess.RoadEdge.Ls_road_edge_indexType ls_road_edge_index = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->ls_road_edge_index(), output);
  }

  // optional int32 reserved_2 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reserved_2(), output);
  }

  // optional double ls_road_edge_line_c3 = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->ls_road_edge_line_c3(), output);
  }

  // optional double ls_road_edge_line_c3_std = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->ls_road_edge_line_c3_std(), output);
  }

  // optional double ls_road_edge_line_c2 = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ls_road_edge_line_c2(), output);
  }

  // optional double ls_road_edge_line_c2_std = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ls_road_edge_line_c2_std(), output);
  }

  // optional float ls_road_edge_line_c1 = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->ls_road_edge_line_c1(), output);
  }

  // optional float ls_road_edge_line_c1_std = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->ls_road_edge_line_c1_std(), output);
  }

  // optional int32 reserved_3 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->reserved_3(), output);
  }

  // optional float ls_road_edge_line_c0 = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->ls_road_edge_line_c0(), output);
  }

  // optional float ls_road_edge_line_c0_std = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->ls_road_edge_line_c0_std(), output);
  }

  // optional int32 ls_road_edge_buffer = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ls_road_edge_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.RoadEdge)
}

size_t RoadEdge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.RoadEdge)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 ls_road_edge_id = 1;
    if (has_ls_road_edge_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_id());
    }

    // optional int32 ls_road_edge_age = 2;
    if (has_ls_road_edge_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_age());
    }

    // optional float ls_road_edge_exist_prob = 3;
    if (has_ls_road_edge_exist_prob()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.RoadEdge.Ls_road_edge_type_avg__classType ls_road_edge_type_avg__class = 4;
    if (has_ls_road_edge_type_avg__class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ls_road_edge_type_avg__class());
    }

    // optional int32 ls_road_edge_prediction_type = 5;
    if (has_ls_road_edge_prediction_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_prediction_type());
    }

    // optional float ls_road_edge_height = 6;
    if (has_ls_road_edge_height()) {
      total_size += 1 + 4;
    }

    // optional float ls_road_edge_view_range_start = 7;
    if (has_ls_road_edge_view_range_start()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_1 = 8;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float ls_road_edge_view_range_end = 9;
    if (has_ls_road_edge_view_range_end()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.RoadEdge.Ls_road_edge_sideType ls_road_edge_side = 10;
    if (has_ls_road_edge_side()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ls_road_edge_side());
    }

    // optional .atd.meprocess.RoadEdge.Ls_road_edge_indexType ls_road_edge_index = 11;
    if (has_ls_road_edge_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ls_road_edge_index());
    }

    // optional int32 reserved_2 = 12;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional double ls_road_edge_line_c3 = 13;
    if (has_ls_road_edge_line_c3()) {
      total_size += 1 + 8;
    }

    // optional double ls_road_edge_line_c3_std = 14;
    if (has_ls_road_edge_line_c3_std()) {
      total_size += 1 + 8;
    }

    // optional double ls_road_edge_line_c2 = 15;
    if (has_ls_road_edge_line_c2()) {
      total_size += 1 + 8;
    }

    // optional double ls_road_edge_line_c2_std = 16;
    if (has_ls_road_edge_line_c2_std()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional float ls_road_edge_line_c1 = 17;
    if (has_ls_road_edge_line_c1()) {
      total_size += 2 + 4;
    }

    // optional float ls_road_edge_line_c1_std = 18;
    if (has_ls_road_edge_line_c1_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_3 = 19;
    if (has_reserved_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_3());
    }

    // optional float ls_road_edge_line_c0 = 20;
    if (has_ls_road_edge_line_c0()) {
      total_size += 2 + 4;
    }

    // optional float ls_road_edge_line_c0_std = 21;
    if (has_ls_road_edge_line_c0_std()) {
      total_size += 2 + 4;
    }

    // optional int32 ls_road_edge_buffer = 22;
    if (has_ls_road_edge_buffer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ls_road_edge_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoadEdge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RoadEdge*>(&from));
}

void RoadEdge::MergeFrom(const RoadEdge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.RoadEdge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      ls_road_edge_id_ = from.ls_road_edge_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      ls_road_edge_age_ = from.ls_road_edge_age_;
    }
    if (cached_has_bits & 0x00000004u) {
      ls_road_edge_exist_prob_ = from.ls_road_edge_exist_prob_;
    }
    if (cached_has_bits & 0x00000008u) {
      ls_road_edge_type_avg__class_ = from.ls_road_edge_type_avg__class_;
    }
    if (cached_has_bits & 0x00000010u) {
      ls_road_edge_prediction_type_ = from.ls_road_edge_prediction_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      ls_road_edge_height_ = from.ls_road_edge_height_;
    }
    if (cached_has_bits & 0x00000040u) {
      ls_road_edge_view_range_start_ = from.ls_road_edge_view_range_start_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_1_ = from.reserved_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      ls_road_edge_view_range_end_ = from.ls_road_edge_view_range_end_;
    }
    if (cached_has_bits & 0x00000200u) {
      ls_road_edge_side_ = from.ls_road_edge_side_;
    }
    if (cached_has_bits & 0x00000400u) {
      ls_road_edge_index_ = from.ls_road_edge_index_;
    }
    if (cached_has_bits & 0x00000800u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00001000u) {
      ls_road_edge_line_c3_ = from.ls_road_edge_line_c3_;
    }
    if (cached_has_bits & 0x00002000u) {
      ls_road_edge_line_c3_std_ = from.ls_road_edge_line_c3_std_;
    }
    if (cached_has_bits & 0x00004000u) {
      ls_road_edge_line_c2_ = from.ls_road_edge_line_c2_;
    }
    if (cached_has_bits & 0x00008000u) {
      ls_road_edge_line_c2_std_ = from.ls_road_edge_line_c2_std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      ls_road_edge_line_c1_ = from.ls_road_edge_line_c1_;
    }
    if (cached_has_bits & 0x00020000u) {
      ls_road_edge_line_c1_std_ = from.ls_road_edge_line_c1_std_;
    }
    if (cached_has_bits & 0x00040000u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00080000u) {
      ls_road_edge_line_c0_ = from.ls_road_edge_line_c0_;
    }
    if (cached_has_bits & 0x00100000u) {
      ls_road_edge_line_c0_std_ = from.ls_road_edge_line_c0_std_;
    }
    if (cached_has_bits & 0x00200000u) {
      ls_road_edge_buffer_ = from.ls_road_edge_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoadEdge::CopyFrom(const RoadEdge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.RoadEdge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoadEdge::IsInitialized() const {
  return true;
}

void RoadEdge::Swap(RoadEdge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RoadEdge::InternalSwap(RoadEdge* other) {
  std::swap(ls_road_edge_id_, other->ls_road_edge_id_);
  std::swap(ls_road_edge_age_, other->ls_road_edge_age_);
  std::swap(ls_road_edge_exist_prob_, other->ls_road_edge_exist_prob_);
  std::swap(ls_road_edge_type_avg__class_, other->ls_road_edge_type_avg__class_);
  std::swap(ls_road_edge_prediction_type_, other->ls_road_edge_prediction_type_);
  std::swap(ls_road_edge_height_, other->ls_road_edge_height_);
  std::swap(ls_road_edge_view_range_start_, other->ls_road_edge_view_range_start_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(ls_road_edge_view_range_end_, other->ls_road_edge_view_range_end_);
  std::swap(ls_road_edge_side_, other->ls_road_edge_side_);
  std::swap(ls_road_edge_index_, other->ls_road_edge_index_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(ls_road_edge_line_c3_, other->ls_road_edge_line_c3_);
  std::swap(ls_road_edge_line_c3_std_, other->ls_road_edge_line_c3_std_);
  std::swap(ls_road_edge_line_c2_, other->ls_road_edge_line_c2_);
  std::swap(ls_road_edge_line_c2_std_, other->ls_road_edge_line_c2_std_);
  std::swap(ls_road_edge_line_c1_, other->ls_road_edge_line_c1_);
  std::swap(ls_road_edge_line_c1_std_, other->ls_road_edge_line_c1_std_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(ls_road_edge_line_c0_, other->ls_road_edge_line_c0_);
  std::swap(ls_road_edge_line_c0_std_, other->ls_road_edge_line_c0_std_);
  std::swap(ls_road_edge_buffer_, other->ls_road_edge_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RoadEdge::GetTypeName() const {
  return "atd.meprocess.RoadEdge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RoadEdge

// optional int32 ls_road_edge_id = 1;
bool RoadEdge::has_ls_road_edge_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RoadEdge::set_has_ls_road_edge_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RoadEdge::clear_has_ls_road_edge_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RoadEdge::clear_ls_road_edge_id() {
  ls_road_edge_id_ = 0;
  clear_has_ls_road_edge_id();
}
::google::protobuf::int32 RoadEdge::ls_road_edge_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_id)
  return ls_road_edge_id_;
}
void RoadEdge::set_ls_road_edge_id(::google::protobuf::int32 value) {
  set_has_ls_road_edge_id();
  ls_road_edge_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_id)
}

// optional int32 ls_road_edge_age = 2;
bool RoadEdge::has_ls_road_edge_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RoadEdge::set_has_ls_road_edge_age() {
  _has_bits_[0] |= 0x00000002u;
}
void RoadEdge::clear_has_ls_road_edge_age() {
  _has_bits_[0] &= ~0x00000002u;
}
void RoadEdge::clear_ls_road_edge_age() {
  ls_road_edge_age_ = 0;
  clear_has_ls_road_edge_age();
}
::google::protobuf::int32 RoadEdge::ls_road_edge_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_age)
  return ls_road_edge_age_;
}
void RoadEdge::set_ls_road_edge_age(::google::protobuf::int32 value) {
  set_has_ls_road_edge_age();
  ls_road_edge_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_age)
}

// optional float ls_road_edge_exist_prob = 3;
bool RoadEdge::has_ls_road_edge_exist_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RoadEdge::set_has_ls_road_edge_exist_prob() {
  _has_bits_[0] |= 0x00000004u;
}
void RoadEdge::clear_has_ls_road_edge_exist_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
void RoadEdge::clear_ls_road_edge_exist_prob() {
  ls_road_edge_exist_prob_ = 0;
  clear_has_ls_road_edge_exist_prob();
}
float RoadEdge::ls_road_edge_exist_prob() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_exist_prob)
  return ls_road_edge_exist_prob_;
}
void RoadEdge::set_ls_road_edge_exist_prob(float value) {
  set_has_ls_road_edge_exist_prob();
  ls_road_edge_exist_prob_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_exist_prob)
}

// optional .atd.meprocess.RoadEdge.Ls_road_edge_type_avg__classType ls_road_edge_type_avg__class = 4;
bool RoadEdge::has_ls_road_edge_type_avg__class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RoadEdge::set_has_ls_road_edge_type_avg__class() {
  _has_bits_[0] |= 0x00000008u;
}
void RoadEdge::clear_has_ls_road_edge_type_avg__class() {
  _has_bits_[0] &= ~0x00000008u;
}
void RoadEdge::clear_ls_road_edge_type_avg__class() {
  ls_road_edge_type_avg__class_ = 0;
  clear_has_ls_road_edge_type_avg__class();
}
::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::ls_road_edge_type_avg__class() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_type_avg__class)
  return static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType >(ls_road_edge_type_avg__class_);
}
void RoadEdge::set_ls_road_edge_type_avg__class(::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType value) {
  assert(::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType_IsValid(value));
  set_has_ls_road_edge_type_avg__class();
  ls_road_edge_type_avg__class_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_type_avg__class)
}

// optional int32 ls_road_edge_prediction_type = 5;
bool RoadEdge::has_ls_road_edge_prediction_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RoadEdge::set_has_ls_road_edge_prediction_type() {
  _has_bits_[0] |= 0x00000010u;
}
void RoadEdge::clear_has_ls_road_edge_prediction_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void RoadEdge::clear_ls_road_edge_prediction_type() {
  ls_road_edge_prediction_type_ = 0;
  clear_has_ls_road_edge_prediction_type();
}
::google::protobuf::int32 RoadEdge::ls_road_edge_prediction_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_prediction_type)
  return ls_road_edge_prediction_type_;
}
void RoadEdge::set_ls_road_edge_prediction_type(::google::protobuf::int32 value) {
  set_has_ls_road_edge_prediction_type();
  ls_road_edge_prediction_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_prediction_type)
}

// optional float ls_road_edge_height = 6;
bool RoadEdge::has_ls_road_edge_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RoadEdge::set_has_ls_road_edge_height() {
  _has_bits_[0] |= 0x00000020u;
}
void RoadEdge::clear_has_ls_road_edge_height() {
  _has_bits_[0] &= ~0x00000020u;
}
void RoadEdge::clear_ls_road_edge_height() {
  ls_road_edge_height_ = 0;
  clear_has_ls_road_edge_height();
}
float RoadEdge::ls_road_edge_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_height)
  return ls_road_edge_height_;
}
void RoadEdge::set_ls_road_edge_height(float value) {
  set_has_ls_road_edge_height();
  ls_road_edge_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_height)
}

// optional float ls_road_edge_view_range_start = 7;
bool RoadEdge::has_ls_road_edge_view_range_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RoadEdge::set_has_ls_road_edge_view_range_start() {
  _has_bits_[0] |= 0x00000040u;
}
void RoadEdge::clear_has_ls_road_edge_view_range_start() {
  _has_bits_[0] &= ~0x00000040u;
}
void RoadEdge::clear_ls_road_edge_view_range_start() {
  ls_road_edge_view_range_start_ = 0;
  clear_has_ls_road_edge_view_range_start();
}
float RoadEdge::ls_road_edge_view_range_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_view_range_start)
  return ls_road_edge_view_range_start_;
}
void RoadEdge::set_ls_road_edge_view_range_start(float value) {
  set_has_ls_road_edge_view_range_start();
  ls_road_edge_view_range_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_view_range_start)
}

// optional int32 reserved_1 = 8;
bool RoadEdge::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RoadEdge::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000080u;
}
void RoadEdge::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000080u;
}
void RoadEdge::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 RoadEdge::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.reserved_1)
  return reserved_1_;
}
void RoadEdge::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.reserved_1)
}

// optional float ls_road_edge_view_range_end = 9;
bool RoadEdge::has_ls_road_edge_view_range_end() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RoadEdge::set_has_ls_road_edge_view_range_end() {
  _has_bits_[0] |= 0x00000100u;
}
void RoadEdge::clear_has_ls_road_edge_view_range_end() {
  _has_bits_[0] &= ~0x00000100u;
}
void RoadEdge::clear_ls_road_edge_view_range_end() {
  ls_road_edge_view_range_end_ = 0;
  clear_has_ls_road_edge_view_range_end();
}
float RoadEdge::ls_road_edge_view_range_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_view_range_end)
  return ls_road_edge_view_range_end_;
}
void RoadEdge::set_ls_road_edge_view_range_end(float value) {
  set_has_ls_road_edge_view_range_end();
  ls_road_edge_view_range_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_view_range_end)
}

// optional .atd.meprocess.RoadEdge.Ls_road_edge_sideType ls_road_edge_side = 10;
bool RoadEdge::has_ls_road_edge_side() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RoadEdge::set_has_ls_road_edge_side() {
  _has_bits_[0] |= 0x00000200u;
}
void RoadEdge::clear_has_ls_road_edge_side() {
  _has_bits_[0] &= ~0x00000200u;
}
void RoadEdge::clear_ls_road_edge_side() {
  ls_road_edge_side_ = 0;
  clear_has_ls_road_edge_side();
}
::atd::meprocess::RoadEdge_Ls_road_edge_sideType RoadEdge::ls_road_edge_side() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_side)
  return static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_sideType >(ls_road_edge_side_);
}
void RoadEdge::set_ls_road_edge_side(::atd::meprocess::RoadEdge_Ls_road_edge_sideType value) {
  assert(::atd::meprocess::RoadEdge_Ls_road_edge_sideType_IsValid(value));
  set_has_ls_road_edge_side();
  ls_road_edge_side_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_side)
}

// optional .atd.meprocess.RoadEdge.Ls_road_edge_indexType ls_road_edge_index = 11;
bool RoadEdge::has_ls_road_edge_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void RoadEdge::set_has_ls_road_edge_index() {
  _has_bits_[0] |= 0x00000400u;
}
void RoadEdge::clear_has_ls_road_edge_index() {
  _has_bits_[0] &= ~0x00000400u;
}
void RoadEdge::clear_ls_road_edge_index() {
  ls_road_edge_index_ = 0;
  clear_has_ls_road_edge_index();
}
::atd::meprocess::RoadEdge_Ls_road_edge_indexType RoadEdge::ls_road_edge_index() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_index)
  return static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_indexType >(ls_road_edge_index_);
}
void RoadEdge::set_ls_road_edge_index(::atd::meprocess::RoadEdge_Ls_road_edge_indexType value) {
  assert(::atd::meprocess::RoadEdge_Ls_road_edge_indexType_IsValid(value));
  set_has_ls_road_edge_index();
  ls_road_edge_index_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_index)
}

// optional int32 reserved_2 = 12;
bool RoadEdge::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void RoadEdge::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000800u;
}
void RoadEdge::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000800u;
}
void RoadEdge::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 RoadEdge::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.reserved_2)
  return reserved_2_;
}
void RoadEdge::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.reserved_2)
}

// optional double ls_road_edge_line_c3 = 13;
bool RoadEdge::has_ls_road_edge_line_c3() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c3() {
  _has_bits_[0] |= 0x00001000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c3() {
  _has_bits_[0] &= ~0x00001000u;
}
void RoadEdge::clear_ls_road_edge_line_c3() {
  ls_road_edge_line_c3_ = 0;
  clear_has_ls_road_edge_line_c3();
}
double RoadEdge::ls_road_edge_line_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c3)
  return ls_road_edge_line_c3_;
}
void RoadEdge::set_ls_road_edge_line_c3(double value) {
  set_has_ls_road_edge_line_c3();
  ls_road_edge_line_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c3)
}

// optional double ls_road_edge_line_c3_std = 14;
bool RoadEdge::has_ls_road_edge_line_c3_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c3_std() {
  _has_bits_[0] |= 0x00002000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c3_std() {
  _has_bits_[0] &= ~0x00002000u;
}
void RoadEdge::clear_ls_road_edge_line_c3_std() {
  ls_road_edge_line_c3_std_ = 0;
  clear_has_ls_road_edge_line_c3_std();
}
double RoadEdge::ls_road_edge_line_c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c3_std)
  return ls_road_edge_line_c3_std_;
}
void RoadEdge::set_ls_road_edge_line_c3_std(double value) {
  set_has_ls_road_edge_line_c3_std();
  ls_road_edge_line_c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c3_std)
}

// optional double ls_road_edge_line_c2 = 15;
bool RoadEdge::has_ls_road_edge_line_c2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c2() {
  _has_bits_[0] |= 0x00004000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c2() {
  _has_bits_[0] &= ~0x00004000u;
}
void RoadEdge::clear_ls_road_edge_line_c2() {
  ls_road_edge_line_c2_ = 0;
  clear_has_ls_road_edge_line_c2();
}
double RoadEdge::ls_road_edge_line_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c2)
  return ls_road_edge_line_c2_;
}
void RoadEdge::set_ls_road_edge_line_c2(double value) {
  set_has_ls_road_edge_line_c2();
  ls_road_edge_line_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c2)
}

// optional double ls_road_edge_line_c2_std = 16;
bool RoadEdge::has_ls_road_edge_line_c2_std() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c2_std() {
  _has_bits_[0] |= 0x00008000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c2_std() {
  _has_bits_[0] &= ~0x00008000u;
}
void RoadEdge::clear_ls_road_edge_line_c2_std() {
  ls_road_edge_line_c2_std_ = 0;
  clear_has_ls_road_edge_line_c2_std();
}
double RoadEdge::ls_road_edge_line_c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c2_std)
  return ls_road_edge_line_c2_std_;
}
void RoadEdge::set_ls_road_edge_line_c2_std(double value) {
  set_has_ls_road_edge_line_c2_std();
  ls_road_edge_line_c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c2_std)
}

// optional float ls_road_edge_line_c1 = 17;
bool RoadEdge::has_ls_road_edge_line_c1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c1() {
  _has_bits_[0] |= 0x00010000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c1() {
  _has_bits_[0] &= ~0x00010000u;
}
void RoadEdge::clear_ls_road_edge_line_c1() {
  ls_road_edge_line_c1_ = 0;
  clear_has_ls_road_edge_line_c1();
}
float RoadEdge::ls_road_edge_line_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c1)
  return ls_road_edge_line_c1_;
}
void RoadEdge::set_ls_road_edge_line_c1(float value) {
  set_has_ls_road_edge_line_c1();
  ls_road_edge_line_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c1)
}

// optional float ls_road_edge_line_c1_std = 18;
bool RoadEdge::has_ls_road_edge_line_c1_std() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c1_std() {
  _has_bits_[0] |= 0x00020000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c1_std() {
  _has_bits_[0] &= ~0x00020000u;
}
void RoadEdge::clear_ls_road_edge_line_c1_std() {
  ls_road_edge_line_c1_std_ = 0;
  clear_has_ls_road_edge_line_c1_std();
}
float RoadEdge::ls_road_edge_line_c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c1_std)
  return ls_road_edge_line_c1_std_;
}
void RoadEdge::set_ls_road_edge_line_c1_std(float value) {
  set_has_ls_road_edge_line_c1_std();
  ls_road_edge_line_c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c1_std)
}

// optional int32 reserved_3 = 19;
bool RoadEdge::has_reserved_3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void RoadEdge::set_has_reserved_3() {
  _has_bits_[0] |= 0x00040000u;
}
void RoadEdge::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00040000u;
}
void RoadEdge::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
::google::protobuf::int32 RoadEdge::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.reserved_3)
  return reserved_3_;
}
void RoadEdge::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.reserved_3)
}

// optional float ls_road_edge_line_c0 = 20;
bool RoadEdge::has_ls_road_edge_line_c0() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c0() {
  _has_bits_[0] |= 0x00080000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c0() {
  _has_bits_[0] &= ~0x00080000u;
}
void RoadEdge::clear_ls_road_edge_line_c0() {
  ls_road_edge_line_c0_ = 0;
  clear_has_ls_road_edge_line_c0();
}
float RoadEdge::ls_road_edge_line_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c0)
  return ls_road_edge_line_c0_;
}
void RoadEdge::set_ls_road_edge_line_c0(float value) {
  set_has_ls_road_edge_line_c0();
  ls_road_edge_line_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c0)
}

// optional float ls_road_edge_line_c0_std = 21;
bool RoadEdge::has_ls_road_edge_line_c0_std() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_line_c0_std() {
  _has_bits_[0] |= 0x00100000u;
}
void RoadEdge::clear_has_ls_road_edge_line_c0_std() {
  _has_bits_[0] &= ~0x00100000u;
}
void RoadEdge::clear_ls_road_edge_line_c0_std() {
  ls_road_edge_line_c0_std_ = 0;
  clear_has_ls_road_edge_line_c0_std();
}
float RoadEdge::ls_road_edge_line_c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c0_std)
  return ls_road_edge_line_c0_std_;
}
void RoadEdge::set_ls_road_edge_line_c0_std(float value) {
  set_has_ls_road_edge_line_c0_std();
  ls_road_edge_line_c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c0_std)
}

// optional int32 ls_road_edge_buffer = 22;
bool RoadEdge::has_ls_road_edge_buffer() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void RoadEdge::set_has_ls_road_edge_buffer() {
  _has_bits_[0] |= 0x00200000u;
}
void RoadEdge::clear_has_ls_road_edge_buffer() {
  _has_bits_[0] &= ~0x00200000u;
}
void RoadEdge::clear_ls_road_edge_buffer() {
  ls_road_edge_buffer_ = 0;
  clear_has_ls_road_edge_buffer();
}
::google::protobuf::int32 RoadEdge::ls_road_edge_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_buffer)
  return ls_road_edge_buffer_;
}
void RoadEdge::set_ls_road_edge_buffer(::google::protobuf::int32 value) {
  set_has_ls_road_edge_buffer();
  ls_road_edge_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ObjCommon::kObjZeroByteFieldNumber;
const int ObjCommon::kObjProtocolVersionFieldNumber;
const int ObjCommon::kObjSyncIdFieldNumber;
const int ObjCommon::kObjVruCountFieldNumber;
const int ObjCommon::kObjVdCountFieldNumber;
const int ObjCommon::kObjGeneralObjCountFieldNumber;
const int ObjCommon::kObjAnimalCountFieldNumber;
const int ObjCommon::kObjVdNivLeftFieldNumber;
const int ObjCommon::kObjVdNivRightFieldNumber;
const int ObjCommon::kObjVdCipvIdFieldNumber;
const int ObjCommon::kObjVdCipvLostFieldNumber;
const int ObjCommon::kObjVdAllowAcceFieldNumber;
const int ObjCommon::kObjHeaderBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ObjCommon::ObjCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.ObjCommon)
}
ObjCommon::ObjCommon(const ObjCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obj_zero_byte_, &from.obj_zero_byte_,
    reinterpret_cast<char*>(&obj_header_buffer_) -
    reinterpret_cast<char*>(&obj_zero_byte_) + sizeof(obj_header_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.ObjCommon)
}

void ObjCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&obj_zero_byte_, 0, reinterpret_cast<char*>(&obj_header_buffer_) -
    reinterpret_cast<char*>(&obj_zero_byte_) + sizeof(obj_header_buffer_));
}

ObjCommon::~ObjCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.ObjCommon)
  SharedDtor();
}

void ObjCommon::SharedDtor() {
}

void ObjCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ObjCommon& ObjCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

ObjCommon* ObjCommon::New(::google::protobuf::Arena* arena) const {
  ObjCommon* n = new ObjCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ObjCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.ObjCommon)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&obj_zero_byte_, 0, reinterpret_cast<char*>(&obj_vd_niv_left_) -
      reinterpret_cast<char*>(&obj_zero_byte_) + sizeof(obj_vd_niv_left_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&obj_vd_niv_right_, 0, reinterpret_cast<char*>(&obj_header_buffer_) -
      reinterpret_cast<char*>(&obj_vd_niv_right_) + sizeof(obj_header_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ObjCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.ObjCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obj_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_obj_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_obj_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_obj_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_vru_count = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_obj_vru_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_vru_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_vd_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_obj_vd_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_vd_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_general_obj_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_obj_general_obj_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_general_obj_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_animal_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_obj_animal_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_animal_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_vd_niv_left = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_obj_vd_niv_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_vd_niv_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_vd_niv_right = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_obj_vd_niv_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_vd_niv_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_vd_cipv_id = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_obj_vd_cipv_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_vd_cipv_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.ObjCommon.Obj_vd_cipv_lostType obj_vd_cipv_lost = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType_IsValid(value)) {
            set_obj_vd_cipv_lost(static_cast< ::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.ObjCommon.Obj_vd_allow_acceType obj_vd_allow_acce = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::ObjCommon_Obj_vd_allow_acceType_IsValid(value)) {
            set_obj_vd_allow_acce(static_cast< ::atd::meprocess::ObjCommon_Obj_vd_allow_acceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_header_buffer = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_obj_header_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_header_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.ObjCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.ObjCommon)
  return false;
#undef DO_
}

void ObjCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.ObjCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obj_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj_zero_byte(), output);
  }

  // optional int32 obj_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->obj_protocol_version(), output);
  }

  // optional int32 obj_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->obj_sync_id(), output);
  }

  // optional int32 obj_vru_count = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obj_vru_count(), output);
  }

  // optional int32 obj_vd_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->obj_vd_count(), output);
  }

  // optional int32 obj_general_obj_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->obj_general_obj_count(), output);
  }

  // optional int32 obj_animal_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->obj_animal_count(), output);
  }

  // optional int32 obj_vd_niv_left = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->obj_vd_niv_left(), output);
  }

  // optional int32 obj_vd_niv_right = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->obj_vd_niv_right(), output);
  }

  // optional int32 obj_vd_cipv_id = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->obj_vd_cipv_id(), output);
  }

  // optional .atd.meprocess.ObjCommon.Obj_vd_cipv_lostType obj_vd_cipv_lost = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->obj_vd_cipv_lost(), output);
  }

  // optional .atd.meprocess.ObjCommon.Obj_vd_allow_acceType obj_vd_allow_acce = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->obj_vd_allow_acce(), output);
  }

  // optional float obj_header_buffer = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->obj_header_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.ObjCommon)
}

size_t ObjCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.ObjCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 obj_zero_byte = 1;
    if (has_obj_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_zero_byte());
    }

    // optional int32 obj_protocol_version = 2;
    if (has_obj_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_protocol_version());
    }

    // optional int32 obj_sync_id = 3;
    if (has_obj_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_sync_id());
    }

    // optional int32 obj_vru_count = 4;
    if (has_obj_vru_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_vru_count());
    }

    // optional int32 obj_vd_count = 5;
    if (has_obj_vd_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_vd_count());
    }

    // optional int32 obj_general_obj_count = 6;
    if (has_obj_general_obj_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_general_obj_count());
    }

    // optional int32 obj_animal_count = 7;
    if (has_obj_animal_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_animal_count());
    }

    // optional int32 obj_vd_niv_left = 8;
    if (has_obj_vd_niv_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_vd_niv_left());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional int32 obj_vd_niv_right = 9;
    if (has_obj_vd_niv_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_vd_niv_right());
    }

    // optional int32 obj_vd_cipv_id = 10;
    if (has_obj_vd_cipv_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_vd_cipv_id());
    }

    // optional .atd.meprocess.ObjCommon.Obj_vd_cipv_lostType obj_vd_cipv_lost = 11;
    if (has_obj_vd_cipv_lost()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obj_vd_cipv_lost());
    }

    // optional .atd.meprocess.ObjCommon.Obj_vd_allow_acceType obj_vd_allow_acce = 12;
    if (has_obj_vd_allow_acce()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obj_vd_allow_acce());
    }

    // optional float obj_header_buffer = 13;
    if (has_obj_header_buffer()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ObjCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ObjCommon*>(&from));
}

void ObjCommon::MergeFrom(const ObjCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.ObjCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      obj_zero_byte_ = from.obj_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      obj_protocol_version_ = from.obj_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      obj_sync_id_ = from.obj_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      obj_vru_count_ = from.obj_vru_count_;
    }
    if (cached_has_bits & 0x00000010u) {
      obj_vd_count_ = from.obj_vd_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      obj_general_obj_count_ = from.obj_general_obj_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      obj_animal_count_ = from.obj_animal_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      obj_vd_niv_left_ = from.obj_vd_niv_left_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      obj_vd_niv_right_ = from.obj_vd_niv_right_;
    }
    if (cached_has_bits & 0x00000200u) {
      obj_vd_cipv_id_ = from.obj_vd_cipv_id_;
    }
    if (cached_has_bits & 0x00000400u) {
      obj_vd_cipv_lost_ = from.obj_vd_cipv_lost_;
    }
    if (cached_has_bits & 0x00000800u) {
      obj_vd_allow_acce_ = from.obj_vd_allow_acce_;
    }
    if (cached_has_bits & 0x00001000u) {
      obj_header_buffer_ = from.obj_header_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ObjCommon::CopyFrom(const ObjCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.ObjCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjCommon::IsInitialized() const {
  return true;
}

void ObjCommon::Swap(ObjCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ObjCommon::InternalSwap(ObjCommon* other) {
  std::swap(obj_zero_byte_, other->obj_zero_byte_);
  std::swap(obj_protocol_version_, other->obj_protocol_version_);
  std::swap(obj_sync_id_, other->obj_sync_id_);
  std::swap(obj_vru_count_, other->obj_vru_count_);
  std::swap(obj_vd_count_, other->obj_vd_count_);
  std::swap(obj_general_obj_count_, other->obj_general_obj_count_);
  std::swap(obj_animal_count_, other->obj_animal_count_);
  std::swap(obj_vd_niv_left_, other->obj_vd_niv_left_);
  std::swap(obj_vd_niv_right_, other->obj_vd_niv_right_);
  std::swap(obj_vd_cipv_id_, other->obj_vd_cipv_id_);
  std::swap(obj_vd_cipv_lost_, other->obj_vd_cipv_lost_);
  std::swap(obj_vd_allow_acce_, other->obj_vd_allow_acce_);
  std::swap(obj_header_buffer_, other->obj_header_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ObjCommon::GetTypeName() const {
  return "atd.meprocess.ObjCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ObjCommon

// optional int32 obj_zero_byte = 1;
bool ObjCommon::has_obj_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ObjCommon::set_has_obj_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void ObjCommon::clear_has_obj_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void ObjCommon::clear_obj_zero_byte() {
  obj_zero_byte_ = 0;
  clear_has_obj_zero_byte();
}
::google::protobuf::int32 ObjCommon::obj_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_zero_byte)
  return obj_zero_byte_;
}
void ObjCommon::set_obj_zero_byte(::google::protobuf::int32 value) {
  set_has_obj_zero_byte();
  obj_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_zero_byte)
}

// optional int32 obj_protocol_version = 2;
bool ObjCommon::has_obj_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ObjCommon::set_has_obj_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void ObjCommon::clear_has_obj_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void ObjCommon::clear_obj_protocol_version() {
  obj_protocol_version_ = 0;
  clear_has_obj_protocol_version();
}
::google::protobuf::int32 ObjCommon::obj_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_protocol_version)
  return obj_protocol_version_;
}
void ObjCommon::set_obj_protocol_version(::google::protobuf::int32 value) {
  set_has_obj_protocol_version();
  obj_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_protocol_version)
}

// optional int32 obj_sync_id = 3;
bool ObjCommon::has_obj_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ObjCommon::set_has_obj_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ObjCommon::clear_has_obj_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ObjCommon::clear_obj_sync_id() {
  obj_sync_id_ = 0;
  clear_has_obj_sync_id();
}
::google::protobuf::int32 ObjCommon::obj_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_sync_id)
  return obj_sync_id_;
}
void ObjCommon::set_obj_sync_id(::google::protobuf::int32 value) {
  set_has_obj_sync_id();
  obj_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_sync_id)
}

// optional int32 obj_vru_count = 4;
bool ObjCommon::has_obj_vru_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ObjCommon::set_has_obj_vru_count() {
  _has_bits_[0] |= 0x00000008u;
}
void ObjCommon::clear_has_obj_vru_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void ObjCommon::clear_obj_vru_count() {
  obj_vru_count_ = 0;
  clear_has_obj_vru_count();
}
::google::protobuf::int32 ObjCommon::obj_vru_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vru_count)
  return obj_vru_count_;
}
void ObjCommon::set_obj_vru_count(::google::protobuf::int32 value) {
  set_has_obj_vru_count();
  obj_vru_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vru_count)
}

// optional int32 obj_vd_count = 5;
bool ObjCommon::has_obj_vd_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ObjCommon::set_has_obj_vd_count() {
  _has_bits_[0] |= 0x00000010u;
}
void ObjCommon::clear_has_obj_vd_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void ObjCommon::clear_obj_vd_count() {
  obj_vd_count_ = 0;
  clear_has_obj_vd_count();
}
::google::protobuf::int32 ObjCommon::obj_vd_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_count)
  return obj_vd_count_;
}
void ObjCommon::set_obj_vd_count(::google::protobuf::int32 value) {
  set_has_obj_vd_count();
  obj_vd_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_count)
}

// optional int32 obj_general_obj_count = 6;
bool ObjCommon::has_obj_general_obj_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ObjCommon::set_has_obj_general_obj_count() {
  _has_bits_[0] |= 0x00000020u;
}
void ObjCommon::clear_has_obj_general_obj_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void ObjCommon::clear_obj_general_obj_count() {
  obj_general_obj_count_ = 0;
  clear_has_obj_general_obj_count();
}
::google::protobuf::int32 ObjCommon::obj_general_obj_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_general_obj_count)
  return obj_general_obj_count_;
}
void ObjCommon::set_obj_general_obj_count(::google::protobuf::int32 value) {
  set_has_obj_general_obj_count();
  obj_general_obj_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_general_obj_count)
}

// optional int32 obj_animal_count = 7;
bool ObjCommon::has_obj_animal_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ObjCommon::set_has_obj_animal_count() {
  _has_bits_[0] |= 0x00000040u;
}
void ObjCommon::clear_has_obj_animal_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void ObjCommon::clear_obj_animal_count() {
  obj_animal_count_ = 0;
  clear_has_obj_animal_count();
}
::google::protobuf::int32 ObjCommon::obj_animal_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_animal_count)
  return obj_animal_count_;
}
void ObjCommon::set_obj_animal_count(::google::protobuf::int32 value) {
  set_has_obj_animal_count();
  obj_animal_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_animal_count)
}

// optional int32 obj_vd_niv_left = 8;
bool ObjCommon::has_obj_vd_niv_left() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ObjCommon::set_has_obj_vd_niv_left() {
  _has_bits_[0] |= 0x00000080u;
}
void ObjCommon::clear_has_obj_vd_niv_left() {
  _has_bits_[0] &= ~0x00000080u;
}
void ObjCommon::clear_obj_vd_niv_left() {
  obj_vd_niv_left_ = 0;
  clear_has_obj_vd_niv_left();
}
::google::protobuf::int32 ObjCommon::obj_vd_niv_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_niv_left)
  return obj_vd_niv_left_;
}
void ObjCommon::set_obj_vd_niv_left(::google::protobuf::int32 value) {
  set_has_obj_vd_niv_left();
  obj_vd_niv_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_niv_left)
}

// optional int32 obj_vd_niv_right = 9;
bool ObjCommon::has_obj_vd_niv_right() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ObjCommon::set_has_obj_vd_niv_right() {
  _has_bits_[0] |= 0x00000100u;
}
void ObjCommon::clear_has_obj_vd_niv_right() {
  _has_bits_[0] &= ~0x00000100u;
}
void ObjCommon::clear_obj_vd_niv_right() {
  obj_vd_niv_right_ = 0;
  clear_has_obj_vd_niv_right();
}
::google::protobuf::int32 ObjCommon::obj_vd_niv_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_niv_right)
  return obj_vd_niv_right_;
}
void ObjCommon::set_obj_vd_niv_right(::google::protobuf::int32 value) {
  set_has_obj_vd_niv_right();
  obj_vd_niv_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_niv_right)
}

// optional int32 obj_vd_cipv_id = 10;
bool ObjCommon::has_obj_vd_cipv_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ObjCommon::set_has_obj_vd_cipv_id() {
  _has_bits_[0] |= 0x00000200u;
}
void ObjCommon::clear_has_obj_vd_cipv_id() {
  _has_bits_[0] &= ~0x00000200u;
}
void ObjCommon::clear_obj_vd_cipv_id() {
  obj_vd_cipv_id_ = 0;
  clear_has_obj_vd_cipv_id();
}
::google::protobuf::int32 ObjCommon::obj_vd_cipv_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_cipv_id)
  return obj_vd_cipv_id_;
}
void ObjCommon::set_obj_vd_cipv_id(::google::protobuf::int32 value) {
  set_has_obj_vd_cipv_id();
  obj_vd_cipv_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_cipv_id)
}

// optional .atd.meprocess.ObjCommon.Obj_vd_cipv_lostType obj_vd_cipv_lost = 11;
bool ObjCommon::has_obj_vd_cipv_lost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ObjCommon::set_has_obj_vd_cipv_lost() {
  _has_bits_[0] |= 0x00000400u;
}
void ObjCommon::clear_has_obj_vd_cipv_lost() {
  _has_bits_[0] &= ~0x00000400u;
}
void ObjCommon::clear_obj_vd_cipv_lost() {
  obj_vd_cipv_lost_ = 0;
  clear_has_obj_vd_cipv_lost();
}
::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType ObjCommon::obj_vd_cipv_lost() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_cipv_lost)
  return static_cast< ::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType >(obj_vd_cipv_lost_);
}
void ObjCommon::set_obj_vd_cipv_lost(::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType value) {
  assert(::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType_IsValid(value));
  set_has_obj_vd_cipv_lost();
  obj_vd_cipv_lost_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_cipv_lost)
}

// optional .atd.meprocess.ObjCommon.Obj_vd_allow_acceType obj_vd_allow_acce = 12;
bool ObjCommon::has_obj_vd_allow_acce() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ObjCommon::set_has_obj_vd_allow_acce() {
  _has_bits_[0] |= 0x00000800u;
}
void ObjCommon::clear_has_obj_vd_allow_acce() {
  _has_bits_[0] &= ~0x00000800u;
}
void ObjCommon::clear_obj_vd_allow_acce() {
  obj_vd_allow_acce_ = 0;
  clear_has_obj_vd_allow_acce();
}
::atd::meprocess::ObjCommon_Obj_vd_allow_acceType ObjCommon::obj_vd_allow_acce() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_allow_acce)
  return static_cast< ::atd::meprocess::ObjCommon_Obj_vd_allow_acceType >(obj_vd_allow_acce_);
}
void ObjCommon::set_obj_vd_allow_acce(::atd::meprocess::ObjCommon_Obj_vd_allow_acceType value) {
  assert(::atd::meprocess::ObjCommon_Obj_vd_allow_acceType_IsValid(value));
  set_has_obj_vd_allow_acce();
  obj_vd_allow_acce_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_allow_acce)
}

// optional float obj_header_buffer = 13;
bool ObjCommon::has_obj_header_buffer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ObjCommon::set_has_obj_header_buffer() {
  _has_bits_[0] |= 0x00001000u;
}
void ObjCommon::clear_has_obj_header_buffer() {
  _has_bits_[0] &= ~0x00001000u;
}
void ObjCommon::clear_obj_header_buffer() {
  obj_header_buffer_ = 0;
  clear_has_obj_header_buffer();
}
float ObjCommon::obj_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_header_buffer)
  return obj_header_buffer_;
}
void ObjCommon::set_obj_header_buffer(float value) {
  set_has_obj_header_buffer();
  obj_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_header_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_MeObjects::kHeaderFieldNumber;
const int Dt_Record_MeObjects::kReservedmsgFieldNumber;
const int Dt_Record_MeObjects::kStobjcommonFieldNumber;
const int Dt_Record_MeObjects::kDtArray20MeobjectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_MeObjects::Dt_Record_MeObjects()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_MeObjects)
}
Dt_Record_MeObjects::Dt_Record_MeObjects(const Dt_Record_MeObjects& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_20_meobject_(from.dt_array_20_meobject_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stobjcommon()) {
    stobjcommon_ = new ::atd::meprocess::ObjCommon(*from.stobjcommon_);
  } else {
    stobjcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_MeObjects)
}

void Dt_Record_MeObjects::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stobjcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stobjcommon_));
}

Dt_Record_MeObjects::~Dt_Record_MeObjects() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_MeObjects)
  SharedDtor();
}

void Dt_Record_MeObjects::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stobjcommon_;
  }
}

void Dt_Record_MeObjects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_MeObjects& Dt_Record_MeObjects::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_MeObjects* Dt_Record_MeObjects::New(::google::protobuf::Arena* arena) const {
  Dt_Record_MeObjects* n = new Dt_Record_MeObjects;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_MeObjects::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_MeObjects)
  dt_array_20_meobject_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stobjcommon()) {
      GOOGLE_DCHECK(stobjcommon_ != NULL);
      stobjcommon_->::atd::meprocess::ObjCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_MeObjects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_MeObjects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.ObjCommon stobjcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stobjcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.MeObject dt_array_20_meobject = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_20_meobject()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_MeObjects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_MeObjects)
  return false;
#undef DO_
}

void Dt_Record_MeObjects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_MeObjects)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.ObjCommon stobjcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stobjcommon_, output);
  }

  // repeated .atd.meprocess.MeObject dt_array_20_meobject = 4;
  for (unsigned int i = 0, n = this->dt_array_20_meobject_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_20_meobject(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_MeObjects)
}

size_t Dt_Record_MeObjects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_MeObjects)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.MeObject dt_array_20_meobject = 4;
  {
    unsigned int count = this->dt_array_20_meobject_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_20_meobject(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.ObjCommon stobjcommon = 3;
    if (has_stobjcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stobjcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_MeObjects::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_MeObjects*>(&from));
}

void Dt_Record_MeObjects::MergeFrom(const Dt_Record_MeObjects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_MeObjects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_20_meobject_.MergeFrom(from.dt_array_20_meobject_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stobjcommon()->::atd::meprocess::ObjCommon::MergeFrom(from.stobjcommon());
    }
  }
}

void Dt_Record_MeObjects::CopyFrom(const Dt_Record_MeObjects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_MeObjects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_MeObjects::IsInitialized() const {
  return true;
}

void Dt_Record_MeObjects::Swap(Dt_Record_MeObjects* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_MeObjects::InternalSwap(Dt_Record_MeObjects* other) {
  dt_array_20_meobject_.InternalSwap(&other->dt_array_20_meobject_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stobjcommon_, other->stobjcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_MeObjects::GetTypeName() const {
  return "atd.meprocess.Dt_Record_MeObjects";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_MeObjects

// optional .atd.common.Header header = 1;
bool Dt_Record_MeObjects::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_MeObjects::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_MeObjects::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_MeObjects::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_MeObjects::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_MeObjects::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.header)
  return header_;
}
::atd::common::Header* Dt_Record_MeObjects::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeObjects.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_MeObjects::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeObjects.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_MeObjects::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_MeObjects::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_MeObjects::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_MeObjects::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_MeObjects::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_MeObjects::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_MeObjects::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_MeObjects::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
}

// optional .atd.meprocess.ObjCommon stobjcommon = 3;
bool Dt_Record_MeObjects::has_stobjcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_MeObjects::set_has_stobjcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_MeObjects::clear_has_stobjcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_MeObjects::clear_stobjcommon() {
  if (stobjcommon_ != NULL) stobjcommon_->::atd::meprocess::ObjCommon::Clear();
  clear_has_stobjcommon();
}
const ::atd::meprocess::ObjCommon& Dt_Record_MeObjects::stobjcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
  return stobjcommon_ != NULL ? *stobjcommon_
                         : *::atd::meprocess::ObjCommon::internal_default_instance();
}
::atd::meprocess::ObjCommon* Dt_Record_MeObjects::mutable_stobjcommon() {
  set_has_stobjcommon();
  if (stobjcommon_ == NULL) {
    stobjcommon_ = new ::atd::meprocess::ObjCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
  return stobjcommon_;
}
::atd::meprocess::ObjCommon* Dt_Record_MeObjects::release_stobjcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
  clear_has_stobjcommon();
  ::atd::meprocess::ObjCommon* temp = stobjcommon_;
  stobjcommon_ = NULL;
  return temp;
}
void Dt_Record_MeObjects::set_allocated_stobjcommon(::atd::meprocess::ObjCommon* stobjcommon) {
  delete stobjcommon_;
  stobjcommon_ = stobjcommon;
  if (stobjcommon) {
    set_has_stobjcommon();
  } else {
    clear_has_stobjcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
}

// repeated .atd.meprocess.MeObject dt_array_20_meobject = 4;
int Dt_Record_MeObjects::dt_array_20_meobject_size() const {
  return dt_array_20_meobject_.size();
}
void Dt_Record_MeObjects::clear_dt_array_20_meobject() {
  dt_array_20_meobject_.Clear();
}
const ::atd::meprocess::MeObject& Dt_Record_MeObjects::dt_array_20_meobject(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_.Get(index);
}
::atd::meprocess::MeObject* Dt_Record_MeObjects::mutable_dt_array_20_meobject(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_.Mutable(index);
}
::atd::meprocess::MeObject* Dt_Record_MeObjects::add_dt_array_20_meobject() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::MeObject >*
Dt_Record_MeObjects::mutable_dt_array_20_meobject() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return &dt_array_20_meobject_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::MeObject >&
Dt_Record_MeObjects::dt_array_20_meobject() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MeObject::kObjIdFieldNumber;
const int MeObject::kObjExistenceProbabilityFieldNumber;
const int MeObject::kObjTriggeredSdmFieldNumber;
const int MeObject::kObjMotionCategoryFieldNumber;
const int MeObject::kObjObjectAgeFieldNumber;
const int MeObject::kObjMeasuringStatusFieldNumber;
const int MeObject::kObjObjectClassFieldNumber;
const int MeObject::kObjCameraFieldNumber;
const int MeObject::kObjMotionStatusFieldNumber;
const int MeObject::kObjMotionOreintationFieldNumber;
const int MeObject::kObjBrakeLightFieldNumber;
const int MeObject::kObjTurnIndicatorRightFieldNumber;
const int MeObject::kObjTurnIndicatorLeftFieldNumber;
const int MeObject::kObjLightIndicatorValidityFieldNumber;
const int MeObject::kObjRightOutOfImageFieldNumber;
const int MeObject::kObjLeftOutOfImageFieldNumber;
const int MeObject::kObjLaneAssignmentFieldNumber;
const int MeObject::kObjLaneAssignmentVFieldNumber;
const int MeObject::kObjTopOutOfImageFieldNumber;
const int MeObject::kObjBottomOutOfImageFieldNumber;
const int MeObject::kObjTopOutOfImageVFieldNumber;
const int MeObject::kObjBottomOutOfImageVFieldNumber;
const int MeObject::kReserved1FieldNumber;
const int MeObject::kObjAgeSecondsFieldNumber;
const int MeObject::kObjAgeSecondsVFieldNumber;
const int MeObject::kObjWidthFieldNumber;
const int MeObject::kObjWidthVFieldNumber;
const int MeObject::kObjWidthStdFieldNumber;
const int MeObject::kReserved2FieldNumber;
const int MeObject::kObjLengthFieldNumber;
const int MeObject::kObjLengthVFieldNumber;
const int MeObject::kObjLengthStdFieldNumber;
const int MeObject::kObjHeightFieldNumber;
const int MeObject::kObjHeightVFieldNumber;
const int MeObject::kReserved3FieldNumber;
const int MeObject::kObjHeightStdFieldNumber;
const int MeObject::kObjAbsoluteLongVelocityFieldNumber;
const int MeObject::kObjAbsoluteLongVelocityVFieldNumber;
const int MeObject::kObjAbsLongVelocityStdFieldNumber;
const int MeObject::kObjAbsoluteLatVelocityFieldNumber;
const int MeObject::kObjAbsoluteLatVelocityVFieldNumber;
const int MeObject::kObjAbsLatVelocityStdFieldNumber;
const int MeObject::kObjAbsoluteLatAccFieldNumber;
const int MeObject::kObjAbsoluteLatAccVFieldNumber;
const int MeObject::kObjAbsoluteLatAccStdFieldNumber;
const int MeObject::kObjAbsoluteAccelerationFieldNumber;
const int MeObject::kObjAbsoluteAccelerationVFieldNumber;
const int MeObject::kObjAbsoluteAcceStdFieldNumber;
const int MeObject::kReserved4FieldNumber;
const int MeObject::kObjInvTtcFieldNumber;
const int MeObject::kObjInvTtcVFieldNumber;
const int MeObject::kObjRelativeLongVelocityFieldNumber;
const int MeObject::kObjRelativeLongVelocityVFieldNumber;
const int MeObject::kReserved5FieldNumber;
const int MeObject::kObjRelativeLongVeloStdFieldNumber;
const int MeObject::kObjRelativeLatVelocityFieldNumber;
const int MeObject::kObjRelativeLatVelocityVFieldNumber;
const int MeObject::kReserved6FieldNumber;
const int MeObject::kObjRelativeLatVelocityStdFieldNumber;
const int MeObject::kObjLongDistanceFieldNumber;
const int MeObject::kObjLongDistanceVFieldNumber;
const int MeObject::kReserved7FieldNumber;
const int MeObject::kObjLongDistanceStdFieldNumber;
const int MeObject::kObjLatDistanceFieldNumber;
const int MeObject::kObjLatDistanceVFieldNumber;
const int MeObject::kReserved8FieldNumber;
const int MeObject::kObjLatDistanceStdFieldNumber;
const int MeObject::kObjAbsoluteSpeedFieldNumber;
const int MeObject::kObjAbsoluteSpeedVFieldNumber;
const int MeObject::kReserved9FieldNumber;
const int MeObject::kObjAbsoluteSpeedStdFieldNumber;
const int MeObject::kObjHeadingFieldNumber;
const int MeObject::kObjHeadingVFieldNumber;
const int MeObject::kObjHeadingStdFieldNumber;
const int MeObject::kReserved10FieldNumber;
const int MeObject::kObjAngleRateFieldNumber;
const int MeObject::kObjAngleRateVFieldNumber;
const int MeObject::kObjAngleRateStdFieldNumber;
const int MeObject::kReserved11FieldNumber;
const int MeObject::kObjAngleRightFieldNumber;
const int MeObject::kObjAngleRightVFieldNumber;
const int MeObject::kObjAngleRightStdFieldNumber;
const int MeObject::kReserved12FieldNumber;
const int MeObject::kObjAngleLeftFieldNumber;
const int MeObject::kObjAngleLeftVFieldNumber;
const int MeObject::kObjAngleLeftStdFieldNumber;
const int MeObject::kReserved13FieldNumber;
const int MeObject::kObjAngleSideFieldNumber;
const int MeObject::kObjAngleSideVFieldNumber;
const int MeObject::kObjAngleSideStdFieldNumber;
const int MeObject::kReserved14FieldNumber;
const int MeObject::kObjAngleMidFieldNumber;
const int MeObject::kObjAngleMidVFieldNumber;
const int MeObject::kObjAngleMidStdFieldNumber;
const int MeObject::kObjIsInDrivableAreaFieldNumber;
const int MeObject::kObjIsInDrivableAreaVFieldNumber;
const int MeObject::kObjIsVerycloseFieldNumber;
const int MeObject::kObjIsVerycloseVFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MeObject::MeObject()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.MeObject)
}
MeObject::MeObject(const MeObject& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&obj_id_, &from.obj_id_,
    reinterpret_cast<char*>(&obj_is_veryclose_v_) -
    reinterpret_cast<char*>(&obj_id_) + sizeof(obj_is_veryclose_v_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.MeObject)
}

void MeObject::SharedCtor() {
  ::memset(&obj_id_, 0, reinterpret_cast<char*>(&obj_is_veryclose_v_) -
    reinterpret_cast<char*>(&obj_id_) + sizeof(obj_is_veryclose_v_));
  _cached_size_ = 0;
}

MeObject::~MeObject() {
  // @@protoc_insertion_point(destructor:atd.meprocess.MeObject)
  SharedDtor();
}

void MeObject::SharedDtor() {
}

void MeObject::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MeObject& MeObject::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

MeObject* MeObject::New(::google::protobuf::Arena* arena) const {
  MeObject* n = new MeObject;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MeObject::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.MeObject)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&obj_id_, 0, reinterpret_cast<char*>(&obj_motion_status_) -
      reinterpret_cast<char*>(&obj_id_) + sizeof(obj_motion_status_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&obj_triggered_sdm_, 0, reinterpret_cast<char*>(&obj_left_out_of_image_) -
      reinterpret_cast<char*>(&obj_triggered_sdm_) + sizeof(obj_left_out_of_image_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&obj_lane_assignment_v_, 0, reinterpret_cast<char*>(&obj_age_seconds_) -
      reinterpret_cast<char*>(&obj_lane_assignment_v_) + sizeof(obj_age_seconds_));
  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    ::memset(&obj_width_, 0, reinterpret_cast<char*>(&obj_length_) -
      reinterpret_cast<char*>(&obj_width_) + sizeof(obj_length_));
  }
  if (_has_bits_[32 / 32] & 255u) {
    ::memset(&obj_length_std_, 0, reinterpret_cast<char*>(&obj_abs_lat_velocity_std_) -
      reinterpret_cast<char*>(&obj_length_std_) + sizeof(obj_abs_lat_velocity_std_));
  }
  if (_has_bits_[40 / 32] & 65280u) {
    ::memset(&obj_absolute_long_velocity_v_, 0, reinterpret_cast<char*>(&obj_absolute_acce_std_) -
      reinterpret_cast<char*>(&obj_absolute_long_velocity_v_) + sizeof(obj_absolute_acce_std_));
  }
  if (_has_bits_[48 / 32] & 16711680u) {
    ::memset(&reserved_4_, 0, reinterpret_cast<char*>(&obj_relative_lat_velocity_v_) -
      reinterpret_cast<char*>(&reserved_4_) + sizeof(obj_relative_lat_velocity_v_));
  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    ::memset(&obj_long_distance_v_, 0, reinterpret_cast<char*>(&obj_lat_distance_) -
      reinterpret_cast<char*>(&obj_long_distance_v_) + sizeof(obj_lat_distance_));
  }
  if (_has_bits_[64 / 32] & 255u) {
    ::memset(&reserved_8_, 0, reinterpret_cast<char*>(&reserved_10_) -
      reinterpret_cast<char*>(&reserved_8_) + sizeof(reserved_10_));
  }
  if (_has_bits_[72 / 32] & 65280u) {
    ::memset(&obj_absolute_speed_std_, 0, reinterpret_cast<char*>(&obj_angle_right_std_) -
      reinterpret_cast<char*>(&obj_absolute_speed_std_) + sizeof(obj_angle_right_std_));
  }
  if (_has_bits_[80 / 32] & 16711680u) {
    ::memset(&reserved_12_, 0, reinterpret_cast<char*>(&reserved_13_) -
      reinterpret_cast<char*>(&reserved_12_) + sizeof(reserved_13_));
  }
  if (_has_bits_[88 / 32] & 4278190080u) {
    ::memset(&obj_angle_side_, 0, reinterpret_cast<char*>(&obj_is_in_drivable_area_v_) -
      reinterpret_cast<char*>(&obj_angle_side_) + sizeof(obj_is_in_drivable_area_v_));
  }
  if (_has_bits_[96 / 32] & 3u) {
    ::memset(&obj_is_veryclose_, 0, reinterpret_cast<char*>(&obj_is_veryclose_v_) -
      reinterpret_cast<char*>(&obj_is_veryclose_) + sizeof(obj_is_veryclose_v_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MeObject::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.MeObject)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 obj_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_obj_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_existence_probability = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_obj_existence_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_triggered_sdm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_obj_triggered_sdm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_triggered_sdm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_motion_category = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_obj_motion_category();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_motion_category_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_object_age = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_obj_object_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_object_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_measuring_status = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_obj_measuring_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_measuring_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.MeObject.Obj_object_classType obj_object_class = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::MeObject_Obj_object_classType_IsValid(value)) {
            set_obj_object_class(static_cast< ::atd::meprocess::MeObject_Obj_object_classType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(56u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_camera = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_obj_camera();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_camera_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_motion_status = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_obj_motion_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_motion_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_motion_oreintation = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_obj_motion_oreintation();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_motion_oreintation_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_brake_light = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_obj_brake_light();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_brake_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_turn_indicator_right = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_obj_turn_indicator_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_turn_indicator_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_turn_indicator_left = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_obj_turn_indicator_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_turn_indicator_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_light_indicator_validity = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_obj_light_indicator_validity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_light_indicator_validity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_right_out_of_image = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_obj_right_out_of_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_right_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_left_out_of_image = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_obj_left_out_of_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_left_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.MeObject.Obj_lane_assignmentType obj_lane_assignment = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::MeObject_Obj_lane_assignmentType_IsValid(value)) {
            set_obj_lane_assignment(static_cast< ::atd::meprocess::MeObject_Obj_lane_assignmentType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(136u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_lane_assignment_v = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_obj_lane_assignment_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_lane_assignment_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_top_out_of_image = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_obj_top_out_of_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_top_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_bottom_out_of_image = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_obj_bottom_out_of_image();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_bottom_out_of_image_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_top_out_of_image_v = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_obj_top_out_of_image_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_top_out_of_image_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_bottom_out_of_image_v = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_obj_bottom_out_of_image_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_bottom_out_of_image_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 obj_age_seconds = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_obj_age_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &obj_age_seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_age_seconds_v = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_obj_age_seconds_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_age_seconds_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_width = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u)) {
          set_has_obj_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_width_v = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(216u)) {
          set_has_obj_width_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_width_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_width_std = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u)) {
          set_has_obj_width_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_length = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u)) {
          set_has_obj_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_length_v = 31;
      case 31: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(248u)) {
          set_has_obj_length_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_length_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_length_std = 32;
      case 32: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(261u)) {
          set_has_obj_length_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_length_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_height = 33;
      case 33: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(269u)) {
          set_has_obj_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_height_v = 34;
      case 34: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(272u)) {
          set_has_obj_height_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_height_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_3 = 35;
      case 35: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(280u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_height_std = 36;
      case 36: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(293u)) {
          set_has_obj_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_long_velocity = 37;
      case 37: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(301u)) {
          set_has_obj_absolute_long_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_long_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_absolute_long_velocity_v = 38;
      case 38: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(304u)) {
          set_has_obj_absolute_long_velocity_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_absolute_long_velocity_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_abs_long_velocity_std = 39;
      case 39: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(317u)) {
          set_has_obj_abs_long_velocity_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_abs_long_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_lat_velocity = 40;
      case 40: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(325u)) {
          set_has_obj_absolute_lat_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_lat_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_absolute_lat_velocity_v = 41;
      case 41: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(328u)) {
          set_has_obj_absolute_lat_velocity_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_absolute_lat_velocity_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_abs_lat_velocity_std = 42;
      case 42: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(341u)) {
          set_has_obj_abs_lat_velocity_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_abs_lat_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_lat_acc = 43;
      case 43: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(349u)) {
          set_has_obj_absolute_lat_acc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_lat_acc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_absolute_lat_acc_v = 44;
      case 44: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(352u)) {
          set_has_obj_absolute_lat_acc_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_absolute_lat_acc_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_lat_acc_std = 45;
      case 45: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(365u)) {
          set_has_obj_absolute_lat_acc_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_lat_acc_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_acceleration = 46;
      case 46: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(373u)) {
          set_has_obj_absolute_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_absolute_acceleration_v = 47;
      case 47: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(376u)) {
          set_has_obj_absolute_acceleration_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_absolute_acceleration_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_acce_std = 48;
      case 48: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(389u)) {
          set_has_obj_absolute_acce_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_acce_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 49;
      case 49: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(392u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_inv_ttc = 50;
      case 50: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(405u)) {
          set_has_obj_inv_ttc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_inv_ttc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_inv_ttc_v = 51;
      case 51: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(408u)) {
          set_has_obj_inv_ttc_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_inv_ttc_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_relative_long_velocity = 52;
      case 52: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(421u)) {
          set_has_obj_relative_long_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_relative_long_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_relative_long_velocity_v = 53;
      case 53: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(424u)) {
          set_has_obj_relative_long_velocity_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_relative_long_velocity_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_5 = 54;
      case 54: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(432u)) {
          set_has_reserved_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_relative_long_velo_std = 55;
      case 55: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(445u)) {
          set_has_obj_relative_long_velo_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_relative_long_velo_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_relative_lat_velocity = 56;
      case 56: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(453u)) {
          set_has_obj_relative_lat_velocity();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_relative_lat_velocity_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_relative_lat_velocity_v = 57;
      case 57: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(456u)) {
          set_has_obj_relative_lat_velocity_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_relative_lat_velocity_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_6 = 58;
      case 58: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(464u)) {
          set_has_reserved_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_relative_lat_velocity_std = 59;
      case 59: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(477u)) {
          set_has_obj_relative_lat_velocity_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_relative_lat_velocity_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_long_distance = 60;
      case 60: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(485u)) {
          set_has_obj_long_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_long_distance_v = 61;
      case 61: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(488u)) {
          set_has_obj_long_distance_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_long_distance_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_7 = 62;
      case 62: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(496u)) {
          set_has_reserved_7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_long_distance_std = 63;
      case 63: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(509u)) {
          set_has_obj_long_distance_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_lat_distance = 64;
      case 64: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(517u)) {
          set_has_obj_lat_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_lat_distance_v = 65;
      case 65: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(520u)) {
          set_has_obj_lat_distance_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_lat_distance_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_8 = 66;
      case 66: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(528u)) {
          set_has_reserved_8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_lat_distance_std = 67;
      case 67: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(541u)) {
          set_has_obj_lat_distance_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_speed = 68;
      case 68: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(549u)) {
          set_has_obj_absolute_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_absolute_speed_v = 69;
      case 69: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(552u)) {
          set_has_obj_absolute_speed_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_absolute_speed_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_9 = 70;
      case 70: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(560u)) {
          set_has_reserved_9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_absolute_speed_std = 71;
      case 71: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(573u)) {
          set_has_obj_absolute_speed_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_absolute_speed_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_heading = 72;
      case 72: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(581u)) {
          set_has_obj_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_heading_v = 73;
      case 73: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(584u)) {
          set_has_obj_heading_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_heading_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_heading_std = 74;
      case 74: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(597u)) {
          set_has_obj_heading_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_heading_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_10 = 75;
      case 75: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(600u)) {
          set_has_reserved_10();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_10_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_rate = 76;
      case 76: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(613u)) {
          set_has_obj_angle_rate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_rate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_angle_rate_v = 77;
      case 77: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(616u)) {
          set_has_obj_angle_rate_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_angle_rate_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_rate_std = 78;
      case 78: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(629u)) {
          set_has_obj_angle_rate_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_rate_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_11 = 79;
      case 79: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(632u)) {
          set_has_reserved_11();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_11_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_right = 80;
      case 80: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(645u)) {
          set_has_obj_angle_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_angle_right_v = 81;
      case 81: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(648u)) {
          set_has_obj_angle_right_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_angle_right_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_right_std = 82;
      case 82: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(661u)) {
          set_has_obj_angle_right_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_right_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_12 = 83;
      case 83: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(664u)) {
          set_has_reserved_12();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_12_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_left = 84;
      case 84: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(677u)) {
          set_has_obj_angle_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_angle_left_v = 85;
      case 85: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(680u)) {
          set_has_obj_angle_left_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_angle_left_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_left_std = 86;
      case 86: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(693u)) {
          set_has_obj_angle_left_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_left_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_13 = 87;
      case 87: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(696u)) {
          set_has_reserved_13();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_13_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_side = 88;
      case 88: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(709u)) {
          set_has_obj_angle_side();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_side_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_angle_side_v = 89;
      case 89: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(712u)) {
          set_has_obj_angle_side_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_angle_side_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_side_std = 90;
      case 90: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(725u)) {
          set_has_obj_angle_side_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_side_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_14 = 91;
      case 91: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(728u)) {
          set_has_reserved_14();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_14_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_mid = 92;
      case 92: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(741u)) {
          set_has_obj_angle_mid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_mid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_angle_mid_v = 93;
      case 93: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(744u)) {
          set_has_obj_angle_mid_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_angle_mid_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float obj_angle_mid_std = 94;
      case 94: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(757u)) {
          set_has_obj_angle_mid_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &obj_angle_mid_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_is_in_drivable_area = 95;
      case 95: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(760u)) {
          set_has_obj_is_in_drivable_area();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_is_in_drivable_area_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_is_in_drivable_area_v = 96;
      case 96: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(768u)) {
          set_has_obj_is_in_drivable_area_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_is_in_drivable_area_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_is_veryclose = 97;
      case 97: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(776u)) {
          set_has_obj_is_veryclose();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_is_veryclose_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool obj_is_veryclose_v = 98;
      case 98: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(784u)) {
          set_has_obj_is_veryclose_v();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &obj_is_veryclose_v_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.MeObject)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.MeObject)
  return false;
#undef DO_
}

void MeObject::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.MeObject)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 obj_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->obj_id(), output);
  }

  // optional float obj_existence_probability = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->obj_existence_probability(), output);
  }

  // optional bool obj_triggered_sdm = 3;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->obj_triggered_sdm(), output);
  }

  // optional int32 obj_motion_category = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->obj_motion_category(), output);
  }

  // optional int32 obj_object_age = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->obj_object_age(), output);
  }

  // optional int32 obj_measuring_status = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->obj_measuring_status(), output);
  }

  // optional .atd.meprocess.MeObject.Obj_object_classType obj_object_class = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->obj_object_class(), output);
  }

  // optional int32 obj_camera = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->obj_camera(), output);
  }

  // optional int32 obj_motion_status = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->obj_motion_status(), output);
  }

  // optional int32 obj_motion_oreintation = 10;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->obj_motion_oreintation(), output);
  }

  // optional bool obj_brake_light = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->obj_brake_light(), output);
  }

  // optional bool obj_turn_indicator_right = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->obj_turn_indicator_right(), output);
  }

  // optional bool obj_turn_indicator_left = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->obj_turn_indicator_left(), output);
  }

  // optional bool obj_light_indicator_validity = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->obj_light_indicator_validity(), output);
  }

  // optional bool obj_right_out_of_image = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->obj_right_out_of_image(), output);
  }

  // optional bool obj_left_out_of_image = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->obj_left_out_of_image(), output);
  }

  // optional .atd.meprocess.MeObject.Obj_lane_assignmentType obj_lane_assignment = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      17, this->obj_lane_assignment(), output);
  }

  // optional bool obj_lane_assignment_v = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->obj_lane_assignment_v(), output);
  }

  // optional bool obj_top_out_of_image = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->obj_top_out_of_image(), output);
  }

  // optional bool obj_bottom_out_of_image = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->obj_bottom_out_of_image(), output);
  }

  // optional bool obj_top_out_of_image_v = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->obj_top_out_of_image_v(), output);
  }

  // optional bool obj_bottom_out_of_image_v = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(22, this->obj_bottom_out_of_image_v(), output);
  }

  // optional int32 reserved_1 = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->reserved_1(), output);
  }

  // optional int32 obj_age_seconds = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->obj_age_seconds(), output);
  }

  // optional bool obj_age_seconds_v = 25;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(25, this->obj_age_seconds_v(), output);
  }

  // optional float obj_width = 26;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->obj_width(), output);
  }

  // optional bool obj_width_v = 27;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(27, this->obj_width_v(), output);
  }

  // optional float obj_width_std = 28;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->obj_width_std(), output);
  }

  // optional int32 reserved_2 = 29;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->reserved_2(), output);
  }

  // optional float obj_length = 30;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->obj_length(), output);
  }

  // optional bool obj_length_v = 31;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(31, this->obj_length_v(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional float obj_length_std = 32;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(32, this->obj_length_std(), output);
  }

  // optional float obj_height = 33;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(33, this->obj_height(), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional bool obj_height_v = 34;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(34, this->obj_height_v(), output);
  }

  cached_has_bits = _has_bits_[1];
  // optional int32 reserved_3 = 35;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->reserved_3(), output);
  }

  // optional float obj_height_std = 36;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(36, this->obj_height_std(), output);
  }

  // optional float obj_absolute_long_velocity = 37;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(37, this->obj_absolute_long_velocity(), output);
  }

  // optional bool obj_absolute_long_velocity_v = 38;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(38, this->obj_absolute_long_velocity_v(), output);
  }

  // optional float obj_abs_long_velocity_std = 39;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(39, this->obj_abs_long_velocity_std(), output);
  }

  // optional float obj_absolute_lat_velocity = 40;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(40, this->obj_absolute_lat_velocity(), output);
  }

  // optional bool obj_absolute_lat_velocity_v = 41;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(41, this->obj_absolute_lat_velocity_v(), output);
  }

  // optional float obj_abs_lat_velocity_std = 42;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(42, this->obj_abs_lat_velocity_std(), output);
  }

  // optional float obj_absolute_lat_acc = 43;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(43, this->obj_absolute_lat_acc(), output);
  }

  // optional bool obj_absolute_lat_acc_v = 44;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(44, this->obj_absolute_lat_acc_v(), output);
  }

  // optional float obj_absolute_lat_acc_std = 45;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(45, this->obj_absolute_lat_acc_std(), output);
  }

  // optional float obj_absolute_acceleration = 46;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(46, this->obj_absolute_acceleration(), output);
  }

  // optional bool obj_absolute_acceleration_v = 47;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(47, this->obj_absolute_acceleration_v(), output);
  }

  // optional float obj_absolute_acce_std = 48;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(48, this->obj_absolute_acce_std(), output);
  }

  // optional int32 reserved_4 = 49;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->reserved_4(), output);
  }

  // optional float obj_inv_ttc = 50;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(50, this->obj_inv_ttc(), output);
  }

  // optional bool obj_inv_ttc_v = 51;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(51, this->obj_inv_ttc_v(), output);
  }

  // optional float obj_relative_long_velocity = 52;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(52, this->obj_relative_long_velocity(), output);
  }

  // optional bool obj_relative_long_velocity_v = 53;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(53, this->obj_relative_long_velocity_v(), output);
  }

  // optional int32 reserved_5 = 54;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->reserved_5(), output);
  }

  // optional float obj_relative_long_velo_std = 55;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(55, this->obj_relative_long_velo_std(), output);
  }

  // optional float obj_relative_lat_velocity = 56;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(56, this->obj_relative_lat_velocity(), output);
  }

  // optional bool obj_relative_lat_velocity_v = 57;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(57, this->obj_relative_lat_velocity_v(), output);
  }

  // optional int32 reserved_6 = 58;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->reserved_6(), output);
  }

  // optional float obj_relative_lat_velocity_std = 59;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(59, this->obj_relative_lat_velocity_std(), output);
  }

  // optional float obj_long_distance = 60;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(60, this->obj_long_distance(), output);
  }

  // optional bool obj_long_distance_v = 61;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(61, this->obj_long_distance_v(), output);
  }

  // optional int32 reserved_7 = 62;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->reserved_7(), output);
  }

  // optional float obj_long_distance_std = 63;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(63, this->obj_long_distance_std(), output);
  }

  // optional float obj_lat_distance = 64;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(64, this->obj_lat_distance(), output);
  }

  cached_has_bits = _has_bits_[2];
  // optional bool obj_lat_distance_v = 65;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(65, this->obj_lat_distance_v(), output);
  }

  // optional int32 reserved_8 = 66;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->reserved_8(), output);
  }

  // optional float obj_lat_distance_std = 67;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(67, this->obj_lat_distance_std(), output);
  }

  // optional float obj_absolute_speed = 68;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(68, this->obj_absolute_speed(), output);
  }

  // optional bool obj_absolute_speed_v = 69;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(69, this->obj_absolute_speed_v(), output);
  }

  // optional int32 reserved_9 = 70;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->reserved_9(), output);
  }

  // optional float obj_absolute_speed_std = 71;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(71, this->obj_absolute_speed_std(), output);
  }

  // optional float obj_heading = 72;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(72, this->obj_heading(), output);
  }

  // optional bool obj_heading_v = 73;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(73, this->obj_heading_v(), output);
  }

  // optional float obj_heading_std = 74;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(74, this->obj_heading_std(), output);
  }

  // optional bool reserved_10 = 75;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(75, this->reserved_10(), output);
  }

  // optional float obj_angle_rate = 76;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(76, this->obj_angle_rate(), output);
  }

  // optional bool obj_angle_rate_v = 77;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->obj_angle_rate_v(), output);
  }

  // optional float obj_angle_rate_std = 78;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(78, this->obj_angle_rate_std(), output);
  }

  // optional int32 reserved_11 = 79;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->reserved_11(), output);
  }

  // optional float obj_angle_right = 80;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(80, this->obj_angle_right(), output);
  }

  // optional bool obj_angle_right_v = 81;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(81, this->obj_angle_right_v(), output);
  }

  // optional float obj_angle_right_std = 82;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(82, this->obj_angle_right_std(), output);
  }

  // optional int32 reserved_12 = 83;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(83, this->reserved_12(), output);
  }

  // optional float obj_angle_left = 84;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(84, this->obj_angle_left(), output);
  }

  // optional bool obj_angle_left_v = 85;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(85, this->obj_angle_left_v(), output);
  }

  // optional float obj_angle_left_std = 86;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(86, this->obj_angle_left_std(), output);
  }

  // optional int32 reserved_13 = 87;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(87, this->reserved_13(), output);
  }

  // optional float obj_angle_side = 88;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(88, this->obj_angle_side(), output);
  }

  // optional bool obj_angle_side_v = 89;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(89, this->obj_angle_side_v(), output);
  }

  // optional float obj_angle_side_std = 90;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(90, this->obj_angle_side_std(), output);
  }

  // optional int32 reserved_14 = 91;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(91, this->reserved_14(), output);
  }

  // optional float obj_angle_mid = 92;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(92, this->obj_angle_mid(), output);
  }

  // optional bool obj_angle_mid_v = 93;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(93, this->obj_angle_mid_v(), output);
  }

  // optional float obj_angle_mid_std = 94;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(94, this->obj_angle_mid_std(), output);
  }

  // optional bool obj_is_in_drivable_area = 95;
  if (cached_has_bits & 0x40000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(95, this->obj_is_in_drivable_area(), output);
  }

  // optional bool obj_is_in_drivable_area_v = 96;
  if (cached_has_bits & 0x80000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(96, this->obj_is_in_drivable_area_v(), output);
  }

  cached_has_bits = _has_bits_[3];
  // optional bool obj_is_veryclose = 97;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(97, this->obj_is_veryclose(), output);
  }

  // optional bool obj_is_veryclose_v = 98;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(98, this->obj_is_veryclose_v(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.MeObject)
}

size_t MeObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.MeObject)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 obj_id = 1;
    if (has_obj_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_id());
    }

    // optional float obj_existence_probability = 2;
    if (has_obj_existence_probability()) {
      total_size += 1 + 4;
    }

    // optional int32 obj_motion_category = 4;
    if (has_obj_motion_category()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_motion_category());
    }

    // optional int32 obj_object_age = 5;
    if (has_obj_object_age()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_object_age());
    }

    // optional int32 obj_measuring_status = 6;
    if (has_obj_measuring_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_measuring_status());
    }

    // optional .atd.meprocess.MeObject.Obj_object_classType obj_object_class = 7;
    if (has_obj_object_class()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obj_object_class());
    }

    // optional int32 obj_camera = 8;
    if (has_obj_camera()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_camera());
    }

    // optional int32 obj_motion_status = 9;
    if (has_obj_motion_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_motion_status());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool obj_triggered_sdm = 3;
    if (has_obj_triggered_sdm()) {
      total_size += 1 + 1;
    }

    // optional bool obj_brake_light = 11;
    if (has_obj_brake_light()) {
      total_size += 1 + 1;
    }

    // optional bool obj_turn_indicator_right = 12;
    if (has_obj_turn_indicator_right()) {
      total_size += 1 + 1;
    }

    // optional bool obj_turn_indicator_left = 13;
    if (has_obj_turn_indicator_left()) {
      total_size += 1 + 1;
    }

    // optional int32 obj_motion_oreintation = 10;
    if (has_obj_motion_oreintation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_motion_oreintation());
    }

    // optional bool obj_light_indicator_validity = 14;
    if (has_obj_light_indicator_validity()) {
      total_size += 1 + 1;
    }

    // optional bool obj_right_out_of_image = 15;
    if (has_obj_right_out_of_image()) {
      total_size += 1 + 1;
    }

    // optional bool obj_left_out_of_image = 16;
    if (has_obj_left_out_of_image()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional bool obj_lane_assignment_v = 18;
    if (has_obj_lane_assignment_v()) {
      total_size += 2 + 1;
    }

    // optional .atd.meprocess.MeObject.Obj_lane_assignmentType obj_lane_assignment = 17;
    if (has_obj_lane_assignment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->obj_lane_assignment());
    }

    // optional bool obj_top_out_of_image = 19;
    if (has_obj_top_out_of_image()) {
      total_size += 2 + 1;
    }

    // optional bool obj_bottom_out_of_image = 20;
    if (has_obj_bottom_out_of_image()) {
      total_size += 2 + 1;
    }

    // optional bool obj_top_out_of_image_v = 21;
    if (has_obj_top_out_of_image_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_bottom_out_of_image_v = 22;
    if (has_obj_bottom_out_of_image_v()) {
      total_size += 2 + 1;
    }

    // optional int32 reserved_1 = 23;
    if (has_reserved_1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional int32 obj_age_seconds = 24;
    if (has_obj_age_seconds()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->obj_age_seconds());
    }

  }
  if (_has_bits_[24 / 32] & 4278190080u) {
    // optional float obj_width = 26;
    if (has_obj_width()) {
      total_size += 2 + 4;
    }

    // optional float obj_width_std = 28;
    if (has_obj_width_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_2 = 29;
    if (has_reserved_2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional bool obj_age_seconds_v = 25;
    if (has_obj_age_seconds_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_width_v = 27;
    if (has_obj_width_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_length_v = 31;
    if (has_obj_length_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_height_v = 34;
    if (has_obj_height_v()) {
      total_size += 2 + 1;
    }

    // optional float obj_length = 30;
    if (has_obj_length()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[32 / 32] & 255u) {
    // optional float obj_length_std = 32;
    if (has_obj_length_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_height = 33;
    if (has_obj_height()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_3 = 35;
    if (has_reserved_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_3());
    }

    // optional float obj_height_std = 36;
    if (has_obj_height_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_absolute_long_velocity = 37;
    if (has_obj_absolute_long_velocity()) {
      total_size += 2 + 4;
    }

    // optional float obj_abs_long_velocity_std = 39;
    if (has_obj_abs_long_velocity_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_absolute_lat_velocity = 40;
    if (has_obj_absolute_lat_velocity()) {
      total_size += 2 + 4;
    }

    // optional float obj_abs_lat_velocity_std = 42;
    if (has_obj_abs_lat_velocity_std()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[40 / 32] & 65280u) {
    // optional bool obj_absolute_long_velocity_v = 38;
    if (has_obj_absolute_long_velocity_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_absolute_lat_velocity_v = 41;
    if (has_obj_absolute_lat_velocity_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_absolute_lat_acc_v = 44;
    if (has_obj_absolute_lat_acc_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_absolute_acceleration_v = 47;
    if (has_obj_absolute_acceleration_v()) {
      total_size += 2 + 1;
    }

    // optional float obj_absolute_lat_acc = 43;
    if (has_obj_absolute_lat_acc()) {
      total_size += 2 + 4;
    }

    // optional float obj_absolute_lat_acc_std = 45;
    if (has_obj_absolute_lat_acc_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_absolute_acceleration = 46;
    if (has_obj_absolute_acceleration()) {
      total_size += 2 + 4;
    }

    // optional float obj_absolute_acce_std = 48;
    if (has_obj_absolute_acce_std()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[48 / 32] & 16711680u) {
    // optional int32 reserved_4 = 49;
    if (has_reserved_4()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional float obj_inv_ttc = 50;
    if (has_obj_inv_ttc()) {
      total_size += 2 + 4;
    }

    // optional float obj_relative_long_velocity = 52;
    if (has_obj_relative_long_velocity()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_5 = 54;
    if (has_reserved_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_5());
    }

    // optional float obj_relative_long_velo_std = 55;
    if (has_obj_relative_long_velo_std()) {
      total_size += 2 + 4;
    }

    // optional bool obj_inv_ttc_v = 51;
    if (has_obj_inv_ttc_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_relative_long_velocity_v = 53;
    if (has_obj_relative_long_velocity_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_relative_lat_velocity_v = 57;
    if (has_obj_relative_lat_velocity_v()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[56 / 32] & 4278190080u) {
    // optional bool obj_long_distance_v = 61;
    if (has_obj_long_distance_v()) {
      total_size += 2 + 1;
    }

    // optional float obj_relative_lat_velocity = 56;
    if (has_obj_relative_lat_velocity()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_6 = 58;
    if (has_reserved_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_6());
    }

    // optional float obj_relative_lat_velocity_std = 59;
    if (has_obj_relative_lat_velocity_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_long_distance = 60;
    if (has_obj_long_distance()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_7 = 62;
    if (has_reserved_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_7());
    }

    // optional float obj_long_distance_std = 63;
    if (has_obj_long_distance_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_lat_distance = 64;
    if (has_obj_lat_distance()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[64 / 32] & 255u) {
    // optional int32 reserved_8 = 66;
    if (has_reserved_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_8());
    }

    // optional float obj_lat_distance_std = 67;
    if (has_obj_lat_distance_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_absolute_speed = 68;
    if (has_obj_absolute_speed()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_9 = 70;
    if (has_reserved_9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_9());
    }

    // optional bool obj_lat_distance_v = 65;
    if (has_obj_lat_distance_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_absolute_speed_v = 69;
    if (has_obj_absolute_speed_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_heading_v = 73;
    if (has_obj_heading_v()) {
      total_size += 2 + 1;
    }

    // optional bool reserved_10 = 75;
    if (has_reserved_10()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[72 / 32] & 65280u) {
    // optional float obj_absolute_speed_std = 71;
    if (has_obj_absolute_speed_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_heading = 72;
    if (has_obj_heading()) {
      total_size += 2 + 4;
    }

    // optional float obj_heading_std = 74;
    if (has_obj_heading_std()) {
      total_size += 2 + 4;
    }

    // optional float obj_angle_rate = 76;
    if (has_obj_angle_rate()) {
      total_size += 2 + 4;
    }

    // optional float obj_angle_rate_std = 78;
    if (has_obj_angle_rate_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_11 = 79;
    if (has_reserved_11()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_11());
    }

    // optional float obj_angle_right = 80;
    if (has_obj_angle_right()) {
      total_size += 2 + 4;
    }

    // optional float obj_angle_right_std = 82;
    if (has_obj_angle_right_std()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[80 / 32] & 16711680u) {
    // optional int32 reserved_12 = 83;
    if (has_reserved_12()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_12());
    }

    // optional bool obj_angle_rate_v = 77;
    if (has_obj_angle_rate_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_angle_right_v = 81;
    if (has_obj_angle_right_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_angle_left_v = 85;
    if (has_obj_angle_left_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_angle_side_v = 89;
    if (has_obj_angle_side_v()) {
      total_size += 2 + 1;
    }

    // optional float obj_angle_left = 84;
    if (has_obj_angle_left()) {
      total_size += 2 + 4;
    }

    // optional float obj_angle_left_std = 86;
    if (has_obj_angle_left_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_13 = 87;
    if (has_reserved_13()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_13());
    }

  }
  if (_has_bits_[88 / 32] & 4278190080u) {
    // optional float obj_angle_side = 88;
    if (has_obj_angle_side()) {
      total_size += 2 + 4;
    }

    // optional float obj_angle_side_std = 90;
    if (has_obj_angle_side_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_14 = 91;
    if (has_reserved_14()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_14());
    }

    // optional float obj_angle_mid = 92;
    if (has_obj_angle_mid()) {
      total_size += 2 + 4;
    }

    // optional float obj_angle_mid_std = 94;
    if (has_obj_angle_mid_std()) {
      total_size += 2 + 4;
    }

    // optional bool obj_angle_mid_v = 93;
    if (has_obj_angle_mid_v()) {
      total_size += 2 + 1;
    }

    // optional bool obj_is_in_drivable_area = 95;
    if (has_obj_is_in_drivable_area()) {
      total_size += 2 + 1;
    }

    // optional bool obj_is_in_drivable_area_v = 96;
    if (has_obj_is_in_drivable_area_v()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[96 / 32] & 3u) {
    // optional bool obj_is_veryclose = 97;
    if (has_obj_is_veryclose()) {
      total_size += 2 + 1;
    }

    // optional bool obj_is_veryclose_v = 98;
    if (has_obj_is_veryclose_v()) {
      total_size += 2 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeObject::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MeObject*>(&from));
}

void MeObject::MergeFrom(const MeObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.MeObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      obj_id_ = from.obj_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      obj_existence_probability_ = from.obj_existence_probability_;
    }
    if (cached_has_bits & 0x00000004u) {
      obj_motion_category_ = from.obj_motion_category_;
    }
    if (cached_has_bits & 0x00000008u) {
      obj_object_age_ = from.obj_object_age_;
    }
    if (cached_has_bits & 0x00000010u) {
      obj_measuring_status_ = from.obj_measuring_status_;
    }
    if (cached_has_bits & 0x00000020u) {
      obj_object_class_ = from.obj_object_class_;
    }
    if (cached_has_bits & 0x00000040u) {
      obj_camera_ = from.obj_camera_;
    }
    if (cached_has_bits & 0x00000080u) {
      obj_motion_status_ = from.obj_motion_status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      obj_triggered_sdm_ = from.obj_triggered_sdm_;
    }
    if (cached_has_bits & 0x00000200u) {
      obj_brake_light_ = from.obj_brake_light_;
    }
    if (cached_has_bits & 0x00000400u) {
      obj_turn_indicator_right_ = from.obj_turn_indicator_right_;
    }
    if (cached_has_bits & 0x00000800u) {
      obj_turn_indicator_left_ = from.obj_turn_indicator_left_;
    }
    if (cached_has_bits & 0x00001000u) {
      obj_motion_oreintation_ = from.obj_motion_oreintation_;
    }
    if (cached_has_bits & 0x00002000u) {
      obj_light_indicator_validity_ = from.obj_light_indicator_validity_;
    }
    if (cached_has_bits & 0x00004000u) {
      obj_right_out_of_image_ = from.obj_right_out_of_image_;
    }
    if (cached_has_bits & 0x00008000u) {
      obj_left_out_of_image_ = from.obj_left_out_of_image_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      obj_lane_assignment_v_ = from.obj_lane_assignment_v_;
    }
    if (cached_has_bits & 0x00020000u) {
      obj_lane_assignment_ = from.obj_lane_assignment_;
    }
    if (cached_has_bits & 0x00040000u) {
      obj_top_out_of_image_ = from.obj_top_out_of_image_;
    }
    if (cached_has_bits & 0x00080000u) {
      obj_bottom_out_of_image_ = from.obj_bottom_out_of_image_;
    }
    if (cached_has_bits & 0x00100000u) {
      obj_top_out_of_image_v_ = from.obj_top_out_of_image_v_;
    }
    if (cached_has_bits & 0x00200000u) {
      obj_bottom_out_of_image_v_ = from.obj_bottom_out_of_image_v_;
    }
    if (cached_has_bits & 0x00400000u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00800000u) {
      obj_age_seconds_ = from.obj_age_seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      obj_width_ = from.obj_width_;
    }
    if (cached_has_bits & 0x02000000u) {
      obj_width_std_ = from.obj_width_std_;
    }
    if (cached_has_bits & 0x04000000u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x08000000u) {
      obj_age_seconds_v_ = from.obj_age_seconds_v_;
    }
    if (cached_has_bits & 0x10000000u) {
      obj_width_v_ = from.obj_width_v_;
    }
    if (cached_has_bits & 0x20000000u) {
      obj_length_v_ = from.obj_length_v_;
    }
    if (cached_has_bits & 0x40000000u) {
      obj_height_v_ = from.obj_height_v_;
    }
    if (cached_has_bits & 0x80000000u) {
      obj_length_ = from.obj_length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[1];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      obj_length_std_ = from.obj_length_std_;
    }
    if (cached_has_bits & 0x00000002u) {
      obj_height_ = from.obj_height_;
    }
    if (cached_has_bits & 0x00000004u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00000008u) {
      obj_height_std_ = from.obj_height_std_;
    }
    if (cached_has_bits & 0x00000010u) {
      obj_absolute_long_velocity_ = from.obj_absolute_long_velocity_;
    }
    if (cached_has_bits & 0x00000020u) {
      obj_abs_long_velocity_std_ = from.obj_abs_long_velocity_std_;
    }
    if (cached_has_bits & 0x00000040u) {
      obj_absolute_lat_velocity_ = from.obj_absolute_lat_velocity_;
    }
    if (cached_has_bits & 0x00000080u) {
      obj_abs_lat_velocity_std_ = from.obj_abs_lat_velocity_std_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      obj_absolute_long_velocity_v_ = from.obj_absolute_long_velocity_v_;
    }
    if (cached_has_bits & 0x00000200u) {
      obj_absolute_lat_velocity_v_ = from.obj_absolute_lat_velocity_v_;
    }
    if (cached_has_bits & 0x00000400u) {
      obj_absolute_lat_acc_v_ = from.obj_absolute_lat_acc_v_;
    }
    if (cached_has_bits & 0x00000800u) {
      obj_absolute_acceleration_v_ = from.obj_absolute_acceleration_v_;
    }
    if (cached_has_bits & 0x00001000u) {
      obj_absolute_lat_acc_ = from.obj_absolute_lat_acc_;
    }
    if (cached_has_bits & 0x00002000u) {
      obj_absolute_lat_acc_std_ = from.obj_absolute_lat_acc_std_;
    }
    if (cached_has_bits & 0x00004000u) {
      obj_absolute_acceleration_ = from.obj_absolute_acceleration_;
    }
    if (cached_has_bits & 0x00008000u) {
      obj_absolute_acce_std_ = from.obj_absolute_acce_std_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00020000u) {
      obj_inv_ttc_ = from.obj_inv_ttc_;
    }
    if (cached_has_bits & 0x00040000u) {
      obj_relative_long_velocity_ = from.obj_relative_long_velocity_;
    }
    if (cached_has_bits & 0x00080000u) {
      reserved_5_ = from.reserved_5_;
    }
    if (cached_has_bits & 0x00100000u) {
      obj_relative_long_velo_std_ = from.obj_relative_long_velo_std_;
    }
    if (cached_has_bits & 0x00200000u) {
      obj_inv_ttc_v_ = from.obj_inv_ttc_v_;
    }
    if (cached_has_bits & 0x00400000u) {
      obj_relative_long_velocity_v_ = from.obj_relative_long_velocity_v_;
    }
    if (cached_has_bits & 0x00800000u) {
      obj_relative_lat_velocity_v_ = from.obj_relative_lat_velocity_v_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      obj_long_distance_v_ = from.obj_long_distance_v_;
    }
    if (cached_has_bits & 0x02000000u) {
      obj_relative_lat_velocity_ = from.obj_relative_lat_velocity_;
    }
    if (cached_has_bits & 0x04000000u) {
      reserved_6_ = from.reserved_6_;
    }
    if (cached_has_bits & 0x08000000u) {
      obj_relative_lat_velocity_std_ = from.obj_relative_lat_velocity_std_;
    }
    if (cached_has_bits & 0x10000000u) {
      obj_long_distance_ = from.obj_long_distance_;
    }
    if (cached_has_bits & 0x20000000u) {
      reserved_7_ = from.reserved_7_;
    }
    if (cached_has_bits & 0x40000000u) {
      obj_long_distance_std_ = from.obj_long_distance_std_;
    }
    if (cached_has_bits & 0x80000000u) {
      obj_lat_distance_ = from.obj_lat_distance_;
    }
    _has_bits_[1] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[2];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      reserved_8_ = from.reserved_8_;
    }
    if (cached_has_bits & 0x00000002u) {
      obj_lat_distance_std_ = from.obj_lat_distance_std_;
    }
    if (cached_has_bits & 0x00000004u) {
      obj_absolute_speed_ = from.obj_absolute_speed_;
    }
    if (cached_has_bits & 0x00000008u) {
      reserved_9_ = from.reserved_9_;
    }
    if (cached_has_bits & 0x00000010u) {
      obj_lat_distance_v_ = from.obj_lat_distance_v_;
    }
    if (cached_has_bits & 0x00000020u) {
      obj_absolute_speed_v_ = from.obj_absolute_speed_v_;
    }
    if (cached_has_bits & 0x00000040u) {
      obj_heading_v_ = from.obj_heading_v_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_10_ = from.reserved_10_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      obj_absolute_speed_std_ = from.obj_absolute_speed_std_;
    }
    if (cached_has_bits & 0x00000200u) {
      obj_heading_ = from.obj_heading_;
    }
    if (cached_has_bits & 0x00000400u) {
      obj_heading_std_ = from.obj_heading_std_;
    }
    if (cached_has_bits & 0x00000800u) {
      obj_angle_rate_ = from.obj_angle_rate_;
    }
    if (cached_has_bits & 0x00001000u) {
      obj_angle_rate_std_ = from.obj_angle_rate_std_;
    }
    if (cached_has_bits & 0x00002000u) {
      reserved_11_ = from.reserved_11_;
    }
    if (cached_has_bits & 0x00004000u) {
      obj_angle_right_ = from.obj_angle_right_;
    }
    if (cached_has_bits & 0x00008000u) {
      obj_angle_right_std_ = from.obj_angle_right_std_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      reserved_12_ = from.reserved_12_;
    }
    if (cached_has_bits & 0x00020000u) {
      obj_angle_rate_v_ = from.obj_angle_rate_v_;
    }
    if (cached_has_bits & 0x00040000u) {
      obj_angle_right_v_ = from.obj_angle_right_v_;
    }
    if (cached_has_bits & 0x00080000u) {
      obj_angle_left_v_ = from.obj_angle_left_v_;
    }
    if (cached_has_bits & 0x00100000u) {
      obj_angle_side_v_ = from.obj_angle_side_v_;
    }
    if (cached_has_bits & 0x00200000u) {
      obj_angle_left_ = from.obj_angle_left_;
    }
    if (cached_has_bits & 0x00400000u) {
      obj_angle_left_std_ = from.obj_angle_left_std_;
    }
    if (cached_has_bits & 0x00800000u) {
      reserved_13_ = from.reserved_13_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  if (cached_has_bits & 4278190080u) {
    if (cached_has_bits & 0x01000000u) {
      obj_angle_side_ = from.obj_angle_side_;
    }
    if (cached_has_bits & 0x02000000u) {
      obj_angle_side_std_ = from.obj_angle_side_std_;
    }
    if (cached_has_bits & 0x04000000u) {
      reserved_14_ = from.reserved_14_;
    }
    if (cached_has_bits & 0x08000000u) {
      obj_angle_mid_ = from.obj_angle_mid_;
    }
    if (cached_has_bits & 0x10000000u) {
      obj_angle_mid_std_ = from.obj_angle_mid_std_;
    }
    if (cached_has_bits & 0x20000000u) {
      obj_angle_mid_v_ = from.obj_angle_mid_v_;
    }
    if (cached_has_bits & 0x40000000u) {
      obj_is_in_drivable_area_ = from.obj_is_in_drivable_area_;
    }
    if (cached_has_bits & 0x80000000u) {
      obj_is_in_drivable_area_v_ = from.obj_is_in_drivable_area_v_;
    }
    _has_bits_[2] |= cached_has_bits;
  }
  cached_has_bits = from._has_bits_[3];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      obj_is_veryclose_ = from.obj_is_veryclose_;
    }
    if (cached_has_bits & 0x00000002u) {
      obj_is_veryclose_v_ = from.obj_is_veryclose_v_;
    }
    _has_bits_[3] |= cached_has_bits;
  }
}

void MeObject::CopyFrom(const MeObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.MeObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeObject::IsInitialized() const {
  return true;
}

void MeObject::Swap(MeObject* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MeObject::InternalSwap(MeObject* other) {
  std::swap(obj_id_, other->obj_id_);
  std::swap(obj_existence_probability_, other->obj_existence_probability_);
  std::swap(obj_motion_category_, other->obj_motion_category_);
  std::swap(obj_object_age_, other->obj_object_age_);
  std::swap(obj_measuring_status_, other->obj_measuring_status_);
  std::swap(obj_object_class_, other->obj_object_class_);
  std::swap(obj_camera_, other->obj_camera_);
  std::swap(obj_motion_status_, other->obj_motion_status_);
  std::swap(obj_triggered_sdm_, other->obj_triggered_sdm_);
  std::swap(obj_brake_light_, other->obj_brake_light_);
  std::swap(obj_turn_indicator_right_, other->obj_turn_indicator_right_);
  std::swap(obj_turn_indicator_left_, other->obj_turn_indicator_left_);
  std::swap(obj_motion_oreintation_, other->obj_motion_oreintation_);
  std::swap(obj_light_indicator_validity_, other->obj_light_indicator_validity_);
  std::swap(obj_right_out_of_image_, other->obj_right_out_of_image_);
  std::swap(obj_left_out_of_image_, other->obj_left_out_of_image_);
  std::swap(obj_lane_assignment_v_, other->obj_lane_assignment_v_);
  std::swap(obj_lane_assignment_, other->obj_lane_assignment_);
  std::swap(obj_top_out_of_image_, other->obj_top_out_of_image_);
  std::swap(obj_bottom_out_of_image_, other->obj_bottom_out_of_image_);
  std::swap(obj_top_out_of_image_v_, other->obj_top_out_of_image_v_);
  std::swap(obj_bottom_out_of_image_v_, other->obj_bottom_out_of_image_v_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(obj_age_seconds_, other->obj_age_seconds_);
  std::swap(obj_width_, other->obj_width_);
  std::swap(obj_width_std_, other->obj_width_std_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(obj_age_seconds_v_, other->obj_age_seconds_v_);
  std::swap(obj_width_v_, other->obj_width_v_);
  std::swap(obj_length_v_, other->obj_length_v_);
  std::swap(obj_height_v_, other->obj_height_v_);
  std::swap(obj_length_, other->obj_length_);
  std::swap(obj_length_std_, other->obj_length_std_);
  std::swap(obj_height_, other->obj_height_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(obj_height_std_, other->obj_height_std_);
  std::swap(obj_absolute_long_velocity_, other->obj_absolute_long_velocity_);
  std::swap(obj_abs_long_velocity_std_, other->obj_abs_long_velocity_std_);
  std::swap(obj_absolute_lat_velocity_, other->obj_absolute_lat_velocity_);
  std::swap(obj_abs_lat_velocity_std_, other->obj_abs_lat_velocity_std_);
  std::swap(obj_absolute_long_velocity_v_, other->obj_absolute_long_velocity_v_);
  std::swap(obj_absolute_lat_velocity_v_, other->obj_absolute_lat_velocity_v_);
  std::swap(obj_absolute_lat_acc_v_, other->obj_absolute_lat_acc_v_);
  std::swap(obj_absolute_acceleration_v_, other->obj_absolute_acceleration_v_);
  std::swap(obj_absolute_lat_acc_, other->obj_absolute_lat_acc_);
  std::swap(obj_absolute_lat_acc_std_, other->obj_absolute_lat_acc_std_);
  std::swap(obj_absolute_acceleration_, other->obj_absolute_acceleration_);
  std::swap(obj_absolute_acce_std_, other->obj_absolute_acce_std_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(obj_inv_ttc_, other->obj_inv_ttc_);
  std::swap(obj_relative_long_velocity_, other->obj_relative_long_velocity_);
  std::swap(reserved_5_, other->reserved_5_);
  std::swap(obj_relative_long_velo_std_, other->obj_relative_long_velo_std_);
  std::swap(obj_inv_ttc_v_, other->obj_inv_ttc_v_);
  std::swap(obj_relative_long_velocity_v_, other->obj_relative_long_velocity_v_);
  std::swap(obj_relative_lat_velocity_v_, other->obj_relative_lat_velocity_v_);
  std::swap(obj_long_distance_v_, other->obj_long_distance_v_);
  std::swap(obj_relative_lat_velocity_, other->obj_relative_lat_velocity_);
  std::swap(reserved_6_, other->reserved_6_);
  std::swap(obj_relative_lat_velocity_std_, other->obj_relative_lat_velocity_std_);
  std::swap(obj_long_distance_, other->obj_long_distance_);
  std::swap(reserved_7_, other->reserved_7_);
  std::swap(obj_long_distance_std_, other->obj_long_distance_std_);
  std::swap(obj_lat_distance_, other->obj_lat_distance_);
  std::swap(reserved_8_, other->reserved_8_);
  std::swap(obj_lat_distance_std_, other->obj_lat_distance_std_);
  std::swap(obj_absolute_speed_, other->obj_absolute_speed_);
  std::swap(reserved_9_, other->reserved_9_);
  std::swap(obj_lat_distance_v_, other->obj_lat_distance_v_);
  std::swap(obj_absolute_speed_v_, other->obj_absolute_speed_v_);
  std::swap(obj_heading_v_, other->obj_heading_v_);
  std::swap(reserved_10_, other->reserved_10_);
  std::swap(obj_absolute_speed_std_, other->obj_absolute_speed_std_);
  std::swap(obj_heading_, other->obj_heading_);
  std::swap(obj_heading_std_, other->obj_heading_std_);
  std::swap(obj_angle_rate_, other->obj_angle_rate_);
  std::swap(obj_angle_rate_std_, other->obj_angle_rate_std_);
  std::swap(reserved_11_, other->reserved_11_);
  std::swap(obj_angle_right_, other->obj_angle_right_);
  std::swap(obj_angle_right_std_, other->obj_angle_right_std_);
  std::swap(reserved_12_, other->reserved_12_);
  std::swap(obj_angle_rate_v_, other->obj_angle_rate_v_);
  std::swap(obj_angle_right_v_, other->obj_angle_right_v_);
  std::swap(obj_angle_left_v_, other->obj_angle_left_v_);
  std::swap(obj_angle_side_v_, other->obj_angle_side_v_);
  std::swap(obj_angle_left_, other->obj_angle_left_);
  std::swap(obj_angle_left_std_, other->obj_angle_left_std_);
  std::swap(reserved_13_, other->reserved_13_);
  std::swap(obj_angle_side_, other->obj_angle_side_);
  std::swap(obj_angle_side_std_, other->obj_angle_side_std_);
  std::swap(reserved_14_, other->reserved_14_);
  std::swap(obj_angle_mid_, other->obj_angle_mid_);
  std::swap(obj_angle_mid_std_, other->obj_angle_mid_std_);
  std::swap(obj_angle_mid_v_, other->obj_angle_mid_v_);
  std::swap(obj_is_in_drivable_area_, other->obj_is_in_drivable_area_);
  std::swap(obj_is_in_drivable_area_v_, other->obj_is_in_drivable_area_v_);
  std::swap(obj_is_veryclose_, other->obj_is_veryclose_);
  std::swap(obj_is_veryclose_v_, other->obj_is_veryclose_v_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  std::swap(_has_bits_[1], other->_has_bits_[1]);
  std::swap(_has_bits_[2], other->_has_bits_[2]);
  std::swap(_has_bits_[3], other->_has_bits_[3]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MeObject::GetTypeName() const {
  return "atd.meprocess.MeObject";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MeObject

// optional int32 obj_id = 1;
bool MeObject::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MeObject::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
void MeObject::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void MeObject::clear_obj_id() {
  obj_id_ = 0;
  clear_has_obj_id();
}
::google::protobuf::int32 MeObject::obj_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_id)
  return obj_id_;
}
void MeObject::set_obj_id(::google::protobuf::int32 value) {
  set_has_obj_id();
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_id)
}

// optional float obj_existence_probability = 2;
bool MeObject::has_obj_existence_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MeObject::set_has_obj_existence_probability() {
  _has_bits_[0] |= 0x00000002u;
}
void MeObject::clear_has_obj_existence_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
void MeObject::clear_obj_existence_probability() {
  obj_existence_probability_ = 0;
  clear_has_obj_existence_probability();
}
float MeObject::obj_existence_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_existence_probability)
  return obj_existence_probability_;
}
void MeObject::set_obj_existence_probability(float value) {
  set_has_obj_existence_probability();
  obj_existence_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_existence_probability)
}

// optional bool obj_triggered_sdm = 3;
bool MeObject::has_obj_triggered_sdm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MeObject::set_has_obj_triggered_sdm() {
  _has_bits_[0] |= 0x00000100u;
}
void MeObject::clear_has_obj_triggered_sdm() {
  _has_bits_[0] &= ~0x00000100u;
}
void MeObject::clear_obj_triggered_sdm() {
  obj_triggered_sdm_ = false;
  clear_has_obj_triggered_sdm();
}
bool MeObject::obj_triggered_sdm() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_triggered_sdm)
  return obj_triggered_sdm_;
}
void MeObject::set_obj_triggered_sdm(bool value) {
  set_has_obj_triggered_sdm();
  obj_triggered_sdm_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_triggered_sdm)
}

// optional int32 obj_motion_category = 4;
bool MeObject::has_obj_motion_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MeObject::set_has_obj_motion_category() {
  _has_bits_[0] |= 0x00000004u;
}
void MeObject::clear_has_obj_motion_category() {
  _has_bits_[0] &= ~0x00000004u;
}
void MeObject::clear_obj_motion_category() {
  obj_motion_category_ = 0;
  clear_has_obj_motion_category();
}
::google::protobuf::int32 MeObject::obj_motion_category() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_motion_category)
  return obj_motion_category_;
}
void MeObject::set_obj_motion_category(::google::protobuf::int32 value) {
  set_has_obj_motion_category();
  obj_motion_category_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_motion_category)
}

// optional int32 obj_object_age = 5;
bool MeObject::has_obj_object_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MeObject::set_has_obj_object_age() {
  _has_bits_[0] |= 0x00000008u;
}
void MeObject::clear_has_obj_object_age() {
  _has_bits_[0] &= ~0x00000008u;
}
void MeObject::clear_obj_object_age() {
  obj_object_age_ = 0;
  clear_has_obj_object_age();
}
::google::protobuf::int32 MeObject::obj_object_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_object_age)
  return obj_object_age_;
}
void MeObject::set_obj_object_age(::google::protobuf::int32 value) {
  set_has_obj_object_age();
  obj_object_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_object_age)
}

// optional int32 obj_measuring_status = 6;
bool MeObject::has_obj_measuring_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MeObject::set_has_obj_measuring_status() {
  _has_bits_[0] |= 0x00000010u;
}
void MeObject::clear_has_obj_measuring_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void MeObject::clear_obj_measuring_status() {
  obj_measuring_status_ = 0;
  clear_has_obj_measuring_status();
}
::google::protobuf::int32 MeObject::obj_measuring_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_measuring_status)
  return obj_measuring_status_;
}
void MeObject::set_obj_measuring_status(::google::protobuf::int32 value) {
  set_has_obj_measuring_status();
  obj_measuring_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_measuring_status)
}

// optional .atd.meprocess.MeObject.Obj_object_classType obj_object_class = 7;
bool MeObject::has_obj_object_class() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MeObject::set_has_obj_object_class() {
  _has_bits_[0] |= 0x00000020u;
}
void MeObject::clear_has_obj_object_class() {
  _has_bits_[0] &= ~0x00000020u;
}
void MeObject::clear_obj_object_class() {
  obj_object_class_ = 0;
  clear_has_obj_object_class();
}
::atd::meprocess::MeObject_Obj_object_classType MeObject::obj_object_class() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_object_class)
  return static_cast< ::atd::meprocess::MeObject_Obj_object_classType >(obj_object_class_);
}
void MeObject::set_obj_object_class(::atd::meprocess::MeObject_Obj_object_classType value) {
  assert(::atd::meprocess::MeObject_Obj_object_classType_IsValid(value));
  set_has_obj_object_class();
  obj_object_class_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_object_class)
}

// optional int32 obj_camera = 8;
bool MeObject::has_obj_camera() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MeObject::set_has_obj_camera() {
  _has_bits_[0] |= 0x00000040u;
}
void MeObject::clear_has_obj_camera() {
  _has_bits_[0] &= ~0x00000040u;
}
void MeObject::clear_obj_camera() {
  obj_camera_ = 0;
  clear_has_obj_camera();
}
::google::protobuf::int32 MeObject::obj_camera() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_camera)
  return obj_camera_;
}
void MeObject::set_obj_camera(::google::protobuf::int32 value) {
  set_has_obj_camera();
  obj_camera_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_camera)
}

// optional int32 obj_motion_status = 9;
bool MeObject::has_obj_motion_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MeObject::set_has_obj_motion_status() {
  _has_bits_[0] |= 0x00000080u;
}
void MeObject::clear_has_obj_motion_status() {
  _has_bits_[0] &= ~0x00000080u;
}
void MeObject::clear_obj_motion_status() {
  obj_motion_status_ = 0;
  clear_has_obj_motion_status();
}
::google::protobuf::int32 MeObject::obj_motion_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_motion_status)
  return obj_motion_status_;
}
void MeObject::set_obj_motion_status(::google::protobuf::int32 value) {
  set_has_obj_motion_status();
  obj_motion_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_motion_status)
}

// optional int32 obj_motion_oreintation = 10;
bool MeObject::has_obj_motion_oreintation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MeObject::set_has_obj_motion_oreintation() {
  _has_bits_[0] |= 0x00001000u;
}
void MeObject::clear_has_obj_motion_oreintation() {
  _has_bits_[0] &= ~0x00001000u;
}
void MeObject::clear_obj_motion_oreintation() {
  obj_motion_oreintation_ = 0;
  clear_has_obj_motion_oreintation();
}
::google::protobuf::int32 MeObject::obj_motion_oreintation() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_motion_oreintation)
  return obj_motion_oreintation_;
}
void MeObject::set_obj_motion_oreintation(::google::protobuf::int32 value) {
  set_has_obj_motion_oreintation();
  obj_motion_oreintation_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_motion_oreintation)
}

// optional bool obj_brake_light = 11;
bool MeObject::has_obj_brake_light() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MeObject::set_has_obj_brake_light() {
  _has_bits_[0] |= 0x00000200u;
}
void MeObject::clear_has_obj_brake_light() {
  _has_bits_[0] &= ~0x00000200u;
}
void MeObject::clear_obj_brake_light() {
  obj_brake_light_ = false;
  clear_has_obj_brake_light();
}
bool MeObject::obj_brake_light() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_brake_light)
  return obj_brake_light_;
}
void MeObject::set_obj_brake_light(bool value) {
  set_has_obj_brake_light();
  obj_brake_light_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_brake_light)
}

// optional bool obj_turn_indicator_right = 12;
bool MeObject::has_obj_turn_indicator_right() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MeObject::set_has_obj_turn_indicator_right() {
  _has_bits_[0] |= 0x00000400u;
}
void MeObject::clear_has_obj_turn_indicator_right() {
  _has_bits_[0] &= ~0x00000400u;
}
void MeObject::clear_obj_turn_indicator_right() {
  obj_turn_indicator_right_ = false;
  clear_has_obj_turn_indicator_right();
}
bool MeObject::obj_turn_indicator_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_turn_indicator_right)
  return obj_turn_indicator_right_;
}
void MeObject::set_obj_turn_indicator_right(bool value) {
  set_has_obj_turn_indicator_right();
  obj_turn_indicator_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_turn_indicator_right)
}

// optional bool obj_turn_indicator_left = 13;
bool MeObject::has_obj_turn_indicator_left() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MeObject::set_has_obj_turn_indicator_left() {
  _has_bits_[0] |= 0x00000800u;
}
void MeObject::clear_has_obj_turn_indicator_left() {
  _has_bits_[0] &= ~0x00000800u;
}
void MeObject::clear_obj_turn_indicator_left() {
  obj_turn_indicator_left_ = false;
  clear_has_obj_turn_indicator_left();
}
bool MeObject::obj_turn_indicator_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_turn_indicator_left)
  return obj_turn_indicator_left_;
}
void MeObject::set_obj_turn_indicator_left(bool value) {
  set_has_obj_turn_indicator_left();
  obj_turn_indicator_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_turn_indicator_left)
}

// optional bool obj_light_indicator_validity = 14;
bool MeObject::has_obj_light_indicator_validity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MeObject::set_has_obj_light_indicator_validity() {
  _has_bits_[0] |= 0x00002000u;
}
void MeObject::clear_has_obj_light_indicator_validity() {
  _has_bits_[0] &= ~0x00002000u;
}
void MeObject::clear_obj_light_indicator_validity() {
  obj_light_indicator_validity_ = false;
  clear_has_obj_light_indicator_validity();
}
bool MeObject::obj_light_indicator_validity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_light_indicator_validity)
  return obj_light_indicator_validity_;
}
void MeObject::set_obj_light_indicator_validity(bool value) {
  set_has_obj_light_indicator_validity();
  obj_light_indicator_validity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_light_indicator_validity)
}

// optional bool obj_right_out_of_image = 15;
bool MeObject::has_obj_right_out_of_image() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void MeObject::set_has_obj_right_out_of_image() {
  _has_bits_[0] |= 0x00004000u;
}
void MeObject::clear_has_obj_right_out_of_image() {
  _has_bits_[0] &= ~0x00004000u;
}
void MeObject::clear_obj_right_out_of_image() {
  obj_right_out_of_image_ = false;
  clear_has_obj_right_out_of_image();
}
bool MeObject::obj_right_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_right_out_of_image)
  return obj_right_out_of_image_;
}
void MeObject::set_obj_right_out_of_image(bool value) {
  set_has_obj_right_out_of_image();
  obj_right_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_right_out_of_image)
}

// optional bool obj_left_out_of_image = 16;
bool MeObject::has_obj_left_out_of_image() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void MeObject::set_has_obj_left_out_of_image() {
  _has_bits_[0] |= 0x00008000u;
}
void MeObject::clear_has_obj_left_out_of_image() {
  _has_bits_[0] &= ~0x00008000u;
}
void MeObject::clear_obj_left_out_of_image() {
  obj_left_out_of_image_ = false;
  clear_has_obj_left_out_of_image();
}
bool MeObject::obj_left_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_left_out_of_image)
  return obj_left_out_of_image_;
}
void MeObject::set_obj_left_out_of_image(bool value) {
  set_has_obj_left_out_of_image();
  obj_left_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_left_out_of_image)
}

// optional .atd.meprocess.MeObject.Obj_lane_assignmentType obj_lane_assignment = 17;
bool MeObject::has_obj_lane_assignment() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void MeObject::set_has_obj_lane_assignment() {
  _has_bits_[0] |= 0x00020000u;
}
void MeObject::clear_has_obj_lane_assignment() {
  _has_bits_[0] &= ~0x00020000u;
}
void MeObject::clear_obj_lane_assignment() {
  obj_lane_assignment_ = 0;
  clear_has_obj_lane_assignment();
}
::atd::meprocess::MeObject_Obj_lane_assignmentType MeObject::obj_lane_assignment() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lane_assignment)
  return static_cast< ::atd::meprocess::MeObject_Obj_lane_assignmentType >(obj_lane_assignment_);
}
void MeObject::set_obj_lane_assignment(::atd::meprocess::MeObject_Obj_lane_assignmentType value) {
  assert(::atd::meprocess::MeObject_Obj_lane_assignmentType_IsValid(value));
  set_has_obj_lane_assignment();
  obj_lane_assignment_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lane_assignment)
}

// optional bool obj_lane_assignment_v = 18;
bool MeObject::has_obj_lane_assignment_v() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void MeObject::set_has_obj_lane_assignment_v() {
  _has_bits_[0] |= 0x00010000u;
}
void MeObject::clear_has_obj_lane_assignment_v() {
  _has_bits_[0] &= ~0x00010000u;
}
void MeObject::clear_obj_lane_assignment_v() {
  obj_lane_assignment_v_ = false;
  clear_has_obj_lane_assignment_v();
}
bool MeObject::obj_lane_assignment_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lane_assignment_v)
  return obj_lane_assignment_v_;
}
void MeObject::set_obj_lane_assignment_v(bool value) {
  set_has_obj_lane_assignment_v();
  obj_lane_assignment_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lane_assignment_v)
}

// optional bool obj_top_out_of_image = 19;
bool MeObject::has_obj_top_out_of_image() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void MeObject::set_has_obj_top_out_of_image() {
  _has_bits_[0] |= 0x00040000u;
}
void MeObject::clear_has_obj_top_out_of_image() {
  _has_bits_[0] &= ~0x00040000u;
}
void MeObject::clear_obj_top_out_of_image() {
  obj_top_out_of_image_ = false;
  clear_has_obj_top_out_of_image();
}
bool MeObject::obj_top_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_top_out_of_image)
  return obj_top_out_of_image_;
}
void MeObject::set_obj_top_out_of_image(bool value) {
  set_has_obj_top_out_of_image();
  obj_top_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_top_out_of_image)
}

// optional bool obj_bottom_out_of_image = 20;
bool MeObject::has_obj_bottom_out_of_image() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void MeObject::set_has_obj_bottom_out_of_image() {
  _has_bits_[0] |= 0x00080000u;
}
void MeObject::clear_has_obj_bottom_out_of_image() {
  _has_bits_[0] &= ~0x00080000u;
}
void MeObject::clear_obj_bottom_out_of_image() {
  obj_bottom_out_of_image_ = false;
  clear_has_obj_bottom_out_of_image();
}
bool MeObject::obj_bottom_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_bottom_out_of_image)
  return obj_bottom_out_of_image_;
}
void MeObject::set_obj_bottom_out_of_image(bool value) {
  set_has_obj_bottom_out_of_image();
  obj_bottom_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_bottom_out_of_image)
}

// optional bool obj_top_out_of_image_v = 21;
bool MeObject::has_obj_top_out_of_image_v() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void MeObject::set_has_obj_top_out_of_image_v() {
  _has_bits_[0] |= 0x00100000u;
}
void MeObject::clear_has_obj_top_out_of_image_v() {
  _has_bits_[0] &= ~0x00100000u;
}
void MeObject::clear_obj_top_out_of_image_v() {
  obj_top_out_of_image_v_ = false;
  clear_has_obj_top_out_of_image_v();
}
bool MeObject::obj_top_out_of_image_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_top_out_of_image_v)
  return obj_top_out_of_image_v_;
}
void MeObject::set_obj_top_out_of_image_v(bool value) {
  set_has_obj_top_out_of_image_v();
  obj_top_out_of_image_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_top_out_of_image_v)
}

// optional bool obj_bottom_out_of_image_v = 22;
bool MeObject::has_obj_bottom_out_of_image_v() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void MeObject::set_has_obj_bottom_out_of_image_v() {
  _has_bits_[0] |= 0x00200000u;
}
void MeObject::clear_has_obj_bottom_out_of_image_v() {
  _has_bits_[0] &= ~0x00200000u;
}
void MeObject::clear_obj_bottom_out_of_image_v() {
  obj_bottom_out_of_image_v_ = false;
  clear_has_obj_bottom_out_of_image_v();
}
bool MeObject::obj_bottom_out_of_image_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_bottom_out_of_image_v)
  return obj_bottom_out_of_image_v_;
}
void MeObject::set_obj_bottom_out_of_image_v(bool value) {
  set_has_obj_bottom_out_of_image_v();
  obj_bottom_out_of_image_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_bottom_out_of_image_v)
}

// optional int32 reserved_1 = 23;
bool MeObject::has_reserved_1() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void MeObject::set_has_reserved_1() {
  _has_bits_[0] |= 0x00400000u;
}
void MeObject::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00400000u;
}
void MeObject::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 MeObject::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_1)
  return reserved_1_;
}
void MeObject::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_1)
}

// optional int32 obj_age_seconds = 24;
bool MeObject::has_obj_age_seconds() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void MeObject::set_has_obj_age_seconds() {
  _has_bits_[0] |= 0x00800000u;
}
void MeObject::clear_has_obj_age_seconds() {
  _has_bits_[0] &= ~0x00800000u;
}
void MeObject::clear_obj_age_seconds() {
  obj_age_seconds_ = 0;
  clear_has_obj_age_seconds();
}
::google::protobuf::int32 MeObject::obj_age_seconds() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_age_seconds)
  return obj_age_seconds_;
}
void MeObject::set_obj_age_seconds(::google::protobuf::int32 value) {
  set_has_obj_age_seconds();
  obj_age_seconds_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_age_seconds)
}

// optional bool obj_age_seconds_v = 25;
bool MeObject::has_obj_age_seconds_v() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void MeObject::set_has_obj_age_seconds_v() {
  _has_bits_[0] |= 0x08000000u;
}
void MeObject::clear_has_obj_age_seconds_v() {
  _has_bits_[0] &= ~0x08000000u;
}
void MeObject::clear_obj_age_seconds_v() {
  obj_age_seconds_v_ = false;
  clear_has_obj_age_seconds_v();
}
bool MeObject::obj_age_seconds_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_age_seconds_v)
  return obj_age_seconds_v_;
}
void MeObject::set_obj_age_seconds_v(bool value) {
  set_has_obj_age_seconds_v();
  obj_age_seconds_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_age_seconds_v)
}

// optional float obj_width = 26;
bool MeObject::has_obj_width() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void MeObject::set_has_obj_width() {
  _has_bits_[0] |= 0x01000000u;
}
void MeObject::clear_has_obj_width() {
  _has_bits_[0] &= ~0x01000000u;
}
void MeObject::clear_obj_width() {
  obj_width_ = 0;
  clear_has_obj_width();
}
float MeObject::obj_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_width)
  return obj_width_;
}
void MeObject::set_obj_width(float value) {
  set_has_obj_width();
  obj_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_width)
}

// optional bool obj_width_v = 27;
bool MeObject::has_obj_width_v() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void MeObject::set_has_obj_width_v() {
  _has_bits_[0] |= 0x10000000u;
}
void MeObject::clear_has_obj_width_v() {
  _has_bits_[0] &= ~0x10000000u;
}
void MeObject::clear_obj_width_v() {
  obj_width_v_ = false;
  clear_has_obj_width_v();
}
bool MeObject::obj_width_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_width_v)
  return obj_width_v_;
}
void MeObject::set_obj_width_v(bool value) {
  set_has_obj_width_v();
  obj_width_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_width_v)
}

// optional float obj_width_std = 28;
bool MeObject::has_obj_width_std() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void MeObject::set_has_obj_width_std() {
  _has_bits_[0] |= 0x02000000u;
}
void MeObject::clear_has_obj_width_std() {
  _has_bits_[0] &= ~0x02000000u;
}
void MeObject::clear_obj_width_std() {
  obj_width_std_ = 0;
  clear_has_obj_width_std();
}
float MeObject::obj_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_width_std)
  return obj_width_std_;
}
void MeObject::set_obj_width_std(float value) {
  set_has_obj_width_std();
  obj_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_width_std)
}

// optional int32 reserved_2 = 29;
bool MeObject::has_reserved_2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void MeObject::set_has_reserved_2() {
  _has_bits_[0] |= 0x04000000u;
}
void MeObject::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x04000000u;
}
void MeObject::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 MeObject::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_2)
  return reserved_2_;
}
void MeObject::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_2)
}

// optional float obj_length = 30;
bool MeObject::has_obj_length() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
void MeObject::set_has_obj_length() {
  _has_bits_[0] |= 0x80000000u;
}
void MeObject::clear_has_obj_length() {
  _has_bits_[0] &= ~0x80000000u;
}
void MeObject::clear_obj_length() {
  obj_length_ = 0;
  clear_has_obj_length();
}
float MeObject::obj_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_length)
  return obj_length_;
}
void MeObject::set_obj_length(float value) {
  set_has_obj_length();
  obj_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_length)
}

// optional bool obj_length_v = 31;
bool MeObject::has_obj_length_v() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void MeObject::set_has_obj_length_v() {
  _has_bits_[0] |= 0x20000000u;
}
void MeObject::clear_has_obj_length_v() {
  _has_bits_[0] &= ~0x20000000u;
}
void MeObject::clear_obj_length_v() {
  obj_length_v_ = false;
  clear_has_obj_length_v();
}
bool MeObject::obj_length_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_length_v)
  return obj_length_v_;
}
void MeObject::set_obj_length_v(bool value) {
  set_has_obj_length_v();
  obj_length_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_length_v)
}

// optional float obj_length_std = 32;
bool MeObject::has_obj_length_std() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
void MeObject::set_has_obj_length_std() {
  _has_bits_[1] |= 0x00000001u;
}
void MeObject::clear_has_obj_length_std() {
  _has_bits_[1] &= ~0x00000001u;
}
void MeObject::clear_obj_length_std() {
  obj_length_std_ = 0;
  clear_has_obj_length_std();
}
float MeObject::obj_length_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_length_std)
  return obj_length_std_;
}
void MeObject::set_obj_length_std(float value) {
  set_has_obj_length_std();
  obj_length_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_length_std)
}

// optional float obj_height = 33;
bool MeObject::has_obj_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
void MeObject::set_has_obj_height() {
  _has_bits_[1] |= 0x00000002u;
}
void MeObject::clear_has_obj_height() {
  _has_bits_[1] &= ~0x00000002u;
}
void MeObject::clear_obj_height() {
  obj_height_ = 0;
  clear_has_obj_height();
}
float MeObject::obj_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_height)
  return obj_height_;
}
void MeObject::set_obj_height(float value) {
  set_has_obj_height();
  obj_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_height)
}

// optional bool obj_height_v = 34;
bool MeObject::has_obj_height_v() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
void MeObject::set_has_obj_height_v() {
  _has_bits_[0] |= 0x40000000u;
}
void MeObject::clear_has_obj_height_v() {
  _has_bits_[0] &= ~0x40000000u;
}
void MeObject::clear_obj_height_v() {
  obj_height_v_ = false;
  clear_has_obj_height_v();
}
bool MeObject::obj_height_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_height_v)
  return obj_height_v_;
}
void MeObject::set_obj_height_v(bool value) {
  set_has_obj_height_v();
  obj_height_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_height_v)
}

// optional int32 reserved_3 = 35;
bool MeObject::has_reserved_3() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
void MeObject::set_has_reserved_3() {
  _has_bits_[1] |= 0x00000004u;
}
void MeObject::clear_has_reserved_3() {
  _has_bits_[1] &= ~0x00000004u;
}
void MeObject::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
::google::protobuf::int32 MeObject::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_3)
  return reserved_3_;
}
void MeObject::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_3)
}

// optional float obj_height_std = 36;
bool MeObject::has_obj_height_std() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
void MeObject::set_has_obj_height_std() {
  _has_bits_[1] |= 0x00000008u;
}
void MeObject::clear_has_obj_height_std() {
  _has_bits_[1] &= ~0x00000008u;
}
void MeObject::clear_obj_height_std() {
  obj_height_std_ = 0;
  clear_has_obj_height_std();
}
float MeObject::obj_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_height_std)
  return obj_height_std_;
}
void MeObject::set_obj_height_std(float value) {
  set_has_obj_height_std();
  obj_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_height_std)
}

// optional float obj_absolute_long_velocity = 37;
bool MeObject::has_obj_absolute_long_velocity() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
void MeObject::set_has_obj_absolute_long_velocity() {
  _has_bits_[1] |= 0x00000010u;
}
void MeObject::clear_has_obj_absolute_long_velocity() {
  _has_bits_[1] &= ~0x00000010u;
}
void MeObject::clear_obj_absolute_long_velocity() {
  obj_absolute_long_velocity_ = 0;
  clear_has_obj_absolute_long_velocity();
}
float MeObject::obj_absolute_long_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_long_velocity)
  return obj_absolute_long_velocity_;
}
void MeObject::set_obj_absolute_long_velocity(float value) {
  set_has_obj_absolute_long_velocity();
  obj_absolute_long_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_long_velocity)
}

// optional bool obj_absolute_long_velocity_v = 38;
bool MeObject::has_obj_absolute_long_velocity_v() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
void MeObject::set_has_obj_absolute_long_velocity_v() {
  _has_bits_[1] |= 0x00000100u;
}
void MeObject::clear_has_obj_absolute_long_velocity_v() {
  _has_bits_[1] &= ~0x00000100u;
}
void MeObject::clear_obj_absolute_long_velocity_v() {
  obj_absolute_long_velocity_v_ = false;
  clear_has_obj_absolute_long_velocity_v();
}
bool MeObject::obj_absolute_long_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_long_velocity_v)
  return obj_absolute_long_velocity_v_;
}
void MeObject::set_obj_absolute_long_velocity_v(bool value) {
  set_has_obj_absolute_long_velocity_v();
  obj_absolute_long_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_long_velocity_v)
}

// optional float obj_abs_long_velocity_std = 39;
bool MeObject::has_obj_abs_long_velocity_std() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
void MeObject::set_has_obj_abs_long_velocity_std() {
  _has_bits_[1] |= 0x00000020u;
}
void MeObject::clear_has_obj_abs_long_velocity_std() {
  _has_bits_[1] &= ~0x00000020u;
}
void MeObject::clear_obj_abs_long_velocity_std() {
  obj_abs_long_velocity_std_ = 0;
  clear_has_obj_abs_long_velocity_std();
}
float MeObject::obj_abs_long_velocity_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_abs_long_velocity_std)
  return obj_abs_long_velocity_std_;
}
void MeObject::set_obj_abs_long_velocity_std(float value) {
  set_has_obj_abs_long_velocity_std();
  obj_abs_long_velocity_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_abs_long_velocity_std)
}

// optional float obj_absolute_lat_velocity = 40;
bool MeObject::has_obj_absolute_lat_velocity() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
void MeObject::set_has_obj_absolute_lat_velocity() {
  _has_bits_[1] |= 0x00000040u;
}
void MeObject::clear_has_obj_absolute_lat_velocity() {
  _has_bits_[1] &= ~0x00000040u;
}
void MeObject::clear_obj_absolute_lat_velocity() {
  obj_absolute_lat_velocity_ = 0;
  clear_has_obj_absolute_lat_velocity();
}
float MeObject::obj_absolute_lat_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_velocity)
  return obj_absolute_lat_velocity_;
}
void MeObject::set_obj_absolute_lat_velocity(float value) {
  set_has_obj_absolute_lat_velocity();
  obj_absolute_lat_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_velocity)
}

// optional bool obj_absolute_lat_velocity_v = 41;
bool MeObject::has_obj_absolute_lat_velocity_v() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
void MeObject::set_has_obj_absolute_lat_velocity_v() {
  _has_bits_[1] |= 0x00000200u;
}
void MeObject::clear_has_obj_absolute_lat_velocity_v() {
  _has_bits_[1] &= ~0x00000200u;
}
void MeObject::clear_obj_absolute_lat_velocity_v() {
  obj_absolute_lat_velocity_v_ = false;
  clear_has_obj_absolute_lat_velocity_v();
}
bool MeObject::obj_absolute_lat_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_velocity_v)
  return obj_absolute_lat_velocity_v_;
}
void MeObject::set_obj_absolute_lat_velocity_v(bool value) {
  set_has_obj_absolute_lat_velocity_v();
  obj_absolute_lat_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_velocity_v)
}

// optional float obj_abs_lat_velocity_std = 42;
bool MeObject::has_obj_abs_lat_velocity_std() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
void MeObject::set_has_obj_abs_lat_velocity_std() {
  _has_bits_[1] |= 0x00000080u;
}
void MeObject::clear_has_obj_abs_lat_velocity_std() {
  _has_bits_[1] &= ~0x00000080u;
}
void MeObject::clear_obj_abs_lat_velocity_std() {
  obj_abs_lat_velocity_std_ = 0;
  clear_has_obj_abs_lat_velocity_std();
}
float MeObject::obj_abs_lat_velocity_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_abs_lat_velocity_std)
  return obj_abs_lat_velocity_std_;
}
void MeObject::set_obj_abs_lat_velocity_std(float value) {
  set_has_obj_abs_lat_velocity_std();
  obj_abs_lat_velocity_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_abs_lat_velocity_std)
}

// optional float obj_absolute_lat_acc = 43;
bool MeObject::has_obj_absolute_lat_acc() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
void MeObject::set_has_obj_absolute_lat_acc() {
  _has_bits_[1] |= 0x00001000u;
}
void MeObject::clear_has_obj_absolute_lat_acc() {
  _has_bits_[1] &= ~0x00001000u;
}
void MeObject::clear_obj_absolute_lat_acc() {
  obj_absolute_lat_acc_ = 0;
  clear_has_obj_absolute_lat_acc();
}
float MeObject::obj_absolute_lat_acc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_acc)
  return obj_absolute_lat_acc_;
}
void MeObject::set_obj_absolute_lat_acc(float value) {
  set_has_obj_absolute_lat_acc();
  obj_absolute_lat_acc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_acc)
}

// optional bool obj_absolute_lat_acc_v = 44;
bool MeObject::has_obj_absolute_lat_acc_v() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
void MeObject::set_has_obj_absolute_lat_acc_v() {
  _has_bits_[1] |= 0x00000400u;
}
void MeObject::clear_has_obj_absolute_lat_acc_v() {
  _has_bits_[1] &= ~0x00000400u;
}
void MeObject::clear_obj_absolute_lat_acc_v() {
  obj_absolute_lat_acc_v_ = false;
  clear_has_obj_absolute_lat_acc_v();
}
bool MeObject::obj_absolute_lat_acc_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_acc_v)
  return obj_absolute_lat_acc_v_;
}
void MeObject::set_obj_absolute_lat_acc_v(bool value) {
  set_has_obj_absolute_lat_acc_v();
  obj_absolute_lat_acc_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_acc_v)
}

// optional float obj_absolute_lat_acc_std = 45;
bool MeObject::has_obj_absolute_lat_acc_std() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
void MeObject::set_has_obj_absolute_lat_acc_std() {
  _has_bits_[1] |= 0x00002000u;
}
void MeObject::clear_has_obj_absolute_lat_acc_std() {
  _has_bits_[1] &= ~0x00002000u;
}
void MeObject::clear_obj_absolute_lat_acc_std() {
  obj_absolute_lat_acc_std_ = 0;
  clear_has_obj_absolute_lat_acc_std();
}
float MeObject::obj_absolute_lat_acc_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_acc_std)
  return obj_absolute_lat_acc_std_;
}
void MeObject::set_obj_absolute_lat_acc_std(float value) {
  set_has_obj_absolute_lat_acc_std();
  obj_absolute_lat_acc_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_acc_std)
}

// optional float obj_absolute_acceleration = 46;
bool MeObject::has_obj_absolute_acceleration() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
void MeObject::set_has_obj_absolute_acceleration() {
  _has_bits_[1] |= 0x00004000u;
}
void MeObject::clear_has_obj_absolute_acceleration() {
  _has_bits_[1] &= ~0x00004000u;
}
void MeObject::clear_obj_absolute_acceleration() {
  obj_absolute_acceleration_ = 0;
  clear_has_obj_absolute_acceleration();
}
float MeObject::obj_absolute_acceleration() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_acceleration)
  return obj_absolute_acceleration_;
}
void MeObject::set_obj_absolute_acceleration(float value) {
  set_has_obj_absolute_acceleration();
  obj_absolute_acceleration_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_acceleration)
}

// optional bool obj_absolute_acceleration_v = 47;
bool MeObject::has_obj_absolute_acceleration_v() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
void MeObject::set_has_obj_absolute_acceleration_v() {
  _has_bits_[1] |= 0x00000800u;
}
void MeObject::clear_has_obj_absolute_acceleration_v() {
  _has_bits_[1] &= ~0x00000800u;
}
void MeObject::clear_obj_absolute_acceleration_v() {
  obj_absolute_acceleration_v_ = false;
  clear_has_obj_absolute_acceleration_v();
}
bool MeObject::obj_absolute_acceleration_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_acceleration_v)
  return obj_absolute_acceleration_v_;
}
void MeObject::set_obj_absolute_acceleration_v(bool value) {
  set_has_obj_absolute_acceleration_v();
  obj_absolute_acceleration_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_acceleration_v)
}

// optional float obj_absolute_acce_std = 48;
bool MeObject::has_obj_absolute_acce_std() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
void MeObject::set_has_obj_absolute_acce_std() {
  _has_bits_[1] |= 0x00008000u;
}
void MeObject::clear_has_obj_absolute_acce_std() {
  _has_bits_[1] &= ~0x00008000u;
}
void MeObject::clear_obj_absolute_acce_std() {
  obj_absolute_acce_std_ = 0;
  clear_has_obj_absolute_acce_std();
}
float MeObject::obj_absolute_acce_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_acce_std)
  return obj_absolute_acce_std_;
}
void MeObject::set_obj_absolute_acce_std(float value) {
  set_has_obj_absolute_acce_std();
  obj_absolute_acce_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_acce_std)
}

// optional int32 reserved_4 = 49;
bool MeObject::has_reserved_4() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
void MeObject::set_has_reserved_4() {
  _has_bits_[1] |= 0x00010000u;
}
void MeObject::clear_has_reserved_4() {
  _has_bits_[1] &= ~0x00010000u;
}
void MeObject::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 MeObject::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_4)
  return reserved_4_;
}
void MeObject::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_4)
}

// optional float obj_inv_ttc = 50;
bool MeObject::has_obj_inv_ttc() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
void MeObject::set_has_obj_inv_ttc() {
  _has_bits_[1] |= 0x00020000u;
}
void MeObject::clear_has_obj_inv_ttc() {
  _has_bits_[1] &= ~0x00020000u;
}
void MeObject::clear_obj_inv_ttc() {
  obj_inv_ttc_ = 0;
  clear_has_obj_inv_ttc();
}
float MeObject::obj_inv_ttc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_inv_ttc)
  return obj_inv_ttc_;
}
void MeObject::set_obj_inv_ttc(float value) {
  set_has_obj_inv_ttc();
  obj_inv_ttc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_inv_ttc)
}

// optional bool obj_inv_ttc_v = 51;
bool MeObject::has_obj_inv_ttc_v() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
void MeObject::set_has_obj_inv_ttc_v() {
  _has_bits_[1] |= 0x00200000u;
}
void MeObject::clear_has_obj_inv_ttc_v() {
  _has_bits_[1] &= ~0x00200000u;
}
void MeObject::clear_obj_inv_ttc_v() {
  obj_inv_ttc_v_ = false;
  clear_has_obj_inv_ttc_v();
}
bool MeObject::obj_inv_ttc_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_inv_ttc_v)
  return obj_inv_ttc_v_;
}
void MeObject::set_obj_inv_ttc_v(bool value) {
  set_has_obj_inv_ttc_v();
  obj_inv_ttc_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_inv_ttc_v)
}

// optional float obj_relative_long_velocity = 52;
bool MeObject::has_obj_relative_long_velocity() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
void MeObject::set_has_obj_relative_long_velocity() {
  _has_bits_[1] |= 0x00040000u;
}
void MeObject::clear_has_obj_relative_long_velocity() {
  _has_bits_[1] &= ~0x00040000u;
}
void MeObject::clear_obj_relative_long_velocity() {
  obj_relative_long_velocity_ = 0;
  clear_has_obj_relative_long_velocity();
}
float MeObject::obj_relative_long_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_long_velocity)
  return obj_relative_long_velocity_;
}
void MeObject::set_obj_relative_long_velocity(float value) {
  set_has_obj_relative_long_velocity();
  obj_relative_long_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_long_velocity)
}

// optional bool obj_relative_long_velocity_v = 53;
bool MeObject::has_obj_relative_long_velocity_v() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
void MeObject::set_has_obj_relative_long_velocity_v() {
  _has_bits_[1] |= 0x00400000u;
}
void MeObject::clear_has_obj_relative_long_velocity_v() {
  _has_bits_[1] &= ~0x00400000u;
}
void MeObject::clear_obj_relative_long_velocity_v() {
  obj_relative_long_velocity_v_ = false;
  clear_has_obj_relative_long_velocity_v();
}
bool MeObject::obj_relative_long_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_long_velocity_v)
  return obj_relative_long_velocity_v_;
}
void MeObject::set_obj_relative_long_velocity_v(bool value) {
  set_has_obj_relative_long_velocity_v();
  obj_relative_long_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_long_velocity_v)
}

// optional int32 reserved_5 = 54;
bool MeObject::has_reserved_5() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
void MeObject::set_has_reserved_5() {
  _has_bits_[1] |= 0x00080000u;
}
void MeObject::clear_has_reserved_5() {
  _has_bits_[1] &= ~0x00080000u;
}
void MeObject::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
::google::protobuf::int32 MeObject::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_5)
  return reserved_5_;
}
void MeObject::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_5)
}

// optional float obj_relative_long_velo_std = 55;
bool MeObject::has_obj_relative_long_velo_std() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
void MeObject::set_has_obj_relative_long_velo_std() {
  _has_bits_[1] |= 0x00100000u;
}
void MeObject::clear_has_obj_relative_long_velo_std() {
  _has_bits_[1] &= ~0x00100000u;
}
void MeObject::clear_obj_relative_long_velo_std() {
  obj_relative_long_velo_std_ = 0;
  clear_has_obj_relative_long_velo_std();
}
float MeObject::obj_relative_long_velo_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_long_velo_std)
  return obj_relative_long_velo_std_;
}
void MeObject::set_obj_relative_long_velo_std(float value) {
  set_has_obj_relative_long_velo_std();
  obj_relative_long_velo_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_long_velo_std)
}

// optional float obj_relative_lat_velocity = 56;
bool MeObject::has_obj_relative_lat_velocity() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
void MeObject::set_has_obj_relative_lat_velocity() {
  _has_bits_[1] |= 0x02000000u;
}
void MeObject::clear_has_obj_relative_lat_velocity() {
  _has_bits_[1] &= ~0x02000000u;
}
void MeObject::clear_obj_relative_lat_velocity() {
  obj_relative_lat_velocity_ = 0;
  clear_has_obj_relative_lat_velocity();
}
float MeObject::obj_relative_lat_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_lat_velocity)
  return obj_relative_lat_velocity_;
}
void MeObject::set_obj_relative_lat_velocity(float value) {
  set_has_obj_relative_lat_velocity();
  obj_relative_lat_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_lat_velocity)
}

// optional bool obj_relative_lat_velocity_v = 57;
bool MeObject::has_obj_relative_lat_velocity_v() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
void MeObject::set_has_obj_relative_lat_velocity_v() {
  _has_bits_[1] |= 0x00800000u;
}
void MeObject::clear_has_obj_relative_lat_velocity_v() {
  _has_bits_[1] &= ~0x00800000u;
}
void MeObject::clear_obj_relative_lat_velocity_v() {
  obj_relative_lat_velocity_v_ = false;
  clear_has_obj_relative_lat_velocity_v();
}
bool MeObject::obj_relative_lat_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_lat_velocity_v)
  return obj_relative_lat_velocity_v_;
}
void MeObject::set_obj_relative_lat_velocity_v(bool value) {
  set_has_obj_relative_lat_velocity_v();
  obj_relative_lat_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_lat_velocity_v)
}

// optional int32 reserved_6 = 58;
bool MeObject::has_reserved_6() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
void MeObject::set_has_reserved_6() {
  _has_bits_[1] |= 0x04000000u;
}
void MeObject::clear_has_reserved_6() {
  _has_bits_[1] &= ~0x04000000u;
}
void MeObject::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
::google::protobuf::int32 MeObject::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_6)
  return reserved_6_;
}
void MeObject::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_6)
}

// optional float obj_relative_lat_velocity_std = 59;
bool MeObject::has_obj_relative_lat_velocity_std() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
void MeObject::set_has_obj_relative_lat_velocity_std() {
  _has_bits_[1] |= 0x08000000u;
}
void MeObject::clear_has_obj_relative_lat_velocity_std() {
  _has_bits_[1] &= ~0x08000000u;
}
void MeObject::clear_obj_relative_lat_velocity_std() {
  obj_relative_lat_velocity_std_ = 0;
  clear_has_obj_relative_lat_velocity_std();
}
float MeObject::obj_relative_lat_velocity_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_lat_velocity_std)
  return obj_relative_lat_velocity_std_;
}
void MeObject::set_obj_relative_lat_velocity_std(float value) {
  set_has_obj_relative_lat_velocity_std();
  obj_relative_lat_velocity_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_lat_velocity_std)
}

// optional float obj_long_distance = 60;
bool MeObject::has_obj_long_distance() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
void MeObject::set_has_obj_long_distance() {
  _has_bits_[1] |= 0x10000000u;
}
void MeObject::clear_has_obj_long_distance() {
  _has_bits_[1] &= ~0x10000000u;
}
void MeObject::clear_obj_long_distance() {
  obj_long_distance_ = 0;
  clear_has_obj_long_distance();
}
float MeObject::obj_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_long_distance)
  return obj_long_distance_;
}
void MeObject::set_obj_long_distance(float value) {
  set_has_obj_long_distance();
  obj_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_long_distance)
}

// optional bool obj_long_distance_v = 61;
bool MeObject::has_obj_long_distance_v() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
void MeObject::set_has_obj_long_distance_v() {
  _has_bits_[1] |= 0x01000000u;
}
void MeObject::clear_has_obj_long_distance_v() {
  _has_bits_[1] &= ~0x01000000u;
}
void MeObject::clear_obj_long_distance_v() {
  obj_long_distance_v_ = false;
  clear_has_obj_long_distance_v();
}
bool MeObject::obj_long_distance_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_long_distance_v)
  return obj_long_distance_v_;
}
void MeObject::set_obj_long_distance_v(bool value) {
  set_has_obj_long_distance_v();
  obj_long_distance_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_long_distance_v)
}

// optional int32 reserved_7 = 62;
bool MeObject::has_reserved_7() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
void MeObject::set_has_reserved_7() {
  _has_bits_[1] |= 0x20000000u;
}
void MeObject::clear_has_reserved_7() {
  _has_bits_[1] &= ~0x20000000u;
}
void MeObject::clear_reserved_7() {
  reserved_7_ = 0;
  clear_has_reserved_7();
}
::google::protobuf::int32 MeObject::reserved_7() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_7)
  return reserved_7_;
}
void MeObject::set_reserved_7(::google::protobuf::int32 value) {
  set_has_reserved_7();
  reserved_7_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_7)
}

// optional float obj_long_distance_std = 63;
bool MeObject::has_obj_long_distance_std() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
void MeObject::set_has_obj_long_distance_std() {
  _has_bits_[1] |= 0x40000000u;
}
void MeObject::clear_has_obj_long_distance_std() {
  _has_bits_[1] &= ~0x40000000u;
}
void MeObject::clear_obj_long_distance_std() {
  obj_long_distance_std_ = 0;
  clear_has_obj_long_distance_std();
}
float MeObject::obj_long_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_long_distance_std)
  return obj_long_distance_std_;
}
void MeObject::set_obj_long_distance_std(float value) {
  set_has_obj_long_distance_std();
  obj_long_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_long_distance_std)
}

// optional float obj_lat_distance = 64;
bool MeObject::has_obj_lat_distance() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
void MeObject::set_has_obj_lat_distance() {
  _has_bits_[1] |= 0x80000000u;
}
void MeObject::clear_has_obj_lat_distance() {
  _has_bits_[1] &= ~0x80000000u;
}
void MeObject::clear_obj_lat_distance() {
  obj_lat_distance_ = 0;
  clear_has_obj_lat_distance();
}
float MeObject::obj_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lat_distance)
  return obj_lat_distance_;
}
void MeObject::set_obj_lat_distance(float value) {
  set_has_obj_lat_distance();
  obj_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lat_distance)
}

// optional bool obj_lat_distance_v = 65;
bool MeObject::has_obj_lat_distance_v() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
void MeObject::set_has_obj_lat_distance_v() {
  _has_bits_[2] |= 0x00000010u;
}
void MeObject::clear_has_obj_lat_distance_v() {
  _has_bits_[2] &= ~0x00000010u;
}
void MeObject::clear_obj_lat_distance_v() {
  obj_lat_distance_v_ = false;
  clear_has_obj_lat_distance_v();
}
bool MeObject::obj_lat_distance_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lat_distance_v)
  return obj_lat_distance_v_;
}
void MeObject::set_obj_lat_distance_v(bool value) {
  set_has_obj_lat_distance_v();
  obj_lat_distance_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lat_distance_v)
}

// optional int32 reserved_8 = 66;
bool MeObject::has_reserved_8() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
void MeObject::set_has_reserved_8() {
  _has_bits_[2] |= 0x00000001u;
}
void MeObject::clear_has_reserved_8() {
  _has_bits_[2] &= ~0x00000001u;
}
void MeObject::clear_reserved_8() {
  reserved_8_ = 0;
  clear_has_reserved_8();
}
::google::protobuf::int32 MeObject::reserved_8() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_8)
  return reserved_8_;
}
void MeObject::set_reserved_8(::google::protobuf::int32 value) {
  set_has_reserved_8();
  reserved_8_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_8)
}

// optional float obj_lat_distance_std = 67;
bool MeObject::has_obj_lat_distance_std() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
void MeObject::set_has_obj_lat_distance_std() {
  _has_bits_[2] |= 0x00000002u;
}
void MeObject::clear_has_obj_lat_distance_std() {
  _has_bits_[2] &= ~0x00000002u;
}
void MeObject::clear_obj_lat_distance_std() {
  obj_lat_distance_std_ = 0;
  clear_has_obj_lat_distance_std();
}
float MeObject::obj_lat_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lat_distance_std)
  return obj_lat_distance_std_;
}
void MeObject::set_obj_lat_distance_std(float value) {
  set_has_obj_lat_distance_std();
  obj_lat_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lat_distance_std)
}

// optional float obj_absolute_speed = 68;
bool MeObject::has_obj_absolute_speed() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
void MeObject::set_has_obj_absolute_speed() {
  _has_bits_[2] |= 0x00000004u;
}
void MeObject::clear_has_obj_absolute_speed() {
  _has_bits_[2] &= ~0x00000004u;
}
void MeObject::clear_obj_absolute_speed() {
  obj_absolute_speed_ = 0;
  clear_has_obj_absolute_speed();
}
float MeObject::obj_absolute_speed() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_speed)
  return obj_absolute_speed_;
}
void MeObject::set_obj_absolute_speed(float value) {
  set_has_obj_absolute_speed();
  obj_absolute_speed_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_speed)
}

// optional bool obj_absolute_speed_v = 69;
bool MeObject::has_obj_absolute_speed_v() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
void MeObject::set_has_obj_absolute_speed_v() {
  _has_bits_[2] |= 0x00000020u;
}
void MeObject::clear_has_obj_absolute_speed_v() {
  _has_bits_[2] &= ~0x00000020u;
}
void MeObject::clear_obj_absolute_speed_v() {
  obj_absolute_speed_v_ = false;
  clear_has_obj_absolute_speed_v();
}
bool MeObject::obj_absolute_speed_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_speed_v)
  return obj_absolute_speed_v_;
}
void MeObject::set_obj_absolute_speed_v(bool value) {
  set_has_obj_absolute_speed_v();
  obj_absolute_speed_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_speed_v)
}

// optional int32 reserved_9 = 70;
bool MeObject::has_reserved_9() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
void MeObject::set_has_reserved_9() {
  _has_bits_[2] |= 0x00000008u;
}
void MeObject::clear_has_reserved_9() {
  _has_bits_[2] &= ~0x00000008u;
}
void MeObject::clear_reserved_9() {
  reserved_9_ = 0;
  clear_has_reserved_9();
}
::google::protobuf::int32 MeObject::reserved_9() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_9)
  return reserved_9_;
}
void MeObject::set_reserved_9(::google::protobuf::int32 value) {
  set_has_reserved_9();
  reserved_9_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_9)
}

// optional float obj_absolute_speed_std = 71;
bool MeObject::has_obj_absolute_speed_std() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
void MeObject::set_has_obj_absolute_speed_std() {
  _has_bits_[2] |= 0x00000100u;
}
void MeObject::clear_has_obj_absolute_speed_std() {
  _has_bits_[2] &= ~0x00000100u;
}
void MeObject::clear_obj_absolute_speed_std() {
  obj_absolute_speed_std_ = 0;
  clear_has_obj_absolute_speed_std();
}
float MeObject::obj_absolute_speed_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_speed_std)
  return obj_absolute_speed_std_;
}
void MeObject::set_obj_absolute_speed_std(float value) {
  set_has_obj_absolute_speed_std();
  obj_absolute_speed_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_speed_std)
}

// optional float obj_heading = 72;
bool MeObject::has_obj_heading() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
void MeObject::set_has_obj_heading() {
  _has_bits_[2] |= 0x00000200u;
}
void MeObject::clear_has_obj_heading() {
  _has_bits_[2] &= ~0x00000200u;
}
void MeObject::clear_obj_heading() {
  obj_heading_ = 0;
  clear_has_obj_heading();
}
float MeObject::obj_heading() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_heading)
  return obj_heading_;
}
void MeObject::set_obj_heading(float value) {
  set_has_obj_heading();
  obj_heading_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_heading)
}

// optional bool obj_heading_v = 73;
bool MeObject::has_obj_heading_v() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
void MeObject::set_has_obj_heading_v() {
  _has_bits_[2] |= 0x00000040u;
}
void MeObject::clear_has_obj_heading_v() {
  _has_bits_[2] &= ~0x00000040u;
}
void MeObject::clear_obj_heading_v() {
  obj_heading_v_ = false;
  clear_has_obj_heading_v();
}
bool MeObject::obj_heading_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_heading_v)
  return obj_heading_v_;
}
void MeObject::set_obj_heading_v(bool value) {
  set_has_obj_heading_v();
  obj_heading_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_heading_v)
}

// optional float obj_heading_std = 74;
bool MeObject::has_obj_heading_std() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
void MeObject::set_has_obj_heading_std() {
  _has_bits_[2] |= 0x00000400u;
}
void MeObject::clear_has_obj_heading_std() {
  _has_bits_[2] &= ~0x00000400u;
}
void MeObject::clear_obj_heading_std() {
  obj_heading_std_ = 0;
  clear_has_obj_heading_std();
}
float MeObject::obj_heading_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_heading_std)
  return obj_heading_std_;
}
void MeObject::set_obj_heading_std(float value) {
  set_has_obj_heading_std();
  obj_heading_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_heading_std)
}

// optional bool reserved_10 = 75;
bool MeObject::has_reserved_10() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
void MeObject::set_has_reserved_10() {
  _has_bits_[2] |= 0x00000080u;
}
void MeObject::clear_has_reserved_10() {
  _has_bits_[2] &= ~0x00000080u;
}
void MeObject::clear_reserved_10() {
  reserved_10_ = false;
  clear_has_reserved_10();
}
bool MeObject::reserved_10() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_10)
  return reserved_10_;
}
void MeObject::set_reserved_10(bool value) {
  set_has_reserved_10();
  reserved_10_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_10)
}

// optional float obj_angle_rate = 76;
bool MeObject::has_obj_angle_rate() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
void MeObject::set_has_obj_angle_rate() {
  _has_bits_[2] |= 0x00000800u;
}
void MeObject::clear_has_obj_angle_rate() {
  _has_bits_[2] &= ~0x00000800u;
}
void MeObject::clear_obj_angle_rate() {
  obj_angle_rate_ = 0;
  clear_has_obj_angle_rate();
}
float MeObject::obj_angle_rate() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_rate)
  return obj_angle_rate_;
}
void MeObject::set_obj_angle_rate(float value) {
  set_has_obj_angle_rate();
  obj_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_rate)
}

// optional bool obj_angle_rate_v = 77;
bool MeObject::has_obj_angle_rate_v() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
void MeObject::set_has_obj_angle_rate_v() {
  _has_bits_[2] |= 0x00020000u;
}
void MeObject::clear_has_obj_angle_rate_v() {
  _has_bits_[2] &= ~0x00020000u;
}
void MeObject::clear_obj_angle_rate_v() {
  obj_angle_rate_v_ = false;
  clear_has_obj_angle_rate_v();
}
bool MeObject::obj_angle_rate_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_rate_v)
  return obj_angle_rate_v_;
}
void MeObject::set_obj_angle_rate_v(bool value) {
  set_has_obj_angle_rate_v();
  obj_angle_rate_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_rate_v)
}

// optional float obj_angle_rate_std = 78;
bool MeObject::has_obj_angle_rate_std() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
void MeObject::set_has_obj_angle_rate_std() {
  _has_bits_[2] |= 0x00001000u;
}
void MeObject::clear_has_obj_angle_rate_std() {
  _has_bits_[2] &= ~0x00001000u;
}
void MeObject::clear_obj_angle_rate_std() {
  obj_angle_rate_std_ = 0;
  clear_has_obj_angle_rate_std();
}
float MeObject::obj_angle_rate_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_rate_std)
  return obj_angle_rate_std_;
}
void MeObject::set_obj_angle_rate_std(float value) {
  set_has_obj_angle_rate_std();
  obj_angle_rate_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_rate_std)
}

// optional int32 reserved_11 = 79;
bool MeObject::has_reserved_11() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
void MeObject::set_has_reserved_11() {
  _has_bits_[2] |= 0x00002000u;
}
void MeObject::clear_has_reserved_11() {
  _has_bits_[2] &= ~0x00002000u;
}
void MeObject::clear_reserved_11() {
  reserved_11_ = 0;
  clear_has_reserved_11();
}
::google::protobuf::int32 MeObject::reserved_11() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_11)
  return reserved_11_;
}
void MeObject::set_reserved_11(::google::protobuf::int32 value) {
  set_has_reserved_11();
  reserved_11_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_11)
}

// optional float obj_angle_right = 80;
bool MeObject::has_obj_angle_right() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
void MeObject::set_has_obj_angle_right() {
  _has_bits_[2] |= 0x00004000u;
}
void MeObject::clear_has_obj_angle_right() {
  _has_bits_[2] &= ~0x00004000u;
}
void MeObject::clear_obj_angle_right() {
  obj_angle_right_ = 0;
  clear_has_obj_angle_right();
}
float MeObject::obj_angle_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_right)
  return obj_angle_right_;
}
void MeObject::set_obj_angle_right(float value) {
  set_has_obj_angle_right();
  obj_angle_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_right)
}

// optional bool obj_angle_right_v = 81;
bool MeObject::has_obj_angle_right_v() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
void MeObject::set_has_obj_angle_right_v() {
  _has_bits_[2] |= 0x00040000u;
}
void MeObject::clear_has_obj_angle_right_v() {
  _has_bits_[2] &= ~0x00040000u;
}
void MeObject::clear_obj_angle_right_v() {
  obj_angle_right_v_ = false;
  clear_has_obj_angle_right_v();
}
bool MeObject::obj_angle_right_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_right_v)
  return obj_angle_right_v_;
}
void MeObject::set_obj_angle_right_v(bool value) {
  set_has_obj_angle_right_v();
  obj_angle_right_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_right_v)
}

// optional float obj_angle_right_std = 82;
bool MeObject::has_obj_angle_right_std() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
void MeObject::set_has_obj_angle_right_std() {
  _has_bits_[2] |= 0x00008000u;
}
void MeObject::clear_has_obj_angle_right_std() {
  _has_bits_[2] &= ~0x00008000u;
}
void MeObject::clear_obj_angle_right_std() {
  obj_angle_right_std_ = 0;
  clear_has_obj_angle_right_std();
}
float MeObject::obj_angle_right_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_right_std)
  return obj_angle_right_std_;
}
void MeObject::set_obj_angle_right_std(float value) {
  set_has_obj_angle_right_std();
  obj_angle_right_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_right_std)
}

// optional int32 reserved_12 = 83;
bool MeObject::has_reserved_12() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
void MeObject::set_has_reserved_12() {
  _has_bits_[2] |= 0x00010000u;
}
void MeObject::clear_has_reserved_12() {
  _has_bits_[2] &= ~0x00010000u;
}
void MeObject::clear_reserved_12() {
  reserved_12_ = 0;
  clear_has_reserved_12();
}
::google::protobuf::int32 MeObject::reserved_12() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_12)
  return reserved_12_;
}
void MeObject::set_reserved_12(::google::protobuf::int32 value) {
  set_has_reserved_12();
  reserved_12_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_12)
}

// optional float obj_angle_left = 84;
bool MeObject::has_obj_angle_left() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
void MeObject::set_has_obj_angle_left() {
  _has_bits_[2] |= 0x00200000u;
}
void MeObject::clear_has_obj_angle_left() {
  _has_bits_[2] &= ~0x00200000u;
}
void MeObject::clear_obj_angle_left() {
  obj_angle_left_ = 0;
  clear_has_obj_angle_left();
}
float MeObject::obj_angle_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_left)
  return obj_angle_left_;
}
void MeObject::set_obj_angle_left(float value) {
  set_has_obj_angle_left();
  obj_angle_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_left)
}

// optional bool obj_angle_left_v = 85;
bool MeObject::has_obj_angle_left_v() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
void MeObject::set_has_obj_angle_left_v() {
  _has_bits_[2] |= 0x00080000u;
}
void MeObject::clear_has_obj_angle_left_v() {
  _has_bits_[2] &= ~0x00080000u;
}
void MeObject::clear_obj_angle_left_v() {
  obj_angle_left_v_ = false;
  clear_has_obj_angle_left_v();
}
bool MeObject::obj_angle_left_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_left_v)
  return obj_angle_left_v_;
}
void MeObject::set_obj_angle_left_v(bool value) {
  set_has_obj_angle_left_v();
  obj_angle_left_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_left_v)
}

// optional float obj_angle_left_std = 86;
bool MeObject::has_obj_angle_left_std() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
void MeObject::set_has_obj_angle_left_std() {
  _has_bits_[2] |= 0x00400000u;
}
void MeObject::clear_has_obj_angle_left_std() {
  _has_bits_[2] &= ~0x00400000u;
}
void MeObject::clear_obj_angle_left_std() {
  obj_angle_left_std_ = 0;
  clear_has_obj_angle_left_std();
}
float MeObject::obj_angle_left_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_left_std)
  return obj_angle_left_std_;
}
void MeObject::set_obj_angle_left_std(float value) {
  set_has_obj_angle_left_std();
  obj_angle_left_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_left_std)
}

// optional int32 reserved_13 = 87;
bool MeObject::has_reserved_13() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
void MeObject::set_has_reserved_13() {
  _has_bits_[2] |= 0x00800000u;
}
void MeObject::clear_has_reserved_13() {
  _has_bits_[2] &= ~0x00800000u;
}
void MeObject::clear_reserved_13() {
  reserved_13_ = 0;
  clear_has_reserved_13();
}
::google::protobuf::int32 MeObject::reserved_13() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_13)
  return reserved_13_;
}
void MeObject::set_reserved_13(::google::protobuf::int32 value) {
  set_has_reserved_13();
  reserved_13_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_13)
}

// optional float obj_angle_side = 88;
bool MeObject::has_obj_angle_side() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
void MeObject::set_has_obj_angle_side() {
  _has_bits_[2] |= 0x01000000u;
}
void MeObject::clear_has_obj_angle_side() {
  _has_bits_[2] &= ~0x01000000u;
}
void MeObject::clear_obj_angle_side() {
  obj_angle_side_ = 0;
  clear_has_obj_angle_side();
}
float MeObject::obj_angle_side() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_side)
  return obj_angle_side_;
}
void MeObject::set_obj_angle_side(float value) {
  set_has_obj_angle_side();
  obj_angle_side_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_side)
}

// optional bool obj_angle_side_v = 89;
bool MeObject::has_obj_angle_side_v() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
void MeObject::set_has_obj_angle_side_v() {
  _has_bits_[2] |= 0x00100000u;
}
void MeObject::clear_has_obj_angle_side_v() {
  _has_bits_[2] &= ~0x00100000u;
}
void MeObject::clear_obj_angle_side_v() {
  obj_angle_side_v_ = false;
  clear_has_obj_angle_side_v();
}
bool MeObject::obj_angle_side_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_side_v)
  return obj_angle_side_v_;
}
void MeObject::set_obj_angle_side_v(bool value) {
  set_has_obj_angle_side_v();
  obj_angle_side_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_side_v)
}

// optional float obj_angle_side_std = 90;
bool MeObject::has_obj_angle_side_std() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
void MeObject::set_has_obj_angle_side_std() {
  _has_bits_[2] |= 0x02000000u;
}
void MeObject::clear_has_obj_angle_side_std() {
  _has_bits_[2] &= ~0x02000000u;
}
void MeObject::clear_obj_angle_side_std() {
  obj_angle_side_std_ = 0;
  clear_has_obj_angle_side_std();
}
float MeObject::obj_angle_side_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_side_std)
  return obj_angle_side_std_;
}
void MeObject::set_obj_angle_side_std(float value) {
  set_has_obj_angle_side_std();
  obj_angle_side_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_side_std)
}

// optional int32 reserved_14 = 91;
bool MeObject::has_reserved_14() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
void MeObject::set_has_reserved_14() {
  _has_bits_[2] |= 0x04000000u;
}
void MeObject::clear_has_reserved_14() {
  _has_bits_[2] &= ~0x04000000u;
}
void MeObject::clear_reserved_14() {
  reserved_14_ = 0;
  clear_has_reserved_14();
}
::google::protobuf::int32 MeObject::reserved_14() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_14)
  return reserved_14_;
}
void MeObject::set_reserved_14(::google::protobuf::int32 value) {
  set_has_reserved_14();
  reserved_14_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_14)
}

// optional float obj_angle_mid = 92;
bool MeObject::has_obj_angle_mid() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
void MeObject::set_has_obj_angle_mid() {
  _has_bits_[2] |= 0x08000000u;
}
void MeObject::clear_has_obj_angle_mid() {
  _has_bits_[2] &= ~0x08000000u;
}
void MeObject::clear_obj_angle_mid() {
  obj_angle_mid_ = 0;
  clear_has_obj_angle_mid();
}
float MeObject::obj_angle_mid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_mid)
  return obj_angle_mid_;
}
void MeObject::set_obj_angle_mid(float value) {
  set_has_obj_angle_mid();
  obj_angle_mid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_mid)
}

// optional bool obj_angle_mid_v = 93;
bool MeObject::has_obj_angle_mid_v() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
void MeObject::set_has_obj_angle_mid_v() {
  _has_bits_[2] |= 0x20000000u;
}
void MeObject::clear_has_obj_angle_mid_v() {
  _has_bits_[2] &= ~0x20000000u;
}
void MeObject::clear_obj_angle_mid_v() {
  obj_angle_mid_v_ = false;
  clear_has_obj_angle_mid_v();
}
bool MeObject::obj_angle_mid_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_mid_v)
  return obj_angle_mid_v_;
}
void MeObject::set_obj_angle_mid_v(bool value) {
  set_has_obj_angle_mid_v();
  obj_angle_mid_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_mid_v)
}

// optional float obj_angle_mid_std = 94;
bool MeObject::has_obj_angle_mid_std() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
void MeObject::set_has_obj_angle_mid_std() {
  _has_bits_[2] |= 0x10000000u;
}
void MeObject::clear_has_obj_angle_mid_std() {
  _has_bits_[2] &= ~0x10000000u;
}
void MeObject::clear_obj_angle_mid_std() {
  obj_angle_mid_std_ = 0;
  clear_has_obj_angle_mid_std();
}
float MeObject::obj_angle_mid_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_mid_std)
  return obj_angle_mid_std_;
}
void MeObject::set_obj_angle_mid_std(float value) {
  set_has_obj_angle_mid_std();
  obj_angle_mid_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_mid_std)
}

// optional bool obj_is_in_drivable_area = 95;
bool MeObject::has_obj_is_in_drivable_area() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
void MeObject::set_has_obj_is_in_drivable_area() {
  _has_bits_[2] |= 0x40000000u;
}
void MeObject::clear_has_obj_is_in_drivable_area() {
  _has_bits_[2] &= ~0x40000000u;
}
void MeObject::clear_obj_is_in_drivable_area() {
  obj_is_in_drivable_area_ = false;
  clear_has_obj_is_in_drivable_area();
}
bool MeObject::obj_is_in_drivable_area() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_in_drivable_area)
  return obj_is_in_drivable_area_;
}
void MeObject::set_obj_is_in_drivable_area(bool value) {
  set_has_obj_is_in_drivable_area();
  obj_is_in_drivable_area_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_in_drivable_area)
}

// optional bool obj_is_in_drivable_area_v = 96;
bool MeObject::has_obj_is_in_drivable_area_v() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
void MeObject::set_has_obj_is_in_drivable_area_v() {
  _has_bits_[2] |= 0x80000000u;
}
void MeObject::clear_has_obj_is_in_drivable_area_v() {
  _has_bits_[2] &= ~0x80000000u;
}
void MeObject::clear_obj_is_in_drivable_area_v() {
  obj_is_in_drivable_area_v_ = false;
  clear_has_obj_is_in_drivable_area_v();
}
bool MeObject::obj_is_in_drivable_area_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_in_drivable_area_v)
  return obj_is_in_drivable_area_v_;
}
void MeObject::set_obj_is_in_drivable_area_v(bool value) {
  set_has_obj_is_in_drivable_area_v();
  obj_is_in_drivable_area_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_in_drivable_area_v)
}

// optional bool obj_is_veryclose = 97;
bool MeObject::has_obj_is_veryclose() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
void MeObject::set_has_obj_is_veryclose() {
  _has_bits_[3] |= 0x00000001u;
}
void MeObject::clear_has_obj_is_veryclose() {
  _has_bits_[3] &= ~0x00000001u;
}
void MeObject::clear_obj_is_veryclose() {
  obj_is_veryclose_ = false;
  clear_has_obj_is_veryclose();
}
bool MeObject::obj_is_veryclose() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_veryclose)
  return obj_is_veryclose_;
}
void MeObject::set_obj_is_veryclose(bool value) {
  set_has_obj_is_veryclose();
  obj_is_veryclose_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_veryclose)
}

// optional bool obj_is_veryclose_v = 98;
bool MeObject::has_obj_is_veryclose_v() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
void MeObject::set_has_obj_is_veryclose_v() {
  _has_bits_[3] |= 0x00000002u;
}
void MeObject::clear_has_obj_is_veryclose_v() {
  _has_bits_[3] &= ~0x00000002u;
}
void MeObject::clear_obj_is_veryclose_v() {
  obj_is_veryclose_v_ = false;
  clear_has_obj_is_veryclose_v();
}
bool MeObject::obj_is_veryclose_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_veryclose_v)
  return obj_is_veryclose_v_;
}
void MeObject::set_obj_is_veryclose_v(bool value) {
  set_has_obj_is_veryclose_v();
  obj_is_veryclose_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_veryclose_v)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLDCommon::kSldZeroByteFieldNumber;
const int SLDCommon::kSldProtocolVersionFieldNumber;
const int SLDCommon::kSldSyncIdFieldNumber;
const int SLDCommon::kSldNumOfLanesCloseLeftFieldNumber;
const int SLDCommon::kSldNumOfLanesCloseRightFieldNumber;
const int SLDCommon::kReserved1FieldNumber;
const int SLDCommon::kSldNumOfLanesFarLeftFieldNumber;
const int SLDCommon::kSldNumOfLanesFarRightFieldNumber;
const int SLDCommon::kSldHasShoulderRightCloseFieldNumber;
const int SLDCommon::kSldShoulderRightWidthCloseFieldNumber;
const int SLDCommon::kSldHasShoulderRightFarFieldNumber;
const int SLDCommon::kSldShoulderRightWidthFarFieldNumber;
const int SLDCommon::kSldHeaderBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLDCommon::SLDCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.SLDCommon)
}
SLDCommon::SLDCommon(const SLDCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sld_zero_byte_, &from.sld_zero_byte_,
    reinterpret_cast<char*>(&sld_header_buffer_) -
    reinterpret_cast<char*>(&sld_zero_byte_) + sizeof(sld_header_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.SLDCommon)
}

void SLDCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sld_zero_byte_, 0, reinterpret_cast<char*>(&sld_header_buffer_) -
    reinterpret_cast<char*>(&sld_zero_byte_) + sizeof(sld_header_buffer_));
}

SLDCommon::~SLDCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.SLDCommon)
  SharedDtor();
}

void SLDCommon::SharedDtor() {
}

void SLDCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SLDCommon& SLDCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLDCommon* SLDCommon::New(::google::protobuf::Arena* arena) const {
  SLDCommon* n = new SLDCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLDCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.SLDCommon)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&sld_zero_byte_, 0, reinterpret_cast<char*>(&sld_num_of_lanes_far_right_) -
      reinterpret_cast<char*>(&sld_zero_byte_) + sizeof(sld_num_of_lanes_far_right_));
  }
  if (_has_bits_[8 / 32] & 7936u) {
    ::memset(&sld_shoulder_right_width_close_, 0, reinterpret_cast<char*>(&sld_header_buffer_) -
      reinterpret_cast<char*>(&sld_shoulder_right_width_close_) + sizeof(sld_header_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SLDCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.SLDCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sld_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sld_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sld_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sld_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_num_of_lanes_close_left = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sld_num_of_lanes_close_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_num_of_lanes_close_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_num_of_lanes_close_right = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sld_num_of_lanes_close_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_num_of_lanes_close_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_num_of_lanes_far_left = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sld_num_of_lanes_far_left();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_num_of_lanes_far_left_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_num_of_lanes_far_right = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_sld_num_of_lanes_far_right();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_num_of_lanes_far_right_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sld_has_shoulder_right_close = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_sld_has_shoulder_right_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sld_has_shoulder_right_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sld_shoulder_right_width_close = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_sld_shoulder_right_width_close();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sld_shoulder_right_width_close_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sld_has_shoulder_right_far = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_sld_has_shoulder_right_far();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sld_has_shoulder_right_far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sld_shoulder_right_width_far = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_sld_shoulder_right_width_far();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sld_shoulder_right_width_far_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_header_buffer = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_sld_header_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_header_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.SLDCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.SLDCommon)
  return false;
#undef DO_
}

void SLDCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.SLDCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sld_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sld_zero_byte(), output);
  }

  // optional int32 sld_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sld_protocol_version(), output);
  }

  // optional int32 sld_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sld_sync_id(), output);
  }

  // optional int32 sld_num_of_lanes_close_left = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sld_num_of_lanes_close_left(), output);
  }

  // optional int32 sld_num_of_lanes_close_right = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sld_num_of_lanes_close_right(), output);
  }

  // optional int32 reserved_1 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reserved_1(), output);
  }

  // optional int32 sld_num_of_lanes_far_left = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sld_num_of_lanes_far_left(), output);
  }

  // optional int32 sld_num_of_lanes_far_right = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sld_num_of_lanes_far_right(), output);
  }

  // optional bool sld_has_shoulder_right_close = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sld_has_shoulder_right_close(), output);
  }

  // optional float sld_shoulder_right_width_close = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->sld_shoulder_right_width_close(), output);
  }

  // optional bool sld_has_shoulder_right_far = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->sld_has_shoulder_right_far(), output);
  }

  // optional float sld_shoulder_right_width_far = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->sld_shoulder_right_width_far(), output);
  }

  // optional int32 sld_header_buffer = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->sld_header_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.SLDCommon)
}

size_t SLDCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.SLDCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 sld_zero_byte = 1;
    if (has_sld_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_zero_byte());
    }

    // optional int32 sld_protocol_version = 2;
    if (has_sld_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_protocol_version());
    }

    // optional int32 sld_sync_id = 3;
    if (has_sld_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_sync_id());
    }

    // optional int32 sld_num_of_lanes_close_left = 4;
    if (has_sld_num_of_lanes_close_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_num_of_lanes_close_left());
    }

    // optional int32 sld_num_of_lanes_close_right = 5;
    if (has_sld_num_of_lanes_close_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_num_of_lanes_close_right());
    }

    // optional int32 reserved_1 = 6;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional int32 sld_num_of_lanes_far_left = 7;
    if (has_sld_num_of_lanes_far_left()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_num_of_lanes_far_left());
    }

    // optional int32 sld_num_of_lanes_far_right = 8;
    if (has_sld_num_of_lanes_far_right()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_num_of_lanes_far_right());
    }

  }
  if (_has_bits_[8 / 32] & 7936u) {
    // optional float sld_shoulder_right_width_close = 10;
    if (has_sld_shoulder_right_width_close()) {
      total_size += 1 + 4;
    }

    // optional bool sld_has_shoulder_right_close = 9;
    if (has_sld_has_shoulder_right_close()) {
      total_size += 1 + 1;
    }

    // optional bool sld_has_shoulder_right_far = 11;
    if (has_sld_has_shoulder_right_far()) {
      total_size += 1 + 1;
    }

    // optional float sld_shoulder_right_width_far = 12;
    if (has_sld_shoulder_right_width_far()) {
      total_size += 1 + 4;
    }

    // optional int32 sld_header_buffer = 13;
    if (has_sld_header_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_header_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLDCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SLDCommon*>(&from));
}

void SLDCommon::MergeFrom(const SLDCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.SLDCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sld_zero_byte_ = from.sld_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      sld_protocol_version_ = from.sld_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sld_sync_id_ = from.sld_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      sld_num_of_lanes_close_left_ = from.sld_num_of_lanes_close_left_;
    }
    if (cached_has_bits & 0x00000010u) {
      sld_num_of_lanes_close_right_ = from.sld_num_of_lanes_close_right_;
    }
    if (cached_has_bits & 0x00000020u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000040u) {
      sld_num_of_lanes_far_left_ = from.sld_num_of_lanes_far_left_;
    }
    if (cached_has_bits & 0x00000080u) {
      sld_num_of_lanes_far_right_ = from.sld_num_of_lanes_far_right_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 7936u) {
    if (cached_has_bits & 0x00000100u) {
      sld_shoulder_right_width_close_ = from.sld_shoulder_right_width_close_;
    }
    if (cached_has_bits & 0x00000200u) {
      sld_has_shoulder_right_close_ = from.sld_has_shoulder_right_close_;
    }
    if (cached_has_bits & 0x00000400u) {
      sld_has_shoulder_right_far_ = from.sld_has_shoulder_right_far_;
    }
    if (cached_has_bits & 0x00000800u) {
      sld_shoulder_right_width_far_ = from.sld_shoulder_right_width_far_;
    }
    if (cached_has_bits & 0x00001000u) {
      sld_header_buffer_ = from.sld_header_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SLDCommon::CopyFrom(const SLDCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.SLDCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLDCommon::IsInitialized() const {
  return true;
}

void SLDCommon::Swap(SLDCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLDCommon::InternalSwap(SLDCommon* other) {
  std::swap(sld_zero_byte_, other->sld_zero_byte_);
  std::swap(sld_protocol_version_, other->sld_protocol_version_);
  std::swap(sld_sync_id_, other->sld_sync_id_);
  std::swap(sld_num_of_lanes_close_left_, other->sld_num_of_lanes_close_left_);
  std::swap(sld_num_of_lanes_close_right_, other->sld_num_of_lanes_close_right_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(sld_num_of_lanes_far_left_, other->sld_num_of_lanes_far_left_);
  std::swap(sld_num_of_lanes_far_right_, other->sld_num_of_lanes_far_right_);
  std::swap(sld_shoulder_right_width_close_, other->sld_shoulder_right_width_close_);
  std::swap(sld_has_shoulder_right_close_, other->sld_has_shoulder_right_close_);
  std::swap(sld_has_shoulder_right_far_, other->sld_has_shoulder_right_far_);
  std::swap(sld_shoulder_right_width_far_, other->sld_shoulder_right_width_far_);
  std::swap(sld_header_buffer_, other->sld_header_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SLDCommon::GetTypeName() const {
  return "atd.meprocess.SLDCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLDCommon

// optional int32 sld_zero_byte = 1;
bool SLDCommon::has_sld_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLDCommon::set_has_sld_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void SLDCommon::clear_has_sld_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLDCommon::clear_sld_zero_byte() {
  sld_zero_byte_ = 0;
  clear_has_sld_zero_byte();
}
::google::protobuf::int32 SLDCommon::sld_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_zero_byte)
  return sld_zero_byte_;
}
void SLDCommon::set_sld_zero_byte(::google::protobuf::int32 value) {
  set_has_sld_zero_byte();
  sld_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_zero_byte)
}

// optional int32 sld_protocol_version = 2;
bool SLDCommon::has_sld_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SLDCommon::set_has_sld_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void SLDCommon::clear_has_sld_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void SLDCommon::clear_sld_protocol_version() {
  sld_protocol_version_ = 0;
  clear_has_sld_protocol_version();
}
::google::protobuf::int32 SLDCommon::sld_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_protocol_version)
  return sld_protocol_version_;
}
void SLDCommon::set_sld_protocol_version(::google::protobuf::int32 value) {
  set_has_sld_protocol_version();
  sld_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_protocol_version)
}

// optional int32 sld_sync_id = 3;
bool SLDCommon::has_sld_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SLDCommon::set_has_sld_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SLDCommon::clear_has_sld_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SLDCommon::clear_sld_sync_id() {
  sld_sync_id_ = 0;
  clear_has_sld_sync_id();
}
::google::protobuf::int32 SLDCommon::sld_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_sync_id)
  return sld_sync_id_;
}
void SLDCommon::set_sld_sync_id(::google::protobuf::int32 value) {
  set_has_sld_sync_id();
  sld_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_sync_id)
}

// optional int32 sld_num_of_lanes_close_left = 4;
bool SLDCommon::has_sld_num_of_lanes_close_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SLDCommon::set_has_sld_num_of_lanes_close_left() {
  _has_bits_[0] |= 0x00000008u;
}
void SLDCommon::clear_has_sld_num_of_lanes_close_left() {
  _has_bits_[0] &= ~0x00000008u;
}
void SLDCommon::clear_sld_num_of_lanes_close_left() {
  sld_num_of_lanes_close_left_ = 0;
  clear_has_sld_num_of_lanes_close_left();
}
::google::protobuf::int32 SLDCommon::sld_num_of_lanes_close_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_close_left)
  return sld_num_of_lanes_close_left_;
}
void SLDCommon::set_sld_num_of_lanes_close_left(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_close_left();
  sld_num_of_lanes_close_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_close_left)
}

// optional int32 sld_num_of_lanes_close_right = 5;
bool SLDCommon::has_sld_num_of_lanes_close_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SLDCommon::set_has_sld_num_of_lanes_close_right() {
  _has_bits_[0] |= 0x00000010u;
}
void SLDCommon::clear_has_sld_num_of_lanes_close_right() {
  _has_bits_[0] &= ~0x00000010u;
}
void SLDCommon::clear_sld_num_of_lanes_close_right() {
  sld_num_of_lanes_close_right_ = 0;
  clear_has_sld_num_of_lanes_close_right();
}
::google::protobuf::int32 SLDCommon::sld_num_of_lanes_close_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_close_right)
  return sld_num_of_lanes_close_right_;
}
void SLDCommon::set_sld_num_of_lanes_close_right(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_close_right();
  sld_num_of_lanes_close_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_close_right)
}

// optional int32 reserved_1 = 6;
bool SLDCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SLDCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000020u;
}
void SLDCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000020u;
}
void SLDCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 SLDCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.reserved_1)
  return reserved_1_;
}
void SLDCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.reserved_1)
}

// optional int32 sld_num_of_lanes_far_left = 7;
bool SLDCommon::has_sld_num_of_lanes_far_left() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SLDCommon::set_has_sld_num_of_lanes_far_left() {
  _has_bits_[0] |= 0x00000040u;
}
void SLDCommon::clear_has_sld_num_of_lanes_far_left() {
  _has_bits_[0] &= ~0x00000040u;
}
void SLDCommon::clear_sld_num_of_lanes_far_left() {
  sld_num_of_lanes_far_left_ = 0;
  clear_has_sld_num_of_lanes_far_left();
}
::google::protobuf::int32 SLDCommon::sld_num_of_lanes_far_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_far_left)
  return sld_num_of_lanes_far_left_;
}
void SLDCommon::set_sld_num_of_lanes_far_left(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_far_left();
  sld_num_of_lanes_far_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_far_left)
}

// optional int32 sld_num_of_lanes_far_right = 8;
bool SLDCommon::has_sld_num_of_lanes_far_right() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SLDCommon::set_has_sld_num_of_lanes_far_right() {
  _has_bits_[0] |= 0x00000080u;
}
void SLDCommon::clear_has_sld_num_of_lanes_far_right() {
  _has_bits_[0] &= ~0x00000080u;
}
void SLDCommon::clear_sld_num_of_lanes_far_right() {
  sld_num_of_lanes_far_right_ = 0;
  clear_has_sld_num_of_lanes_far_right();
}
::google::protobuf::int32 SLDCommon::sld_num_of_lanes_far_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_far_right)
  return sld_num_of_lanes_far_right_;
}
void SLDCommon::set_sld_num_of_lanes_far_right(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_far_right();
  sld_num_of_lanes_far_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_far_right)
}

// optional bool sld_has_shoulder_right_close = 9;
bool SLDCommon::has_sld_has_shoulder_right_close() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SLDCommon::set_has_sld_has_shoulder_right_close() {
  _has_bits_[0] |= 0x00000200u;
}
void SLDCommon::clear_has_sld_has_shoulder_right_close() {
  _has_bits_[0] &= ~0x00000200u;
}
void SLDCommon::clear_sld_has_shoulder_right_close() {
  sld_has_shoulder_right_close_ = false;
  clear_has_sld_has_shoulder_right_close();
}
bool SLDCommon::sld_has_shoulder_right_close() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_has_shoulder_right_close)
  return sld_has_shoulder_right_close_;
}
void SLDCommon::set_sld_has_shoulder_right_close(bool value) {
  set_has_sld_has_shoulder_right_close();
  sld_has_shoulder_right_close_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_has_shoulder_right_close)
}

// optional float sld_shoulder_right_width_close = 10;
bool SLDCommon::has_sld_shoulder_right_width_close() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SLDCommon::set_has_sld_shoulder_right_width_close() {
  _has_bits_[0] |= 0x00000100u;
}
void SLDCommon::clear_has_sld_shoulder_right_width_close() {
  _has_bits_[0] &= ~0x00000100u;
}
void SLDCommon::clear_sld_shoulder_right_width_close() {
  sld_shoulder_right_width_close_ = 0;
  clear_has_sld_shoulder_right_width_close();
}
float SLDCommon::sld_shoulder_right_width_close() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_shoulder_right_width_close)
  return sld_shoulder_right_width_close_;
}
void SLDCommon::set_sld_shoulder_right_width_close(float value) {
  set_has_sld_shoulder_right_width_close();
  sld_shoulder_right_width_close_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_shoulder_right_width_close)
}

// optional bool sld_has_shoulder_right_far = 11;
bool SLDCommon::has_sld_has_shoulder_right_far() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SLDCommon::set_has_sld_has_shoulder_right_far() {
  _has_bits_[0] |= 0x00000400u;
}
void SLDCommon::clear_has_sld_has_shoulder_right_far() {
  _has_bits_[0] &= ~0x00000400u;
}
void SLDCommon::clear_sld_has_shoulder_right_far() {
  sld_has_shoulder_right_far_ = false;
  clear_has_sld_has_shoulder_right_far();
}
bool SLDCommon::sld_has_shoulder_right_far() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_has_shoulder_right_far)
  return sld_has_shoulder_right_far_;
}
void SLDCommon::set_sld_has_shoulder_right_far(bool value) {
  set_has_sld_has_shoulder_right_far();
  sld_has_shoulder_right_far_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_has_shoulder_right_far)
}

// optional float sld_shoulder_right_width_far = 12;
bool SLDCommon::has_sld_shoulder_right_width_far() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SLDCommon::set_has_sld_shoulder_right_width_far() {
  _has_bits_[0] |= 0x00000800u;
}
void SLDCommon::clear_has_sld_shoulder_right_width_far() {
  _has_bits_[0] &= ~0x00000800u;
}
void SLDCommon::clear_sld_shoulder_right_width_far() {
  sld_shoulder_right_width_far_ = 0;
  clear_has_sld_shoulder_right_width_far();
}
float SLDCommon::sld_shoulder_right_width_far() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_shoulder_right_width_far)
  return sld_shoulder_right_width_far_;
}
void SLDCommon::set_sld_shoulder_right_width_far(float value) {
  set_has_sld_shoulder_right_width_far();
  sld_shoulder_right_width_far_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_shoulder_right_width_far)
}

// optional int32 sld_header_buffer = 13;
bool SLDCommon::has_sld_header_buffer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SLDCommon::set_has_sld_header_buffer() {
  _has_bits_[0] |= 0x00001000u;
}
void SLDCommon::clear_has_sld_header_buffer() {
  _has_bits_[0] &= ~0x00001000u;
}
void SLDCommon::clear_sld_header_buffer() {
  sld_header_buffer_ = 0;
  clear_has_sld_header_buffer();
}
::google::protobuf::int32 SLDCommon::sld_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_header_buffer)
  return sld_header_buffer_;
}
void SLDCommon::set_sld_header_buffer(::google::protobuf::int32 value) {
  set_has_sld_header_buffer();
  sld_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_header_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_SL_Descrip::kHeaderFieldNumber;
const int Dt_Record_SL_Descrip::kReservedmsgFieldNumber;
const int Dt_Record_SL_Descrip::kStsldcommonFieldNumber;
const int Dt_Record_SL_Descrip::kDtArray10SldFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_SL_Descrip::Dt_Record_SL_Descrip()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_SL_Descrip)
}
Dt_Record_SL_Descrip::Dt_Record_SL_Descrip(const Dt_Record_SL_Descrip& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_10_sld_(from.dt_array_10_sld_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stsldcommon()) {
    stsldcommon_ = new ::atd::meprocess::SLDCommon(*from.stsldcommon_);
  } else {
    stsldcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_SL_Descrip)
}

void Dt_Record_SL_Descrip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stsldcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stsldcommon_));
}

Dt_Record_SL_Descrip::~Dt_Record_SL_Descrip() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_SL_Descrip)
  SharedDtor();
}

void Dt_Record_SL_Descrip::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stsldcommon_;
  }
}

void Dt_Record_SL_Descrip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_SL_Descrip& Dt_Record_SL_Descrip::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_SL_Descrip* Dt_Record_SL_Descrip::New(::google::protobuf::Arena* arena) const {
  Dt_Record_SL_Descrip* n = new Dt_Record_SL_Descrip;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_SL_Descrip::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_SL_Descrip)
  dt_array_10_sld_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stsldcommon()) {
      GOOGLE_DCHECK(stsldcommon_ != NULL);
      stsldcommon_->::atd::meprocess::SLDCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_SL_Descrip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_SL_Descrip)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SLDCommon stsldcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stsldcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.SLD dt_array_10_sld = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_10_sld()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_SL_Descrip)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_SL_Descrip)
  return false;
#undef DO_
}

void Dt_Record_SL_Descrip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_SL_Descrip)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.SLDCommon stsldcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stsldcommon_, output);
  }

  // repeated .atd.meprocess.SLD dt_array_10_sld = 4;
  for (unsigned int i = 0, n = this->dt_array_10_sld_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_10_sld(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_SL_Descrip)
}

size_t Dt_Record_SL_Descrip::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_SL_Descrip)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.SLD dt_array_10_sld = 4;
  {
    unsigned int count = this->dt_array_10_sld_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_10_sld(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.SLDCommon stsldcommon = 3;
    if (has_stsldcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stsldcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_SL_Descrip::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_SL_Descrip*>(&from));
}

void Dt_Record_SL_Descrip::MergeFrom(const Dt_Record_SL_Descrip& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_SL_Descrip)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_10_sld_.MergeFrom(from.dt_array_10_sld_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stsldcommon()->::atd::meprocess::SLDCommon::MergeFrom(from.stsldcommon());
    }
  }
}

void Dt_Record_SL_Descrip::CopyFrom(const Dt_Record_SL_Descrip& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_SL_Descrip)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_SL_Descrip::IsInitialized() const {
  return true;
}

void Dt_Record_SL_Descrip::Swap(Dt_Record_SL_Descrip* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_SL_Descrip::InternalSwap(Dt_Record_SL_Descrip* other) {
  dt_array_10_sld_.InternalSwap(&other->dt_array_10_sld_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stsldcommon_, other->stsldcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_SL_Descrip::GetTypeName() const {
  return "atd.meprocess.Dt_Record_SL_Descrip";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_SL_Descrip

// optional .atd.common.Header header = 1;
bool Dt_Record_SL_Descrip::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_SL_Descrip::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_SL_Descrip::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_SL_Descrip::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_SL_Descrip::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_SL_Descrip::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.header)
  return header_;
}
::atd::common::Header* Dt_Record_SL_Descrip::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SL_Descrip.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_SL_Descrip::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SL_Descrip.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_SL_Descrip::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_SL_Descrip::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_SL_Descrip::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_SL_Descrip::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_SL_Descrip::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_SL_Descrip::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_SL_Descrip::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_SL_Descrip::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
}

// optional .atd.meprocess.SLDCommon stsldcommon = 3;
bool Dt_Record_SL_Descrip::has_stsldcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_SL_Descrip::set_has_stsldcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_SL_Descrip::clear_has_stsldcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_SL_Descrip::clear_stsldcommon() {
  if (stsldcommon_ != NULL) stsldcommon_->::atd::meprocess::SLDCommon::Clear();
  clear_has_stsldcommon();
}
const ::atd::meprocess::SLDCommon& Dt_Record_SL_Descrip::stsldcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
  return stsldcommon_ != NULL ? *stsldcommon_
                         : *::atd::meprocess::SLDCommon::internal_default_instance();
}
::atd::meprocess::SLDCommon* Dt_Record_SL_Descrip::mutable_stsldcommon() {
  set_has_stsldcommon();
  if (stsldcommon_ == NULL) {
    stsldcommon_ = new ::atd::meprocess::SLDCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
  return stsldcommon_;
}
::atd::meprocess::SLDCommon* Dt_Record_SL_Descrip::release_stsldcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
  clear_has_stsldcommon();
  ::atd::meprocess::SLDCommon* temp = stsldcommon_;
  stsldcommon_ = NULL;
  return temp;
}
void Dt_Record_SL_Descrip::set_allocated_stsldcommon(::atd::meprocess::SLDCommon* stsldcommon) {
  delete stsldcommon_;
  stsldcommon_ = stsldcommon;
  if (stsldcommon) {
    set_has_stsldcommon();
  } else {
    clear_has_stsldcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
}

// repeated .atd.meprocess.SLD dt_array_10_sld = 4;
int Dt_Record_SL_Descrip::dt_array_10_sld_size() const {
  return dt_array_10_sld_.size();
}
void Dt_Record_SL_Descrip::clear_dt_array_10_sld() {
  dt_array_10_sld_.Clear();
}
const ::atd::meprocess::SLD& Dt_Record_SL_Descrip::dt_array_10_sld(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_.Get(index);
}
::atd::meprocess::SLD* Dt_Record_SL_Descrip::mutable_dt_array_10_sld(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_.Mutable(index);
}
::atd::meprocess::SLD* Dt_Record_SL_Descrip::add_dt_array_10_sld() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::SLD >*
Dt_Record_SL_Descrip::mutable_dt_array_10_sld() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return &dt_array_10_sld_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SLD >&
Dt_Record_SL_Descrip::dt_array_10_sld() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLD::kSldExistenceProbability0FieldNumber;
const int SLD::kSldNonexistenceProbability0FieldNumber;
const int SLD::kSldRole0FieldNumber;
const int SLD::kSldView0FieldNumber;
const int SLD::kSldOrientation0FieldNumber;
const int SLD::kSldOrientationProbability0FieldNumber;
const int SLD::kSldDirection0FieldNumber;
const int SLD::kReserved2FieldNumber;
const int SLD::kSldDirectionProbability0FieldNumber;
const int SLD::kSldType0FieldNumber;
const int SLD::kSldTypeProbability0FieldNumber;
const int SLD::kSldBuffer0FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLD::SLD()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.SLD)
}
SLD::SLD(const SLD& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sld_existence_probability_0_, &from.sld_existence_probability_0_,
    reinterpret_cast<char*>(&sld_buffer_0_) -
    reinterpret_cast<char*>(&sld_existence_probability_0_) + sizeof(sld_buffer_0_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.SLD)
}

void SLD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sld_existence_probability_0_, 0, reinterpret_cast<char*>(&sld_buffer_0_) -
    reinterpret_cast<char*>(&sld_existence_probability_0_) + sizeof(sld_buffer_0_));
}

SLD::~SLD() {
  // @@protoc_insertion_point(destructor:atd.meprocess.SLD)
  SharedDtor();
}

void SLD::SharedDtor() {
}

void SLD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SLD& SLD::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLD* SLD::New(::google::protobuf::Arena* arena) const {
  SLD* n = new SLD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLD::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.SLD)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&sld_existence_probability_0_, 0, reinterpret_cast<char*>(&reserved_2_) -
      reinterpret_cast<char*>(&sld_existence_probability_0_) + sizeof(reserved_2_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&sld_direction_probability_0_, 0, reinterpret_cast<char*>(&sld_buffer_0_) -
      reinterpret_cast<char*>(&sld_direction_probability_0_) + sizeof(sld_buffer_0_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SLD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.SLD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float sld_existence_probability_0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_sld_existence_probability_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sld_existence_probability_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sld_nonexistence_probability_0 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_sld_nonexistence_probability_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sld_nonexistence_probability_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SLD.Sld_role_0Type sld_role_0 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::SLD_Sld_role_0Type_IsValid(value)) {
            set_sld_role_0(static_cast< ::atd::meprocess::SLD_Sld_role_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SLD.Sld_view_0Type sld_view_0 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::SLD_Sld_view_0Type_IsValid(value)) {
            set_sld_view_0(static_cast< ::atd::meprocess::SLD_Sld_view_0Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_orientation_0 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sld_orientation_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_orientation_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sld_orientation_probability_0 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_sld_orientation_probability_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sld_orientation_probability_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_direction_0 = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sld_direction_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_direction_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_2 = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sld_direction_probability_0 = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_sld_direction_probability_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sld_direction_probability_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_type_0 = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_sld_type_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_type_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sld_type_probability_0 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_sld_type_probability_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sld_type_probability_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sld_buffer_0 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_sld_buffer_0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sld_buffer_0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.SLD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.SLD)
  return false;
#undef DO_
}

void SLD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.SLD)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float sld_existence_probability_0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->sld_existence_probability_0(), output);
  }

  // optional float sld_nonexistence_probability_0 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->sld_nonexistence_probability_0(), output);
  }

  // optional .atd.meprocess.SLD.Sld_role_0Type sld_role_0 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sld_role_0(), output);
  }

  // optional .atd.meprocess.SLD.Sld_view_0Type sld_view_0 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sld_view_0(), output);
  }

  // optional int32 sld_orientation_0 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sld_orientation_0(), output);
  }

  // optional float sld_orientation_probability_0 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sld_orientation_probability_0(), output);
  }

  // optional int32 sld_direction_0 = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sld_direction_0(), output);
  }

  // optional bool reserved_2 = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->reserved_2(), output);
  }

  // optional float sld_direction_probability_0 = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->sld_direction_probability_0(), output);
  }

  // optional int32 sld_type_0 = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sld_type_0(), output);
  }

  // optional float sld_type_probability_0 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sld_type_probability_0(), output);
  }

  // optional int32 sld_buffer_0 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->sld_buffer_0(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.SLD)
}

size_t SLD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.SLD)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional float sld_existence_probability_0 = 1;
    if (has_sld_existence_probability_0()) {
      total_size += 1 + 4;
    }

    // optional float sld_nonexistence_probability_0 = 2;
    if (has_sld_nonexistence_probability_0()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.SLD.Sld_role_0Type sld_role_0 = 3;
    if (has_sld_role_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sld_role_0());
    }

    // optional .atd.meprocess.SLD.Sld_view_0Type sld_view_0 = 4;
    if (has_sld_view_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sld_view_0());
    }

    // optional int32 sld_orientation_0 = 5;
    if (has_sld_orientation_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_orientation_0());
    }

    // optional float sld_orientation_probability_0 = 6;
    if (has_sld_orientation_probability_0()) {
      total_size += 1 + 4;
    }

    // optional int32 sld_direction_0 = 7;
    if (has_sld_direction_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_direction_0());
    }

    // optional bool reserved_2 = 8;
    if (has_reserved_2()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float sld_direction_probability_0 = 9;
    if (has_sld_direction_probability_0()) {
      total_size += 1 + 4;
    }

    // optional int32 sld_type_0 = 10;
    if (has_sld_type_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_type_0());
    }

    // optional float sld_type_probability_0 = 11;
    if (has_sld_type_probability_0()) {
      total_size += 1 + 4;
    }

    // optional int32 sld_buffer_0 = 12;
    if (has_sld_buffer_0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sld_buffer_0());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLD::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SLD*>(&from));
}

void SLD::MergeFrom(const SLD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.SLD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sld_existence_probability_0_ = from.sld_existence_probability_0_;
    }
    if (cached_has_bits & 0x00000002u) {
      sld_nonexistence_probability_0_ = from.sld_nonexistence_probability_0_;
    }
    if (cached_has_bits & 0x00000004u) {
      sld_role_0_ = from.sld_role_0_;
    }
    if (cached_has_bits & 0x00000008u) {
      sld_view_0_ = from.sld_view_0_;
    }
    if (cached_has_bits & 0x00000010u) {
      sld_orientation_0_ = from.sld_orientation_0_;
    }
    if (cached_has_bits & 0x00000020u) {
      sld_orientation_probability_0_ = from.sld_orientation_probability_0_;
    }
    if (cached_has_bits & 0x00000040u) {
      sld_direction_0_ = from.sld_direction_0_;
    }
    if (cached_has_bits & 0x00000080u) {
      reserved_2_ = from.reserved_2_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      sld_direction_probability_0_ = from.sld_direction_probability_0_;
    }
    if (cached_has_bits & 0x00000200u) {
      sld_type_0_ = from.sld_type_0_;
    }
    if (cached_has_bits & 0x00000400u) {
      sld_type_probability_0_ = from.sld_type_probability_0_;
    }
    if (cached_has_bits & 0x00000800u) {
      sld_buffer_0_ = from.sld_buffer_0_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SLD::CopyFrom(const SLD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.SLD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLD::IsInitialized() const {
  return true;
}

void SLD::Swap(SLD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLD::InternalSwap(SLD* other) {
  std::swap(sld_existence_probability_0_, other->sld_existence_probability_0_);
  std::swap(sld_nonexistence_probability_0_, other->sld_nonexistence_probability_0_);
  std::swap(sld_role_0_, other->sld_role_0_);
  std::swap(sld_view_0_, other->sld_view_0_);
  std::swap(sld_orientation_0_, other->sld_orientation_0_);
  std::swap(sld_orientation_probability_0_, other->sld_orientation_probability_0_);
  std::swap(sld_direction_0_, other->sld_direction_0_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(sld_direction_probability_0_, other->sld_direction_probability_0_);
  std::swap(sld_type_0_, other->sld_type_0_);
  std::swap(sld_type_probability_0_, other->sld_type_probability_0_);
  std::swap(sld_buffer_0_, other->sld_buffer_0_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SLD::GetTypeName() const {
  return "atd.meprocess.SLD";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLD

// optional float sld_existence_probability_0 = 1;
bool SLD::has_sld_existence_probability_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLD::set_has_sld_existence_probability_0() {
  _has_bits_[0] |= 0x00000001u;
}
void SLD::clear_has_sld_existence_probability_0() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLD::clear_sld_existence_probability_0() {
  sld_existence_probability_0_ = 0;
  clear_has_sld_existence_probability_0();
}
float SLD::sld_existence_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_existence_probability_0)
  return sld_existence_probability_0_;
}
void SLD::set_sld_existence_probability_0(float value) {
  set_has_sld_existence_probability_0();
  sld_existence_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_existence_probability_0)
}

// optional float sld_nonexistence_probability_0 = 2;
bool SLD::has_sld_nonexistence_probability_0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SLD::set_has_sld_nonexistence_probability_0() {
  _has_bits_[0] |= 0x00000002u;
}
void SLD::clear_has_sld_nonexistence_probability_0() {
  _has_bits_[0] &= ~0x00000002u;
}
void SLD::clear_sld_nonexistence_probability_0() {
  sld_nonexistence_probability_0_ = 0;
  clear_has_sld_nonexistence_probability_0();
}
float SLD::sld_nonexistence_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_nonexistence_probability_0)
  return sld_nonexistence_probability_0_;
}
void SLD::set_sld_nonexistence_probability_0(float value) {
  set_has_sld_nonexistence_probability_0();
  sld_nonexistence_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_nonexistence_probability_0)
}

// optional .atd.meprocess.SLD.Sld_role_0Type sld_role_0 = 3;
bool SLD::has_sld_role_0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SLD::set_has_sld_role_0() {
  _has_bits_[0] |= 0x00000004u;
}
void SLD::clear_has_sld_role_0() {
  _has_bits_[0] &= ~0x00000004u;
}
void SLD::clear_sld_role_0() {
  sld_role_0_ = 0;
  clear_has_sld_role_0();
}
::atd::meprocess::SLD_Sld_role_0Type SLD::sld_role_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_role_0)
  return static_cast< ::atd::meprocess::SLD_Sld_role_0Type >(sld_role_0_);
}
void SLD::set_sld_role_0(::atd::meprocess::SLD_Sld_role_0Type value) {
  assert(::atd::meprocess::SLD_Sld_role_0Type_IsValid(value));
  set_has_sld_role_0();
  sld_role_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_role_0)
}

// optional .atd.meprocess.SLD.Sld_view_0Type sld_view_0 = 4;
bool SLD::has_sld_view_0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SLD::set_has_sld_view_0() {
  _has_bits_[0] |= 0x00000008u;
}
void SLD::clear_has_sld_view_0() {
  _has_bits_[0] &= ~0x00000008u;
}
void SLD::clear_sld_view_0() {
  sld_view_0_ = 0;
  clear_has_sld_view_0();
}
::atd::meprocess::SLD_Sld_view_0Type SLD::sld_view_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_view_0)
  return static_cast< ::atd::meprocess::SLD_Sld_view_0Type >(sld_view_0_);
}
void SLD::set_sld_view_0(::atd::meprocess::SLD_Sld_view_0Type value) {
  assert(::atd::meprocess::SLD_Sld_view_0Type_IsValid(value));
  set_has_sld_view_0();
  sld_view_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_view_0)
}

// optional int32 sld_orientation_0 = 5;
bool SLD::has_sld_orientation_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SLD::set_has_sld_orientation_0() {
  _has_bits_[0] |= 0x00000010u;
}
void SLD::clear_has_sld_orientation_0() {
  _has_bits_[0] &= ~0x00000010u;
}
void SLD::clear_sld_orientation_0() {
  sld_orientation_0_ = 0;
  clear_has_sld_orientation_0();
}
::google::protobuf::int32 SLD::sld_orientation_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_orientation_0)
  return sld_orientation_0_;
}
void SLD::set_sld_orientation_0(::google::protobuf::int32 value) {
  set_has_sld_orientation_0();
  sld_orientation_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_orientation_0)
}

// optional float sld_orientation_probability_0 = 6;
bool SLD::has_sld_orientation_probability_0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SLD::set_has_sld_orientation_probability_0() {
  _has_bits_[0] |= 0x00000020u;
}
void SLD::clear_has_sld_orientation_probability_0() {
  _has_bits_[0] &= ~0x00000020u;
}
void SLD::clear_sld_orientation_probability_0() {
  sld_orientation_probability_0_ = 0;
  clear_has_sld_orientation_probability_0();
}
float SLD::sld_orientation_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_orientation_probability_0)
  return sld_orientation_probability_0_;
}
void SLD::set_sld_orientation_probability_0(float value) {
  set_has_sld_orientation_probability_0();
  sld_orientation_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_orientation_probability_0)
}

// optional int32 sld_direction_0 = 7;
bool SLD::has_sld_direction_0() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SLD::set_has_sld_direction_0() {
  _has_bits_[0] |= 0x00000040u;
}
void SLD::clear_has_sld_direction_0() {
  _has_bits_[0] &= ~0x00000040u;
}
void SLD::clear_sld_direction_0() {
  sld_direction_0_ = 0;
  clear_has_sld_direction_0();
}
::google::protobuf::int32 SLD::sld_direction_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_direction_0)
  return sld_direction_0_;
}
void SLD::set_sld_direction_0(::google::protobuf::int32 value) {
  set_has_sld_direction_0();
  sld_direction_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_direction_0)
}

// optional bool reserved_2 = 8;
bool SLD::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SLD::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000080u;
}
void SLD::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000080u;
}
void SLD::clear_reserved_2() {
  reserved_2_ = false;
  clear_has_reserved_2();
}
bool SLD::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.reserved_2)
  return reserved_2_;
}
void SLD::set_reserved_2(bool value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.reserved_2)
}

// optional float sld_direction_probability_0 = 9;
bool SLD::has_sld_direction_probability_0() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SLD::set_has_sld_direction_probability_0() {
  _has_bits_[0] |= 0x00000100u;
}
void SLD::clear_has_sld_direction_probability_0() {
  _has_bits_[0] &= ~0x00000100u;
}
void SLD::clear_sld_direction_probability_0() {
  sld_direction_probability_0_ = 0;
  clear_has_sld_direction_probability_0();
}
float SLD::sld_direction_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_direction_probability_0)
  return sld_direction_probability_0_;
}
void SLD::set_sld_direction_probability_0(float value) {
  set_has_sld_direction_probability_0();
  sld_direction_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_direction_probability_0)
}

// optional int32 sld_type_0 = 10;
bool SLD::has_sld_type_0() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SLD::set_has_sld_type_0() {
  _has_bits_[0] |= 0x00000200u;
}
void SLD::clear_has_sld_type_0() {
  _has_bits_[0] &= ~0x00000200u;
}
void SLD::clear_sld_type_0() {
  sld_type_0_ = 0;
  clear_has_sld_type_0();
}
::google::protobuf::int32 SLD::sld_type_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_type_0)
  return sld_type_0_;
}
void SLD::set_sld_type_0(::google::protobuf::int32 value) {
  set_has_sld_type_0();
  sld_type_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_type_0)
}

// optional float sld_type_probability_0 = 11;
bool SLD::has_sld_type_probability_0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SLD::set_has_sld_type_probability_0() {
  _has_bits_[0] |= 0x00000400u;
}
void SLD::clear_has_sld_type_probability_0() {
  _has_bits_[0] &= ~0x00000400u;
}
void SLD::clear_sld_type_probability_0() {
  sld_type_probability_0_ = 0;
  clear_has_sld_type_probability_0();
}
float SLD::sld_type_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_type_probability_0)
  return sld_type_probability_0_;
}
void SLD::set_sld_type_probability_0(float value) {
  set_has_sld_type_probability_0();
  sld_type_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_type_probability_0)
}

// optional int32 sld_buffer_0 = 12;
bool SLD::has_sld_buffer_0() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SLD::set_has_sld_buffer_0() {
  _has_bits_[0] |= 0x00000800u;
}
void SLD::clear_has_sld_buffer_0() {
  _has_bits_[0] &= ~0x00000800u;
}
void SLD::clear_sld_buffer_0() {
  sld_buffer_0_ = 0;
  clear_has_sld_buffer_0();
}
::google::protobuf::int32 SLD::sld_buffer_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_buffer_0)
  return sld_buffer_0_;
}
void SLD::set_sld_buffer_0(::google::protobuf::int32 value) {
  set_has_sld_buffer_0();
  sld_buffer_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_buffer_0)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SLCommon::kSlZeroByteFieldNumber;
const int SLCommon::kSlProtocolVersionFieldNumber;
const int SLCommon::kSlSyncIdFieldNumber;
const int SLCommon::kSlApprovedLinesFieldNumber;
const int SLCommon::kSlHeaderBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SLCommon::SLCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.SLCommon)
}
SLCommon::SLCommon(const SLCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sl_zero_byte_, &from.sl_zero_byte_,
    reinterpret_cast<char*>(&sl_header_buffer_) -
    reinterpret_cast<char*>(&sl_zero_byte_) + sizeof(sl_header_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.SLCommon)
}

void SLCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sl_zero_byte_, 0, reinterpret_cast<char*>(&sl_header_buffer_) -
    reinterpret_cast<char*>(&sl_zero_byte_) + sizeof(sl_header_buffer_));
}

SLCommon::~SLCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.SLCommon)
  SharedDtor();
}

void SLCommon::SharedDtor() {
}

void SLCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SLCommon& SLCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

SLCommon* SLCommon::New(::google::protobuf::Arena* arena) const {
  SLCommon* n = new SLCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SLCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.SLCommon)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&sl_zero_byte_, 0, reinterpret_cast<char*>(&sl_header_buffer_) -
      reinterpret_cast<char*>(&sl_zero_byte_) + sizeof(sl_header_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SLCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.SLCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sl_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sl_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sl_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sl_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sl_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sl_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sl_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sl_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sl_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sl_approved_lines = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sl_approved_lines();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sl_approved_lines_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sl_header_buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sl_header_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sl_header_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.SLCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.SLCommon)
  return false;
#undef DO_
}

void SLCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.SLCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sl_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sl_zero_byte(), output);
  }

  // optional int32 sl_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sl_protocol_version(), output);
  }

  // optional int32 sl_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sl_sync_id(), output);
  }

  // optional int32 sl_approved_lines = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sl_approved_lines(), output);
  }

  // optional int32 sl_header_buffer = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sl_header_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.SLCommon)
}

size_t SLCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.SLCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 sl_zero_byte = 1;
    if (has_sl_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sl_zero_byte());
    }

    // optional int32 sl_protocol_version = 2;
    if (has_sl_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sl_protocol_version());
    }

    // optional int32 sl_sync_id = 3;
    if (has_sl_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sl_sync_id());
    }

    // optional int32 sl_approved_lines = 4;
    if (has_sl_approved_lines()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sl_approved_lines());
    }

    // optional int32 sl_header_buffer = 5;
    if (has_sl_header_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sl_header_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SLCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SLCommon*>(&from));
}

void SLCommon::MergeFrom(const SLCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.SLCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sl_zero_byte_ = from.sl_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      sl_protocol_version_ = from.sl_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sl_sync_id_ = from.sl_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      sl_approved_lines_ = from.sl_approved_lines_;
    }
    if (cached_has_bits & 0x00000010u) {
      sl_header_buffer_ = from.sl_header_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SLCommon::CopyFrom(const SLCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.SLCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SLCommon::IsInitialized() const {
  return true;
}

void SLCommon::Swap(SLCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SLCommon::InternalSwap(SLCommon* other) {
  std::swap(sl_zero_byte_, other->sl_zero_byte_);
  std::swap(sl_protocol_version_, other->sl_protocol_version_);
  std::swap(sl_sync_id_, other->sl_sync_id_);
  std::swap(sl_approved_lines_, other->sl_approved_lines_);
  std::swap(sl_header_buffer_, other->sl_header_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SLCommon::GetTypeName() const {
  return "atd.meprocess.SLCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SLCommon

// optional int32 sl_zero_byte = 1;
bool SLCommon::has_sl_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SLCommon::set_has_sl_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void SLCommon::clear_has_sl_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void SLCommon::clear_sl_zero_byte() {
  sl_zero_byte_ = 0;
  clear_has_sl_zero_byte();
}
::google::protobuf::int32 SLCommon::sl_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_zero_byte)
  return sl_zero_byte_;
}
void SLCommon::set_sl_zero_byte(::google::protobuf::int32 value) {
  set_has_sl_zero_byte();
  sl_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_zero_byte)
}

// optional int32 sl_protocol_version = 2;
bool SLCommon::has_sl_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SLCommon::set_has_sl_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void SLCommon::clear_has_sl_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void SLCommon::clear_sl_protocol_version() {
  sl_protocol_version_ = 0;
  clear_has_sl_protocol_version();
}
::google::protobuf::int32 SLCommon::sl_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_protocol_version)
  return sl_protocol_version_;
}
void SLCommon::set_sl_protocol_version(::google::protobuf::int32 value) {
  set_has_sl_protocol_version();
  sl_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_protocol_version)
}

// optional int32 sl_sync_id = 3;
bool SLCommon::has_sl_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SLCommon::set_has_sl_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SLCommon::clear_has_sl_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SLCommon::clear_sl_sync_id() {
  sl_sync_id_ = 0;
  clear_has_sl_sync_id();
}
::google::protobuf::int32 SLCommon::sl_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_sync_id)
  return sl_sync_id_;
}
void SLCommon::set_sl_sync_id(::google::protobuf::int32 value) {
  set_has_sl_sync_id();
  sl_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_sync_id)
}

// optional int32 sl_approved_lines = 4;
bool SLCommon::has_sl_approved_lines() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SLCommon::set_has_sl_approved_lines() {
  _has_bits_[0] |= 0x00000008u;
}
void SLCommon::clear_has_sl_approved_lines() {
  _has_bits_[0] &= ~0x00000008u;
}
void SLCommon::clear_sl_approved_lines() {
  sl_approved_lines_ = 0;
  clear_has_sl_approved_lines();
}
::google::protobuf::int32 SLCommon::sl_approved_lines() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_approved_lines)
  return sl_approved_lines_;
}
void SLCommon::set_sl_approved_lines(::google::protobuf::int32 value) {
  set_has_sl_approved_lines();
  sl_approved_lines_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_approved_lines)
}

// optional int32 sl_header_buffer = 5;
bool SLCommon::has_sl_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SLCommon::set_has_sl_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
void SLCommon::clear_has_sl_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
void SLCommon::clear_sl_header_buffer() {
  sl_header_buffer_ = 0;
  clear_has_sl_header_buffer();
}
::google::protobuf::int32 SLCommon::sl_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_header_buffer)
  return sl_header_buffer_;
}
void SLCommon::set_sl_header_buffer(::google::protobuf::int32 value) {
  set_has_sl_header_buffer();
  sl_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_header_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_SematicLine::kHeaderFieldNumber;
const int Dt_Record_SematicLine::kReservedmsgFieldNumber;
const int Dt_Record_SematicLine::kStslcommonFieldNumber;
const int Dt_Record_SematicLine::kDtArray10SematiclineFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_SematicLine::Dt_Record_SematicLine()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_SematicLine)
}
Dt_Record_SematicLine::Dt_Record_SematicLine(const Dt_Record_SematicLine& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_10_sematicline_(from.dt_array_10_sematicline_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stslcommon()) {
    stslcommon_ = new ::atd::meprocess::SLCommon(*from.stslcommon_);
  } else {
    stslcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_SematicLine)
}

void Dt_Record_SematicLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stslcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stslcommon_));
}

Dt_Record_SematicLine::~Dt_Record_SematicLine() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_SematicLine)
  SharedDtor();
}

void Dt_Record_SematicLine::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stslcommon_;
  }
}

void Dt_Record_SematicLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_SematicLine& Dt_Record_SematicLine::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_SematicLine* Dt_Record_SematicLine::New(::google::protobuf::Arena* arena) const {
  Dt_Record_SematicLine* n = new Dt_Record_SematicLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_SematicLine::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_SematicLine)
  dt_array_10_sematicline_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stslcommon()) {
      GOOGLE_DCHECK(stslcommon_ != NULL);
      stslcommon_->::atd::meprocess::SLCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_SematicLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_SematicLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SLCommon stslcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stslcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.SematicLine dt_array_10_sematicline = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_10_sematicline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_SematicLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_SematicLine)
  return false;
#undef DO_
}

void Dt_Record_SematicLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_SematicLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.SLCommon stslcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stslcommon_, output);
  }

  // repeated .atd.meprocess.SematicLine dt_array_10_sematicline = 4;
  for (unsigned int i = 0, n = this->dt_array_10_sematicline_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_10_sematicline(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_SematicLine)
}

size_t Dt_Record_SematicLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_SematicLine)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.SematicLine dt_array_10_sematicline = 4;
  {
    unsigned int count = this->dt_array_10_sematicline_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_10_sematicline(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.SLCommon stslcommon = 3;
    if (has_stslcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stslcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_SematicLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_SematicLine*>(&from));
}

void Dt_Record_SematicLine::MergeFrom(const Dt_Record_SematicLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_SematicLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_10_sematicline_.MergeFrom(from.dt_array_10_sematicline_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stslcommon()->::atd::meprocess::SLCommon::MergeFrom(from.stslcommon());
    }
  }
}

void Dt_Record_SematicLine::CopyFrom(const Dt_Record_SematicLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_SematicLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_SematicLine::IsInitialized() const {
  return true;
}

void Dt_Record_SematicLine::Swap(Dt_Record_SematicLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_SematicLine::InternalSwap(Dt_Record_SematicLine* other) {
  dt_array_10_sematicline_.InternalSwap(&other->dt_array_10_sematicline_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stslcommon_, other->stslcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_SematicLine::GetTypeName() const {
  return "atd.meprocess.Dt_Record_SematicLine";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_SematicLine

// optional .atd.common.Header header = 1;
bool Dt_Record_SematicLine::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_SematicLine::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_SematicLine::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_SematicLine::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_SematicLine::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_SematicLine::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.header)
  return header_;
}
::atd::common::Header* Dt_Record_SematicLine::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicLine.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_SematicLine::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicLine.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_SematicLine::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_SematicLine::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_SematicLine::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_SematicLine::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_SematicLine::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_SematicLine::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_SematicLine::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_SematicLine::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
}

// optional .atd.meprocess.SLCommon stslcommon = 3;
bool Dt_Record_SematicLine::has_stslcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_SematicLine::set_has_stslcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_SematicLine::clear_has_stslcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_SematicLine::clear_stslcommon() {
  if (stslcommon_ != NULL) stslcommon_->::atd::meprocess::SLCommon::Clear();
  clear_has_stslcommon();
}
const ::atd::meprocess::SLCommon& Dt_Record_SematicLine::stslcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.stslcommon)
  return stslcommon_ != NULL ? *stslcommon_
                         : *::atd::meprocess::SLCommon::internal_default_instance();
}
::atd::meprocess::SLCommon* Dt_Record_SematicLine::mutable_stslcommon() {
  set_has_stslcommon();
  if (stslcommon_ == NULL) {
    stslcommon_ = new ::atd::meprocess::SLCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.stslcommon)
  return stslcommon_;
}
::atd::meprocess::SLCommon* Dt_Record_SematicLine::release_stslcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicLine.stslcommon)
  clear_has_stslcommon();
  ::atd::meprocess::SLCommon* temp = stslcommon_;
  stslcommon_ = NULL;
  return temp;
}
void Dt_Record_SematicLine::set_allocated_stslcommon(::atd::meprocess::SLCommon* stslcommon) {
  delete stslcommon_;
  stslcommon_ = stslcommon;
  if (stslcommon) {
    set_has_stslcommon();
  } else {
    clear_has_stslcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicLine.stslcommon)
}

// repeated .atd.meprocess.SematicLine dt_array_10_sematicline = 4;
int Dt_Record_SematicLine::dt_array_10_sematicline_size() const {
  return dt_array_10_sematicline_.size();
}
void Dt_Record_SematicLine::clear_dt_array_10_sematicline() {
  dt_array_10_sematicline_.Clear();
}
const ::atd::meprocess::SematicLine& Dt_Record_SematicLine::dt_array_10_sematicline(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_.Get(index);
}
::atd::meprocess::SematicLine* Dt_Record_SematicLine::mutable_dt_array_10_sematicline(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_.Mutable(index);
}
::atd::meprocess::SematicLine* Dt_Record_SematicLine::add_dt_array_10_sematicline() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicLine >*
Dt_Record_SematicLine::mutable_dt_array_10_sematicline() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return &dt_array_10_sematicline_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicLine >&
Dt_Record_SematicLine::dt_array_10_sematicline() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SematicLine::kSlIdFieldNumber;
const int SematicLine::kSlTypeFieldNumber;
const int SematicLine::kSlColorFieldNumber;
const int SematicLine::kSlMeasureStatusFieldNumber;
const int SematicLine::kSlLatDistanceFieldNumber;
const int SematicLine::kSlWidthFieldNumber;
const int SematicLine::kSlLengthFieldNumber;
const int SematicLine::kSlLongDistFieldNumber;
const int SematicLine::kSlLongDistStdFieldNumber;
const int SematicLine::kSlCloseToJuncFieldNumber;
const int SematicLine::kSlProbabilityFieldNumber;
const int SematicLine::kSlAngleFieldNumber;
const int SematicLine::kSlAngleStdFieldNumber;
const int SematicLine::kSlIsRelevantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SematicLine::SematicLine()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.SematicLine)
}
SematicLine::SematicLine(const SematicLine& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sl_id_, &from.sl_id_,
    reinterpret_cast<char*>(&sl_angle_std_) -
    reinterpret_cast<char*>(&sl_id_) + sizeof(sl_angle_std_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.SematicLine)
}

void SematicLine::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sl_id_, 0, reinterpret_cast<char*>(&sl_angle_std_) -
    reinterpret_cast<char*>(&sl_id_) + sizeof(sl_angle_std_));
}

SematicLine::~SematicLine() {
  // @@protoc_insertion_point(destructor:atd.meprocess.SematicLine)
  SharedDtor();
}

void SematicLine::SharedDtor() {
}

void SematicLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SematicLine& SematicLine::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

SematicLine* SematicLine::New(::google::protobuf::Arena* arena) const {
  SematicLine* n = new SematicLine;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SematicLine::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.SematicLine)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&sl_id_, 0, reinterpret_cast<char*>(&sl_long_dist_) -
      reinterpret_cast<char*>(&sl_id_) + sizeof(sl_long_dist_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&sl_long_dist_std_, 0, reinterpret_cast<char*>(&sl_angle_std_) -
      reinterpret_cast<char*>(&sl_long_dist_std_) + sizeof(sl_angle_std_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SematicLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.SematicLine)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sl_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sl_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sl_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SematicLine.Sl_typeType sl_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::SematicLine_Sl_typeType_IsValid(value)) {
            set_sl_type(static_cast< ::atd::meprocess::SematicLine_Sl_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(16u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SematicLine.Sl_colorType sl_color = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::SematicLine_Sl_colorType_IsValid(value)) {
            set_sl_color(static_cast< ::atd::meprocess::SematicLine_Sl_colorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SematicLine.Sl_measure_statusType sl_measure_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::SematicLine_Sl_measure_statusType_IsValid(value)) {
            set_sl_measure_status(static_cast< ::atd::meprocess::SematicLine_Sl_measure_statusType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_lat_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_sl_lat_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_sl_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_length = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_sl_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_long_dist = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_sl_long_dist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_long_dist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_long_dist_std = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_sl_long_dist_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_long_dist_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sl_close_to_junc = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_sl_close_to_junc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sl_close_to_junc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_probability = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_sl_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_angle = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_sl_angle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_angle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sl_angle_std = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_sl_angle_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sl_angle_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool sl_is_relevant = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_sl_is_relevant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sl_is_relevant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.SematicLine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.SematicLine)
  return false;
#undef DO_
}

void SematicLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.SematicLine)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sl_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sl_id(), output);
  }

  // optional .atd.meprocess.SematicLine.Sl_typeType sl_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->sl_type(), output);
  }

  // optional .atd.meprocess.SematicLine.Sl_colorType sl_color = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->sl_color(), output);
  }

  // optional .atd.meprocess.SematicLine.Sl_measure_statusType sl_measure_status = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sl_measure_status(), output);
  }

  // optional float sl_lat_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sl_lat_distance(), output);
  }

  // optional float sl_width = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sl_width(), output);
  }

  // optional float sl_length = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sl_length(), output);
  }

  // optional float sl_long_dist = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sl_long_dist(), output);
  }

  // optional float sl_long_dist_std = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->sl_long_dist_std(), output);
  }

  // optional bool sl_close_to_junc = 10;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->sl_close_to_junc(), output);
  }

  // optional float sl_probability = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->sl_probability(), output);
  }

  // optional float sl_angle = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->sl_angle(), output);
  }

  // optional float sl_angle_std = 13;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->sl_angle_std(), output);
  }

  // optional bool sl_is_relevant = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->sl_is_relevant(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.SematicLine)
}

size_t SematicLine::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.SematicLine)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 sl_id = 1;
    if (has_sl_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sl_id());
    }

    // optional .atd.meprocess.SematicLine.Sl_typeType sl_type = 2;
    if (has_sl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sl_type());
    }

    // optional .atd.meprocess.SematicLine.Sl_colorType sl_color = 3;
    if (has_sl_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sl_color());
    }

    // optional .atd.meprocess.SematicLine.Sl_measure_statusType sl_measure_status = 4;
    if (has_sl_measure_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->sl_measure_status());
    }

    // optional float sl_lat_distance = 5;
    if (has_sl_lat_distance()) {
      total_size += 1 + 4;
    }

    // optional float sl_width = 6;
    if (has_sl_width()) {
      total_size += 1 + 4;
    }

    // optional float sl_length = 7;
    if (has_sl_length()) {
      total_size += 1 + 4;
    }

    // optional float sl_long_dist = 8;
    if (has_sl_long_dist()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional float sl_long_dist_std = 9;
    if (has_sl_long_dist_std()) {
      total_size += 1 + 4;
    }

    // optional float sl_probability = 11;
    if (has_sl_probability()) {
      total_size += 1 + 4;
    }

    // optional float sl_angle = 12;
    if (has_sl_angle()) {
      total_size += 1 + 4;
    }

    // optional bool sl_close_to_junc = 10;
    if (has_sl_close_to_junc()) {
      total_size += 1 + 1;
    }

    // optional bool sl_is_relevant = 14;
    if (has_sl_is_relevant()) {
      total_size += 1 + 1;
    }

    // optional float sl_angle_std = 13;
    if (has_sl_angle_std()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SematicLine::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SematicLine*>(&from));
}

void SematicLine::MergeFrom(const SematicLine& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.SematicLine)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      sl_id_ = from.sl_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sl_type_ = from.sl_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      sl_color_ = from.sl_color_;
    }
    if (cached_has_bits & 0x00000008u) {
      sl_measure_status_ = from.sl_measure_status_;
    }
    if (cached_has_bits & 0x00000010u) {
      sl_lat_distance_ = from.sl_lat_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      sl_width_ = from.sl_width_;
    }
    if (cached_has_bits & 0x00000040u) {
      sl_length_ = from.sl_length_;
    }
    if (cached_has_bits & 0x00000080u) {
      sl_long_dist_ = from.sl_long_dist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      sl_long_dist_std_ = from.sl_long_dist_std_;
    }
    if (cached_has_bits & 0x00000200u) {
      sl_probability_ = from.sl_probability_;
    }
    if (cached_has_bits & 0x00000400u) {
      sl_angle_ = from.sl_angle_;
    }
    if (cached_has_bits & 0x00000800u) {
      sl_close_to_junc_ = from.sl_close_to_junc_;
    }
    if (cached_has_bits & 0x00001000u) {
      sl_is_relevant_ = from.sl_is_relevant_;
    }
    if (cached_has_bits & 0x00002000u) {
      sl_angle_std_ = from.sl_angle_std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SematicLine::CopyFrom(const SematicLine& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.SematicLine)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SematicLine::IsInitialized() const {
  return true;
}

void SematicLine::Swap(SematicLine* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SematicLine::InternalSwap(SematicLine* other) {
  std::swap(sl_id_, other->sl_id_);
  std::swap(sl_type_, other->sl_type_);
  std::swap(sl_color_, other->sl_color_);
  std::swap(sl_measure_status_, other->sl_measure_status_);
  std::swap(sl_lat_distance_, other->sl_lat_distance_);
  std::swap(sl_width_, other->sl_width_);
  std::swap(sl_length_, other->sl_length_);
  std::swap(sl_long_dist_, other->sl_long_dist_);
  std::swap(sl_long_dist_std_, other->sl_long_dist_std_);
  std::swap(sl_probability_, other->sl_probability_);
  std::swap(sl_angle_, other->sl_angle_);
  std::swap(sl_close_to_junc_, other->sl_close_to_junc_);
  std::swap(sl_is_relevant_, other->sl_is_relevant_);
  std::swap(sl_angle_std_, other->sl_angle_std_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SematicLine::GetTypeName() const {
  return "atd.meprocess.SematicLine";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SematicLine

// optional int32 sl_id = 1;
bool SematicLine::has_sl_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SematicLine::set_has_sl_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SematicLine::clear_has_sl_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SematicLine::clear_sl_id() {
  sl_id_ = 0;
  clear_has_sl_id();
}
::google::protobuf::int32 SematicLine::sl_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_id)
  return sl_id_;
}
void SematicLine::set_sl_id(::google::protobuf::int32 value) {
  set_has_sl_id();
  sl_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_id)
}

// optional .atd.meprocess.SematicLine.Sl_typeType sl_type = 2;
bool SematicLine::has_sl_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SematicLine::set_has_sl_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SematicLine::clear_has_sl_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SematicLine::clear_sl_type() {
  sl_type_ = 0;
  clear_has_sl_type();
}
::atd::meprocess::SematicLine_Sl_typeType SematicLine::sl_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_type)
  return static_cast< ::atd::meprocess::SematicLine_Sl_typeType >(sl_type_);
}
void SematicLine::set_sl_type(::atd::meprocess::SematicLine_Sl_typeType value) {
  assert(::atd::meprocess::SematicLine_Sl_typeType_IsValid(value));
  set_has_sl_type();
  sl_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_type)
}

// optional .atd.meprocess.SematicLine.Sl_colorType sl_color = 3;
bool SematicLine::has_sl_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SematicLine::set_has_sl_color() {
  _has_bits_[0] |= 0x00000004u;
}
void SematicLine::clear_has_sl_color() {
  _has_bits_[0] &= ~0x00000004u;
}
void SematicLine::clear_sl_color() {
  sl_color_ = 0;
  clear_has_sl_color();
}
::atd::meprocess::SematicLine_Sl_colorType SematicLine::sl_color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_color)
  return static_cast< ::atd::meprocess::SematicLine_Sl_colorType >(sl_color_);
}
void SematicLine::set_sl_color(::atd::meprocess::SematicLine_Sl_colorType value) {
  assert(::atd::meprocess::SematicLine_Sl_colorType_IsValid(value));
  set_has_sl_color();
  sl_color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_color)
}

// optional .atd.meprocess.SematicLine.Sl_measure_statusType sl_measure_status = 4;
bool SematicLine::has_sl_measure_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SematicLine::set_has_sl_measure_status() {
  _has_bits_[0] |= 0x00000008u;
}
void SematicLine::clear_has_sl_measure_status() {
  _has_bits_[0] &= ~0x00000008u;
}
void SematicLine::clear_sl_measure_status() {
  sl_measure_status_ = 0;
  clear_has_sl_measure_status();
}
::atd::meprocess::SematicLine_Sl_measure_statusType SematicLine::sl_measure_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_measure_status)
  return static_cast< ::atd::meprocess::SematicLine_Sl_measure_statusType >(sl_measure_status_);
}
void SematicLine::set_sl_measure_status(::atd::meprocess::SematicLine_Sl_measure_statusType value) {
  assert(::atd::meprocess::SematicLine_Sl_measure_statusType_IsValid(value));
  set_has_sl_measure_status();
  sl_measure_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_measure_status)
}

// optional float sl_lat_distance = 5;
bool SematicLine::has_sl_lat_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SematicLine::set_has_sl_lat_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void SematicLine::clear_has_sl_lat_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void SematicLine::clear_sl_lat_distance() {
  sl_lat_distance_ = 0;
  clear_has_sl_lat_distance();
}
float SematicLine::sl_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_lat_distance)
  return sl_lat_distance_;
}
void SematicLine::set_sl_lat_distance(float value) {
  set_has_sl_lat_distance();
  sl_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_lat_distance)
}

// optional float sl_width = 6;
bool SematicLine::has_sl_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SematicLine::set_has_sl_width() {
  _has_bits_[0] |= 0x00000020u;
}
void SematicLine::clear_has_sl_width() {
  _has_bits_[0] &= ~0x00000020u;
}
void SematicLine::clear_sl_width() {
  sl_width_ = 0;
  clear_has_sl_width();
}
float SematicLine::sl_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_width)
  return sl_width_;
}
void SematicLine::set_sl_width(float value) {
  set_has_sl_width();
  sl_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_width)
}

// optional float sl_length = 7;
bool SematicLine::has_sl_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SematicLine::set_has_sl_length() {
  _has_bits_[0] |= 0x00000040u;
}
void SematicLine::clear_has_sl_length() {
  _has_bits_[0] &= ~0x00000040u;
}
void SematicLine::clear_sl_length() {
  sl_length_ = 0;
  clear_has_sl_length();
}
float SematicLine::sl_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_length)
  return sl_length_;
}
void SematicLine::set_sl_length(float value) {
  set_has_sl_length();
  sl_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_length)
}

// optional float sl_long_dist = 8;
bool SematicLine::has_sl_long_dist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void SematicLine::set_has_sl_long_dist() {
  _has_bits_[0] |= 0x00000080u;
}
void SematicLine::clear_has_sl_long_dist() {
  _has_bits_[0] &= ~0x00000080u;
}
void SematicLine::clear_sl_long_dist() {
  sl_long_dist_ = 0;
  clear_has_sl_long_dist();
}
float SematicLine::sl_long_dist() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_long_dist)
  return sl_long_dist_;
}
void SematicLine::set_sl_long_dist(float value) {
  set_has_sl_long_dist();
  sl_long_dist_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_long_dist)
}

// optional float sl_long_dist_std = 9;
bool SematicLine::has_sl_long_dist_std() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void SematicLine::set_has_sl_long_dist_std() {
  _has_bits_[0] |= 0x00000100u;
}
void SematicLine::clear_has_sl_long_dist_std() {
  _has_bits_[0] &= ~0x00000100u;
}
void SematicLine::clear_sl_long_dist_std() {
  sl_long_dist_std_ = 0;
  clear_has_sl_long_dist_std();
}
float SematicLine::sl_long_dist_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_long_dist_std)
  return sl_long_dist_std_;
}
void SematicLine::set_sl_long_dist_std(float value) {
  set_has_sl_long_dist_std();
  sl_long_dist_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_long_dist_std)
}

// optional bool sl_close_to_junc = 10;
bool SematicLine::has_sl_close_to_junc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void SematicLine::set_has_sl_close_to_junc() {
  _has_bits_[0] |= 0x00000800u;
}
void SematicLine::clear_has_sl_close_to_junc() {
  _has_bits_[0] &= ~0x00000800u;
}
void SematicLine::clear_sl_close_to_junc() {
  sl_close_to_junc_ = false;
  clear_has_sl_close_to_junc();
}
bool SematicLine::sl_close_to_junc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_close_to_junc)
  return sl_close_to_junc_;
}
void SematicLine::set_sl_close_to_junc(bool value) {
  set_has_sl_close_to_junc();
  sl_close_to_junc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_close_to_junc)
}

// optional float sl_probability = 11;
bool SematicLine::has_sl_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void SematicLine::set_has_sl_probability() {
  _has_bits_[0] |= 0x00000200u;
}
void SematicLine::clear_has_sl_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
void SematicLine::clear_sl_probability() {
  sl_probability_ = 0;
  clear_has_sl_probability();
}
float SematicLine::sl_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_probability)
  return sl_probability_;
}
void SematicLine::set_sl_probability(float value) {
  set_has_sl_probability();
  sl_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_probability)
}

// optional float sl_angle = 12;
bool SematicLine::has_sl_angle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void SematicLine::set_has_sl_angle() {
  _has_bits_[0] |= 0x00000400u;
}
void SematicLine::clear_has_sl_angle() {
  _has_bits_[0] &= ~0x00000400u;
}
void SematicLine::clear_sl_angle() {
  sl_angle_ = 0;
  clear_has_sl_angle();
}
float SematicLine::sl_angle() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_angle)
  return sl_angle_;
}
void SematicLine::set_sl_angle(float value) {
  set_has_sl_angle();
  sl_angle_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_angle)
}

// optional float sl_angle_std = 13;
bool SematicLine::has_sl_angle_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void SematicLine::set_has_sl_angle_std() {
  _has_bits_[0] |= 0x00002000u;
}
void SematicLine::clear_has_sl_angle_std() {
  _has_bits_[0] &= ~0x00002000u;
}
void SematicLine::clear_sl_angle_std() {
  sl_angle_std_ = 0;
  clear_has_sl_angle_std();
}
float SematicLine::sl_angle_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_angle_std)
  return sl_angle_std_;
}
void SematicLine::set_sl_angle_std(float value) {
  set_has_sl_angle_std();
  sl_angle_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_angle_std)
}

// optional bool sl_is_relevant = 14;
bool SematicLine::has_sl_is_relevant() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void SematicLine::set_has_sl_is_relevant() {
  _has_bits_[0] |= 0x00001000u;
}
void SematicLine::clear_has_sl_is_relevant() {
  _has_bits_[0] &= ~0x00001000u;
}
void SematicLine::clear_sl_is_relevant() {
  sl_is_relevant_ = false;
  clear_has_sl_is_relevant();
}
bool SematicLine::sl_is_relevant() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_is_relevant)
  return sl_is_relevant_;
}
void SematicLine::set_sl_is_relevant(bool value) {
  set_has_sl_is_relevant();
  sl_is_relevant_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_is_relevant)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SMCommon::kSmZeroByteFieldNumber;
const int SMCommon::kSmProtocolVersionFieldNumber;
const int SMCommon::kSmSyncIdFieldNumber;
const int SMCommon::kSmApprovedMarksFieldNumber;
const int SMCommon::kSmHeaderBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SMCommon::SMCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.SMCommon)
}
SMCommon::SMCommon(const SMCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sm_zero_byte_, &from.sm_zero_byte_,
    reinterpret_cast<char*>(&sm_header_buffer_) -
    reinterpret_cast<char*>(&sm_zero_byte_) + sizeof(sm_header_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.SMCommon)
}

void SMCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sm_zero_byte_, 0, reinterpret_cast<char*>(&sm_header_buffer_) -
    reinterpret_cast<char*>(&sm_zero_byte_) + sizeof(sm_header_buffer_));
}

SMCommon::~SMCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.SMCommon)
  SharedDtor();
}

void SMCommon::SharedDtor() {
}

void SMCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SMCommon& SMCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

SMCommon* SMCommon::New(::google::protobuf::Arena* arena) const {
  SMCommon* n = new SMCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SMCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.SMCommon)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&sm_zero_byte_, 0, reinterpret_cast<char*>(&sm_header_buffer_) -
      reinterpret_cast<char*>(&sm_zero_byte_) + sizeof(sm_header_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SMCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.SMCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sm_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sm_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sm_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sm_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sm_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_sm_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sm_approved_marks = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_sm_approved_marks();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_approved_marks_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sm_header_buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_sm_header_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_header_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.SMCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.SMCommon)
  return false;
#undef DO_
}

void SMCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.SMCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sm_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sm_zero_byte(), output);
  }

  // optional int32 sm_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sm_protocol_version(), output);
  }

  // optional int32 sm_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sm_sync_id(), output);
  }

  // optional int32 sm_approved_marks = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sm_approved_marks(), output);
  }

  // optional int32 sm_header_buffer = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sm_header_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.SMCommon)
}

size_t SMCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.SMCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 sm_zero_byte = 1;
    if (has_sm_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_zero_byte());
    }

    // optional int32 sm_protocol_version = 2;
    if (has_sm_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_protocol_version());
    }

    // optional int32 sm_sync_id = 3;
    if (has_sm_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_sync_id());
    }

    // optional int32 sm_approved_marks = 4;
    if (has_sm_approved_marks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_approved_marks());
    }

    // optional int32 sm_header_buffer = 5;
    if (has_sm_header_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_header_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SMCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SMCommon*>(&from));
}

void SMCommon::MergeFrom(const SMCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.SMCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      sm_zero_byte_ = from.sm_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      sm_protocol_version_ = from.sm_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      sm_sync_id_ = from.sm_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      sm_approved_marks_ = from.sm_approved_marks_;
    }
    if (cached_has_bits & 0x00000010u) {
      sm_header_buffer_ = from.sm_header_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SMCommon::CopyFrom(const SMCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.SMCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SMCommon::IsInitialized() const {
  return true;
}

void SMCommon::Swap(SMCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SMCommon::InternalSwap(SMCommon* other) {
  std::swap(sm_zero_byte_, other->sm_zero_byte_);
  std::swap(sm_protocol_version_, other->sm_protocol_version_);
  std::swap(sm_sync_id_, other->sm_sync_id_);
  std::swap(sm_approved_marks_, other->sm_approved_marks_);
  std::swap(sm_header_buffer_, other->sm_header_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SMCommon::GetTypeName() const {
  return "atd.meprocess.SMCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SMCommon

// optional int32 sm_zero_byte = 1;
bool SMCommon::has_sm_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SMCommon::set_has_sm_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void SMCommon::clear_has_sm_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void SMCommon::clear_sm_zero_byte() {
  sm_zero_byte_ = 0;
  clear_has_sm_zero_byte();
}
::google::protobuf::int32 SMCommon::sm_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_zero_byte)
  return sm_zero_byte_;
}
void SMCommon::set_sm_zero_byte(::google::protobuf::int32 value) {
  set_has_sm_zero_byte();
  sm_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_zero_byte)
}

// optional int32 sm_protocol_version = 2;
bool SMCommon::has_sm_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SMCommon::set_has_sm_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void SMCommon::clear_has_sm_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void SMCommon::clear_sm_protocol_version() {
  sm_protocol_version_ = 0;
  clear_has_sm_protocol_version();
}
::google::protobuf::int32 SMCommon::sm_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_protocol_version)
  return sm_protocol_version_;
}
void SMCommon::set_sm_protocol_version(::google::protobuf::int32 value) {
  set_has_sm_protocol_version();
  sm_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_protocol_version)
}

// optional int32 sm_sync_id = 3;
bool SMCommon::has_sm_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SMCommon::set_has_sm_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void SMCommon::clear_has_sm_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void SMCommon::clear_sm_sync_id() {
  sm_sync_id_ = 0;
  clear_has_sm_sync_id();
}
::google::protobuf::int32 SMCommon::sm_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_sync_id)
  return sm_sync_id_;
}
void SMCommon::set_sm_sync_id(::google::protobuf::int32 value) {
  set_has_sm_sync_id();
  sm_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_sync_id)
}

// optional int32 sm_approved_marks = 4;
bool SMCommon::has_sm_approved_marks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SMCommon::set_has_sm_approved_marks() {
  _has_bits_[0] |= 0x00000008u;
}
void SMCommon::clear_has_sm_approved_marks() {
  _has_bits_[0] &= ~0x00000008u;
}
void SMCommon::clear_sm_approved_marks() {
  sm_approved_marks_ = 0;
  clear_has_sm_approved_marks();
}
::google::protobuf::int32 SMCommon::sm_approved_marks() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_approved_marks)
  return sm_approved_marks_;
}
void SMCommon::set_sm_approved_marks(::google::protobuf::int32 value) {
  set_has_sm_approved_marks();
  sm_approved_marks_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_approved_marks)
}

// optional int32 sm_header_buffer = 5;
bool SMCommon::has_sm_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SMCommon::set_has_sm_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
void SMCommon::clear_has_sm_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
void SMCommon::clear_sm_header_buffer() {
  sm_header_buffer_ = 0;
  clear_has_sm_header_buffer();
}
::google::protobuf::int32 SMCommon::sm_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_header_buffer)
  return sm_header_buffer_;
}
void SMCommon::set_sm_header_buffer(::google::protobuf::int32 value) {
  set_has_sm_header_buffer();
  sm_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_header_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_SematicMark::kHeaderFieldNumber;
const int Dt_Record_SematicMark::kReservedmsgFieldNumber;
const int Dt_Record_SematicMark::kStsmcommonFieldNumber;
const int Dt_Record_SematicMark::kDtArray20SematicmarkFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_SematicMark::Dt_Record_SematicMark()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_SematicMark)
}
Dt_Record_SematicMark::Dt_Record_SematicMark(const Dt_Record_SematicMark& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_20_sematicmark_(from.dt_array_20_sematicmark_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_stsmcommon()) {
    stsmcommon_ = new ::atd::meprocess::SMCommon(*from.stsmcommon_);
  } else {
    stsmcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_SematicMark)
}

void Dt_Record_SematicMark::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&stsmcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(stsmcommon_));
}

Dt_Record_SematicMark::~Dt_Record_SematicMark() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_SematicMark)
  SharedDtor();
}

void Dt_Record_SematicMark::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete stsmcommon_;
  }
}

void Dt_Record_SematicMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_SematicMark& Dt_Record_SematicMark::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_SematicMark* Dt_Record_SematicMark::New(::google::protobuf::Arena* arena) const {
  Dt_Record_SematicMark* n = new Dt_Record_SematicMark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_SematicMark::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_SematicMark)
  dt_array_20_sematicmark_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_stsmcommon()) {
      GOOGLE_DCHECK(stsmcommon_ != NULL);
      stsmcommon_->::atd::meprocess::SMCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_SematicMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_SematicMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.SMCommon stsmcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stsmcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.SematicMark dt_array_20_sematicmark = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_20_sematicmark()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_SematicMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_SematicMark)
  return false;
#undef DO_
}

void Dt_Record_SematicMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_SematicMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.SMCommon stsmcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stsmcommon_, output);
  }

  // repeated .atd.meprocess.SematicMark dt_array_20_sematicmark = 4;
  for (unsigned int i = 0, n = this->dt_array_20_sematicmark_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_20_sematicmark(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_SematicMark)
}

size_t Dt_Record_SematicMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_SematicMark)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.SematicMark dt_array_20_sematicmark = 4;
  {
    unsigned int count = this->dt_array_20_sematicmark_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_20_sematicmark(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.SMCommon stsmcommon = 3;
    if (has_stsmcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stsmcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_SematicMark::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_SematicMark*>(&from));
}

void Dt_Record_SematicMark::MergeFrom(const Dt_Record_SematicMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_SematicMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_20_sematicmark_.MergeFrom(from.dt_array_20_sematicmark_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stsmcommon()->::atd::meprocess::SMCommon::MergeFrom(from.stsmcommon());
    }
  }
}

void Dt_Record_SematicMark::CopyFrom(const Dt_Record_SematicMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_SematicMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_SematicMark::IsInitialized() const {
  return true;
}

void Dt_Record_SematicMark::Swap(Dt_Record_SematicMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_SematicMark::InternalSwap(Dt_Record_SematicMark* other) {
  dt_array_20_sematicmark_.InternalSwap(&other->dt_array_20_sematicmark_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(stsmcommon_, other->stsmcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_SematicMark::GetTypeName() const {
  return "atd.meprocess.Dt_Record_SematicMark";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_SematicMark

// optional .atd.common.Header header = 1;
bool Dt_Record_SematicMark::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_SematicMark::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_SematicMark::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_SematicMark::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_SematicMark::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_SematicMark::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.header)
  return header_;
}
::atd::common::Header* Dt_Record_SematicMark::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicMark.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_SematicMark::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicMark.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_SematicMark::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_SematicMark::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_SematicMark::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_SematicMark::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_SematicMark::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_SematicMark::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_SematicMark::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_SematicMark::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
}

// optional .atd.meprocess.SMCommon stsmcommon = 3;
bool Dt_Record_SematicMark::has_stsmcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_SematicMark::set_has_stsmcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_SematicMark::clear_has_stsmcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_SematicMark::clear_stsmcommon() {
  if (stsmcommon_ != NULL) stsmcommon_->::atd::meprocess::SMCommon::Clear();
  clear_has_stsmcommon();
}
const ::atd::meprocess::SMCommon& Dt_Record_SematicMark::stsmcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
  return stsmcommon_ != NULL ? *stsmcommon_
                         : *::atd::meprocess::SMCommon::internal_default_instance();
}
::atd::meprocess::SMCommon* Dt_Record_SematicMark::mutable_stsmcommon() {
  set_has_stsmcommon();
  if (stsmcommon_ == NULL) {
    stsmcommon_ = new ::atd::meprocess::SMCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
  return stsmcommon_;
}
::atd::meprocess::SMCommon* Dt_Record_SematicMark::release_stsmcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
  clear_has_stsmcommon();
  ::atd::meprocess::SMCommon* temp = stsmcommon_;
  stsmcommon_ = NULL;
  return temp;
}
void Dt_Record_SematicMark::set_allocated_stsmcommon(::atd::meprocess::SMCommon* stsmcommon) {
  delete stsmcommon_;
  stsmcommon_ = stsmcommon;
  if (stsmcommon) {
    set_has_stsmcommon();
  } else {
    clear_has_stsmcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
}

// repeated .atd.meprocess.SematicMark dt_array_20_sematicmark = 4;
int Dt_Record_SematicMark::dt_array_20_sematicmark_size() const {
  return dt_array_20_sematicmark_.size();
}
void Dt_Record_SematicMark::clear_dt_array_20_sematicmark() {
  dt_array_20_sematicmark_.Clear();
}
const ::atd::meprocess::SematicMark& Dt_Record_SematicMark::dt_array_20_sematicmark(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_.Get(index);
}
::atd::meprocess::SematicMark* Dt_Record_SematicMark::mutable_dt_array_20_sematicmark(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_.Mutable(index);
}
::atd::meprocess::SematicMark* Dt_Record_SematicMark::add_dt_array_20_sematicmark() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicMark >*
Dt_Record_SematicMark::mutable_dt_array_20_sematicmark() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return &dt_array_20_sematicmark_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicMark >&
Dt_Record_SematicMark::dt_array_20_sematicmark() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SematicMark::kSmIdFieldNumber;
const int SematicMark::kSmTypeFieldNumber;
const int SematicMark::kSmLatDistanceFieldNumber;
const int SematicMark::kReserved2FieldNumber;
const int SematicMark::kSmLongDistanceFieldNumber;
const int SematicMark::kSmConfidenceFieldNumber;
const int SematicMark::kSmBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SematicMark::SematicMark()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.SematicMark)
}
SematicMark::SematicMark(const SematicMark& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sm_id_, &from.sm_id_,
    reinterpret_cast<char*>(&sm_buffer_) -
    reinterpret_cast<char*>(&sm_id_) + sizeof(sm_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.SematicMark)
}

void SematicMark::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&sm_id_, 0, reinterpret_cast<char*>(&sm_buffer_) -
    reinterpret_cast<char*>(&sm_id_) + sizeof(sm_buffer_));
}

SematicMark::~SematicMark() {
  // @@protoc_insertion_point(destructor:atd.meprocess.SematicMark)
  SharedDtor();
}

void SematicMark::SharedDtor() {
}

void SematicMark::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SematicMark& SematicMark::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

SematicMark* SematicMark::New(::google::protobuf::Arena* arena) const {
  SematicMark* n = new SematicMark;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SematicMark::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.SematicMark)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&sm_id_, 0, reinterpret_cast<char*>(&sm_buffer_) -
      reinterpret_cast<char*>(&sm_id_) + sizeof(sm_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SematicMark::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.SematicMark)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 sm_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_sm_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sm_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_sm_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sm_lat_distance = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_sm_lat_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sm_lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_2 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sm_long_distance = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_sm_long_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sm_long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sm_confidence = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_sm_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sm_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 sm_buffer = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_sm_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sm_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.SematicMark)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.SematicMark)
  return false;
#undef DO_
}

void SematicMark::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.SematicMark)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 sm_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sm_id(), output);
  }

  // optional int32 sm_type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sm_type(), output);
  }

  // optional float sm_lat_distance = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->sm_lat_distance(), output);
  }

  // optional int32 reserved_2 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reserved_2(), output);
  }

  // optional float sm_long_distance = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->sm_long_distance(), output);
  }

  // optional float sm_confidence = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sm_confidence(), output);
  }

  // optional int32 sm_buffer = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sm_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.SematicMark)
}

size_t SematicMark::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.SematicMark)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 sm_id = 1;
    if (has_sm_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_id());
    }

    // optional int32 sm_type = 2;
    if (has_sm_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_type());
    }

    // optional float sm_lat_distance = 3;
    if (has_sm_lat_distance()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_2 = 4;
    if (has_reserved_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_2());
    }

    // optional float sm_long_distance = 5;
    if (has_sm_long_distance()) {
      total_size += 1 + 4;
    }

    // optional float sm_confidence = 6;
    if (has_sm_confidence()) {
      total_size += 1 + 4;
    }

    // optional int32 sm_buffer = 7;
    if (has_sm_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sm_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SematicMark::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SematicMark*>(&from));
}

void SematicMark::MergeFrom(const SematicMark& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.SematicMark)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      sm_id_ = from.sm_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      sm_type_ = from.sm_type_;
    }
    if (cached_has_bits & 0x00000004u) {
      sm_lat_distance_ = from.sm_lat_distance_;
    }
    if (cached_has_bits & 0x00000008u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00000010u) {
      sm_long_distance_ = from.sm_long_distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      sm_confidence_ = from.sm_confidence_;
    }
    if (cached_has_bits & 0x00000040u) {
      sm_buffer_ = from.sm_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SematicMark::CopyFrom(const SematicMark& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.SematicMark)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SematicMark::IsInitialized() const {
  return true;
}

void SematicMark::Swap(SematicMark* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SematicMark::InternalSwap(SematicMark* other) {
  std::swap(sm_id_, other->sm_id_);
  std::swap(sm_type_, other->sm_type_);
  std::swap(sm_lat_distance_, other->sm_lat_distance_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(sm_long_distance_, other->sm_long_distance_);
  std::swap(sm_confidence_, other->sm_confidence_);
  std::swap(sm_buffer_, other->sm_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SematicMark::GetTypeName() const {
  return "atd.meprocess.SematicMark";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SematicMark

// optional int32 sm_id = 1;
bool SematicMark::has_sm_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SematicMark::set_has_sm_id() {
  _has_bits_[0] |= 0x00000001u;
}
void SematicMark::clear_has_sm_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void SematicMark::clear_sm_id() {
  sm_id_ = 0;
  clear_has_sm_id();
}
::google::protobuf::int32 SematicMark::sm_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_id)
  return sm_id_;
}
void SematicMark::set_sm_id(::google::protobuf::int32 value) {
  set_has_sm_id();
  sm_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_id)
}

// optional int32 sm_type = 2;
bool SematicMark::has_sm_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SematicMark::set_has_sm_type() {
  _has_bits_[0] |= 0x00000002u;
}
void SematicMark::clear_has_sm_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void SematicMark::clear_sm_type() {
  sm_type_ = 0;
  clear_has_sm_type();
}
::google::protobuf::int32 SematicMark::sm_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_type)
  return sm_type_;
}
void SematicMark::set_sm_type(::google::protobuf::int32 value) {
  set_has_sm_type();
  sm_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_type)
}

// optional float sm_lat_distance = 3;
bool SematicMark::has_sm_lat_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SematicMark::set_has_sm_lat_distance() {
  _has_bits_[0] |= 0x00000004u;
}
void SematicMark::clear_has_sm_lat_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
void SematicMark::clear_sm_lat_distance() {
  sm_lat_distance_ = 0;
  clear_has_sm_lat_distance();
}
float SematicMark::sm_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_lat_distance)
  return sm_lat_distance_;
}
void SematicMark::set_sm_lat_distance(float value) {
  set_has_sm_lat_distance();
  sm_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_lat_distance)
}

// optional int32 reserved_2 = 4;
bool SematicMark::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void SematicMark::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000008u;
}
void SematicMark::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000008u;
}
void SematicMark::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
::google::protobuf::int32 SematicMark::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.reserved_2)
  return reserved_2_;
}
void SematicMark::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.reserved_2)
}

// optional float sm_long_distance = 5;
bool SematicMark::has_sm_long_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void SematicMark::set_has_sm_long_distance() {
  _has_bits_[0] |= 0x00000010u;
}
void SematicMark::clear_has_sm_long_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
void SematicMark::clear_sm_long_distance() {
  sm_long_distance_ = 0;
  clear_has_sm_long_distance();
}
float SematicMark::sm_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_long_distance)
  return sm_long_distance_;
}
void SematicMark::set_sm_long_distance(float value) {
  set_has_sm_long_distance();
  sm_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_long_distance)
}

// optional float sm_confidence = 6;
bool SematicMark::has_sm_confidence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void SematicMark::set_has_sm_confidence() {
  _has_bits_[0] |= 0x00000020u;
}
void SematicMark::clear_has_sm_confidence() {
  _has_bits_[0] &= ~0x00000020u;
}
void SematicMark::clear_sm_confidence() {
  sm_confidence_ = 0;
  clear_has_sm_confidence();
}
float SematicMark::sm_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_confidence)
  return sm_confidence_;
}
void SematicMark::set_sm_confidence(float value) {
  set_has_sm_confidence();
  sm_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_confidence)
}

// optional int32 sm_buffer = 7;
bool SematicMark::has_sm_buffer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void SematicMark::set_has_sm_buffer() {
  _has_bits_[0] |= 0x00000040u;
}
void SematicMark::clear_has_sm_buffer() {
  _has_bits_[0] &= ~0x00000040u;
}
void SematicMark::clear_sm_buffer() {
  sm_buffer_ = 0;
  clear_has_sm_buffer();
}
::google::protobuf::int32 SematicMark::sm_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_buffer)
  return sm_buffer_;
}
void SematicMark::set_sm_buffer(::google::protobuf::int32 value) {
  set_has_sm_buffer();
  sm_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFLCommon::kTflZeroByteFieldNumber;
const int TFLCommon::kTflProtocolVersionFieldNumber;
const int TFLCommon::kTflSyncIdFieldNumber;
const int TFLCommon::kTflNumberOfObjectsFieldNumber;
const int TFLCommon::kTflHeaderBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFLCommon::TFLCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.TFLCommon)
}
TFLCommon::TFLCommon(const TFLCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tfl_zero_byte_, &from.tfl_zero_byte_,
    reinterpret_cast<char*>(&tfl_header_buffer_) -
    reinterpret_cast<char*>(&tfl_zero_byte_) + sizeof(tfl_header_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.TFLCommon)
}

void TFLCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tfl_zero_byte_, 0, reinterpret_cast<char*>(&tfl_header_buffer_) -
    reinterpret_cast<char*>(&tfl_zero_byte_) + sizeof(tfl_header_buffer_));
}

TFLCommon::~TFLCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.TFLCommon)
  SharedDtor();
}

void TFLCommon::SharedDtor() {
}

void TFLCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TFLCommon& TFLCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFLCommon* TFLCommon::New(::google::protobuf::Arena* arena) const {
  TFLCommon* n = new TFLCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFLCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.TFLCommon)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&tfl_zero_byte_, 0, reinterpret_cast<char*>(&tfl_header_buffer_) -
      reinterpret_cast<char*>(&tfl_zero_byte_) + sizeof(tfl_header_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFLCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.TFLCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tfl_zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tfl_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tfl_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tfl_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_number_of_objects = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_tfl_number_of_objects();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_number_of_objects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_header_buffer = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tfl_header_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_header_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.TFLCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.TFLCommon)
  return false;
#undef DO_
}

void TFLCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.TFLCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tfl_zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tfl_zero_byte(), output);
  }

  // optional int32 tfl_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tfl_protocol_version(), output);
  }

  // optional int32 tfl_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tfl_sync_id(), output);
  }

  // optional int32 tfl_number_of_objects = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tfl_number_of_objects(), output);
  }

  // optional int32 tfl_header_buffer = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tfl_header_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.TFLCommon)
}

size_t TFLCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.TFLCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional int32 tfl_zero_byte = 1;
    if (has_tfl_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_zero_byte());
    }

    // optional int32 tfl_protocol_version = 2;
    if (has_tfl_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_protocol_version());
    }

    // optional int32 tfl_sync_id = 3;
    if (has_tfl_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_sync_id());
    }

    // optional int32 tfl_number_of_objects = 4;
    if (has_tfl_number_of_objects()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_number_of_objects());
    }

    // optional int32 tfl_header_buffer = 5;
    if (has_tfl_header_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_header_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFLCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TFLCommon*>(&from));
}

void TFLCommon::MergeFrom(const TFLCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.TFLCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      tfl_zero_byte_ = from.tfl_zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      tfl_protocol_version_ = from.tfl_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      tfl_sync_id_ = from.tfl_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      tfl_number_of_objects_ = from.tfl_number_of_objects_;
    }
    if (cached_has_bits & 0x00000010u) {
      tfl_header_buffer_ = from.tfl_header_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TFLCommon::CopyFrom(const TFLCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.TFLCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFLCommon::IsInitialized() const {
  return true;
}

void TFLCommon::Swap(TFLCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFLCommon::InternalSwap(TFLCommon* other) {
  std::swap(tfl_zero_byte_, other->tfl_zero_byte_);
  std::swap(tfl_protocol_version_, other->tfl_protocol_version_);
  std::swap(tfl_sync_id_, other->tfl_sync_id_);
  std::swap(tfl_number_of_objects_, other->tfl_number_of_objects_);
  std::swap(tfl_header_buffer_, other->tfl_header_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TFLCommon::GetTypeName() const {
  return "atd.meprocess.TFLCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFLCommon

// optional int32 tfl_zero_byte = 1;
bool TFLCommon::has_tfl_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TFLCommon::set_has_tfl_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void TFLCommon::clear_has_tfl_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void TFLCommon::clear_tfl_zero_byte() {
  tfl_zero_byte_ = 0;
  clear_has_tfl_zero_byte();
}
::google::protobuf::int32 TFLCommon::tfl_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_zero_byte)
  return tfl_zero_byte_;
}
void TFLCommon::set_tfl_zero_byte(::google::protobuf::int32 value) {
  set_has_tfl_zero_byte();
  tfl_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_zero_byte)
}

// optional int32 tfl_protocol_version = 2;
bool TFLCommon::has_tfl_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TFLCommon::set_has_tfl_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void TFLCommon::clear_has_tfl_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void TFLCommon::clear_tfl_protocol_version() {
  tfl_protocol_version_ = 0;
  clear_has_tfl_protocol_version();
}
::google::protobuf::int32 TFLCommon::tfl_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_protocol_version)
  return tfl_protocol_version_;
}
void TFLCommon::set_tfl_protocol_version(::google::protobuf::int32 value) {
  set_has_tfl_protocol_version();
  tfl_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_protocol_version)
}

// optional int32 tfl_sync_id = 3;
bool TFLCommon::has_tfl_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TFLCommon::set_has_tfl_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TFLCommon::clear_has_tfl_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TFLCommon::clear_tfl_sync_id() {
  tfl_sync_id_ = 0;
  clear_has_tfl_sync_id();
}
::google::protobuf::int32 TFLCommon::tfl_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_sync_id)
  return tfl_sync_id_;
}
void TFLCommon::set_tfl_sync_id(::google::protobuf::int32 value) {
  set_has_tfl_sync_id();
  tfl_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_sync_id)
}

// optional int32 tfl_number_of_objects = 4;
bool TFLCommon::has_tfl_number_of_objects() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TFLCommon::set_has_tfl_number_of_objects() {
  _has_bits_[0] |= 0x00000008u;
}
void TFLCommon::clear_has_tfl_number_of_objects() {
  _has_bits_[0] &= ~0x00000008u;
}
void TFLCommon::clear_tfl_number_of_objects() {
  tfl_number_of_objects_ = 0;
  clear_has_tfl_number_of_objects();
}
::google::protobuf::int32 TFLCommon::tfl_number_of_objects() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_number_of_objects)
  return tfl_number_of_objects_;
}
void TFLCommon::set_tfl_number_of_objects(::google::protobuf::int32 value) {
  set_has_tfl_number_of_objects();
  tfl_number_of_objects_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_number_of_objects)
}

// optional int32 tfl_header_buffer = 5;
bool TFLCommon::has_tfl_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TFLCommon::set_has_tfl_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
void TFLCommon::clear_has_tfl_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
void TFLCommon::clear_tfl_header_buffer() {
  tfl_header_buffer_ = 0;
  clear_has_tfl_header_buffer();
}
::google::protobuf::int32 TFLCommon::tfl_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_header_buffer)
  return tfl_header_buffer_;
}
void TFLCommon::set_tfl_header_buffer(::google::protobuf::int32 value) {
  set_has_tfl_header_buffer();
  tfl_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_header_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_TFL::kHeaderFieldNumber;
const int Dt_Record_TFL::kReservedmsgFieldNumber;
const int Dt_Record_TFL::kSttflcommonFieldNumber;
const int Dt_Record_TFL::kDtArray10TflFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_TFL::Dt_Record_TFL()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_TFL)
}
Dt_Record_TFL::Dt_Record_TFL(const Dt_Record_TFL& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_10_tfl_(from.dt_array_10_tfl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_sttflcommon()) {
    sttflcommon_ = new ::atd::meprocess::TFLCommon(*from.sttflcommon_);
  } else {
    sttflcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_TFL)
}

void Dt_Record_TFL::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&sttflcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(sttflcommon_));
}

Dt_Record_TFL::~Dt_Record_TFL() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_TFL)
  SharedDtor();
}

void Dt_Record_TFL::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete sttflcommon_;
  }
}

void Dt_Record_TFL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_TFL& Dt_Record_TFL::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_TFL* Dt_Record_TFL::New(::google::protobuf::Arena* arena) const {
  Dt_Record_TFL* n = new Dt_Record_TFL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_TFL::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_TFL)
  dt_array_10_tfl_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_sttflcommon()) {
      GOOGLE_DCHECK(sttflcommon_ != NULL);
      sttflcommon_->::atd::meprocess::TFLCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_TFL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_TFL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TFLCommon sttflcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttflcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.TFL dt_array_10_tfl = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_10_tfl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_TFL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_TFL)
  return false;
#undef DO_
}

void Dt_Record_TFL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_TFL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.TFLCommon sttflcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->sttflcommon_, output);
  }

  // repeated .atd.meprocess.TFL dt_array_10_tfl = 4;
  for (unsigned int i = 0, n = this->dt_array_10_tfl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_10_tfl(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_TFL)
}

size_t Dt_Record_TFL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_TFL)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.TFL dt_array_10_tfl = 4;
  {
    unsigned int count = this->dt_array_10_tfl_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_10_tfl(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.TFLCommon sttflcommon = 3;
    if (has_sttflcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sttflcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_TFL::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_TFL*>(&from));
}

void Dt_Record_TFL::MergeFrom(const Dt_Record_TFL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_TFL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_10_tfl_.MergeFrom(from.dt_array_10_tfl_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sttflcommon()->::atd::meprocess::TFLCommon::MergeFrom(from.sttflcommon());
    }
  }
}

void Dt_Record_TFL::CopyFrom(const Dt_Record_TFL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_TFL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_TFL::IsInitialized() const {
  return true;
}

void Dt_Record_TFL::Swap(Dt_Record_TFL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_TFL::InternalSwap(Dt_Record_TFL* other) {
  dt_array_10_tfl_.InternalSwap(&other->dt_array_10_tfl_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(sttflcommon_, other->sttflcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_TFL::GetTypeName() const {
  return "atd.meprocess.Dt_Record_TFL";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_TFL

// optional .atd.common.Header header = 1;
bool Dt_Record_TFL::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_TFL::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_TFL::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_TFL::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_TFL::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_TFL::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.header)
  return header_;
}
::atd::common::Header* Dt_Record_TFL::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TFL.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_TFL::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TFL.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_TFL::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_TFL::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_TFL::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_TFL::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_TFL::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_TFL::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_TFL::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TFL.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_TFL::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TFL.reservedmsg)
}

// optional .atd.meprocess.TFLCommon sttflcommon = 3;
bool Dt_Record_TFL::has_sttflcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_TFL::set_has_sttflcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_TFL::clear_has_sttflcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_TFL::clear_sttflcommon() {
  if (sttflcommon_ != NULL) sttflcommon_->::atd::meprocess::TFLCommon::Clear();
  clear_has_sttflcommon();
}
const ::atd::meprocess::TFLCommon& Dt_Record_TFL::sttflcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.sttflcommon)
  return sttflcommon_ != NULL ? *sttflcommon_
                         : *::atd::meprocess::TFLCommon::internal_default_instance();
}
::atd::meprocess::TFLCommon* Dt_Record_TFL::mutable_sttflcommon() {
  set_has_sttflcommon();
  if (sttflcommon_ == NULL) {
    sttflcommon_ = new ::atd::meprocess::TFLCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.sttflcommon)
  return sttflcommon_;
}
::atd::meprocess::TFLCommon* Dt_Record_TFL::release_sttflcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TFL.sttflcommon)
  clear_has_sttflcommon();
  ::atd::meprocess::TFLCommon* temp = sttflcommon_;
  sttflcommon_ = NULL;
  return temp;
}
void Dt_Record_TFL::set_allocated_sttflcommon(::atd::meprocess::TFLCommon* sttflcommon) {
  delete sttflcommon_;
  sttflcommon_ = sttflcommon;
  if (sttflcommon) {
    set_has_sttflcommon();
  } else {
    clear_has_sttflcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TFL.sttflcommon)
}

// repeated .atd.meprocess.TFL dt_array_10_tfl = 4;
int Dt_Record_TFL::dt_array_10_tfl_size() const {
  return dt_array_10_tfl_.size();
}
void Dt_Record_TFL::clear_dt_array_10_tfl() {
  dt_array_10_tfl_.Clear();
}
const ::atd::meprocess::TFL& Dt_Record_TFL::dt_array_10_tfl(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_.Get(index);
}
::atd::meprocess::TFL* Dt_Record_TFL::mutable_dt_array_10_tfl(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_.Mutable(index);
}
::atd::meprocess::TFL* Dt_Record_TFL::add_dt_array_10_tfl() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::TFL >*
Dt_Record_TFL::mutable_dt_array_10_tfl() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return &dt_array_10_tfl_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TFL >&
Dt_Record_TFL::dt_array_10_tfl() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TFL::kTflObjectIdFieldNumber;
const int TFL::kTflLightboxIdFieldNumber;
const int TFL::kTflExistenceProbabilityFieldNumber;
const int TFL::kTflRelevanceProbabilityFieldNumber;
const int TFL::kReserved1FieldNumber;
const int TFL::kTflColorFieldNumber;
const int TFL::kTflCameraSourceFieldNumber;
const int TFL::kTflRelevanceDirectionFieldNumber;
const int TFL::kTflStructureOrientationFieldNumber;
const int TFL::kTflRelDirQualityFieldNumber;
const int TFL::kTflModeFieldNumber;
const int TFL::kReserved2FieldNumber;
const int TFL::kTflWidthFieldNumber;
const int TFL::kTflWidthStdFieldNumber;
const int TFL::kTflHeightFieldNumber;
const int TFL::kTflHeightStdFieldNumber;
const int TFL::kTflLongDistanceFieldNumber;
const int TFL::kTflLongDistanceStdFieldNumber;
const int TFL::kTflRelHeightFieldNumber;
const int TFL::kTflRelHeightStdFieldNumber;
const int TFL::kReserved3FieldNumber;
const int TFL::kTflLatDistanceFieldNumber;
const int TFL::kTflLatDistanceStdFieldNumber;
const int TFL::kTflShapeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TFL::TFL()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.TFL)
}
TFL::TFL(const TFL& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tfl_object_id_, &from.tfl_object_id_,
    reinterpret_cast<char*>(&tfl_shape_) -
    reinterpret_cast<char*>(&tfl_object_id_) + sizeof(tfl_shape_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.TFL)
}

void TFL::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tfl_object_id_, 0, reinterpret_cast<char*>(&tfl_shape_) -
    reinterpret_cast<char*>(&tfl_object_id_) + sizeof(tfl_shape_));
}

TFL::~TFL() {
  // @@protoc_insertion_point(destructor:atd.meprocess.TFL)
  SharedDtor();
}

void TFL::SharedDtor() {
}

void TFL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TFL& TFL::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

TFL* TFL::New(::google::protobuf::Arena* arena) const {
  TFL* n = new TFL;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TFL::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.TFL)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tfl_object_id_, 0, reinterpret_cast<char*>(&tfl_relevance_direction_) -
      reinterpret_cast<char*>(&tfl_object_id_) + sizeof(tfl_relevance_direction_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&tfl_structure_orientation_, 0, reinterpret_cast<char*>(&tfl_height_std_) -
      reinterpret_cast<char*>(&tfl_structure_orientation_) + sizeof(tfl_height_std_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&tfl_long_distance_, 0, reinterpret_cast<char*>(&tfl_shape_) -
      reinterpret_cast<char*>(&tfl_long_distance_) + sizeof(tfl_shape_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TFL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.TFL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tfl_object_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tfl_object_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_object_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_lightbox_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tfl_lightbox_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_lightbox_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_existence_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_tfl_existence_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_existence_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_relevance_probability = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_tfl_relevance_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_relevance_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TFL.Tfl_colorType tfl_color = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::TFL_Tfl_colorType_IsValid(value)) {
            set_tfl_color(static_cast< ::atd::meprocess::TFL_Tfl_colorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(48u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_camera_source = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tfl_camera_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_camera_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_relevance_direction = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tfl_relevance_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_relevance_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TFL.Tfl_structure_orientationType tfl_structure_orientation = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::TFL_Tfl_structure_orientationType_IsValid(value)) {
            set_tfl_structure_orientation(static_cast< ::atd::meprocess::TFL_Tfl_structure_orientationType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_rel_dir_quality = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_tfl_rel_dir_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_rel_dir_quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TFL.Tfl_modeType tfl_mode = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::TFL_Tfl_modeType_IsValid(value)) {
            set_tfl_mode(static_cast< ::atd::meprocess::TFL_Tfl_modeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(88u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_2 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_reserved_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_width = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(109u)) {
          set_has_tfl_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_width_std = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_tfl_width_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_height = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_tfl_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_height_std = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_tfl_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_long_distance = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_tfl_long_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_long_distance_std = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_tfl_long_distance_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_rel_height = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(157u)) {
          set_has_tfl_rel_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_rel_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_rel_height_std = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_tfl_rel_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_rel_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_3 = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_lat_distance = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(181u)) {
          set_has_tfl_lat_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_lat_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tfl_lat_distance_std = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_tfl_lat_distance_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tfl_lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tfl_shape = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(192u)) {
          set_has_tfl_shape();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tfl_shape_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.TFL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.TFL)
  return false;
#undef DO_
}

void TFL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.TFL)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tfl_object_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tfl_object_id(), output);
  }

  // optional int32 tfl_lightbox_id = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tfl_lightbox_id(), output);
  }

  // optional float tfl_existence_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->tfl_existence_probability(), output);
  }

  // optional float tfl_relevance_probability = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->tfl_relevance_probability(), output);
  }

  // optional int32 reserved_1 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reserved_1(), output);
  }

  // optional .atd.meprocess.TFL.Tfl_colorType tfl_color = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->tfl_color(), output);
  }

  // optional int32 tfl_camera_source = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tfl_camera_source(), output);
  }

  // optional int32 tfl_relevance_direction = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tfl_relevance_direction(), output);
  }

  // optional .atd.meprocess.TFL.Tfl_structure_orientationType tfl_structure_orientation = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->tfl_structure_orientation(), output);
  }

  // optional float tfl_rel_dir_quality = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tfl_rel_dir_quality(), output);
  }

  // optional .atd.meprocess.TFL.Tfl_modeType tfl_mode = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      11, this->tfl_mode(), output);
  }

  // optional bool reserved_2 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->reserved_2(), output);
  }

  // optional float tfl_width = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(13, this->tfl_width(), output);
  }

  // optional float tfl_width_std = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tfl_width_std(), output);
  }

  // optional float tfl_height = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->tfl_height(), output);
  }

  // optional float tfl_height_std = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->tfl_height_std(), output);
  }

  // optional float tfl_long_distance = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tfl_long_distance(), output);
  }

  // optional float tfl_long_distance_std = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->tfl_long_distance_std(), output);
  }

  // optional float tfl_rel_height = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(19, this->tfl_rel_height(), output);
  }

  // optional float tfl_rel_height_std = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->tfl_rel_height_std(), output);
  }

  // optional int32 reserved_3 = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->reserved_3(), output);
  }

  // optional float tfl_lat_distance = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(22, this->tfl_lat_distance(), output);
  }

  // optional float tfl_lat_distance_std = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->tfl_lat_distance_std(), output);
  }

  // optional int32 tfl_shape = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->tfl_shape(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.TFL)
}

size_t TFL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.TFL)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 tfl_object_id = 1;
    if (has_tfl_object_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_object_id());
    }

    // optional int32 tfl_lightbox_id = 2;
    if (has_tfl_lightbox_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_lightbox_id());
    }

    // optional float tfl_existence_probability = 3;
    if (has_tfl_existence_probability()) {
      total_size += 1 + 4;
    }

    // optional float tfl_relevance_probability = 4;
    if (has_tfl_relevance_probability()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_1 = 5;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional .atd.meprocess.TFL.Tfl_colorType tfl_color = 6;
    if (has_tfl_color()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tfl_color());
    }

    // optional int32 tfl_camera_source = 7;
    if (has_tfl_camera_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_camera_source());
    }

    // optional int32 tfl_relevance_direction = 8;
    if (has_tfl_relevance_direction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_relevance_direction());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional .atd.meprocess.TFL.Tfl_structure_orientationType tfl_structure_orientation = 9;
    if (has_tfl_structure_orientation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tfl_structure_orientation());
    }

    // optional float tfl_rel_dir_quality = 10;
    if (has_tfl_rel_dir_quality()) {
      total_size += 1 + 4;
    }

    // optional .atd.meprocess.TFL.Tfl_modeType tfl_mode = 11;
    if (has_tfl_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tfl_mode());
    }

    // optional bool reserved_2 = 12;
    if (has_reserved_2()) {
      total_size += 1 + 1;
    }

    // optional float tfl_width = 13;
    if (has_tfl_width()) {
      total_size += 1 + 4;
    }

    // optional float tfl_width_std = 14;
    if (has_tfl_width_std()) {
      total_size += 1 + 4;
    }

    // optional float tfl_height = 15;
    if (has_tfl_height()) {
      total_size += 1 + 4;
    }

    // optional float tfl_height_std = 16;
    if (has_tfl_height_std()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float tfl_long_distance = 17;
    if (has_tfl_long_distance()) {
      total_size += 2 + 4;
    }

    // optional float tfl_long_distance_std = 18;
    if (has_tfl_long_distance_std()) {
      total_size += 2 + 4;
    }

    // optional float tfl_rel_height = 19;
    if (has_tfl_rel_height()) {
      total_size += 2 + 4;
    }

    // optional float tfl_rel_height_std = 20;
    if (has_tfl_rel_height_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_3 = 21;
    if (has_reserved_3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_3());
    }

    // optional float tfl_lat_distance = 22;
    if (has_tfl_lat_distance()) {
      total_size += 2 + 4;
    }

    // optional float tfl_lat_distance_std = 23;
    if (has_tfl_lat_distance_std()) {
      total_size += 2 + 4;
    }

    // optional int32 tfl_shape = 24;
    if (has_tfl_shape()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tfl_shape());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TFL::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TFL*>(&from));
}

void TFL::MergeFrom(const TFL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.TFL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tfl_object_id_ = from.tfl_object_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tfl_lightbox_id_ = from.tfl_lightbox_id_;
    }
    if (cached_has_bits & 0x00000004u) {
      tfl_existence_probability_ = from.tfl_existence_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      tfl_relevance_probability_ = from.tfl_relevance_probability_;
    }
    if (cached_has_bits & 0x00000010u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000020u) {
      tfl_color_ = from.tfl_color_;
    }
    if (cached_has_bits & 0x00000040u) {
      tfl_camera_source_ = from.tfl_camera_source_;
    }
    if (cached_has_bits & 0x00000080u) {
      tfl_relevance_direction_ = from.tfl_relevance_direction_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      tfl_structure_orientation_ = from.tfl_structure_orientation_;
    }
    if (cached_has_bits & 0x00000200u) {
      tfl_rel_dir_quality_ = from.tfl_rel_dir_quality_;
    }
    if (cached_has_bits & 0x00000400u) {
      tfl_mode_ = from.tfl_mode_;
    }
    if (cached_has_bits & 0x00000800u) {
      reserved_2_ = from.reserved_2_;
    }
    if (cached_has_bits & 0x00001000u) {
      tfl_width_ = from.tfl_width_;
    }
    if (cached_has_bits & 0x00002000u) {
      tfl_width_std_ = from.tfl_width_std_;
    }
    if (cached_has_bits & 0x00004000u) {
      tfl_height_ = from.tfl_height_;
    }
    if (cached_has_bits & 0x00008000u) {
      tfl_height_std_ = from.tfl_height_std_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      tfl_long_distance_ = from.tfl_long_distance_;
    }
    if (cached_has_bits & 0x00020000u) {
      tfl_long_distance_std_ = from.tfl_long_distance_std_;
    }
    if (cached_has_bits & 0x00040000u) {
      tfl_rel_height_ = from.tfl_rel_height_;
    }
    if (cached_has_bits & 0x00080000u) {
      tfl_rel_height_std_ = from.tfl_rel_height_std_;
    }
    if (cached_has_bits & 0x00100000u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00200000u) {
      tfl_lat_distance_ = from.tfl_lat_distance_;
    }
    if (cached_has_bits & 0x00400000u) {
      tfl_lat_distance_std_ = from.tfl_lat_distance_std_;
    }
    if (cached_has_bits & 0x00800000u) {
      tfl_shape_ = from.tfl_shape_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TFL::CopyFrom(const TFL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.TFL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TFL::IsInitialized() const {
  return true;
}

void TFL::Swap(TFL* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TFL::InternalSwap(TFL* other) {
  std::swap(tfl_object_id_, other->tfl_object_id_);
  std::swap(tfl_lightbox_id_, other->tfl_lightbox_id_);
  std::swap(tfl_existence_probability_, other->tfl_existence_probability_);
  std::swap(tfl_relevance_probability_, other->tfl_relevance_probability_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(tfl_color_, other->tfl_color_);
  std::swap(tfl_camera_source_, other->tfl_camera_source_);
  std::swap(tfl_relevance_direction_, other->tfl_relevance_direction_);
  std::swap(tfl_structure_orientation_, other->tfl_structure_orientation_);
  std::swap(tfl_rel_dir_quality_, other->tfl_rel_dir_quality_);
  std::swap(tfl_mode_, other->tfl_mode_);
  std::swap(reserved_2_, other->reserved_2_);
  std::swap(tfl_width_, other->tfl_width_);
  std::swap(tfl_width_std_, other->tfl_width_std_);
  std::swap(tfl_height_, other->tfl_height_);
  std::swap(tfl_height_std_, other->tfl_height_std_);
  std::swap(tfl_long_distance_, other->tfl_long_distance_);
  std::swap(tfl_long_distance_std_, other->tfl_long_distance_std_);
  std::swap(tfl_rel_height_, other->tfl_rel_height_);
  std::swap(tfl_rel_height_std_, other->tfl_rel_height_std_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(tfl_lat_distance_, other->tfl_lat_distance_);
  std::swap(tfl_lat_distance_std_, other->tfl_lat_distance_std_);
  std::swap(tfl_shape_, other->tfl_shape_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TFL::GetTypeName() const {
  return "atd.meprocess.TFL";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TFL

// optional int32 tfl_object_id = 1;
bool TFL::has_tfl_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TFL::set_has_tfl_object_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TFL::clear_has_tfl_object_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TFL::clear_tfl_object_id() {
  tfl_object_id_ = 0;
  clear_has_tfl_object_id();
}
::google::protobuf::int32 TFL::tfl_object_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_object_id)
  return tfl_object_id_;
}
void TFL::set_tfl_object_id(::google::protobuf::int32 value) {
  set_has_tfl_object_id();
  tfl_object_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_object_id)
}

// optional int32 tfl_lightbox_id = 2;
bool TFL::has_tfl_lightbox_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TFL::set_has_tfl_lightbox_id() {
  _has_bits_[0] |= 0x00000002u;
}
void TFL::clear_has_tfl_lightbox_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void TFL::clear_tfl_lightbox_id() {
  tfl_lightbox_id_ = 0;
  clear_has_tfl_lightbox_id();
}
::google::protobuf::int32 TFL::tfl_lightbox_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_lightbox_id)
  return tfl_lightbox_id_;
}
void TFL::set_tfl_lightbox_id(::google::protobuf::int32 value) {
  set_has_tfl_lightbox_id();
  tfl_lightbox_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_lightbox_id)
}

// optional float tfl_existence_probability = 3;
bool TFL::has_tfl_existence_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TFL::set_has_tfl_existence_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void TFL::clear_has_tfl_existence_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void TFL::clear_tfl_existence_probability() {
  tfl_existence_probability_ = 0;
  clear_has_tfl_existence_probability();
}
float TFL::tfl_existence_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_existence_probability)
  return tfl_existence_probability_;
}
void TFL::set_tfl_existence_probability(float value) {
  set_has_tfl_existence_probability();
  tfl_existence_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_existence_probability)
}

// optional float tfl_relevance_probability = 4;
bool TFL::has_tfl_relevance_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TFL::set_has_tfl_relevance_probability() {
  _has_bits_[0] |= 0x00000008u;
}
void TFL::clear_has_tfl_relevance_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
void TFL::clear_tfl_relevance_probability() {
  tfl_relevance_probability_ = 0;
  clear_has_tfl_relevance_probability();
}
float TFL::tfl_relevance_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_relevance_probability)
  return tfl_relevance_probability_;
}
void TFL::set_tfl_relevance_probability(float value) {
  set_has_tfl_relevance_probability();
  tfl_relevance_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_relevance_probability)
}

// optional int32 reserved_1 = 5;
bool TFL::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TFL::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000010u;
}
void TFL::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000010u;
}
void TFL::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 TFL::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.reserved_1)
  return reserved_1_;
}
void TFL::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.reserved_1)
}

// optional .atd.meprocess.TFL.Tfl_colorType tfl_color = 6;
bool TFL::has_tfl_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TFL::set_has_tfl_color() {
  _has_bits_[0] |= 0x00000020u;
}
void TFL::clear_has_tfl_color() {
  _has_bits_[0] &= ~0x00000020u;
}
void TFL::clear_tfl_color() {
  tfl_color_ = 0;
  clear_has_tfl_color();
}
::atd::meprocess::TFL_Tfl_colorType TFL::tfl_color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_color)
  return static_cast< ::atd::meprocess::TFL_Tfl_colorType >(tfl_color_);
}
void TFL::set_tfl_color(::atd::meprocess::TFL_Tfl_colorType value) {
  assert(::atd::meprocess::TFL_Tfl_colorType_IsValid(value));
  set_has_tfl_color();
  tfl_color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_color)
}

// optional int32 tfl_camera_source = 7;
bool TFL::has_tfl_camera_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TFL::set_has_tfl_camera_source() {
  _has_bits_[0] |= 0x00000040u;
}
void TFL::clear_has_tfl_camera_source() {
  _has_bits_[0] &= ~0x00000040u;
}
void TFL::clear_tfl_camera_source() {
  tfl_camera_source_ = 0;
  clear_has_tfl_camera_source();
}
::google::protobuf::int32 TFL::tfl_camera_source() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_camera_source)
  return tfl_camera_source_;
}
void TFL::set_tfl_camera_source(::google::protobuf::int32 value) {
  set_has_tfl_camera_source();
  tfl_camera_source_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_camera_source)
}

// optional int32 tfl_relevance_direction = 8;
bool TFL::has_tfl_relevance_direction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TFL::set_has_tfl_relevance_direction() {
  _has_bits_[0] |= 0x00000080u;
}
void TFL::clear_has_tfl_relevance_direction() {
  _has_bits_[0] &= ~0x00000080u;
}
void TFL::clear_tfl_relevance_direction() {
  tfl_relevance_direction_ = 0;
  clear_has_tfl_relevance_direction();
}
::google::protobuf::int32 TFL::tfl_relevance_direction() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_relevance_direction)
  return tfl_relevance_direction_;
}
void TFL::set_tfl_relevance_direction(::google::protobuf::int32 value) {
  set_has_tfl_relevance_direction();
  tfl_relevance_direction_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_relevance_direction)
}

// optional .atd.meprocess.TFL.Tfl_structure_orientationType tfl_structure_orientation = 9;
bool TFL::has_tfl_structure_orientation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TFL::set_has_tfl_structure_orientation() {
  _has_bits_[0] |= 0x00000100u;
}
void TFL::clear_has_tfl_structure_orientation() {
  _has_bits_[0] &= ~0x00000100u;
}
void TFL::clear_tfl_structure_orientation() {
  tfl_structure_orientation_ = 0;
  clear_has_tfl_structure_orientation();
}
::atd::meprocess::TFL_Tfl_structure_orientationType TFL::tfl_structure_orientation() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_structure_orientation)
  return static_cast< ::atd::meprocess::TFL_Tfl_structure_orientationType >(tfl_structure_orientation_);
}
void TFL::set_tfl_structure_orientation(::atd::meprocess::TFL_Tfl_structure_orientationType value) {
  assert(::atd::meprocess::TFL_Tfl_structure_orientationType_IsValid(value));
  set_has_tfl_structure_orientation();
  tfl_structure_orientation_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_structure_orientation)
}

// optional float tfl_rel_dir_quality = 10;
bool TFL::has_tfl_rel_dir_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TFL::set_has_tfl_rel_dir_quality() {
  _has_bits_[0] |= 0x00000200u;
}
void TFL::clear_has_tfl_rel_dir_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
void TFL::clear_tfl_rel_dir_quality() {
  tfl_rel_dir_quality_ = 0;
  clear_has_tfl_rel_dir_quality();
}
float TFL::tfl_rel_dir_quality() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_rel_dir_quality)
  return tfl_rel_dir_quality_;
}
void TFL::set_tfl_rel_dir_quality(float value) {
  set_has_tfl_rel_dir_quality();
  tfl_rel_dir_quality_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_rel_dir_quality)
}

// optional .atd.meprocess.TFL.Tfl_modeType tfl_mode = 11;
bool TFL::has_tfl_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TFL::set_has_tfl_mode() {
  _has_bits_[0] |= 0x00000400u;
}
void TFL::clear_has_tfl_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
void TFL::clear_tfl_mode() {
  tfl_mode_ = 0;
  clear_has_tfl_mode();
}
::atd::meprocess::TFL_Tfl_modeType TFL::tfl_mode() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_mode)
  return static_cast< ::atd::meprocess::TFL_Tfl_modeType >(tfl_mode_);
}
void TFL::set_tfl_mode(::atd::meprocess::TFL_Tfl_modeType value) {
  assert(::atd::meprocess::TFL_Tfl_modeType_IsValid(value));
  set_has_tfl_mode();
  tfl_mode_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_mode)
}

// optional bool reserved_2 = 12;
bool TFL::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TFL::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000800u;
}
void TFL::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000800u;
}
void TFL::clear_reserved_2() {
  reserved_2_ = false;
  clear_has_reserved_2();
}
bool TFL::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.reserved_2)
  return reserved_2_;
}
void TFL::set_reserved_2(bool value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.reserved_2)
}

// optional float tfl_width = 13;
bool TFL::has_tfl_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TFL::set_has_tfl_width() {
  _has_bits_[0] |= 0x00001000u;
}
void TFL::clear_has_tfl_width() {
  _has_bits_[0] &= ~0x00001000u;
}
void TFL::clear_tfl_width() {
  tfl_width_ = 0;
  clear_has_tfl_width();
}
float TFL::tfl_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_width)
  return tfl_width_;
}
void TFL::set_tfl_width(float value) {
  set_has_tfl_width();
  tfl_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_width)
}

// optional float tfl_width_std = 14;
bool TFL::has_tfl_width_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TFL::set_has_tfl_width_std() {
  _has_bits_[0] |= 0x00002000u;
}
void TFL::clear_has_tfl_width_std() {
  _has_bits_[0] &= ~0x00002000u;
}
void TFL::clear_tfl_width_std() {
  tfl_width_std_ = 0;
  clear_has_tfl_width_std();
}
float TFL::tfl_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_width_std)
  return tfl_width_std_;
}
void TFL::set_tfl_width_std(float value) {
  set_has_tfl_width_std();
  tfl_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_width_std)
}

// optional float tfl_height = 15;
bool TFL::has_tfl_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TFL::set_has_tfl_height() {
  _has_bits_[0] |= 0x00004000u;
}
void TFL::clear_has_tfl_height() {
  _has_bits_[0] &= ~0x00004000u;
}
void TFL::clear_tfl_height() {
  tfl_height_ = 0;
  clear_has_tfl_height();
}
float TFL::tfl_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_height)
  return tfl_height_;
}
void TFL::set_tfl_height(float value) {
  set_has_tfl_height();
  tfl_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_height)
}

// optional float tfl_height_std = 16;
bool TFL::has_tfl_height_std() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TFL::set_has_tfl_height_std() {
  _has_bits_[0] |= 0x00008000u;
}
void TFL::clear_has_tfl_height_std() {
  _has_bits_[0] &= ~0x00008000u;
}
void TFL::clear_tfl_height_std() {
  tfl_height_std_ = 0;
  clear_has_tfl_height_std();
}
float TFL::tfl_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_height_std)
  return tfl_height_std_;
}
void TFL::set_tfl_height_std(float value) {
  set_has_tfl_height_std();
  tfl_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_height_std)
}

// optional float tfl_long_distance = 17;
bool TFL::has_tfl_long_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TFL::set_has_tfl_long_distance() {
  _has_bits_[0] |= 0x00010000u;
}
void TFL::clear_has_tfl_long_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
void TFL::clear_tfl_long_distance() {
  tfl_long_distance_ = 0;
  clear_has_tfl_long_distance();
}
float TFL::tfl_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_long_distance)
  return tfl_long_distance_;
}
void TFL::set_tfl_long_distance(float value) {
  set_has_tfl_long_distance();
  tfl_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_long_distance)
}

// optional float tfl_long_distance_std = 18;
bool TFL::has_tfl_long_distance_std() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TFL::set_has_tfl_long_distance_std() {
  _has_bits_[0] |= 0x00020000u;
}
void TFL::clear_has_tfl_long_distance_std() {
  _has_bits_[0] &= ~0x00020000u;
}
void TFL::clear_tfl_long_distance_std() {
  tfl_long_distance_std_ = 0;
  clear_has_tfl_long_distance_std();
}
float TFL::tfl_long_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_long_distance_std)
  return tfl_long_distance_std_;
}
void TFL::set_tfl_long_distance_std(float value) {
  set_has_tfl_long_distance_std();
  tfl_long_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_long_distance_std)
}

// optional float tfl_rel_height = 19;
bool TFL::has_tfl_rel_height() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TFL::set_has_tfl_rel_height() {
  _has_bits_[0] |= 0x00040000u;
}
void TFL::clear_has_tfl_rel_height() {
  _has_bits_[0] &= ~0x00040000u;
}
void TFL::clear_tfl_rel_height() {
  tfl_rel_height_ = 0;
  clear_has_tfl_rel_height();
}
float TFL::tfl_rel_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_rel_height)
  return tfl_rel_height_;
}
void TFL::set_tfl_rel_height(float value) {
  set_has_tfl_rel_height();
  tfl_rel_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_rel_height)
}

// optional float tfl_rel_height_std = 20;
bool TFL::has_tfl_rel_height_std() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TFL::set_has_tfl_rel_height_std() {
  _has_bits_[0] |= 0x00080000u;
}
void TFL::clear_has_tfl_rel_height_std() {
  _has_bits_[0] &= ~0x00080000u;
}
void TFL::clear_tfl_rel_height_std() {
  tfl_rel_height_std_ = 0;
  clear_has_tfl_rel_height_std();
}
float TFL::tfl_rel_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_rel_height_std)
  return tfl_rel_height_std_;
}
void TFL::set_tfl_rel_height_std(float value) {
  set_has_tfl_rel_height_std();
  tfl_rel_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_rel_height_std)
}

// optional int32 reserved_3 = 21;
bool TFL::has_reserved_3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TFL::set_has_reserved_3() {
  _has_bits_[0] |= 0x00100000u;
}
void TFL::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00100000u;
}
void TFL::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
::google::protobuf::int32 TFL::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.reserved_3)
  return reserved_3_;
}
void TFL::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.reserved_3)
}

// optional float tfl_lat_distance = 22;
bool TFL::has_tfl_lat_distance() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TFL::set_has_tfl_lat_distance() {
  _has_bits_[0] |= 0x00200000u;
}
void TFL::clear_has_tfl_lat_distance() {
  _has_bits_[0] &= ~0x00200000u;
}
void TFL::clear_tfl_lat_distance() {
  tfl_lat_distance_ = 0;
  clear_has_tfl_lat_distance();
}
float TFL::tfl_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_lat_distance)
  return tfl_lat_distance_;
}
void TFL::set_tfl_lat_distance(float value) {
  set_has_tfl_lat_distance();
  tfl_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_lat_distance)
}

// optional float tfl_lat_distance_std = 23;
bool TFL::has_tfl_lat_distance_std() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TFL::set_has_tfl_lat_distance_std() {
  _has_bits_[0] |= 0x00400000u;
}
void TFL::clear_has_tfl_lat_distance_std() {
  _has_bits_[0] &= ~0x00400000u;
}
void TFL::clear_tfl_lat_distance_std() {
  tfl_lat_distance_std_ = 0;
  clear_has_tfl_lat_distance_std();
}
float TFL::tfl_lat_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_lat_distance_std)
  return tfl_lat_distance_std_;
}
void TFL::set_tfl_lat_distance_std(float value) {
  set_has_tfl_lat_distance_std();
  tfl_lat_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_lat_distance_std)
}

// optional int32 tfl_shape = 24;
bool TFL::has_tfl_shape() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TFL::set_has_tfl_shape() {
  _has_bits_[0] |= 0x00800000u;
}
void TFL::clear_has_tfl_shape() {
  _has_bits_[0] &= ~0x00800000u;
}
void TFL::clear_tfl_shape() {
  tfl_shape_ = 0;
  clear_has_tfl_shape();
}
::google::protobuf::int32 TFL::tfl_shape() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_shape)
  return tfl_shape_;
}
void TFL::set_tfl_shape(::google::protobuf::int32 value) {
  set_has_tfl_shape();
  tfl_shape_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_shape)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSRCommon::kZeroByteFieldNumber;
const int TSRCommon::kTsrProtocolVersionFieldNumber;
const int TSRCommon::kTsrSyncIdFieldNumber;
const int TSRCommon::kReserved1FieldNumber;
const int TSRCommon::kTsrAprSignCountFieldNumber;
const int TSRCommon::kTsrFilteredSignCountFieldNumber;
const int TSRCommon::kTsrUndertrackingSignCountFieldNumber;
const int TSRCommon::kTsrHeaderBufferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSRCommon::TSRCommon()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.TSRCommon)
}
TSRCommon::TSRCommon(const TSRCommon& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&zero_byte_, &from.zero_byte_,
    reinterpret_cast<char*>(&tsr_header_buffer_) -
    reinterpret_cast<char*>(&zero_byte_) + sizeof(tsr_header_buffer_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.TSRCommon)
}

void TSRCommon::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&zero_byte_, 0, reinterpret_cast<char*>(&tsr_header_buffer_) -
    reinterpret_cast<char*>(&zero_byte_) + sizeof(tsr_header_buffer_));
}

TSRCommon::~TSRCommon() {
  // @@protoc_insertion_point(destructor:atd.meprocess.TSRCommon)
  SharedDtor();
}

void TSRCommon::SharedDtor() {
}

void TSRCommon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TSRCommon& TSRCommon::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

TSRCommon* TSRCommon::New(::google::protobuf::Arena* arena) const {
  TSRCommon* n = new TSRCommon;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSRCommon::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.TSRCommon)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&zero_byte_, 0, reinterpret_cast<char*>(&tsr_header_buffer_) -
      reinterpret_cast<char*>(&zero_byte_) + sizeof(tsr_header_buffer_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TSRCommon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.TSRCommon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 zero_byte = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_zero_byte();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &zero_byte_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_protocol_version = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tsr_protocol_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_protocol_version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_sync_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tsr_sync_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_sync_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_1 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_reserved_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_apr__sign_count = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_tsr_apr__sign_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_apr__sign_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_filtered_sign_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_tsr_filtered_sign_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_filtered_sign_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_undertracking_sign_count = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tsr_undertracking_sign_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_undertracking_sign_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_header_buffer = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_tsr_header_buffer();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_header_buffer_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.TSRCommon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.TSRCommon)
  return false;
#undef DO_
}

void TSRCommon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.TSRCommon)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 zero_byte = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->zero_byte(), output);
  }

  // optional int32 tsr_protocol_version = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsr_protocol_version(), output);
  }

  // optional int32 tsr_sync_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tsr_sync_id(), output);
  }

  // optional int32 reserved_1 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reserved_1(), output);
  }

  // optional int32 tsr_apr__sign_count = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tsr_apr__sign_count(), output);
  }

  // optional int32 tsr_filtered_sign_count = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->tsr_filtered_sign_count(), output);
  }

  // optional int32 tsr_undertracking_sign_count = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tsr_undertracking_sign_count(), output);
  }

  // optional int32 tsr_header_buffer = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->tsr_header_buffer(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.TSRCommon)
}

size_t TSRCommon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.TSRCommon)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 zero_byte = 1;
    if (has_zero_byte()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->zero_byte());
    }

    // optional int32 tsr_protocol_version = 2;
    if (has_tsr_protocol_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_protocol_version());
    }

    // optional int32 tsr_sync_id = 3;
    if (has_tsr_sync_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_sync_id());
    }

    // optional int32 reserved_1 = 4;
    if (has_reserved_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_1());
    }

    // optional int32 tsr_apr__sign_count = 5;
    if (has_tsr_apr__sign_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_apr__sign_count());
    }

    // optional int32 tsr_filtered_sign_count = 6;
    if (has_tsr_filtered_sign_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_filtered_sign_count());
    }

    // optional int32 tsr_undertracking_sign_count = 7;
    if (has_tsr_undertracking_sign_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_undertracking_sign_count());
    }

    // optional int32 tsr_header_buffer = 8;
    if (has_tsr_header_buffer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_header_buffer());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSRCommon::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TSRCommon*>(&from));
}

void TSRCommon::MergeFrom(const TSRCommon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.TSRCommon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      zero_byte_ = from.zero_byte_;
    }
    if (cached_has_bits & 0x00000002u) {
      tsr_protocol_version_ = from.tsr_protocol_version_;
    }
    if (cached_has_bits & 0x00000004u) {
      tsr_sync_id_ = from.tsr_sync_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      reserved_1_ = from.reserved_1_;
    }
    if (cached_has_bits & 0x00000010u) {
      tsr_apr__sign_count_ = from.tsr_apr__sign_count_;
    }
    if (cached_has_bits & 0x00000020u) {
      tsr_filtered_sign_count_ = from.tsr_filtered_sign_count_;
    }
    if (cached_has_bits & 0x00000040u) {
      tsr_undertracking_sign_count_ = from.tsr_undertracking_sign_count_;
    }
    if (cached_has_bits & 0x00000080u) {
      tsr_header_buffer_ = from.tsr_header_buffer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TSRCommon::CopyFrom(const TSRCommon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.TSRCommon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSRCommon::IsInitialized() const {
  return true;
}

void TSRCommon::Swap(TSRCommon* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSRCommon::InternalSwap(TSRCommon* other) {
  std::swap(zero_byte_, other->zero_byte_);
  std::swap(tsr_protocol_version_, other->tsr_protocol_version_);
  std::swap(tsr_sync_id_, other->tsr_sync_id_);
  std::swap(reserved_1_, other->reserved_1_);
  std::swap(tsr_apr__sign_count_, other->tsr_apr__sign_count_);
  std::swap(tsr_filtered_sign_count_, other->tsr_filtered_sign_count_);
  std::swap(tsr_undertracking_sign_count_, other->tsr_undertracking_sign_count_);
  std::swap(tsr_header_buffer_, other->tsr_header_buffer_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TSRCommon::GetTypeName() const {
  return "atd.meprocess.TSRCommon";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSRCommon

// optional int32 zero_byte = 1;
bool TSRCommon::has_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TSRCommon::set_has_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
void TSRCommon::clear_has_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
void TSRCommon::clear_zero_byte() {
  zero_byte_ = 0;
  clear_has_zero_byte();
}
::google::protobuf::int32 TSRCommon::zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.zero_byte)
  return zero_byte_;
}
void TSRCommon::set_zero_byte(::google::protobuf::int32 value) {
  set_has_zero_byte();
  zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.zero_byte)
}

// optional int32 tsr_protocol_version = 2;
bool TSRCommon::has_tsr_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TSRCommon::set_has_tsr_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
void TSRCommon::clear_has_tsr_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
void TSRCommon::clear_tsr_protocol_version() {
  tsr_protocol_version_ = 0;
  clear_has_tsr_protocol_version();
}
::google::protobuf::int32 TSRCommon::tsr_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_protocol_version)
  return tsr_protocol_version_;
}
void TSRCommon::set_tsr_protocol_version(::google::protobuf::int32 value) {
  set_has_tsr_protocol_version();
  tsr_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_protocol_version)
}

// optional int32 tsr_sync_id = 3;
bool TSRCommon::has_tsr_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TSRCommon::set_has_tsr_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
void TSRCommon::clear_has_tsr_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void TSRCommon::clear_tsr_sync_id() {
  tsr_sync_id_ = 0;
  clear_has_tsr_sync_id();
}
::google::protobuf::int32 TSRCommon::tsr_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_sync_id)
  return tsr_sync_id_;
}
void TSRCommon::set_tsr_sync_id(::google::protobuf::int32 value) {
  set_has_tsr_sync_id();
  tsr_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_sync_id)
}

// optional int32 reserved_1 = 4;
bool TSRCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TSRCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000008u;
}
void TSRCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000008u;
}
void TSRCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
::google::protobuf::int32 TSRCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.reserved_1)
  return reserved_1_;
}
void TSRCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.reserved_1)
}

// optional int32 tsr_apr__sign_count = 5;
bool TSRCommon::has_tsr_apr__sign_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TSRCommon::set_has_tsr_apr__sign_count() {
  _has_bits_[0] |= 0x00000010u;
}
void TSRCommon::clear_has_tsr_apr__sign_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void TSRCommon::clear_tsr_apr__sign_count() {
  tsr_apr__sign_count_ = 0;
  clear_has_tsr_apr__sign_count();
}
::google::protobuf::int32 TSRCommon::tsr_apr__sign_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_apr__sign_count)
  return tsr_apr__sign_count_;
}
void TSRCommon::set_tsr_apr__sign_count(::google::protobuf::int32 value) {
  set_has_tsr_apr__sign_count();
  tsr_apr__sign_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_apr__sign_count)
}

// optional int32 tsr_filtered_sign_count = 6;
bool TSRCommon::has_tsr_filtered_sign_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TSRCommon::set_has_tsr_filtered_sign_count() {
  _has_bits_[0] |= 0x00000020u;
}
void TSRCommon::clear_has_tsr_filtered_sign_count() {
  _has_bits_[0] &= ~0x00000020u;
}
void TSRCommon::clear_tsr_filtered_sign_count() {
  tsr_filtered_sign_count_ = 0;
  clear_has_tsr_filtered_sign_count();
}
::google::protobuf::int32 TSRCommon::tsr_filtered_sign_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_filtered_sign_count)
  return tsr_filtered_sign_count_;
}
void TSRCommon::set_tsr_filtered_sign_count(::google::protobuf::int32 value) {
  set_has_tsr_filtered_sign_count();
  tsr_filtered_sign_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_filtered_sign_count)
}

// optional int32 tsr_undertracking_sign_count = 7;
bool TSRCommon::has_tsr_undertracking_sign_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TSRCommon::set_has_tsr_undertracking_sign_count() {
  _has_bits_[0] |= 0x00000040u;
}
void TSRCommon::clear_has_tsr_undertracking_sign_count() {
  _has_bits_[0] &= ~0x00000040u;
}
void TSRCommon::clear_tsr_undertracking_sign_count() {
  tsr_undertracking_sign_count_ = 0;
  clear_has_tsr_undertracking_sign_count();
}
::google::protobuf::int32 TSRCommon::tsr_undertracking_sign_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_undertracking_sign_count)
  return tsr_undertracking_sign_count_;
}
void TSRCommon::set_tsr_undertracking_sign_count(::google::protobuf::int32 value) {
  set_has_tsr_undertracking_sign_count();
  tsr_undertracking_sign_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_undertracking_sign_count)
}

// optional int32 tsr_header_buffer = 8;
bool TSRCommon::has_tsr_header_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TSRCommon::set_has_tsr_header_buffer() {
  _has_bits_[0] |= 0x00000080u;
}
void TSRCommon::clear_has_tsr_header_buffer() {
  _has_bits_[0] &= ~0x00000080u;
}
void TSRCommon::clear_tsr_header_buffer() {
  tsr_header_buffer_ = 0;
  clear_has_tsr_header_buffer();
}
::google::protobuf::int32 TSRCommon::tsr_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_header_buffer)
  return tsr_header_buffer_;
}
void TSRCommon::set_tsr_header_buffer(::google::protobuf::int32 value) {
  set_has_tsr_header_buffer();
  tsr_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_header_buffer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Record_TSR::kHeaderFieldNumber;
const int Dt_Record_TSR::kReservedmsgFieldNumber;
const int Dt_Record_TSR::kSttsrcommonFieldNumber;
const int Dt_Record_TSR::kDtArray20TsrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Record_TSR::Dt_Record_TSR()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.Dt_Record_TSR)
}
Dt_Record_TSR::Dt_Record_TSR(const Dt_Record_TSR& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      dt_array_20_tsr_(from.dt_array_20_tsr_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_sttsrcommon()) {
    sttsrcommon_ = new ::atd::meprocess::TSRCommon(*from.sttsrcommon_);
  } else {
    sttsrcommon_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.Dt_Record_TSR)
}

void Dt_Record_TSR::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&sttsrcommon_) -
    reinterpret_cast<char*>(&header_) + sizeof(sttsrcommon_));
}

Dt_Record_TSR::~Dt_Record_TSR() {
  // @@protoc_insertion_point(destructor:atd.meprocess.Dt_Record_TSR)
  SharedDtor();
}

void Dt_Record_TSR::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete sttsrcommon_;
  }
}

void Dt_Record_TSR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Record_TSR& Dt_Record_TSR::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Record_TSR* Dt_Record_TSR::New(::google::protobuf::Arena* arena) const {
  Dt_Record_TSR* n = new Dt_Record_TSR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Record_TSR::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.Dt_Record_TSR)
  dt_array_20_tsr_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_sttsrcommon()) {
      GOOGLE_DCHECK(sttsrcommon_ != NULL);
      sttsrcommon_->::atd::meprocess::TSRCommon::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Record_TSR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.Dt_Record_TSR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TSRCommon sttsrcommon = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sttsrcommon()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.meprocess.TSR dt_array_20_tsr = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_dt_array_20_tsr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.Dt_Record_TSR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.Dt_Record_TSR)
  return false;
#undef DO_
}

void Dt_Record_TSR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.Dt_Record_TSR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.meprocess.TSRCommon sttsrcommon = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->sttsrcommon_, output);
  }

  // repeated .atd.meprocess.TSR dt_array_20_tsr = 4;
  for (unsigned int i = 0, n = this->dt_array_20_tsr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->dt_array_20_tsr(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.Dt_Record_TSR)
}

size_t Dt_Record_TSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.Dt_Record_TSR)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.meprocess.TSR dt_array_20_tsr = 4;
  {
    unsigned int count = this->dt_array_20_tsr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dt_array_20_tsr(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.meprocess.TSRCommon sttsrcommon = 3;
    if (has_sttsrcommon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->sttsrcommon_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Record_TSR::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Record_TSR*>(&from));
}

void Dt_Record_TSR::MergeFrom(const Dt_Record_TSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.Dt_Record_TSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dt_array_20_tsr_.MergeFrom(from.dt_array_20_tsr_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_sttsrcommon()->::atd::meprocess::TSRCommon::MergeFrom(from.sttsrcommon());
    }
  }
}

void Dt_Record_TSR::CopyFrom(const Dt_Record_TSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.Dt_Record_TSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Record_TSR::IsInitialized() const {
  return true;
}

void Dt_Record_TSR::Swap(Dt_Record_TSR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Record_TSR::InternalSwap(Dt_Record_TSR* other) {
  dt_array_20_tsr_.InternalSwap(&other->dt_array_20_tsr_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(sttsrcommon_, other->sttsrcommon_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Record_TSR::GetTypeName() const {
  return "atd.meprocess.Dt_Record_TSR";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_TSR

// optional .atd.common.Header header = 1;
bool Dt_Record_TSR::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Record_TSR::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Record_TSR::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Record_TSR::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Dt_Record_TSR::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Dt_Record_TSR::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.header)
  return header_;
}
::atd::common::Header* Dt_Record_TSR::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TSR.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Dt_Record_TSR::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TSR.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Dt_Record_TSR::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Record_TSR::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Record_TSR::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Record_TSR::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Dt_Record_TSR::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Dt_Record_TSR::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Dt_Record_TSR::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TSR.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Dt_Record_TSR::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TSR.reservedmsg)
}

// optional .atd.meprocess.TSRCommon sttsrcommon = 3;
bool Dt_Record_TSR::has_sttsrcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Record_TSR::set_has_sttsrcommon() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Record_TSR::clear_has_sttsrcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Record_TSR::clear_sttsrcommon() {
  if (sttsrcommon_ != NULL) sttsrcommon_->::atd::meprocess::TSRCommon::Clear();
  clear_has_sttsrcommon();
}
const ::atd::meprocess::TSRCommon& Dt_Record_TSR::sttsrcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.sttsrcommon)
  return sttsrcommon_ != NULL ? *sttsrcommon_
                         : *::atd::meprocess::TSRCommon::internal_default_instance();
}
::atd::meprocess::TSRCommon* Dt_Record_TSR::mutable_sttsrcommon() {
  set_has_sttsrcommon();
  if (sttsrcommon_ == NULL) {
    sttsrcommon_ = new ::atd::meprocess::TSRCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.sttsrcommon)
  return sttsrcommon_;
}
::atd::meprocess::TSRCommon* Dt_Record_TSR::release_sttsrcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TSR.sttsrcommon)
  clear_has_sttsrcommon();
  ::atd::meprocess::TSRCommon* temp = sttsrcommon_;
  sttsrcommon_ = NULL;
  return temp;
}
void Dt_Record_TSR::set_allocated_sttsrcommon(::atd::meprocess::TSRCommon* sttsrcommon) {
  delete sttsrcommon_;
  sttsrcommon_ = sttsrcommon;
  if (sttsrcommon) {
    set_has_sttsrcommon();
  } else {
    clear_has_sttsrcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TSR.sttsrcommon)
}

// repeated .atd.meprocess.TSR dt_array_20_tsr = 4;
int Dt_Record_TSR::dt_array_20_tsr_size() const {
  return dt_array_20_tsr_.size();
}
void Dt_Record_TSR::clear_dt_array_20_tsr() {
  dt_array_20_tsr_.Clear();
}
const ::atd::meprocess::TSR& Dt_Record_TSR::dt_array_20_tsr(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_.Get(index);
}
::atd::meprocess::TSR* Dt_Record_TSR::mutable_dt_array_20_tsr(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_.Mutable(index);
}
::atd::meprocess::TSR* Dt_Record_TSR::add_dt_array_20_tsr() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::meprocess::TSR >*
Dt_Record_TSR::mutable_dt_array_20_tsr() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return &dt_array_20_tsr_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TSR >&
Dt_Record_TSR::dt_array_20_tsr() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSR::kTsrIdFieldNumber;
const int TSR::kTsrCameraSourceFieldNumber;
const int TSR::kTsrSignNameFieldNumber;
const int TSR::kTsrRelevancyFieldNumber;
const int TSR::kTsrFilterTypeFieldNumber;
const int TSR::kReserved3FieldNumber;
const int TSR::kTsrSup1SignnameFieldNumber;
const int TSR::kTsrSup1ConfidenceFieldNumber;
const int TSR::kTsrSup2SignnameFieldNumber;
const int TSR::kTsrSup2ConfidenceFieldNumber;
const int TSR::kReserved4FieldNumber;
const int TSR::kTsrSignShapeFieldNumber;
const int TSR::kTsrSignStructureFieldNumber;
const int TSR::kTsrConfidenceFieldNumber;
const int TSR::kTsrSignLongDistanceFieldNumber;
const int TSR::kReserved5FieldNumber;
const int TSR::kTsrSignLateralDistanceFieldNumber;
const int TSR::kTsrSignHeightFieldNumber;
const int TSR::kReserved6FieldNumber;
const int TSR::kTsrSignLongDistanceStdFieldNumber;
const int TSR::kTsrSignLatDistanceStdFieldNumber;
const int TSR::kReserved7FieldNumber;
const int TSR::kTsrSignHeightStdFieldNumber;
const int TSR::kTsrSignPanelWidthFieldNumber;
const int TSR::kReserved8FieldNumber;
const int TSR::kTsrSignPanelHeightFieldNumber;
const int TSR::kTsrSignPanelWidthStdFieldNumber;
const int TSR::kTsrSignPanelHeightStdFieldNumber;
const int TSR::kReserved9FieldNumber;
const int TSR::kTsrTrackingAgeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSR::TSR()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.meprocess.TSR)
}
TSR::TSR(const TSR& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&tsr_id_, &from.tsr_id_,
    reinterpret_cast<char*>(&tsr_tracking_age_) -
    reinterpret_cast<char*>(&tsr_id_) + sizeof(tsr_tracking_age_));
  // @@protoc_insertion_point(copy_constructor:atd.meprocess.TSR)
}

void TSR::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&tsr_id_, 0, reinterpret_cast<char*>(&tsr_tracking_age_) -
    reinterpret_cast<char*>(&tsr_id_) + sizeof(tsr_tracking_age_));
}

TSR::~TSR() {
  // @@protoc_insertion_point(destructor:atd.meprocess.TSR)
  SharedDtor();
}

void TSR::SharedDtor() {
}

void TSR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TSR& TSR::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  return *internal_default_instance();
}

TSR* TSR::New(::google::protobuf::Arena* arena) const {
  TSR* n = new TSR;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSR::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.meprocess.TSR)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&tsr_id_, 0, reinterpret_cast<char*>(&tsr_sup1_confidence_) -
      reinterpret_cast<char*>(&tsr_id_) + sizeof(tsr_sup1_confidence_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&tsr_sup2_signname_, 0, reinterpret_cast<char*>(&reserved_5_) -
      reinterpret_cast<char*>(&tsr_sup2_signname_) + sizeof(reserved_5_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&tsr_sign_lateral_distance_, 0, reinterpret_cast<char*>(&tsr_sign_panel_width_) -
      reinterpret_cast<char*>(&tsr_sign_lateral_distance_) + sizeof(tsr_sign_panel_width_));
  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    ::memset(&reserved_8_, 0, reinterpret_cast<char*>(&tsr_tracking_age_) -
      reinterpret_cast<char*>(&reserved_8_) + sizeof(tsr_tracking_age_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TSR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.meprocess.TSR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 tsr_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_tsr_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_camera_source = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_tsr_camera_source();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_camera_source_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_sign_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_tsr_sign_name();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_sign_name_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TSR.Tsr_relevancyType tsr_relevancy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::TSR_Tsr_relevancyType_IsValid(value)) {
            set_tsr_relevancy(static_cast< ::atd::meprocess::TSR_Tsr_relevancyType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(32u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TSR.Tsr_filter_typeType tsr_filter_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::TSR_Tsr_filter_typeType_IsValid(value)) {
            set_tsr_filter_type(static_cast< ::atd::meprocess::TSR_Tsr_filter_typeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool reserved_3 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_reserved_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reserved_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_sup1_signname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_tsr_sup1_signname();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_sup1_signname_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sup1_confidence = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_tsr_sup1_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sup1_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 tsr_sup2_signname = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_tsr_sup2_signname();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tsr_sup2_signname_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sup2_confidence = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_tsr_sup2_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sup2_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_4 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_reserved_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TSR.Tsr_sign_shapeType tsr_sign_shape = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::TSR_Tsr_sign_shapeType_IsValid(value)) {
            set_tsr_sign_shape(static_cast< ::atd::meprocess::TSR_Tsr_sign_shapeType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(96u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.TSR.Tsr_sign_structureType tsr_sign_structure = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::meprocess::TSR_Tsr_sign_structureType_IsValid(value)) {
            set_tsr_sign_structure(static_cast< ::atd::meprocess::TSR_Tsr_sign_structureType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(104u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_confidence = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(117u)) {
          set_has_tsr_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_long_distance = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(125u)) {
          set_has_tsr_sign_long_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_long_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_5 = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_reserved_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_lateral_distance = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_tsr_sign_lateral_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_lateral_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_height = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(149u)) {
          set_has_tsr_sign_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_6 = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_reserved_6();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_6_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_long_distance_std = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(165u)) {
          set_has_tsr_sign_long_distance_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_long_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_lat_distance_std = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(173u)) {
          set_has_tsr_sign_lat_distance_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_lat_distance_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_7 = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_reserved_7();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_7_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_height_std = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(189u)) {
          set_has_tsr_sign_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_panel_width = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(197u)) {
          set_has_tsr_sign_panel_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_panel_width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_8 = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(200u)) {
          set_has_reserved_8();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_8_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_panel_height = 26;
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(213u)) {
          set_has_tsr_sign_panel_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_panel_height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_panel_width_std = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(221u)) {
          set_has_tsr_sign_panel_width_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_panel_width_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_sign_panel_height_std = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(229u)) {
          set_has_tsr_sign_panel_height_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_sign_panel_height_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved_9 = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(232u)) {
          set_has_reserved_9();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_9_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float tsr_tracking_age = 30;
      case 30: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(245u)) {
          set_has_tsr_tracking_age();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &tsr_tracking_age_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.meprocess.TSR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.meprocess.TSR)
  return false;
#undef DO_
}

void TSR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.meprocess.TSR)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 tsr_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tsr_id(), output);
  }

  // optional int32 tsr_camera_source = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tsr_camera_source(), output);
  }

  // optional int32 tsr_sign_name = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->tsr_sign_name(), output);
  }

  // optional .atd.meprocess.TSR.Tsr_relevancyType tsr_relevancy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->tsr_relevancy(), output);
  }

  // optional .atd.meprocess.TSR.Tsr_filter_typeType tsr_filter_type = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->tsr_filter_type(), output);
  }

  // optional bool reserved_3 = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->reserved_3(), output);
  }

  // optional int32 tsr_sup1_signname = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->tsr_sup1_signname(), output);
  }

  // optional float tsr_sup1_confidence = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->tsr_sup1_confidence(), output);
  }

  // optional int32 tsr_sup2_signname = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tsr_sup2_signname(), output);
  }

  // optional float tsr_sup2_confidence = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->tsr_sup2_confidence(), output);
  }

  // optional int32 reserved_4 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->reserved_4(), output);
  }

  // optional .atd.meprocess.TSR.Tsr_sign_shapeType tsr_sign_shape = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->tsr_sign_shape(), output);
  }

  // optional .atd.meprocess.TSR.Tsr_sign_structureType tsr_sign_structure = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->tsr_sign_structure(), output);
  }

  // optional float tsr_confidence = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->tsr_confidence(), output);
  }

  // optional float tsr_sign_long_distance = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->tsr_sign_long_distance(), output);
  }

  // optional int32 reserved_5 = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->reserved_5(), output);
  }

  // optional float tsr_sign_lateral_distance = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->tsr_sign_lateral_distance(), output);
  }

  // optional float tsr_sign_height = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->tsr_sign_height(), output);
  }

  // optional int32 reserved_6 = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->reserved_6(), output);
  }

  // optional float tsr_sign_long_distance_std = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(20, this->tsr_sign_long_distance_std(), output);
  }

  // optional float tsr_sign_lat_distance_std = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(21, this->tsr_sign_lat_distance_std(), output);
  }

  // optional int32 reserved_7 = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->reserved_7(), output);
  }

  // optional float tsr_sign_height_std = 23;
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(23, this->tsr_sign_height_std(), output);
  }

  // optional float tsr_sign_panel_width = 24;
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->tsr_sign_panel_width(), output);
  }

  // optional int32 reserved_8 = 25;
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->reserved_8(), output);
  }

  // optional float tsr_sign_panel_height = 26;
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(26, this->tsr_sign_panel_height(), output);
  }

  // optional float tsr_sign_panel_width_std = 27;
  if (cached_has_bits & 0x04000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(27, this->tsr_sign_panel_width_std(), output);
  }

  // optional float tsr_sign_panel_height_std = 28;
  if (cached_has_bits & 0x08000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(28, this->tsr_sign_panel_height_std(), output);
  }

  // optional int32 reserved_9 = 29;
  if (cached_has_bits & 0x10000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->reserved_9(), output);
  }

  // optional float tsr_tracking_age = 30;
  if (cached_has_bits & 0x20000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(30, this->tsr_tracking_age(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.meprocess.TSR)
}

size_t TSR::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.meprocess.TSR)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 tsr_id = 1;
    if (has_tsr_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_id());
    }

    // optional int32 tsr_camera_source = 2;
    if (has_tsr_camera_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_camera_source());
    }

    // optional int32 tsr_sign_name = 3;
    if (has_tsr_sign_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_sign_name());
    }

    // optional .atd.meprocess.TSR.Tsr_relevancyType tsr_relevancy = 4;
    if (has_tsr_relevancy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tsr_relevancy());
    }

    // optional .atd.meprocess.TSR.Tsr_filter_typeType tsr_filter_type = 5;
    if (has_tsr_filter_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tsr_filter_type());
    }

    // optional bool reserved_3 = 6;
    if (has_reserved_3()) {
      total_size += 1 + 1;
    }

    // optional int32 tsr_sup1_signname = 7;
    if (has_tsr_sup1_signname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_sup1_signname());
    }

    // optional float tsr_sup1_confidence = 8;
    if (has_tsr_sup1_confidence()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 tsr_sup2_signname = 9;
    if (has_tsr_sup2_signname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tsr_sup2_signname());
    }

    // optional float tsr_sup2_confidence = 10;
    if (has_tsr_sup2_confidence()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_4 = 11;
    if (has_reserved_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_4());
    }

    // optional .atd.meprocess.TSR.Tsr_sign_shapeType tsr_sign_shape = 12;
    if (has_tsr_sign_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tsr_sign_shape());
    }

    // optional .atd.meprocess.TSR.Tsr_sign_structureType tsr_sign_structure = 13;
    if (has_tsr_sign_structure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tsr_sign_structure());
    }

    // optional float tsr_confidence = 14;
    if (has_tsr_confidence()) {
      total_size += 1 + 4;
    }

    // optional float tsr_sign_long_distance = 15;
    if (has_tsr_sign_long_distance()) {
      total_size += 1 + 4;
    }

    // optional int32 reserved_5 = 16;
    if (has_reserved_5()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_5());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional float tsr_sign_lateral_distance = 17;
    if (has_tsr_sign_lateral_distance()) {
      total_size += 2 + 4;
    }

    // optional float tsr_sign_height = 18;
    if (has_tsr_sign_height()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_6 = 19;
    if (has_reserved_6()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_6());
    }

    // optional float tsr_sign_long_distance_std = 20;
    if (has_tsr_sign_long_distance_std()) {
      total_size += 2 + 4;
    }

    // optional float tsr_sign_lat_distance_std = 21;
    if (has_tsr_sign_lat_distance_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_7 = 22;
    if (has_reserved_7()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_7());
    }

    // optional float tsr_sign_height_std = 23;
    if (has_tsr_sign_height_std()) {
      total_size += 2 + 4;
    }

    // optional float tsr_sign_panel_width = 24;
    if (has_tsr_sign_panel_width()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 1056964608u) {
    // optional int32 reserved_8 = 25;
    if (has_reserved_8()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_8());
    }

    // optional float tsr_sign_panel_height = 26;
    if (has_tsr_sign_panel_height()) {
      total_size += 2 + 4;
    }

    // optional float tsr_sign_panel_width_std = 27;
    if (has_tsr_sign_panel_width_std()) {
      total_size += 2 + 4;
    }

    // optional float tsr_sign_panel_height_std = 28;
    if (has_tsr_sign_panel_height_std()) {
      total_size += 2 + 4;
    }

    // optional int32 reserved_9 = 29;
    if (has_reserved_9()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved_9());
    }

    // optional float tsr_tracking_age = 30;
    if (has_tsr_tracking_age()) {
      total_size += 2 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSR::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TSR*>(&from));
}

void TSR::MergeFrom(const TSR& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.meprocess.TSR)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      tsr_id_ = from.tsr_id_;
    }
    if (cached_has_bits & 0x00000002u) {
      tsr_camera_source_ = from.tsr_camera_source_;
    }
    if (cached_has_bits & 0x00000004u) {
      tsr_sign_name_ = from.tsr_sign_name_;
    }
    if (cached_has_bits & 0x00000008u) {
      tsr_relevancy_ = from.tsr_relevancy_;
    }
    if (cached_has_bits & 0x00000010u) {
      tsr_filter_type_ = from.tsr_filter_type_;
    }
    if (cached_has_bits & 0x00000020u) {
      reserved_3_ = from.reserved_3_;
    }
    if (cached_has_bits & 0x00000040u) {
      tsr_sup1_signname_ = from.tsr_sup1_signname_;
    }
    if (cached_has_bits & 0x00000080u) {
      tsr_sup1_confidence_ = from.tsr_sup1_confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      tsr_sup2_signname_ = from.tsr_sup2_signname_;
    }
    if (cached_has_bits & 0x00000200u) {
      tsr_sup2_confidence_ = from.tsr_sup2_confidence_;
    }
    if (cached_has_bits & 0x00000400u) {
      reserved_4_ = from.reserved_4_;
    }
    if (cached_has_bits & 0x00000800u) {
      tsr_sign_shape_ = from.tsr_sign_shape_;
    }
    if (cached_has_bits & 0x00001000u) {
      tsr_sign_structure_ = from.tsr_sign_structure_;
    }
    if (cached_has_bits & 0x00002000u) {
      tsr_confidence_ = from.tsr_confidence_;
    }
    if (cached_has_bits & 0x00004000u) {
      tsr_sign_long_distance_ = from.tsr_sign_long_distance_;
    }
    if (cached_has_bits & 0x00008000u) {
      reserved_5_ = from.reserved_5_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      tsr_sign_lateral_distance_ = from.tsr_sign_lateral_distance_;
    }
    if (cached_has_bits & 0x00020000u) {
      tsr_sign_height_ = from.tsr_sign_height_;
    }
    if (cached_has_bits & 0x00040000u) {
      reserved_6_ = from.reserved_6_;
    }
    if (cached_has_bits & 0x00080000u) {
      tsr_sign_long_distance_std_ = from.tsr_sign_long_distance_std_;
    }
    if (cached_has_bits & 0x00100000u) {
      tsr_sign_lat_distance_std_ = from.tsr_sign_lat_distance_std_;
    }
    if (cached_has_bits & 0x00200000u) {
      reserved_7_ = from.reserved_7_;
    }
    if (cached_has_bits & 0x00400000u) {
      tsr_sign_height_std_ = from.tsr_sign_height_std_;
    }
    if (cached_has_bits & 0x00800000u) {
      tsr_sign_panel_width_ = from.tsr_sign_panel_width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1056964608u) {
    if (cached_has_bits & 0x01000000u) {
      reserved_8_ = from.reserved_8_;
    }
    if (cached_has_bits & 0x02000000u) {
      tsr_sign_panel_height_ = from.tsr_sign_panel_height_;
    }
    if (cached_has_bits & 0x04000000u) {
      tsr_sign_panel_width_std_ = from.tsr_sign_panel_width_std_;
    }
    if (cached_has_bits & 0x08000000u) {
      tsr_sign_panel_height_std_ = from.tsr_sign_panel_height_std_;
    }
    if (cached_has_bits & 0x10000000u) {
      reserved_9_ = from.reserved_9_;
    }
    if (cached_has_bits & 0x20000000u) {
      tsr_tracking_age_ = from.tsr_tracking_age_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TSR::CopyFrom(const TSR& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.meprocess.TSR)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSR::IsInitialized() const {
  return true;
}

void TSR::Swap(TSR* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSR::InternalSwap(TSR* other) {
  std::swap(tsr_id_, other->tsr_id_);
  std::swap(tsr_camera_source_, other->tsr_camera_source_);
  std::swap(tsr_sign_name_, other->tsr_sign_name_);
  std::swap(tsr_relevancy_, other->tsr_relevancy_);
  std::swap(tsr_filter_type_, other->tsr_filter_type_);
  std::swap(reserved_3_, other->reserved_3_);
  std::swap(tsr_sup1_signname_, other->tsr_sup1_signname_);
  std::swap(tsr_sup1_confidence_, other->tsr_sup1_confidence_);
  std::swap(tsr_sup2_signname_, other->tsr_sup2_signname_);
  std::swap(tsr_sup2_confidence_, other->tsr_sup2_confidence_);
  std::swap(reserved_4_, other->reserved_4_);
  std::swap(tsr_sign_shape_, other->tsr_sign_shape_);
  std::swap(tsr_sign_structure_, other->tsr_sign_structure_);
  std::swap(tsr_confidence_, other->tsr_confidence_);
  std::swap(tsr_sign_long_distance_, other->tsr_sign_long_distance_);
  std::swap(reserved_5_, other->reserved_5_);
  std::swap(tsr_sign_lateral_distance_, other->tsr_sign_lateral_distance_);
  std::swap(tsr_sign_height_, other->tsr_sign_height_);
  std::swap(reserved_6_, other->reserved_6_);
  std::swap(tsr_sign_long_distance_std_, other->tsr_sign_long_distance_std_);
  std::swap(tsr_sign_lat_distance_std_, other->tsr_sign_lat_distance_std_);
  std::swap(reserved_7_, other->reserved_7_);
  std::swap(tsr_sign_height_std_, other->tsr_sign_height_std_);
  std::swap(tsr_sign_panel_width_, other->tsr_sign_panel_width_);
  std::swap(reserved_8_, other->reserved_8_);
  std::swap(tsr_sign_panel_height_, other->tsr_sign_panel_height_);
  std::swap(tsr_sign_panel_width_std_, other->tsr_sign_panel_width_std_);
  std::swap(tsr_sign_panel_height_std_, other->tsr_sign_panel_height_std_);
  std::swap(reserved_9_, other->reserved_9_);
  std::swap(tsr_tracking_age_, other->tsr_tracking_age_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TSR::GetTypeName() const {
  return "atd.meprocess.TSR";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSR

// optional int32 tsr_id = 1;
bool TSR::has_tsr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TSR::set_has_tsr_id() {
  _has_bits_[0] |= 0x00000001u;
}
void TSR::clear_has_tsr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void TSR::clear_tsr_id() {
  tsr_id_ = 0;
  clear_has_tsr_id();
}
::google::protobuf::int32 TSR::tsr_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_id)
  return tsr_id_;
}
void TSR::set_tsr_id(::google::protobuf::int32 value) {
  set_has_tsr_id();
  tsr_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_id)
}

// optional int32 tsr_camera_source = 2;
bool TSR::has_tsr_camera_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TSR::set_has_tsr_camera_source() {
  _has_bits_[0] |= 0x00000002u;
}
void TSR::clear_has_tsr_camera_source() {
  _has_bits_[0] &= ~0x00000002u;
}
void TSR::clear_tsr_camera_source() {
  tsr_camera_source_ = 0;
  clear_has_tsr_camera_source();
}
::google::protobuf::int32 TSR::tsr_camera_source() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_camera_source)
  return tsr_camera_source_;
}
void TSR::set_tsr_camera_source(::google::protobuf::int32 value) {
  set_has_tsr_camera_source();
  tsr_camera_source_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_camera_source)
}

// optional int32 tsr_sign_name = 3;
bool TSR::has_tsr_sign_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TSR::set_has_tsr_sign_name() {
  _has_bits_[0] |= 0x00000004u;
}
void TSR::clear_has_tsr_sign_name() {
  _has_bits_[0] &= ~0x00000004u;
}
void TSR::clear_tsr_sign_name() {
  tsr_sign_name_ = 0;
  clear_has_tsr_sign_name();
}
::google::protobuf::int32 TSR::tsr_sign_name() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_name)
  return tsr_sign_name_;
}
void TSR::set_tsr_sign_name(::google::protobuf::int32 value) {
  set_has_tsr_sign_name();
  tsr_sign_name_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_name)
}

// optional .atd.meprocess.TSR.Tsr_relevancyType tsr_relevancy = 4;
bool TSR::has_tsr_relevancy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TSR::set_has_tsr_relevancy() {
  _has_bits_[0] |= 0x00000008u;
}
void TSR::clear_has_tsr_relevancy() {
  _has_bits_[0] &= ~0x00000008u;
}
void TSR::clear_tsr_relevancy() {
  tsr_relevancy_ = 0;
  clear_has_tsr_relevancy();
}
::atd::meprocess::TSR_Tsr_relevancyType TSR::tsr_relevancy() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_relevancy)
  return static_cast< ::atd::meprocess::TSR_Tsr_relevancyType >(tsr_relevancy_);
}
void TSR::set_tsr_relevancy(::atd::meprocess::TSR_Tsr_relevancyType value) {
  assert(::atd::meprocess::TSR_Tsr_relevancyType_IsValid(value));
  set_has_tsr_relevancy();
  tsr_relevancy_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_relevancy)
}

// optional .atd.meprocess.TSR.Tsr_filter_typeType tsr_filter_type = 5;
bool TSR::has_tsr_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TSR::set_has_tsr_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
void TSR::clear_has_tsr_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
void TSR::clear_tsr_filter_type() {
  tsr_filter_type_ = 0;
  clear_has_tsr_filter_type();
}
::atd::meprocess::TSR_Tsr_filter_typeType TSR::tsr_filter_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_filter_type)
  return static_cast< ::atd::meprocess::TSR_Tsr_filter_typeType >(tsr_filter_type_);
}
void TSR::set_tsr_filter_type(::atd::meprocess::TSR_Tsr_filter_typeType value) {
  assert(::atd::meprocess::TSR_Tsr_filter_typeType_IsValid(value));
  set_has_tsr_filter_type();
  tsr_filter_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_filter_type)
}

// optional bool reserved_3 = 6;
bool TSR::has_reserved_3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TSR::set_has_reserved_3() {
  _has_bits_[0] |= 0x00000020u;
}
void TSR::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00000020u;
}
void TSR::clear_reserved_3() {
  reserved_3_ = false;
  clear_has_reserved_3();
}
bool TSR::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_3)
  return reserved_3_;
}
void TSR::set_reserved_3(bool value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_3)
}

// optional int32 tsr_sup1_signname = 7;
bool TSR::has_tsr_sup1_signname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TSR::set_has_tsr_sup1_signname() {
  _has_bits_[0] |= 0x00000040u;
}
void TSR::clear_has_tsr_sup1_signname() {
  _has_bits_[0] &= ~0x00000040u;
}
void TSR::clear_tsr_sup1_signname() {
  tsr_sup1_signname_ = 0;
  clear_has_tsr_sup1_signname();
}
::google::protobuf::int32 TSR::tsr_sup1_signname() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup1_signname)
  return tsr_sup1_signname_;
}
void TSR::set_tsr_sup1_signname(::google::protobuf::int32 value) {
  set_has_tsr_sup1_signname();
  tsr_sup1_signname_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup1_signname)
}

// optional float tsr_sup1_confidence = 8;
bool TSR::has_tsr_sup1_confidence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TSR::set_has_tsr_sup1_confidence() {
  _has_bits_[0] |= 0x00000080u;
}
void TSR::clear_has_tsr_sup1_confidence() {
  _has_bits_[0] &= ~0x00000080u;
}
void TSR::clear_tsr_sup1_confidence() {
  tsr_sup1_confidence_ = 0;
  clear_has_tsr_sup1_confidence();
}
float TSR::tsr_sup1_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup1_confidence)
  return tsr_sup1_confidence_;
}
void TSR::set_tsr_sup1_confidence(float value) {
  set_has_tsr_sup1_confidence();
  tsr_sup1_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup1_confidence)
}

// optional int32 tsr_sup2_signname = 9;
bool TSR::has_tsr_sup2_signname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TSR::set_has_tsr_sup2_signname() {
  _has_bits_[0] |= 0x00000100u;
}
void TSR::clear_has_tsr_sup2_signname() {
  _has_bits_[0] &= ~0x00000100u;
}
void TSR::clear_tsr_sup2_signname() {
  tsr_sup2_signname_ = 0;
  clear_has_tsr_sup2_signname();
}
::google::protobuf::int32 TSR::tsr_sup2_signname() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup2_signname)
  return tsr_sup2_signname_;
}
void TSR::set_tsr_sup2_signname(::google::protobuf::int32 value) {
  set_has_tsr_sup2_signname();
  tsr_sup2_signname_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup2_signname)
}

// optional float tsr_sup2_confidence = 10;
bool TSR::has_tsr_sup2_confidence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TSR::set_has_tsr_sup2_confidence() {
  _has_bits_[0] |= 0x00000200u;
}
void TSR::clear_has_tsr_sup2_confidence() {
  _has_bits_[0] &= ~0x00000200u;
}
void TSR::clear_tsr_sup2_confidence() {
  tsr_sup2_confidence_ = 0;
  clear_has_tsr_sup2_confidence();
}
float TSR::tsr_sup2_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup2_confidence)
  return tsr_sup2_confidence_;
}
void TSR::set_tsr_sup2_confidence(float value) {
  set_has_tsr_sup2_confidence();
  tsr_sup2_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup2_confidence)
}

// optional int32 reserved_4 = 11;
bool TSR::has_reserved_4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TSR::set_has_reserved_4() {
  _has_bits_[0] |= 0x00000400u;
}
void TSR::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00000400u;
}
void TSR::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
::google::protobuf::int32 TSR::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_4)
  return reserved_4_;
}
void TSR::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_4)
}

// optional .atd.meprocess.TSR.Tsr_sign_shapeType tsr_sign_shape = 12;
bool TSR::has_tsr_sign_shape() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TSR::set_has_tsr_sign_shape() {
  _has_bits_[0] |= 0x00000800u;
}
void TSR::clear_has_tsr_sign_shape() {
  _has_bits_[0] &= ~0x00000800u;
}
void TSR::clear_tsr_sign_shape() {
  tsr_sign_shape_ = 0;
  clear_has_tsr_sign_shape();
}
::atd::meprocess::TSR_Tsr_sign_shapeType TSR::tsr_sign_shape() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_shape)
  return static_cast< ::atd::meprocess::TSR_Tsr_sign_shapeType >(tsr_sign_shape_);
}
void TSR::set_tsr_sign_shape(::atd::meprocess::TSR_Tsr_sign_shapeType value) {
  assert(::atd::meprocess::TSR_Tsr_sign_shapeType_IsValid(value));
  set_has_tsr_sign_shape();
  tsr_sign_shape_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_shape)
}

// optional .atd.meprocess.TSR.Tsr_sign_structureType tsr_sign_structure = 13;
bool TSR::has_tsr_sign_structure() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TSR::set_has_tsr_sign_structure() {
  _has_bits_[0] |= 0x00001000u;
}
void TSR::clear_has_tsr_sign_structure() {
  _has_bits_[0] &= ~0x00001000u;
}
void TSR::clear_tsr_sign_structure() {
  tsr_sign_structure_ = 0;
  clear_has_tsr_sign_structure();
}
::atd::meprocess::TSR_Tsr_sign_structureType TSR::tsr_sign_structure() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_structure)
  return static_cast< ::atd::meprocess::TSR_Tsr_sign_structureType >(tsr_sign_structure_);
}
void TSR::set_tsr_sign_structure(::atd::meprocess::TSR_Tsr_sign_structureType value) {
  assert(::atd::meprocess::TSR_Tsr_sign_structureType_IsValid(value));
  set_has_tsr_sign_structure();
  tsr_sign_structure_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_structure)
}

// optional float tsr_confidence = 14;
bool TSR::has_tsr_confidence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TSR::set_has_tsr_confidence() {
  _has_bits_[0] |= 0x00002000u;
}
void TSR::clear_has_tsr_confidence() {
  _has_bits_[0] &= ~0x00002000u;
}
void TSR::clear_tsr_confidence() {
  tsr_confidence_ = 0;
  clear_has_tsr_confidence();
}
float TSR::tsr_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_confidence)
  return tsr_confidence_;
}
void TSR::set_tsr_confidence(float value) {
  set_has_tsr_confidence();
  tsr_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_confidence)
}

// optional float tsr_sign_long_distance = 15;
bool TSR::has_tsr_sign_long_distance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TSR::set_has_tsr_sign_long_distance() {
  _has_bits_[0] |= 0x00004000u;
}
void TSR::clear_has_tsr_sign_long_distance() {
  _has_bits_[0] &= ~0x00004000u;
}
void TSR::clear_tsr_sign_long_distance() {
  tsr_sign_long_distance_ = 0;
  clear_has_tsr_sign_long_distance();
}
float TSR::tsr_sign_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_long_distance)
  return tsr_sign_long_distance_;
}
void TSR::set_tsr_sign_long_distance(float value) {
  set_has_tsr_sign_long_distance();
  tsr_sign_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_long_distance)
}

// optional int32 reserved_5 = 16;
bool TSR::has_reserved_5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TSR::set_has_reserved_5() {
  _has_bits_[0] |= 0x00008000u;
}
void TSR::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00008000u;
}
void TSR::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
::google::protobuf::int32 TSR::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_5)
  return reserved_5_;
}
void TSR::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_5)
}

// optional float tsr_sign_lateral_distance = 17;
bool TSR::has_tsr_sign_lateral_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TSR::set_has_tsr_sign_lateral_distance() {
  _has_bits_[0] |= 0x00010000u;
}
void TSR::clear_has_tsr_sign_lateral_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
void TSR::clear_tsr_sign_lateral_distance() {
  tsr_sign_lateral_distance_ = 0;
  clear_has_tsr_sign_lateral_distance();
}
float TSR::tsr_sign_lateral_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_lateral_distance)
  return tsr_sign_lateral_distance_;
}
void TSR::set_tsr_sign_lateral_distance(float value) {
  set_has_tsr_sign_lateral_distance();
  tsr_sign_lateral_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_lateral_distance)
}

// optional float tsr_sign_height = 18;
bool TSR::has_tsr_sign_height() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TSR::set_has_tsr_sign_height() {
  _has_bits_[0] |= 0x00020000u;
}
void TSR::clear_has_tsr_sign_height() {
  _has_bits_[0] &= ~0x00020000u;
}
void TSR::clear_tsr_sign_height() {
  tsr_sign_height_ = 0;
  clear_has_tsr_sign_height();
}
float TSR::tsr_sign_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_height)
  return tsr_sign_height_;
}
void TSR::set_tsr_sign_height(float value) {
  set_has_tsr_sign_height();
  tsr_sign_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_height)
}

// optional int32 reserved_6 = 19;
bool TSR::has_reserved_6() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TSR::set_has_reserved_6() {
  _has_bits_[0] |= 0x00040000u;
}
void TSR::clear_has_reserved_6() {
  _has_bits_[0] &= ~0x00040000u;
}
void TSR::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
::google::protobuf::int32 TSR::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_6)
  return reserved_6_;
}
void TSR::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_6)
}

// optional float tsr_sign_long_distance_std = 20;
bool TSR::has_tsr_sign_long_distance_std() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TSR::set_has_tsr_sign_long_distance_std() {
  _has_bits_[0] |= 0x00080000u;
}
void TSR::clear_has_tsr_sign_long_distance_std() {
  _has_bits_[0] &= ~0x00080000u;
}
void TSR::clear_tsr_sign_long_distance_std() {
  tsr_sign_long_distance_std_ = 0;
  clear_has_tsr_sign_long_distance_std();
}
float TSR::tsr_sign_long_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_long_distance_std)
  return tsr_sign_long_distance_std_;
}
void TSR::set_tsr_sign_long_distance_std(float value) {
  set_has_tsr_sign_long_distance_std();
  tsr_sign_long_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_long_distance_std)
}

// optional float tsr_sign_lat_distance_std = 21;
bool TSR::has_tsr_sign_lat_distance_std() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TSR::set_has_tsr_sign_lat_distance_std() {
  _has_bits_[0] |= 0x00100000u;
}
void TSR::clear_has_tsr_sign_lat_distance_std() {
  _has_bits_[0] &= ~0x00100000u;
}
void TSR::clear_tsr_sign_lat_distance_std() {
  tsr_sign_lat_distance_std_ = 0;
  clear_has_tsr_sign_lat_distance_std();
}
float TSR::tsr_sign_lat_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_lat_distance_std)
  return tsr_sign_lat_distance_std_;
}
void TSR::set_tsr_sign_lat_distance_std(float value) {
  set_has_tsr_sign_lat_distance_std();
  tsr_sign_lat_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_lat_distance_std)
}

// optional int32 reserved_7 = 22;
bool TSR::has_reserved_7() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void TSR::set_has_reserved_7() {
  _has_bits_[0] |= 0x00200000u;
}
void TSR::clear_has_reserved_7() {
  _has_bits_[0] &= ~0x00200000u;
}
void TSR::clear_reserved_7() {
  reserved_7_ = 0;
  clear_has_reserved_7();
}
::google::protobuf::int32 TSR::reserved_7() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_7)
  return reserved_7_;
}
void TSR::set_reserved_7(::google::protobuf::int32 value) {
  set_has_reserved_7();
  reserved_7_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_7)
}

// optional float tsr_sign_height_std = 23;
bool TSR::has_tsr_sign_height_std() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void TSR::set_has_tsr_sign_height_std() {
  _has_bits_[0] |= 0x00400000u;
}
void TSR::clear_has_tsr_sign_height_std() {
  _has_bits_[0] &= ~0x00400000u;
}
void TSR::clear_tsr_sign_height_std() {
  tsr_sign_height_std_ = 0;
  clear_has_tsr_sign_height_std();
}
float TSR::tsr_sign_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_height_std)
  return tsr_sign_height_std_;
}
void TSR::set_tsr_sign_height_std(float value) {
  set_has_tsr_sign_height_std();
  tsr_sign_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_height_std)
}

// optional float tsr_sign_panel_width = 24;
bool TSR::has_tsr_sign_panel_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void TSR::set_has_tsr_sign_panel_width() {
  _has_bits_[0] |= 0x00800000u;
}
void TSR::clear_has_tsr_sign_panel_width() {
  _has_bits_[0] &= ~0x00800000u;
}
void TSR::clear_tsr_sign_panel_width() {
  tsr_sign_panel_width_ = 0;
  clear_has_tsr_sign_panel_width();
}
float TSR::tsr_sign_panel_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_width)
  return tsr_sign_panel_width_;
}
void TSR::set_tsr_sign_panel_width(float value) {
  set_has_tsr_sign_panel_width();
  tsr_sign_panel_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_width)
}

// optional int32 reserved_8 = 25;
bool TSR::has_reserved_8() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void TSR::set_has_reserved_8() {
  _has_bits_[0] |= 0x01000000u;
}
void TSR::clear_has_reserved_8() {
  _has_bits_[0] &= ~0x01000000u;
}
void TSR::clear_reserved_8() {
  reserved_8_ = 0;
  clear_has_reserved_8();
}
::google::protobuf::int32 TSR::reserved_8() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_8)
  return reserved_8_;
}
void TSR::set_reserved_8(::google::protobuf::int32 value) {
  set_has_reserved_8();
  reserved_8_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_8)
}

// optional float tsr_sign_panel_height = 26;
bool TSR::has_tsr_sign_panel_height() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void TSR::set_has_tsr_sign_panel_height() {
  _has_bits_[0] |= 0x02000000u;
}
void TSR::clear_has_tsr_sign_panel_height() {
  _has_bits_[0] &= ~0x02000000u;
}
void TSR::clear_tsr_sign_panel_height() {
  tsr_sign_panel_height_ = 0;
  clear_has_tsr_sign_panel_height();
}
float TSR::tsr_sign_panel_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_height)
  return tsr_sign_panel_height_;
}
void TSR::set_tsr_sign_panel_height(float value) {
  set_has_tsr_sign_panel_height();
  tsr_sign_panel_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_height)
}

// optional float tsr_sign_panel_width_std = 27;
bool TSR::has_tsr_sign_panel_width_std() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
void TSR::set_has_tsr_sign_panel_width_std() {
  _has_bits_[0] |= 0x04000000u;
}
void TSR::clear_has_tsr_sign_panel_width_std() {
  _has_bits_[0] &= ~0x04000000u;
}
void TSR::clear_tsr_sign_panel_width_std() {
  tsr_sign_panel_width_std_ = 0;
  clear_has_tsr_sign_panel_width_std();
}
float TSR::tsr_sign_panel_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_width_std)
  return tsr_sign_panel_width_std_;
}
void TSR::set_tsr_sign_panel_width_std(float value) {
  set_has_tsr_sign_panel_width_std();
  tsr_sign_panel_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_width_std)
}

// optional float tsr_sign_panel_height_std = 28;
bool TSR::has_tsr_sign_panel_height_std() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
void TSR::set_has_tsr_sign_panel_height_std() {
  _has_bits_[0] |= 0x08000000u;
}
void TSR::clear_has_tsr_sign_panel_height_std() {
  _has_bits_[0] &= ~0x08000000u;
}
void TSR::clear_tsr_sign_panel_height_std() {
  tsr_sign_panel_height_std_ = 0;
  clear_has_tsr_sign_panel_height_std();
}
float TSR::tsr_sign_panel_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_height_std)
  return tsr_sign_panel_height_std_;
}
void TSR::set_tsr_sign_panel_height_std(float value) {
  set_has_tsr_sign_panel_height_std();
  tsr_sign_panel_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_height_std)
}

// optional int32 reserved_9 = 29;
bool TSR::has_reserved_9() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
void TSR::set_has_reserved_9() {
  _has_bits_[0] |= 0x10000000u;
}
void TSR::clear_has_reserved_9() {
  _has_bits_[0] &= ~0x10000000u;
}
void TSR::clear_reserved_9() {
  reserved_9_ = 0;
  clear_has_reserved_9();
}
::google::protobuf::int32 TSR::reserved_9() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_9)
  return reserved_9_;
}
void TSR::set_reserved_9(::google::protobuf::int32 value) {
  set_has_reserved_9();
  reserved_9_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_9)
}

// optional float tsr_tracking_age = 30;
bool TSR::has_tsr_tracking_age() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
void TSR::set_has_tsr_tracking_age() {
  _has_bits_[0] |= 0x20000000u;
}
void TSR::clear_has_tsr_tracking_age() {
  _has_bits_[0] &= ~0x20000000u;
}
void TSR::clear_tsr_tracking_age() {
  tsr_tracking_age_ = 0;
  clear_has_tsr_tracking_age();
}
float TSR::tsr_tracking_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_tracking_age)
  return tsr_tracking_age_;
}
void TSR::set_tsr_tracking_age(float value) {
  set_has_tsr_tracking_age();
  tsr_tracking_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_tracking_age)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace meprocess
}  // namespace atd

// @@protoc_insertion_point(global_scope)
