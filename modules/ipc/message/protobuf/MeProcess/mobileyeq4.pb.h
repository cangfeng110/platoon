// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/MeProcess/mobileyeq4.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
#include "modules/ipc/message/protobuf/localization/pose.pb.h"
#include "modules/ipc/message/protobuf/common/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Arrow2D;
class Arrow2DDefaultTypeInternal;
extern Arrow2DDefaultTypeInternal _Arrow2D_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
}  // namespace common
namespace localization {
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
namespace meprocess {
class ADVCommon;
class ADVCommonDefaultTypeInternal;
extern ADVCommonDefaultTypeInternal _ADVCommon_default_instance_;
class CACommon;
class CACommonDefaultTypeInternal;
extern CACommonDefaultTypeInternal _CACommon_default_instance_;
class ConArea;
class ConAreaDefaultTypeInternal;
extern ConAreaDefaultTypeInternal _ConArea_default_instance_;
class Dt_Record_App;
class Dt_Record_AppDefaultTypeInternal;
extern Dt_Record_AppDefaultTypeInternal _Dt_Record_App_default_instance_;
class Dt_Record_Common;
class Dt_Record_CommonDefaultTypeInternal;
extern Dt_Record_CommonDefaultTypeInternal _Dt_Record_Common_default_instance_;
class Dt_Record_ConstructionArea;
class Dt_Record_ConstructionAreaDefaultTypeInternal;
extern Dt_Record_ConstructionAreaDefaultTypeInternal _Dt_Record_ConstructionArea_default_instance_;
class Dt_Record_FCF;
class Dt_Record_FCFDefaultTypeInternal;
extern Dt_Record_FCFDefaultTypeInternal _Dt_Record_FCF_default_instance_;
class Dt_Record_FCF_VRU;
class Dt_Record_FCF_VRUDefaultTypeInternal;
extern Dt_Record_FCF_VRUDefaultTypeInternal _Dt_Record_FCF_VRU_default_instance_;
class Dt_Record_FailSafe;
class Dt_Record_FailSafeDefaultTypeInternal;
extern Dt_Record_FailSafeDefaultTypeInternal _Dt_Record_FailSafe_default_instance_;
class Dt_Record_HLB;
class Dt_Record_HLBDefaultTypeInternal;
extern Dt_Record_HLBDefaultTypeInternal _Dt_Record_HLB_default_instance_;
class Dt_Record_LDW;
class Dt_Record_LDWDefaultTypeInternal;
extern Dt_Record_LDWDefaultTypeInternal _Dt_Record_LDW_default_instance_;
class Dt_Record_LS_ADV;
class Dt_Record_LS_ADVDefaultTypeInternal;
extern Dt_Record_LS_ADVDefaultTypeInternal _Dt_Record_LS_ADV_default_instance_;
class Dt_Record_LS_Road_Edge;
class Dt_Record_LS_Road_EdgeDefaultTypeInternal;
extern Dt_Record_LS_Road_EdgeDefaultTypeInternal _Dt_Record_LS_Road_Edge_default_instance_;
class Dt_Record_Lane_Support;
class Dt_Record_Lane_SupportDefaultTypeInternal;
extern Dt_Record_Lane_SupportDefaultTypeInternal _Dt_Record_Lane_Support_default_instance_;
class Dt_Record_MeFreeSpace;
class Dt_Record_MeFreeSpaceDefaultTypeInternal;
extern Dt_Record_MeFreeSpaceDefaultTypeInternal _Dt_Record_MeFreeSpace_default_instance_;
class Dt_Record_MeObjects;
class Dt_Record_MeObjectsDefaultTypeInternal;
extern Dt_Record_MeObjectsDefaultTypeInternal _Dt_Record_MeObjects_default_instance_;
class Dt_Record_SL_Descrip;
class Dt_Record_SL_DescripDefaultTypeInternal;
extern Dt_Record_SL_DescripDefaultTypeInternal _Dt_Record_SL_Descrip_default_instance_;
class Dt_Record_SematicLine;
class Dt_Record_SematicLineDefaultTypeInternal;
extern Dt_Record_SematicLineDefaultTypeInternal _Dt_Record_SematicLine_default_instance_;
class Dt_Record_SematicMark;
class Dt_Record_SematicMarkDefaultTypeInternal;
extern Dt_Record_SematicMarkDefaultTypeInternal _Dt_Record_SematicMark_default_instance_;
class Dt_Record_TFL;
class Dt_Record_TFLDefaultTypeInternal;
extern Dt_Record_TFLDefaultTypeInternal _Dt_Record_TFL_default_instance_;
class Dt_Record_TSR;
class Dt_Record_TSRDefaultTypeInternal;
extern Dt_Record_TSRDefaultTypeInternal _Dt_Record_TSR_default_instance_;
class FCF_VRU;
class FCF_VRUDefaultTypeInternal;
extern FCF_VRUDefaultTypeInternal _FCF_VRU_default_instance_;
class FSPCommon;
class FSPCommonDefaultTypeInternal;
extern FSPCommonDefaultTypeInternal _FSPCommon_default_instance_;
class FSPoint;
class FSPointDefaultTypeInternal;
extern FSPointDefaultTypeInternal _FSPoint_default_instance_;
class LSCommon;
class LSCommonDefaultTypeInternal;
extern LSCommonDefaultTypeInternal _LSCommon_default_instance_;
class LS_Adjacent_Line;
class LS_Adjacent_LineDefaultTypeInternal;
extern LS_Adjacent_LineDefaultTypeInternal _LS_Adjacent_Line_default_instance_;
class LS_Host_Line;
class LS_Host_LineDefaultTypeInternal;
extern LS_Host_LineDefaultTypeInternal _LS_Host_Line_default_instance_;
class LS_INTP;
class LS_INTPDefaultTypeInternal;
extern LS_INTPDefaultTypeInternal _LS_INTP_default_instance_;
class LineParam;
class LineParamDefaultTypeInternal;
extern LineParamDefaultTypeInternal _LineParam_default_instance_;
class MeObject;
class MeObjectDefaultTypeInternal;
extern MeObjectDefaultTypeInternal _MeObject_default_instance_;
class ObjCommon;
class ObjCommonDefaultTypeInternal;
extern ObjCommonDefaultTypeInternal _ObjCommon_default_instance_;
class RoadEdge;
class RoadEdgeDefaultTypeInternal;
extern RoadEdgeDefaultTypeInternal _RoadEdge_default_instance_;
class RoadEdgeCommon;
class RoadEdgeCommonDefaultTypeInternal;
extern RoadEdgeCommonDefaultTypeInternal _RoadEdgeCommon_default_instance_;
class SLCommon;
class SLCommonDefaultTypeInternal;
extern SLCommonDefaultTypeInternal _SLCommon_default_instance_;
class SLD;
class SLDDefaultTypeInternal;
extern SLDDefaultTypeInternal _SLD_default_instance_;
class SLDCommon;
class SLDCommonDefaultTypeInternal;
extern SLDCommonDefaultTypeInternal _SLDCommon_default_instance_;
class SMCommon;
class SMCommonDefaultTypeInternal;
extern SMCommonDefaultTypeInternal _SMCommon_default_instance_;
class SematicLine;
class SematicLineDefaultTypeInternal;
extern SematicLineDefaultTypeInternal _SematicLine_default_instance_;
class SematicMark;
class SematicMarkDefaultTypeInternal;
extern SematicMarkDefaultTypeInternal _SematicMark_default_instance_;
class TFL;
class TFLDefaultTypeInternal;
extern TFLDefaultTypeInternal _TFL_default_instance_;
class TFLCommon;
class TFLCommonDefaultTypeInternal;
extern TFLCommonDefaultTypeInternal _TFLCommon_default_instance_;
class TSR;
class TSRDefaultTypeInternal;
extern TSRDefaultTypeInternal _TSR_default_instance_;
class TSRCommon;
class TSRCommonDefaultTypeInternal;
extern TSRCommonDefaultTypeInternal _TSRCommon_default_instance_;
class VRUCommon;
class VRUCommonDefaultTypeInternal;
extern VRUCommonDefaultTypeInternal _VRUCommon_default_instance_;
}  // namespace meprocess
}  // namespace atd

namespace atd {
namespace meprocess {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto

enum Dt_Record_App_Fatal_errorType {
  Dt_Record_App_Fatal_errorType_APP_OK = 0,
  Dt_Record_App_Fatal_errorType_APP_ERROR = 1,
  Dt_Record_App_Fatal_errorType_APP_FS_ERROR = 10,
  Dt_Record_App_Fatal_errorType_APP_CALIBRATION_ERROR = 11,
  Dt_Record_App_Fatal_errorType_APP_GVPU_STATE_TERMINAL = 127,
  Dt_Record_App_Fatal_errorType_EDR_WROTE_TO_FLASH = 129,
  Dt_Record_App_Fatal_errorType_APP_INIT_FAILED = 20,
  Dt_Record_App_Fatal_errorType_APP_INIT_CAMERA_INIT = 21,
  Dt_Record_App_Fatal_errorType_APP_I2C_VIDEO_GRAB_FAILED = 50,
  Dt_Record_App_Fatal_errorType_APP_I2C_CAMERA_SELF_RESET = 51,
  Dt_Record_App_Fatal_errorType_APP_I2C_TIMEOUT_ERROR = 52,
  Dt_Record_App_Fatal_errorType_APP_PATTERN_TEST = 70,
  Dt_Record_App_Fatal_errorType_APP_CAM_PARAMS_CCFT_CRC_FAILED = 80,
  Dt_Record_App_Fatal_errorType_PLL_COMPARISON_ERROR = 81,
  Dt_Record_App_Fatal_errorType_APP_CPS_STL_FAILED = 82,
  Dt_Record_App_Fatal_errorType_PV_GENERAL_ERROR = 90,
  Dt_Record_App_Fatal_errorType_PV_VERIFICATION_ERROR = 91
};
bool Dt_Record_App_Fatal_errorType_IsValid(int value);
const Dt_Record_App_Fatal_errorType Dt_Record_App_Fatal_errorType_Fatal_errorType_MIN = Dt_Record_App_Fatal_errorType_APP_OK;
const Dt_Record_App_Fatal_errorType Dt_Record_App_Fatal_errorType_Fatal_errorType_MAX = Dt_Record_App_Fatal_errorType_EDR_WROTE_TO_FLASH;
const int Dt_Record_App_Fatal_errorType_Fatal_errorType_ARRAYSIZE = Dt_Record_App_Fatal_errorType_Fatal_errorType_MAX + 1;

enum Dt_Record_App_Minor_errorType {
  Dt_Record_App_Minor_errorType_BM_OK = 0,
  Dt_Record_App_Minor_errorType_BM_ERROR = 1,
  Dt_Record_App_Minor_errorType_BM_EM_ERROR = 5001,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_LOAD_SETTING = 5002,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_LOAD_REGISTRY = 5003,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_REGISTRY = 5004,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT = 5005,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_BB = 5006,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_BB_REG = 5007,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_OPEN_BLACKBOX = 5008,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_EP = 5009,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_POST_INIT_EP = 5010,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_CREATE_LOGGER = 5011,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_IL = 5012,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_CHECK_REG_VERSIONS = 5013,
  Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_NB_OPERATION = 5014
};
bool Dt_Record_App_Minor_errorType_IsValid(int value);
const Dt_Record_App_Minor_errorType Dt_Record_App_Minor_errorType_Minor_errorType_MIN = Dt_Record_App_Minor_errorType_BM_OK;
const Dt_Record_App_Minor_errorType Dt_Record_App_Minor_errorType_Minor_errorType_MAX = Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_NB_OPERATION;
const int Dt_Record_App_Minor_errorType_Minor_errorType_ARRAYSIZE = Dt_Record_App_Minor_errorType_Minor_errorType_MAX + 1;

enum Dt_Record_App_Temperture_ddrType {
  Dt_Record_App_Temperture_ddrType_TEMP_ERROR = -1,
  Dt_Record_App_Temperture_ddrType_RANGE_OK = 0,
  Dt_Record_App_Temperture_ddrType_BELOW_SPEC = 1,
  Dt_Record_App_Temperture_ddrType_ABOVE_SPEC = 2,
  Dt_Record_App_Temperture_ddrType_ABOVE_85C = 3,
  Dt_Record_App_Temperture_ddrType_TEMP_EVEN_COLDER = 4,
  Dt_Record_App_Temperture_ddrType_TEMP_COOL = 5,
  Dt_Record_App_Temperture_ddrType_TEMP_RANGE_WARM = 6,
  Dt_Record_App_Temperture_ddrType_TEMP_RANGE_EVEN_WARMER = 7
};
bool Dt_Record_App_Temperture_ddrType_IsValid(int value);
const Dt_Record_App_Temperture_ddrType Dt_Record_App_Temperture_ddrType_Temperture_ddrType_MIN = Dt_Record_App_Temperture_ddrType_TEMP_ERROR;
const Dt_Record_App_Temperture_ddrType Dt_Record_App_Temperture_ddrType_Temperture_ddrType_MAX = Dt_Record_App_Temperture_ddrType_TEMP_RANGE_EVEN_WARMER;
const int Dt_Record_App_Temperture_ddrType_Temperture_ddrType_ARRAYSIZE = Dt_Record_App_Temperture_ddrType_Temperture_ddrType_MAX + 1;

enum Dt_Record_Common_Com_daytime_indicatorType {
  Dt_Record_Common_Com_daytime_indicatorType_DAY = 0,
  Dt_Record_Common_Com_daytime_indicatorType_NIGHT = 1,
  Dt_Record_Common_Com_daytime_indicatorType_DUSK = 2
};
bool Dt_Record_Common_Com_daytime_indicatorType_IsValid(int value);
const Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common_Com_daytime_indicatorType_Com_daytime_indicatorType_MIN = Dt_Record_Common_Com_daytime_indicatorType_DAY;
const Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common_Com_daytime_indicatorType_Com_daytime_indicatorType_MAX = Dt_Record_Common_Com_daytime_indicatorType_DUSK;
const int Dt_Record_Common_Com_daytime_indicatorType_Com_daytime_indicatorType_ARRAYSIZE = Dt_Record_Common_Com_daytime_indicatorType_Com_daytime_indicatorType_MAX + 1;

enum Dt_Record_Common_Com_hil_mode_statusType {
  Dt_Record_Common_Com_hil_mode_statusType_NOT_ACTIVE = 0,
  Dt_Record_Common_Com_hil_mode_statusType_ACTIVE = 1
};
bool Dt_Record_Common_Com_hil_mode_statusType_IsValid(int value);
const Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common_Com_hil_mode_statusType_Com_hil_mode_statusType_MIN = Dt_Record_Common_Com_hil_mode_statusType_NOT_ACTIVE;
const Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common_Com_hil_mode_statusType_Com_hil_mode_statusType_MAX = Dt_Record_Common_Com_hil_mode_statusType_ACTIVE;
const int Dt_Record_Common_Com_hil_mode_statusType_Com_hil_mode_statusType_ARRAYSIZE = Dt_Record_Common_Com_hil_mode_statusType_Com_hil_mode_statusType_MAX + 1;

enum Dt_Record_Common_Com_exposure_typeType {
  Dt_Record_Common_Com_exposure_typeType_TEXTURE = 0,
  Dt_Record_Common_Com_exposure_typeType_COLOR = 1
};
bool Dt_Record_Common_Com_exposure_typeType_IsValid(int value);
const Dt_Record_Common_Com_exposure_typeType Dt_Record_Common_Com_exposure_typeType_Com_exposure_typeType_MIN = Dt_Record_Common_Com_exposure_typeType_TEXTURE;
const Dt_Record_Common_Com_exposure_typeType Dt_Record_Common_Com_exposure_typeType_Com_exposure_typeType_MAX = Dt_Record_Common_Com_exposure_typeType_COLOR;
const int Dt_Record_Common_Com_exposure_typeType_Com_exposure_typeType_ARRAYSIZE = Dt_Record_Common_Com_exposure_typeType_Com_exposure_typeType_MAX + 1;

enum CACommon_Ca_region_codeType {
  CACommon_Ca_region_codeType_WORLD = 0,
  CACommon_Ca_region_codeType_EUROPE_x000D_ = 1,
  CACommon_Ca_region_codeType_UK = 10,
  CACommon_Ca_region_codeType_GULF = 2,
  CACommon_Ca_region_codeType_USA_x000D_ = 3,
  CACommon_Ca_region_codeType_CANADA_x000D_ = 4,
  CACommon_Ca_region_codeType_JAPAN_x000D_ = 5,
  CACommon_Ca_region_codeType_CHINA_x000D_ = 6,
  CACommon_Ca_region_codeType_SOUTH_AFRICA_x000D_ = 7,
  CACommon_Ca_region_codeType_KOREA_x000D_ = 8,
  CACommon_Ca_region_codeType_AUSTRALIA_x000D_ = 9
};
bool CACommon_Ca_region_codeType_IsValid(int value);
const CACommon_Ca_region_codeType CACommon_Ca_region_codeType_Ca_region_codeType_MIN = CACommon_Ca_region_codeType_WORLD;
const CACommon_Ca_region_codeType CACommon_Ca_region_codeType_Ca_region_codeType_MAX = CACommon_Ca_region_codeType_UK;
const int CACommon_Ca_region_codeType_Ca_region_codeType_ARRAYSIZE = CACommon_Ca_region_codeType_Ca_region_codeType_MAX + 1;

enum ConArea_Ca_ca_object_typeType {
  ConArea_Ca_ca_object_typeType_INVALID = 0,
  ConArea_Ca_ca_object_typeType_ROAD_CLOSED = 1,
  ConArea_Ca_ca_object_typeType_CONE = 2,
  ConArea_Ca_ca_object_typeType_BAREL = 3,
  ConArea_Ca_ca_object_typeType_OBSTRUCTION_LEFT = 4,
  ConArea_Ca_ca_object_typeType_OBSTRUCTION_RIGHT = 5
};
bool ConArea_Ca_ca_object_typeType_IsValid(int value);
const ConArea_Ca_ca_object_typeType ConArea_Ca_ca_object_typeType_Ca_ca_object_typeType_MIN = ConArea_Ca_ca_object_typeType_INVALID;
const ConArea_Ca_ca_object_typeType ConArea_Ca_ca_object_typeType_Ca_ca_object_typeType_MAX = ConArea_Ca_ca_object_typeType_OBSTRUCTION_RIGHT;
const int ConArea_Ca_ca_object_typeType_Ca_ca_object_typeType_ARRAYSIZE = ConArea_Ca_ca_object_typeType_Ca_ca_object_typeType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_alert_fcvType {
  Dt_Record_FCF_Fcf_vd_alert_fcvType_NONE = 0,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_VALIDATION = 1,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_REL_V = 1024,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MIN_SPEED = 128,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_DISTANCE = 16,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MIN_TIME_FOR_CCM_AFTER_CCM = 2,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MIN_REL_V = 2048,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_LATERAL_AVOIDANCE = 256,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_WARN_LENGTH = 32,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_YAW_RATE = 4,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_Safety_CRC = 4096,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_SPEED_REDUCTION = 512,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_SPEED = 64,
  Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_STEERING_ANGLE = 8
};
bool Dt_Record_FCF_Fcf_vd_alert_fcvType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF_Fcf_vd_alert_fcvType_Fcf_vd_alert_fcvType_MIN = Dt_Record_FCF_Fcf_vd_alert_fcvType_NONE;
const Dt_Record_FCF_Fcf_vd_alert_fcvType Dt_Record_FCF_Fcf_vd_alert_fcvType_Fcf_vd_alert_fcvType_MAX = Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_Safety_CRC;
const int Dt_Record_FCF_Fcf_vd_alert_fcvType_Fcf_vd_alert_fcvType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_alert_fcvType_Fcf_vd_alert_fcvType_MAX + 1;

enum Dt_Record_FCF_Reserved_1Type {
  Dt_Record_FCF_Reserved_1Type_NO_FUSION = 0,
  Dt_Record_FCF_Reserved_1Type_AVOID = 1,
  Dt_Record_FCF_Reserved_1Type_CONTINUE = 2,
  Dt_Record_FCF_Reserved_1Type_START = 3
};
bool Dt_Record_FCF_Reserved_1Type_IsValid(int value);
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF_Reserved_1Type_Reserved_1Type_MIN = Dt_Record_FCF_Reserved_1Type_NO_FUSION;
const Dt_Record_FCF_Reserved_1Type Dt_Record_FCF_Reserved_1Type_Reserved_1Type_MAX = Dt_Record_FCF_Reserved_1Type_START;
const int Dt_Record_FCF_Reserved_1Type_Reserved_1Type_ARRAYSIZE = Dt_Record_FCF_Reserved_1Type_Reserved_1Type_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_aeb_supp_aType {
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_VALIDATION_ = 1,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_REL_V_ = 1024,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MIN_SPEED_ = 128,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_DISTANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ = 2,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MIN_REL_V_ = 2048,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_LATERAL_AVOIDANCE_ = 256,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_WARN_LENGTH_ = 32,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_YAW_RATE_ = 4,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_Safety_CRC_ = 4096,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_REDUCTION_ = 512,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_ = 64,
  Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_STEERING_ANGLE_ = 8
};
bool Dt_Record_FCF_Fcf_vd_aeb_supp_aType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF_Fcf_vd_aeb_supp_aType_Fcf_vd_aeb_supp_aType_MIN = Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_aType Dt_Record_FCF_Fcf_vd_aeb_supp_aType_Fcf_vd_aeb_supp_aType_MAX = Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_Safety_CRC_;
const int Dt_Record_FCF_Fcf_vd_aeb_supp_aType_Fcf_vd_aeb_supp_aType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_aeb_supp_aType_Fcf_vd_aeb_supp_aType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_fcw_supp_aType {
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCF_VD_FCW_Supp_A_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_ACCELERETION_SUPPRESSION = 1,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_NRTA_OOVER_SPEED = 1024,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_MAXIMUM_TIME_FOR_WARNING = 128,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_LATERAL_AVIODANCE = 16,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_ACCELERETION_SUPPRESSION_LENGTH = 2,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_ABOVE_MAX_DISTANCE = 2048,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_NOT_READY_TO_ASSIST = 256,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_CLUTCH_SUPPRESSIO = 32,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_BRAKING_SUPPRESSION = 4,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_NRTA_UNDER_SPEED = 512,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_MINIMUM_TIME_BETWEEN_WARNINGS = 64,
  Dt_Record_FCF_Fcf_vd_fcw_supp_aType_BRAKING_SUPPRESSION_LENGTH = 8
};
bool Dt_Record_FCF_Fcf_vd_fcw_supp_aType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF_Fcf_vd_fcw_supp_aType_Fcf_vd_fcw_supp_aType_MIN = Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCF_VD_FCW_Supp_A_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_aType Dt_Record_FCF_Fcf_vd_fcw_supp_aType_Fcf_vd_fcw_supp_aType_MAX = Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_ABOVE_MAX_DISTANCE;
const int Dt_Record_FCF_Fcf_vd_fcw_supp_aType_Fcf_vd_fcw_supp_aType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_fcw_supp_aType_Fcf_vd_fcw_supp_aType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_aeb_supp_bType {
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_VALIDATION_ = 1,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_REL_V_ = 1024,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MIN_SPEED_ = 128,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_DISTANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ = 2,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MIN_REL_V_ = 2048,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_LATERAL_AVOIDANCE_ = 256,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_WARN_LENGTH_ = 32,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_YAW_RATE_ = 4,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_Safety_CRC_ = 4096,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_REDUCTION_ = 512,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_ = 64,
  Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_STEERING_ANGLE_ = 8
};
bool Dt_Record_FCF_Fcf_vd_aeb_supp_bType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF_Fcf_vd_aeb_supp_bType_Fcf_vd_aeb_supp_bType_MIN = Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_bType Dt_Record_FCF_Fcf_vd_aeb_supp_bType_Fcf_vd_aeb_supp_bType_MAX = Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_Safety_CRC_;
const int Dt_Record_FCF_Fcf_vd_aeb_supp_bType_Fcf_vd_aeb_supp_bType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_aeb_supp_bType_Fcf_vd_aeb_supp_bType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_fcw_supp_bType {
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_ = 1,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_NRTA_OOVER_SPEED_ = 1024,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_MAXIMUM_TIME_FOR_WARNING_ = 128,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_LATERAL_AVIODANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_LENGTH_ = 2,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_ABOVE_MAX_DISTANCE_ = 2048,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_NOT_READY_TO_ASSIST_ = 256,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_CLUTCH_SUPPRESSIO_ = 32,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_BRAKING_SUPPRESSION_ = 4,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_NRTA_UNDER_SPEED_ = 512,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ = 64,
  Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_BRAKING_SUPPRESSION_LENGTH_ = 8
};
bool Dt_Record_FCF_Fcf_vd_fcw_supp_bType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF_Fcf_vd_fcw_supp_bType_Fcf_vd_fcw_supp_bType_MIN = Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_bType Dt_Record_FCF_Fcf_vd_fcw_supp_bType_Fcf_vd_fcw_supp_bType_MAX = Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_ABOVE_MAX_DISTANCE_;
const int Dt_Record_FCF_Fcf_vd_fcw_supp_bType_Fcf_vd_fcw_supp_bType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_fcw_supp_bType_Fcf_vd_fcw_supp_bType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_aeb_supp_cType {
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_VALIDATION_ = 1,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_REL_V_ = 1024,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MIN_SPEED_ = 128,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_DISTANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ = 2,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MIN_REL_V_ = 2048,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_LATERAL_AVOIDANCE_ = 256,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_WARN_LENGTH_ = 32,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_YAW_RATE_ = 4,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_Safety_CRC_ = 4096,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_REDUCTION_ = 512,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_ = 64,
  Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_STEERING_ANGLE_ = 8
};
bool Dt_Record_FCF_Fcf_vd_aeb_supp_cType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF_Fcf_vd_aeb_supp_cType_Fcf_vd_aeb_supp_cType_MIN = Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_cType Dt_Record_FCF_Fcf_vd_aeb_supp_cType_Fcf_vd_aeb_supp_cType_MAX = Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_Safety_CRC_;
const int Dt_Record_FCF_Fcf_vd_aeb_supp_cType_Fcf_vd_aeb_supp_cType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_aeb_supp_cType_Fcf_vd_aeb_supp_cType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_fcw_supp_cType {
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_ = 1,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_NRTA_OOVER_SPEED_ = 1024,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_MAXIMUM_TIME_FOR_WARNING_ = 128,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_LATERAL_AVIODANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_LENGTH_ = 2,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_ABOVE_MAX_DISTANCE_ = 2048,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_NOT_READY_TO_ASSIST_ = 256,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_CLUTCH_SUPPRESSIO_ = 32,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_BRAKING_SUPPRESSION_ = 4,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_NRTA_UNDER_SPEED_ = 512,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ = 64,
  Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_BRAKING_SUPPRESSION_LENGTH_ = 8
};
bool Dt_Record_FCF_Fcf_vd_fcw_supp_cType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF_Fcf_vd_fcw_supp_cType_Fcf_vd_fcw_supp_cType_MIN = Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_cType Dt_Record_FCF_Fcf_vd_fcw_supp_cType_Fcf_vd_fcw_supp_cType_MAX = Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_ABOVE_MAX_DISTANCE_;
const int Dt_Record_FCF_Fcf_vd_fcw_supp_cType_Fcf_vd_fcw_supp_cType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_fcw_supp_cType_Fcf_vd_fcw_supp_cType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_aeb_supp_dType {
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_VALIDATION_ = 1,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_REL_V_ = 1024,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MIN_SPEED_ = 128,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_DISTANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ = 2,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MIN_REL_V_ = 2048,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_LATERAL_AVOIDANCE_ = 256,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_WARN_LENGTH_ = 32,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_YAW_RATE_ = 4,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_Safety_CRC_ = 4096,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_REDUCTION_ = 512,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_ = 64,
  Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_STEERING_ANGLE_ = 8
};
bool Dt_Record_FCF_Fcf_vd_aeb_supp_dType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF_Fcf_vd_aeb_supp_dType_Fcf_vd_aeb_supp_dType_MIN = Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_dType Dt_Record_FCF_Fcf_vd_aeb_supp_dType_Fcf_vd_aeb_supp_dType_MAX = Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_Safety_CRC_;
const int Dt_Record_FCF_Fcf_vd_aeb_supp_dType_Fcf_vd_aeb_supp_dType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_aeb_supp_dType_Fcf_vd_aeb_supp_dType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_fcw_supp_dType {
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_ = 1,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_NRTA_OOVER_SPEED_ = 1024,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_MAXIMUM_TIME_FOR_WARNING_ = 128,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_LATERAL_AVIODANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_LENGTH_ = 2,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_ABOVE_MAX_DISTANCE_ = 2048,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_NOT_READY_TO_ASSIST_ = 256,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_CLUTCH_SUPPRESSIO_ = 32,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_BRAKING_SUPPRESSION_ = 4,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_NRTA_UNDER_SPEED_ = 512,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ = 64,
  Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_BRAKING_SUPPRESSION_LENGTH_ = 8
};
bool Dt_Record_FCF_Fcf_vd_fcw_supp_dType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF_Fcf_vd_fcw_supp_dType_Fcf_vd_fcw_supp_dType_MIN = Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_dType Dt_Record_FCF_Fcf_vd_fcw_supp_dType_Fcf_vd_fcw_supp_dType_MAX = Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_ABOVE_MAX_DISTANCE_;
const int Dt_Record_FCF_Fcf_vd_fcw_supp_dType_Fcf_vd_fcw_supp_dType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_fcw_supp_dType_Fcf_vd_fcw_supp_dType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_aeb_supp_eType {
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_VALIDATION_ = 1,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_REL_V_ = 1024,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MIN_SPEED_ = 128,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_DISTANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ = 2,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MIN_REL_V_ = 2048,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_LATERAL_AVOIDANCE_ = 256,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_WARN_LENGTH_ = 32,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_YAW_RATE_ = 4,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_Safety_CRC_ = 4096,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_REDUCTION_ = 512,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_ = 64,
  Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_STEERING_ANGLE_ = 8
};
bool Dt_Record_FCF_Fcf_vd_aeb_supp_eType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF_Fcf_vd_aeb_supp_eType_Fcf_vd_aeb_supp_eType_MIN = Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_eType Dt_Record_FCF_Fcf_vd_aeb_supp_eType_Fcf_vd_aeb_supp_eType_MAX = Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_Safety_CRC_;
const int Dt_Record_FCF_Fcf_vd_aeb_supp_eType_Fcf_vd_aeb_supp_eType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_aeb_supp_eType_Fcf_vd_aeb_supp_eType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_fcw_supp_eType {
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_ = 1,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_NRTA_OOVER_SPEED_ = 1024,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_MAXIMUM_TIME_FOR_WARNING_ = 128,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_LATERAL_AVIODANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_LENGTH_ = 2,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_ABOVE_MAX_DISTANCE_ = 2048,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_NOT_READY_TO_ASSIST_ = 256,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_CLUTCH_SUPPRESSIO_ = 32,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_BRAKING_SUPPRESSION_ = 4,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_NRTA_UNDER_SPEED_ = 512,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ = 64,
  Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_BRAKING_SUPPRESSION_LENGTH_ = 8
};
bool Dt_Record_FCF_Fcf_vd_fcw_supp_eType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF_Fcf_vd_fcw_supp_eType_Fcf_vd_fcw_supp_eType_MIN = Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_eType Dt_Record_FCF_Fcf_vd_fcw_supp_eType_Fcf_vd_fcw_supp_eType_MAX = Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_ABOVE_MAX_DISTANCE_;
const int Dt_Record_FCF_Fcf_vd_fcw_supp_eType_Fcf_vd_fcw_supp_eType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_fcw_supp_eType_Fcf_vd_fcw_supp_eType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_aeb_supp_fType {
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_VALIDATION_ = 1,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_REL_V_ = 1024,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MIN_SPEED_ = 128,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_DISTANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ = 2,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MIN_REL_V_ = 2048,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_LATERAL_AVOIDANCE_ = 256,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_WARN_LENGTH_ = 32,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_YAW_RATE_ = 4,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_Safety_CRC_ = 4096,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_REDUCTION_ = 512,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_ = 64,
  Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_STEERING_ANGLE_ = 8
};
bool Dt_Record_FCF_Fcf_vd_aeb_supp_fType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF_Fcf_vd_aeb_supp_fType_Fcf_vd_aeb_supp_fType_MIN = Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_NONE_;
const Dt_Record_FCF_Fcf_vd_aeb_supp_fType Dt_Record_FCF_Fcf_vd_aeb_supp_fType_Fcf_vd_aeb_supp_fType_MAX = Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_Safety_CRC_;
const int Dt_Record_FCF_Fcf_vd_aeb_supp_fType_Fcf_vd_aeb_supp_fType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_aeb_supp_fType_Fcf_vd_aeb_supp_fType_MAX + 1;

enum Dt_Record_FCF_Fcf_vd_fcw_supp_fType {
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_NONE_ = 0,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_ = 1,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_NRTA_OOVER_SPEED_ = 1024,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_MAXIMUM_TIME_FOR_WARNING_ = 128,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_LATERAL_AVIODANCE_ = 16,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_LENGTH_ = 2,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_ABOVE_MAX_DISTANCE_ = 2048,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_NOT_READY_TO_ASSIST_ = 256,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_CLUTCH_SUPPRESSIO_ = 32,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_BRAKING_SUPPRESSION_ = 4,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_NRTA_UNDER_SPEED_ = 512,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ = 64,
  Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_BRAKING_SUPPRESSION_LENGTH_ = 8
};
bool Dt_Record_FCF_Fcf_vd_fcw_supp_fType_IsValid(int value);
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF_Fcf_vd_fcw_supp_fType_Fcf_vd_fcw_supp_fType_MIN = Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_NONE_;
const Dt_Record_FCF_Fcf_vd_fcw_supp_fType Dt_Record_FCF_Fcf_vd_fcw_supp_fType_Fcf_vd_fcw_supp_fType_MAX = Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_ABOVE_MAX_DISTANCE_;
const int Dt_Record_FCF_Fcf_vd_fcw_supp_fType_Fcf_vd_fcw_supp_fType_ARRAYSIZE = Dt_Record_FCF_Fcf_vd_fcw_supp_fType_Fcf_vd_fcw_supp_fType_MAX + 1;

enum VRUCommon_Fcf_vru_fcvType {
  VRUCommon_Fcf_vru_fcvType_NO_FUSION = 0,
  VRUCommon_Fcf_vru_fcvType_AVOID = 1,
  VRUCommon_Fcf_vru_fcvType_CONTINUE = 2,
  VRUCommon_Fcf_vru_fcvType_START = 3
};
bool VRUCommon_Fcf_vru_fcvType_IsValid(int value);
const VRUCommon_Fcf_vru_fcvType VRUCommon_Fcf_vru_fcvType_Fcf_vru_fcvType_MIN = VRUCommon_Fcf_vru_fcvType_NO_FUSION;
const VRUCommon_Fcf_vru_fcvType VRUCommon_Fcf_vru_fcvType_Fcf_vru_fcvType_MAX = VRUCommon_Fcf_vru_fcvType_START;
const int VRUCommon_Fcf_vru_fcvType_Fcf_vru_fcvType_ARRAYSIZE = VRUCommon_Fcf_vru_fcvType_Fcf_vru_fcvType_MAX + 1;

enum VRUCommon_Fcf_vru_supress_fcvType {
  VRUCommon_Fcf_vru_supress_fcvType_MAX_SPEED = 0,
  VRUCommon_Fcf_vru_supress_fcvType_MIN_SPEED = 1,
  VRUCommon_Fcf_vru_supress_fcvType_BRAKE = 2,
  VRUCommon_Fcf_vru_supress_fcvType_MAX_YAW = 3,
  VRUCommon_Fcf_vru_supress_fcvType_REAR_GEAR = 4,
  VRUCommon_Fcf_vru_supress_fcvType_STEERING_ANGLE = 5,
  VRUCommon_Fcf_vru_supress_fcvType_RESERVED_1 = 6
};
bool VRUCommon_Fcf_vru_supress_fcvType_IsValid(int value);
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon_Fcf_vru_supress_fcvType_Fcf_vru_supress_fcvType_MIN = VRUCommon_Fcf_vru_supress_fcvType_MAX_SPEED;
const VRUCommon_Fcf_vru_supress_fcvType VRUCommon_Fcf_vru_supress_fcvType_Fcf_vru_supress_fcvType_MAX = VRUCommon_Fcf_vru_supress_fcvType_RESERVED_1;
const int VRUCommon_Fcf_vru_supress_fcvType_Fcf_vru_supress_fcvType_ARRAYSIZE = VRUCommon_Fcf_vru_supress_fcvType_Fcf_vru_supress_fcvType_MAX + 1;

enum FCF_VRU_Fcf_vru_alert_lType {
  FCF_VRU_Fcf_vru_alert_lType_NO_ALERT = 39270,
  FCF_VRU_Fcf_vru_alert_lType_ALERT = 43605
};
bool FCF_VRU_Fcf_vru_alert_lType_IsValid(int value);
const FCF_VRU_Fcf_vru_alert_lType FCF_VRU_Fcf_vru_alert_lType_Fcf_vru_alert_lType_MIN = FCF_VRU_Fcf_vru_alert_lType_NO_ALERT;
const FCF_VRU_Fcf_vru_alert_lType FCF_VRU_Fcf_vru_alert_lType_Fcf_vru_alert_lType_MAX = FCF_VRU_Fcf_vru_alert_lType_ALERT;
const int FCF_VRU_Fcf_vru_alert_lType_Fcf_vru_alert_lType_ARRAYSIZE = FCF_VRU_Fcf_vru_alert_lType_Fcf_vru_alert_lType_MAX + 1;

enum FCF_VRU_Fcf_vru_supress_lType {
  FCF_VRU_Fcf_vru_supress_lType_MAX_SPEED = 0,
  FCF_VRU_Fcf_vru_supress_lType_MIN_SPEED = 1,
  FCF_VRU_Fcf_vru_supress_lType_BRAKE = 2,
  FCF_VRU_Fcf_vru_supress_lType_MAX_YAW = 3,
  FCF_VRU_Fcf_vru_supress_lType_REAR_GEAR = 4,
  FCF_VRU_Fcf_vru_supress_lType_STEERING_ANGLE = 5,
  FCF_VRU_Fcf_vru_supress_lType_RESERVED_1 = 6
};
bool FCF_VRU_Fcf_vru_supress_lType_IsValid(int value);
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU_Fcf_vru_supress_lType_Fcf_vru_supress_lType_MIN = FCF_VRU_Fcf_vru_supress_lType_MAX_SPEED;
const FCF_VRU_Fcf_vru_supress_lType FCF_VRU_Fcf_vru_supress_lType_Fcf_vru_supress_lType_MAX = FCF_VRU_Fcf_vru_supress_lType_RESERVED_1;
const int FCF_VRU_Fcf_vru_supress_lType_Fcf_vru_supress_lType_ARRAYSIZE = FCF_VRU_Fcf_vru_supress_lType_Fcf_vru_supress_lType_MAX + 1;

enum Dt_Record_FailSafe_Fs_impacted_technologiesType {
  Dt_Record_FailSafe_Fs_impacted_technologiesType_ACC = 1,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_1 = 10,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_2 = 11,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_3 = 12,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_4 = 13,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_5 = 14,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_6 = 15,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_7 = 16,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_TSR = 2,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_FLA = 3,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_PED = 4,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_LD = 5,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_VD = 6,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_RPE = 7,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_FREE_SPACE = 8,
  Dt_Record_FailSafe_Fs_impacted_technologiesType_HEATER = 9
};
bool Dt_Record_FailSafe_Fs_impacted_technologiesType_IsValid(int value);
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe_Fs_impacted_technologiesType_Fs_impacted_technologiesType_MIN = Dt_Record_FailSafe_Fs_impacted_technologiesType_ACC;
const Dt_Record_FailSafe_Fs_impacted_technologiesType Dt_Record_FailSafe_Fs_impacted_technologiesType_Fs_impacted_technologiesType_MAX = Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_7;
const int Dt_Record_FailSafe_Fs_impacted_technologiesType_Fs_impacted_technologiesType_ARRAYSIZE = Dt_Record_FailSafe_Fs_impacted_technologiesType_Fs_impacted_technologiesType_MAX + 1;

enum Dt_Record_FailSafe_Fs_rain_0Type {
  Dt_Record_FailSafe_Fs_rain_0Type_NOT_READY = 0,
  Dt_Record_FailSafe_Fs_rain_0Type_NONE = 1,
  Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_25 = 2,
  Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_50 = 3,
  Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_75 = 4,
  Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_99 = 5
};
bool Dt_Record_FailSafe_Fs_rain_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_MIN = Dt_Record_FailSafe_Fs_rain_0Type_NOT_READY;
const Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_MAX = Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_99;
const int Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_fog_0Type {
  Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_25_ = 2,
  Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_50_ = 3,
  Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_75_ = 4,
  Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_fog_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe_Fs_fog_0Type_Fs_fog_0Type_MIN = Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe_Fs_fog_0Type_Fs_fog_0Type_MAX = Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_99_;
const int Dt_Record_FailSafe_Fs_fog_0Type_Fs_fog_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_fog_0Type_Fs_fog_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_splashes_0Type {
  Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_25_ = 2,
  Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_50_ = 3,
  Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_75_ = 4,
  Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_splashes_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe_Fs_splashes_0Type_Fs_splashes_0Type_MIN = Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe_Fs_splashes_0Type_Fs_splashes_0Type_MAX = Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_99_;
const int Dt_Record_FailSafe_Fs_splashes_0Type_Fs_splashes_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_splashes_0Type_Fs_splashes_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_self_glare_0Type {
  Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_25_ = 2,
  Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_50_ = 3,
  Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_75_ = 4,
  Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_self_glare_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe_Fs_self_glare_0Type_Fs_self_glare_0Type_MIN = Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe_Fs_self_glare_0Type_Fs_self_glare_0Type_MAX = Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_99_;
const int Dt_Record_FailSafe_Fs_self_glare_0Type_Fs_self_glare_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_self_glare_0Type_Fs_self_glare_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_sun_ray_0Type {
  Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_25_ = 2,
  Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_50_ = 3,
  Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_75_ = 4,
  Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_sun_ray_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe_Fs_sun_ray_0Type_Fs_sun_ray_0Type_MIN = Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe_Fs_sun_ray_0Type_Fs_sun_ray_0Type_MAX = Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_99_;
const int Dt_Record_FailSafe_Fs_sun_ray_0Type_Fs_sun_ray_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_sun_ray_0Type_Fs_sun_ray_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_low_sun_0Type {
  Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_25_ = 2,
  Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_50_ = 3,
  Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_75_ = 4,
  Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_low_sun_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe_Fs_low_sun_0Type_Fs_low_sun_0Type_MIN = Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe_Fs_low_sun_0Type_Fs_low_sun_0Type_MAX = Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_99_;
const int Dt_Record_FailSafe_Fs_low_sun_0Type_Fs_low_sun_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_low_sun_0Type_Fs_low_sun_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_blur_image_0Type {
  Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_25_ = 2,
  Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_50_ = 3,
  Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_75_ = 4,
  Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_blur_image_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe_Fs_blur_image_0Type_Fs_blur_image_0Type_MIN = Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe_Fs_blur_image_0Type_Fs_blur_image_0Type_MAX = Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_99_;
const int Dt_Record_FailSafe_Fs_blur_image_0Type_Fs_blur_image_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_blur_image_0Type_Fs_blur_image_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_partial_blockage_0Type {
  Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_25_ = 2,
  Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_50_ = 3,
  Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_75_ = 4,
  Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_partial_blockage_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe_Fs_partial_blockage_0Type_Fs_partial_blockage_0Type_MIN = Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe_Fs_partial_blockage_0Type_Fs_partial_blockage_0Type_MAX = Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_99_;
const int Dt_Record_FailSafe_Fs_partial_blockage_0Type_Fs_partial_blockage_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_partial_blockage_0Type_Fs_partial_blockage_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_full_blockage_0Type {
  Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_25_ = 2,
  Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_50_ = 3,
  Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_75_ = 4,
  Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_full_blockage_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe_Fs_full_blockage_0Type_Fs_full_blockage_0Type_MIN = Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe_Fs_full_blockage_0Type_Fs_full_blockage_0Type_MAX = Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_99_;
const int Dt_Record_FailSafe_Fs_full_blockage_0Type_Fs_full_blockage_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_full_blockage_0Type_Fs_full_blockage_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_frozen_windshield_0Type {
  Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_25_ = 2,
  Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_50_ = 3,
  Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_75_ = 4,
  Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_frozen_windshield_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe_Fs_frozen_windshield_0Type_Fs_frozen_windshield_0Type_MIN = Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe_Fs_frozen_windshield_0Type_Fs_frozen_windshield_0Type_MAX = Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_99_;
const int Dt_Record_FailSafe_Fs_frozen_windshield_0Type_Fs_frozen_windshield_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_frozen_windshield_0Type_Fs_frozen_windshield_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_out_of_calib_0Type {
  Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_NOT_READY_ = 0,
  Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_NONE_ = 1,
  Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_25_ = 2,
  Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_50_ = 3,
  Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_75_ = 4,
  Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_99_ = 5
};
bool Dt_Record_FailSafe_Fs_out_of_calib_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe_Fs_out_of_calib_0Type_Fs_out_of_calib_0Type_MIN = Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_NOT_READY_;
const Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe_Fs_out_of_calib_0Type_Fs_out_of_calib_0Type_MAX = Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_99_;
const int Dt_Record_FailSafe_Fs_out_of_calib_0Type_Fs_out_of_calib_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_out_of_calib_0Type_Fs_out_of_calib_0Type_MAX + 1;

enum Dt_Record_FailSafe_Fs_out_of_focus_0Type {
  Dt_Record_FailSafe_Fs_out_of_focus_0Type_FS_Out_Of_Focus_0_NONE_ = 0,
  Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB = 1,
  Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB_AEB = 2,
  Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB_YAW = 4,
  Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB_HORIZON = 8
};
bool Dt_Record_FailSafe_Fs_out_of_focus_0Type_IsValid(int value);
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe_Fs_out_of_focus_0Type_Fs_out_of_focus_0Type_MIN = Dt_Record_FailSafe_Fs_out_of_focus_0Type_FS_Out_Of_Focus_0_NONE_;
const Dt_Record_FailSafe_Fs_out_of_focus_0Type Dt_Record_FailSafe_Fs_out_of_focus_0Type_Fs_out_of_focus_0Type_MAX = Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB_HORIZON;
const int Dt_Record_FailSafe_Fs_out_of_focus_0Type_Fs_out_of_focus_0Type_ARRAYSIZE = Dt_Record_FailSafe_Fs_out_of_focus_0Type_Fs_out_of_focus_0Type_MAX + 1;

enum FSPoint_Fsp_mobility_statusType {
  FSPoint_Fsp_mobility_statusType_NA_x000D_ = 0,
  FSPoint_Fsp_mobility_statusType_MOVING_x000D_ = 1,
  FSPoint_Fsp_mobility_statusType_NON_MOVING_x000D_ = 2,
  FSPoint_Fsp_mobility_statusType_NEVER_MOVED = 3
};
bool FSPoint_Fsp_mobility_statusType_IsValid(int value);
const FSPoint_Fsp_mobility_statusType FSPoint_Fsp_mobility_statusType_Fsp_mobility_statusType_MIN = FSPoint_Fsp_mobility_statusType_NA_x000D_;
const FSPoint_Fsp_mobility_statusType FSPoint_Fsp_mobility_statusType_Fsp_mobility_statusType_MAX = FSPoint_Fsp_mobility_statusType_NEVER_MOVED;
const int FSPoint_Fsp_mobility_statusType_Fsp_mobility_statusType_ARRAYSIZE = FSPoint_Fsp_mobility_statusType_Fsp_mobility_statusType_MAX + 1;

enum FSPoint_Fsp_classification_typeType {
  FSPoint_Fsp_classification_typeType_NOT_AVAILABLE_x000D_ = 0,
  FSPoint_Fsp_classification_typeType_ELEVATED_ROAD_STRUCTURE_x000D_ = 1,
  FSPoint_Fsp_classification_typeType_CURB_x000D_ = 2,
  FSPoint_Fsp_classification_typeType_NON_ELEVATED_ROAD_EDGE_x000D_ = 3,
  FSPoint_Fsp_classification_typeType_NO_OBSTACLE_UP_TO_VISIBILITY_x000D_ = 4,
  FSPoint_Fsp_classification_typeType_UNKNOWN = 5
};
bool FSPoint_Fsp_classification_typeType_IsValid(int value);
const FSPoint_Fsp_classification_typeType FSPoint_Fsp_classification_typeType_Fsp_classification_typeType_MIN = FSPoint_Fsp_classification_typeType_NOT_AVAILABLE_x000D_;
const FSPoint_Fsp_classification_typeType FSPoint_Fsp_classification_typeType_Fsp_classification_typeType_MAX = FSPoint_Fsp_classification_typeType_UNKNOWN;
const int FSPoint_Fsp_classification_typeType_Fsp_classification_typeType_ARRAYSIZE = FSPoint_Fsp_classification_typeType_Fsp_classification_typeType_MAX + 1;

enum Dt_Record_HLB_Hlb_running_modeType {
  Dt_Record_HLB_Hlb_running_modeType_INVALID_TYPE = 0,
  Dt_Record_HLB_Hlb_running_modeType_HLB_OFF = 1,
  Dt_Record_HLB_Hlb_running_modeType_HLB_INACTIVE = 2,
  Dt_Record_HLB_Hlb_running_modeType_HLB_FULL = 3
};
bool Dt_Record_HLB_Hlb_running_modeType_IsValid(int value);
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB_Hlb_running_modeType_Hlb_running_modeType_MIN = Dt_Record_HLB_Hlb_running_modeType_INVALID_TYPE;
const Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB_Hlb_running_modeType_Hlb_running_modeType_MAX = Dt_Record_HLB_Hlb_running_modeType_HLB_FULL;
const int Dt_Record_HLB_Hlb_running_modeType_Hlb_running_modeType_ARRAYSIZE = Dt_Record_HLB_Hlb_running_modeType_Hlb_running_modeType_MAX + 1;

enum Dt_Record_HLB_Hlb_inactive_reasonType {
  Dt_Record_HLB_Hlb_inactive_reasonType_INVALID_REASON = 0,
  Dt_Record_HLB_Hlb_inactive_reasonType_OBVIOUSLY_BRIGHT = 1,
  Dt_Record_HLB_Hlb_inactive_reasonType_LOW_DETECTION_RATE = 2,
  Dt_Record_HLB_Hlb_inactive_reasonType_OVER_FLOW = 3,
  Dt_Record_HLB_Hlb_inactive_reasonType_IN_GRACE = 4,
  Dt_Record_HLB_Hlb_inactive_reasonType_DEACTIVATED = 5,
  Dt_Record_HLB_Hlb_inactive_reasonType_DUSK_DELAY = 6
};
bool Dt_Record_HLB_Hlb_inactive_reasonType_IsValid(int value);
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB_Hlb_inactive_reasonType_Hlb_inactive_reasonType_MIN = Dt_Record_HLB_Hlb_inactive_reasonType_INVALID_REASON;
const Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB_Hlb_inactive_reasonType_Hlb_inactive_reasonType_MAX = Dt_Record_HLB_Hlb_inactive_reasonType_DUSK_DELAY;
const int Dt_Record_HLB_Hlb_inactive_reasonType_Hlb_inactive_reasonType_ARRAYSIZE = Dt_Record_HLB_Hlb_inactive_reasonType_Hlb_inactive_reasonType_MAX + 1;

enum Dt_Record_HLB_Hlb_decisionType {
  Dt_Record_HLB_Hlb_decisionType_UNKNOWN = 0,
  Dt_Record_HLB_Hlb_decisionType_HIGH = 1,
  Dt_Record_HLB_Hlb_decisionType_LOW = 2
};
bool Dt_Record_HLB_Hlb_decisionType_IsValid(int value);
const Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB_Hlb_decisionType_Hlb_decisionType_MIN = Dt_Record_HLB_Hlb_decisionType_UNKNOWN;
const Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB_Hlb_decisionType_Hlb_decisionType_MAX = Dt_Record_HLB_Hlb_decisionType_LOW;
const int Dt_Record_HLB_Hlb_decisionType_Hlb_decisionType_ARRAYSIZE = Dt_Record_HLB_Hlb_decisionType_Hlb_decisionType_MAX + 1;

enum Dt_Record_HLB_Hlb_reasonType {
  Dt_Record_HLB_Hlb_reasonType_TAIL_LIGHT = 1,
  Dt_Record_HLB_Hlb_reasonType_LIT_NIGHT = 10,
  Dt_Record_HLB_Hlb_reasonType_LIT_NIGHT_US = 11,
  Dt_Record_HLB_Hlb_reasonType_LIT_NIGHT_ECE = 12,
  Dt_Record_HLB_Hlb_reasonType_IN_VERY_SHARPE_CURVE = 13,
  Dt_Record_HLB_Hlb_reasonType_IN_CURVE = 14,
  Dt_Record_HLB_Hlb_reasonType_IN_BLINKING_TRAFFICLIGHT_SCENE = 15,
  Dt_Record_HLB_Hlb_reasonType_APPROACHING_JUNCTION = 16,
  Dt_Record_HLB_Hlb_reasonType_ONCOMING = 2,
  Dt_Record_HLB_Hlb_reasonType_ONCOMING_GRACE = 3,
  Dt_Record_HLB_Hlb_reasonType_TAIL_LIGHT_GRACE = 4,
  Dt_Record_HLB_Hlb_reasonType_LOW_SPEED = 5,
  Dt_Record_HLB_Hlb_reasonType_STREET_LIGHTS = 6,
  Dt_Record_HLB_Hlb_reasonType_SL_SCENE_GRACE = 7,
  Dt_Record_HLB_Hlb_reasonType_BRIGHT_SCENE = 8,
  Dt_Record_HLB_Hlb_reasonType_OBVIOUSLY_BRIGHT_SCENE = 9
};
bool Dt_Record_HLB_Hlb_reasonType_IsValid(int value);
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB_Hlb_reasonType_Hlb_reasonType_MIN = Dt_Record_HLB_Hlb_reasonType_TAIL_LIGHT;
const Dt_Record_HLB_Hlb_reasonType Dt_Record_HLB_Hlb_reasonType_Hlb_reasonType_MAX = Dt_Record_HLB_Hlb_reasonType_APPROACHING_JUNCTION;
const int Dt_Record_HLB_Hlb_reasonType_Hlb_reasonType_ARRAYSIZE = Dt_Record_HLB_Hlb_reasonType_Hlb_reasonType_MAX + 1;

enum Dt_Record_LDW_Ldw_suppresion_reasonType {
  Dt_Record_LDW_Ldw_suppresion_reasonType_NO_SUPP = 0,
  Dt_Record_LDW_Ldw_suppresion_reasonType_SPEED = 1,
  Dt_Record_LDW_Ldw_suppresion_reasonType_RIGHT_SUPP = 10,
  Dt_Record_LDW_Ldw_suppresion_reasonType_MISS_LINE = 2,
  Dt_Record_LDW_Ldw_suppresion_reasonType_LANE_WIDTH = 3,
  Dt_Record_LDW_Ldw_suppresion_reasonType_STEERING_RATE = 4,
  Dt_Record_LDW_Ldw_suppresion_reasonType_RIGHT_TURN_ACTIVE = 5,
  Dt_Record_LDW_Ldw_suppresion_reasonType_LEFT_TURN_ACTIVE = 6,
  Dt_Record_LDW_Ldw_suppresion_reasonType_BRAKE = 7,
  Dt_Record_LDW_Ldw_suppresion_reasonType_ACCELERATION = 8,
  Dt_Record_LDW_Ldw_suppresion_reasonType_LEFT_SUPP = 9
};
bool Dt_Record_LDW_Ldw_suppresion_reasonType_IsValid(int value);
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW_Ldw_suppresion_reasonType_Ldw_suppresion_reasonType_MIN = Dt_Record_LDW_Ldw_suppresion_reasonType_NO_SUPP;
const Dt_Record_LDW_Ldw_suppresion_reasonType Dt_Record_LDW_Ldw_suppresion_reasonType_Ldw_suppresion_reasonType_MAX = Dt_Record_LDW_Ldw_suppresion_reasonType_RIGHT_SUPP;
const int Dt_Record_LDW_Ldw_suppresion_reasonType_Ldw_suppresion_reasonType_ARRAYSIZE = Dt_Record_LDW_Ldw_suppresion_reasonType_Ldw_suppresion_reasonType_MAX + 1;

enum Dt_Record_LDW_Ldw_warning_status_leftType {
  Dt_Record_LDW_Ldw_warning_status_leftType_SUPPRESSED = 0,
  Dt_Record_LDW_Ldw_warning_status_leftType_ENABLED = 1,
  Dt_Record_LDW_Ldw_warning_status_leftType_ACTIVE = 2
};
bool Dt_Record_LDW_Ldw_warning_status_leftType_IsValid(int value);
const Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW_Ldw_warning_status_leftType_Ldw_warning_status_leftType_MIN = Dt_Record_LDW_Ldw_warning_status_leftType_SUPPRESSED;
const Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW_Ldw_warning_status_leftType_Ldw_warning_status_leftType_MAX = Dt_Record_LDW_Ldw_warning_status_leftType_ACTIVE;
const int Dt_Record_LDW_Ldw_warning_status_leftType_Ldw_warning_status_leftType_ARRAYSIZE = Dt_Record_LDW_Ldw_warning_status_leftType_Ldw_warning_status_leftType_MAX + 1;

enum Dt_Record_LDW_Ldw_warning_status_rightType {
  Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_SUPPRESSED_ = 0,
  Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_ENABLED_ = 1,
  Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_ACTIVE_ = 2
};
bool Dt_Record_LDW_Ldw_warning_status_rightType_IsValid(int value);
const Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW_Ldw_warning_status_rightType_Ldw_warning_status_rightType_MIN = Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_SUPPRESSED_;
const Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW_Ldw_warning_status_rightType_Ldw_warning_status_rightType_MAX = Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_ACTIVE_;
const int Dt_Record_LDW_Ldw_warning_status_rightType_Ldw_warning_status_rightType_ARRAYSIZE = Dt_Record_LDW_Ldw_warning_status_rightType_Ldw_warning_status_rightType_MAX + 1;

enum Dt_Record_Lane_Support_CurHostLaneStutus {
  Dt_Record_Lane_Support_CurHostLaneStutus_PerfectSituation = 0,
  Dt_Record_Lane_Support_CurHostLaneStutus_PreLBasedOnLaneWidth = 2,
  Dt_Record_Lane_Support_CurHostLaneStutus_PreRBaseOnLaneWidth = 4,
  Dt_Record_Lane_Support_CurHostLaneStutus_ApprochLaneCrossing = 8,
  Dt_Record_Lane_Support_CurHostLaneStutus_LCrossing = 16,
  Dt_Record_Lane_Support_CurHostLaneStutus_RCrossing = 32
};
bool Dt_Record_Lane_Support_CurHostLaneStutus_IsValid(int value);
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support_CurHostLaneStutus_CurHostLaneStutus_MIN = Dt_Record_Lane_Support_CurHostLaneStutus_PerfectSituation;
const Dt_Record_Lane_Support_CurHostLaneStutus Dt_Record_Lane_Support_CurHostLaneStutus_CurHostLaneStutus_MAX = Dt_Record_Lane_Support_CurHostLaneStutus_RCrossing;
const int Dt_Record_Lane_Support_CurHostLaneStutus_CurHostLaneStutus_ARRAYSIZE = Dt_Record_Lane_Support_CurHostLaneStutus_CurHostLaneStutus_MAX + 1;

enum LS_Host_Line_ColorType {
  LS_Host_Line_ColorType_UNDECIDED = 0,
  LS_Host_Line_ColorType_WHITE = 1,
  LS_Host_Line_ColorType_YELLOW_ORANGE_RED = 2,
  LS_Host_Line_ColorType_BLUE_GREEN = 3
};
bool LS_Host_Line_ColorType_IsValid(int value);
const LS_Host_Line_ColorType LS_Host_Line_ColorType_ColorType_MIN = LS_Host_Line_ColorType_UNDECIDED;
const LS_Host_Line_ColorType LS_Host_Line_ColorType_ColorType_MAX = LS_Host_Line_ColorType_BLUE_GREEN;
const int LS_Host_Line_ColorType_ColorType_ARRAYSIZE = LS_Host_Line_ColorType_ColorType_MAX + 1;

enum LS_Host_Line_Prediction_typeType {
  LS_Host_Line_Prediction_typeType_NONE = 0,
  LS_Host_Line_Prediction_typeType_OCCLUDED = 2,
  LS_Host_Line_Prediction_typeType_OTHER_SIDE = 4,
  LS_Host_Line_Prediction_typeType_OVERRIDE = 8,
  LS_Host_Line_Prediction_typeType_DIST_BASED_EXTRAPOLATION = 16,
  LS_Host_Line_Prediction_typeType_HEADWAY_ORIENTED = 32
};
bool LS_Host_Line_Prediction_typeType_IsValid(int value);
const LS_Host_Line_Prediction_typeType LS_Host_Line_Prediction_typeType_Prediction_typeType_MIN = LS_Host_Line_Prediction_typeType_NONE;
const LS_Host_Line_Prediction_typeType LS_Host_Line_Prediction_typeType_Prediction_typeType_MAX = LS_Host_Line_Prediction_typeType_HEADWAY_ORIENTED;
const int LS_Host_Line_Prediction_typeType_Prediction_typeType_ARRAYSIZE = LS_Host_Line_Prediction_typeType_Prediction_typeType_MAX + 1;

enum LS_Host_Line_Type_classificationType {
  LS_Host_Line_Type_classificationType_Type_Classification_UNDECIDED_ = 0,
  LS_Host_Line_Type_classificationType_SOLID = 1,
  LS_Host_Line_Type_classificationType_DECELERATION = 10,
  LS_Host_Line_Type_classificationType_HOV_LANE = 11,
  LS_Host_Line_Type_classificationType_RESEREVED_1 = 12,
  LS_Host_Line_Type_classificationType_RESEREVED_2 = 13,
  LS_Host_Line_Type_classificationType_RESEREVED_3 = 14,
  LS_Host_Line_Type_classificationType_RESEREVED_4 = 15,
  LS_Host_Line_Type_classificationType_DASHEDUNDECIDED = 2,
  LS_Host_Line_Type_classificationType_ROAD_EDGE_NA = 3,
  LS_Host_Line_Type_classificationType_DLM = 4,
  LS_Host_Line_Type_classificationType_BOTTS = 5,
  LS_Host_Line_Type_classificationType_ELEVATED_STRUCTURE_NA = 6,
  LS_Host_Line_Type_classificationType_CURB_NA = 7,
  LS_Host_Line_Type_classificationType_CONES_POLES_NA = 8,
  LS_Host_Line_Type_classificationType_PARKING_CARS_NA = 9
};
bool LS_Host_Line_Type_classificationType_IsValid(int value);
const LS_Host_Line_Type_classificationType LS_Host_Line_Type_classificationType_Type_classificationType_MIN = LS_Host_Line_Type_classificationType_Type_Classification_UNDECIDED_;
const LS_Host_Line_Type_classificationType LS_Host_Line_Type_classificationType_Type_classificationType_MAX = LS_Host_Line_Type_classificationType_RESEREVED_4;
const int LS_Host_Line_Type_classificationType_Type_classificationType_ARRAYSIZE = LS_Host_Line_Type_classificationType_Type_classificationType_MAX + 1;

enum LS_Host_Line_Dlm_typeType {
  LS_Host_Line_Dlm_typeType_NOT_DLM = 0,
  LS_Host_Line_Dlm_typeType_SOLID_DASHED = 1,
  LS_Host_Line_Dlm_typeType_DASHED_SOLID = 2,
  LS_Host_Line_Dlm_typeType_SOLID_SOLID = 3,
  LS_Host_Line_Dlm_typeType_DASHED_DASHED = 4,
  LS_Host_Line_Dlm_typeType_DLM_Type_UNDECIDED_ = 5
};
bool LS_Host_Line_Dlm_typeType_IsValid(int value);
const LS_Host_Line_Dlm_typeType LS_Host_Line_Dlm_typeType_Dlm_typeType_MIN = LS_Host_Line_Dlm_typeType_NOT_DLM;
const LS_Host_Line_Dlm_typeType LS_Host_Line_Dlm_typeType_Dlm_typeType_MAX = LS_Host_Line_Dlm_typeType_DLM_Type_UNDECIDED_;
const int LS_Host_Line_Dlm_typeType_Dlm_typeType_ARRAYSIZE = LS_Host_Line_Dlm_typeType_Dlm_typeType_MAX + 1;

enum LS_Host_Line_Decel_typeType {
  LS_Host_Line_Decel_typeType_NO_DECEL = 0,
  LS_Host_Line_Decel_typeType_DECEL_Type_SOLID_ = 1,
  LS_Host_Line_Decel_typeType_DASHED = 2,
  LS_Host_Line_Decel_typeType_RESERVED_1 = 3,
  LS_Host_Line_Decel_typeType_RESERVED_2 = 4,
  LS_Host_Line_Decel_typeType_RESERVED_3 = 5
};
bool LS_Host_Line_Decel_typeType_IsValid(int value);
const LS_Host_Line_Decel_typeType LS_Host_Line_Decel_typeType_Decel_typeType_MIN = LS_Host_Line_Decel_typeType_NO_DECEL;
const LS_Host_Line_Decel_typeType LS_Host_Line_Decel_typeType_Decel_typeType_MAX = LS_Host_Line_Decel_typeType_RESERVED_3;
const int LS_Host_Line_Decel_typeType_Decel_typeType_ARRAYSIZE = LS_Host_Line_Decel_typeType_Decel_typeType_MAX + 1;

enum LS_Adjacent_Line_ColorType {
  LS_Adjacent_Line_ColorType_UNDECIDED = 0,
  LS_Adjacent_Line_ColorType_WHITE = 1,
  LS_Adjacent_Line_ColorType_YELLOW_ORANGE_RED = 2,
  LS_Adjacent_Line_ColorType_BLUE_GREEN = 3
};
bool LS_Adjacent_Line_ColorType_IsValid(int value);
const LS_Adjacent_Line_ColorType LS_Adjacent_Line_ColorType_ColorType_MIN = LS_Adjacent_Line_ColorType_UNDECIDED;
const LS_Adjacent_Line_ColorType LS_Adjacent_Line_ColorType_ColorType_MAX = LS_Adjacent_Line_ColorType_BLUE_GREEN;
const int LS_Adjacent_Line_ColorType_ColorType_ARRAYSIZE = LS_Adjacent_Line_ColorType_ColorType_MAX + 1;

enum LS_Adjacent_Line_Prediction_typeType {
  LS_Adjacent_Line_Prediction_typeType_NONE = 0,
  LS_Adjacent_Line_Prediction_typeType_OCCLUDED = 1,
  LS_Adjacent_Line_Prediction_typeType_OTHER_SIDE = 2,
  LS_Adjacent_Line_Prediction_typeType_OVERRIDE = 3,
  LS_Adjacent_Line_Prediction_typeType_DIST_BASED_EXTRAPOLATION = 4,
  LS_Adjacent_Line_Prediction_typeType_HEADWAY_ORIENTED = 5
};
bool LS_Adjacent_Line_Prediction_typeType_IsValid(int value);
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line_Prediction_typeType_Prediction_typeType_MIN = LS_Adjacent_Line_Prediction_typeType_NONE;
const LS_Adjacent_Line_Prediction_typeType LS_Adjacent_Line_Prediction_typeType_Prediction_typeType_MAX = LS_Adjacent_Line_Prediction_typeType_HEADWAY_ORIENTED;
const int LS_Adjacent_Line_Prediction_typeType_Prediction_typeType_ARRAYSIZE = LS_Adjacent_Line_Prediction_typeType_Prediction_typeType_MAX + 1;

enum LS_Adjacent_Line_Type_classType {
  LS_Adjacent_Line_Type_classType_Type_Class_UNDECIDED_ = 0,
  LS_Adjacent_Line_Type_classType_SOLID = 1,
  LS_Adjacent_Line_Type_classType_DECELERATION = 10,
  LS_Adjacent_Line_Type_classType_HOV_LANE = 11,
  LS_Adjacent_Line_Type_classType_RESEREVED_1 = 12,
  LS_Adjacent_Line_Type_classType_RESEREVED_2 = 13,
  LS_Adjacent_Line_Type_classType_RESEREVED_3 = 14,
  LS_Adjacent_Line_Type_classType_RESEREVED_4 = 15,
  LS_Adjacent_Line_Type_classType_DASHEDUNDECIDED = 2,
  LS_Adjacent_Line_Type_classType_ROAD_EDGE_NA = 3,
  LS_Adjacent_Line_Type_classType_DLM = 4,
  LS_Adjacent_Line_Type_classType_BOTTS = 5,
  LS_Adjacent_Line_Type_classType_ELEVATED_STRUCTURE_NA = 6,
  LS_Adjacent_Line_Type_classType_CURB_NA = 7,
  LS_Adjacent_Line_Type_classType_CONES_POLES_NA = 8,
  LS_Adjacent_Line_Type_classType_PARKING_CARS_NA = 9
};
bool LS_Adjacent_Line_Type_classType_IsValid(int value);
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line_Type_classType_Type_classType_MIN = LS_Adjacent_Line_Type_classType_Type_Class_UNDECIDED_;
const LS_Adjacent_Line_Type_classType LS_Adjacent_Line_Type_classType_Type_classType_MAX = LS_Adjacent_Line_Type_classType_RESEREVED_4;
const int LS_Adjacent_Line_Type_classType_Type_classType_ARRAYSIZE = LS_Adjacent_Line_Type_classType_Type_classType_MAX + 1;

enum LS_Adjacent_Line_Dlm_typeType {
  LS_Adjacent_Line_Dlm_typeType_NOT_DLM = 0,
  LS_Adjacent_Line_Dlm_typeType_SOLID_DASHED = 1,
  LS_Adjacent_Line_Dlm_typeType_DASHED_SOLID = 2,
  LS_Adjacent_Line_Dlm_typeType_SOLID_SOLID = 3,
  LS_Adjacent_Line_Dlm_typeType_DASHED_DASHED = 4,
  LS_Adjacent_Line_Dlm_typeType_DLM_Type_UNDECIDED_ = 5
};
bool LS_Adjacent_Line_Dlm_typeType_IsValid(int value);
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line_Dlm_typeType_Dlm_typeType_MIN = LS_Adjacent_Line_Dlm_typeType_NOT_DLM;
const LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line_Dlm_typeType_Dlm_typeType_MAX = LS_Adjacent_Line_Dlm_typeType_DLM_Type_UNDECIDED_;
const int LS_Adjacent_Line_Dlm_typeType_Dlm_typeType_ARRAYSIZE = LS_Adjacent_Line_Dlm_typeType_Dlm_typeType_MAX + 1;

enum LS_Adjacent_Line_Decel_typeType {
  LS_Adjacent_Line_Decel_typeType_NO_DECEL = 0,
  LS_Adjacent_Line_Decel_typeType_DECEL_Type_SOLID_ = 1,
  LS_Adjacent_Line_Decel_typeType_DASHED = 2,
  LS_Adjacent_Line_Decel_typeType_RESERVED_1 = 3,
  LS_Adjacent_Line_Decel_typeType_RESERVED_2 = 4,
  LS_Adjacent_Line_Decel_typeType_RESERVED_3 = 5
};
bool LS_Adjacent_Line_Decel_typeType_IsValid(int value);
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line_Decel_typeType_Decel_typeType_MIN = LS_Adjacent_Line_Decel_typeType_NO_DECEL;
const LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line_Decel_typeType_Decel_typeType_MAX = LS_Adjacent_Line_Decel_typeType_RESERVED_3;
const int LS_Adjacent_Line_Decel_typeType_Decel_typeType_ARRAYSIZE = LS_Adjacent_Line_Decel_typeType_Decel_typeType_MAX + 1;

enum LS_Adjacent_Line_Line_roleType {
  LS_Adjacent_Line_Line_roleType_Line_Role_NONE_ = 0,
  LS_Adjacent_Line_Line_roleType_HOST_LEFT = 1,
  LS_Adjacent_Line_Line_roleType_Line_Role_RESERVED_2_ = 10,
  LS_Adjacent_Line_Line_roleType_Line_Role_RESERVED_3_ = 11,
  LS_Adjacent_Line_Line_roleType_RESERVED_4 = 12,
  LS_Adjacent_Line_Line_roleType_RESERVED_0 = 13,
  LS_Adjacent_Line_Line_roleType_RESERVED_6 = 14,
  LS_Adjacent_Line_Line_roleType_RESERVED_7 = 15,
  LS_Adjacent_Line_Line_roleType_HOST_RIGHT = 2,
  LS_Adjacent_Line_Line_roleType_NEXT_LEFT__LEFT_LANEMARK = 3,
  LS_Adjacent_Line_Line_roleType_NEXT_LEFT__RIGHT_LANEMARK = 4,
  LS_Adjacent_Line_Line_roleType_NEXT_RIGHT__LEFT_LANEMARK = 5,
  LS_Adjacent_Line_Line_roleType_NEXT_RIGHT__RIGHT_LANEMARK = 6,
  LS_Adjacent_Line_Line_roleType_LEFT_ROAD_EDGE = 7,
  LS_Adjacent_Line_Line_roleType_RIGHT_ROAD_EDGE = 8,
  LS_Adjacent_Line_Line_roleType_Line_Role_RESERVED_1_ = 9
};
bool LS_Adjacent_Line_Line_roleType_IsValid(int value);
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line_Line_roleType_Line_roleType_MIN = LS_Adjacent_Line_Line_roleType_Line_Role_NONE_;
const LS_Adjacent_Line_Line_roleType LS_Adjacent_Line_Line_roleType_Line_roleType_MAX = LS_Adjacent_Line_Line_roleType_RESERVED_7;
const int LS_Adjacent_Line_Line_roleType_Line_roleType_ARRAYSIZE = LS_Adjacent_Line_Line_roleType_Line_roleType_MAX + 1;

enum LS_INTP_Intp_typeType {
  LS_INTP_Intp_typeType_SPLIT = 0,
  LS_INTP_Intp_typeType_MERGE = 1
};
bool LS_INTP_Intp_typeType_IsValid(int value);
const LS_INTP_Intp_typeType LS_INTP_Intp_typeType_Intp_typeType_MIN = LS_INTP_Intp_typeType_SPLIT;
const LS_INTP_Intp_typeType LS_INTP_Intp_typeType_Intp_typeType_MAX = LS_INTP_Intp_typeType_MERGE;
const int LS_INTP_Intp_typeType_Intp_typeType_ARRAYSIZE = LS_INTP_Intp_typeType_Intp_typeType_MAX + 1;

enum LS_INTP_Intp_line_roleType {
  LS_INTP_Intp_line_roleType_NONE = 0,
  LS_INTP_Intp_line_roleType_HOST_LEFT = 1,
  LS_INTP_Intp_line_roleType_RESERVED_2 = 10,
  LS_INTP_Intp_line_roleType_RESERVED_3 = 11,
  LS_INTP_Intp_line_roleType_RESERVED_4 = 12,
  LS_INTP_Intp_line_roleType_RESERVED_5 = 13,
  LS_INTP_Intp_line_roleType_RESERVED_6 = 14,
  LS_INTP_Intp_line_roleType_RESERVED_7 = 15,
  LS_INTP_Intp_line_roleType_HOST_RIGHT = 2,
  LS_INTP_Intp_line_roleType_NEXT_LEFT__LEFT_LANEMARK = 3,
  LS_INTP_Intp_line_roleType_NEXT_LEFT__RIGHT_LANEMARK = 4,
  LS_INTP_Intp_line_roleType_NEXT_RIGHT__LEFT_LANEMARK = 5,
  LS_INTP_Intp_line_roleType_NEXT_RIGHT__RIGHT_LANEMARK = 6,
  LS_INTP_Intp_line_roleType_LEFT_ROAD_EDGE = 7,
  LS_INTP_Intp_line_roleType_RIGHT_ROAD_EDGE = 8,
  LS_INTP_Intp_line_roleType_RESERVED_1 = 9
};
bool LS_INTP_Intp_line_roleType_IsValid(int value);
const LS_INTP_Intp_line_roleType LS_INTP_Intp_line_roleType_Intp_line_roleType_MIN = LS_INTP_Intp_line_roleType_NONE;
const LS_INTP_Intp_line_roleType LS_INTP_Intp_line_roleType_Intp_line_roleType_MAX = LS_INTP_Intp_line_roleType_RESERVED_7;
const int LS_INTP_Intp_line_roleType_Intp_line_roleType_ARRAYSIZE = LS_INTP_Intp_line_roleType_Intp_line_roleType_MAX + 1;

enum RoadEdge_Ls_road_edge_type_avg__classType {
  RoadEdge_Ls_road_edge_type_avg__classType_UNDECIDED = 0,
  RoadEdge_Ls_road_edge_type_avg__classType_ROAD_EDGE = 3,
  RoadEdge_Ls_road_edge_type_avg__classType_ELEVATED_STRUCTURE = 6,
  RoadEdge_Ls_road_edge_type_avg__classType_CURB = 7,
  RoadEdge_Ls_road_edge_type_avg__classType_CONES_POLES = 8,
  RoadEdge_Ls_road_edge_type_avg__classType_PARKING_CARS = 9
};
bool RoadEdge_Ls_road_edge_type_avg__classType_IsValid(int value);
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge_Ls_road_edge_type_avg__classType_Ls_road_edge_type_avg__classType_MIN = RoadEdge_Ls_road_edge_type_avg__classType_UNDECIDED;
const RoadEdge_Ls_road_edge_type_avg__classType RoadEdge_Ls_road_edge_type_avg__classType_Ls_road_edge_type_avg__classType_MAX = RoadEdge_Ls_road_edge_type_avg__classType_PARKING_CARS;
const int RoadEdge_Ls_road_edge_type_avg__classType_Ls_road_edge_type_avg__classType_ARRAYSIZE = RoadEdge_Ls_road_edge_type_avg__classType_Ls_road_edge_type_avg__classType_MAX + 1;

enum RoadEdge_Ls_road_edge_prediction_typeType {
  RoadEdge_Ls_road_edge_prediction_typeType_NONE = 0,
  RoadEdge_Ls_road_edge_prediction_typeType_OCCLUDED = 1,
  RoadEdge_Ls_road_edge_prediction_typeType_OTHER_SIDE = 2,
  RoadEdge_Ls_road_edge_prediction_typeType_OVERRIDE = 3,
  RoadEdge_Ls_road_edge_prediction_typeType_DIST_BASED_EXTRAPOLATION = 4,
  RoadEdge_Ls_road_edge_prediction_typeType_HEADWAY_ORIENTED = 5
};
bool RoadEdge_Ls_road_edge_prediction_typeType_IsValid(int value);
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge_Ls_road_edge_prediction_typeType_Ls_road_edge_prediction_typeType_MIN = RoadEdge_Ls_road_edge_prediction_typeType_NONE;
const RoadEdge_Ls_road_edge_prediction_typeType RoadEdge_Ls_road_edge_prediction_typeType_Ls_road_edge_prediction_typeType_MAX = RoadEdge_Ls_road_edge_prediction_typeType_HEADWAY_ORIENTED;
const int RoadEdge_Ls_road_edge_prediction_typeType_Ls_road_edge_prediction_typeType_ARRAYSIZE = RoadEdge_Ls_road_edge_prediction_typeType_Ls_road_edge_prediction_typeType_MAX + 1;

enum RoadEdge_Ls_road_edge_sideType {
  RoadEdge_Ls_road_edge_sideType_UNKNOWN = 0,
  RoadEdge_Ls_road_edge_sideType_LEFT = 1,
  RoadEdge_Ls_road_edge_sideType_RIGHT = 2
};
bool RoadEdge_Ls_road_edge_sideType_IsValid(int value);
const RoadEdge_Ls_road_edge_sideType RoadEdge_Ls_road_edge_sideType_Ls_road_edge_sideType_MIN = RoadEdge_Ls_road_edge_sideType_UNKNOWN;
const RoadEdge_Ls_road_edge_sideType RoadEdge_Ls_road_edge_sideType_Ls_road_edge_sideType_MAX = RoadEdge_Ls_road_edge_sideType_RIGHT;
const int RoadEdge_Ls_road_edge_sideType_Ls_road_edge_sideType_ARRAYSIZE = RoadEdge_Ls_road_edge_sideType_Ls_road_edge_sideType_MAX + 1;

enum RoadEdge_Ls_road_edge_indexType {
  RoadEdge_Ls_road_edge_indexType_LS_Road_Edge_Index_UNKNOWN_ = 0,
  RoadEdge_Ls_road_edge_indexType_FIRST = 1,
  RoadEdge_Ls_road_edge_indexType_SECOND = 2,
  RoadEdge_Ls_road_edge_indexType_RESERVED = 3
};
bool RoadEdge_Ls_road_edge_indexType_IsValid(int value);
const RoadEdge_Ls_road_edge_indexType RoadEdge_Ls_road_edge_indexType_Ls_road_edge_indexType_MIN = RoadEdge_Ls_road_edge_indexType_LS_Road_Edge_Index_UNKNOWN_;
const RoadEdge_Ls_road_edge_indexType RoadEdge_Ls_road_edge_indexType_Ls_road_edge_indexType_MAX = RoadEdge_Ls_road_edge_indexType_RESERVED;
const int RoadEdge_Ls_road_edge_indexType_Ls_road_edge_indexType_ARRAYSIZE = RoadEdge_Ls_road_edge_indexType_Ls_road_edge_indexType_MAX + 1;

enum ObjCommon_Obj_vd_cipv_lostType {
  ObjCommon_Obj_vd_cipv_lostType_NO_LOSS = 0,
  ObjCommon_Obj_vd_cipv_lostType_LOST_TARGET_FOV_OUT = 1,
  ObjCommon_Obj_vd_cipv_lostType_LOST_TARGET_FOV_IN = 2
};
bool ObjCommon_Obj_vd_cipv_lostType_IsValid(int value);
const ObjCommon_Obj_vd_cipv_lostType ObjCommon_Obj_vd_cipv_lostType_Obj_vd_cipv_lostType_MIN = ObjCommon_Obj_vd_cipv_lostType_NO_LOSS;
const ObjCommon_Obj_vd_cipv_lostType ObjCommon_Obj_vd_cipv_lostType_Obj_vd_cipv_lostType_MAX = ObjCommon_Obj_vd_cipv_lostType_LOST_TARGET_FOV_IN;
const int ObjCommon_Obj_vd_cipv_lostType_Obj_vd_cipv_lostType_ARRAYSIZE = ObjCommon_Obj_vd_cipv_lostType_Obj_vd_cipv_lostType_MAX + 1;

enum ObjCommon_Obj_vd_allow_acceType {
  ObjCommon_Obj_vd_allow_acceType_FREE_SPACE = 0,
  ObjCommon_Obj_vd_allow_acceType_SPACE_NOT_FREE = 1,
  ObjCommon_Obj_vd_allow_acceType_FREE_SPACE_UNKNOWN = 2
};
bool ObjCommon_Obj_vd_allow_acceType_IsValid(int value);
const ObjCommon_Obj_vd_allow_acceType ObjCommon_Obj_vd_allow_acceType_Obj_vd_allow_acceType_MIN = ObjCommon_Obj_vd_allow_acceType_FREE_SPACE;
const ObjCommon_Obj_vd_allow_acceType ObjCommon_Obj_vd_allow_acceType_Obj_vd_allow_acceType_MAX = ObjCommon_Obj_vd_allow_acceType_FREE_SPACE_UNKNOWN;
const int ObjCommon_Obj_vd_allow_acceType_Obj_vd_allow_acceType_ARRAYSIZE = ObjCommon_Obj_vd_allow_acceType_Obj_vd_allow_acceType_MAX + 1;

enum MeObject_Obj_measuring_statusType {
  MeObject_Obj_measuring_statusType_OLD_NEW = 1,
  MeObject_Obj_measuring_statusType_PREDICTED_MEASURED = 2,
  MeObject_Obj_measuring_statusType_NOTVALID_VALID = 3
};
bool MeObject_Obj_measuring_statusType_IsValid(int value);
const MeObject_Obj_measuring_statusType MeObject_Obj_measuring_statusType_Obj_measuring_statusType_MIN = MeObject_Obj_measuring_statusType_OLD_NEW;
const MeObject_Obj_measuring_statusType MeObject_Obj_measuring_statusType_Obj_measuring_statusType_MAX = MeObject_Obj_measuring_statusType_NOTVALID_VALID;
const int MeObject_Obj_measuring_statusType_Obj_measuring_statusType_ARRAYSIZE = MeObject_Obj_measuring_statusType_Obj_measuring_statusType_MAX + 1;

enum MeObject_Obj_object_classType {
  MeObject_Obj_object_classType_INVALID_Obj_Type = 0,
  MeObject_Obj_object_classType_CAR = 1,
  MeObject_Obj_object_classType_TRUCK = 2,
  MeObject_Obj_object_classType_BIKE = 3,
  MeObject_Obj_object_classType_BICYCLE = 4,
  MeObject_Obj_object_classType_PEDESTRIAN = 5,
  MeObject_Obj_object_classType_GENERAL_OBJECT = 6,
  MeObject_Obj_object_classType_ANIMAL = 7,
  MeObject_Obj_object_classType_UNCERTAIN_VCL = 8
};
bool MeObject_Obj_object_classType_IsValid(int value);
const MeObject_Obj_object_classType MeObject_Obj_object_classType_Obj_object_classType_MIN = MeObject_Obj_object_classType_INVALID_Obj_Type;
const MeObject_Obj_object_classType MeObject_Obj_object_classType_Obj_object_classType_MAX = MeObject_Obj_object_classType_UNCERTAIN_VCL;
const int MeObject_Obj_object_classType_Obj_object_classType_ARRAYSIZE = MeObject_Obj_object_classType_Obj_object_classType_MAX + 1;

enum MeObject_Obj_lane_assignmentType {
  MeObject_Obj_lane_assignmentType_UNKNOWN_lane_assign = 0,
  MeObject_Obj_lane_assignmentType_LEFT_LEFT = 1,
  MeObject_Obj_lane_assignmentType_LEFT = 2,
  MeObject_Obj_lane_assignmentType_HOST = 3,
  MeObject_Obj_lane_assignmentType_RIGHT = 4,
  MeObject_Obj_lane_assignmentType_RIGHT_RIGHT = 5
};
bool MeObject_Obj_lane_assignmentType_IsValid(int value);
const MeObject_Obj_lane_assignmentType MeObject_Obj_lane_assignmentType_Obj_lane_assignmentType_MIN = MeObject_Obj_lane_assignmentType_UNKNOWN_lane_assign;
const MeObject_Obj_lane_assignmentType MeObject_Obj_lane_assignmentType_Obj_lane_assignmentType_MAX = MeObject_Obj_lane_assignmentType_RIGHT_RIGHT;
const int MeObject_Obj_lane_assignmentType_Obj_lane_assignmentType_ARRAYSIZE = MeObject_Obj_lane_assignmentType_Obj_lane_assignmentType_MAX + 1;

enum MeObject_Obj_motion_category {
  MeObject_Obj_motion_category_INVALID = 0,
  MeObject_Obj_motion_category_UNDEFINED = 1,
  MeObject_Obj_motion_category_PASSING = 2,
  MeObject_Obj_motion_category_PASSING_IN = 3,
  MeObject_Obj_motion_category_PASSING_OUT = 4,
  MeObject_Obj_motion_category_CLOSE_CUT_IN = 5,
  MeObject_Obj_motion_category_MOVING_IN = 6,
  MeObject_Obj_motion_category_MOVING_OUT = 7,
  MeObject_Obj_motion_category_CROSSING = 8,
  MeObject_Obj_motion_category_LTAP = 9,
  MeObject_Obj_motion_category_RTAP = 10,
  MeObject_Obj_motion_category_MOVING = 11,
  MeObject_Obj_motion_category_PRECEDING = 12,
  MeObject_Obj_motion_category_ONCOMING = 13
};
bool MeObject_Obj_motion_category_IsValid(int value);
const MeObject_Obj_motion_category MeObject_Obj_motion_category_Obj_motion_category_MIN = MeObject_Obj_motion_category_INVALID;
const MeObject_Obj_motion_category MeObject_Obj_motion_category_Obj_motion_category_MAX = MeObject_Obj_motion_category_ONCOMING;
const int MeObject_Obj_motion_category_Obj_motion_category_ARRAYSIZE = MeObject_Obj_motion_category_Obj_motion_category_MAX + 1;

enum MeObject_Obj_motion_status {
  MeObject_Obj_motion_status_INVALID_STATUS = 0,
  MeObject_Obj_motion_status_UNKONWN = 1,
  MeObject_Obj_motion_status_MOVING_motion_status = 2,
  MeObject_Obj_motion_status_STATIONARY = 3,
  MeObject_Obj_motion_status_STOPPED = 4,
  MeObject_Obj_motion_status_MOVING_SLOWLY = 5
};
bool MeObject_Obj_motion_status_IsValid(int value);
const MeObject_Obj_motion_status MeObject_Obj_motion_status_Obj_motion_status_MIN = MeObject_Obj_motion_status_INVALID_STATUS;
const MeObject_Obj_motion_status MeObject_Obj_motion_status_Obj_motion_status_MAX = MeObject_Obj_motion_status_MOVING_SLOWLY;
const int MeObject_Obj_motion_status_Obj_motion_status_ARRAYSIZE = MeObject_Obj_motion_status_Obj_motion_status_MAX + 1;

enum MeObject_Obj_motion_orientation {
  MeObject_Obj_motion_orientation_INVALID_ORIENTATION_STATUS = 0,
  MeObject_Obj_motion_orientation_DRIFTING_RIGHT = 1,
  MeObject_Obj_motion_orientation_CROSSING_RIGHT = 3,
  MeObject_Obj_motion_orientation_OC_DRIFTING_RIGHT = 5,
  MeObject_Obj_motion_orientation_ONCOMMING = 6,
  MeObject_Obj_motion_orientation_OC_DRIFTING_LEFT = 7,
  MeObject_Obj_motion_orientation_CROSSING_LEFT = 9,
  MeObject_Obj_motion_orientation_DRIFTING_LEFT = 11,
  MeObject_Obj_motion_orientation_PRECEEDING = 12,
  MeObject_Obj_motion_orientation_UNKNOWN_ORIENTATION_STATUS = 13
};
bool MeObject_Obj_motion_orientation_IsValid(int value);
const MeObject_Obj_motion_orientation MeObject_Obj_motion_orientation_Obj_motion_orientation_MIN = MeObject_Obj_motion_orientation_INVALID_ORIENTATION_STATUS;
const MeObject_Obj_motion_orientation MeObject_Obj_motion_orientation_Obj_motion_orientation_MAX = MeObject_Obj_motion_orientation_UNKNOWN_ORIENTATION_STATUS;
const int MeObject_Obj_motion_orientation_Obj_motion_orientation_ARRAYSIZE = MeObject_Obj_motion_orientation_Obj_motion_orientation_MAX + 1;

enum SLD_Sld_role_0Type {
  SLD_Sld_role_0Type_LEFT_2 = 0,
  SLD_Sld_role_0Type_LEFT_1 = 1,
  SLD_Sld_role_0Type_HOST = 2,
  SLD_Sld_role_0Type_RIGHT_1 = 3,
  SLD_Sld_role_0Type_RIGHT_2 = 4
};
bool SLD_Sld_role_0Type_IsValid(int value);
const SLD_Sld_role_0Type SLD_Sld_role_0Type_Sld_role_0Type_MIN = SLD_Sld_role_0Type_LEFT_2;
const SLD_Sld_role_0Type SLD_Sld_role_0Type_Sld_role_0Type_MAX = SLD_Sld_role_0Type_RIGHT_2;
const int SLD_Sld_role_0Type_Sld_role_0Type_ARRAYSIZE = SLD_Sld_role_0Type_Sld_role_0Type_MAX + 1;

enum SLD_Sld_view_0Type {
  SLD_Sld_view_0Type_UNKNOWN = 0,
  SLD_Sld_view_0Type_FAR = 1,
  SLD_Sld_view_0Type_CLOSE = 2
};
bool SLD_Sld_view_0Type_IsValid(int value);
const SLD_Sld_view_0Type SLD_Sld_view_0Type_Sld_view_0Type_MIN = SLD_Sld_view_0Type_UNKNOWN;
const SLD_Sld_view_0Type SLD_Sld_view_0Type_Sld_view_0Type_MAX = SLD_Sld_view_0Type_CLOSE;
const int SLD_Sld_view_0Type_Sld_view_0Type_ARRAYSIZE = SLD_Sld_view_0Type_Sld_view_0Type_MAX + 1;

enum SLD_Sld_direction_0Type {
  SLD_Sld_direction_0Type_SLD_Direction_0_UNKNOWN_ = 0,
  SLD_Sld_direction_0Type_STRAIGHT = 1,
  SLD_Sld_direction_0Type_RIGHT = 2,
  SLD_Sld_direction_0Type_LEFT = 4
};
bool SLD_Sld_direction_0Type_IsValid(int value);
const SLD_Sld_direction_0Type SLD_Sld_direction_0Type_Sld_direction_0Type_MIN = SLD_Sld_direction_0Type_SLD_Direction_0_UNKNOWN_;
const SLD_Sld_direction_0Type SLD_Sld_direction_0Type_Sld_direction_0Type_MAX = SLD_Sld_direction_0Type_LEFT;
const int SLD_Sld_direction_0Type_Sld_direction_0Type_ARRAYSIZE = SLD_Sld_direction_0Type_Sld_direction_0Type_MAX + 1;

enum SLD_Sld_type_0Type {
  SLD_Sld_type_0Type_UNKNOWN_CLASS = 0,
  SLD_Sld_type_0Type_REGULAR = 1,
  SLD_Sld_type_0Type_NO_LANE = 10,
  SLD_Sld_type_0Type_RESERVED_0 = 11,
  SLD_Sld_type_0Type_RESERVED_1 = 12,
  SLD_Sld_type_0Type_RESERVED_2 = 13,
  SLD_Sld_type_0Type_RESERVED_3 = 14,
  SLD_Sld_type_0Type_RESERVED_4 = 15,
  SLD_Sld_type_0Type_RESERVED_5 = 16,
  SLD_Sld_type_0Type_SHOULDER = 2,
  SLD_Sld_type_0Type_OPENING = 3,
  SLD_Sld_type_0Type_CLOSING = 4,
  SLD_Sld_type_0Type_BICYCLE_LANE = 5,
  SLD_Sld_type_0Type_PARKING = 6,
  SLD_Sld_type_0Type_CARPOOL = 7,
  SLD_Sld_type_0Type_BAY = 8,
  SLD_Sld_type_0Type_BUS_LANE = 9
};
bool SLD_Sld_type_0Type_IsValid(int value);
const SLD_Sld_type_0Type SLD_Sld_type_0Type_Sld_type_0Type_MIN = SLD_Sld_type_0Type_UNKNOWN_CLASS;
const SLD_Sld_type_0Type SLD_Sld_type_0Type_Sld_type_0Type_MAX = SLD_Sld_type_0Type_RESERVED_5;
const int SLD_Sld_type_0Type_Sld_type_0Type_ARRAYSIZE = SLD_Sld_type_0Type_Sld_type_0Type_MAX + 1;

enum SematicLine_Sl_typeType {
  SematicLine_Sl_typeType_SOLID = 0,
  SematicLine_Sl_typeType_DASHED = 8,
  SematicLine_Sl_typeType_TRIANGULAR = 9
};
bool SematicLine_Sl_typeType_IsValid(int value);
const SematicLine_Sl_typeType SematicLine_Sl_typeType_Sl_typeType_MIN = SematicLine_Sl_typeType_SOLID;
const SematicLine_Sl_typeType SematicLine_Sl_typeType_Sl_typeType_MAX = SematicLine_Sl_typeType_TRIANGULAR;
const int SematicLine_Sl_typeType_Sl_typeType_ARRAYSIZE = SematicLine_Sl_typeType_Sl_typeType_MAX + 1;

enum SematicLine_Sl_colorType {
  SematicLine_Sl_colorType_GREEN_BLUE = 0,
  SematicLine_Sl_colorType_WHITE = 1,
  SematicLine_Sl_colorType_YELLOW_ORANGE_RED = 2
};
bool SematicLine_Sl_colorType_IsValid(int value);
const SematicLine_Sl_colorType SematicLine_Sl_colorType_Sl_colorType_MIN = SematicLine_Sl_colorType_GREEN_BLUE;
const SematicLine_Sl_colorType SematicLine_Sl_colorType_Sl_colorType_MAX = SematicLine_Sl_colorType_YELLOW_ORANGE_RED;
const int SematicLine_Sl_colorType_Sl_colorType_ARRAYSIZE = SematicLine_Sl_colorType_Sl_colorType_MAX + 1;

enum SematicLine_Sl_measure_statusType {
  SematicLine_Sl_measure_statusType_UNKNOWN = 0,
  SematicLine_Sl_measure_statusType_IN_IMAGE = 1,
  SematicLine_Sl_measure_statusType_PREDICTED = 2
};
bool SematicLine_Sl_measure_statusType_IsValid(int value);
const SematicLine_Sl_measure_statusType SematicLine_Sl_measure_statusType_Sl_measure_statusType_MIN = SematicLine_Sl_measure_statusType_UNKNOWN;
const SematicLine_Sl_measure_statusType SematicLine_Sl_measure_statusType_Sl_measure_statusType_MAX = SematicLine_Sl_measure_statusType_PREDICTED;
const int SematicLine_Sl_measure_statusType_Sl_measure_statusType_ARRAYSIZE = SematicLine_Sl_measure_statusType_Sl_measure_statusType_MAX + 1;

enum TFL_Tfl_colorType {
  TFL_Tfl_colorType_UNKNOWN_x000D_ = 0,
  TFL_Tfl_colorType_RED_x000D_ = 1,
  TFL_Tfl_colorType_YELLOW_x000D_ = 2,
  TFL_Tfl_colorType_GREEN_x000D_ = 3,
  TFL_Tfl_colorType_RED_YELLOW = 4
};
bool TFL_Tfl_colorType_IsValid(int value);
const TFL_Tfl_colorType TFL_Tfl_colorType_Tfl_colorType_MIN = TFL_Tfl_colorType_UNKNOWN_x000D_;
const TFL_Tfl_colorType TFL_Tfl_colorType_Tfl_colorType_MAX = TFL_Tfl_colorType_RED_YELLOW;
const int TFL_Tfl_colorType_Tfl_colorType_ARRAYSIZE = TFL_Tfl_colorType_Tfl_colorType_MAX + 1;

enum TFL_Tfl_relevance_directionType {
  TFL_Tfl_relevance_directionType_TFL_Relevance_Direction_UNKNOWN_x000D__ = 0,
  TFL_Tfl_relevance_directionType_FORWARED_CENTER_x000D_ = 1,
  TFL_Tfl_relevance_directionType_FORWARED_RIGHT = 16,
  TFL_Tfl_relevance_directionType_LEFT_x000D_ = 2,
  TFL_Tfl_relevance_directionType_RIGHT_x000D_ = 4,
  TFL_Tfl_relevance_directionType_FORWARED_LEFT_x000D_ = 8
};
bool TFL_Tfl_relevance_directionType_IsValid(int value);
const TFL_Tfl_relevance_directionType TFL_Tfl_relevance_directionType_Tfl_relevance_directionType_MIN = TFL_Tfl_relevance_directionType_TFL_Relevance_Direction_UNKNOWN_x000D__;
const TFL_Tfl_relevance_directionType TFL_Tfl_relevance_directionType_Tfl_relevance_directionType_MAX = TFL_Tfl_relevance_directionType_FORWARED_RIGHT;
const int TFL_Tfl_relevance_directionType_Tfl_relevance_directionType_ARRAYSIZE = TFL_Tfl_relevance_directionType_Tfl_relevance_directionType_MAX + 1;

enum TFL_Tfl_structure_orientationType {
  TFL_Tfl_structure_orientationType_TFL_Structure_Orientation_UNKNOWN_x000D__ = 0,
  TFL_Tfl_structure_orientationType_VERTICAL_x000D_ = 1,
  TFL_Tfl_structure_orientationType_HORIZENTAL = 2
};
bool TFL_Tfl_structure_orientationType_IsValid(int value);
const TFL_Tfl_structure_orientationType TFL_Tfl_structure_orientationType_Tfl_structure_orientationType_MIN = TFL_Tfl_structure_orientationType_TFL_Structure_Orientation_UNKNOWN_x000D__;
const TFL_Tfl_structure_orientationType TFL_Tfl_structure_orientationType_Tfl_structure_orientationType_MAX = TFL_Tfl_structure_orientationType_HORIZENTAL;
const int TFL_Tfl_structure_orientationType_Tfl_structure_orientationType_ARRAYSIZE = TFL_Tfl_structure_orientationType_Tfl_structure_orientationType_MAX + 1;

enum TFL_Tfl_modeType {
  TFL_Tfl_modeType_TFL_Mode_UNKNOWN_x000D__ = 0,
  TFL_Tfl_modeType_CONTINUOUS_x000D_ = 1,
  TFL_Tfl_modeType_BLINKING = 2
};
bool TFL_Tfl_modeType_IsValid(int value);
const TFL_Tfl_modeType TFL_Tfl_modeType_Tfl_modeType_MIN = TFL_Tfl_modeType_TFL_Mode_UNKNOWN_x000D__;
const TFL_Tfl_modeType TFL_Tfl_modeType_Tfl_modeType_MAX = TFL_Tfl_modeType_BLINKING;
const int TFL_Tfl_modeType_Tfl_modeType_ARRAYSIZE = TFL_Tfl_modeType_Tfl_modeType_MAX + 1;

enum TFL_Tfl_shapeType {
  TFL_Tfl_shapeType_TFL_Shape_UNKNOWN_x000D__ = 0,
  TFL_Tfl_shapeType_CIRCULAR_x000D_ = 1,
  TFL_Tfl_shapeType_DIAGONAL_x000D_ = 16,
  TFL_Tfl_shapeType_FORWARED_x000D_ = 2,
  TFL_Tfl_shapeType_ARROW_x000D_ = 32,
  TFL_Tfl_shapeType_TFL_Shape_LEFT_x000D__ = 4,
  TFL_Tfl_shapeType_PEDS = 64,
  TFL_Tfl_shapeType_TFL_Shape_RIGHT_x000D__ = 8
};
bool TFL_Tfl_shapeType_IsValid(int value);
const TFL_Tfl_shapeType TFL_Tfl_shapeType_Tfl_shapeType_MIN = TFL_Tfl_shapeType_TFL_Shape_UNKNOWN_x000D__;
const TFL_Tfl_shapeType TFL_Tfl_shapeType_Tfl_shapeType_MAX = TFL_Tfl_shapeType_PEDS;
const int TFL_Tfl_shapeType_Tfl_shapeType_ARRAYSIZE = TFL_Tfl_shapeType_Tfl_shapeType_MAX + 1;

enum TSR_Tsr_relevancyType {
  TSR_Tsr_relevancyType_RELEVANT_SIGN = 0,
  TSR_Tsr_relevancyType_HIGHWAY_EXIT_SIGN = 1,
  TSR_Tsr_relevancyType_OTHER_FILTER_REASON = 10,
  TSR_Tsr_relevancyType_LANE_ASSIGNMENT_SIGN = 2,
  TSR_Tsr_relevancyType_PARALLEL_ROAD_SIGN = 3,
  TSR_Tsr_relevancyType_SIGN_ON_TURN = 4,
  TSR_Tsr_relevancyType_FAR_IRRELEVANT_SIGN = 5,
  TSR_Tsr_relevancyType_INTERNAL_SIGN_CONTRADICTION = 6,
  TSR_Tsr_relevancyType_ERROR_SIGN_CODE = 7,
  TSR_Tsr_relevancyType_CIPV_IN_FRONT = 8,
  TSR_Tsr_relevancyType_CONTRADICT_ARROW_SIGN = 9
};
bool TSR_Tsr_relevancyType_IsValid(int value);
const TSR_Tsr_relevancyType TSR_Tsr_relevancyType_Tsr_relevancyType_MIN = TSR_Tsr_relevancyType_RELEVANT_SIGN;
const TSR_Tsr_relevancyType TSR_Tsr_relevancyType_Tsr_relevancyType_MAX = TSR_Tsr_relevancyType_OTHER_FILTER_REASON;
const int TSR_Tsr_relevancyType_Tsr_relevancyType_ARRAYSIZE = TSR_Tsr_relevancyType_Tsr_relevancyType_MAX + 1;

enum TSR_Tsr_filter_typeType {
  TSR_Tsr_filter_typeType_NO_SLI_FILTER = 0,
  TSR_Tsr_filter_typeType_TRUCK = 1,
  TSR_Tsr_filter_typeType_EMBEDDED = 2,
  TSR_Tsr_filter_typeType_MINIMUN = 3,
  TSR_Tsr_filter_typeType_ROAD_NUMBER = 4,
  TSR_Tsr_filter_typeType_RESERVED_1 = 5,
  TSR_Tsr_filter_typeType_RESERVED_2 = 6,
  TSR_Tsr_filter_typeType_RESERVED_3 = 7
};
bool TSR_Tsr_filter_typeType_IsValid(int value);
const TSR_Tsr_filter_typeType TSR_Tsr_filter_typeType_Tsr_filter_typeType_MIN = TSR_Tsr_filter_typeType_NO_SLI_FILTER;
const TSR_Tsr_filter_typeType TSR_Tsr_filter_typeType_Tsr_filter_typeType_MAX = TSR_Tsr_filter_typeType_RESERVED_3;
const int TSR_Tsr_filter_typeType_Tsr_filter_typeType_ARRAYSIZE = TSR_Tsr_filter_typeType_Tsr_filter_typeType_MAX + 1;

enum TSR_Tsr_sign_shapeType {
  TSR_Tsr_sign_shapeType_UNKNON = 0,
  TSR_Tsr_sign_shapeType_CIRCLE = 1,
  TSR_Tsr_sign_shapeType_RECTANGLE = 2,
  TSR_Tsr_sign_shapeType_TRIANGLE_UP = 3,
  TSR_Tsr_sign_shapeType_TRIANGLE_DOWN = 4,
  TSR_Tsr_sign_shapeType_DIAMOND = 5,
  TSR_Tsr_sign_shapeType_RESERVED_0 = 6,
  TSR_Tsr_sign_shapeType_TSR_Sign_Shape_RESERVED_2_ = 7,
  TSR_Tsr_sign_shapeType_TSR_Sign_Shape_RESERVED_3_ = 8
};
bool TSR_Tsr_sign_shapeType_IsValid(int value);
const TSR_Tsr_sign_shapeType TSR_Tsr_sign_shapeType_Tsr_sign_shapeType_MIN = TSR_Tsr_sign_shapeType_UNKNON;
const TSR_Tsr_sign_shapeType TSR_Tsr_sign_shapeType_Tsr_sign_shapeType_MAX = TSR_Tsr_sign_shapeType_TSR_Sign_Shape_RESERVED_3_;
const int TSR_Tsr_sign_shapeType_Tsr_sign_shapeType_ARRAYSIZE = TSR_Tsr_sign_shapeType_Tsr_sign_shapeType_MAX + 1;

enum TSR_Tsr_sign_structureType {
  TSR_Tsr_sign_structureType_UNKNOWN = 0,
  TSR_Tsr_sign_structureType_STANDARD = 1,
  TSR_Tsr_sign_structureType_VARIABLE = 2,
  TSR_Tsr_sign_structureType_ELECTRONIC = 3
};
bool TSR_Tsr_sign_structureType_IsValid(int value);
const TSR_Tsr_sign_structureType TSR_Tsr_sign_structureType_Tsr_sign_structureType_MIN = TSR_Tsr_sign_structureType_UNKNOWN;
const TSR_Tsr_sign_structureType TSR_Tsr_sign_structureType_Tsr_sign_structureType_MAX = TSR_Tsr_sign_structureType_ELECTRONIC;
const int TSR_Tsr_sign_structureType_Tsr_sign_structureType_ARRAYSIZE = TSR_Tsr_sign_structureType_Tsr_sign_structureType_MAX + 1;

// ===================================================================

class Dt_Record_App : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_App) */ {
 public:
  Dt_Record_App();
  virtual ~Dt_Record_App();

  Dt_Record_App(const Dt_Record_App& from);

  inline Dt_Record_App& operator=(const Dt_Record_App& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_App& default_instance();

  static inline const Dt_Record_App* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_App*>(
               &_Dt_Record_App_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Dt_Record_App* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_App* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_App* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_App& from);
  void MergeFrom(const Dt_Record_App& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_App* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Dt_Record_App_Fatal_errorType Fatal_errorType;
  static const Fatal_errorType APP_OK =
    Dt_Record_App_Fatal_errorType_APP_OK;
  static const Fatal_errorType APP_ERROR =
    Dt_Record_App_Fatal_errorType_APP_ERROR;
  static const Fatal_errorType APP_FS_ERROR =
    Dt_Record_App_Fatal_errorType_APP_FS_ERROR;
  static const Fatal_errorType APP_CALIBRATION_ERROR =
    Dt_Record_App_Fatal_errorType_APP_CALIBRATION_ERROR;
  static const Fatal_errorType APP_GVPU_STATE_TERMINAL =
    Dt_Record_App_Fatal_errorType_APP_GVPU_STATE_TERMINAL;
  static const Fatal_errorType EDR_WROTE_TO_FLASH =
    Dt_Record_App_Fatal_errorType_EDR_WROTE_TO_FLASH;
  static const Fatal_errorType APP_INIT_FAILED =
    Dt_Record_App_Fatal_errorType_APP_INIT_FAILED;
  static const Fatal_errorType APP_INIT_CAMERA_INIT =
    Dt_Record_App_Fatal_errorType_APP_INIT_CAMERA_INIT;
  static const Fatal_errorType APP_I2C_VIDEO_GRAB_FAILED =
    Dt_Record_App_Fatal_errorType_APP_I2C_VIDEO_GRAB_FAILED;
  static const Fatal_errorType APP_I2C_CAMERA_SELF_RESET =
    Dt_Record_App_Fatal_errorType_APP_I2C_CAMERA_SELF_RESET;
  static const Fatal_errorType APP_I2C_TIMEOUT_ERROR =
    Dt_Record_App_Fatal_errorType_APP_I2C_TIMEOUT_ERROR;
  static const Fatal_errorType APP_PATTERN_TEST =
    Dt_Record_App_Fatal_errorType_APP_PATTERN_TEST;
  static const Fatal_errorType APP_CAM_PARAMS_CCFT_CRC_FAILED =
    Dt_Record_App_Fatal_errorType_APP_CAM_PARAMS_CCFT_CRC_FAILED;
  static const Fatal_errorType PLL_COMPARISON_ERROR =
    Dt_Record_App_Fatal_errorType_PLL_COMPARISON_ERROR;
  static const Fatal_errorType APP_CPS_STL_FAILED =
    Dt_Record_App_Fatal_errorType_APP_CPS_STL_FAILED;
  static const Fatal_errorType PV_GENERAL_ERROR =
    Dt_Record_App_Fatal_errorType_PV_GENERAL_ERROR;
  static const Fatal_errorType PV_VERIFICATION_ERROR =
    Dt_Record_App_Fatal_errorType_PV_VERIFICATION_ERROR;
  static inline bool Fatal_errorType_IsValid(int value) {
    return Dt_Record_App_Fatal_errorType_IsValid(value);
  }
  static const Fatal_errorType Fatal_errorType_MIN =
    Dt_Record_App_Fatal_errorType_Fatal_errorType_MIN;
  static const Fatal_errorType Fatal_errorType_MAX =
    Dt_Record_App_Fatal_errorType_Fatal_errorType_MAX;
  static const int Fatal_errorType_ARRAYSIZE =
    Dt_Record_App_Fatal_errorType_Fatal_errorType_ARRAYSIZE;

  typedef Dt_Record_App_Minor_errorType Minor_errorType;
  static const Minor_errorType BM_OK =
    Dt_Record_App_Minor_errorType_BM_OK;
  static const Minor_errorType BM_ERROR =
    Dt_Record_App_Minor_errorType_BM_ERROR;
  static const Minor_errorType BM_EM_ERROR =
    Dt_Record_App_Minor_errorType_BM_EM_ERROR;
  static const Minor_errorType BM_EM_ERR_FAILED_LOAD_SETTING =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_LOAD_SETTING;
  static const Minor_errorType BM_EM_ERR_FAILED_LOAD_REGISTRY =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_LOAD_REGISTRY;
  static const Minor_errorType BM_EM_ERR_FAILED_INIT_REGISTRY =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_REGISTRY;
  static const Minor_errorType BM_EM_ERR_FAILED_INIT =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT;
  static const Minor_errorType BM_EM_ERR_FAILED_INIT_BB =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_BB;
  static const Minor_errorType BM_EM_ERR_FAILED_INIT_BB_REG =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_BB_REG;
  static const Minor_errorType BM_EM_ERR_FAILED_OPEN_BLACKBOX =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_OPEN_BLACKBOX;
  static const Minor_errorType BM_EM_ERR_FAILED_INIT_EP =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_EP;
  static const Minor_errorType BM_EM_ERR_FAILED_POST_INIT_EP =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_POST_INIT_EP;
  static const Minor_errorType BM_EM_ERR_FAILED_INIT_CREATE_LOGGER =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_CREATE_LOGGER;
  static const Minor_errorType BM_EM_ERR_FAILED_INIT_IL =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_INIT_IL;
  static const Minor_errorType BM_EM_ERR_FAILED_CHECK_REG_VERSIONS =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_CHECK_REG_VERSIONS;
  static const Minor_errorType BM_EM_ERR_FAILED_NB_OPERATION =
    Dt_Record_App_Minor_errorType_BM_EM_ERR_FAILED_NB_OPERATION;
  static inline bool Minor_errorType_IsValid(int value) {
    return Dt_Record_App_Minor_errorType_IsValid(value);
  }
  static const Minor_errorType Minor_errorType_MIN =
    Dt_Record_App_Minor_errorType_Minor_errorType_MIN;
  static const Minor_errorType Minor_errorType_MAX =
    Dt_Record_App_Minor_errorType_Minor_errorType_MAX;
  static const int Minor_errorType_ARRAYSIZE =
    Dt_Record_App_Minor_errorType_Minor_errorType_ARRAYSIZE;

  typedef Dt_Record_App_Temperture_ddrType Temperture_ddrType;
  static const Temperture_ddrType TEMP_ERROR =
    Dt_Record_App_Temperture_ddrType_TEMP_ERROR;
  static const Temperture_ddrType RANGE_OK =
    Dt_Record_App_Temperture_ddrType_RANGE_OK;
  static const Temperture_ddrType BELOW_SPEC =
    Dt_Record_App_Temperture_ddrType_BELOW_SPEC;
  static const Temperture_ddrType ABOVE_SPEC =
    Dt_Record_App_Temperture_ddrType_ABOVE_SPEC;
  static const Temperture_ddrType ABOVE_85C =
    Dt_Record_App_Temperture_ddrType_ABOVE_85C;
  static const Temperture_ddrType TEMP_EVEN_COLDER =
    Dt_Record_App_Temperture_ddrType_TEMP_EVEN_COLDER;
  static const Temperture_ddrType TEMP_COOL =
    Dt_Record_App_Temperture_ddrType_TEMP_COOL;
  static const Temperture_ddrType TEMP_RANGE_WARM =
    Dt_Record_App_Temperture_ddrType_TEMP_RANGE_WARM;
  static const Temperture_ddrType TEMP_RANGE_EVEN_WARMER =
    Dt_Record_App_Temperture_ddrType_TEMP_RANGE_EVEN_WARMER;
  static inline bool Temperture_ddrType_IsValid(int value) {
    return Dt_Record_App_Temperture_ddrType_IsValid(value);
  }
  static const Temperture_ddrType Temperture_ddrType_MIN =
    Dt_Record_App_Temperture_ddrType_Temperture_ddrType_MIN;
  static const Temperture_ddrType Temperture_ddrType_MAX =
    Dt_Record_App_Temperture_ddrType_Temperture_ddrType_MAX;
  static const int Temperture_ddrType_ARRAYSIZE =
    Dt_Record_App_Temperture_ddrType_Temperture_ddrType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 54;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 54;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 55;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 55;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional int32 reserved_1 = 1;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 1;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional int32 application_message_version = 2;
  bool has_application_message_version() const;
  void clear_application_message_version();
  static const int kApplicationMessageVersionFieldNumber = 2;
  ::google::protobuf::int32 application_message_version() const;
  void set_application_message_version(::google::protobuf::int32 value);

  // optional int32 main_state = 3;
  bool has_main_state() const;
  void clear_main_state();
  static const int kMainStateFieldNumber = 3;
  ::google::protobuf::int32 main_state() const;
  void set_main_state(::google::protobuf::int32 value);

  // optional int32 sub_state = 4;
  bool has_sub_state() const;
  void clear_sub_state();
  static const int kSubStateFieldNumber = 4;
  ::google::protobuf::int32 sub_state() const;
  void set_sub_state(::google::protobuf::int32 value);

  // optional float eyeq_process_index = 5;
  bool has_eyeq_process_index() const;
  void clear_eyeq_process_index();
  static const int kEyeqProcessIndexFieldNumber = 5;
  float eyeq_process_index() const;
  void set_eyeq_process_index(float value);

  // optional float eyeq_timestamp = 6;
  bool has_eyeq_timestamp() const;
  void clear_eyeq_timestamp();
  static const int kEyeqTimestampFieldNumber = 6;
  float eyeq_timestamp() const;
  void set_eyeq_timestamp(float value);

  // optional float eyeq_current_timestamp = 7;
  bool has_eyeq_current_timestamp() const;
  void clear_eyeq_current_timestamp();
  static const int kEyeqCurrentTimestampFieldNumber = 7;
  float eyeq_current_timestamp() const;
  void set_eyeq_current_timestamp(float value);

  // optional int32 application_diagnostics_part_1 = 8;
  bool has_application_diagnostics_part_1() const;
  void clear_application_diagnostics_part_1();
  static const int kApplicationDiagnosticsPart1FieldNumber = 8;
  ::google::protobuf::int32 application_diagnostics_part_1() const;
  void set_application_diagnostics_part_1(::google::protobuf::int32 value);

  // optional int32 application_diagnostics_part_2 = 9;
  bool has_application_diagnostics_part_2() const;
  void clear_application_diagnostics_part_2();
  static const int kApplicationDiagnosticsPart2FieldNumber = 9;
  ::google::protobuf::int32 application_diagnostics_part_2() const;
  void set_application_diagnostics_part_2(::google::protobuf::int32 value);

  // optional .atd.meprocess.Dt_Record_App.Fatal_errorType fatal_error = 10;
  bool has_fatal_error() const;
  void clear_fatal_error();
  static const int kFatalErrorFieldNumber = 10;
  ::atd::meprocess::Dt_Record_App_Fatal_errorType fatal_error() const;
  void set_fatal_error(::atd::meprocess::Dt_Record_App_Fatal_errorType value);

  // optional int32 reserved_2 = 11;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 11;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional .atd.meprocess.Dt_Record_App.Minor_errorType minor_error = 12;
  bool has_minor_error() const;
  void clear_minor_error();
  static const int kMinorErrorFieldNumber = 12;
  ::atd::meprocess::Dt_Record_App_Minor_errorType minor_error() const;
  void set_minor_error(::atd::meprocess::Dt_Record_App_Minor_errorType value);

  // optional int32 eyeqtemperature1 = 13;
  bool has_eyeqtemperature1() const;
  void clear_eyeqtemperature1();
  static const int kEyeqtemperature1FieldNumber = 13;
  ::google::protobuf::int32 eyeqtemperature1() const;
  void set_eyeqtemperature1(::google::protobuf::int32 value);

  // optional int32 eyeqtemperature2 = 14;
  bool has_eyeqtemperature2() const;
  void clear_eyeqtemperature2();
  static const int kEyeqtemperature2FieldNumber = 14;
  ::google::protobuf::int32 eyeqtemperature2() const;
  void set_eyeqtemperature2(::google::protobuf::int32 value);

  // optional int32 reserved_4 = 16;
  bool has_reserved_4() const;
  void clear_reserved_4();
  static const int kReserved4FieldNumber = 16;
  ::google::protobuf::int32 reserved_4() const;
  void set_reserved_4(::google::protobuf::int32 value);

  // optional int32 cfg_status = 17;
  bool has_cfg_status() const;
  void clear_cfg_status();
  static const int kCfgStatusFieldNumber = 17;
  ::google::protobuf::int32 cfg_status() const;
  void set_cfg_status(::google::protobuf::int32 value);

  // optional int32 spihealthstatus = 18;
  bool has_spihealthstatus() const;
  void clear_spihealthstatus();
  static const int kSpihealthstatusFieldNumber = 18;
  ::google::protobuf::int32 spihealthstatus() const;
  void set_spihealthstatus(::google::protobuf::int32 value);

  // optional int32 spierrors = 19;
  bool has_spierrors() const;
  void clear_spierrors();
  static const int kSpierrorsFieldNumber = 19;
  ::google::protobuf::int32 spierrors() const;
  void set_spierrors(::google::protobuf::int32 value);

  // optional int32 reserved_5 = 20;
  bool has_reserved_5() const;
  void clear_reserved_5();
  static const int kReserved5FieldNumber = 20;
  ::google::protobuf::int32 reserved_5() const;
  void set_reserved_5(::google::protobuf::int32 value);

  // optional int32 valid_cameras_information = 21;
  bool has_valid_cameras_information() const;
  void clear_valid_cameras_information();
  static const int kValidCamerasInformationFieldNumber = 21;
  ::google::protobuf::int32 valid_cameras_information() const;
  void set_valid_cameras_information(::google::protobuf::int32 value);

  // optional int32 camera1_temperature = 22;
  bool has_camera1_temperature() const;
  void clear_camera1_temperature();
  static const int kCamera1TemperatureFieldNumber = 22;
  ::google::protobuf::int32 camera1_temperature() const;
  void set_camera1_temperature(::google::protobuf::int32 value);

  // optional int32 camera2_temperature = 23;
  bool has_camera2_temperature() const;
  void clear_camera2_temperature();
  static const int kCamera2TemperatureFieldNumber = 23;
  ::google::protobuf::int32 camera2_temperature() const;
  void set_camera2_temperature(::google::protobuf::int32 value);

  // optional int32 camera3_temperature = 24;
  bool has_camera3_temperature() const;
  void clear_camera3_temperature();
  static const int kCamera3TemperatureFieldNumber = 24;
  ::google::protobuf::int32 camera3_temperature() const;
  void set_camera3_temperature(::google::protobuf::int32 value);

  // optional int32 camera4_temperature = 25;
  bool has_camera4_temperature() const;
  void clear_camera4_temperature();
  static const int kCamera4TemperatureFieldNumber = 25;
  ::google::protobuf::int32 camera4_temperature() const;
  void set_camera4_temperature(::google::protobuf::int32 value);

  // optional int32 camera5_temperature = 26;
  bool has_camera5_temperature() const;
  void clear_camera5_temperature();
  static const int kCamera5TemperatureFieldNumber = 26;
  ::google::protobuf::int32 camera5_temperature() const;
  void set_camera5_temperature(::google::protobuf::int32 value);

  // optional int32 camera6_temperature = 27;
  bool has_camera6_temperature() const;
  void clear_camera6_temperature();
  static const int kCamera6TemperatureFieldNumber = 27;
  ::google::protobuf::int32 camera6_temperature() const;
  void set_camera6_temperature(::google::protobuf::int32 value);

  // optional int32 camera7_temperature = 28;
  bool has_camera7_temperature() const;
  void clear_camera7_temperature();
  static const int kCamera7TemperatureFieldNumber = 28;
  ::google::protobuf::int32 camera7_temperature() const;
  void set_camera7_temperature(::google::protobuf::int32 value);

  // optional int32 camera8_temperature = 29;
  bool has_camera8_temperature() const;
  void clear_camera8_temperature();
  static const int kCamera8TemperatureFieldNumber = 29;
  ::google::protobuf::int32 camera8_temperature() const;
  void set_camera8_temperature(::google::protobuf::int32 value);

  // optional int32 camera1_videoerrorrange = 30;
  bool has_camera1_videoerrorrange() const;
  void clear_camera1_videoerrorrange();
  static const int kCamera1VideoerrorrangeFieldNumber = 30;
  ::google::protobuf::int32 camera1_videoerrorrange() const;
  void set_camera1_videoerrorrange(::google::protobuf::int32 value);

  // optional int32 camera2_videoerrorrange = 31;
  bool has_camera2_videoerrorrange() const;
  void clear_camera2_videoerrorrange();
  static const int kCamera2VideoerrorrangeFieldNumber = 31;
  ::google::protobuf::int32 camera2_videoerrorrange() const;
  void set_camera2_videoerrorrange(::google::protobuf::int32 value);

  // optional int32 camera3_videoerrorrange = 32;
  bool has_camera3_videoerrorrange() const;
  void clear_camera3_videoerrorrange();
  static const int kCamera3VideoerrorrangeFieldNumber = 32;
  ::google::protobuf::int32 camera3_videoerrorrange() const;
  void set_camera3_videoerrorrange(::google::protobuf::int32 value);

  // optional int32 camera4_videoerrorrange = 33;
  bool has_camera4_videoerrorrange() const;
  void clear_camera4_videoerrorrange();
  static const int kCamera4VideoerrorrangeFieldNumber = 33;
  ::google::protobuf::int32 camera4_videoerrorrange() const;
  void set_camera4_videoerrorrange(::google::protobuf::int32 value);

  // optional int32 camera5_videoerrorrange = 34;
  bool has_camera5_videoerrorrange() const;
  void clear_camera5_videoerrorrange();
  static const int kCamera5VideoerrorrangeFieldNumber = 34;
  ::google::protobuf::int32 camera5_videoerrorrange() const;
  void set_camera5_videoerrorrange(::google::protobuf::int32 value);

  // optional int32 camera6_videoerrorrange = 35;
  bool has_camera6_videoerrorrange() const;
  void clear_camera6_videoerrorrange();
  static const int kCamera6VideoerrorrangeFieldNumber = 35;
  ::google::protobuf::int32 camera6_videoerrorrange() const;
  void set_camera6_videoerrorrange(::google::protobuf::int32 value);

  // optional int32 camera7_videoerrorrange = 36;
  bool has_camera7_videoerrorrange() const;
  void clear_camera7_videoerrorrange();
  static const int kCamera7VideoerrorrangeFieldNumber = 36;
  ::google::protobuf::int32 camera7_videoerrorrange() const;
  void set_camera7_videoerrorrange(::google::protobuf::int32 value);

  // optional int32 camera8_videoerrorrange = 37;
  bool has_camera8_videoerrorrange() const;
  void clear_camera8_videoerrorrange();
  static const int kCamera8VideoerrorrangeFieldNumber = 37;
  ::google::protobuf::int32 camera8_videoerrorrange() const;
  void set_camera8_videoerrorrange(::google::protobuf::int32 value);

  // optional float camera1_videoerrorflags_pt1 = 38;
  bool has_camera1_videoerrorflags_pt1() const;
  void clear_camera1_videoerrorflags_pt1();
  static const int kCamera1VideoerrorflagsPt1FieldNumber = 38;
  float camera1_videoerrorflags_pt1() const;
  void set_camera1_videoerrorflags_pt1(float value);

  // optional float camera2_videoerrorflags_pt1 = 39;
  bool has_camera2_videoerrorflags_pt1() const;
  void clear_camera2_videoerrorflags_pt1();
  static const int kCamera2VideoerrorflagsPt1FieldNumber = 39;
  float camera2_videoerrorflags_pt1() const;
  void set_camera2_videoerrorflags_pt1(float value);

  // optional float camera3_videoerrorflags_pt1 = 40;
  bool has_camera3_videoerrorflags_pt1() const;
  void clear_camera3_videoerrorflags_pt1();
  static const int kCamera3VideoerrorflagsPt1FieldNumber = 40;
  float camera3_videoerrorflags_pt1() const;
  void set_camera3_videoerrorflags_pt1(float value);

  // optional float camera4_videoerrorflags_pt1 = 41;
  bool has_camera4_videoerrorflags_pt1() const;
  void clear_camera4_videoerrorflags_pt1();
  static const int kCamera4VideoerrorflagsPt1FieldNumber = 41;
  float camera4_videoerrorflags_pt1() const;
  void set_camera4_videoerrorflags_pt1(float value);

  // optional float camera5_videoerrorflags_pt1 = 42;
  bool has_camera5_videoerrorflags_pt1() const;
  void clear_camera5_videoerrorflags_pt1();
  static const int kCamera5VideoerrorflagsPt1FieldNumber = 42;
  float camera5_videoerrorflags_pt1() const;
  void set_camera5_videoerrorflags_pt1(float value);

  // optional float camera6_videoerrorflags_pt1 = 43;
  bool has_camera6_videoerrorflags_pt1() const;
  void clear_camera6_videoerrorflags_pt1();
  static const int kCamera6VideoerrorflagsPt1FieldNumber = 43;
  float camera6_videoerrorflags_pt1() const;
  void set_camera6_videoerrorflags_pt1(float value);

  // optional float camera7_videoerrorflags_pt1 = 44;
  bool has_camera7_videoerrorflags_pt1() const;
  void clear_camera7_videoerrorflags_pt1();
  static const int kCamera7VideoerrorflagsPt1FieldNumber = 44;
  float camera7_videoerrorflags_pt1() const;
  void set_camera7_videoerrorflags_pt1(float value);

  // optional float camera8_videoerrorflags_pt1 = 45;
  bool has_camera8_videoerrorflags_pt1() const;
  void clear_camera8_videoerrorflags_pt1();
  static const int kCamera8VideoerrorflagsPt1FieldNumber = 45;
  float camera8_videoerrorflags_pt1() const;
  void set_camera8_videoerrorflags_pt1(float value);

  // optional float camera1_videoerrorflags_pt2 = 46;
  bool has_camera1_videoerrorflags_pt2() const;
  void clear_camera1_videoerrorflags_pt2();
  static const int kCamera1VideoerrorflagsPt2FieldNumber = 46;
  float camera1_videoerrorflags_pt2() const;
  void set_camera1_videoerrorflags_pt2(float value);

  // optional float camera2_videoerrorflags_pt2 = 47;
  bool has_camera2_videoerrorflags_pt2() const;
  void clear_camera2_videoerrorflags_pt2();
  static const int kCamera2VideoerrorflagsPt2FieldNumber = 47;
  float camera2_videoerrorflags_pt2() const;
  void set_camera2_videoerrorflags_pt2(float value);

  // optional float camera3_videoerrorflags_pt2 = 48;
  bool has_camera3_videoerrorflags_pt2() const;
  void clear_camera3_videoerrorflags_pt2();
  static const int kCamera3VideoerrorflagsPt2FieldNumber = 48;
  float camera3_videoerrorflags_pt2() const;
  void set_camera3_videoerrorflags_pt2(float value);

  // optional float camera4_videoerrorflags_pt2 = 49;
  bool has_camera4_videoerrorflags_pt2() const;
  void clear_camera4_videoerrorflags_pt2();
  static const int kCamera4VideoerrorflagsPt2FieldNumber = 49;
  float camera4_videoerrorflags_pt2() const;
  void set_camera4_videoerrorflags_pt2(float value);

  // optional float camera5_videoerrorflags_pt2 = 50;
  bool has_camera5_videoerrorflags_pt2() const;
  void clear_camera5_videoerrorflags_pt2();
  static const int kCamera5VideoerrorflagsPt2FieldNumber = 50;
  float camera5_videoerrorflags_pt2() const;
  void set_camera5_videoerrorflags_pt2(float value);

  // optional float camera6_videoerrorflags_pt2 = 51;
  bool has_camera6_videoerrorflags_pt2() const;
  void clear_camera6_videoerrorflags_pt2();
  static const int kCamera6VideoerrorflagsPt2FieldNumber = 51;
  float camera6_videoerrorflags_pt2() const;
  void set_camera6_videoerrorflags_pt2(float value);

  // optional float camera7_videoerrorflags_pt2 = 52;
  bool has_camera7_videoerrorflags_pt2() const;
  void clear_camera7_videoerrorflags_pt2();
  static const int kCamera7VideoerrorflagsPt2FieldNumber = 52;
  float camera7_videoerrorflags_pt2() const;
  void set_camera7_videoerrorflags_pt2(float value);

  // optional float camera8_videoerrorflags_pt2 = 53;
  bool has_camera8_videoerrorflags_pt2() const;
  void clear_camera8_videoerrorflags_pt2();
  static const int kCamera8VideoerrorflagsPt2FieldNumber = 53;
  float camera8_videoerrorflags_pt2() const;
  void set_camera8_videoerrorflags_pt2(float value);

  // optional .atd.meprocess.Dt_Record_App.Temperture_ddrType temperture_ddr = 15;
  bool has_temperture_ddr() const;
  void clear_temperture_ddr();
  static const int kTempertureDdrFieldNumber = 15;
  ::atd::meprocess::Dt_Record_App_Temperture_ddrType temperture_ddr() const;
  void set_temperture_ddr(::atd::meprocess::Dt_Record_App_Temperture_ddrType value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_App)
 private:
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_application_message_version();
  void clear_has_application_message_version();
  void set_has_main_state();
  void clear_has_main_state();
  void set_has_sub_state();
  void clear_has_sub_state();
  void set_has_eyeq_process_index();
  void clear_has_eyeq_process_index();
  void set_has_eyeq_timestamp();
  void clear_has_eyeq_timestamp();
  void set_has_eyeq_current_timestamp();
  void clear_has_eyeq_current_timestamp();
  void set_has_application_diagnostics_part_1();
  void clear_has_application_diagnostics_part_1();
  void set_has_application_diagnostics_part_2();
  void clear_has_application_diagnostics_part_2();
  void set_has_fatal_error();
  void clear_has_fatal_error();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_minor_error();
  void clear_has_minor_error();
  void set_has_eyeqtemperature1();
  void clear_has_eyeqtemperature1();
  void set_has_eyeqtemperature2();
  void clear_has_eyeqtemperature2();
  void set_has_temperture_ddr();
  void clear_has_temperture_ddr();
  void set_has_reserved_4();
  void clear_has_reserved_4();
  void set_has_cfg_status();
  void clear_has_cfg_status();
  void set_has_spihealthstatus();
  void clear_has_spihealthstatus();
  void set_has_spierrors();
  void clear_has_spierrors();
  void set_has_reserved_5();
  void clear_has_reserved_5();
  void set_has_valid_cameras_information();
  void clear_has_valid_cameras_information();
  void set_has_camera1_temperature();
  void clear_has_camera1_temperature();
  void set_has_camera2_temperature();
  void clear_has_camera2_temperature();
  void set_has_camera3_temperature();
  void clear_has_camera3_temperature();
  void set_has_camera4_temperature();
  void clear_has_camera4_temperature();
  void set_has_camera5_temperature();
  void clear_has_camera5_temperature();
  void set_has_camera6_temperature();
  void clear_has_camera6_temperature();
  void set_has_camera7_temperature();
  void clear_has_camera7_temperature();
  void set_has_camera8_temperature();
  void clear_has_camera8_temperature();
  void set_has_camera1_videoerrorrange();
  void clear_has_camera1_videoerrorrange();
  void set_has_camera2_videoerrorrange();
  void clear_has_camera2_videoerrorrange();
  void set_has_camera3_videoerrorrange();
  void clear_has_camera3_videoerrorrange();
  void set_has_camera4_videoerrorrange();
  void clear_has_camera4_videoerrorrange();
  void set_has_camera5_videoerrorrange();
  void clear_has_camera5_videoerrorrange();
  void set_has_camera6_videoerrorrange();
  void clear_has_camera6_videoerrorrange();
  void set_has_camera7_videoerrorrange();
  void clear_has_camera7_videoerrorrange();
  void set_has_camera8_videoerrorrange();
  void clear_has_camera8_videoerrorrange();
  void set_has_camera1_videoerrorflags_pt1();
  void clear_has_camera1_videoerrorflags_pt1();
  void set_has_camera2_videoerrorflags_pt1();
  void clear_has_camera2_videoerrorflags_pt1();
  void set_has_camera3_videoerrorflags_pt1();
  void clear_has_camera3_videoerrorflags_pt1();
  void set_has_camera4_videoerrorflags_pt1();
  void clear_has_camera4_videoerrorflags_pt1();
  void set_has_camera5_videoerrorflags_pt1();
  void clear_has_camera5_videoerrorflags_pt1();
  void set_has_camera6_videoerrorflags_pt1();
  void clear_has_camera6_videoerrorflags_pt1();
  void set_has_camera7_videoerrorflags_pt1();
  void clear_has_camera7_videoerrorflags_pt1();
  void set_has_camera8_videoerrorflags_pt1();
  void clear_has_camera8_videoerrorflags_pt1();
  void set_has_camera1_videoerrorflags_pt2();
  void clear_has_camera1_videoerrorflags_pt2();
  void set_has_camera2_videoerrorflags_pt2();
  void clear_has_camera2_videoerrorflags_pt2();
  void set_has_camera3_videoerrorflags_pt2();
  void clear_has_camera3_videoerrorflags_pt2();
  void set_has_camera4_videoerrorflags_pt2();
  void clear_has_camera4_videoerrorflags_pt2();
  void set_has_camera5_videoerrorflags_pt2();
  void clear_has_camera5_videoerrorflags_pt2();
  void set_has_camera6_videoerrorflags_pt2();
  void clear_has_camera6_videoerrorflags_pt2();
  void set_has_camera7_videoerrorflags_pt2();
  void clear_has_camera7_videoerrorflags_pt2();
  void set_has_camera8_videoerrorflags_pt2();
  void clear_has_camera8_videoerrorflags_pt2();
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::google::protobuf::int32 reserved_1_;
  ::google::protobuf::int32 application_message_version_;
  ::google::protobuf::int32 main_state_;
  ::google::protobuf::int32 sub_state_;
  float eyeq_process_index_;
  float eyeq_timestamp_;
  float eyeq_current_timestamp_;
  ::google::protobuf::int32 application_diagnostics_part_1_;
  ::google::protobuf::int32 application_diagnostics_part_2_;
  int fatal_error_;
  ::google::protobuf::int32 reserved_2_;
  int minor_error_;
  ::google::protobuf::int32 eyeqtemperature1_;
  ::google::protobuf::int32 eyeqtemperature2_;
  ::google::protobuf::int32 reserved_4_;
  ::google::protobuf::int32 cfg_status_;
  ::google::protobuf::int32 spihealthstatus_;
  ::google::protobuf::int32 spierrors_;
  ::google::protobuf::int32 reserved_5_;
  ::google::protobuf::int32 valid_cameras_information_;
  ::google::protobuf::int32 camera1_temperature_;
  ::google::protobuf::int32 camera2_temperature_;
  ::google::protobuf::int32 camera3_temperature_;
  ::google::protobuf::int32 camera4_temperature_;
  ::google::protobuf::int32 camera5_temperature_;
  ::google::protobuf::int32 camera6_temperature_;
  ::google::protobuf::int32 camera7_temperature_;
  ::google::protobuf::int32 camera8_temperature_;
  ::google::protobuf::int32 camera1_videoerrorrange_;
  ::google::protobuf::int32 camera2_videoerrorrange_;
  ::google::protobuf::int32 camera3_videoerrorrange_;
  ::google::protobuf::int32 camera4_videoerrorrange_;
  ::google::protobuf::int32 camera5_videoerrorrange_;
  ::google::protobuf::int32 camera6_videoerrorrange_;
  ::google::protobuf::int32 camera7_videoerrorrange_;
  ::google::protobuf::int32 camera8_videoerrorrange_;
  float camera1_videoerrorflags_pt1_;
  float camera2_videoerrorflags_pt1_;
  float camera3_videoerrorflags_pt1_;
  float camera4_videoerrorflags_pt1_;
  float camera5_videoerrorflags_pt1_;
  float camera6_videoerrorflags_pt1_;
  float camera7_videoerrorflags_pt1_;
  float camera8_videoerrorflags_pt1_;
  float camera1_videoerrorflags_pt2_;
  float camera2_videoerrorflags_pt2_;
  float camera3_videoerrorflags_pt2_;
  float camera4_videoerrorflags_pt2_;
  float camera5_videoerrorflags_pt2_;
  float camera6_videoerrorflags_pt2_;
  float camera7_videoerrorflags_pt2_;
  float camera8_videoerrorflags_pt2_;
  int temperture_ddr_;
  mutable int _cached_size_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_Common : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_Common) */ {
 public:
  Dt_Record_Common();
  virtual ~Dt_Record_Common();

  Dt_Record_Common(const Dt_Record_Common& from);

  inline Dt_Record_Common& operator=(const Dt_Record_Common& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_Common& default_instance();

  static inline const Dt_Record_Common* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_Common*>(
               &_Dt_Record_Common_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Dt_Record_Common* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_Common* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_Common* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_Common& from);
  void MergeFrom(const Dt_Record_Common& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_Common* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Dt_Record_Common_Com_daytime_indicatorType Com_daytime_indicatorType;
  static const Com_daytime_indicatorType DAY =
    Dt_Record_Common_Com_daytime_indicatorType_DAY;
  static const Com_daytime_indicatorType NIGHT =
    Dt_Record_Common_Com_daytime_indicatorType_NIGHT;
  static const Com_daytime_indicatorType DUSK =
    Dt_Record_Common_Com_daytime_indicatorType_DUSK;
  static inline bool Com_daytime_indicatorType_IsValid(int value) {
    return Dt_Record_Common_Com_daytime_indicatorType_IsValid(value);
  }
  static const Com_daytime_indicatorType Com_daytime_indicatorType_MIN =
    Dt_Record_Common_Com_daytime_indicatorType_Com_daytime_indicatorType_MIN;
  static const Com_daytime_indicatorType Com_daytime_indicatorType_MAX =
    Dt_Record_Common_Com_daytime_indicatorType_Com_daytime_indicatorType_MAX;
  static const int Com_daytime_indicatorType_ARRAYSIZE =
    Dt_Record_Common_Com_daytime_indicatorType_Com_daytime_indicatorType_ARRAYSIZE;

  typedef Dt_Record_Common_Com_hil_mode_statusType Com_hil_mode_statusType;
  static const Com_hil_mode_statusType NOT_ACTIVE =
    Dt_Record_Common_Com_hil_mode_statusType_NOT_ACTIVE;
  static const Com_hil_mode_statusType ACTIVE =
    Dt_Record_Common_Com_hil_mode_statusType_ACTIVE;
  static inline bool Com_hil_mode_statusType_IsValid(int value) {
    return Dt_Record_Common_Com_hil_mode_statusType_IsValid(value);
  }
  static const Com_hil_mode_statusType Com_hil_mode_statusType_MIN =
    Dt_Record_Common_Com_hil_mode_statusType_Com_hil_mode_statusType_MIN;
  static const Com_hil_mode_statusType Com_hil_mode_statusType_MAX =
    Dt_Record_Common_Com_hil_mode_statusType_Com_hil_mode_statusType_MAX;
  static const int Com_hil_mode_statusType_ARRAYSIZE =
    Dt_Record_Common_Com_hil_mode_statusType_Com_hil_mode_statusType_ARRAYSIZE;

  typedef Dt_Record_Common_Com_exposure_typeType Com_exposure_typeType;
  static const Com_exposure_typeType TEXTURE =
    Dt_Record_Common_Com_exposure_typeType_TEXTURE;
  static const Com_exposure_typeType COLOR =
    Dt_Record_Common_Com_exposure_typeType_COLOR;
  static inline bool Com_exposure_typeType_IsValid(int value) {
    return Dt_Record_Common_Com_exposure_typeType_IsValid(value);
  }
  static const Com_exposure_typeType Com_exposure_typeType_MIN =
    Dt_Record_Common_Com_exposure_typeType_Com_exposure_typeType_MIN;
  static const Com_exposure_typeType Com_exposure_typeType_MAX =
    Dt_Record_Common_Com_exposure_typeType_Com_exposure_typeType_MAX;
  static const int Com_exposure_typeType_ARRAYSIZE =
    Dt_Record_Common_Com_exposure_typeType_Com_exposure_typeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 16;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 16;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 17;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 17;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional int32 com_zero_byte = 1;
  bool has_com_zero_byte() const;
  void clear_com_zero_byte();
  static const int kComZeroByteFieldNumber = 1;
  ::google::protobuf::int32 com_zero_byte() const;
  void set_com_zero_byte(::google::protobuf::int32 value);

  // optional int32 com_protocol_version = 2;
  bool has_com_protocol_version() const;
  void clear_com_protocol_version();
  static const int kComProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 com_protocol_version() const;
  void set_com_protocol_version(::google::protobuf::int32 value);

  // optional int32 com_sync_frame_id = 3;
  bool has_com_sync_frame_id() const;
  void clear_com_sync_frame_id();
  static const int kComSyncFrameIdFieldNumber = 3;
  ::google::protobuf::int32 com_sync_frame_id() const;
  void set_com_sync_frame_id(::google::protobuf::int32 value);

  // optional int32 reserved_1 = 4;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 4;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional double com_frame_mcu_ts_start = 5;
  bool has_com_frame_mcu_ts_start() const;
  void clear_com_frame_mcu_ts_start();
  static const int kComFrameMcuTsStartFieldNumber = 5;
  double com_frame_mcu_ts_start() const;
  void set_com_frame_mcu_ts_start(double value);

  // optional double com_last_mcu_sync_ts = 6;
  bool has_com_last_mcu_sync_ts() const;
  void clear_com_last_mcu_sync_ts();
  static const int kComLastMcuSyncTsFieldNumber = 6;
  double com_last_mcu_sync_ts() const;
  void set_com_last_mcu_sync_ts(double value);

  // optional float com_last_clock_sync_error = 7;
  bool has_com_last_clock_sync_error() const;
  void clear_com_last_clock_sync_error();
  static const int kComLastClockSyncErrorFieldNumber = 7;
  float com_last_clock_sync_error() const;
  void set_com_last_clock_sync_error(float value);

  // optional int32 reserved_2 = 8;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 8;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional float com_eyeq_frame_id = 9;
  bool has_com_eyeq_frame_id() const;
  void clear_com_eyeq_frame_id();
  static const int kComEyeqFrameIdFieldNumber = 9;
  float com_eyeq_frame_id() const;
  void set_com_eyeq_frame_id(float value);

  // optional float com_cam_frame_id = 10;
  bool has_com_cam_frame_id() const;
  void clear_com_cam_frame_id();
  static const int kComCamFrameIdFieldNumber = 10;
  float com_cam_frame_id() const;
  void set_com_cam_frame_id(float value);

  // optional .atd.meprocess.Dt_Record_Common.Com_daytime_indicatorType com_daytime_indicator = 11;
  bool has_com_daytime_indicator() const;
  void clear_com_daytime_indicator();
  static const int kComDaytimeIndicatorFieldNumber = 11;
  ::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType com_daytime_indicator() const;
  void set_com_daytime_indicator(::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType value);

  // optional float com_daytime_ind_quality = 12;
  bool has_com_daytime_ind_quality() const;
  void clear_com_daytime_ind_quality();
  static const int kComDaytimeIndQualityFieldNumber = 12;
  float com_daytime_ind_quality() const;
  void set_com_daytime_ind_quality(float value);

  // optional .atd.meprocess.Dt_Record_Common.Com_hil_mode_statusType com_hil_mode_status = 13;
  bool has_com_hil_mode_status() const;
  void clear_com_hil_mode_status();
  static const int kComHilModeStatusFieldNumber = 13;
  ::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType com_hil_mode_status() const;
  void set_com_hil_mode_status(::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType value);

  // optional .atd.meprocess.Dt_Record_Common.Com_exposure_typeType com_exposure_type = 14;
  bool has_com_exposure_type() const;
  void clear_com_exposure_type();
  static const int kComExposureTypeFieldNumber = 14;
  ::atd::meprocess::Dt_Record_Common_Com_exposure_typeType com_exposure_type() const;
  void set_com_exposure_type(::atd::meprocess::Dt_Record_Common_Com_exposure_typeType value);

  // optional float reserved_3 = 15;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 15;
  float reserved_3() const;
  void set_reserved_3(float value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_Common)
 private:
  void set_has_com_zero_byte();
  void clear_has_com_zero_byte();
  void set_has_com_protocol_version();
  void clear_has_com_protocol_version();
  void set_has_com_sync_frame_id();
  void clear_has_com_sync_frame_id();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_com_frame_mcu_ts_start();
  void clear_has_com_frame_mcu_ts_start();
  void set_has_com_last_mcu_sync_ts();
  void clear_has_com_last_mcu_sync_ts();
  void set_has_com_last_clock_sync_error();
  void clear_has_com_last_clock_sync_error();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_com_eyeq_frame_id();
  void clear_has_com_eyeq_frame_id();
  void set_has_com_cam_frame_id();
  void clear_has_com_cam_frame_id();
  void set_has_com_daytime_indicator();
  void clear_has_com_daytime_indicator();
  void set_has_com_daytime_ind_quality();
  void clear_has_com_daytime_ind_quality();
  void set_has_com_hil_mode_status();
  void clear_has_com_hil_mode_status();
  void set_has_com_exposure_type();
  void clear_has_com_exposure_type();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::google::protobuf::int32 com_zero_byte_;
  ::google::protobuf::int32 com_protocol_version_;
  ::google::protobuf::int32 com_sync_frame_id_;
  ::google::protobuf::int32 reserved_1_;
  double com_frame_mcu_ts_start_;
  double com_last_mcu_sync_ts_;
  float com_last_clock_sync_error_;
  ::google::protobuf::int32 reserved_2_;
  float com_eyeq_frame_id_;
  float com_cam_frame_id_;
  int com_daytime_indicator_;
  float com_daytime_ind_quality_;
  int com_hil_mode_status_;
  int com_exposure_type_;
  float reserved_3_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CACommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.CACommon) */ {
 public:
  CACommon();
  virtual ~CACommon();

  CACommon(const CACommon& from);

  inline CACommon& operator=(const CACommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CACommon& default_instance();

  static inline const CACommon* internal_default_instance() {
    return reinterpret_cast<const CACommon*>(
               &_CACommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(CACommon* other);

  // implements Message ----------------------------------------------

  inline CACommon* New() const PROTOBUF_FINAL { return New(NULL); }

  CACommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CACommon& from);
  void MergeFrom(const CACommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CACommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CACommon_Ca_region_codeType Ca_region_codeType;
  static const Ca_region_codeType WORLD =
    CACommon_Ca_region_codeType_WORLD;
  static const Ca_region_codeType EUROPE_x000D_ =
    CACommon_Ca_region_codeType_EUROPE_x000D_;
  static const Ca_region_codeType UK =
    CACommon_Ca_region_codeType_UK;
  static const Ca_region_codeType GULF =
    CACommon_Ca_region_codeType_GULF;
  static const Ca_region_codeType USA_x000D_ =
    CACommon_Ca_region_codeType_USA_x000D_;
  static const Ca_region_codeType CANADA_x000D_ =
    CACommon_Ca_region_codeType_CANADA_x000D_;
  static const Ca_region_codeType JAPAN_x000D_ =
    CACommon_Ca_region_codeType_JAPAN_x000D_;
  static const Ca_region_codeType CHINA_x000D_ =
    CACommon_Ca_region_codeType_CHINA_x000D_;
  static const Ca_region_codeType SOUTH_AFRICA_x000D_ =
    CACommon_Ca_region_codeType_SOUTH_AFRICA_x000D_;
  static const Ca_region_codeType KOREA_x000D_ =
    CACommon_Ca_region_codeType_KOREA_x000D_;
  static const Ca_region_codeType AUSTRALIA_x000D_ =
    CACommon_Ca_region_codeType_AUSTRALIA_x000D_;
  static inline bool Ca_region_codeType_IsValid(int value) {
    return CACommon_Ca_region_codeType_IsValid(value);
  }
  static const Ca_region_codeType Ca_region_codeType_MIN =
    CACommon_Ca_region_codeType_Ca_region_codeType_MIN;
  static const Ca_region_codeType Ca_region_codeType_MAX =
    CACommon_Ca_region_codeType_Ca_region_codeType_MAX;
  static const int Ca_region_codeType_ARRAYSIZE =
    CACommon_Ca_region_codeType_Ca_region_codeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 zero_byte = 1;
  bool has_zero_byte() const;
  void clear_zero_byte();
  static const int kZeroByteFieldNumber = 1;
  ::google::protobuf::int32 zero_byte() const;
  void set_zero_byte(::google::protobuf::int32 value);

  // optional int32 ca_protocol_version = 2;
  bool has_ca_protocol_version() const;
  void clear_ca_protocol_version();
  static const int kCaProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 ca_protocol_version() const;
  void set_ca_protocol_version(::google::protobuf::int32 value);

  // optional int32 ca_sync_id = 3;
  bool has_ca_sync_id() const;
  void clear_ca_sync_id();
  static const int kCaSyncIdFieldNumber = 3;
  ::google::protobuf::int32 ca_sync_id() const;
  void set_ca_sync_id(::google::protobuf::int32 value);

  // optional .atd.meprocess.CACommon.Ca_region_codeType ca_region_code = 4;
  bool has_ca_region_code() const;
  void clear_ca_region_code();
  static const int kCaRegionCodeFieldNumber = 4;
  ::atd::meprocess::CACommon_Ca_region_codeType ca_region_code() const;
  void set_ca_region_code(::atd::meprocess::CACommon_Ca_region_codeType value);

  // optional int32 ca_objects_count = 5;
  bool has_ca_objects_count() const;
  void clear_ca_objects_count();
  static const int kCaObjectsCountFieldNumber = 5;
  ::google::protobuf::int32 ca_objects_count() const;
  void set_ca_objects_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.CACommon)
 private:
  void set_has_zero_byte();
  void clear_has_zero_byte();
  void set_has_ca_protocol_version();
  void clear_has_ca_protocol_version();
  void set_has_ca_sync_id();
  void clear_has_ca_sync_id();
  void set_has_ca_region_code();
  void clear_has_ca_region_code();
  void set_has_ca_objects_count();
  void clear_has_ca_objects_count();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 zero_byte_;
  ::google::protobuf::int32 ca_protocol_version_;
  ::google::protobuf::int32 ca_sync_id_;
  int ca_region_code_;
  ::google::protobuf::int32 ca_objects_count_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_ConstructionArea : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_ConstructionArea) */ {
 public:
  Dt_Record_ConstructionArea();
  virtual ~Dt_Record_ConstructionArea();

  Dt_Record_ConstructionArea(const Dt_Record_ConstructionArea& from);

  inline Dt_Record_ConstructionArea& operator=(const Dt_Record_ConstructionArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_ConstructionArea& default_instance();

  static inline const Dt_Record_ConstructionArea* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_ConstructionArea*>(
               &_Dt_Record_ConstructionArea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Dt_Record_ConstructionArea* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_ConstructionArea* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_ConstructionArea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_ConstructionArea& from);
  void MergeFrom(const Dt_Record_ConstructionArea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_ConstructionArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.ConArea dt_array_14_ca = 4;
  int dt_array_14_ca_size() const;
  void clear_dt_array_14_ca();
  static const int kDtArray14CaFieldNumber = 4;
  const ::atd::meprocess::ConArea& dt_array_14_ca(int index) const;
  ::atd::meprocess::ConArea* mutable_dt_array_14_ca(int index);
  ::atd::meprocess::ConArea* add_dt_array_14_ca();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::ConArea >*
      mutable_dt_array_14_ca();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::ConArea >&
      dt_array_14_ca() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.CACommon stcacommon = 3;
  bool has_stcacommon() const;
  void clear_stcacommon();
  static const int kStcacommonFieldNumber = 3;
  const ::atd::meprocess::CACommon& stcacommon() const;
  ::atd::meprocess::CACommon* mutable_stcacommon();
  ::atd::meprocess::CACommon* release_stcacommon();
  void set_allocated_stcacommon(::atd::meprocess::CACommon* stcacommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_ConstructionArea)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stcacommon();
  void clear_has_stcacommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::ConArea > dt_array_14_ca_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::CACommon* stcacommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConArea : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.ConArea) */ {
 public:
  ConArea();
  virtual ~ConArea();

  ConArea(const ConArea& from);

  inline ConArea& operator=(const ConArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ConArea& default_instance();

  static inline const ConArea* internal_default_instance() {
    return reinterpret_cast<const ConArea*>(
               &_ConArea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ConArea* other);

  // implements Message ----------------------------------------------

  inline ConArea* New() const PROTOBUF_FINAL { return New(NULL); }

  ConArea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ConArea& from);
  void MergeFrom(const ConArea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ConArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ConArea_Ca_ca_object_typeType Ca_ca_object_typeType;
  static const Ca_ca_object_typeType INVALID =
    ConArea_Ca_ca_object_typeType_INVALID;
  static const Ca_ca_object_typeType ROAD_CLOSED =
    ConArea_Ca_ca_object_typeType_ROAD_CLOSED;
  static const Ca_ca_object_typeType CONE =
    ConArea_Ca_ca_object_typeType_CONE;
  static const Ca_ca_object_typeType BAREL =
    ConArea_Ca_ca_object_typeType_BAREL;
  static const Ca_ca_object_typeType OBSTRUCTION_LEFT =
    ConArea_Ca_ca_object_typeType_OBSTRUCTION_LEFT;
  static const Ca_ca_object_typeType OBSTRUCTION_RIGHT =
    ConArea_Ca_ca_object_typeType_OBSTRUCTION_RIGHT;
  static inline bool Ca_ca_object_typeType_IsValid(int value) {
    return ConArea_Ca_ca_object_typeType_IsValid(value);
  }
  static const Ca_ca_object_typeType Ca_ca_object_typeType_MIN =
    ConArea_Ca_ca_object_typeType_Ca_ca_object_typeType_MIN;
  static const Ca_ca_object_typeType Ca_ca_object_typeType_MAX =
    ConArea_Ca_ca_object_typeType_Ca_ca_object_typeType_MAX;
  static const int Ca_ca_object_typeType_ARRAYSIZE =
    ConArea_Ca_ca_object_typeType_Ca_ca_object_typeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 ca_id = 1;
  bool has_ca_id() const;
  void clear_ca_id();
  static const int kCaIdFieldNumber = 1;
  ::google::protobuf::int32 ca_id() const;
  void set_ca_id(::google::protobuf::int32 value);

  // optional int32 ca_frame_age = 2;
  bool has_ca_frame_age() const;
  void clear_ca_frame_age();
  static const int kCaFrameAgeFieldNumber = 2;
  ::google::protobuf::int32 ca_frame_age() const;
  void set_ca_frame_age(::google::protobuf::int32 value);

  // optional .atd.meprocess.ConArea.Ca_ca_object_typeType ca_ca_object_type = 3;
  bool has_ca_ca_object_type() const;
  void clear_ca_ca_object_type();
  static const int kCaCaObjectTypeFieldNumber = 3;
  ::atd::meprocess::ConArea_Ca_ca_object_typeType ca_ca_object_type() const;
  void set_ca_ca_object_type(::atd::meprocess::ConArea_Ca_ca_object_typeType value);

  // optional int32 reserved_1 = 4;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 4;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional float ca_long_distance = 5;
  bool has_ca_long_distance() const;
  void clear_ca_long_distance();
  static const int kCaLongDistanceFieldNumber = 5;
  float ca_long_distance() const;
  void set_ca_long_distance(float value);

  // optional float ca_long_distancstd = 6;
  bool has_ca_long_distancstd() const;
  void clear_ca_long_distancstd();
  static const int kCaLongDistancstdFieldNumber = 6;
  float ca_long_distancstd() const;
  void set_ca_long_distancstd(float value);

  // optional float ca_lat_distance = 7;
  bool has_ca_lat_distance() const;
  void clear_ca_lat_distance();
  static const int kCaLatDistanceFieldNumber = 7;
  float ca_lat_distance() const;
  void set_ca_lat_distance(float value);

  // optional float ca_lat_distancstd = 8;
  bool has_ca_lat_distancstd() const;
  void clear_ca_lat_distancstd();
  static const int kCaLatDistancstdFieldNumber = 8;
  float ca_lat_distancstd() const;
  void set_ca_lat_distancstd(float value);

  // optional int32 reserved_2 = 9;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 9;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional float ca_height = 10;
  bool has_ca_height() const;
  void clear_ca_height();
  static const int kCaHeightFieldNumber = 10;
  float ca_height() const;
  void set_ca_height(float value);

  // optional float ca_height_std = 11;
  bool has_ca_height_std() const;
  void clear_ca_height_std();
  static const int kCaHeightStdFieldNumber = 11;
  float ca_height_std() const;
  void set_ca_height_std(float value);

  // optional int32 reserved_3 = 12;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 12;
  ::google::protobuf::int32 reserved_3() const;
  void set_reserved_3(::google::protobuf::int32 value);

  // optional float ca_object_height = 13;
  bool has_ca_object_height() const;
  void clear_ca_object_height();
  static const int kCaObjectHeightFieldNumber = 13;
  float ca_object_height() const;
  void set_ca_object_height(float value);

  // optional float ca_object_height_std = 14;
  bool has_ca_object_height_std() const;
  void clear_ca_object_height_std();
  static const int kCaObjectHeightStdFieldNumber = 14;
  float ca_object_height_std() const;
  void set_ca_object_height_std(float value);

  // optional int32 reserved_4 = 15;
  bool has_reserved_4() const;
  void clear_reserved_4();
  static const int kReserved4FieldNumber = 15;
  ::google::protobuf::int32 reserved_4() const;
  void set_reserved_4(::google::protobuf::int32 value);

  // optional float ca_object_width = 16;
  bool has_ca_object_width() const;
  void clear_ca_object_width();
  static const int kCaObjectWidthFieldNumber = 16;
  float ca_object_width() const;
  void set_ca_object_width(float value);

  // optional float ca_object_width_std = 17;
  bool has_ca_object_width_std() const;
  void clear_ca_object_width_std();
  static const int kCaObjectWidthStdFieldNumber = 17;
  float ca_object_width_std() const;
  void set_ca_object_width_std(float value);

  // optional int32 ca_buffer = 18;
  bool has_ca_buffer() const;
  void clear_ca_buffer();
  static const int kCaBufferFieldNumber = 18;
  ::google::protobuf::int32 ca_buffer() const;
  void set_ca_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.ConArea)
 private:
  void set_has_ca_id();
  void clear_has_ca_id();
  void set_has_ca_frame_age();
  void clear_has_ca_frame_age();
  void set_has_ca_ca_object_type();
  void clear_has_ca_ca_object_type();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_ca_long_distance();
  void clear_has_ca_long_distance();
  void set_has_ca_long_distancstd();
  void clear_has_ca_long_distancstd();
  void set_has_ca_lat_distance();
  void clear_has_ca_lat_distance();
  void set_has_ca_lat_distancstd();
  void clear_has_ca_lat_distancstd();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_ca_height();
  void clear_has_ca_height();
  void set_has_ca_height_std();
  void clear_has_ca_height_std();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_ca_object_height();
  void clear_has_ca_object_height();
  void set_has_ca_object_height_std();
  void clear_has_ca_object_height_std();
  void set_has_reserved_4();
  void clear_has_reserved_4();
  void set_has_ca_object_width();
  void clear_has_ca_object_width();
  void set_has_ca_object_width_std();
  void clear_has_ca_object_width_std();
  void set_has_ca_buffer();
  void clear_has_ca_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ca_id_;
  ::google::protobuf::int32 ca_frame_age_;
  int ca_ca_object_type_;
  ::google::protobuf::int32 reserved_1_;
  float ca_long_distance_;
  float ca_long_distancstd_;
  float ca_lat_distance_;
  float ca_lat_distancstd_;
  ::google::protobuf::int32 reserved_2_;
  float ca_height_;
  float ca_height_std_;
  ::google::protobuf::int32 reserved_3_;
  float ca_object_height_;
  float ca_object_height_std_;
  ::google::protobuf::int32 reserved_4_;
  float ca_object_width_;
  float ca_object_width_std_;
  ::google::protobuf::int32 ca_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_FCF : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_FCF) */ {
 public:
  Dt_Record_FCF();
  virtual ~Dt_Record_FCF();

  Dt_Record_FCF(const Dt_Record_FCF& from);

  inline Dt_Record_FCF& operator=(const Dt_Record_FCF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_FCF& default_instance();

  static inline const Dt_Record_FCF* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_FCF*>(
               &_Dt_Record_FCF_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(Dt_Record_FCF* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_FCF* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_FCF* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_FCF& from);
  void MergeFrom(const Dt_Record_FCF& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_FCF* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Dt_Record_FCF_Fcf_vd_alert_fcvType Fcf_vd_alert_fcvType;
  static const Fcf_vd_alert_fcvType NONE =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_NONE;
  static const Fcf_vd_alert_fcvType AEB_VALIDATION =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_VALIDATION;
  static const Fcf_vd_alert_fcvType AEB_MAX_REL_V =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_REL_V;
  static const Fcf_vd_alert_fcvType AEB_MIN_SPEED =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MIN_SPEED;
  static const Fcf_vd_alert_fcvType AEB_MAX_DISTANCE =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_DISTANCE;
  static const Fcf_vd_alert_fcvType AEB_MIN_TIME_FOR_CCM_AFTER_CCM =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MIN_TIME_FOR_CCM_AFTER_CCM;
  static const Fcf_vd_alert_fcvType AEB_MIN_REL_V =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MIN_REL_V;
  static const Fcf_vd_alert_fcvType AEB_LATERAL_AVOIDANCE =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_LATERAL_AVOIDANCE;
  static const Fcf_vd_alert_fcvType AEB_MAX_WARN_LENGTH =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_WARN_LENGTH;
  static const Fcf_vd_alert_fcvType AEB_MAX_YAW_RATE =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_YAW_RATE;
  static const Fcf_vd_alert_fcvType AEB_Safety_CRC =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_Safety_CRC;
  static const Fcf_vd_alert_fcvType AEB_MAX_SPEED_REDUCTION =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_SPEED_REDUCTION;
  static const Fcf_vd_alert_fcvType AEB_MAX_SPEED =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_SPEED;
  static const Fcf_vd_alert_fcvType AEB_MAX_STEERING_ANGLE =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_AEB_MAX_STEERING_ANGLE;
  static inline bool Fcf_vd_alert_fcvType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_alert_fcvType_IsValid(value);
  }
  static const Fcf_vd_alert_fcvType Fcf_vd_alert_fcvType_MIN =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_Fcf_vd_alert_fcvType_MIN;
  static const Fcf_vd_alert_fcvType Fcf_vd_alert_fcvType_MAX =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_Fcf_vd_alert_fcvType_MAX;
  static const int Fcf_vd_alert_fcvType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_alert_fcvType_Fcf_vd_alert_fcvType_ARRAYSIZE;

  typedef Dt_Record_FCF_Reserved_1Type Reserved_1Type;
  static const Reserved_1Type NO_FUSION =
    Dt_Record_FCF_Reserved_1Type_NO_FUSION;
  static const Reserved_1Type AVOID =
    Dt_Record_FCF_Reserved_1Type_AVOID;
  static const Reserved_1Type CONTINUE =
    Dt_Record_FCF_Reserved_1Type_CONTINUE;
  static const Reserved_1Type START =
    Dt_Record_FCF_Reserved_1Type_START;
  static inline bool Reserved_1Type_IsValid(int value) {
    return Dt_Record_FCF_Reserved_1Type_IsValid(value);
  }
  static const Reserved_1Type Reserved_1Type_MIN =
    Dt_Record_FCF_Reserved_1Type_Reserved_1Type_MIN;
  static const Reserved_1Type Reserved_1Type_MAX =
    Dt_Record_FCF_Reserved_1Type_Reserved_1Type_MAX;
  static const int Reserved_1Type_ARRAYSIZE =
    Dt_Record_FCF_Reserved_1Type_Reserved_1Type_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_aeb_supp_aType Fcf_vd_aeb_supp_aType;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_NONE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_NONE_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_VALIDATION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_VALIDATION_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MAX_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_REL_V_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MIN_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MIN_SPEED_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_DISTANCE_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MIN_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MIN_REL_V_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_LATERAL_AVOIDANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_LATERAL_AVOIDANCE_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MAX_WARN_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_WARN_LENGTH_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MAX_YAW_RATE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_YAW_RATE_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_Safety_CRC_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_Safety_CRC_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_REDUCTION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_REDUCTION_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_SPEED_;
  static const Fcf_vd_aeb_supp_aType FCF_VD_AEB_Supp_A_AEB_MAX_STEERING_ANGLE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_FCF_VD_AEB_Supp_A_AEB_MAX_STEERING_ANGLE_;
  static inline bool Fcf_vd_aeb_supp_aType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_aeb_supp_aType_IsValid(value);
  }
  static const Fcf_vd_aeb_supp_aType Fcf_vd_aeb_supp_aType_MIN =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_Fcf_vd_aeb_supp_aType_MIN;
  static const Fcf_vd_aeb_supp_aType Fcf_vd_aeb_supp_aType_MAX =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_Fcf_vd_aeb_supp_aType_MAX;
  static const int Fcf_vd_aeb_supp_aType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_aeb_supp_aType_Fcf_vd_aeb_supp_aType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_fcw_supp_aType Fcf_vd_fcw_supp_aType;
  static const Fcf_vd_fcw_supp_aType FCF_VD_FCW_Supp_A_NONE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCF_VD_FCW_Supp_A_NONE_;
  static const Fcf_vd_fcw_supp_aType FCW_ACCELERETION_SUPPRESSION =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_ACCELERETION_SUPPRESSION;
  static const Fcf_vd_fcw_supp_aType FCW_NRTA_OOVER_SPEED =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_NRTA_OOVER_SPEED;
  static const Fcf_vd_fcw_supp_aType FCW_MAXIMUM_TIME_FOR_WARNING =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_MAXIMUM_TIME_FOR_WARNING;
  static const Fcf_vd_fcw_supp_aType FCW_LATERAL_AVIODANCE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_LATERAL_AVIODANCE;
  static const Fcf_vd_fcw_supp_aType FCW_ACCELERETION_SUPPRESSION_LENGTH =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_ACCELERETION_SUPPRESSION_LENGTH;
  static const Fcf_vd_fcw_supp_aType FCW_ABOVE_MAX_DISTANCE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_ABOVE_MAX_DISTANCE;
  static const Fcf_vd_fcw_supp_aType FCW_NOT_READY_TO_ASSIST =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_NOT_READY_TO_ASSIST;
  static const Fcf_vd_fcw_supp_aType FCW_CLUTCH_SUPPRESSIO =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_CLUTCH_SUPPRESSIO;
  static const Fcf_vd_fcw_supp_aType FCW_BRAKING_SUPPRESSION =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_BRAKING_SUPPRESSION;
  static const Fcf_vd_fcw_supp_aType FCW_NRTA_UNDER_SPEED =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_NRTA_UNDER_SPEED;
  static const Fcf_vd_fcw_supp_aType FCW_MINIMUM_TIME_BETWEEN_WARNINGS =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_FCW_MINIMUM_TIME_BETWEEN_WARNINGS;
  static const Fcf_vd_fcw_supp_aType BRAKING_SUPPRESSION_LENGTH =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_BRAKING_SUPPRESSION_LENGTH;
  static inline bool Fcf_vd_fcw_supp_aType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_fcw_supp_aType_IsValid(value);
  }
  static const Fcf_vd_fcw_supp_aType Fcf_vd_fcw_supp_aType_MIN =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_Fcf_vd_fcw_supp_aType_MIN;
  static const Fcf_vd_fcw_supp_aType Fcf_vd_fcw_supp_aType_MAX =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_Fcf_vd_fcw_supp_aType_MAX;
  static const int Fcf_vd_fcw_supp_aType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_aType_Fcf_vd_fcw_supp_aType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_aeb_supp_bType Fcf_vd_aeb_supp_bType;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_NONE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_NONE_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_VALIDATION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_VALIDATION_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MAX_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_REL_V_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MIN_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MIN_SPEED_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_DISTANCE_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MIN_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MIN_REL_V_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_LATERAL_AVOIDANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_LATERAL_AVOIDANCE_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MAX_WARN_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_WARN_LENGTH_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MAX_YAW_RATE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_YAW_RATE_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_Safety_CRC_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_Safety_CRC_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_REDUCTION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_REDUCTION_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_SPEED_;
  static const Fcf_vd_aeb_supp_bType FCF_VD_AEB_Supp_B_AEB_MAX_STEERING_ANGLE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_FCF_VD_AEB_Supp_B_AEB_MAX_STEERING_ANGLE_;
  static inline bool Fcf_vd_aeb_supp_bType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_aeb_supp_bType_IsValid(value);
  }
  static const Fcf_vd_aeb_supp_bType Fcf_vd_aeb_supp_bType_MIN =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_Fcf_vd_aeb_supp_bType_MIN;
  static const Fcf_vd_aeb_supp_bType Fcf_vd_aeb_supp_bType_MAX =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_Fcf_vd_aeb_supp_bType_MAX;
  static const int Fcf_vd_aeb_supp_bType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_aeb_supp_bType_Fcf_vd_aeb_supp_bType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_fcw_supp_bType Fcf_vd_fcw_supp_bType;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_NONE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_NONE_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_NRTA_OOVER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_NRTA_OOVER_SPEED_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_MAXIMUM_TIME_FOR_WARNING_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_MAXIMUM_TIME_FOR_WARNING_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_LATERAL_AVIODANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_LATERAL_AVIODANCE_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_ABOVE_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_ABOVE_MAX_DISTANCE_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_NOT_READY_TO_ASSIST_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_NOT_READY_TO_ASSIST_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_CLUTCH_SUPPRESSIO_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_CLUTCH_SUPPRESSIO_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_BRAKING_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_BRAKING_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_NRTA_UNDER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_NRTA_UNDER_SPEED_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
  static const Fcf_vd_fcw_supp_bType FCF_VD_FCW_Supp_B_BRAKING_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_FCF_VD_FCW_Supp_B_BRAKING_SUPPRESSION_LENGTH_;
  static inline bool Fcf_vd_fcw_supp_bType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_fcw_supp_bType_IsValid(value);
  }
  static const Fcf_vd_fcw_supp_bType Fcf_vd_fcw_supp_bType_MIN =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_Fcf_vd_fcw_supp_bType_MIN;
  static const Fcf_vd_fcw_supp_bType Fcf_vd_fcw_supp_bType_MAX =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_Fcf_vd_fcw_supp_bType_MAX;
  static const int Fcf_vd_fcw_supp_bType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_bType_Fcf_vd_fcw_supp_bType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_aeb_supp_cType Fcf_vd_aeb_supp_cType;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_NONE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_NONE_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_VALIDATION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_VALIDATION_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MAX_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_REL_V_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MIN_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MIN_SPEED_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_DISTANCE_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MIN_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MIN_REL_V_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_LATERAL_AVOIDANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_LATERAL_AVOIDANCE_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MAX_WARN_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_WARN_LENGTH_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MAX_YAW_RATE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_YAW_RATE_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_Safety_CRC_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_Safety_CRC_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_REDUCTION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_REDUCTION_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_SPEED_;
  static const Fcf_vd_aeb_supp_cType FCF_VD_AEB_Supp_C_AEB_MAX_STEERING_ANGLE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_FCF_VD_AEB_Supp_C_AEB_MAX_STEERING_ANGLE_;
  static inline bool Fcf_vd_aeb_supp_cType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_aeb_supp_cType_IsValid(value);
  }
  static const Fcf_vd_aeb_supp_cType Fcf_vd_aeb_supp_cType_MIN =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_Fcf_vd_aeb_supp_cType_MIN;
  static const Fcf_vd_aeb_supp_cType Fcf_vd_aeb_supp_cType_MAX =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_Fcf_vd_aeb_supp_cType_MAX;
  static const int Fcf_vd_aeb_supp_cType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_aeb_supp_cType_Fcf_vd_aeb_supp_cType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_fcw_supp_cType Fcf_vd_fcw_supp_cType;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_NONE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_NONE_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_NRTA_OOVER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_NRTA_OOVER_SPEED_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_MAXIMUM_TIME_FOR_WARNING_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_MAXIMUM_TIME_FOR_WARNING_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_LATERAL_AVIODANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_LATERAL_AVIODANCE_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_ABOVE_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_ABOVE_MAX_DISTANCE_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_NOT_READY_TO_ASSIST_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_NOT_READY_TO_ASSIST_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_CLUTCH_SUPPRESSIO_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_CLUTCH_SUPPRESSIO_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_BRAKING_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_BRAKING_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_NRTA_UNDER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_NRTA_UNDER_SPEED_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
  static const Fcf_vd_fcw_supp_cType FCF_VD_FCW_Supp_C_BRAKING_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_FCF_VD_FCW_Supp_C_BRAKING_SUPPRESSION_LENGTH_;
  static inline bool Fcf_vd_fcw_supp_cType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_fcw_supp_cType_IsValid(value);
  }
  static const Fcf_vd_fcw_supp_cType Fcf_vd_fcw_supp_cType_MIN =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_Fcf_vd_fcw_supp_cType_MIN;
  static const Fcf_vd_fcw_supp_cType Fcf_vd_fcw_supp_cType_MAX =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_Fcf_vd_fcw_supp_cType_MAX;
  static const int Fcf_vd_fcw_supp_cType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_cType_Fcf_vd_fcw_supp_cType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_aeb_supp_dType Fcf_vd_aeb_supp_dType;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_NONE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_NONE_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_VALIDATION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_VALIDATION_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MAX_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_REL_V_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MIN_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MIN_SPEED_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_DISTANCE_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MIN_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MIN_REL_V_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_LATERAL_AVOIDANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_LATERAL_AVOIDANCE_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MAX_WARN_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_WARN_LENGTH_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MAX_YAW_RATE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_YAW_RATE_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_Safety_CRC_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_Safety_CRC_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_REDUCTION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_REDUCTION_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_SPEED_;
  static const Fcf_vd_aeb_supp_dType FCF_VD_AEB_Supp_D_AEB_MAX_STEERING_ANGLE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_FCF_VD_AEB_Supp_D_AEB_MAX_STEERING_ANGLE_;
  static inline bool Fcf_vd_aeb_supp_dType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_aeb_supp_dType_IsValid(value);
  }
  static const Fcf_vd_aeb_supp_dType Fcf_vd_aeb_supp_dType_MIN =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_Fcf_vd_aeb_supp_dType_MIN;
  static const Fcf_vd_aeb_supp_dType Fcf_vd_aeb_supp_dType_MAX =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_Fcf_vd_aeb_supp_dType_MAX;
  static const int Fcf_vd_aeb_supp_dType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_aeb_supp_dType_Fcf_vd_aeb_supp_dType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_fcw_supp_dType Fcf_vd_fcw_supp_dType;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_NONE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_NONE_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_NRTA_OOVER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_NRTA_OOVER_SPEED_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_MAXIMUM_TIME_FOR_WARNING_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_MAXIMUM_TIME_FOR_WARNING_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_LATERAL_AVIODANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_LATERAL_AVIODANCE_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_ABOVE_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_ABOVE_MAX_DISTANCE_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_NOT_READY_TO_ASSIST_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_NOT_READY_TO_ASSIST_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_CLUTCH_SUPPRESSIO_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_CLUTCH_SUPPRESSIO_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_BRAKING_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_BRAKING_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_NRTA_UNDER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_NRTA_UNDER_SPEED_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
  static const Fcf_vd_fcw_supp_dType FCF_VD_FCW_Supp_D_BRAKING_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_FCF_VD_FCW_Supp_D_BRAKING_SUPPRESSION_LENGTH_;
  static inline bool Fcf_vd_fcw_supp_dType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_fcw_supp_dType_IsValid(value);
  }
  static const Fcf_vd_fcw_supp_dType Fcf_vd_fcw_supp_dType_MIN =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_Fcf_vd_fcw_supp_dType_MIN;
  static const Fcf_vd_fcw_supp_dType Fcf_vd_fcw_supp_dType_MAX =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_Fcf_vd_fcw_supp_dType_MAX;
  static const int Fcf_vd_fcw_supp_dType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_dType_Fcf_vd_fcw_supp_dType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_aeb_supp_eType Fcf_vd_aeb_supp_eType;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_NONE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_NONE_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_VALIDATION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_VALIDATION_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MAX_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_REL_V_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MIN_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MIN_SPEED_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_DISTANCE_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MIN_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MIN_REL_V_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_LATERAL_AVOIDANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_LATERAL_AVOIDANCE_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MAX_WARN_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_WARN_LENGTH_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MAX_YAW_RATE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_YAW_RATE_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_Safety_CRC_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_Safety_CRC_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_REDUCTION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_REDUCTION_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_SPEED_;
  static const Fcf_vd_aeb_supp_eType FCF_VD_AEB_Supp_E_AEB_MAX_STEERING_ANGLE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_FCF_VD_AEB_Supp_E_AEB_MAX_STEERING_ANGLE_;
  static inline bool Fcf_vd_aeb_supp_eType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_aeb_supp_eType_IsValid(value);
  }
  static const Fcf_vd_aeb_supp_eType Fcf_vd_aeb_supp_eType_MIN =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_Fcf_vd_aeb_supp_eType_MIN;
  static const Fcf_vd_aeb_supp_eType Fcf_vd_aeb_supp_eType_MAX =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_Fcf_vd_aeb_supp_eType_MAX;
  static const int Fcf_vd_aeb_supp_eType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_aeb_supp_eType_Fcf_vd_aeb_supp_eType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_fcw_supp_eType Fcf_vd_fcw_supp_eType;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_NONE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_NONE_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_NRTA_OOVER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_NRTA_OOVER_SPEED_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_MAXIMUM_TIME_FOR_WARNING_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_MAXIMUM_TIME_FOR_WARNING_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_LATERAL_AVIODANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_LATERAL_AVIODANCE_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_ABOVE_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_ABOVE_MAX_DISTANCE_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_NOT_READY_TO_ASSIST_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_NOT_READY_TO_ASSIST_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_CLUTCH_SUPPRESSIO_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_CLUTCH_SUPPRESSIO_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_BRAKING_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_BRAKING_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_NRTA_UNDER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_NRTA_UNDER_SPEED_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
  static const Fcf_vd_fcw_supp_eType FCF_VD_FCW_Supp_E_BRAKING_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_FCF_VD_FCW_Supp_E_BRAKING_SUPPRESSION_LENGTH_;
  static inline bool Fcf_vd_fcw_supp_eType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_fcw_supp_eType_IsValid(value);
  }
  static const Fcf_vd_fcw_supp_eType Fcf_vd_fcw_supp_eType_MIN =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_Fcf_vd_fcw_supp_eType_MIN;
  static const Fcf_vd_fcw_supp_eType Fcf_vd_fcw_supp_eType_MAX =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_Fcf_vd_fcw_supp_eType_MAX;
  static const int Fcf_vd_fcw_supp_eType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_eType_Fcf_vd_fcw_supp_eType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_aeb_supp_fType Fcf_vd_aeb_supp_fType;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_NONE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_NONE_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_VALIDATION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_VALIDATION_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MAX_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_REL_V_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MIN_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MIN_SPEED_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_DISTANCE_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MIN_TIME_FOR_CCM_AFTER_CCM_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MIN_REL_V_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MIN_REL_V_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_LATERAL_AVOIDANCE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_LATERAL_AVOIDANCE_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MAX_WARN_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_WARN_LENGTH_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MAX_YAW_RATE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_YAW_RATE_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_Safety_CRC_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_Safety_CRC_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_REDUCTION_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_REDUCTION_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_SPEED_;
  static const Fcf_vd_aeb_supp_fType FCF_VD_AEB_Supp_F_AEB_MAX_STEERING_ANGLE_ =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_FCF_VD_AEB_Supp_F_AEB_MAX_STEERING_ANGLE_;
  static inline bool Fcf_vd_aeb_supp_fType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_aeb_supp_fType_IsValid(value);
  }
  static const Fcf_vd_aeb_supp_fType Fcf_vd_aeb_supp_fType_MIN =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_Fcf_vd_aeb_supp_fType_MIN;
  static const Fcf_vd_aeb_supp_fType Fcf_vd_aeb_supp_fType_MAX =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_Fcf_vd_aeb_supp_fType_MAX;
  static const int Fcf_vd_aeb_supp_fType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_aeb_supp_fType_Fcf_vd_aeb_supp_fType_ARRAYSIZE;

  typedef Dt_Record_FCF_Fcf_vd_fcw_supp_fType Fcf_vd_fcw_supp_fType;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_NONE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_NONE_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_NRTA_OOVER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_NRTA_OOVER_SPEED_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_MAXIMUM_TIME_FOR_WARNING_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_MAXIMUM_TIME_FOR_WARNING_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_LATERAL_AVIODANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_LATERAL_AVIODANCE_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_ACCELERETION_SUPPRESSION_LENGTH_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_ABOVE_MAX_DISTANCE_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_ABOVE_MAX_DISTANCE_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_NOT_READY_TO_ASSIST_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_NOT_READY_TO_ASSIST_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_CLUTCH_SUPPRESSIO_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_CLUTCH_SUPPRESSIO_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_BRAKING_SUPPRESSION_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_BRAKING_SUPPRESSION_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_NRTA_UNDER_SPEED_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_NRTA_UNDER_SPEED_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_FCW_MINIMUM_TIME_BETWEEN_WARNINGS_;
  static const Fcf_vd_fcw_supp_fType FCF_VD_FCW_Supp_F_BRAKING_SUPPRESSION_LENGTH_ =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_FCF_VD_FCW_Supp_F_BRAKING_SUPPRESSION_LENGTH_;
  static inline bool Fcf_vd_fcw_supp_fType_IsValid(int value) {
    return Dt_Record_FCF_Fcf_vd_fcw_supp_fType_IsValid(value);
  }
  static const Fcf_vd_fcw_supp_fType Fcf_vd_fcw_supp_fType_MIN =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_Fcf_vd_fcw_supp_fType_MIN;
  static const Fcf_vd_fcw_supp_fType Fcf_vd_fcw_supp_fType_MAX =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_Fcf_vd_fcw_supp_fType_MAX;
  static const int Fcf_vd_fcw_supp_fType_ARRAYSIZE =
    Dt_Record_FCF_Fcf_vd_fcw_supp_fType_Fcf_vd_fcw_supp_fType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 44;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 44;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 45;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 45;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional int32 fcf_vd_zero_byte = 1;
  bool has_fcf_vd_zero_byte() const;
  void clear_fcf_vd_zero_byte();
  static const int kFcfVdZeroByteFieldNumber = 1;
  ::google::protobuf::int32 fcf_vd_zero_byte() const;
  void set_fcf_vd_zero_byte(::google::protobuf::int32 value);

  // optional int32 fcf_vd_protocol_version = 2;
  bool has_fcf_vd_protocol_version() const;
  void clear_fcf_vd_protocol_version();
  static const int kFcfVdProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 fcf_vd_protocol_version() const;
  void set_fcf_vd_protocol_version(::google::protobuf::int32 value);

  // optional int32 fcf_vd_syncid = 3;
  bool has_fcf_vd_syncid() const;
  void clear_fcf_vd_syncid();
  static const int kFcfVdSyncidFieldNumber = 3;
  ::google::protobuf::int32 fcf_vd_syncid() const;
  void set_fcf_vd_syncid(::google::protobuf::int32 value);

  // optional int32 fcf_vd_id_fcv = 4;
  bool has_fcf_vd_id_fcv() const;
  void clear_fcf_vd_id_fcv();
  static const int kFcfVdIdFcvFieldNumber = 4;
  ::google::protobuf::int32 fcf_vd_id_fcv() const;
  void set_fcf_vd_id_fcv(::google::protobuf::int32 value);

  // optional float fcf_vd_alert_fcv = 5;
  bool has_fcf_vd_alert_fcv() const;
  void clear_fcf_vd_alert_fcv();
  static const int kFcfVdAlertFcvFieldNumber = 5;
  float fcf_vd_alert_fcv() const;
  void set_fcf_vd_alert_fcv(float value);

  // optional .atd.meprocess.Dt_Record_FCF.Reserved_1Type reserved_1 = 6;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 6;
  ::atd::meprocess::Dt_Record_FCF_Reserved_1Type reserved_1() const;
  void set_reserved_1(::atd::meprocess::Dt_Record_FCF_Reserved_1Type value);

  // optional float fcf_vd_aeb_supp_fcv = 7;
  bool has_fcf_vd_aeb_supp_fcv() const;
  void clear_fcf_vd_aeb_supp_fcv();
  static const int kFcfVdAebSuppFcvFieldNumber = 7;
  float fcf_vd_aeb_supp_fcv() const;
  void set_fcf_vd_aeb_supp_fcv(float value);

  // optional int32 fcf_vd_alert_a = 8;
  bool has_fcf_vd_alert_a() const;
  void clear_fcf_vd_alert_a();
  static const int kFcfVdAlertAFieldNumber = 8;
  ::google::protobuf::int32 fcf_vd_alert_a() const;
  void set_fcf_vd_alert_a(::google::protobuf::int32 value);

  // optional int32 fcf_vd_id_a = 9;
  bool has_fcf_vd_id_a() const;
  void clear_fcf_vd_id_a();
  static const int kFcfVdIdAFieldNumber = 9;
  ::google::protobuf::int32 fcf_vd_id_a() const;
  void set_fcf_vd_id_a(::google::protobuf::int32 value);

  // optional int32 reserved_2 = 11;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 11;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional float fcf_vd_aeb_supp_a = 12;
  bool has_fcf_vd_aeb_supp_a() const;
  void clear_fcf_vd_aeb_supp_a();
  static const int kFcfVdAebSuppAFieldNumber = 12;
  float fcf_vd_aeb_supp_a() const;
  void set_fcf_vd_aeb_supp_a(float value);

  // optional float fcf_vd_fcw_supp_a = 13;
  bool has_fcf_vd_fcw_supp_a() const;
  void clear_fcf_vd_fcw_supp_a();
  static const int kFcfVdFcwSuppAFieldNumber = 13;
  float fcf_vd_fcw_supp_a() const;
  void set_fcf_vd_fcw_supp_a(float value);

  // optional int32 fcf_vd_alert_b = 14;
  bool has_fcf_vd_alert_b() const;
  void clear_fcf_vd_alert_b();
  static const int kFcfVdAlertBFieldNumber = 14;
  ::google::protobuf::int32 fcf_vd_alert_b() const;
  void set_fcf_vd_alert_b(::google::protobuf::int32 value);

  // optional int32 fcf_vd_id_b = 15;
  bool has_fcf_vd_id_b() const;
  void clear_fcf_vd_id_b();
  static const int kFcfVdIdBFieldNumber = 15;
  ::google::protobuf::int32 fcf_vd_id_b() const;
  void set_fcf_vd_id_b(::google::protobuf::int32 value);

  // optional int32 reserved_3 = 17;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 17;
  ::google::protobuf::int32 reserved_3() const;
  void set_reserved_3(::google::protobuf::int32 value);

  // optional float fcf_vd_aeb_supp_b = 18;
  bool has_fcf_vd_aeb_supp_b() const;
  void clear_fcf_vd_aeb_supp_b();
  static const int kFcfVdAebSuppBFieldNumber = 18;
  float fcf_vd_aeb_supp_b() const;
  void set_fcf_vd_aeb_supp_b(float value);

  // optional float fcf_vd_fcw_supp_b = 19;
  bool has_fcf_vd_fcw_supp_b() const;
  void clear_fcf_vd_fcw_supp_b();
  static const int kFcfVdFcwSuppBFieldNumber = 19;
  float fcf_vd_fcw_supp_b() const;
  void set_fcf_vd_fcw_supp_b(float value);

  // optional bool fcf_vd_set_type_a = 10;
  bool has_fcf_vd_set_type_a() const;
  void clear_fcf_vd_set_type_a();
  static const int kFcfVdSetTypeAFieldNumber = 10;
  bool fcf_vd_set_type_a() const;
  void set_fcf_vd_set_type_a(bool value);

  // optional bool fcf_vd_set_type_b = 16;
  bool has_fcf_vd_set_type_b() const;
  void clear_fcf_vd_set_type_b();
  static const int kFcfVdSetTypeBFieldNumber = 16;
  bool fcf_vd_set_type_b() const;
  void set_fcf_vd_set_type_b(bool value);

  // optional bool fcf_vd_set_type_c = 22;
  bool has_fcf_vd_set_type_c() const;
  void clear_fcf_vd_set_type_c();
  static const int kFcfVdSetTypeCFieldNumber = 22;
  bool fcf_vd_set_type_c() const;
  void set_fcf_vd_set_type_c(bool value);

  // optional bool fcf_vd_set_type_d = 28;
  bool has_fcf_vd_set_type_d() const;
  void clear_fcf_vd_set_type_d();
  static const int kFcfVdSetTypeDFieldNumber = 28;
  bool fcf_vd_set_type_d() const;
  void set_fcf_vd_set_type_d(bool value);

  // optional int32 fcf_vd_alert_c = 20;
  bool has_fcf_vd_alert_c() const;
  void clear_fcf_vd_alert_c();
  static const int kFcfVdAlertCFieldNumber = 20;
  ::google::protobuf::int32 fcf_vd_alert_c() const;
  void set_fcf_vd_alert_c(::google::protobuf::int32 value);

  // optional int32 fcf_vd_id_c = 21;
  bool has_fcf_vd_id_c() const;
  void clear_fcf_vd_id_c();
  static const int kFcfVdIdCFieldNumber = 21;
  ::google::protobuf::int32 fcf_vd_id_c() const;
  void set_fcf_vd_id_c(::google::protobuf::int32 value);

  // optional int32 reserved_4 = 23;
  bool has_reserved_4() const;
  void clear_reserved_4();
  static const int kReserved4FieldNumber = 23;
  ::google::protobuf::int32 reserved_4() const;
  void set_reserved_4(::google::protobuf::int32 value);

  // optional float fcf_vd_aeb_supp_c = 24;
  bool has_fcf_vd_aeb_supp_c() const;
  void clear_fcf_vd_aeb_supp_c();
  static const int kFcfVdAebSuppCFieldNumber = 24;
  float fcf_vd_aeb_supp_c() const;
  void set_fcf_vd_aeb_supp_c(float value);

  // optional float fcf_vd_fcw_supp_c = 25;
  bool has_fcf_vd_fcw_supp_c() const;
  void clear_fcf_vd_fcw_supp_c();
  static const int kFcfVdFcwSuppCFieldNumber = 25;
  float fcf_vd_fcw_supp_c() const;
  void set_fcf_vd_fcw_supp_c(float value);

  // optional int32 fcf_vd_alert_d = 26;
  bool has_fcf_vd_alert_d() const;
  void clear_fcf_vd_alert_d();
  static const int kFcfVdAlertDFieldNumber = 26;
  ::google::protobuf::int32 fcf_vd_alert_d() const;
  void set_fcf_vd_alert_d(::google::protobuf::int32 value);

  // optional int32 fcf_vd_id_d = 27;
  bool has_fcf_vd_id_d() const;
  void clear_fcf_vd_id_d();
  static const int kFcfVdIdDFieldNumber = 27;
  ::google::protobuf::int32 fcf_vd_id_d() const;
  void set_fcf_vd_id_d(::google::protobuf::int32 value);

  // optional int32 reserved_5 = 29;
  bool has_reserved_5() const;
  void clear_reserved_5();
  static const int kReserved5FieldNumber = 29;
  ::google::protobuf::int32 reserved_5() const;
  void set_reserved_5(::google::protobuf::int32 value);

  // optional float fcf_vd_aeb_supp_d = 30;
  bool has_fcf_vd_aeb_supp_d() const;
  void clear_fcf_vd_aeb_supp_d();
  static const int kFcfVdAebSuppDFieldNumber = 30;
  float fcf_vd_aeb_supp_d() const;
  void set_fcf_vd_aeb_supp_d(float value);

  // optional float fcf_vd_fcw_supp_d = 31;
  bool has_fcf_vd_fcw_supp_d() const;
  void clear_fcf_vd_fcw_supp_d();
  static const int kFcfVdFcwSuppDFieldNumber = 31;
  float fcf_vd_fcw_supp_d() const;
  void set_fcf_vd_fcw_supp_d(float value);

  // optional int32 fcf_vd_alert_e = 32;
  bool has_fcf_vd_alert_e() const;
  void clear_fcf_vd_alert_e();
  static const int kFcfVdAlertEFieldNumber = 32;
  ::google::protobuf::int32 fcf_vd_alert_e() const;
  void set_fcf_vd_alert_e(::google::protobuf::int32 value);

  // optional int32 fcf_vd_id_e = 33;
  bool has_fcf_vd_id_e() const;
  void clear_fcf_vd_id_e();
  static const int kFcfVdIdEFieldNumber = 33;
  ::google::protobuf::int32 fcf_vd_id_e() const;
  void set_fcf_vd_id_e(::google::protobuf::int32 value);

  // optional int32 reserved_6 = 35;
  bool has_reserved_6() const;
  void clear_reserved_6();
  static const int kReserved6FieldNumber = 35;
  ::google::protobuf::int32 reserved_6() const;
  void set_reserved_6(::google::protobuf::int32 value);

  // optional float fcf_vd_aeb_supp_e = 36;
  bool has_fcf_vd_aeb_supp_e() const;
  void clear_fcf_vd_aeb_supp_e();
  static const int kFcfVdAebSuppEFieldNumber = 36;
  float fcf_vd_aeb_supp_e() const;
  void set_fcf_vd_aeb_supp_e(float value);

  // optional float fcf_vd_fcw_supp_e = 37;
  bool has_fcf_vd_fcw_supp_e() const;
  void clear_fcf_vd_fcw_supp_e();
  static const int kFcfVdFcwSuppEFieldNumber = 37;
  float fcf_vd_fcw_supp_e() const;
  void set_fcf_vd_fcw_supp_e(float value);

  // optional bool fcf_vd_set_type_e = 34;
  bool has_fcf_vd_set_type_e() const;
  void clear_fcf_vd_set_type_e();
  static const int kFcfVdSetTypeEFieldNumber = 34;
  bool fcf_vd_set_type_e() const;
  void set_fcf_vd_set_type_e(bool value);

  // optional bool fcf_vd_set_type_f = 40;
  bool has_fcf_vd_set_type_f() const;
  void clear_fcf_vd_set_type_f();
  static const int kFcfVdSetTypeFFieldNumber = 40;
  bool fcf_vd_set_type_f() const;
  void set_fcf_vd_set_type_f(bool value);

  // optional int32 fcf_vd_alert_f = 38;
  bool has_fcf_vd_alert_f() const;
  void clear_fcf_vd_alert_f();
  static const int kFcfVdAlertFFieldNumber = 38;
  ::google::protobuf::int32 fcf_vd_alert_f() const;
  void set_fcf_vd_alert_f(::google::protobuf::int32 value);

  // optional int32 fcf_vd_id_f = 39;
  bool has_fcf_vd_id_f() const;
  void clear_fcf_vd_id_f();
  static const int kFcfVdIdFFieldNumber = 39;
  ::google::protobuf::int32 fcf_vd_id_f() const;
  void set_fcf_vd_id_f(::google::protobuf::int32 value);

  // optional int32 reserved_7 = 41;
  bool has_reserved_7() const;
  void clear_reserved_7();
  static const int kReserved7FieldNumber = 41;
  ::google::protobuf::int32 reserved_7() const;
  void set_reserved_7(::google::protobuf::int32 value);

  // optional float fcf_vd_aeb_supp_f = 42;
  bool has_fcf_vd_aeb_supp_f() const;
  void clear_fcf_vd_aeb_supp_f();
  static const int kFcfVdAebSuppFFieldNumber = 42;
  float fcf_vd_aeb_supp_f() const;
  void set_fcf_vd_aeb_supp_f(float value);

  // optional float fcf_vd_fcw_supp_f = 43;
  bool has_fcf_vd_fcw_supp_f() const;
  void clear_fcf_vd_fcw_supp_f();
  static const int kFcfVdFcwSuppFFieldNumber = 43;
  float fcf_vd_fcw_supp_f() const;
  void set_fcf_vd_fcw_supp_f(float value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_FCF)
 private:
  void set_has_fcf_vd_zero_byte();
  void clear_has_fcf_vd_zero_byte();
  void set_has_fcf_vd_protocol_version();
  void clear_has_fcf_vd_protocol_version();
  void set_has_fcf_vd_syncid();
  void clear_has_fcf_vd_syncid();
  void set_has_fcf_vd_id_fcv();
  void clear_has_fcf_vd_id_fcv();
  void set_has_fcf_vd_alert_fcv();
  void clear_has_fcf_vd_alert_fcv();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_fcf_vd_aeb_supp_fcv();
  void clear_has_fcf_vd_aeb_supp_fcv();
  void set_has_fcf_vd_alert_a();
  void clear_has_fcf_vd_alert_a();
  void set_has_fcf_vd_id_a();
  void clear_has_fcf_vd_id_a();
  void set_has_fcf_vd_set_type_a();
  void clear_has_fcf_vd_set_type_a();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_fcf_vd_aeb_supp_a();
  void clear_has_fcf_vd_aeb_supp_a();
  void set_has_fcf_vd_fcw_supp_a();
  void clear_has_fcf_vd_fcw_supp_a();
  void set_has_fcf_vd_alert_b();
  void clear_has_fcf_vd_alert_b();
  void set_has_fcf_vd_id_b();
  void clear_has_fcf_vd_id_b();
  void set_has_fcf_vd_set_type_b();
  void clear_has_fcf_vd_set_type_b();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_fcf_vd_aeb_supp_b();
  void clear_has_fcf_vd_aeb_supp_b();
  void set_has_fcf_vd_fcw_supp_b();
  void clear_has_fcf_vd_fcw_supp_b();
  void set_has_fcf_vd_alert_c();
  void clear_has_fcf_vd_alert_c();
  void set_has_fcf_vd_id_c();
  void clear_has_fcf_vd_id_c();
  void set_has_fcf_vd_set_type_c();
  void clear_has_fcf_vd_set_type_c();
  void set_has_reserved_4();
  void clear_has_reserved_4();
  void set_has_fcf_vd_aeb_supp_c();
  void clear_has_fcf_vd_aeb_supp_c();
  void set_has_fcf_vd_fcw_supp_c();
  void clear_has_fcf_vd_fcw_supp_c();
  void set_has_fcf_vd_alert_d();
  void clear_has_fcf_vd_alert_d();
  void set_has_fcf_vd_id_d();
  void clear_has_fcf_vd_id_d();
  void set_has_fcf_vd_set_type_d();
  void clear_has_fcf_vd_set_type_d();
  void set_has_reserved_5();
  void clear_has_reserved_5();
  void set_has_fcf_vd_aeb_supp_d();
  void clear_has_fcf_vd_aeb_supp_d();
  void set_has_fcf_vd_fcw_supp_d();
  void clear_has_fcf_vd_fcw_supp_d();
  void set_has_fcf_vd_alert_e();
  void clear_has_fcf_vd_alert_e();
  void set_has_fcf_vd_id_e();
  void clear_has_fcf_vd_id_e();
  void set_has_fcf_vd_set_type_e();
  void clear_has_fcf_vd_set_type_e();
  void set_has_reserved_6();
  void clear_has_reserved_6();
  void set_has_fcf_vd_aeb_supp_e();
  void clear_has_fcf_vd_aeb_supp_e();
  void set_has_fcf_vd_fcw_supp_e();
  void clear_has_fcf_vd_fcw_supp_e();
  void set_has_fcf_vd_alert_f();
  void clear_has_fcf_vd_alert_f();
  void set_has_fcf_vd_id_f();
  void clear_has_fcf_vd_id_f();
  void set_has_fcf_vd_set_type_f();
  void clear_has_fcf_vd_set_type_f();
  void set_has_reserved_7();
  void clear_has_reserved_7();
  void set_has_fcf_vd_aeb_supp_f();
  void clear_has_fcf_vd_aeb_supp_f();
  void set_has_fcf_vd_fcw_supp_f();
  void clear_has_fcf_vd_fcw_supp_f();
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<2> _has_bits_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::google::protobuf::int32 fcf_vd_zero_byte_;
  ::google::protobuf::int32 fcf_vd_protocol_version_;
  ::google::protobuf::int32 fcf_vd_syncid_;
  ::google::protobuf::int32 fcf_vd_id_fcv_;
  float fcf_vd_alert_fcv_;
  int reserved_1_;
  float fcf_vd_aeb_supp_fcv_;
  ::google::protobuf::int32 fcf_vd_alert_a_;
  ::google::protobuf::int32 fcf_vd_id_a_;
  ::google::protobuf::int32 reserved_2_;
  float fcf_vd_aeb_supp_a_;
  float fcf_vd_fcw_supp_a_;
  ::google::protobuf::int32 fcf_vd_alert_b_;
  ::google::protobuf::int32 fcf_vd_id_b_;
  ::google::protobuf::int32 reserved_3_;
  float fcf_vd_aeb_supp_b_;
  float fcf_vd_fcw_supp_b_;
  bool fcf_vd_set_type_a_;
  bool fcf_vd_set_type_b_;
  bool fcf_vd_set_type_c_;
  bool fcf_vd_set_type_d_;
  ::google::protobuf::int32 fcf_vd_alert_c_;
  ::google::protobuf::int32 fcf_vd_id_c_;
  ::google::protobuf::int32 reserved_4_;
  float fcf_vd_aeb_supp_c_;
  float fcf_vd_fcw_supp_c_;
  ::google::protobuf::int32 fcf_vd_alert_d_;
  ::google::protobuf::int32 fcf_vd_id_d_;
  ::google::protobuf::int32 reserved_5_;
  float fcf_vd_aeb_supp_d_;
  float fcf_vd_fcw_supp_d_;
  ::google::protobuf::int32 fcf_vd_alert_e_;
  ::google::protobuf::int32 fcf_vd_id_e_;
  ::google::protobuf::int32 reserved_6_;
  float fcf_vd_aeb_supp_e_;
  float fcf_vd_fcw_supp_e_;
  bool fcf_vd_set_type_e_;
  bool fcf_vd_set_type_f_;
  ::google::protobuf::int32 fcf_vd_alert_f_;
  ::google::protobuf::int32 fcf_vd_id_f_;
  ::google::protobuf::int32 reserved_7_;
  float fcf_vd_aeb_supp_f_;
  float fcf_vd_fcw_supp_f_;
  mutable int _cached_size_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VRUCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.VRUCommon) */ {
 public:
  VRUCommon();
  virtual ~VRUCommon();

  VRUCommon(const VRUCommon& from);

  inline VRUCommon& operator=(const VRUCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const VRUCommon& default_instance();

  static inline const VRUCommon* internal_default_instance() {
    return reinterpret_cast<const VRUCommon*>(
               &_VRUCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(VRUCommon* other);

  // implements Message ----------------------------------------------

  inline VRUCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  VRUCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VRUCommon& from);
  void MergeFrom(const VRUCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VRUCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef VRUCommon_Fcf_vru_fcvType Fcf_vru_fcvType;
  static const Fcf_vru_fcvType NO_FUSION =
    VRUCommon_Fcf_vru_fcvType_NO_FUSION;
  static const Fcf_vru_fcvType AVOID =
    VRUCommon_Fcf_vru_fcvType_AVOID;
  static const Fcf_vru_fcvType CONTINUE =
    VRUCommon_Fcf_vru_fcvType_CONTINUE;
  static const Fcf_vru_fcvType START =
    VRUCommon_Fcf_vru_fcvType_START;
  static inline bool Fcf_vru_fcvType_IsValid(int value) {
    return VRUCommon_Fcf_vru_fcvType_IsValid(value);
  }
  static const Fcf_vru_fcvType Fcf_vru_fcvType_MIN =
    VRUCommon_Fcf_vru_fcvType_Fcf_vru_fcvType_MIN;
  static const Fcf_vru_fcvType Fcf_vru_fcvType_MAX =
    VRUCommon_Fcf_vru_fcvType_Fcf_vru_fcvType_MAX;
  static const int Fcf_vru_fcvType_ARRAYSIZE =
    VRUCommon_Fcf_vru_fcvType_Fcf_vru_fcvType_ARRAYSIZE;

  typedef VRUCommon_Fcf_vru_supress_fcvType Fcf_vru_supress_fcvType;
  static const Fcf_vru_supress_fcvType MAX_SPEED =
    VRUCommon_Fcf_vru_supress_fcvType_MAX_SPEED;
  static const Fcf_vru_supress_fcvType MIN_SPEED =
    VRUCommon_Fcf_vru_supress_fcvType_MIN_SPEED;
  static const Fcf_vru_supress_fcvType BRAKE =
    VRUCommon_Fcf_vru_supress_fcvType_BRAKE;
  static const Fcf_vru_supress_fcvType MAX_YAW =
    VRUCommon_Fcf_vru_supress_fcvType_MAX_YAW;
  static const Fcf_vru_supress_fcvType REAR_GEAR =
    VRUCommon_Fcf_vru_supress_fcvType_REAR_GEAR;
  static const Fcf_vru_supress_fcvType STEERING_ANGLE =
    VRUCommon_Fcf_vru_supress_fcvType_STEERING_ANGLE;
  static const Fcf_vru_supress_fcvType RESERVED_1 =
    VRUCommon_Fcf_vru_supress_fcvType_RESERVED_1;
  static inline bool Fcf_vru_supress_fcvType_IsValid(int value) {
    return VRUCommon_Fcf_vru_supress_fcvType_IsValid(value);
  }
  static const Fcf_vru_supress_fcvType Fcf_vru_supress_fcvType_MIN =
    VRUCommon_Fcf_vru_supress_fcvType_Fcf_vru_supress_fcvType_MIN;
  static const Fcf_vru_supress_fcvType Fcf_vru_supress_fcvType_MAX =
    VRUCommon_Fcf_vru_supress_fcvType_Fcf_vru_supress_fcvType_MAX;
  static const int Fcf_vru_supress_fcvType_ARRAYSIZE =
    VRUCommon_Fcf_vru_supress_fcvType_Fcf_vru_supress_fcvType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 fcf_vru_zero_byte = 1;
  bool has_fcf_vru_zero_byte() const;
  void clear_fcf_vru_zero_byte();
  static const int kFcfVruZeroByteFieldNumber = 1;
  ::google::protobuf::int32 fcf_vru_zero_byte() const;
  void set_fcf_vru_zero_byte(::google::protobuf::int32 value);

  // optional int32 fcf_vru_protocol_version = 2;
  bool has_fcf_vru_protocol_version() const;
  void clear_fcf_vru_protocol_version();
  static const int kFcfVruProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 fcf_vru_protocol_version() const;
  void set_fcf_vru_protocol_version(::google::protobuf::int32 value);

  // optional int32 fcf_vru_sync_id = 3;
  bool has_fcf_vru_sync_id() const;
  void clear_fcf_vru_sync_id();
  static const int kFcfVruSyncIdFieldNumber = 3;
  ::google::protobuf::int32 fcf_vru_sync_id() const;
  void set_fcf_vru_sync_id(::google::protobuf::int32 value);

  // optional int32 fcf_vru_mcp_id = 4;
  bool has_fcf_vru_mcp_id() const;
  void clear_fcf_vru_mcp_id();
  static const int kFcfVruMcpIdFieldNumber = 4;
  ::google::protobuf::int32 fcf_vru_mcp_id() const;
  void set_fcf_vru_mcp_id(::google::protobuf::int32 value);

  // optional float fcf_vru_mcp_ttc = 5;
  bool has_fcf_vru_mcp_ttc() const;
  void clear_fcf_vru_mcp_ttc();
  static const int kFcfVruMcpTtcFieldNumber = 5;
  float fcf_vru_mcp_ttc() const;
  void set_fcf_vru_mcp_ttc(float value);

  // optional .atd.meprocess.VRUCommon.Fcf_vru_fcvType fcf_vru_fcv = 7;
  bool has_fcf_vru_fcv() const;
  void clear_fcf_vru_fcv();
  static const int kFcfVruFcvFieldNumber = 7;
  ::atd::meprocess::VRUCommon_Fcf_vru_fcvType fcf_vru_fcv() const;
  void set_fcf_vru_fcv(::atd::meprocess::VRUCommon_Fcf_vru_fcvType value);

  // optional int32 fcf_vru_supress_fcv = 8;
  bool has_fcf_vru_supress_fcv() const;
  void clear_fcf_vru_supress_fcv();
  static const int kFcfVruSupressFcvFieldNumber = 8;
  ::google::protobuf::int32 fcf_vru_supress_fcv() const;
  void set_fcf_vru_supress_fcv(::google::protobuf::int32 value);

  // optional bool fcf_mcp_vru_isbicycles = 6;
  bool has_fcf_mcp_vru_isbicycles() const;
  void clear_fcf_mcp_vru_isbicycles();
  static const int kFcfMcpVruIsbicyclesFieldNumber = 6;
  bool fcf_mcp_vru_isbicycles() const;
  void set_fcf_mcp_vru_isbicycles(bool value);

  // optional bool fcf_vru_curr_in_path_fcv = 9;
  bool has_fcf_vru_curr_in_path_fcv() const;
  void clear_fcf_vru_curr_in_path_fcv();
  static const int kFcfVruCurrInPathFcvFieldNumber = 9;
  bool fcf_vru_curr_in_path_fcv() const;
  void set_fcf_vru_curr_in_path_fcv(bool value);

  // optional bool fcf_vru_pred_in_path_fcv = 10;
  bool has_fcf_vru_pred_in_path_fcv() const;
  void clear_fcf_vru_pred_in_path_fcv();
  static const int kFcfVruPredInPathFcvFieldNumber = 10;
  bool fcf_vru_pred_in_path_fcv() const;
  void set_fcf_vru_pred_in_path_fcv(bool value);

  // optional int32 reserved_1 = 11;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 11;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.VRUCommon)
 private:
  void set_has_fcf_vru_zero_byte();
  void clear_has_fcf_vru_zero_byte();
  void set_has_fcf_vru_protocol_version();
  void clear_has_fcf_vru_protocol_version();
  void set_has_fcf_vru_sync_id();
  void clear_has_fcf_vru_sync_id();
  void set_has_fcf_vru_mcp_id();
  void clear_has_fcf_vru_mcp_id();
  void set_has_fcf_vru_mcp_ttc();
  void clear_has_fcf_vru_mcp_ttc();
  void set_has_fcf_mcp_vru_isbicycles();
  void clear_has_fcf_mcp_vru_isbicycles();
  void set_has_fcf_vru_fcv();
  void clear_has_fcf_vru_fcv();
  void set_has_fcf_vru_supress_fcv();
  void clear_has_fcf_vru_supress_fcv();
  void set_has_fcf_vru_curr_in_path_fcv();
  void clear_has_fcf_vru_curr_in_path_fcv();
  void set_has_fcf_vru_pred_in_path_fcv();
  void clear_has_fcf_vru_pred_in_path_fcv();
  void set_has_reserved_1();
  void clear_has_reserved_1();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 fcf_vru_zero_byte_;
  ::google::protobuf::int32 fcf_vru_protocol_version_;
  ::google::protobuf::int32 fcf_vru_sync_id_;
  ::google::protobuf::int32 fcf_vru_mcp_id_;
  float fcf_vru_mcp_ttc_;
  int fcf_vru_fcv_;
  ::google::protobuf::int32 fcf_vru_supress_fcv_;
  bool fcf_mcp_vru_isbicycles_;
  bool fcf_vru_curr_in_path_fcv_;
  bool fcf_vru_pred_in_path_fcv_;
  ::google::protobuf::int32 reserved_1_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_FCF_VRU : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_FCF_VRU) */ {
 public:
  Dt_Record_FCF_VRU();
  virtual ~Dt_Record_FCF_VRU();

  Dt_Record_FCF_VRU(const Dt_Record_FCF_VRU& from);

  inline Dt_Record_FCF_VRU& operator=(const Dt_Record_FCF_VRU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_FCF_VRU& default_instance();

  static inline const Dt_Record_FCF_VRU* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_FCF_VRU*>(
               &_Dt_Record_FCF_VRU_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Dt_Record_FCF_VRU* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_FCF_VRU* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_FCF_VRU* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_FCF_VRU& from);
  void MergeFrom(const Dt_Record_FCF_VRU& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_FCF_VRU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.FCF_VRU dt_array_6_vru = 4;
  int dt_array_6_vru_size() const;
  void clear_dt_array_6_vru();
  static const int kDtArray6VruFieldNumber = 4;
  const ::atd::meprocess::FCF_VRU& dt_array_6_vru(int index) const;
  ::atd::meprocess::FCF_VRU* mutable_dt_array_6_vru(int index);
  ::atd::meprocess::FCF_VRU* add_dt_array_6_vru();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FCF_VRU >*
      mutable_dt_array_6_vru();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FCF_VRU >&
      dt_array_6_vru() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.VRUCommon stvrucommon = 3;
  bool has_stvrucommon() const;
  void clear_stvrucommon();
  static const int kStvrucommonFieldNumber = 3;
  const ::atd::meprocess::VRUCommon& stvrucommon() const;
  ::atd::meprocess::VRUCommon* mutable_stvrucommon();
  ::atd::meprocess::VRUCommon* release_stvrucommon();
  void set_allocated_stvrucommon(::atd::meprocess::VRUCommon* stvrucommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_FCF_VRU)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stvrucommon();
  void clear_has_stvrucommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FCF_VRU > dt_array_6_vru_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::VRUCommon* stvrucommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FCF_VRU : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.FCF_VRU) */ {
 public:
  FCF_VRU();
  virtual ~FCF_VRU();

  FCF_VRU(const FCF_VRU& from);

  inline FCF_VRU& operator=(const FCF_VRU& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FCF_VRU& default_instance();

  static inline const FCF_VRU* internal_default_instance() {
    return reinterpret_cast<const FCF_VRU*>(
               &_FCF_VRU_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(FCF_VRU* other);

  // implements Message ----------------------------------------------

  inline FCF_VRU* New() const PROTOBUF_FINAL { return New(NULL); }

  FCF_VRU* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FCF_VRU& from);
  void MergeFrom(const FCF_VRU& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FCF_VRU* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FCF_VRU_Fcf_vru_alert_lType Fcf_vru_alert_lType;
  static const Fcf_vru_alert_lType NO_ALERT =
    FCF_VRU_Fcf_vru_alert_lType_NO_ALERT;
  static const Fcf_vru_alert_lType ALERT =
    FCF_VRU_Fcf_vru_alert_lType_ALERT;
  static inline bool Fcf_vru_alert_lType_IsValid(int value) {
    return FCF_VRU_Fcf_vru_alert_lType_IsValid(value);
  }
  static const Fcf_vru_alert_lType Fcf_vru_alert_lType_MIN =
    FCF_VRU_Fcf_vru_alert_lType_Fcf_vru_alert_lType_MIN;
  static const Fcf_vru_alert_lType Fcf_vru_alert_lType_MAX =
    FCF_VRU_Fcf_vru_alert_lType_Fcf_vru_alert_lType_MAX;
  static const int Fcf_vru_alert_lType_ARRAYSIZE =
    FCF_VRU_Fcf_vru_alert_lType_Fcf_vru_alert_lType_ARRAYSIZE;

  typedef FCF_VRU_Fcf_vru_supress_lType Fcf_vru_supress_lType;
  static const Fcf_vru_supress_lType MAX_SPEED =
    FCF_VRU_Fcf_vru_supress_lType_MAX_SPEED;
  static const Fcf_vru_supress_lType MIN_SPEED =
    FCF_VRU_Fcf_vru_supress_lType_MIN_SPEED;
  static const Fcf_vru_supress_lType BRAKE =
    FCF_VRU_Fcf_vru_supress_lType_BRAKE;
  static const Fcf_vru_supress_lType MAX_YAW =
    FCF_VRU_Fcf_vru_supress_lType_MAX_YAW;
  static const Fcf_vru_supress_lType REAR_GEAR =
    FCF_VRU_Fcf_vru_supress_lType_REAR_GEAR;
  static const Fcf_vru_supress_lType STEERING_ANGLE =
    FCF_VRU_Fcf_vru_supress_lType_STEERING_ANGLE;
  static const Fcf_vru_supress_lType RESERVED_1 =
    FCF_VRU_Fcf_vru_supress_lType_RESERVED_1;
  static inline bool Fcf_vru_supress_lType_IsValid(int value) {
    return FCF_VRU_Fcf_vru_supress_lType_IsValid(value);
  }
  static const Fcf_vru_supress_lType Fcf_vru_supress_lType_MIN =
    FCF_VRU_Fcf_vru_supress_lType_Fcf_vru_supress_lType_MIN;
  static const Fcf_vru_supress_lType Fcf_vru_supress_lType_MAX =
    FCF_VRU_Fcf_vru_supress_lType_Fcf_vru_supress_lType_MAX;
  static const int Fcf_vru_supress_lType_ARRAYSIZE =
    FCF_VRU_Fcf_vru_supress_lType_Fcf_vru_supress_lType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 fcf_vru_supress_l = 2;
  bool has_fcf_vru_supress_l() const;
  void clear_fcf_vru_supress_l();
  static const int kFcfVruSupressLFieldNumber = 2;
  ::google::protobuf::int32 fcf_vru_supress_l() const;
  void set_fcf_vru_supress_l(::google::protobuf::int32 value);

  // optional float fcf_vru_ttc_thresh_l = 3;
  bool has_fcf_vru_ttc_thresh_l() const;
  void clear_fcf_vru_ttc_thresh_l();
  static const int kFcfVruTtcThreshLFieldNumber = 3;
  float fcf_vru_ttc_thresh_l() const;
  void set_fcf_vru_ttc_thresh_l(float value);

  // optional bool fcf_vru_curr_in_path_l = 4;
  bool has_fcf_vru_curr_in_path_l() const;
  void clear_fcf_vru_curr_in_path_l();
  static const int kFcfVruCurrInPathLFieldNumber = 4;
  bool fcf_vru_curr_in_path_l() const;
  void set_fcf_vru_curr_in_path_l(bool value);

  // optional bool fcf_vru_pred_in_path_l = 5;
  bool has_fcf_vru_pred_in_path_l() const;
  void clear_fcf_vru_pred_in_path_l();
  static const int kFcfVruPredInPathLFieldNumber = 5;
  bool fcf_vru_pred_in_path_l() const;
  void set_fcf_vru_pred_in_path_l(bool value);

  // optional float fcf_vru_buffer_l = 6;
  bool has_fcf_vru_buffer_l() const;
  void clear_fcf_vru_buffer_l();
  static const int kFcfVruBufferLFieldNumber = 6;
  float fcf_vru_buffer_l() const;
  void set_fcf_vru_buffer_l(float value);

  // optional .atd.meprocess.FCF_VRU.Fcf_vru_alert_lType fcf_vru_alert_l = 1;
  bool has_fcf_vru_alert_l() const;
  void clear_fcf_vru_alert_l();
  static const int kFcfVruAlertLFieldNumber = 1;
  ::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType fcf_vru_alert_l() const;
  void set_fcf_vru_alert_l(::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.FCF_VRU)
 private:
  void set_has_fcf_vru_alert_l();
  void clear_has_fcf_vru_alert_l();
  void set_has_fcf_vru_supress_l();
  void clear_has_fcf_vru_supress_l();
  void set_has_fcf_vru_ttc_thresh_l();
  void clear_has_fcf_vru_ttc_thresh_l();
  void set_has_fcf_vru_curr_in_path_l();
  void clear_has_fcf_vru_curr_in_path_l();
  void set_has_fcf_vru_pred_in_path_l();
  void clear_has_fcf_vru_pred_in_path_l();
  void set_has_fcf_vru_buffer_l();
  void clear_has_fcf_vru_buffer_l();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 fcf_vru_supress_l_;
  float fcf_vru_ttc_thresh_l_;
  bool fcf_vru_curr_in_path_l_;
  bool fcf_vru_pred_in_path_l_;
  float fcf_vru_buffer_l_;
  int fcf_vru_alert_l_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_FailSafe : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_FailSafe) */ {
 public:
  Dt_Record_FailSafe();
  virtual ~Dt_Record_FailSafe();

  Dt_Record_FailSafe(const Dt_Record_FailSafe& from);

  inline Dt_Record_FailSafe& operator=(const Dt_Record_FailSafe& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_FailSafe& default_instance();

  static inline const Dt_Record_FailSafe* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_FailSafe*>(
               &_Dt_Record_FailSafe_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(Dt_Record_FailSafe* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_FailSafe* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_FailSafe* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_FailSafe& from);
  void MergeFrom(const Dt_Record_FailSafe& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_FailSafe* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Dt_Record_FailSafe_Fs_impacted_technologiesType Fs_impacted_technologiesType;
  static const Fs_impacted_technologiesType ACC =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_ACC;
  static const Fs_impacted_technologiesType RESERVED_1 =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_1;
  static const Fs_impacted_technologiesType RESERVED_2 =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_2;
  static const Fs_impacted_technologiesType RESERVED_3 =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_3;
  static const Fs_impacted_technologiesType RESERVED_4 =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_4;
  static const Fs_impacted_technologiesType RESERVED_5 =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_5;
  static const Fs_impacted_technologiesType RESERVED_6 =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_6;
  static const Fs_impacted_technologiesType RESERVED_7 =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RESERVED_7;
  static const Fs_impacted_technologiesType TSR =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_TSR;
  static const Fs_impacted_technologiesType FLA =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_FLA;
  static const Fs_impacted_technologiesType PED =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_PED;
  static const Fs_impacted_technologiesType LD =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_LD;
  static const Fs_impacted_technologiesType VD =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_VD;
  static const Fs_impacted_technologiesType RPE =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_RPE;
  static const Fs_impacted_technologiesType FREE_SPACE =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_FREE_SPACE;
  static const Fs_impacted_technologiesType HEATER =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_HEATER;
  static inline bool Fs_impacted_technologiesType_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_impacted_technologiesType_IsValid(value);
  }
  static const Fs_impacted_technologiesType Fs_impacted_technologiesType_MIN =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_Fs_impacted_technologiesType_MIN;
  static const Fs_impacted_technologiesType Fs_impacted_technologiesType_MAX =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_Fs_impacted_technologiesType_MAX;
  static const int Fs_impacted_technologiesType_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_impacted_technologiesType_Fs_impacted_technologiesType_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_rain_0Type Fs_rain_0Type;
  static const Fs_rain_0Type NOT_READY =
    Dt_Record_FailSafe_Fs_rain_0Type_NOT_READY;
  static const Fs_rain_0Type NONE =
    Dt_Record_FailSafe_Fs_rain_0Type_NONE;
  static const Fs_rain_0Type Fs_rain_0Type_25 =
    Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_25;
  static const Fs_rain_0Type Fs_rain_0Type_50 =
    Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_50;
  static const Fs_rain_0Type Fs_rain_0Type_75 =
    Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_75;
  static const Fs_rain_0Type Fs_rain_0Type_99 =
    Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_99;
  static inline bool Fs_rain_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_rain_0Type_IsValid(value);
  }
  static const Fs_rain_0Type Fs_rain_0Type_MIN =
    Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_MIN;
  static const Fs_rain_0Type Fs_rain_0Type_MAX =
    Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_MAX;
  static const int Fs_rain_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_rain_0Type_Fs_rain_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_fog_0Type Fs_fog_0Type;
  static const Fs_fog_0Type FS_Fog_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_NOT_READY_;
  static const Fs_fog_0Type FS_Fog_0_NONE_ =
    Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_NONE_;
  static const Fs_fog_0Type FS_Fog_0_25_ =
    Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_25_;
  static const Fs_fog_0Type FS_Fog_0_50_ =
    Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_50_;
  static const Fs_fog_0Type FS_Fog_0_75_ =
    Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_75_;
  static const Fs_fog_0Type FS_Fog_0_99_ =
    Dt_Record_FailSafe_Fs_fog_0Type_FS_Fog_0_99_;
  static inline bool Fs_fog_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_fog_0Type_IsValid(value);
  }
  static const Fs_fog_0Type Fs_fog_0Type_MIN =
    Dt_Record_FailSafe_Fs_fog_0Type_Fs_fog_0Type_MIN;
  static const Fs_fog_0Type Fs_fog_0Type_MAX =
    Dt_Record_FailSafe_Fs_fog_0Type_Fs_fog_0Type_MAX;
  static const int Fs_fog_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_fog_0Type_Fs_fog_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_splashes_0Type Fs_splashes_0Type;
  static const Fs_splashes_0Type FS_Splashes_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_NOT_READY_;
  static const Fs_splashes_0Type FS_Splashes_0_NONE_ =
    Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_NONE_;
  static const Fs_splashes_0Type FS_Splashes_0_25_ =
    Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_25_;
  static const Fs_splashes_0Type FS_Splashes_0_50_ =
    Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_50_;
  static const Fs_splashes_0Type FS_Splashes_0_75_ =
    Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_75_;
  static const Fs_splashes_0Type FS_Splashes_0_99_ =
    Dt_Record_FailSafe_Fs_splashes_0Type_FS_Splashes_0_99_;
  static inline bool Fs_splashes_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_splashes_0Type_IsValid(value);
  }
  static const Fs_splashes_0Type Fs_splashes_0Type_MIN =
    Dt_Record_FailSafe_Fs_splashes_0Type_Fs_splashes_0Type_MIN;
  static const Fs_splashes_0Type Fs_splashes_0Type_MAX =
    Dt_Record_FailSafe_Fs_splashes_0Type_Fs_splashes_0Type_MAX;
  static const int Fs_splashes_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_splashes_0Type_Fs_splashes_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_self_glare_0Type Fs_self_glare_0Type;
  static const Fs_self_glare_0Type FS_Self_Glare_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_NOT_READY_;
  static const Fs_self_glare_0Type FS_Self_Glare_0_NONE_ =
    Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_NONE_;
  static const Fs_self_glare_0Type FS_Self_Glare_0_25_ =
    Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_25_;
  static const Fs_self_glare_0Type FS_Self_Glare_0_50_ =
    Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_50_;
  static const Fs_self_glare_0Type FS_Self_Glare_0_75_ =
    Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_75_;
  static const Fs_self_glare_0Type FS_Self_Glare_0_99_ =
    Dt_Record_FailSafe_Fs_self_glare_0Type_FS_Self_Glare_0_99_;
  static inline bool Fs_self_glare_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_self_glare_0Type_IsValid(value);
  }
  static const Fs_self_glare_0Type Fs_self_glare_0Type_MIN =
    Dt_Record_FailSafe_Fs_self_glare_0Type_Fs_self_glare_0Type_MIN;
  static const Fs_self_glare_0Type Fs_self_glare_0Type_MAX =
    Dt_Record_FailSafe_Fs_self_glare_0Type_Fs_self_glare_0Type_MAX;
  static const int Fs_self_glare_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_self_glare_0Type_Fs_self_glare_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_sun_ray_0Type Fs_sun_ray_0Type;
  static const Fs_sun_ray_0Type FS_Sun_Ray_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_NOT_READY_;
  static const Fs_sun_ray_0Type FS_Sun_Ray_0_NONE_ =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_NONE_;
  static const Fs_sun_ray_0Type FS_Sun_Ray_0_25_ =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_25_;
  static const Fs_sun_ray_0Type FS_Sun_Ray_0_50_ =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_50_;
  static const Fs_sun_ray_0Type FS_Sun_Ray_0_75_ =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_75_;
  static const Fs_sun_ray_0Type FS_Sun_Ray_0_99_ =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_FS_Sun_Ray_0_99_;
  static inline bool Fs_sun_ray_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_sun_ray_0Type_IsValid(value);
  }
  static const Fs_sun_ray_0Type Fs_sun_ray_0Type_MIN =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_Fs_sun_ray_0Type_MIN;
  static const Fs_sun_ray_0Type Fs_sun_ray_0Type_MAX =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_Fs_sun_ray_0Type_MAX;
  static const int Fs_sun_ray_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_sun_ray_0Type_Fs_sun_ray_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_low_sun_0Type Fs_low_sun_0Type;
  static const Fs_low_sun_0Type FS_Low_Sun_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_NOT_READY_;
  static const Fs_low_sun_0Type FS_Low_Sun_0_NONE_ =
    Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_NONE_;
  static const Fs_low_sun_0Type FS_Low_Sun_0_25_ =
    Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_25_;
  static const Fs_low_sun_0Type FS_Low_Sun_0_50_ =
    Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_50_;
  static const Fs_low_sun_0Type FS_Low_Sun_0_75_ =
    Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_75_;
  static const Fs_low_sun_0Type FS_Low_Sun_0_99_ =
    Dt_Record_FailSafe_Fs_low_sun_0Type_FS_Low_Sun_0_99_;
  static inline bool Fs_low_sun_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_low_sun_0Type_IsValid(value);
  }
  static const Fs_low_sun_0Type Fs_low_sun_0Type_MIN =
    Dt_Record_FailSafe_Fs_low_sun_0Type_Fs_low_sun_0Type_MIN;
  static const Fs_low_sun_0Type Fs_low_sun_0Type_MAX =
    Dt_Record_FailSafe_Fs_low_sun_0Type_Fs_low_sun_0Type_MAX;
  static const int Fs_low_sun_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_low_sun_0Type_Fs_low_sun_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_blur_image_0Type Fs_blur_image_0Type;
  static const Fs_blur_image_0Type FS_Blur_Image_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_NOT_READY_;
  static const Fs_blur_image_0Type FS_Blur_Image_0_NONE_ =
    Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_NONE_;
  static const Fs_blur_image_0Type FS_Blur_Image_0_25_ =
    Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_25_;
  static const Fs_blur_image_0Type FS_Blur_Image_0_50_ =
    Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_50_;
  static const Fs_blur_image_0Type FS_Blur_Image_0_75_ =
    Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_75_;
  static const Fs_blur_image_0Type FS_Blur_Image_0_99_ =
    Dt_Record_FailSafe_Fs_blur_image_0Type_FS_Blur_Image_0_99_;
  static inline bool Fs_blur_image_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_blur_image_0Type_IsValid(value);
  }
  static const Fs_blur_image_0Type Fs_blur_image_0Type_MIN =
    Dt_Record_FailSafe_Fs_blur_image_0Type_Fs_blur_image_0Type_MIN;
  static const Fs_blur_image_0Type Fs_blur_image_0Type_MAX =
    Dt_Record_FailSafe_Fs_blur_image_0Type_Fs_blur_image_0Type_MAX;
  static const int Fs_blur_image_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_blur_image_0Type_Fs_blur_image_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_partial_blockage_0Type Fs_partial_blockage_0Type;
  static const Fs_partial_blockage_0Type FS_Partial_Blockage_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_NOT_READY_;
  static const Fs_partial_blockage_0Type FS_Partial_Blockage_0_NONE_ =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_NONE_;
  static const Fs_partial_blockage_0Type FS_Partial_Blockage_0_25_ =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_25_;
  static const Fs_partial_blockage_0Type FS_Partial_Blockage_0_50_ =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_50_;
  static const Fs_partial_blockage_0Type FS_Partial_Blockage_0_75_ =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_75_;
  static const Fs_partial_blockage_0Type FS_Partial_Blockage_0_99_ =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_FS_Partial_Blockage_0_99_;
  static inline bool Fs_partial_blockage_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_partial_blockage_0Type_IsValid(value);
  }
  static const Fs_partial_blockage_0Type Fs_partial_blockage_0Type_MIN =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_Fs_partial_blockage_0Type_MIN;
  static const Fs_partial_blockage_0Type Fs_partial_blockage_0Type_MAX =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_Fs_partial_blockage_0Type_MAX;
  static const int Fs_partial_blockage_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_partial_blockage_0Type_Fs_partial_blockage_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_full_blockage_0Type Fs_full_blockage_0Type;
  static const Fs_full_blockage_0Type FS_Full_Blockage_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_NOT_READY_;
  static const Fs_full_blockage_0Type FS_Full_Blockage_0_NONE_ =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_NONE_;
  static const Fs_full_blockage_0Type FS_Full_Blockage_0_25_ =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_25_;
  static const Fs_full_blockage_0Type FS_Full_Blockage_0_50_ =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_50_;
  static const Fs_full_blockage_0Type FS_Full_Blockage_0_75_ =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_75_;
  static const Fs_full_blockage_0Type FS_Full_Blockage_0_99_ =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_FS_Full_Blockage_0_99_;
  static inline bool Fs_full_blockage_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_full_blockage_0Type_IsValid(value);
  }
  static const Fs_full_blockage_0Type Fs_full_blockage_0Type_MIN =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_Fs_full_blockage_0Type_MIN;
  static const Fs_full_blockage_0Type Fs_full_blockage_0Type_MAX =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_Fs_full_blockage_0Type_MAX;
  static const int Fs_full_blockage_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_full_blockage_0Type_Fs_full_blockage_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_frozen_windshield_0Type Fs_frozen_windshield_0Type;
  static const Fs_frozen_windshield_0Type FS_Frozen_Windshield_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_NOT_READY_;
  static const Fs_frozen_windshield_0Type FS_Frozen_Windshield_0_NONE_ =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_NONE_;
  static const Fs_frozen_windshield_0Type FS_Frozen_Windshield_0_25_ =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_25_;
  static const Fs_frozen_windshield_0Type FS_Frozen_Windshield_0_50_ =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_50_;
  static const Fs_frozen_windshield_0Type FS_Frozen_Windshield_0_75_ =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_75_;
  static const Fs_frozen_windshield_0Type FS_Frozen_Windshield_0_99_ =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_FS_Frozen_Windshield_0_99_;
  static inline bool Fs_frozen_windshield_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_frozen_windshield_0Type_IsValid(value);
  }
  static const Fs_frozen_windshield_0Type Fs_frozen_windshield_0Type_MIN =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_Fs_frozen_windshield_0Type_MIN;
  static const Fs_frozen_windshield_0Type Fs_frozen_windshield_0Type_MAX =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_Fs_frozen_windshield_0Type_MAX;
  static const int Fs_frozen_windshield_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_frozen_windshield_0Type_Fs_frozen_windshield_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_out_of_calib_0Type Fs_out_of_calib_0Type;
  static const Fs_out_of_calib_0Type FS_Out_Of_Calib_0_NOT_READY_ =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_NOT_READY_;
  static const Fs_out_of_calib_0Type FS_Out_Of_Calib_0_NONE_ =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_NONE_;
  static const Fs_out_of_calib_0Type FS_Out_Of_Calib_0_25_ =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_25_;
  static const Fs_out_of_calib_0Type FS_Out_Of_Calib_0_50_ =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_50_;
  static const Fs_out_of_calib_0Type FS_Out_Of_Calib_0_75_ =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_75_;
  static const Fs_out_of_calib_0Type FS_Out_Of_Calib_0_99_ =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_FS_Out_Of_Calib_0_99_;
  static inline bool Fs_out_of_calib_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_out_of_calib_0Type_IsValid(value);
  }
  static const Fs_out_of_calib_0Type Fs_out_of_calib_0Type_MIN =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_Fs_out_of_calib_0Type_MIN;
  static const Fs_out_of_calib_0Type Fs_out_of_calib_0Type_MAX =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_Fs_out_of_calib_0Type_MAX;
  static const int Fs_out_of_calib_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_out_of_calib_0Type_Fs_out_of_calib_0Type_ARRAYSIZE;

  typedef Dt_Record_FailSafe_Fs_out_of_focus_0Type Fs_out_of_focus_0Type;
  static const Fs_out_of_focus_0Type FS_Out_Of_Focus_0_NONE_ =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_FS_Out_Of_Focus_0_NONE_;
  static const Fs_out_of_focus_0Type TSR_OUT_OF_CALIB =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB;
  static const Fs_out_of_focus_0Type TSR_OUT_OF_CALIB_AEB =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB_AEB;
  static const Fs_out_of_focus_0Type TSR_OUT_OF_CALIB_YAW =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB_YAW;
  static const Fs_out_of_focus_0Type TSR_OUT_OF_CALIB_HORIZON =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_TSR_OUT_OF_CALIB_HORIZON;
  static inline bool Fs_out_of_focus_0Type_IsValid(int value) {
    return Dt_Record_FailSafe_Fs_out_of_focus_0Type_IsValid(value);
  }
  static const Fs_out_of_focus_0Type Fs_out_of_focus_0Type_MIN =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_Fs_out_of_focus_0Type_MIN;
  static const Fs_out_of_focus_0Type Fs_out_of_focus_0Type_MAX =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_Fs_out_of_focus_0Type_MAX;
  static const int Fs_out_of_focus_0Type_ARRAYSIZE =
    Dt_Record_FailSafe_Fs_out_of_focus_0Type_Fs_out_of_focus_0Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 21;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 21;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 22;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 22;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional int32 fs_zero_byte = 1;
  bool has_fs_zero_byte() const;
  void clear_fs_zero_byte();
  static const int kFsZeroByteFieldNumber = 1;
  ::google::protobuf::int32 fs_zero_byte() const;
  void set_fs_zero_byte(::google::protobuf::int32 value);

  // optional int32 fs_protocol_version = 2;
  bool has_fs_protocol_version() const;
  void clear_fs_protocol_version();
  static const int kFsProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 fs_protocol_version() const;
  void set_fs_protocol_version(::google::protobuf::int32 value);

  // optional int32 fs_sync_id = 3;
  bool has_fs_sync_id() const;
  void clear_fs_sync_id();
  static const int kFsSyncIdFieldNumber = 3;
  ::google::protobuf::int32 fs_sync_id() const;
  void set_fs_sync_id(::google::protobuf::int32 value);

  // optional int32 fs_cameras_number = 4;
  bool has_fs_cameras_number() const;
  void clear_fs_cameras_number();
  static const int kFsCamerasNumberFieldNumber = 4;
  ::google::protobuf::int32 fs_cameras_number() const;
  void set_fs_cameras_number(::google::protobuf::int32 value);

  // optional int32 reserved_1 = 5;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 5;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional int32 fs_impacted_technologies = 6;
  bool has_fs_impacted_technologies() const;
  void clear_fs_impacted_technologies();
  static const int kFsImpactedTechnologiesFieldNumber = 6;
  ::google::protobuf::int32 fs_impacted_technologies() const;
  void set_fs_impacted_technologies(::google::protobuf::int32 value);

  // optional int32 fs_camera_id_0 = 7;
  bool has_fs_camera_id_0() const;
  void clear_fs_camera_id_0();
  static const int kFsCameraId0FieldNumber = 7;
  ::google::protobuf::int32 fs_camera_id_0() const;
  void set_fs_camera_id_0(::google::protobuf::int32 value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_rain_0Type fs_rain_0 = 8;
  bool has_fs_rain_0() const;
  void clear_fs_rain_0();
  static const int kFsRain0FieldNumber = 8;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type fs_rain_0() const;
  void set_fs_rain_0(::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_fog_0Type fs_fog_0 = 9;
  bool has_fs_fog_0() const;
  void clear_fs_fog_0();
  static const int kFsFog0FieldNumber = 9;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type fs_fog_0() const;
  void set_fs_fog_0(::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_splashes_0Type fs_splashes_0 = 10;
  bool has_fs_splashes_0() const;
  void clear_fs_splashes_0();
  static const int kFsSplashes0FieldNumber = 10;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type fs_splashes_0() const;
  void set_fs_splashes_0(::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_self_glare_0Type fs_self_glare_0 = 11;
  bool has_fs_self_glare_0() const;
  void clear_fs_self_glare_0();
  static const int kFsSelfGlare0FieldNumber = 11;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type fs_self_glare_0() const;
  void set_fs_self_glare_0(::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_sun_ray_0Type fs_sun_ray_0 = 12;
  bool has_fs_sun_ray_0() const;
  void clear_fs_sun_ray_0();
  static const int kFsSunRay0FieldNumber = 12;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type fs_sun_ray_0() const;
  void set_fs_sun_ray_0(::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_low_sun_0Type fs_low_sun_0 = 13;
  bool has_fs_low_sun_0() const;
  void clear_fs_low_sun_0();
  static const int kFsLowSun0FieldNumber = 13;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type fs_low_sun_0() const;
  void set_fs_low_sun_0(::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_blur_image_0Type fs_blur_image_0 = 14;
  bool has_fs_blur_image_0() const;
  void clear_fs_blur_image_0();
  static const int kFsBlurImage0FieldNumber = 14;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type fs_blur_image_0() const;
  void set_fs_blur_image_0(::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_partial_blockage_0Type fs_partial_blockage_0 = 15;
  bool has_fs_partial_blockage_0() const;
  void clear_fs_partial_blockage_0();
  static const int kFsPartialBlockage0FieldNumber = 15;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type fs_partial_blockage_0() const;
  void set_fs_partial_blockage_0(::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_full_blockage_0Type fs_full_blockage_0 = 16;
  bool has_fs_full_blockage_0() const;
  void clear_fs_full_blockage_0();
  static const int kFsFullBlockage0FieldNumber = 16;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type fs_full_blockage_0() const;
  void set_fs_full_blockage_0(::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_frozen_windshield_0Type fs_frozen_windshield_0 = 17;
  bool has_fs_frozen_windshield_0() const;
  void clear_fs_frozen_windshield_0();
  static const int kFsFrozenWindshield0FieldNumber = 17;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type fs_frozen_windshield_0() const;
  void set_fs_frozen_windshield_0(::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type value);

  // optional .atd.meprocess.Dt_Record_FailSafe.Fs_out_of_calib_0Type fs_out_of_calib_0 = 18;
  bool has_fs_out_of_calib_0() const;
  void clear_fs_out_of_calib_0();
  static const int kFsOutOfCalib0FieldNumber = 18;
  ::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type fs_out_of_calib_0() const;
  void set_fs_out_of_calib_0(::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type value);

  // optional int32 fs_out_of_focus_0 = 19;
  bool has_fs_out_of_focus_0() const;
  void clear_fs_out_of_focus_0();
  static const int kFsOutOfFocus0FieldNumber = 19;
  ::google::protobuf::int32 fs_out_of_focus_0() const;
  void set_fs_out_of_focus_0(::google::protobuf::int32 value);

  // optional int32 reserved_2 = 20;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 20;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_FailSafe)
 private:
  void set_has_fs_zero_byte();
  void clear_has_fs_zero_byte();
  void set_has_fs_protocol_version();
  void clear_has_fs_protocol_version();
  void set_has_fs_sync_id();
  void clear_has_fs_sync_id();
  void set_has_fs_cameras_number();
  void clear_has_fs_cameras_number();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_fs_impacted_technologies();
  void clear_has_fs_impacted_technologies();
  void set_has_fs_camera_id_0();
  void clear_has_fs_camera_id_0();
  void set_has_fs_rain_0();
  void clear_has_fs_rain_0();
  void set_has_fs_fog_0();
  void clear_has_fs_fog_0();
  void set_has_fs_splashes_0();
  void clear_has_fs_splashes_0();
  void set_has_fs_self_glare_0();
  void clear_has_fs_self_glare_0();
  void set_has_fs_sun_ray_0();
  void clear_has_fs_sun_ray_0();
  void set_has_fs_low_sun_0();
  void clear_has_fs_low_sun_0();
  void set_has_fs_blur_image_0();
  void clear_has_fs_blur_image_0();
  void set_has_fs_partial_blockage_0();
  void clear_has_fs_partial_blockage_0();
  void set_has_fs_full_blockage_0();
  void clear_has_fs_full_blockage_0();
  void set_has_fs_frozen_windshield_0();
  void clear_has_fs_frozen_windshield_0();
  void set_has_fs_out_of_calib_0();
  void clear_has_fs_out_of_calib_0();
  void set_has_fs_out_of_focus_0();
  void clear_has_fs_out_of_focus_0();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::google::protobuf::int32 fs_zero_byte_;
  ::google::protobuf::int32 fs_protocol_version_;
  ::google::protobuf::int32 fs_sync_id_;
  ::google::protobuf::int32 fs_cameras_number_;
  ::google::protobuf::int32 reserved_1_;
  ::google::protobuf::int32 fs_impacted_technologies_;
  ::google::protobuf::int32 fs_camera_id_0_;
  int fs_rain_0_;
  int fs_fog_0_;
  int fs_splashes_0_;
  int fs_self_glare_0_;
  int fs_sun_ray_0_;
  int fs_low_sun_0_;
  int fs_blur_image_0_;
  int fs_partial_blockage_0_;
  int fs_full_blockage_0_;
  int fs_frozen_windshield_0_;
  int fs_out_of_calib_0_;
  ::google::protobuf::int32 fs_out_of_focus_0_;
  ::google::protobuf::int32 reserved_2_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FSPCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.FSPCommon) */ {
 public:
  FSPCommon();
  virtual ~FSPCommon();

  FSPCommon(const FSPCommon& from);

  inline FSPCommon& operator=(const FSPCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FSPCommon& default_instance();

  static inline const FSPCommon* internal_default_instance() {
    return reinterpret_cast<const FSPCommon*>(
               &_FSPCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(FSPCommon* other);

  // implements Message ----------------------------------------------

  inline FSPCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  FSPCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FSPCommon& from);
  void MergeFrom(const FSPCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FSPCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 fsp_zero_byte = 1;
  bool has_fsp_zero_byte() const;
  void clear_fsp_zero_byte();
  static const int kFspZeroByteFieldNumber = 1;
  ::google::protobuf::int32 fsp_zero_byte() const;
  void set_fsp_zero_byte(::google::protobuf::int32 value);

  // optional int32 fsp_protocol_version = 2;
  bool has_fsp_protocol_version() const;
  void clear_fsp_protocol_version();
  static const int kFspProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 fsp_protocol_version() const;
  void set_fsp_protocol_version(::google::protobuf::int32 value);

  // optional int32 fsp_sync_id = 3;
  bool has_fsp_sync_id() const;
  void clear_fsp_sync_id();
  static const int kFspSyncIdFieldNumber = 3;
  ::google::protobuf::int32 fsp_sync_id() const;
  void set_fsp_sync_id(::google::protobuf::int32 value);

  // optional int32 fsp_num_of_obstacles = 4;
  bool has_fsp_num_of_obstacles() const;
  void clear_fsp_num_of_obstacles();
  static const int kFspNumOfObstaclesFieldNumber = 4;
  ::google::protobuf::int32 fsp_num_of_obstacles() const;
  void set_fsp_num_of_obstacles(::google::protobuf::int32 value);

  // optional bool reserved_1 = 5;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 5;
  bool reserved_1() const;
  void set_reserved_1(bool value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.FSPCommon)
 private:
  void set_has_fsp_zero_byte();
  void clear_has_fsp_zero_byte();
  void set_has_fsp_protocol_version();
  void clear_has_fsp_protocol_version();
  void set_has_fsp_sync_id();
  void clear_has_fsp_sync_id();
  void set_has_fsp_num_of_obstacles();
  void clear_has_fsp_num_of_obstacles();
  void set_has_reserved_1();
  void clear_has_reserved_1();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 fsp_zero_byte_;
  ::google::protobuf::int32 fsp_protocol_version_;
  ::google::protobuf::int32 fsp_sync_id_;
  ::google::protobuf::int32 fsp_num_of_obstacles_;
  bool reserved_1_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_MeFreeSpace : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_MeFreeSpace) */ {
 public:
  Dt_Record_MeFreeSpace();
  virtual ~Dt_Record_MeFreeSpace();

  Dt_Record_MeFreeSpace(const Dt_Record_MeFreeSpace& from);

  inline Dt_Record_MeFreeSpace& operator=(const Dt_Record_MeFreeSpace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_MeFreeSpace& default_instance();

  static inline const Dt_Record_MeFreeSpace* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_MeFreeSpace*>(
               &_Dt_Record_MeFreeSpace_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Dt_Record_MeFreeSpace* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_MeFreeSpace* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_MeFreeSpace* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_MeFreeSpace& from);
  void MergeFrom(const Dt_Record_MeFreeSpace& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_MeFreeSpace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.FSPoint dt_array_120_fspoint = 4;
  int dt_array_120_fspoint_size() const;
  void clear_dt_array_120_fspoint();
  static const int kDtArray120FspointFieldNumber = 4;
  const ::atd::meprocess::FSPoint& dt_array_120_fspoint(int index) const;
  ::atd::meprocess::FSPoint* mutable_dt_array_120_fspoint(int index);
  ::atd::meprocess::FSPoint* add_dt_array_120_fspoint();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FSPoint >*
      mutable_dt_array_120_fspoint();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FSPoint >&
      dt_array_120_fspoint() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.FSPCommon stfspcommon = 3;
  bool has_stfspcommon() const;
  void clear_stfspcommon();
  static const int kStfspcommonFieldNumber = 3;
  const ::atd::meprocess::FSPCommon& stfspcommon() const;
  ::atd::meprocess::FSPCommon* mutable_stfspcommon();
  ::atd::meprocess::FSPCommon* release_stfspcommon();
  void set_allocated_stfspcommon(::atd::meprocess::FSPCommon* stfspcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_MeFreeSpace)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stfspcommon();
  void clear_has_stfspcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FSPoint > dt_array_120_fspoint_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::FSPCommon* stfspcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class FSPoint : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.FSPoint) */ {
 public:
  FSPoint();
  virtual ~FSPoint();

  FSPoint(const FSPoint& from);

  inline FSPoint& operator=(const FSPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FSPoint& default_instance();

  static inline const FSPoint* internal_default_instance() {
    return reinterpret_cast<const FSPoint*>(
               &_FSPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(FSPoint* other);

  // implements Message ----------------------------------------------

  inline FSPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  FSPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FSPoint& from);
  void MergeFrom(const FSPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FSPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef FSPoint_Fsp_mobility_statusType Fsp_mobility_statusType;
  static const Fsp_mobility_statusType NA_x000D_ =
    FSPoint_Fsp_mobility_statusType_NA_x000D_;
  static const Fsp_mobility_statusType MOVING_x000D_ =
    FSPoint_Fsp_mobility_statusType_MOVING_x000D_;
  static const Fsp_mobility_statusType NON_MOVING_x000D_ =
    FSPoint_Fsp_mobility_statusType_NON_MOVING_x000D_;
  static const Fsp_mobility_statusType NEVER_MOVED =
    FSPoint_Fsp_mobility_statusType_NEVER_MOVED;
  static inline bool Fsp_mobility_statusType_IsValid(int value) {
    return FSPoint_Fsp_mobility_statusType_IsValid(value);
  }
  static const Fsp_mobility_statusType Fsp_mobility_statusType_MIN =
    FSPoint_Fsp_mobility_statusType_Fsp_mobility_statusType_MIN;
  static const Fsp_mobility_statusType Fsp_mobility_statusType_MAX =
    FSPoint_Fsp_mobility_statusType_Fsp_mobility_statusType_MAX;
  static const int Fsp_mobility_statusType_ARRAYSIZE =
    FSPoint_Fsp_mobility_statusType_Fsp_mobility_statusType_ARRAYSIZE;

  typedef FSPoint_Fsp_classification_typeType Fsp_classification_typeType;
  static const Fsp_classification_typeType NOT_AVAILABLE_x000D_ =
    FSPoint_Fsp_classification_typeType_NOT_AVAILABLE_x000D_;
  static const Fsp_classification_typeType ELEVATED_ROAD_STRUCTURE_x000D_ =
    FSPoint_Fsp_classification_typeType_ELEVATED_ROAD_STRUCTURE_x000D_;
  static const Fsp_classification_typeType CURB_x000D_ =
    FSPoint_Fsp_classification_typeType_CURB_x000D_;
  static const Fsp_classification_typeType NON_ELEVATED_ROAD_EDGE_x000D_ =
    FSPoint_Fsp_classification_typeType_NON_ELEVATED_ROAD_EDGE_x000D_;
  static const Fsp_classification_typeType NO_OBSTACLE_UP_TO_VISIBILITY_x000D_ =
    FSPoint_Fsp_classification_typeType_NO_OBSTACLE_UP_TO_VISIBILITY_x000D_;
  static const Fsp_classification_typeType UNKNOWN =
    FSPoint_Fsp_classification_typeType_UNKNOWN;
  static inline bool Fsp_classification_typeType_IsValid(int value) {
    return FSPoint_Fsp_classification_typeType_IsValid(value);
  }
  static const Fsp_classification_typeType Fsp_classification_typeType_MIN =
    FSPoint_Fsp_classification_typeType_Fsp_classification_typeType_MIN;
  static const Fsp_classification_typeType Fsp_classification_typeType_MAX =
    FSPoint_Fsp_classification_typeType_Fsp_classification_typeType_MAX;
  static const int Fsp_classification_typeType_ARRAYSIZE =
    FSPoint_Fsp_classification_typeType_Fsp_classification_typeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 fsp_id = 1;
  bool has_fsp_id() const;
  void clear_fsp_id();
  static const int kFspIdFieldNumber = 1;
  ::google::protobuf::int32 fsp_id() const;
  void set_fsp_id(::google::protobuf::int32 value);

  // optional bool fsp_is_valid = 2;
  bool has_fsp_is_valid() const;
  void clear_fsp_is_valid();
  static const int kFspIsValidFieldNumber = 2;
  bool fsp_is_valid() const;
  void set_fsp_is_valid(bool value);

  // optional float fsp_existence_prob = 3;
  bool has_fsp_existence_prob() const;
  void clear_fsp_existence_prob();
  static const int kFspExistenceProbFieldNumber = 3;
  float fsp_existence_prob() const;
  void set_fsp_existence_prob(float value);

  // optional float fsp_emptiness_prob = 4;
  bool has_fsp_emptiness_prob() const;
  void clear_fsp_emptiness_prob();
  static const int kFspEmptinessProbFieldNumber = 4;
  float fsp_emptiness_prob() const;
  void set_fsp_emptiness_prob(float value);

  // optional .atd.meprocess.FSPoint.Fsp_mobility_statusType fsp_mobility_status = 5;
  bool has_fsp_mobility_status() const;
  void clear_fsp_mobility_status();
  static const int kFspMobilityStatusFieldNumber = 5;
  ::atd::meprocess::FSPoint_Fsp_mobility_statusType fsp_mobility_status() const;
  void set_fsp_mobility_status(::atd::meprocess::FSPoint_Fsp_mobility_statusType value);

  // optional .atd.meprocess.FSPoint.Fsp_classification_typeType fsp_classification_type = 6;
  bool has_fsp_classification_type() const;
  void clear_fsp_classification_type();
  static const int kFspClassificationTypeFieldNumber = 6;
  ::atd::meprocess::FSPoint_Fsp_classification_typeType fsp_classification_type() const;
  void set_fsp_classification_type(::atd::meprocess::FSPoint_Fsp_classification_typeType value);

  // optional float fsp_range_std = 7;
  bool has_fsp_range_std() const;
  void clear_fsp_range_std();
  static const int kFspRangeStdFieldNumber = 7;
  float fsp_range_std() const;
  void set_fsp_range_std(float value);

  // optional float fsp_range = 8;
  bool has_fsp_range() const;
  void clear_fsp_range();
  static const int kFspRangeFieldNumber = 8;
  float fsp_range() const;
  void set_fsp_range(float value);

  // optional float fsp_height = 9;
  bool has_fsp_height() const;
  void clear_fsp_height();
  static const int kFspHeightFieldNumber = 9;
  float fsp_height() const;
  void set_fsp_height(float value);

  // optional float fsp_height_std = 10;
  bool has_fsp_height_std() const;
  void clear_fsp_height_std();
  static const int kFspHeightStdFieldNumber = 10;
  float fsp_height_std() const;
  void set_fsp_height_std(float value);

  // optional int32 reserved_2 = 11;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 11;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional float fsp_azimuth_angle = 12;
  bool has_fsp_azimuth_angle() const;
  void clear_fsp_azimuth_angle();
  static const int kFspAzimuthAngleFieldNumber = 12;
  float fsp_azimuth_angle() const;
  void set_fsp_azimuth_angle(float value);

  // optional int32 fsp_buffer = 13;
  bool has_fsp_buffer() const;
  void clear_fsp_buffer();
  static const int kFspBufferFieldNumber = 13;
  ::google::protobuf::int32 fsp_buffer() const;
  void set_fsp_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.FSPoint)
 private:
  void set_has_fsp_id();
  void clear_has_fsp_id();
  void set_has_fsp_is_valid();
  void clear_has_fsp_is_valid();
  void set_has_fsp_existence_prob();
  void clear_has_fsp_existence_prob();
  void set_has_fsp_emptiness_prob();
  void clear_has_fsp_emptiness_prob();
  void set_has_fsp_mobility_status();
  void clear_has_fsp_mobility_status();
  void set_has_fsp_classification_type();
  void clear_has_fsp_classification_type();
  void set_has_fsp_range_std();
  void clear_has_fsp_range_std();
  void set_has_fsp_range();
  void clear_has_fsp_range();
  void set_has_fsp_height();
  void clear_has_fsp_height();
  void set_has_fsp_height_std();
  void clear_has_fsp_height_std();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_fsp_azimuth_angle();
  void clear_has_fsp_azimuth_angle();
  void set_has_fsp_buffer();
  void clear_has_fsp_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 fsp_id_;
  bool fsp_is_valid_;
  float fsp_existence_prob_;
  float fsp_emptiness_prob_;
  int fsp_mobility_status_;
  int fsp_classification_type_;
  float fsp_range_std_;
  float fsp_range_;
  float fsp_height_;
  float fsp_height_std_;
  ::google::protobuf::int32 reserved_2_;
  float fsp_azimuth_angle_;
  ::google::protobuf::int32 fsp_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_HLB : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_HLB) */ {
 public:
  Dt_Record_HLB();
  virtual ~Dt_Record_HLB();

  Dt_Record_HLB(const Dt_Record_HLB& from);

  inline Dt_Record_HLB& operator=(const Dt_Record_HLB& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_HLB& default_instance();

  static inline const Dt_Record_HLB* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_HLB*>(
               &_Dt_Record_HLB_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(Dt_Record_HLB* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_HLB* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_HLB* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_HLB& from);
  void MergeFrom(const Dt_Record_HLB& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_HLB* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Dt_Record_HLB_Hlb_running_modeType Hlb_running_modeType;
  static const Hlb_running_modeType INVALID_TYPE =
    Dt_Record_HLB_Hlb_running_modeType_INVALID_TYPE;
  static const Hlb_running_modeType HLB_OFF =
    Dt_Record_HLB_Hlb_running_modeType_HLB_OFF;
  static const Hlb_running_modeType HLB_INACTIVE =
    Dt_Record_HLB_Hlb_running_modeType_HLB_INACTIVE;
  static const Hlb_running_modeType HLB_FULL =
    Dt_Record_HLB_Hlb_running_modeType_HLB_FULL;
  static inline bool Hlb_running_modeType_IsValid(int value) {
    return Dt_Record_HLB_Hlb_running_modeType_IsValid(value);
  }
  static const Hlb_running_modeType Hlb_running_modeType_MIN =
    Dt_Record_HLB_Hlb_running_modeType_Hlb_running_modeType_MIN;
  static const Hlb_running_modeType Hlb_running_modeType_MAX =
    Dt_Record_HLB_Hlb_running_modeType_Hlb_running_modeType_MAX;
  static const int Hlb_running_modeType_ARRAYSIZE =
    Dt_Record_HLB_Hlb_running_modeType_Hlb_running_modeType_ARRAYSIZE;

  typedef Dt_Record_HLB_Hlb_inactive_reasonType Hlb_inactive_reasonType;
  static const Hlb_inactive_reasonType INVALID_REASON =
    Dt_Record_HLB_Hlb_inactive_reasonType_INVALID_REASON;
  static const Hlb_inactive_reasonType OBVIOUSLY_BRIGHT =
    Dt_Record_HLB_Hlb_inactive_reasonType_OBVIOUSLY_BRIGHT;
  static const Hlb_inactive_reasonType LOW_DETECTION_RATE =
    Dt_Record_HLB_Hlb_inactive_reasonType_LOW_DETECTION_RATE;
  static const Hlb_inactive_reasonType OVER_FLOW =
    Dt_Record_HLB_Hlb_inactive_reasonType_OVER_FLOW;
  static const Hlb_inactive_reasonType IN_GRACE =
    Dt_Record_HLB_Hlb_inactive_reasonType_IN_GRACE;
  static const Hlb_inactive_reasonType DEACTIVATED =
    Dt_Record_HLB_Hlb_inactive_reasonType_DEACTIVATED;
  static const Hlb_inactive_reasonType DUSK_DELAY =
    Dt_Record_HLB_Hlb_inactive_reasonType_DUSK_DELAY;
  static inline bool Hlb_inactive_reasonType_IsValid(int value) {
    return Dt_Record_HLB_Hlb_inactive_reasonType_IsValid(value);
  }
  static const Hlb_inactive_reasonType Hlb_inactive_reasonType_MIN =
    Dt_Record_HLB_Hlb_inactive_reasonType_Hlb_inactive_reasonType_MIN;
  static const Hlb_inactive_reasonType Hlb_inactive_reasonType_MAX =
    Dt_Record_HLB_Hlb_inactive_reasonType_Hlb_inactive_reasonType_MAX;
  static const int Hlb_inactive_reasonType_ARRAYSIZE =
    Dt_Record_HLB_Hlb_inactive_reasonType_Hlb_inactive_reasonType_ARRAYSIZE;

  typedef Dt_Record_HLB_Hlb_decisionType Hlb_decisionType;
  static const Hlb_decisionType UNKNOWN =
    Dt_Record_HLB_Hlb_decisionType_UNKNOWN;
  static const Hlb_decisionType HIGH =
    Dt_Record_HLB_Hlb_decisionType_HIGH;
  static const Hlb_decisionType LOW =
    Dt_Record_HLB_Hlb_decisionType_LOW;
  static inline bool Hlb_decisionType_IsValid(int value) {
    return Dt_Record_HLB_Hlb_decisionType_IsValid(value);
  }
  static const Hlb_decisionType Hlb_decisionType_MIN =
    Dt_Record_HLB_Hlb_decisionType_Hlb_decisionType_MIN;
  static const Hlb_decisionType Hlb_decisionType_MAX =
    Dt_Record_HLB_Hlb_decisionType_Hlb_decisionType_MAX;
  static const int Hlb_decisionType_ARRAYSIZE =
    Dt_Record_HLB_Hlb_decisionType_Hlb_decisionType_ARRAYSIZE;

  typedef Dt_Record_HLB_Hlb_reasonType Hlb_reasonType;
  static const Hlb_reasonType TAIL_LIGHT =
    Dt_Record_HLB_Hlb_reasonType_TAIL_LIGHT;
  static const Hlb_reasonType LIT_NIGHT =
    Dt_Record_HLB_Hlb_reasonType_LIT_NIGHT;
  static const Hlb_reasonType LIT_NIGHT_US =
    Dt_Record_HLB_Hlb_reasonType_LIT_NIGHT_US;
  static const Hlb_reasonType LIT_NIGHT_ECE =
    Dt_Record_HLB_Hlb_reasonType_LIT_NIGHT_ECE;
  static const Hlb_reasonType IN_VERY_SHARPE_CURVE =
    Dt_Record_HLB_Hlb_reasonType_IN_VERY_SHARPE_CURVE;
  static const Hlb_reasonType IN_CURVE =
    Dt_Record_HLB_Hlb_reasonType_IN_CURVE;
  static const Hlb_reasonType IN_BLINKING_TRAFFICLIGHT_SCENE =
    Dt_Record_HLB_Hlb_reasonType_IN_BLINKING_TRAFFICLIGHT_SCENE;
  static const Hlb_reasonType APPROACHING_JUNCTION =
    Dt_Record_HLB_Hlb_reasonType_APPROACHING_JUNCTION;
  static const Hlb_reasonType ONCOMING =
    Dt_Record_HLB_Hlb_reasonType_ONCOMING;
  static const Hlb_reasonType ONCOMING_GRACE =
    Dt_Record_HLB_Hlb_reasonType_ONCOMING_GRACE;
  static const Hlb_reasonType TAIL_LIGHT_GRACE =
    Dt_Record_HLB_Hlb_reasonType_TAIL_LIGHT_GRACE;
  static const Hlb_reasonType LOW_SPEED =
    Dt_Record_HLB_Hlb_reasonType_LOW_SPEED;
  static const Hlb_reasonType STREET_LIGHTS =
    Dt_Record_HLB_Hlb_reasonType_STREET_LIGHTS;
  static const Hlb_reasonType SL_SCENE_GRACE =
    Dt_Record_HLB_Hlb_reasonType_SL_SCENE_GRACE;
  static const Hlb_reasonType BRIGHT_SCENE =
    Dt_Record_HLB_Hlb_reasonType_BRIGHT_SCENE;
  static const Hlb_reasonType OBVIOUSLY_BRIGHT_SCENE =
    Dt_Record_HLB_Hlb_reasonType_OBVIOUSLY_BRIGHT_SCENE;
  static inline bool Hlb_reasonType_IsValid(int value) {
    return Dt_Record_HLB_Hlb_reasonType_IsValid(value);
  }
  static const Hlb_reasonType Hlb_reasonType_MIN =
    Dt_Record_HLB_Hlb_reasonType_Hlb_reasonType_MIN;
  static const Hlb_reasonType Hlb_reasonType_MAX =
    Dt_Record_HLB_Hlb_reasonType_Hlb_reasonType_MAX;
  static const int Hlb_reasonType_ARRAYSIZE =
    Dt_Record_HLB_Hlb_reasonType_Hlb_reasonType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 9;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 9;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 10;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 10;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional int32 hlb_zero_byte = 1;
  bool has_hlb_zero_byte() const;
  void clear_hlb_zero_byte();
  static const int kHlbZeroByteFieldNumber = 1;
  ::google::protobuf::int32 hlb_zero_byte() const;
  void set_hlb_zero_byte(::google::protobuf::int32 value);

  // optional int32 hlb_protocol_version = 2;
  bool has_hlb_protocol_version() const;
  void clear_hlb_protocol_version();
  static const int kHlbProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 hlb_protocol_version() const;
  void set_hlb_protocol_version(::google::protobuf::int32 value);

  // optional int32 hlb_sync_id = 3;
  bool has_hlb_sync_id() const;
  void clear_hlb_sync_id();
  static const int kHlbSyncIdFieldNumber = 3;
  ::google::protobuf::int32 hlb_sync_id() const;
  void set_hlb_sync_id(::google::protobuf::int32 value);

  // optional .atd.meprocess.Dt_Record_HLB.Hlb_running_modeType hlb_running_mode = 4;
  bool has_hlb_running_mode() const;
  void clear_hlb_running_mode();
  static const int kHlbRunningModeFieldNumber = 4;
  ::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType hlb_running_mode() const;
  void set_hlb_running_mode(::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType value);

  // optional .atd.meprocess.Dt_Record_HLB.Hlb_inactive_reasonType hlb_inactive_reason = 5;
  bool has_hlb_inactive_reason() const;
  void clear_hlb_inactive_reason();
  static const int kHlbInactiveReasonFieldNumber = 5;
  ::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType hlb_inactive_reason() const;
  void set_hlb_inactive_reason(::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType value);

  // optional .atd.meprocess.Dt_Record_HLB.Hlb_decisionType hlb_decision = 6;
  bool has_hlb_decision() const;
  void clear_hlb_decision();
  static const int kHlbDecisionFieldNumber = 6;
  ::atd::meprocess::Dt_Record_HLB_Hlb_decisionType hlb_decision() const;
  void set_hlb_decision(::atd::meprocess::Dt_Record_HLB_Hlb_decisionType value);

  // optional bool reserved_1 = 7;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 7;
  bool reserved_1() const;
  void set_reserved_1(bool value);

  // optional float hlb_reason = 8;
  bool has_hlb_reason() const;
  void clear_hlb_reason();
  static const int kHlbReasonFieldNumber = 8;
  float hlb_reason() const;
  void set_hlb_reason(float value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_HLB)
 private:
  void set_has_hlb_zero_byte();
  void clear_has_hlb_zero_byte();
  void set_has_hlb_protocol_version();
  void clear_has_hlb_protocol_version();
  void set_has_hlb_sync_id();
  void clear_has_hlb_sync_id();
  void set_has_hlb_running_mode();
  void clear_has_hlb_running_mode();
  void set_has_hlb_inactive_reason();
  void clear_has_hlb_inactive_reason();
  void set_has_hlb_decision();
  void clear_has_hlb_decision();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_hlb_reason();
  void clear_has_hlb_reason();
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::google::protobuf::int32 hlb_zero_byte_;
  ::google::protobuf::int32 hlb_protocol_version_;
  ::google::protobuf::int32 hlb_sync_id_;
  int hlb_running_mode_;
  int hlb_inactive_reason_;
  int hlb_decision_;
  bool reserved_1_;
  float hlb_reason_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_LDW : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_LDW) */ {
 public:
  Dt_Record_LDW();
  virtual ~Dt_Record_LDW();

  Dt_Record_LDW(const Dt_Record_LDW& from);

  inline Dt_Record_LDW& operator=(const Dt_Record_LDW& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_LDW& default_instance();

  static inline const Dt_Record_LDW* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_LDW*>(
               &_Dt_Record_LDW_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(Dt_Record_LDW* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_LDW* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_LDW* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_LDW& from);
  void MergeFrom(const Dt_Record_LDW& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_LDW* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Dt_Record_LDW_Ldw_suppresion_reasonType Ldw_suppresion_reasonType;
  static const Ldw_suppresion_reasonType NO_SUPP =
    Dt_Record_LDW_Ldw_suppresion_reasonType_NO_SUPP;
  static const Ldw_suppresion_reasonType SPEED =
    Dt_Record_LDW_Ldw_suppresion_reasonType_SPEED;
  static const Ldw_suppresion_reasonType RIGHT_SUPP =
    Dt_Record_LDW_Ldw_suppresion_reasonType_RIGHT_SUPP;
  static const Ldw_suppresion_reasonType MISS_LINE =
    Dt_Record_LDW_Ldw_suppresion_reasonType_MISS_LINE;
  static const Ldw_suppresion_reasonType LANE_WIDTH =
    Dt_Record_LDW_Ldw_suppresion_reasonType_LANE_WIDTH;
  static const Ldw_suppresion_reasonType STEERING_RATE =
    Dt_Record_LDW_Ldw_suppresion_reasonType_STEERING_RATE;
  static const Ldw_suppresion_reasonType RIGHT_TURN_ACTIVE =
    Dt_Record_LDW_Ldw_suppresion_reasonType_RIGHT_TURN_ACTIVE;
  static const Ldw_suppresion_reasonType LEFT_TURN_ACTIVE =
    Dt_Record_LDW_Ldw_suppresion_reasonType_LEFT_TURN_ACTIVE;
  static const Ldw_suppresion_reasonType BRAKE =
    Dt_Record_LDW_Ldw_suppresion_reasonType_BRAKE;
  static const Ldw_suppresion_reasonType ACCELERATION =
    Dt_Record_LDW_Ldw_suppresion_reasonType_ACCELERATION;
  static const Ldw_suppresion_reasonType LEFT_SUPP =
    Dt_Record_LDW_Ldw_suppresion_reasonType_LEFT_SUPP;
  static inline bool Ldw_suppresion_reasonType_IsValid(int value) {
    return Dt_Record_LDW_Ldw_suppresion_reasonType_IsValid(value);
  }
  static const Ldw_suppresion_reasonType Ldw_suppresion_reasonType_MIN =
    Dt_Record_LDW_Ldw_suppresion_reasonType_Ldw_suppresion_reasonType_MIN;
  static const Ldw_suppresion_reasonType Ldw_suppresion_reasonType_MAX =
    Dt_Record_LDW_Ldw_suppresion_reasonType_Ldw_suppresion_reasonType_MAX;
  static const int Ldw_suppresion_reasonType_ARRAYSIZE =
    Dt_Record_LDW_Ldw_suppresion_reasonType_Ldw_suppresion_reasonType_ARRAYSIZE;

  typedef Dt_Record_LDW_Ldw_warning_status_leftType Ldw_warning_status_leftType;
  static const Ldw_warning_status_leftType SUPPRESSED =
    Dt_Record_LDW_Ldw_warning_status_leftType_SUPPRESSED;
  static const Ldw_warning_status_leftType ENABLED =
    Dt_Record_LDW_Ldw_warning_status_leftType_ENABLED;
  static const Ldw_warning_status_leftType ACTIVE =
    Dt_Record_LDW_Ldw_warning_status_leftType_ACTIVE;
  static inline bool Ldw_warning_status_leftType_IsValid(int value) {
    return Dt_Record_LDW_Ldw_warning_status_leftType_IsValid(value);
  }
  static const Ldw_warning_status_leftType Ldw_warning_status_leftType_MIN =
    Dt_Record_LDW_Ldw_warning_status_leftType_Ldw_warning_status_leftType_MIN;
  static const Ldw_warning_status_leftType Ldw_warning_status_leftType_MAX =
    Dt_Record_LDW_Ldw_warning_status_leftType_Ldw_warning_status_leftType_MAX;
  static const int Ldw_warning_status_leftType_ARRAYSIZE =
    Dt_Record_LDW_Ldw_warning_status_leftType_Ldw_warning_status_leftType_ARRAYSIZE;

  typedef Dt_Record_LDW_Ldw_warning_status_rightType Ldw_warning_status_rightType;
  static const Ldw_warning_status_rightType LDW_Warning_Status_Right_SUPPRESSED_ =
    Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_SUPPRESSED_;
  static const Ldw_warning_status_rightType LDW_Warning_Status_Right_ENABLED_ =
    Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_ENABLED_;
  static const Ldw_warning_status_rightType LDW_Warning_Status_Right_ACTIVE_ =
    Dt_Record_LDW_Ldw_warning_status_rightType_LDW_Warning_Status_Right_ACTIVE_;
  static inline bool Ldw_warning_status_rightType_IsValid(int value) {
    return Dt_Record_LDW_Ldw_warning_status_rightType_IsValid(value);
  }
  static const Ldw_warning_status_rightType Ldw_warning_status_rightType_MIN =
    Dt_Record_LDW_Ldw_warning_status_rightType_Ldw_warning_status_rightType_MIN;
  static const Ldw_warning_status_rightType Ldw_warning_status_rightType_MAX =
    Dt_Record_LDW_Ldw_warning_status_rightType_Ldw_warning_status_rightType_MAX;
  static const int Ldw_warning_status_rightType_ARRAYSIZE =
    Dt_Record_LDW_Ldw_warning_status_rightType_Ldw_warning_status_rightType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 13;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 13;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 14;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 14;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional int32 ldw_zero_byte = 1;
  bool has_ldw_zero_byte() const;
  void clear_ldw_zero_byte();
  static const int kLdwZeroByteFieldNumber = 1;
  ::google::protobuf::int32 ldw_zero_byte() const;
  void set_ldw_zero_byte(::google::protobuf::int32 value);

  // optional int32 ldw_protocol_version = 2;
  bool has_ldw_protocol_version() const;
  void clear_ldw_protocol_version();
  static const int kLdwProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 ldw_protocol_version() const;
  void set_ldw_protocol_version(::google::protobuf::int32 value);

  // optional int32 ldw_sync_id = 3;
  bool has_ldw_sync_id() const;
  void clear_ldw_sync_id();
  static const int kLdwSyncIdFieldNumber = 3;
  ::google::protobuf::int32 ldw_sync_id() const;
  void set_ldw_sync_id(::google::protobuf::int32 value);

  // optional bool ldw_line_valid_left = 4;
  bool has_ldw_line_valid_left() const;
  void clear_ldw_line_valid_left();
  static const int kLdwLineValidLeftFieldNumber = 4;
  bool ldw_line_valid_left() const;
  void set_ldw_line_valid_left(bool value);

  // optional bool ldw_line_valid_right = 5;
  bool has_ldw_line_valid_right() const;
  void clear_ldw_line_valid_right();
  static const int kLdwLineValidRightFieldNumber = 5;
  bool ldw_line_valid_right() const;
  void set_ldw_line_valid_right(bool value);

  // optional int32 reserved_1 = 6;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 6;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional int32 ldw_suppresion_reason = 7;
  bool has_ldw_suppresion_reason() const;
  void clear_ldw_suppresion_reason();
  static const int kLdwSuppresionReasonFieldNumber = 7;
  ::google::protobuf::int32 ldw_suppresion_reason() const;
  void set_ldw_suppresion_reason(::google::protobuf::int32 value);

  // optional float ldw_time_to_warning_left = 8;
  bool has_ldw_time_to_warning_left() const;
  void clear_ldw_time_to_warning_left();
  static const int kLdwTimeToWarningLeftFieldNumber = 8;
  float ldw_time_to_warning_left() const;
  void set_ldw_time_to_warning_left(float value);

  // optional float ldw_time_to_warning_right = 9;
  bool has_ldw_time_to_warning_right() const;
  void clear_ldw_time_to_warning_right();
  static const int kLdwTimeToWarningRightFieldNumber = 9;
  float ldw_time_to_warning_right() const;
  void set_ldw_time_to_warning_right(float value);

  // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_leftType ldw_warning_status_left = 10;
  bool has_ldw_warning_status_left() const;
  void clear_ldw_warning_status_left();
  static const int kLdwWarningStatusLeftFieldNumber = 10;
  ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType ldw_warning_status_left() const;
  void set_ldw_warning_status_left(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType value);

  // optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_rightType ldw_warning_status_right = 11;
  bool has_ldw_warning_status_right() const;
  void clear_ldw_warning_status_right();
  static const int kLdwWarningStatusRightFieldNumber = 11;
  ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType ldw_warning_status_right() const;
  void set_ldw_warning_status_right(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType value);

  // optional int32 reserved_2 = 12;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 12;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_LDW)
 private:
  void set_has_ldw_zero_byte();
  void clear_has_ldw_zero_byte();
  void set_has_ldw_protocol_version();
  void clear_has_ldw_protocol_version();
  void set_has_ldw_sync_id();
  void clear_has_ldw_sync_id();
  void set_has_ldw_line_valid_left();
  void clear_has_ldw_line_valid_left();
  void set_has_ldw_line_valid_right();
  void clear_has_ldw_line_valid_right();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_ldw_suppresion_reason();
  void clear_has_ldw_suppresion_reason();
  void set_has_ldw_time_to_warning_left();
  void clear_has_ldw_time_to_warning_left();
  void set_has_ldw_time_to_warning_right();
  void clear_has_ldw_time_to_warning_right();
  void set_has_ldw_warning_status_left();
  void clear_has_ldw_warning_status_left();
  void set_has_ldw_warning_status_right();
  void clear_has_ldw_warning_status_right();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::google::protobuf::int32 ldw_zero_byte_;
  ::google::protobuf::int32 ldw_protocol_version_;
  ::google::protobuf::int32 ldw_sync_id_;
  bool ldw_line_valid_left_;
  bool ldw_line_valid_right_;
  ::google::protobuf::int32 reserved_1_;
  ::google::protobuf::int32 ldw_suppresion_reason_;
  float ldw_time_to_warning_left_;
  float ldw_time_to_warning_right_;
  int ldw_warning_status_left_;
  int ldw_warning_status_right_;
  ::google::protobuf::int32 reserved_2_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LSCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.LSCommon) */ {
 public:
  LSCommon();
  virtual ~LSCommon();

  LSCommon(const LSCommon& from);

  inline LSCommon& operator=(const LSCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LSCommon& default_instance();

  static inline const LSCommon* internal_default_instance() {
    return reinterpret_cast<const LSCommon*>(
               &_LSCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(LSCommon* other);

  // implements Message ----------------------------------------------

  inline LSCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  LSCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LSCommon& from);
  void MergeFrom(const LSCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LSCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zero_byte = 1;
  bool has_zero_byte() const;
  void clear_zero_byte();
  static const int kZeroByteFieldNumber = 1;
  ::google::protobuf::int32 zero_byte() const;
  void set_zero_byte(::google::protobuf::int32 value);

  // optional int32 ls_protocol_version = 2;
  bool has_ls_protocol_version() const;
  void clear_ls_protocol_version();
  static const int kLsProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 ls_protocol_version() const;
  void set_ls_protocol_version(::google::protobuf::int32 value);

  // optional int32 ls_sync_id = 3;
  bool has_ls_sync_id() const;
  void clear_ls_sync_id();
  static const int kLsSyncIdFieldNumber = 3;
  ::google::protobuf::int32 ls_sync_id() const;
  void set_ls_sync_id(::google::protobuf::int32 value);

  // optional int32 ls_adjacent_number = 4;
  bool has_ls_adjacent_number() const;
  void clear_ls_adjacent_number();
  static const int kLsAdjacentNumberFieldNumber = 4;
  ::google::protobuf::int32 ls_adjacent_number() const;
  void set_ls_adjacent_number(::google::protobuf::int32 value);

  // optional bool ls_ca_is_construction_area = 5;
  bool has_ls_ca_is_construction_area() const;
  void clear_ls_ca_is_construction_area();
  static const int kLsCaIsConstructionAreaFieldNumber = 5;
  bool ls_ca_is_construction_area() const;
  void set_ls_ca_is_construction_area(bool value);

  // optional int32 ls_header_buffer_1 = 6;
  bool has_ls_header_buffer_1() const;
  void clear_ls_header_buffer_1();
  static const int kLsHeaderBuffer1FieldNumber = 6;
  ::google::protobuf::int32 ls_header_buffer_1() const;
  void set_ls_header_buffer_1(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.LSCommon)
 private:
  void set_has_zero_byte();
  void clear_has_zero_byte();
  void set_has_ls_protocol_version();
  void clear_has_ls_protocol_version();
  void set_has_ls_sync_id();
  void clear_has_ls_sync_id();
  void set_has_ls_adjacent_number();
  void clear_has_ls_adjacent_number();
  void set_has_ls_ca_is_construction_area();
  void clear_has_ls_ca_is_construction_area();
  void set_has_ls_header_buffer_1();
  void clear_has_ls_header_buffer_1();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 zero_byte_;
  ::google::protobuf::int32 ls_protocol_version_;
  ::google::protobuf::int32 ls_sync_id_;
  ::google::protobuf::int32 ls_adjacent_number_;
  bool ls_ca_is_construction_area_;
  ::google::protobuf::int32 ls_header_buffer_1_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LineParam : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.LineParam) */ {
 public:
  LineParam();
  virtual ~LineParam();

  LineParam(const LineParam& from);

  inline LineParam& operator=(const LineParam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LineParam& default_instance();

  static inline const LineParam* internal_default_instance() {
    return reinterpret_cast<const LineParam*>(
               &_LineParam_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    16;

  void Swap(LineParam* other);

  // implements Message ----------------------------------------------

  inline LineParam* New() const PROTOBUF_FINAL { return New(NULL); }

  LineParam* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LineParam& from);
  void MergeFrom(const LineParam& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LineParam* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional float c0 = 1;
  bool has_c0() const;
  void clear_c0();
  static const int kC0FieldNumber = 1;
  float c0() const;
  void set_c0(float value);

  // optional float c1 = 2;
  bool has_c1() const;
  void clear_c1();
  static const int kC1FieldNumber = 2;
  float c1() const;
  void set_c1(float value);

  // optional float c2 = 3;
  bool has_c2() const;
  void clear_c2();
  static const int kC2FieldNumber = 3;
  float c2() const;
  void set_c2(float value);

  // optional float c3 = 4;
  bool has_c3() const;
  void clear_c3();
  static const int kC3FieldNumber = 4;
  float c3() const;
  void set_c3(float value);

  // optional float view_start = 5;
  bool has_view_start() const;
  void clear_view_start();
  static const int kViewStartFieldNumber = 5;
  float view_start() const;
  void set_view_start(float value);

  // optional float view_end = 6;
  bool has_view_end() const;
  void clear_view_end();
  static const int kViewEndFieldNumber = 6;
  float view_end() const;
  void set_view_end(float value);

  // optional int32 lineType = 7;
  bool has_linetype() const;
  void clear_linetype();
  static const int kLineTypeFieldNumber = 7;
  ::google::protobuf::int32 linetype() const;
  void set_linetype(::google::protobuf::int32 value);

  // optional int32 lineQuality = 8;
  bool has_linequality() const;
  void clear_linequality();
  static const int kLineQualityFieldNumber = 8;
  ::google::protobuf::int32 linequality() const;
  void set_linequality(::google::protobuf::int32 value);

  // optional float linewidth = 9;
  bool has_linewidth() const;
  void clear_linewidth();
  static const int kLinewidthFieldNumber = 9;
  float linewidth() const;
  void set_linewidth(float value);

  // optional bool valid = 10;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 10;
  bool valid() const;
  void set_valid(bool value);

  // optional float c1_std = 11;
  bool has_c1_std() const;
  void clear_c1_std();
  static const int kC1StdFieldNumber = 11;
  float c1_std() const;
  void set_c1_std(float value);

  // optional float c2_std = 12;
  bool has_c2_std() const;
  void clear_c2_std();
  static const int kC2StdFieldNumber = 12;
  float c2_std() const;
  void set_c2_std(float value);

  // optional float c3_std = 13;
  bool has_c3_std() const;
  void clear_c3_std();
  static const int kC3StdFieldNumber = 13;
  float c3_std() const;
  void set_c3_std(float value);

  // optional float c0_std = 14;
  bool has_c0_std() const;
  void clear_c0_std();
  static const int kC0StdFieldNumber = 14;
  float c0_std() const;
  void set_c0_std(float value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.LineParam)
 private:
  void set_has_valid();
  void clear_has_valid();
  void set_has_c0();
  void clear_has_c0();
  void set_has_c1();
  void clear_has_c1();
  void set_has_c2();
  void clear_has_c2();
  void set_has_c3();
  void clear_has_c3();
  void set_has_view_start();
  void clear_has_view_start();
  void set_has_view_end();
  void clear_has_view_end();
  void set_has_linetype();
  void clear_has_linetype();
  void set_has_linequality();
  void clear_has_linequality();
  void set_has_linewidth();
  void clear_has_linewidth();
  void set_has_c0_std();
  void clear_has_c0_std();
  void set_has_c1_std();
  void clear_has_c1_std();
  void set_has_c2_std();
  void clear_has_c2_std();
  void set_has_c3_std();
  void clear_has_c3_std();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float c0_;
  float c1_;
  float c2_;
  float c3_;
  float view_start_;
  float view_end_;
  ::google::protobuf::int32 linetype_;
  ::google::protobuf::int32 linequality_;
  float linewidth_;
  bool valid_;
  float c1_std_;
  float c2_std_;
  float c3_std_;
  float c0_std_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_Lane_Support : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_Lane_Support) */ {
 public:
  Dt_Record_Lane_Support();
  virtual ~Dt_Record_Lane_Support();

  Dt_Record_Lane_Support(const Dt_Record_Lane_Support& from);

  inline Dt_Record_Lane_Support& operator=(const Dt_Record_Lane_Support& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_Lane_Support& default_instance();

  static inline const Dt_Record_Lane_Support* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_Lane_Support*>(
               &_Dt_Record_Lane_Support_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    17;

  void Swap(Dt_Record_Lane_Support* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_Lane_Support* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_Lane_Support* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_Lane_Support& from);
  void MergeFrom(const Dt_Record_Lane_Support& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_Lane_Support* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Dt_Record_Lane_Support_CurHostLaneStutus CurHostLaneStutus;
  static const CurHostLaneStutus PerfectSituation =
    Dt_Record_Lane_Support_CurHostLaneStutus_PerfectSituation;
  static const CurHostLaneStutus PreLBasedOnLaneWidth =
    Dt_Record_Lane_Support_CurHostLaneStutus_PreLBasedOnLaneWidth;
  static const CurHostLaneStutus PreRBaseOnLaneWidth =
    Dt_Record_Lane_Support_CurHostLaneStutus_PreRBaseOnLaneWidth;
  static const CurHostLaneStutus ApprochLaneCrossing =
    Dt_Record_Lane_Support_CurHostLaneStutus_ApprochLaneCrossing;
  static const CurHostLaneStutus LCrossing =
    Dt_Record_Lane_Support_CurHostLaneStutus_LCrossing;
  static const CurHostLaneStutus RCrossing =
    Dt_Record_Lane_Support_CurHostLaneStutus_RCrossing;
  static inline bool CurHostLaneStutus_IsValid(int value) {
    return Dt_Record_Lane_Support_CurHostLaneStutus_IsValid(value);
  }
  static const CurHostLaneStutus CurHostLaneStutus_MIN =
    Dt_Record_Lane_Support_CurHostLaneStutus_CurHostLaneStutus_MIN;
  static const CurHostLaneStutus CurHostLaneStutus_MAX =
    Dt_Record_Lane_Support_CurHostLaneStutus_CurHostLaneStutus_MAX;
  static const int CurHostLaneStutus_ARRAYSIZE =
    Dt_Record_Lane_Support_CurHostLaneStutus_CurHostLaneStutus_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.LS_Host_Line dt_array_2_ls_host_line = 4;
  int dt_array_2_ls_host_line_size() const;
  void clear_dt_array_2_ls_host_line();
  static const int kDtArray2LsHostLineFieldNumber = 4;
  const ::atd::meprocess::LS_Host_Line& dt_array_2_ls_host_line(int index) const;
  ::atd::meprocess::LS_Host_Line* mutable_dt_array_2_ls_host_line(int index);
  ::atd::meprocess::LS_Host_Line* add_dt_array_2_ls_host_line();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Host_Line >*
      mutable_dt_array_2_ls_host_line();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Host_Line >&
      dt_array_2_ls_host_line() const;

  // repeated .atd.meprocess.LS_Adjacent_Line dt_array_4_ls_adjacent_line = 6;
  int dt_array_4_ls_adjacent_line_size() const;
  void clear_dt_array_4_ls_adjacent_line();
  static const int kDtArray4LsAdjacentLineFieldNumber = 6;
  const ::atd::meprocess::LS_Adjacent_Line& dt_array_4_ls_adjacent_line(int index) const;
  ::atd::meprocess::LS_Adjacent_Line* mutable_dt_array_4_ls_adjacent_line(int index);
  ::atd::meprocess::LS_Adjacent_Line* add_dt_array_4_ls_adjacent_line();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Adjacent_Line >*
      mutable_dt_array_4_ls_adjacent_line();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Adjacent_Line >&
      dt_array_4_ls_adjacent_line() const;

  // repeated .atd.meprocess.LineParam RoleTypeLostAdjacentLine = 12;
  int roletypelostadjacentline_size() const;
  void clear_roletypelostadjacentline();
  static const int kRoleTypeLostAdjacentLineFieldNumber = 12;
  const ::atd::meprocess::LineParam& roletypelostadjacentline(int index) const;
  ::atd::meprocess::LineParam* mutable_roletypelostadjacentline(int index);
  ::atd::meprocess::LineParam* add_roletypelostadjacentline();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LineParam >*
      mutable_roletypelostadjacentline();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LineParam >&
      roletypelostadjacentline() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.LSCommon stlscommon = 3;
  bool has_stlscommon() const;
  void clear_stlscommon();
  static const int kStlscommonFieldNumber = 3;
  const ::atd::meprocess::LSCommon& stlscommon() const;
  ::atd::meprocess::LSCommon* mutable_stlscommon();
  ::atd::meprocess::LSCommon* release_stlscommon();
  void set_allocated_stlscommon(::atd::meprocess::LSCommon* stlscommon);

  // optional .atd.meprocess.LineParam LeftLine = 7;
  bool has_leftline() const;
  void clear_leftline();
  static const int kLeftLineFieldNumber = 7;
  const ::atd::meprocess::LineParam& leftline() const;
  ::atd::meprocess::LineParam* mutable_leftline();
  ::atd::meprocess::LineParam* release_leftline();
  void set_allocated_leftline(::atd::meprocess::LineParam* leftline);

  // optional .atd.meprocess.LineParam RightLine = 8;
  bool has_rightline() const;
  void clear_rightline();
  static const int kRightLineFieldNumber = 8;
  const ::atd::meprocess::LineParam& rightline() const;
  ::atd::meprocess::LineParam* mutable_rightline();
  ::atd::meprocess::LineParam* release_rightline();
  void set_allocated_rightline(::atd::meprocess::LineParam* rightline);

  // optional .atd.meprocess.LineParam NextLeftLine = 10;
  bool has_nextleftline() const;
  void clear_nextleftline();
  static const int kNextLeftLineFieldNumber = 10;
  const ::atd::meprocess::LineParam& nextleftline() const;
  ::atd::meprocess::LineParam* mutable_nextleftline();
  ::atd::meprocess::LineParam* release_nextleftline();
  void set_allocated_nextleftline(::atd::meprocess::LineParam* nextleftline);

  // optional .atd.meprocess.LineParam NextRightLine = 11;
  bool has_nextrightline() const;
  void clear_nextrightline();
  static const int kNextRightLineFieldNumber = 11;
  const ::atd::meprocess::LineParam& nextrightline() const;
  ::atd::meprocess::LineParam* mutable_nextrightline();
  ::atd::meprocess::LineParam* release_nextrightline();
  void set_allocated_nextrightline(::atd::meprocess::LineParam* nextrightline);

  // optional int32 MeLaneStatus = 9;
  bool has_melanestatus() const;
  void clear_melanestatus();
  static const int kMeLaneStatusFieldNumber = 9;
  ::google::protobuf::int32 melanestatus() const;
  void set_melanestatus(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_Lane_Support)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stlscommon();
  void clear_has_stlscommon();
  void set_has_leftline();
  void clear_has_leftline();
  void set_has_rightline();
  void clear_has_rightline();
  void set_has_melanestatus();
  void clear_has_melanestatus();
  void set_has_nextleftline();
  void clear_has_nextleftline();
  void set_has_nextrightline();
  void clear_has_nextrightline();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Host_Line > dt_array_2_ls_host_line_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Adjacent_Line > dt_array_4_ls_adjacent_line_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LineParam > roletypelostadjacentline_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::LSCommon* stlscommon_;
  ::atd::meprocess::LineParam* leftline_;
  ::atd::meprocess::LineParam* rightline_;
  ::atd::meprocess::LineParam* nextleftline_;
  ::atd::meprocess::LineParam* nextrightline_;
  ::google::protobuf::int32 melanestatus_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LS_Host_Line : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.LS_Host_Line) */ {
 public:
  LS_Host_Line();
  virtual ~LS_Host_Line();

  LS_Host_Line(const LS_Host_Line& from);

  inline LS_Host_Line& operator=(const LS_Host_Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LS_Host_Line& default_instance();

  static inline const LS_Host_Line* internal_default_instance() {
    return reinterpret_cast<const LS_Host_Line*>(
               &_LS_Host_Line_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    18;

  void Swap(LS_Host_Line* other);

  // implements Message ----------------------------------------------

  inline LS_Host_Line* New() const PROTOBUF_FINAL { return New(NULL); }

  LS_Host_Line* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LS_Host_Line& from);
  void MergeFrom(const LS_Host_Line& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LS_Host_Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LS_Host_Line_ColorType ColorType;
  static const ColorType UNDECIDED =
    LS_Host_Line_ColorType_UNDECIDED;
  static const ColorType WHITE =
    LS_Host_Line_ColorType_WHITE;
  static const ColorType YELLOW_ORANGE_RED =
    LS_Host_Line_ColorType_YELLOW_ORANGE_RED;
  static const ColorType BLUE_GREEN =
    LS_Host_Line_ColorType_BLUE_GREEN;
  static inline bool ColorType_IsValid(int value) {
    return LS_Host_Line_ColorType_IsValid(value);
  }
  static const ColorType ColorType_MIN =
    LS_Host_Line_ColorType_ColorType_MIN;
  static const ColorType ColorType_MAX =
    LS_Host_Line_ColorType_ColorType_MAX;
  static const int ColorType_ARRAYSIZE =
    LS_Host_Line_ColorType_ColorType_ARRAYSIZE;

  typedef LS_Host_Line_Prediction_typeType Prediction_typeType;
  static const Prediction_typeType NONE =
    LS_Host_Line_Prediction_typeType_NONE;
  static const Prediction_typeType OCCLUDED =
    LS_Host_Line_Prediction_typeType_OCCLUDED;
  static const Prediction_typeType OTHER_SIDE =
    LS_Host_Line_Prediction_typeType_OTHER_SIDE;
  static const Prediction_typeType OVERRIDE =
    LS_Host_Line_Prediction_typeType_OVERRIDE;
  static const Prediction_typeType DIST_BASED_EXTRAPOLATION =
    LS_Host_Line_Prediction_typeType_DIST_BASED_EXTRAPOLATION;
  static const Prediction_typeType HEADWAY_ORIENTED =
    LS_Host_Line_Prediction_typeType_HEADWAY_ORIENTED;
  static inline bool Prediction_typeType_IsValid(int value) {
    return LS_Host_Line_Prediction_typeType_IsValid(value);
  }
  static const Prediction_typeType Prediction_typeType_MIN =
    LS_Host_Line_Prediction_typeType_Prediction_typeType_MIN;
  static const Prediction_typeType Prediction_typeType_MAX =
    LS_Host_Line_Prediction_typeType_Prediction_typeType_MAX;
  static const int Prediction_typeType_ARRAYSIZE =
    LS_Host_Line_Prediction_typeType_Prediction_typeType_ARRAYSIZE;

  typedef LS_Host_Line_Type_classificationType Type_classificationType;
  static const Type_classificationType Type_Classification_UNDECIDED_ =
    LS_Host_Line_Type_classificationType_Type_Classification_UNDECIDED_;
  static const Type_classificationType SOLID =
    LS_Host_Line_Type_classificationType_SOLID;
  static const Type_classificationType DECELERATION =
    LS_Host_Line_Type_classificationType_DECELERATION;
  static const Type_classificationType HOV_LANE =
    LS_Host_Line_Type_classificationType_HOV_LANE;
  static const Type_classificationType RESEREVED_1 =
    LS_Host_Line_Type_classificationType_RESEREVED_1;
  static const Type_classificationType RESEREVED_2 =
    LS_Host_Line_Type_classificationType_RESEREVED_2;
  static const Type_classificationType RESEREVED_3 =
    LS_Host_Line_Type_classificationType_RESEREVED_3;
  static const Type_classificationType RESEREVED_4 =
    LS_Host_Line_Type_classificationType_RESEREVED_4;
  static const Type_classificationType DASHEDUNDECIDED =
    LS_Host_Line_Type_classificationType_DASHEDUNDECIDED;
  static const Type_classificationType ROAD_EDGE_NA =
    LS_Host_Line_Type_classificationType_ROAD_EDGE_NA;
  static const Type_classificationType DLM =
    LS_Host_Line_Type_classificationType_DLM;
  static const Type_classificationType BOTTS =
    LS_Host_Line_Type_classificationType_BOTTS;
  static const Type_classificationType ELEVATED_STRUCTURE_NA =
    LS_Host_Line_Type_classificationType_ELEVATED_STRUCTURE_NA;
  static const Type_classificationType CURB_NA =
    LS_Host_Line_Type_classificationType_CURB_NA;
  static const Type_classificationType CONES_POLES_NA =
    LS_Host_Line_Type_classificationType_CONES_POLES_NA;
  static const Type_classificationType PARKING_CARS_NA =
    LS_Host_Line_Type_classificationType_PARKING_CARS_NA;
  static inline bool Type_classificationType_IsValid(int value) {
    return LS_Host_Line_Type_classificationType_IsValid(value);
  }
  static const Type_classificationType Type_classificationType_MIN =
    LS_Host_Line_Type_classificationType_Type_classificationType_MIN;
  static const Type_classificationType Type_classificationType_MAX =
    LS_Host_Line_Type_classificationType_Type_classificationType_MAX;
  static const int Type_classificationType_ARRAYSIZE =
    LS_Host_Line_Type_classificationType_Type_classificationType_ARRAYSIZE;

  typedef LS_Host_Line_Dlm_typeType Dlm_typeType;
  static const Dlm_typeType NOT_DLM =
    LS_Host_Line_Dlm_typeType_NOT_DLM;
  static const Dlm_typeType SOLID_DASHED =
    LS_Host_Line_Dlm_typeType_SOLID_DASHED;
  static const Dlm_typeType DASHED_SOLID =
    LS_Host_Line_Dlm_typeType_DASHED_SOLID;
  static const Dlm_typeType SOLID_SOLID =
    LS_Host_Line_Dlm_typeType_SOLID_SOLID;
  static const Dlm_typeType DASHED_DASHED =
    LS_Host_Line_Dlm_typeType_DASHED_DASHED;
  static const Dlm_typeType DLM_Type_UNDECIDED_ =
    LS_Host_Line_Dlm_typeType_DLM_Type_UNDECIDED_;
  static inline bool Dlm_typeType_IsValid(int value) {
    return LS_Host_Line_Dlm_typeType_IsValid(value);
  }
  static const Dlm_typeType Dlm_typeType_MIN =
    LS_Host_Line_Dlm_typeType_Dlm_typeType_MIN;
  static const Dlm_typeType Dlm_typeType_MAX =
    LS_Host_Line_Dlm_typeType_Dlm_typeType_MAX;
  static const int Dlm_typeType_ARRAYSIZE =
    LS_Host_Line_Dlm_typeType_Dlm_typeType_ARRAYSIZE;

  typedef LS_Host_Line_Decel_typeType Decel_typeType;
  static const Decel_typeType NO_DECEL =
    LS_Host_Line_Decel_typeType_NO_DECEL;
  static const Decel_typeType DECEL_Type_SOLID_ =
    LS_Host_Line_Decel_typeType_DECEL_Type_SOLID_;
  static const Decel_typeType DASHED =
    LS_Host_Line_Decel_typeType_DASHED;
  static const Decel_typeType RESERVED_1 =
    LS_Host_Line_Decel_typeType_RESERVED_1;
  static const Decel_typeType RESERVED_2 =
    LS_Host_Line_Decel_typeType_RESERVED_2;
  static const Decel_typeType RESERVED_3 =
    LS_Host_Line_Decel_typeType_RESERVED_3;
  static inline bool Decel_typeType_IsValid(int value) {
    return LS_Host_Line_Decel_typeType_IsValid(value);
  }
  static const Decel_typeType Decel_typeType_MIN =
    LS_Host_Line_Decel_typeType_Decel_typeType_MIN;
  static const Decel_typeType Decel_typeType_MAX =
    LS_Host_Line_Decel_typeType_Decel_typeType_MAX;
  static const int Decel_typeType_ARRAYSIZE =
    LS_Host_Line_Decel_typeType_Decel_typeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 track_id = 2;
  bool has_track_id() const;
  void clear_track_id();
  static const int kTrackIdFieldNumber = 2;
  ::google::protobuf::int32 track_id() const;
  void set_track_id(::google::protobuf::int32 value);

  // optional int32 age = 3;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional float existence_probability = 4;
  bool has_existence_probability() const;
  void clear_existence_probability();
  static const int kExistenceProbabilityFieldNumber = 4;
  float existence_probability() const;
  void set_existence_probability(float value);

  // optional .atd.meprocess.LS_Host_Line.ColorType color = 5;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 5;
  ::atd::meprocess::LS_Host_Line_ColorType color() const;
  void set_color(::atd::meprocess::LS_Host_Line_ColorType value);

  // optional int32 prediction_type = 6;
  bool has_prediction_type() const;
  void clear_prediction_type();
  static const int kPredictionTypeFieldNumber = 6;
  ::google::protobuf::int32 prediction_type() const;
  void set_prediction_type(::google::protobuf::int32 value);

  // optional .atd.meprocess.LS_Host_Line.Type_classificationType type_classification = 8;
  bool has_type_classification() const;
  void clear_type_classification();
  static const int kTypeClassificationFieldNumber = 8;
  ::atd::meprocess::LS_Host_Line_Type_classificationType type_classification() const;
  void set_type_classification(::atd::meprocess::LS_Host_Line_Type_classificationType value);

  // optional .atd.meprocess.LS_Host_Line.Dlm_typeType dlm_type = 9;
  bool has_dlm_type() const;
  void clear_dlm_type();
  static const int kDlmTypeFieldNumber = 9;
  ::atd::meprocess::LS_Host_Line_Dlm_typeType dlm_type() const;
  void set_dlm_type(::atd::meprocess::LS_Host_Line_Dlm_typeType value);

  // optional bool valid = 1;
  bool has_valid() const;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // optional bool reserved_1 = 7;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 7;
  bool reserved_1() const;
  void set_reserved_1(bool value);

  // optional bool crossing = 14;
  bool has_crossing() const;
  void clear_crossing();
  static const int kCrossingFieldNumber = 14;
  bool crossing() const;
  void set_crossing(bool value);

  // optional bool reserved_3 = 17;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 17;
  bool reserved_3() const;
  void set_reserved_3(bool value);

  // optional .atd.meprocess.LS_Host_Line.Decel_typeType decel_type = 10;
  bool has_decel_type() const;
  void clear_decel_type();
  static const int kDecelTypeFieldNumber = 10;
  ::atd::meprocess::LS_Host_Line_Decel_typeType decel_type() const;
  void set_decel_type(::atd::meprocess::LS_Host_Line_Decel_typeType value);

  // optional float view_range_start = 11;
  bool has_view_range_start() const;
  void clear_view_range_start();
  static const int kViewRangeStartFieldNumber = 11;
  float view_range_start() const;
  void set_view_range_start(float value);

  // optional int32 reserved_2 = 12;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 12;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional float view_range_end = 13;
  bool has_view_range_end() const;
  void clear_view_range_end();
  static const int kViewRangeEndFieldNumber = 13;
  float view_range_end() const;
  void set_view_range_end(float value);

  // optional float marker_width = 15;
  bool has_marker_width() const;
  void clear_marker_width();
  static const int kMarkerWidthFieldNumber = 15;
  float marker_width() const;
  void set_marker_width(float value);

  // optional float marker_width_std = 16;
  bool has_marker_width_std() const;
  void clear_marker_width_std();
  static const int kMarkerWidthStdFieldNumber = 16;
  float marker_width_std() const;
  void set_marker_width_std(float value);

  // optional float dash_average_length = 18;
  bool has_dash_average_length() const;
  void clear_dash_average_length();
  static const int kDashAverageLengthFieldNumber = 18;
  float dash_average_length() const;
  void set_dash_average_length(float value);

  // optional float dash_average_gap = 19;
  bool has_dash_average_gap() const;
  void clear_dash_average_gap();
  static const int kDashAverageGapFieldNumber = 19;
  float dash_average_gap() const;
  void set_dash_average_gap(float value);

  // optional int32 reserved_4 = 20;
  bool has_reserved_4() const;
  void clear_reserved_4();
  static const int kReserved4FieldNumber = 20;
  ::google::protobuf::int32 reserved_4() const;
  void set_reserved_4(::google::protobuf::int32 value);

  // optional float line_c0 = 21;
  bool has_line_c0() const;
  void clear_line_c0();
  static const int kLineC0FieldNumber = 21;
  float line_c0() const;
  void set_line_c0(float value);

  // optional float line_c0_std = 22;
  bool has_line_c0_std() const;
  void clear_line_c0_std();
  static const int kLineC0StdFieldNumber = 22;
  float line_c0_std() const;
  void set_line_c0_std(float value);

  // optional int32 reserved_5 = 23;
  bool has_reserved_5() const;
  void clear_reserved_5();
  static const int kReserved5FieldNumber = 23;
  ::google::protobuf::int32 reserved_5() const;
  void set_reserved_5(::google::protobuf::int32 value);

  // optional float estimated_width = 24;
  bool has_estimated_width() const;
  void clear_estimated_width();
  static const int kEstimatedWidthFieldNumber = 24;
  float estimated_width() const;
  void set_estimated_width(float value);

  // optional float line_c1 = 25;
  bool has_line_c1() const;
  void clear_line_c1();
  static const int kLineC1FieldNumber = 25;
  float line_c1() const;
  void set_line_c1(float value);

  // optional float line_c1_std = 26;
  bool has_line_c1_std() const;
  void clear_line_c1_std();
  static const int kLineC1StdFieldNumber = 26;
  float line_c1_std() const;
  void set_line_c1_std(float value);

  // optional bool reserved_6 = 27;
  bool has_reserved_6() const;
  void clear_reserved_6();
  static const int kReserved6FieldNumber = 27;
  bool reserved_6() const;
  void set_reserved_6(bool value);

  // optional double line_c2 = 28;
  bool has_line_c2() const;
  void clear_line_c2();
  static const int kLineC2FieldNumber = 28;
  double line_c2() const;
  void set_line_c2(double value);

  // optional double line_c2_std = 29;
  bool has_line_c2_std() const;
  void clear_line_c2_std();
  static const int kLineC2StdFieldNumber = 29;
  double line_c2_std() const;
  void set_line_c2_std(double value);

  // optional double line_c3 = 30;
  bool has_line_c3() const;
  void clear_line_c3();
  static const int kLineC3FieldNumber = 30;
  double line_c3() const;
  void set_line_c3(double value);

  // optional double line_c3_std = 31;
  bool has_line_c3_std() const;
  void clear_line_c3_std();
  static const int kLineC3StdFieldNumber = 31;
  double line_c3_std() const;
  void set_line_c3_std(double value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.LS_Host_Line)
 private:
  void set_has_valid();
  void clear_has_valid();
  void set_has_track_id();
  void clear_has_track_id();
  void set_has_age();
  void clear_has_age();
  void set_has_existence_probability();
  void clear_has_existence_probability();
  void set_has_color();
  void clear_has_color();
  void set_has_prediction_type();
  void clear_has_prediction_type();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_type_classification();
  void clear_has_type_classification();
  void set_has_dlm_type();
  void clear_has_dlm_type();
  void set_has_decel_type();
  void clear_has_decel_type();
  void set_has_view_range_start();
  void clear_has_view_range_start();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_view_range_end();
  void clear_has_view_range_end();
  void set_has_crossing();
  void clear_has_crossing();
  void set_has_marker_width();
  void clear_has_marker_width();
  void set_has_marker_width_std();
  void clear_has_marker_width_std();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_dash_average_length();
  void clear_has_dash_average_length();
  void set_has_dash_average_gap();
  void clear_has_dash_average_gap();
  void set_has_reserved_4();
  void clear_has_reserved_4();
  void set_has_line_c0();
  void clear_has_line_c0();
  void set_has_line_c0_std();
  void clear_has_line_c0_std();
  void set_has_reserved_5();
  void clear_has_reserved_5();
  void set_has_estimated_width();
  void clear_has_estimated_width();
  void set_has_line_c1();
  void clear_has_line_c1();
  void set_has_line_c1_std();
  void clear_has_line_c1_std();
  void set_has_reserved_6();
  void clear_has_reserved_6();
  void set_has_line_c2();
  void clear_has_line_c2();
  void set_has_line_c2_std();
  void clear_has_line_c2_std();
  void set_has_line_c3();
  void clear_has_line_c3();
  void set_has_line_c3_std();
  void clear_has_line_c3_std();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 track_id_;
  ::google::protobuf::int32 age_;
  float existence_probability_;
  int color_;
  ::google::protobuf::int32 prediction_type_;
  int type_classification_;
  int dlm_type_;
  bool valid_;
  bool reserved_1_;
  bool crossing_;
  bool reserved_3_;
  int decel_type_;
  float view_range_start_;
  ::google::protobuf::int32 reserved_2_;
  float view_range_end_;
  float marker_width_;
  float marker_width_std_;
  float dash_average_length_;
  float dash_average_gap_;
  ::google::protobuf::int32 reserved_4_;
  float line_c0_;
  float line_c0_std_;
  ::google::protobuf::int32 reserved_5_;
  float estimated_width_;
  float line_c1_;
  float line_c1_std_;
  bool reserved_6_;
  double line_c2_;
  double line_c2_std_;
  double line_c3_;
  double line_c3_std_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LS_Adjacent_Line : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.LS_Adjacent_Line) */ {
 public:
  LS_Adjacent_Line();
  virtual ~LS_Adjacent_Line();

  LS_Adjacent_Line(const LS_Adjacent_Line& from);

  inline LS_Adjacent_Line& operator=(const LS_Adjacent_Line& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LS_Adjacent_Line& default_instance();

  static inline const LS_Adjacent_Line* internal_default_instance() {
    return reinterpret_cast<const LS_Adjacent_Line*>(
               &_LS_Adjacent_Line_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    19;

  void Swap(LS_Adjacent_Line* other);

  // implements Message ----------------------------------------------

  inline LS_Adjacent_Line* New() const PROTOBUF_FINAL { return New(NULL); }

  LS_Adjacent_Line* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LS_Adjacent_Line& from);
  void MergeFrom(const LS_Adjacent_Line& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LS_Adjacent_Line* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LS_Adjacent_Line_ColorType ColorType;
  static const ColorType UNDECIDED =
    LS_Adjacent_Line_ColorType_UNDECIDED;
  static const ColorType WHITE =
    LS_Adjacent_Line_ColorType_WHITE;
  static const ColorType YELLOW_ORANGE_RED =
    LS_Adjacent_Line_ColorType_YELLOW_ORANGE_RED;
  static const ColorType BLUE_GREEN =
    LS_Adjacent_Line_ColorType_BLUE_GREEN;
  static inline bool ColorType_IsValid(int value) {
    return LS_Adjacent_Line_ColorType_IsValid(value);
  }
  static const ColorType ColorType_MIN =
    LS_Adjacent_Line_ColorType_ColorType_MIN;
  static const ColorType ColorType_MAX =
    LS_Adjacent_Line_ColorType_ColorType_MAX;
  static const int ColorType_ARRAYSIZE =
    LS_Adjacent_Line_ColorType_ColorType_ARRAYSIZE;

  typedef LS_Adjacent_Line_Prediction_typeType Prediction_typeType;
  static const Prediction_typeType NONE =
    LS_Adjacent_Line_Prediction_typeType_NONE;
  static const Prediction_typeType OCCLUDED =
    LS_Adjacent_Line_Prediction_typeType_OCCLUDED;
  static const Prediction_typeType OTHER_SIDE =
    LS_Adjacent_Line_Prediction_typeType_OTHER_SIDE;
  static const Prediction_typeType OVERRIDE =
    LS_Adjacent_Line_Prediction_typeType_OVERRIDE;
  static const Prediction_typeType DIST_BASED_EXTRAPOLATION =
    LS_Adjacent_Line_Prediction_typeType_DIST_BASED_EXTRAPOLATION;
  static const Prediction_typeType HEADWAY_ORIENTED =
    LS_Adjacent_Line_Prediction_typeType_HEADWAY_ORIENTED;
  static inline bool Prediction_typeType_IsValid(int value) {
    return LS_Adjacent_Line_Prediction_typeType_IsValid(value);
  }
  static const Prediction_typeType Prediction_typeType_MIN =
    LS_Adjacent_Line_Prediction_typeType_Prediction_typeType_MIN;
  static const Prediction_typeType Prediction_typeType_MAX =
    LS_Adjacent_Line_Prediction_typeType_Prediction_typeType_MAX;
  static const int Prediction_typeType_ARRAYSIZE =
    LS_Adjacent_Line_Prediction_typeType_Prediction_typeType_ARRAYSIZE;

  typedef LS_Adjacent_Line_Type_classType Type_classType;
  static const Type_classType Type_Class_UNDECIDED_ =
    LS_Adjacent_Line_Type_classType_Type_Class_UNDECIDED_;
  static const Type_classType SOLID =
    LS_Adjacent_Line_Type_classType_SOLID;
  static const Type_classType DECELERATION =
    LS_Adjacent_Line_Type_classType_DECELERATION;
  static const Type_classType HOV_LANE =
    LS_Adjacent_Line_Type_classType_HOV_LANE;
  static const Type_classType RESEREVED_1 =
    LS_Adjacent_Line_Type_classType_RESEREVED_1;
  static const Type_classType RESEREVED_2 =
    LS_Adjacent_Line_Type_classType_RESEREVED_2;
  static const Type_classType RESEREVED_3 =
    LS_Adjacent_Line_Type_classType_RESEREVED_3;
  static const Type_classType RESEREVED_4 =
    LS_Adjacent_Line_Type_classType_RESEREVED_4;
  static const Type_classType DASHEDUNDECIDED =
    LS_Adjacent_Line_Type_classType_DASHEDUNDECIDED;
  static const Type_classType ROAD_EDGE_NA =
    LS_Adjacent_Line_Type_classType_ROAD_EDGE_NA;
  static const Type_classType DLM =
    LS_Adjacent_Line_Type_classType_DLM;
  static const Type_classType BOTTS =
    LS_Adjacent_Line_Type_classType_BOTTS;
  static const Type_classType ELEVATED_STRUCTURE_NA =
    LS_Adjacent_Line_Type_classType_ELEVATED_STRUCTURE_NA;
  static const Type_classType CURB_NA =
    LS_Adjacent_Line_Type_classType_CURB_NA;
  static const Type_classType CONES_POLES_NA =
    LS_Adjacent_Line_Type_classType_CONES_POLES_NA;
  static const Type_classType PARKING_CARS_NA =
    LS_Adjacent_Line_Type_classType_PARKING_CARS_NA;
  static inline bool Type_classType_IsValid(int value) {
    return LS_Adjacent_Line_Type_classType_IsValid(value);
  }
  static const Type_classType Type_classType_MIN =
    LS_Adjacent_Line_Type_classType_Type_classType_MIN;
  static const Type_classType Type_classType_MAX =
    LS_Adjacent_Line_Type_classType_Type_classType_MAX;
  static const int Type_classType_ARRAYSIZE =
    LS_Adjacent_Line_Type_classType_Type_classType_ARRAYSIZE;

  typedef LS_Adjacent_Line_Dlm_typeType Dlm_typeType;
  static const Dlm_typeType NOT_DLM =
    LS_Adjacent_Line_Dlm_typeType_NOT_DLM;
  static const Dlm_typeType SOLID_DASHED =
    LS_Adjacent_Line_Dlm_typeType_SOLID_DASHED;
  static const Dlm_typeType DASHED_SOLID =
    LS_Adjacent_Line_Dlm_typeType_DASHED_SOLID;
  static const Dlm_typeType SOLID_SOLID =
    LS_Adjacent_Line_Dlm_typeType_SOLID_SOLID;
  static const Dlm_typeType DASHED_DASHED =
    LS_Adjacent_Line_Dlm_typeType_DASHED_DASHED;
  static const Dlm_typeType DLM_Type_UNDECIDED_ =
    LS_Adjacent_Line_Dlm_typeType_DLM_Type_UNDECIDED_;
  static inline bool Dlm_typeType_IsValid(int value) {
    return LS_Adjacent_Line_Dlm_typeType_IsValid(value);
  }
  static const Dlm_typeType Dlm_typeType_MIN =
    LS_Adjacent_Line_Dlm_typeType_Dlm_typeType_MIN;
  static const Dlm_typeType Dlm_typeType_MAX =
    LS_Adjacent_Line_Dlm_typeType_Dlm_typeType_MAX;
  static const int Dlm_typeType_ARRAYSIZE =
    LS_Adjacent_Line_Dlm_typeType_Dlm_typeType_ARRAYSIZE;

  typedef LS_Adjacent_Line_Decel_typeType Decel_typeType;
  static const Decel_typeType NO_DECEL =
    LS_Adjacent_Line_Decel_typeType_NO_DECEL;
  static const Decel_typeType DECEL_Type_SOLID_ =
    LS_Adjacent_Line_Decel_typeType_DECEL_Type_SOLID_;
  static const Decel_typeType DASHED =
    LS_Adjacent_Line_Decel_typeType_DASHED;
  static const Decel_typeType RESERVED_1 =
    LS_Adjacent_Line_Decel_typeType_RESERVED_1;
  static const Decel_typeType RESERVED_2 =
    LS_Adjacent_Line_Decel_typeType_RESERVED_2;
  static const Decel_typeType RESERVED_3 =
    LS_Adjacent_Line_Decel_typeType_RESERVED_3;
  static inline bool Decel_typeType_IsValid(int value) {
    return LS_Adjacent_Line_Decel_typeType_IsValid(value);
  }
  static const Decel_typeType Decel_typeType_MIN =
    LS_Adjacent_Line_Decel_typeType_Decel_typeType_MIN;
  static const Decel_typeType Decel_typeType_MAX =
    LS_Adjacent_Line_Decel_typeType_Decel_typeType_MAX;
  static const int Decel_typeType_ARRAYSIZE =
    LS_Adjacent_Line_Decel_typeType_Decel_typeType_ARRAYSIZE;

  typedef LS_Adjacent_Line_Line_roleType Line_roleType;
  static const Line_roleType Line_Role_NONE_ =
    LS_Adjacent_Line_Line_roleType_Line_Role_NONE_;
  static const Line_roleType HOST_LEFT =
    LS_Adjacent_Line_Line_roleType_HOST_LEFT;
  static const Line_roleType Line_Role_RESERVED_2_ =
    LS_Adjacent_Line_Line_roleType_Line_Role_RESERVED_2_;
  static const Line_roleType Line_Role_RESERVED_3_ =
    LS_Adjacent_Line_Line_roleType_Line_Role_RESERVED_3_;
  static const Line_roleType RESERVED_4 =
    LS_Adjacent_Line_Line_roleType_RESERVED_4;
  static const Line_roleType RESERVED_0 =
    LS_Adjacent_Line_Line_roleType_RESERVED_0;
  static const Line_roleType RESERVED_6 =
    LS_Adjacent_Line_Line_roleType_RESERVED_6;
  static const Line_roleType RESERVED_7 =
    LS_Adjacent_Line_Line_roleType_RESERVED_7;
  static const Line_roleType HOST_RIGHT =
    LS_Adjacent_Line_Line_roleType_HOST_RIGHT;
  static const Line_roleType NEXT_LEFT__LEFT_LANEMARK =
    LS_Adjacent_Line_Line_roleType_NEXT_LEFT__LEFT_LANEMARK;
  static const Line_roleType NEXT_LEFT__RIGHT_LANEMARK =
    LS_Adjacent_Line_Line_roleType_NEXT_LEFT__RIGHT_LANEMARK;
  static const Line_roleType NEXT_RIGHT__LEFT_LANEMARK =
    LS_Adjacent_Line_Line_roleType_NEXT_RIGHT__LEFT_LANEMARK;
  static const Line_roleType NEXT_RIGHT__RIGHT_LANEMARK =
    LS_Adjacent_Line_Line_roleType_NEXT_RIGHT__RIGHT_LANEMARK;
  static const Line_roleType LEFT_ROAD_EDGE =
    LS_Adjacent_Line_Line_roleType_LEFT_ROAD_EDGE;
  static const Line_roleType RIGHT_ROAD_EDGE =
    LS_Adjacent_Line_Line_roleType_RIGHT_ROAD_EDGE;
  static const Line_roleType Line_Role_RESERVED_1_ =
    LS_Adjacent_Line_Line_roleType_Line_Role_RESERVED_1_;
  static inline bool Line_roleType_IsValid(int value) {
    return LS_Adjacent_Line_Line_roleType_IsValid(value);
  }
  static const Line_roleType Line_roleType_MIN =
    LS_Adjacent_Line_Line_roleType_Line_roleType_MIN;
  static const Line_roleType Line_roleType_MAX =
    LS_Adjacent_Line_Line_roleType_Line_roleType_MAX;
  static const int Line_roleType_ARRAYSIZE =
    LS_Adjacent_Line_Line_roleType_Line_roleType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 lane_track_id = 1;
  bool has_lane_track_id() const;
  void clear_lane_track_id();
  static const int kLaneTrackIdFieldNumber = 1;
  ::google::protobuf::int32 lane_track_id() const;
  void set_lane_track_id(::google::protobuf::int32 value);

  // optional int32 age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::int32 age() const;
  void set_age(::google::protobuf::int32 value);

  // optional float exist_probability = 3;
  bool has_exist_probability() const;
  void clear_exist_probability();
  static const int kExistProbabilityFieldNumber = 3;
  float exist_probability() const;
  void set_exist_probability(float value);

  // optional .atd.meprocess.LS_Adjacent_Line.ColorType color = 4;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 4;
  ::atd::meprocess::LS_Adjacent_Line_ColorType color() const;
  void set_color(::atd::meprocess::LS_Adjacent_Line_ColorType value);

  // optional int32 prediction_type = 5;
  bool has_prediction_type() const;
  void clear_prediction_type();
  static const int kPredictionTypeFieldNumber = 5;
  ::google::protobuf::int32 prediction_type() const;
  void set_prediction_type(::google::protobuf::int32 value);

  // optional int32 reserved_13 = 6;
  bool has_reserved_13() const;
  void clear_reserved_13();
  static const int kReserved13FieldNumber = 6;
  ::google::protobuf::int32 reserved_13() const;
  void set_reserved_13(::google::protobuf::int32 value);

  // optional float view_range_start = 7;
  bool has_view_range_start() const;
  void clear_view_range_start();
  static const int kViewRangeStartFieldNumber = 7;
  float view_range_start() const;
  void set_view_range_start(float value);

  // optional float view_range_end = 8;
  bool has_view_range_end() const;
  void clear_view_range_end();
  static const int kViewRangeEndFieldNumber = 8;
  float view_range_end() const;
  void set_view_range_end(float value);

  // optional int32 reserved_14 = 9;
  bool has_reserved_14() const;
  void clear_reserved_14();
  static const int kReserved14FieldNumber = 9;
  ::google::protobuf::int32 reserved_14() const;
  void set_reserved_14(::google::protobuf::int32 value);

  // optional .atd.meprocess.LS_Adjacent_Line.Type_classType type_class = 10;
  bool has_type_class() const;
  void clear_type_class();
  static const int kTypeClassFieldNumber = 10;
  ::atd::meprocess::LS_Adjacent_Line_Type_classType type_class() const;
  void set_type_class(::atd::meprocess::LS_Adjacent_Line_Type_classType value);

  // optional .atd.meprocess.LS_Adjacent_Line.Dlm_typeType dlm_type = 11;
  bool has_dlm_type() const;
  void clear_dlm_type();
  static const int kDlmTypeFieldNumber = 11;
  ::atd::meprocess::LS_Adjacent_Line_Dlm_typeType dlm_type() const;
  void set_dlm_type(::atd::meprocess::LS_Adjacent_Line_Dlm_typeType value);

  // optional .atd.meprocess.LS_Adjacent_Line.Decel_typeType decel_type = 12;
  bool has_decel_type() const;
  void clear_decel_type();
  static const int kDecelTypeFieldNumber = 12;
  ::atd::meprocess::LS_Adjacent_Line_Decel_typeType decel_type() const;
  void set_decel_type(::atd::meprocess::LS_Adjacent_Line_Decel_typeType value);

  // optional .atd.meprocess.LS_Adjacent_Line.Line_roleType line_role = 13;
  bool has_line_role() const;
  void clear_line_role();
  static const int kLineRoleFieldNumber = 13;
  ::atd::meprocess::LS_Adjacent_Line_Line_roleType line_role() const;
  void set_line_role(::atd::meprocess::LS_Adjacent_Line_Line_roleType value);

  // optional float marker_width = 14;
  bool has_marker_width() const;
  void clear_marker_width();
  static const int kMarkerWidthFieldNumber = 14;
  float marker_width() const;
  void set_marker_width(float value);

  // optional float marker_width_std = 15;
  bool has_marker_width_std() const;
  void clear_marker_width_std();
  static const int kMarkerWidthStdFieldNumber = 15;
  float marker_width_std() const;
  void set_marker_width_std(float value);

  // optional int32 reserved_15 = 16;
  bool has_reserved_15() const;
  void clear_reserved_15();
  static const int kReserved15FieldNumber = 16;
  ::google::protobuf::int32 reserved_15() const;
  void set_reserved_15(::google::protobuf::int32 value);

  // optional float dash_avg_length = 17;
  bool has_dash_avg_length() const;
  void clear_dash_avg_length();
  static const int kDashAvgLengthFieldNumber = 17;
  float dash_avg_length() const;
  void set_dash_avg_length(float value);

  // optional float dash_avg_gap = 18;
  bool has_dash_avg_gap() const;
  void clear_dash_avg_gap();
  static const int kDashAvgGapFieldNumber = 18;
  float dash_avg_gap() const;
  void set_dash_avg_gap(float value);

  // optional double line_c3 = 20;
  bool has_line_c3() const;
  void clear_line_c3();
  static const int kLineC3FieldNumber = 20;
  double line_c3() const;
  void set_line_c3(double value);

  // optional double line_c3_std = 21;
  bool has_line_c3_std() const;
  void clear_line_c3_std();
  static const int kLineC3StdFieldNumber = 21;
  double line_c3_std() const;
  void set_line_c3_std(double value);

  // optional int32 reserved_16 = 19;
  bool has_reserved_16() const;
  void clear_reserved_16();
  static const int kReserved16FieldNumber = 19;
  ::google::protobuf::int32 reserved_16() const;
  void set_reserved_16(::google::protobuf::int32 value);

  // optional float line_c1 = 24;
  bool has_line_c1() const;
  void clear_line_c1();
  static const int kLineC1FieldNumber = 24;
  float line_c1() const;
  void set_line_c1(float value);

  // optional double line_c2 = 22;
  bool has_line_c2() const;
  void clear_line_c2();
  static const int kLineC2FieldNumber = 22;
  double line_c2() const;
  void set_line_c2(double value);

  // optional double line_c2_std = 23;
  bool has_line_c2_std() const;
  void clear_line_c2_std();
  static const int kLineC2StdFieldNumber = 23;
  double line_c2_std() const;
  void set_line_c2_std(double value);

  // optional float line_c1_std = 25;
  bool has_line_c1_std() const;
  void clear_line_c1_std();
  static const int kLineC1StdFieldNumber = 25;
  float line_c1_std() const;
  void set_line_c1_std(float value);

  // optional int32 reserved_17 = 26;
  bool has_reserved_17() const;
  void clear_reserved_17();
  static const int kReserved17FieldNumber = 26;
  ::google::protobuf::int32 reserved_17() const;
  void set_reserved_17(::google::protobuf::int32 value);

  // optional float line_c0 = 27;
  bool has_line_c0() const;
  void clear_line_c0();
  static const int kLineC0FieldNumber = 27;
  float line_c0() const;
  void set_line_c0(float value);

  // optional float line_c0_std = 28;
  bool has_line_c0_std() const;
  void clear_line_c0_std();
  static const int kLineC0StdFieldNumber = 28;
  float line_c0_std() const;
  void set_line_c0_std(float value);

  // optional int32 buffer = 29;
  bool has_buffer() const;
  void clear_buffer();
  static const int kBufferFieldNumber = 29;
  ::google::protobuf::int32 buffer() const;
  void set_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.LS_Adjacent_Line)
 private:
  void set_has_lane_track_id();
  void clear_has_lane_track_id();
  void set_has_age();
  void clear_has_age();
  void set_has_exist_probability();
  void clear_has_exist_probability();
  void set_has_color();
  void clear_has_color();
  void set_has_prediction_type();
  void clear_has_prediction_type();
  void set_has_reserved_13();
  void clear_has_reserved_13();
  void set_has_view_range_start();
  void clear_has_view_range_start();
  void set_has_view_range_end();
  void clear_has_view_range_end();
  void set_has_reserved_14();
  void clear_has_reserved_14();
  void set_has_type_class();
  void clear_has_type_class();
  void set_has_dlm_type();
  void clear_has_dlm_type();
  void set_has_decel_type();
  void clear_has_decel_type();
  void set_has_line_role();
  void clear_has_line_role();
  void set_has_marker_width();
  void clear_has_marker_width();
  void set_has_marker_width_std();
  void clear_has_marker_width_std();
  void set_has_reserved_15();
  void clear_has_reserved_15();
  void set_has_dash_avg_length();
  void clear_has_dash_avg_length();
  void set_has_dash_avg_gap();
  void clear_has_dash_avg_gap();
  void set_has_reserved_16();
  void clear_has_reserved_16();
  void set_has_line_c3();
  void clear_has_line_c3();
  void set_has_line_c3_std();
  void clear_has_line_c3_std();
  void set_has_line_c2();
  void clear_has_line_c2();
  void set_has_line_c2_std();
  void clear_has_line_c2_std();
  void set_has_line_c1();
  void clear_has_line_c1();
  void set_has_line_c1_std();
  void clear_has_line_c1_std();
  void set_has_reserved_17();
  void clear_has_reserved_17();
  void set_has_line_c0();
  void clear_has_line_c0();
  void set_has_line_c0_std();
  void clear_has_line_c0_std();
  void set_has_buffer();
  void clear_has_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 lane_track_id_;
  ::google::protobuf::int32 age_;
  float exist_probability_;
  int color_;
  ::google::protobuf::int32 prediction_type_;
  ::google::protobuf::int32 reserved_13_;
  float view_range_start_;
  float view_range_end_;
  ::google::protobuf::int32 reserved_14_;
  int type_class_;
  int dlm_type_;
  int decel_type_;
  int line_role_;
  float marker_width_;
  float marker_width_std_;
  ::google::protobuf::int32 reserved_15_;
  float dash_avg_length_;
  float dash_avg_gap_;
  double line_c3_;
  double line_c3_std_;
  ::google::protobuf::int32 reserved_16_;
  float line_c1_;
  double line_c2_;
  double line_c2_std_;
  float line_c1_std_;
  ::google::protobuf::int32 reserved_17_;
  float line_c0_;
  float line_c0_std_;
  ::google::protobuf::int32 buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ADVCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.ADVCommon) */ {
 public:
  ADVCommon();
  virtual ~ADVCommon();

  ADVCommon(const ADVCommon& from);

  inline ADVCommon& operator=(const ADVCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ADVCommon& default_instance();

  static inline const ADVCommon* internal_default_instance() {
    return reinterpret_cast<const ADVCommon*>(
               &_ADVCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    20;

  void Swap(ADVCommon* other);

  // implements Message ----------------------------------------------

  inline ADVCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  ADVCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ADVCommon& from);
  void MergeFrom(const ADVCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ADVCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ls_adv_zero_byte = 1;
  bool has_ls_adv_zero_byte() const;
  void clear_ls_adv_zero_byte();
  static const int kLsAdvZeroByteFieldNumber = 1;
  ::google::protobuf::int32 ls_adv_zero_byte() const;
  void set_ls_adv_zero_byte(::google::protobuf::int32 value);

  // optional int32 ls_adv_protocol_version = 2;
  bool has_ls_adv_protocol_version() const;
  void clear_ls_adv_protocol_version();
  static const int kLsAdvProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 ls_adv_protocol_version() const;
  void set_ls_adv_protocol_version(::google::protobuf::int32 value);

  // optional int32 ls_adv__sync_id = 3;
  bool has_ls_adv__sync_id() const;
  void clear_ls_adv__sync_id();
  static const int kLsAdvSyncIdFieldNumber = 3;
  ::google::protobuf::int32 ls_adv__sync_id() const;
  void set_ls_adv__sync_id(::google::protobuf::int32 value);

  // optional int32 ls_intp_number = 4;
  bool has_ls_intp_number() const;
  void clear_ls_intp_number();
  static const int kLsIntpNumberFieldNumber = 4;
  ::google::protobuf::int32 ls_intp_number() const;
  void set_ls_intp_number(::google::protobuf::int32 value);

  // optional int32 reserved_1 = 7;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 7;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional int32 ls_road_vertical_surface_vr = 8;
  bool has_ls_road_vertical_surface_vr() const;
  void clear_ls_road_vertical_surface_vr();
  static const int kLsRoadVerticalSurfaceVrFieldNumber = 8;
  ::google::protobuf::int32 ls_road_vertical_surface_vr() const;
  void set_ls_road_vertical_surface_vr(::google::protobuf::int32 value);

  // optional float ls_road_vertical_surface_c0 = 9;
  bool has_ls_road_vertical_surface_c0() const;
  void clear_ls_road_vertical_surface_c0();
  static const int kLsRoadVerticalSurfaceC0FieldNumber = 9;
  float ls_road_vertical_surface_c0() const;
  void set_ls_road_vertical_surface_c0(float value);

  // optional float ls_road_vertical_surfac_c1 = 10;
  bool has_ls_road_vertical_surfac_c1() const;
  void clear_ls_road_vertical_surfac_c1();
  static const int kLsRoadVerticalSurfacC1FieldNumber = 10;
  float ls_road_vertical_surfac_c1() const;
  void set_ls_road_vertical_surfac_c1(float value);

  // optional double ls_road_vertical_surfac_c2 = 12;
  bool has_ls_road_vertical_surfac_c2() const;
  void clear_ls_road_vertical_surfac_c2();
  static const int kLsRoadVerticalSurfacC2FieldNumber = 12;
  double ls_road_vertical_surfac_c2() const;
  void set_ls_road_vertical_surfac_c2(double value);

  // optional int32 reserved_2 = 11;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 11;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional bool ls_ca_is_construction_area = 5;
  bool has_ls_ca_is_construction_area() const;
  void clear_ls_ca_is_construction_area();
  static const int kLsCaIsConstructionAreaFieldNumber = 5;
  bool ls_ca_is_construction_area() const;
  void set_ls_ca_is_construction_area(bool value);

  // optional bool ls_road_vertical_surface_valid = 6;
  bool has_ls_road_vertical_surface_valid() const;
  void clear_ls_road_vertical_surface_valid();
  static const int kLsRoadVerticalSurfaceValidFieldNumber = 6;
  bool ls_road_vertical_surface_valid() const;
  void set_ls_road_vertical_surface_valid(bool value);

  // optional bool ls_path_pred_valid = 15;
  bool has_ls_path_pred_valid() const;
  void clear_ls_path_pred_valid();
  static const int kLsPathPredValidFieldNumber = 15;
  bool ls_path_pred_valid() const;
  void set_ls_path_pred_valid(bool value);

  // optional bool ls_intp_is_highway_merge_left = 24;
  bool has_ls_intp_is_highway_merge_left() const;
  void clear_ls_intp_is_highway_merge_left();
  static const int kLsIntpIsHighwayMergeLeftFieldNumber = 24;
  bool ls_intp_is_highway_merge_left() const;
  void set_ls_intp_is_highway_merge_left(bool value);

  // optional double ls_road_vertical_surfac_c3 = 14;
  bool has_ls_road_vertical_surfac_c3() const;
  void clear_ls_road_vertical_surfac_c3();
  static const int kLsRoadVerticalSurfacC3FieldNumber = 14;
  double ls_road_vertical_surfac_c3() const;
  void set_ls_road_vertical_surfac_c3(double value);

  // optional int32 reserved_3 = 13;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 13;
  ::google::protobuf::int32 reserved_3() const;
  void set_reserved_3(::google::protobuf::int32 value);

  // optional float ls_path_pred_c0 = 16;
  bool has_ls_path_pred_c0() const;
  void clear_ls_path_pred_c0();
  static const int kLsPathPredC0FieldNumber = 16;
  float ls_path_pred_c0() const;
  void set_ls_path_pred_c0(float value);

  // optional int32 reserved_4 = 17;
  bool has_reserved_4() const;
  void clear_reserved_4();
  static const int kReserved4FieldNumber = 17;
  ::google::protobuf::int32 reserved_4() const;
  void set_reserved_4(::google::protobuf::int32 value);

  // optional float ls_path_pred_c1 = 18;
  bool has_ls_path_pred_c1() const;
  void clear_ls_path_pred_c1();
  static const int kLsPathPredC1FieldNumber = 18;
  float ls_path_pred_c1() const;
  void set_ls_path_pred_c1(float value);

  // optional double ls_path_pred_c2 = 19;
  bool has_ls_path_pred_c2() const;
  void clear_ls_path_pred_c2();
  static const int kLsPathPredC2FieldNumber = 19;
  double ls_path_pred_c2() const;
  void set_ls_path_pred_c2(double value);

  // optional double ls_path_pred_c3 = 21;
  bool has_ls_path_pred_c3() const;
  void clear_ls_path_pred_c3();
  static const int kLsPathPredC3FieldNumber = 21;
  double ls_path_pred_c3() const;
  void set_ls_path_pred_c3(double value);

  // optional int32 reserved_5 = 20;
  bool has_reserved_5() const;
  void clear_reserved_5();
  static const int kReserved5FieldNumber = 20;
  ::google::protobuf::int32 reserved_5() const;
  void set_reserved_5(::google::protobuf::int32 value);

  // optional float ls_path_pred_conf = 22;
  bool has_ls_path_pred_conf() const;
  void clear_ls_path_pred_conf();
  static const int kLsPathPredConfFieldNumber = 22;
  float ls_path_pred_conf() const;
  void set_ls_path_pred_conf(float value);

  // optional float ls_path_pred_half_width = 23;
  bool has_ls_path_pred_half_width() const;
  void clear_ls_path_pred_half_width();
  static const int kLsPathPredHalfWidthFieldNumber = 23;
  float ls_path_pred_half_width() const;
  void set_ls_path_pred_half_width(float value);

  // optional bool ls_intp_is_highway_merge_right = 25;
  bool has_ls_intp_is_highway_merge_right() const;
  void clear_ls_intp_is_highway_merge_right();
  static const int kLsIntpIsHighwayMergeRightFieldNumber = 25;
  bool ls_intp_is_highway_merge_right() const;
  void set_ls_intp_is_highway_merge_right(bool value);

  // optional bool ls_intp_is_highway_exit_left = 26;
  bool has_ls_intp_is_highway_exit_left() const;
  void clear_ls_intp_is_highway_exit_left();
  static const int kLsIntpIsHighwayExitLeftFieldNumber = 26;
  bool ls_intp_is_highway_exit_left() const;
  void set_ls_intp_is_highway_exit_left(bool value);

  // optional bool ls_intp_is_highway_exit_right = 27;
  bool has_ls_intp_is_highway_exit_right() const;
  void clear_ls_intp_is_highway_exit_right();
  static const int kLsIntpIsHighwayExitRightFieldNumber = 27;
  bool ls_intp_is_highway_exit_right() const;
  void set_ls_intp_is_highway_exit_right(bool value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.ADVCommon)
 private:
  void set_has_ls_adv_zero_byte();
  void clear_has_ls_adv_zero_byte();
  void set_has_ls_adv_protocol_version();
  void clear_has_ls_adv_protocol_version();
  void set_has_ls_adv__sync_id();
  void clear_has_ls_adv__sync_id();
  void set_has_ls_intp_number();
  void clear_has_ls_intp_number();
  void set_has_ls_ca_is_construction_area();
  void clear_has_ls_ca_is_construction_area();
  void set_has_ls_road_vertical_surface_valid();
  void clear_has_ls_road_vertical_surface_valid();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_ls_road_vertical_surface_vr();
  void clear_has_ls_road_vertical_surface_vr();
  void set_has_ls_road_vertical_surface_c0();
  void clear_has_ls_road_vertical_surface_c0();
  void set_has_ls_road_vertical_surfac_c1();
  void clear_has_ls_road_vertical_surfac_c1();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_ls_road_vertical_surfac_c2();
  void clear_has_ls_road_vertical_surfac_c2();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_ls_road_vertical_surfac_c3();
  void clear_has_ls_road_vertical_surfac_c3();
  void set_has_ls_path_pred_valid();
  void clear_has_ls_path_pred_valid();
  void set_has_ls_path_pred_c0();
  void clear_has_ls_path_pred_c0();
  void set_has_reserved_4();
  void clear_has_reserved_4();
  void set_has_ls_path_pred_c1();
  void clear_has_ls_path_pred_c1();
  void set_has_ls_path_pred_c2();
  void clear_has_ls_path_pred_c2();
  void set_has_reserved_5();
  void clear_has_reserved_5();
  void set_has_ls_path_pred_c3();
  void clear_has_ls_path_pred_c3();
  void set_has_ls_path_pred_conf();
  void clear_has_ls_path_pred_conf();
  void set_has_ls_path_pred_half_width();
  void clear_has_ls_path_pred_half_width();
  void set_has_ls_intp_is_highway_merge_left();
  void clear_has_ls_intp_is_highway_merge_left();
  void set_has_ls_intp_is_highway_merge_right();
  void clear_has_ls_intp_is_highway_merge_right();
  void set_has_ls_intp_is_highway_exit_left();
  void clear_has_ls_intp_is_highway_exit_left();
  void set_has_ls_intp_is_highway_exit_right();
  void clear_has_ls_intp_is_highway_exit_right();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ls_adv_zero_byte_;
  ::google::protobuf::int32 ls_adv_protocol_version_;
  ::google::protobuf::int32 ls_adv__sync_id_;
  ::google::protobuf::int32 ls_intp_number_;
  ::google::protobuf::int32 reserved_1_;
  ::google::protobuf::int32 ls_road_vertical_surface_vr_;
  float ls_road_vertical_surface_c0_;
  float ls_road_vertical_surfac_c1_;
  double ls_road_vertical_surfac_c2_;
  ::google::protobuf::int32 reserved_2_;
  bool ls_ca_is_construction_area_;
  bool ls_road_vertical_surface_valid_;
  bool ls_path_pred_valid_;
  bool ls_intp_is_highway_merge_left_;
  double ls_road_vertical_surfac_c3_;
  ::google::protobuf::int32 reserved_3_;
  float ls_path_pred_c0_;
  ::google::protobuf::int32 reserved_4_;
  float ls_path_pred_c1_;
  double ls_path_pred_c2_;
  double ls_path_pred_c3_;
  ::google::protobuf::int32 reserved_5_;
  float ls_path_pred_conf_;
  float ls_path_pred_half_width_;
  bool ls_intp_is_highway_merge_right_;
  bool ls_intp_is_highway_exit_left_;
  bool ls_intp_is_highway_exit_right_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_LS_ADV : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_LS_ADV) */ {
 public:
  Dt_Record_LS_ADV();
  virtual ~Dt_Record_LS_ADV();

  Dt_Record_LS_ADV(const Dt_Record_LS_ADV& from);

  inline Dt_Record_LS_ADV& operator=(const Dt_Record_LS_ADV& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_LS_ADV& default_instance();

  static inline const Dt_Record_LS_ADV* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_LS_ADV*>(
               &_Dt_Record_LS_ADV_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    21;

  void Swap(Dt_Record_LS_ADV* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_LS_ADV* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_LS_ADV* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_LS_ADV& from);
  void MergeFrom(const Dt_Record_LS_ADV& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_LS_ADV* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.LS_INTP dt_array_8_ls_intp = 4;
  int dt_array_8_ls_intp_size() const;
  void clear_dt_array_8_ls_intp();
  static const int kDtArray8LsIntpFieldNumber = 4;
  const ::atd::meprocess::LS_INTP& dt_array_8_ls_intp(int index) const;
  ::atd::meprocess::LS_INTP* mutable_dt_array_8_ls_intp(int index);
  ::atd::meprocess::LS_INTP* add_dt_array_8_ls_intp();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_INTP >*
      mutable_dt_array_8_ls_intp();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_INTP >&
      dt_array_8_ls_intp() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.ADVCommon stadvcommon = 3;
  bool has_stadvcommon() const;
  void clear_stadvcommon();
  static const int kStadvcommonFieldNumber = 3;
  const ::atd::meprocess::ADVCommon& stadvcommon() const;
  ::atd::meprocess::ADVCommon* mutable_stadvcommon();
  ::atd::meprocess::ADVCommon* release_stadvcommon();
  void set_allocated_stadvcommon(::atd::meprocess::ADVCommon* stadvcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_LS_ADV)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stadvcommon();
  void clear_has_stadvcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_INTP > dt_array_8_ls_intp_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::ADVCommon* stadvcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LS_INTP : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.LS_INTP) */ {
 public:
  LS_INTP();
  virtual ~LS_INTP();

  LS_INTP(const LS_INTP& from);

  inline LS_INTP& operator=(const LS_INTP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LS_INTP& default_instance();

  static inline const LS_INTP* internal_default_instance() {
    return reinterpret_cast<const LS_INTP*>(
               &_LS_INTP_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    22;

  void Swap(LS_INTP* other);

  // implements Message ----------------------------------------------

  inline LS_INTP* New() const PROTOBUF_FINAL { return New(NULL); }

  LS_INTP* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LS_INTP& from);
  void MergeFrom(const LS_INTP& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LS_INTP* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LS_INTP_Intp_typeType Intp_typeType;
  static const Intp_typeType SPLIT =
    LS_INTP_Intp_typeType_SPLIT;
  static const Intp_typeType MERGE =
    LS_INTP_Intp_typeType_MERGE;
  static inline bool Intp_typeType_IsValid(int value) {
    return LS_INTP_Intp_typeType_IsValid(value);
  }
  static const Intp_typeType Intp_typeType_MIN =
    LS_INTP_Intp_typeType_Intp_typeType_MIN;
  static const Intp_typeType Intp_typeType_MAX =
    LS_INTP_Intp_typeType_Intp_typeType_MAX;
  static const int Intp_typeType_ARRAYSIZE =
    LS_INTP_Intp_typeType_Intp_typeType_ARRAYSIZE;

  typedef LS_INTP_Intp_line_roleType Intp_line_roleType;
  static const Intp_line_roleType NONE =
    LS_INTP_Intp_line_roleType_NONE;
  static const Intp_line_roleType HOST_LEFT =
    LS_INTP_Intp_line_roleType_HOST_LEFT;
  static const Intp_line_roleType RESERVED_2 =
    LS_INTP_Intp_line_roleType_RESERVED_2;
  static const Intp_line_roleType RESERVED_3 =
    LS_INTP_Intp_line_roleType_RESERVED_3;
  static const Intp_line_roleType RESERVED_4 =
    LS_INTP_Intp_line_roleType_RESERVED_4;
  static const Intp_line_roleType RESERVED_5 =
    LS_INTP_Intp_line_roleType_RESERVED_5;
  static const Intp_line_roleType RESERVED_6 =
    LS_INTP_Intp_line_roleType_RESERVED_6;
  static const Intp_line_roleType RESERVED_7 =
    LS_INTP_Intp_line_roleType_RESERVED_7;
  static const Intp_line_roleType HOST_RIGHT =
    LS_INTP_Intp_line_roleType_HOST_RIGHT;
  static const Intp_line_roleType NEXT_LEFT__LEFT_LANEMARK =
    LS_INTP_Intp_line_roleType_NEXT_LEFT__LEFT_LANEMARK;
  static const Intp_line_roleType NEXT_LEFT__RIGHT_LANEMARK =
    LS_INTP_Intp_line_roleType_NEXT_LEFT__RIGHT_LANEMARK;
  static const Intp_line_roleType NEXT_RIGHT__LEFT_LANEMARK =
    LS_INTP_Intp_line_roleType_NEXT_RIGHT__LEFT_LANEMARK;
  static const Intp_line_roleType NEXT_RIGHT__RIGHT_LANEMARK =
    LS_INTP_Intp_line_roleType_NEXT_RIGHT__RIGHT_LANEMARK;
  static const Intp_line_roleType LEFT_ROAD_EDGE =
    LS_INTP_Intp_line_roleType_LEFT_ROAD_EDGE;
  static const Intp_line_roleType RIGHT_ROAD_EDGE =
    LS_INTP_Intp_line_roleType_RIGHT_ROAD_EDGE;
  static const Intp_line_roleType RESERVED_1 =
    LS_INTP_Intp_line_roleType_RESERVED_1;
  static inline bool Intp_line_roleType_IsValid(int value) {
    return LS_INTP_Intp_line_roleType_IsValid(value);
  }
  static const Intp_line_roleType Intp_line_roleType_MIN =
    LS_INTP_Intp_line_roleType_Intp_line_roleType_MIN;
  static const Intp_line_roleType Intp_line_roleType_MAX =
    LS_INTP_Intp_line_roleType_Intp_line_roleType_MAX;
  static const int Intp_line_roleType_ARRAYSIZE =
    LS_INTP_Intp_line_roleType_Intp_line_roleType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional .atd.meprocess.LS_INTP.Intp_typeType intp_type = 1;
  bool has_intp_type() const;
  void clear_intp_type();
  static const int kIntpTypeFieldNumber = 1;
  ::atd::meprocess::LS_INTP_Intp_typeType intp_type() const;
  void set_intp_type(::atd::meprocess::LS_INTP_Intp_typeType value);

  // optional bool intp_is_start = 2;
  bool has_intp_is_start() const;
  void clear_intp_is_start();
  static const int kIntpIsStartFieldNumber = 2;
  bool intp_is_start() const;
  void set_intp_is_start(bool value);

  // optional bool intp_is_valid = 3;
  bool has_intp_is_valid() const;
  void clear_intp_is_valid();
  static const int kIntpIsValidFieldNumber = 3;
  bool intp_is_valid() const;
  void set_intp_is_valid(bool value);

  // optional .atd.meprocess.LS_INTP.Intp_line_roleType intp_line_role = 4;
  bool has_intp_line_role() const;
  void clear_intp_line_role();
  static const int kIntpLineRoleFieldNumber = 4;
  ::atd::meprocess::LS_INTP_Intp_line_roleType intp_line_role() const;
  void set_intp_line_role(::atd::meprocess::LS_INTP_Intp_line_roleType value);

  // optional float intp_lat_distance = 5;
  bool has_intp_lat_distance() const;
  void clear_intp_lat_distance();
  static const int kIntpLatDistanceFieldNumber = 5;
  float intp_lat_distance() const;
  void set_intp_lat_distance(float value);

  // optional int32 reserved_6 = 6;
  bool has_reserved_6() const;
  void clear_reserved_6();
  static const int kReserved6FieldNumber = 6;
  ::google::protobuf::int32 reserved_6() const;
  void set_reserved_6(::google::protobuf::int32 value);

  // optional float intp_long_distance = 7;
  bool has_intp_long_distance() const;
  void clear_intp_long_distance();
  static const int kIntpLongDistanceFieldNumber = 7;
  float intp_long_distance() const;
  void set_intp_long_distance(float value);

  // optional int32 intp_buffer = 8;
  bool has_intp_buffer() const;
  void clear_intp_buffer();
  static const int kIntpBufferFieldNumber = 8;
  ::google::protobuf::int32 intp_buffer() const;
  void set_intp_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.LS_INTP)
 private:
  void set_has_intp_type();
  void clear_has_intp_type();
  void set_has_intp_is_start();
  void clear_has_intp_is_start();
  void set_has_intp_is_valid();
  void clear_has_intp_is_valid();
  void set_has_intp_line_role();
  void clear_has_intp_line_role();
  void set_has_intp_lat_distance();
  void clear_has_intp_lat_distance();
  void set_has_reserved_6();
  void clear_has_reserved_6();
  void set_has_intp_long_distance();
  void clear_has_intp_long_distance();
  void set_has_intp_buffer();
  void clear_has_intp_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int intp_type_;
  bool intp_is_start_;
  bool intp_is_valid_;
  int intp_line_role_;
  float intp_lat_distance_;
  ::google::protobuf::int32 reserved_6_;
  float intp_long_distance_;
  ::google::protobuf::int32 intp_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoadEdgeCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.RoadEdgeCommon) */ {
 public:
  RoadEdgeCommon();
  virtual ~RoadEdgeCommon();

  RoadEdgeCommon(const RoadEdgeCommon& from);

  inline RoadEdgeCommon& operator=(const RoadEdgeCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RoadEdgeCommon& default_instance();

  static inline const RoadEdgeCommon* internal_default_instance() {
    return reinterpret_cast<const RoadEdgeCommon*>(
               &_RoadEdgeCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    23;

  void Swap(RoadEdgeCommon* other);

  // implements Message ----------------------------------------------

  inline RoadEdgeCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  RoadEdgeCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RoadEdgeCommon& from);
  void MergeFrom(const RoadEdgeCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoadEdgeCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ls_road_edge_zero_byte = 1;
  bool has_ls_road_edge_zero_byte() const;
  void clear_ls_road_edge_zero_byte();
  static const int kLsRoadEdgeZeroByteFieldNumber = 1;
  ::google::protobuf::int32 ls_road_edge_zero_byte() const;
  void set_ls_road_edge_zero_byte(::google::protobuf::int32 value);

  // optional int32 ls_road_edge_protocol_version = 2;
  bool has_ls_road_edge_protocol_version() const;
  void clear_ls_road_edge_protocol_version();
  static const int kLsRoadEdgeProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 ls_road_edge_protocol_version() const;
  void set_ls_road_edge_protocol_version(::google::protobuf::int32 value);

  // optional int32 ls_road_edge_sync_id = 3;
  bool has_ls_road_edge_sync_id() const;
  void clear_ls_road_edge_sync_id();
  static const int kLsRoadEdgeSyncIdFieldNumber = 3;
  ::google::protobuf::int32 ls_road_edge_sync_id() const;
  void set_ls_road_edge_sync_id(::google::protobuf::int32 value);

  // optional int32 ls_road_edge_number = 4;
  bool has_ls_road_edge_number() const;
  void clear_ls_road_edge_number();
  static const int kLsRoadEdgeNumberFieldNumber = 4;
  ::google::protobuf::int32 ls_road_edge_number() const;
  void set_ls_road_edge_number(::google::protobuf::int32 value);

  // optional int32 ls_road_edge_header_buffer = 5;
  bool has_ls_road_edge_header_buffer() const;
  void clear_ls_road_edge_header_buffer();
  static const int kLsRoadEdgeHeaderBufferFieldNumber = 5;
  ::google::protobuf::int32 ls_road_edge_header_buffer() const;
  void set_ls_road_edge_header_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.RoadEdgeCommon)
 private:
  void set_has_ls_road_edge_zero_byte();
  void clear_has_ls_road_edge_zero_byte();
  void set_has_ls_road_edge_protocol_version();
  void clear_has_ls_road_edge_protocol_version();
  void set_has_ls_road_edge_sync_id();
  void clear_has_ls_road_edge_sync_id();
  void set_has_ls_road_edge_number();
  void clear_has_ls_road_edge_number();
  void set_has_ls_road_edge_header_buffer();
  void clear_has_ls_road_edge_header_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ls_road_edge_zero_byte_;
  ::google::protobuf::int32 ls_road_edge_protocol_version_;
  ::google::protobuf::int32 ls_road_edge_sync_id_;
  ::google::protobuf::int32 ls_road_edge_number_;
  ::google::protobuf::int32 ls_road_edge_header_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_LS_Road_Edge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_LS_Road_Edge) */ {
 public:
  Dt_Record_LS_Road_Edge();
  virtual ~Dt_Record_LS_Road_Edge();

  Dt_Record_LS_Road_Edge(const Dt_Record_LS_Road_Edge& from);

  inline Dt_Record_LS_Road_Edge& operator=(const Dt_Record_LS_Road_Edge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_LS_Road_Edge& default_instance();

  static inline const Dt_Record_LS_Road_Edge* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_LS_Road_Edge*>(
               &_Dt_Record_LS_Road_Edge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    24;

  void Swap(Dt_Record_LS_Road_Edge* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_LS_Road_Edge* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_LS_Road_Edge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_LS_Road_Edge& from);
  void MergeFrom(const Dt_Record_LS_Road_Edge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_LS_Road_Edge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.RoadEdge dt_array_4_ls_road_edge = 4;
  int dt_array_4_ls_road_edge_size() const;
  void clear_dt_array_4_ls_road_edge();
  static const int kDtArray4LsRoadEdgeFieldNumber = 4;
  const ::atd::meprocess::RoadEdge& dt_array_4_ls_road_edge(int index) const;
  ::atd::meprocess::RoadEdge* mutable_dt_array_4_ls_road_edge(int index);
  ::atd::meprocess::RoadEdge* add_dt_array_4_ls_road_edge();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::RoadEdge >*
      mutable_dt_array_4_ls_road_edge();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::RoadEdge >&
      dt_array_4_ls_road_edge() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.RoadEdgeCommon stroadedgecommon = 3;
  bool has_stroadedgecommon() const;
  void clear_stroadedgecommon();
  static const int kStroadedgecommonFieldNumber = 3;
  const ::atd::meprocess::RoadEdgeCommon& stroadedgecommon() const;
  ::atd::meprocess::RoadEdgeCommon* mutable_stroadedgecommon();
  ::atd::meprocess::RoadEdgeCommon* release_stroadedgecommon();
  void set_allocated_stroadedgecommon(::atd::meprocess::RoadEdgeCommon* stroadedgecommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_LS_Road_Edge)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stroadedgecommon();
  void clear_has_stroadedgecommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::RoadEdge > dt_array_4_ls_road_edge_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::RoadEdgeCommon* stroadedgecommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RoadEdge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.RoadEdge) */ {
 public:
  RoadEdge();
  virtual ~RoadEdge();

  RoadEdge(const RoadEdge& from);

  inline RoadEdge& operator=(const RoadEdge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const RoadEdge& default_instance();

  static inline const RoadEdge* internal_default_instance() {
    return reinterpret_cast<const RoadEdge*>(
               &_RoadEdge_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    25;

  void Swap(RoadEdge* other);

  // implements Message ----------------------------------------------

  inline RoadEdge* New() const PROTOBUF_FINAL { return New(NULL); }

  RoadEdge* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const RoadEdge& from);
  void MergeFrom(const RoadEdge& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RoadEdge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef RoadEdge_Ls_road_edge_type_avg__classType Ls_road_edge_type_avg__classType;
  static const Ls_road_edge_type_avg__classType UNDECIDED =
    RoadEdge_Ls_road_edge_type_avg__classType_UNDECIDED;
  static const Ls_road_edge_type_avg__classType ROAD_EDGE =
    RoadEdge_Ls_road_edge_type_avg__classType_ROAD_EDGE;
  static const Ls_road_edge_type_avg__classType ELEVATED_STRUCTURE =
    RoadEdge_Ls_road_edge_type_avg__classType_ELEVATED_STRUCTURE;
  static const Ls_road_edge_type_avg__classType CURB =
    RoadEdge_Ls_road_edge_type_avg__classType_CURB;
  static const Ls_road_edge_type_avg__classType CONES_POLES =
    RoadEdge_Ls_road_edge_type_avg__classType_CONES_POLES;
  static const Ls_road_edge_type_avg__classType PARKING_CARS =
    RoadEdge_Ls_road_edge_type_avg__classType_PARKING_CARS;
  static inline bool Ls_road_edge_type_avg__classType_IsValid(int value) {
    return RoadEdge_Ls_road_edge_type_avg__classType_IsValid(value);
  }
  static const Ls_road_edge_type_avg__classType Ls_road_edge_type_avg__classType_MIN =
    RoadEdge_Ls_road_edge_type_avg__classType_Ls_road_edge_type_avg__classType_MIN;
  static const Ls_road_edge_type_avg__classType Ls_road_edge_type_avg__classType_MAX =
    RoadEdge_Ls_road_edge_type_avg__classType_Ls_road_edge_type_avg__classType_MAX;
  static const int Ls_road_edge_type_avg__classType_ARRAYSIZE =
    RoadEdge_Ls_road_edge_type_avg__classType_Ls_road_edge_type_avg__classType_ARRAYSIZE;

  typedef RoadEdge_Ls_road_edge_prediction_typeType Ls_road_edge_prediction_typeType;
  static const Ls_road_edge_prediction_typeType NONE =
    RoadEdge_Ls_road_edge_prediction_typeType_NONE;
  static const Ls_road_edge_prediction_typeType OCCLUDED =
    RoadEdge_Ls_road_edge_prediction_typeType_OCCLUDED;
  static const Ls_road_edge_prediction_typeType OTHER_SIDE =
    RoadEdge_Ls_road_edge_prediction_typeType_OTHER_SIDE;
  static const Ls_road_edge_prediction_typeType OVERRIDE =
    RoadEdge_Ls_road_edge_prediction_typeType_OVERRIDE;
  static const Ls_road_edge_prediction_typeType DIST_BASED_EXTRAPOLATION =
    RoadEdge_Ls_road_edge_prediction_typeType_DIST_BASED_EXTRAPOLATION;
  static const Ls_road_edge_prediction_typeType HEADWAY_ORIENTED =
    RoadEdge_Ls_road_edge_prediction_typeType_HEADWAY_ORIENTED;
  static inline bool Ls_road_edge_prediction_typeType_IsValid(int value) {
    return RoadEdge_Ls_road_edge_prediction_typeType_IsValid(value);
  }
  static const Ls_road_edge_prediction_typeType Ls_road_edge_prediction_typeType_MIN =
    RoadEdge_Ls_road_edge_prediction_typeType_Ls_road_edge_prediction_typeType_MIN;
  static const Ls_road_edge_prediction_typeType Ls_road_edge_prediction_typeType_MAX =
    RoadEdge_Ls_road_edge_prediction_typeType_Ls_road_edge_prediction_typeType_MAX;
  static const int Ls_road_edge_prediction_typeType_ARRAYSIZE =
    RoadEdge_Ls_road_edge_prediction_typeType_Ls_road_edge_prediction_typeType_ARRAYSIZE;

  typedef RoadEdge_Ls_road_edge_sideType Ls_road_edge_sideType;
  static const Ls_road_edge_sideType UNKNOWN =
    RoadEdge_Ls_road_edge_sideType_UNKNOWN;
  static const Ls_road_edge_sideType LEFT =
    RoadEdge_Ls_road_edge_sideType_LEFT;
  static const Ls_road_edge_sideType RIGHT =
    RoadEdge_Ls_road_edge_sideType_RIGHT;
  static inline bool Ls_road_edge_sideType_IsValid(int value) {
    return RoadEdge_Ls_road_edge_sideType_IsValid(value);
  }
  static const Ls_road_edge_sideType Ls_road_edge_sideType_MIN =
    RoadEdge_Ls_road_edge_sideType_Ls_road_edge_sideType_MIN;
  static const Ls_road_edge_sideType Ls_road_edge_sideType_MAX =
    RoadEdge_Ls_road_edge_sideType_Ls_road_edge_sideType_MAX;
  static const int Ls_road_edge_sideType_ARRAYSIZE =
    RoadEdge_Ls_road_edge_sideType_Ls_road_edge_sideType_ARRAYSIZE;

  typedef RoadEdge_Ls_road_edge_indexType Ls_road_edge_indexType;
  static const Ls_road_edge_indexType LS_Road_Edge_Index_UNKNOWN_ =
    RoadEdge_Ls_road_edge_indexType_LS_Road_Edge_Index_UNKNOWN_;
  static const Ls_road_edge_indexType FIRST =
    RoadEdge_Ls_road_edge_indexType_FIRST;
  static const Ls_road_edge_indexType SECOND =
    RoadEdge_Ls_road_edge_indexType_SECOND;
  static const Ls_road_edge_indexType RESERVED =
    RoadEdge_Ls_road_edge_indexType_RESERVED;
  static inline bool Ls_road_edge_indexType_IsValid(int value) {
    return RoadEdge_Ls_road_edge_indexType_IsValid(value);
  }
  static const Ls_road_edge_indexType Ls_road_edge_indexType_MIN =
    RoadEdge_Ls_road_edge_indexType_Ls_road_edge_indexType_MIN;
  static const Ls_road_edge_indexType Ls_road_edge_indexType_MAX =
    RoadEdge_Ls_road_edge_indexType_Ls_road_edge_indexType_MAX;
  static const int Ls_road_edge_indexType_ARRAYSIZE =
    RoadEdge_Ls_road_edge_indexType_Ls_road_edge_indexType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 ls_road_edge_id = 1;
  bool has_ls_road_edge_id() const;
  void clear_ls_road_edge_id();
  static const int kLsRoadEdgeIdFieldNumber = 1;
  ::google::protobuf::int32 ls_road_edge_id() const;
  void set_ls_road_edge_id(::google::protobuf::int32 value);

  // optional int32 ls_road_edge_age = 2;
  bool has_ls_road_edge_age() const;
  void clear_ls_road_edge_age();
  static const int kLsRoadEdgeAgeFieldNumber = 2;
  ::google::protobuf::int32 ls_road_edge_age() const;
  void set_ls_road_edge_age(::google::protobuf::int32 value);

  // optional float ls_road_edge_exist_prob = 3;
  bool has_ls_road_edge_exist_prob() const;
  void clear_ls_road_edge_exist_prob();
  static const int kLsRoadEdgeExistProbFieldNumber = 3;
  float ls_road_edge_exist_prob() const;
  void set_ls_road_edge_exist_prob(float value);

  // optional .atd.meprocess.RoadEdge.Ls_road_edge_type_avg__classType ls_road_edge_type_avg__class = 4;
  bool has_ls_road_edge_type_avg__class() const;
  void clear_ls_road_edge_type_avg__class();
  static const int kLsRoadEdgeTypeAvgClassFieldNumber = 4;
  ::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType ls_road_edge_type_avg__class() const;
  void set_ls_road_edge_type_avg__class(::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType value);

  // optional int32 ls_road_edge_prediction_type = 5;
  bool has_ls_road_edge_prediction_type() const;
  void clear_ls_road_edge_prediction_type();
  static const int kLsRoadEdgePredictionTypeFieldNumber = 5;
  ::google::protobuf::int32 ls_road_edge_prediction_type() const;
  void set_ls_road_edge_prediction_type(::google::protobuf::int32 value);

  // optional float ls_road_edge_height = 6;
  bool has_ls_road_edge_height() const;
  void clear_ls_road_edge_height();
  static const int kLsRoadEdgeHeightFieldNumber = 6;
  float ls_road_edge_height() const;
  void set_ls_road_edge_height(float value);

  // optional float ls_road_edge_view_range_start = 7;
  bool has_ls_road_edge_view_range_start() const;
  void clear_ls_road_edge_view_range_start();
  static const int kLsRoadEdgeViewRangeStartFieldNumber = 7;
  float ls_road_edge_view_range_start() const;
  void set_ls_road_edge_view_range_start(float value);

  // optional int32 reserved_1 = 8;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 8;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional float ls_road_edge_view_range_end = 9;
  bool has_ls_road_edge_view_range_end() const;
  void clear_ls_road_edge_view_range_end();
  static const int kLsRoadEdgeViewRangeEndFieldNumber = 9;
  float ls_road_edge_view_range_end() const;
  void set_ls_road_edge_view_range_end(float value);

  // optional .atd.meprocess.RoadEdge.Ls_road_edge_sideType ls_road_edge_side = 10;
  bool has_ls_road_edge_side() const;
  void clear_ls_road_edge_side();
  static const int kLsRoadEdgeSideFieldNumber = 10;
  ::atd::meprocess::RoadEdge_Ls_road_edge_sideType ls_road_edge_side() const;
  void set_ls_road_edge_side(::atd::meprocess::RoadEdge_Ls_road_edge_sideType value);

  // optional .atd.meprocess.RoadEdge.Ls_road_edge_indexType ls_road_edge_index = 11;
  bool has_ls_road_edge_index() const;
  void clear_ls_road_edge_index();
  static const int kLsRoadEdgeIndexFieldNumber = 11;
  ::atd::meprocess::RoadEdge_Ls_road_edge_indexType ls_road_edge_index() const;
  void set_ls_road_edge_index(::atd::meprocess::RoadEdge_Ls_road_edge_indexType value);

  // optional int32 reserved_2 = 12;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 12;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional double ls_road_edge_line_c3 = 13;
  bool has_ls_road_edge_line_c3() const;
  void clear_ls_road_edge_line_c3();
  static const int kLsRoadEdgeLineC3FieldNumber = 13;
  double ls_road_edge_line_c3() const;
  void set_ls_road_edge_line_c3(double value);

  // optional double ls_road_edge_line_c3_std = 14;
  bool has_ls_road_edge_line_c3_std() const;
  void clear_ls_road_edge_line_c3_std();
  static const int kLsRoadEdgeLineC3StdFieldNumber = 14;
  double ls_road_edge_line_c3_std() const;
  void set_ls_road_edge_line_c3_std(double value);

  // optional double ls_road_edge_line_c2 = 15;
  bool has_ls_road_edge_line_c2() const;
  void clear_ls_road_edge_line_c2();
  static const int kLsRoadEdgeLineC2FieldNumber = 15;
  double ls_road_edge_line_c2() const;
  void set_ls_road_edge_line_c2(double value);

  // optional double ls_road_edge_line_c2_std = 16;
  bool has_ls_road_edge_line_c2_std() const;
  void clear_ls_road_edge_line_c2_std();
  static const int kLsRoadEdgeLineC2StdFieldNumber = 16;
  double ls_road_edge_line_c2_std() const;
  void set_ls_road_edge_line_c2_std(double value);

  // optional float ls_road_edge_line_c1 = 17;
  bool has_ls_road_edge_line_c1() const;
  void clear_ls_road_edge_line_c1();
  static const int kLsRoadEdgeLineC1FieldNumber = 17;
  float ls_road_edge_line_c1() const;
  void set_ls_road_edge_line_c1(float value);

  // optional float ls_road_edge_line_c1_std = 18;
  bool has_ls_road_edge_line_c1_std() const;
  void clear_ls_road_edge_line_c1_std();
  static const int kLsRoadEdgeLineC1StdFieldNumber = 18;
  float ls_road_edge_line_c1_std() const;
  void set_ls_road_edge_line_c1_std(float value);

  // optional int32 reserved_3 = 19;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 19;
  ::google::protobuf::int32 reserved_3() const;
  void set_reserved_3(::google::protobuf::int32 value);

  // optional float ls_road_edge_line_c0 = 20;
  bool has_ls_road_edge_line_c0() const;
  void clear_ls_road_edge_line_c0();
  static const int kLsRoadEdgeLineC0FieldNumber = 20;
  float ls_road_edge_line_c0() const;
  void set_ls_road_edge_line_c0(float value);

  // optional float ls_road_edge_line_c0_std = 21;
  bool has_ls_road_edge_line_c0_std() const;
  void clear_ls_road_edge_line_c0_std();
  static const int kLsRoadEdgeLineC0StdFieldNumber = 21;
  float ls_road_edge_line_c0_std() const;
  void set_ls_road_edge_line_c0_std(float value);

  // optional int32 ls_road_edge_buffer = 22;
  bool has_ls_road_edge_buffer() const;
  void clear_ls_road_edge_buffer();
  static const int kLsRoadEdgeBufferFieldNumber = 22;
  ::google::protobuf::int32 ls_road_edge_buffer() const;
  void set_ls_road_edge_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.RoadEdge)
 private:
  void set_has_ls_road_edge_id();
  void clear_has_ls_road_edge_id();
  void set_has_ls_road_edge_age();
  void clear_has_ls_road_edge_age();
  void set_has_ls_road_edge_exist_prob();
  void clear_has_ls_road_edge_exist_prob();
  void set_has_ls_road_edge_type_avg__class();
  void clear_has_ls_road_edge_type_avg__class();
  void set_has_ls_road_edge_prediction_type();
  void clear_has_ls_road_edge_prediction_type();
  void set_has_ls_road_edge_height();
  void clear_has_ls_road_edge_height();
  void set_has_ls_road_edge_view_range_start();
  void clear_has_ls_road_edge_view_range_start();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_ls_road_edge_view_range_end();
  void clear_has_ls_road_edge_view_range_end();
  void set_has_ls_road_edge_side();
  void clear_has_ls_road_edge_side();
  void set_has_ls_road_edge_index();
  void clear_has_ls_road_edge_index();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_ls_road_edge_line_c3();
  void clear_has_ls_road_edge_line_c3();
  void set_has_ls_road_edge_line_c3_std();
  void clear_has_ls_road_edge_line_c3_std();
  void set_has_ls_road_edge_line_c2();
  void clear_has_ls_road_edge_line_c2();
  void set_has_ls_road_edge_line_c2_std();
  void clear_has_ls_road_edge_line_c2_std();
  void set_has_ls_road_edge_line_c1();
  void clear_has_ls_road_edge_line_c1();
  void set_has_ls_road_edge_line_c1_std();
  void clear_has_ls_road_edge_line_c1_std();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_ls_road_edge_line_c0();
  void clear_has_ls_road_edge_line_c0();
  void set_has_ls_road_edge_line_c0_std();
  void clear_has_ls_road_edge_line_c0_std();
  void set_has_ls_road_edge_buffer();
  void clear_has_ls_road_edge_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 ls_road_edge_id_;
  ::google::protobuf::int32 ls_road_edge_age_;
  float ls_road_edge_exist_prob_;
  int ls_road_edge_type_avg__class_;
  ::google::protobuf::int32 ls_road_edge_prediction_type_;
  float ls_road_edge_height_;
  float ls_road_edge_view_range_start_;
  ::google::protobuf::int32 reserved_1_;
  float ls_road_edge_view_range_end_;
  int ls_road_edge_side_;
  int ls_road_edge_index_;
  ::google::protobuf::int32 reserved_2_;
  double ls_road_edge_line_c3_;
  double ls_road_edge_line_c3_std_;
  double ls_road_edge_line_c2_;
  double ls_road_edge_line_c2_std_;
  float ls_road_edge_line_c1_;
  float ls_road_edge_line_c1_std_;
  ::google::protobuf::int32 reserved_3_;
  float ls_road_edge_line_c0_;
  float ls_road_edge_line_c0_std_;
  ::google::protobuf::int32 ls_road_edge_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ObjCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.ObjCommon) */ {
 public:
  ObjCommon();
  virtual ~ObjCommon();

  ObjCommon(const ObjCommon& from);

  inline ObjCommon& operator=(const ObjCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ObjCommon& default_instance();

  static inline const ObjCommon* internal_default_instance() {
    return reinterpret_cast<const ObjCommon*>(
               &_ObjCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    26;

  void Swap(ObjCommon* other);

  // implements Message ----------------------------------------------

  inline ObjCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  ObjCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ObjCommon& from);
  void MergeFrom(const ObjCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ObjCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef ObjCommon_Obj_vd_cipv_lostType Obj_vd_cipv_lostType;
  static const Obj_vd_cipv_lostType NO_LOSS =
    ObjCommon_Obj_vd_cipv_lostType_NO_LOSS;
  static const Obj_vd_cipv_lostType LOST_TARGET_FOV_OUT =
    ObjCommon_Obj_vd_cipv_lostType_LOST_TARGET_FOV_OUT;
  static const Obj_vd_cipv_lostType LOST_TARGET_FOV_IN =
    ObjCommon_Obj_vd_cipv_lostType_LOST_TARGET_FOV_IN;
  static inline bool Obj_vd_cipv_lostType_IsValid(int value) {
    return ObjCommon_Obj_vd_cipv_lostType_IsValid(value);
  }
  static const Obj_vd_cipv_lostType Obj_vd_cipv_lostType_MIN =
    ObjCommon_Obj_vd_cipv_lostType_Obj_vd_cipv_lostType_MIN;
  static const Obj_vd_cipv_lostType Obj_vd_cipv_lostType_MAX =
    ObjCommon_Obj_vd_cipv_lostType_Obj_vd_cipv_lostType_MAX;
  static const int Obj_vd_cipv_lostType_ARRAYSIZE =
    ObjCommon_Obj_vd_cipv_lostType_Obj_vd_cipv_lostType_ARRAYSIZE;

  typedef ObjCommon_Obj_vd_allow_acceType Obj_vd_allow_acceType;
  static const Obj_vd_allow_acceType FREE_SPACE =
    ObjCommon_Obj_vd_allow_acceType_FREE_SPACE;
  static const Obj_vd_allow_acceType SPACE_NOT_FREE =
    ObjCommon_Obj_vd_allow_acceType_SPACE_NOT_FREE;
  static const Obj_vd_allow_acceType FREE_SPACE_UNKNOWN =
    ObjCommon_Obj_vd_allow_acceType_FREE_SPACE_UNKNOWN;
  static inline bool Obj_vd_allow_acceType_IsValid(int value) {
    return ObjCommon_Obj_vd_allow_acceType_IsValid(value);
  }
  static const Obj_vd_allow_acceType Obj_vd_allow_acceType_MIN =
    ObjCommon_Obj_vd_allow_acceType_Obj_vd_allow_acceType_MIN;
  static const Obj_vd_allow_acceType Obj_vd_allow_acceType_MAX =
    ObjCommon_Obj_vd_allow_acceType_Obj_vd_allow_acceType_MAX;
  static const int Obj_vd_allow_acceType_ARRAYSIZE =
    ObjCommon_Obj_vd_allow_acceType_Obj_vd_allow_acceType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 obj_zero_byte = 1;
  bool has_obj_zero_byte() const;
  void clear_obj_zero_byte();
  static const int kObjZeroByteFieldNumber = 1;
  ::google::protobuf::int32 obj_zero_byte() const;
  void set_obj_zero_byte(::google::protobuf::int32 value);

  // optional int32 obj_protocol_version = 2;
  bool has_obj_protocol_version() const;
  void clear_obj_protocol_version();
  static const int kObjProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 obj_protocol_version() const;
  void set_obj_protocol_version(::google::protobuf::int32 value);

  // optional int32 obj_sync_id = 3;
  bool has_obj_sync_id() const;
  void clear_obj_sync_id();
  static const int kObjSyncIdFieldNumber = 3;
  ::google::protobuf::int32 obj_sync_id() const;
  void set_obj_sync_id(::google::protobuf::int32 value);

  // optional int32 obj_vru_count = 4;
  bool has_obj_vru_count() const;
  void clear_obj_vru_count();
  static const int kObjVruCountFieldNumber = 4;
  ::google::protobuf::int32 obj_vru_count() const;
  void set_obj_vru_count(::google::protobuf::int32 value);

  // optional int32 obj_vd_count = 5;
  bool has_obj_vd_count() const;
  void clear_obj_vd_count();
  static const int kObjVdCountFieldNumber = 5;
  ::google::protobuf::int32 obj_vd_count() const;
  void set_obj_vd_count(::google::protobuf::int32 value);

  // optional int32 obj_general_obj_count = 6;
  bool has_obj_general_obj_count() const;
  void clear_obj_general_obj_count();
  static const int kObjGeneralObjCountFieldNumber = 6;
  ::google::protobuf::int32 obj_general_obj_count() const;
  void set_obj_general_obj_count(::google::protobuf::int32 value);

  // optional int32 obj_animal_count = 7;
  bool has_obj_animal_count() const;
  void clear_obj_animal_count();
  static const int kObjAnimalCountFieldNumber = 7;
  ::google::protobuf::int32 obj_animal_count() const;
  void set_obj_animal_count(::google::protobuf::int32 value);

  // optional int32 obj_vd_niv_left = 8;
  bool has_obj_vd_niv_left() const;
  void clear_obj_vd_niv_left();
  static const int kObjVdNivLeftFieldNumber = 8;
  ::google::protobuf::int32 obj_vd_niv_left() const;
  void set_obj_vd_niv_left(::google::protobuf::int32 value);

  // optional int32 obj_vd_niv_right = 9;
  bool has_obj_vd_niv_right() const;
  void clear_obj_vd_niv_right();
  static const int kObjVdNivRightFieldNumber = 9;
  ::google::protobuf::int32 obj_vd_niv_right() const;
  void set_obj_vd_niv_right(::google::protobuf::int32 value);

  // optional int32 obj_vd_cipv_id = 10;
  bool has_obj_vd_cipv_id() const;
  void clear_obj_vd_cipv_id();
  static const int kObjVdCipvIdFieldNumber = 10;
  ::google::protobuf::int32 obj_vd_cipv_id() const;
  void set_obj_vd_cipv_id(::google::protobuf::int32 value);

  // optional .atd.meprocess.ObjCommon.Obj_vd_cipv_lostType obj_vd_cipv_lost = 11;
  bool has_obj_vd_cipv_lost() const;
  void clear_obj_vd_cipv_lost();
  static const int kObjVdCipvLostFieldNumber = 11;
  ::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType obj_vd_cipv_lost() const;
  void set_obj_vd_cipv_lost(::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType value);

  // optional .atd.meprocess.ObjCommon.Obj_vd_allow_acceType obj_vd_allow_acce = 12;
  bool has_obj_vd_allow_acce() const;
  void clear_obj_vd_allow_acce();
  static const int kObjVdAllowAcceFieldNumber = 12;
  ::atd::meprocess::ObjCommon_Obj_vd_allow_acceType obj_vd_allow_acce() const;
  void set_obj_vd_allow_acce(::atd::meprocess::ObjCommon_Obj_vd_allow_acceType value);

  // optional float obj_header_buffer = 13;
  bool has_obj_header_buffer() const;
  void clear_obj_header_buffer();
  static const int kObjHeaderBufferFieldNumber = 13;
  float obj_header_buffer() const;
  void set_obj_header_buffer(float value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.ObjCommon)
 private:
  void set_has_obj_zero_byte();
  void clear_has_obj_zero_byte();
  void set_has_obj_protocol_version();
  void clear_has_obj_protocol_version();
  void set_has_obj_sync_id();
  void clear_has_obj_sync_id();
  void set_has_obj_vru_count();
  void clear_has_obj_vru_count();
  void set_has_obj_vd_count();
  void clear_has_obj_vd_count();
  void set_has_obj_general_obj_count();
  void clear_has_obj_general_obj_count();
  void set_has_obj_animal_count();
  void clear_has_obj_animal_count();
  void set_has_obj_vd_niv_left();
  void clear_has_obj_vd_niv_left();
  void set_has_obj_vd_niv_right();
  void clear_has_obj_vd_niv_right();
  void set_has_obj_vd_cipv_id();
  void clear_has_obj_vd_cipv_id();
  void set_has_obj_vd_cipv_lost();
  void clear_has_obj_vd_cipv_lost();
  void set_has_obj_vd_allow_acce();
  void clear_has_obj_vd_allow_acce();
  void set_has_obj_header_buffer();
  void clear_has_obj_header_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 obj_zero_byte_;
  ::google::protobuf::int32 obj_protocol_version_;
  ::google::protobuf::int32 obj_sync_id_;
  ::google::protobuf::int32 obj_vru_count_;
  ::google::protobuf::int32 obj_vd_count_;
  ::google::protobuf::int32 obj_general_obj_count_;
  ::google::protobuf::int32 obj_animal_count_;
  ::google::protobuf::int32 obj_vd_niv_left_;
  ::google::protobuf::int32 obj_vd_niv_right_;
  ::google::protobuf::int32 obj_vd_cipv_id_;
  int obj_vd_cipv_lost_;
  int obj_vd_allow_acce_;
  float obj_header_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_MeObjects : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_MeObjects) */ {
 public:
  Dt_Record_MeObjects();
  virtual ~Dt_Record_MeObjects();

  Dt_Record_MeObjects(const Dt_Record_MeObjects& from);

  inline Dt_Record_MeObjects& operator=(const Dt_Record_MeObjects& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_MeObjects& default_instance();

  static inline const Dt_Record_MeObjects* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_MeObjects*>(
               &_Dt_Record_MeObjects_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    27;

  void Swap(Dt_Record_MeObjects* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_MeObjects* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_MeObjects* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_MeObjects& from);
  void MergeFrom(const Dt_Record_MeObjects& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_MeObjects* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.MeObject dt_array_20_meobject = 4;
  int dt_array_20_meobject_size() const;
  void clear_dt_array_20_meobject();
  static const int kDtArray20MeobjectFieldNumber = 4;
  const ::atd::meprocess::MeObject& dt_array_20_meobject(int index) const;
  ::atd::meprocess::MeObject* mutable_dt_array_20_meobject(int index);
  ::atd::meprocess::MeObject* add_dt_array_20_meobject();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::MeObject >*
      mutable_dt_array_20_meobject();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::MeObject >&
      dt_array_20_meobject() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.ObjCommon stobjcommon = 3;
  bool has_stobjcommon() const;
  void clear_stobjcommon();
  static const int kStobjcommonFieldNumber = 3;
  const ::atd::meprocess::ObjCommon& stobjcommon() const;
  ::atd::meprocess::ObjCommon* mutable_stobjcommon();
  ::atd::meprocess::ObjCommon* release_stobjcommon();
  void set_allocated_stobjcommon(::atd::meprocess::ObjCommon* stobjcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_MeObjects)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stobjcommon();
  void clear_has_stobjcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::MeObject > dt_array_20_meobject_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::ObjCommon* stobjcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MeObject : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.MeObject) */ {
 public:
  MeObject();
  virtual ~MeObject();

  MeObject(const MeObject& from);

  inline MeObject& operator=(const MeObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const MeObject& default_instance();

  static inline const MeObject* internal_default_instance() {
    return reinterpret_cast<const MeObject*>(
               &_MeObject_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    28;

  void Swap(MeObject* other);

  // implements Message ----------------------------------------------

  inline MeObject* New() const PROTOBUF_FINAL { return New(NULL); }

  MeObject* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MeObject& from);
  void MergeFrom(const MeObject& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MeObject* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MeObject_Obj_measuring_statusType Obj_measuring_statusType;
  static const Obj_measuring_statusType OLD_NEW =
    MeObject_Obj_measuring_statusType_OLD_NEW;
  static const Obj_measuring_statusType PREDICTED_MEASURED =
    MeObject_Obj_measuring_statusType_PREDICTED_MEASURED;
  static const Obj_measuring_statusType NOTVALID_VALID =
    MeObject_Obj_measuring_statusType_NOTVALID_VALID;
  static inline bool Obj_measuring_statusType_IsValid(int value) {
    return MeObject_Obj_measuring_statusType_IsValid(value);
  }
  static const Obj_measuring_statusType Obj_measuring_statusType_MIN =
    MeObject_Obj_measuring_statusType_Obj_measuring_statusType_MIN;
  static const Obj_measuring_statusType Obj_measuring_statusType_MAX =
    MeObject_Obj_measuring_statusType_Obj_measuring_statusType_MAX;
  static const int Obj_measuring_statusType_ARRAYSIZE =
    MeObject_Obj_measuring_statusType_Obj_measuring_statusType_ARRAYSIZE;

  typedef MeObject_Obj_object_classType Obj_object_classType;
  static const Obj_object_classType INVALID_Obj_Type =
    MeObject_Obj_object_classType_INVALID_Obj_Type;
  static const Obj_object_classType CAR =
    MeObject_Obj_object_classType_CAR;
  static const Obj_object_classType TRUCK =
    MeObject_Obj_object_classType_TRUCK;
  static const Obj_object_classType BIKE =
    MeObject_Obj_object_classType_BIKE;
  static const Obj_object_classType BICYCLE =
    MeObject_Obj_object_classType_BICYCLE;
  static const Obj_object_classType PEDESTRIAN =
    MeObject_Obj_object_classType_PEDESTRIAN;
  static const Obj_object_classType GENERAL_OBJECT =
    MeObject_Obj_object_classType_GENERAL_OBJECT;
  static const Obj_object_classType ANIMAL =
    MeObject_Obj_object_classType_ANIMAL;
  static const Obj_object_classType UNCERTAIN_VCL =
    MeObject_Obj_object_classType_UNCERTAIN_VCL;
  static inline bool Obj_object_classType_IsValid(int value) {
    return MeObject_Obj_object_classType_IsValid(value);
  }
  static const Obj_object_classType Obj_object_classType_MIN =
    MeObject_Obj_object_classType_Obj_object_classType_MIN;
  static const Obj_object_classType Obj_object_classType_MAX =
    MeObject_Obj_object_classType_Obj_object_classType_MAX;
  static const int Obj_object_classType_ARRAYSIZE =
    MeObject_Obj_object_classType_Obj_object_classType_ARRAYSIZE;

  typedef MeObject_Obj_lane_assignmentType Obj_lane_assignmentType;
  static const Obj_lane_assignmentType UNKNOWN_lane_assign =
    MeObject_Obj_lane_assignmentType_UNKNOWN_lane_assign;
  static const Obj_lane_assignmentType LEFT_LEFT =
    MeObject_Obj_lane_assignmentType_LEFT_LEFT;
  static const Obj_lane_assignmentType LEFT =
    MeObject_Obj_lane_assignmentType_LEFT;
  static const Obj_lane_assignmentType HOST =
    MeObject_Obj_lane_assignmentType_HOST;
  static const Obj_lane_assignmentType RIGHT =
    MeObject_Obj_lane_assignmentType_RIGHT;
  static const Obj_lane_assignmentType RIGHT_RIGHT =
    MeObject_Obj_lane_assignmentType_RIGHT_RIGHT;
  static inline bool Obj_lane_assignmentType_IsValid(int value) {
    return MeObject_Obj_lane_assignmentType_IsValid(value);
  }
  static const Obj_lane_assignmentType Obj_lane_assignmentType_MIN =
    MeObject_Obj_lane_assignmentType_Obj_lane_assignmentType_MIN;
  static const Obj_lane_assignmentType Obj_lane_assignmentType_MAX =
    MeObject_Obj_lane_assignmentType_Obj_lane_assignmentType_MAX;
  static const int Obj_lane_assignmentType_ARRAYSIZE =
    MeObject_Obj_lane_assignmentType_Obj_lane_assignmentType_ARRAYSIZE;

  typedef MeObject_Obj_motion_category Obj_motion_category;
  static const Obj_motion_category INVALID =
    MeObject_Obj_motion_category_INVALID;
  static const Obj_motion_category UNDEFINED =
    MeObject_Obj_motion_category_UNDEFINED;
  static const Obj_motion_category PASSING =
    MeObject_Obj_motion_category_PASSING;
  static const Obj_motion_category PASSING_IN =
    MeObject_Obj_motion_category_PASSING_IN;
  static const Obj_motion_category PASSING_OUT =
    MeObject_Obj_motion_category_PASSING_OUT;
  static const Obj_motion_category CLOSE_CUT_IN =
    MeObject_Obj_motion_category_CLOSE_CUT_IN;
  static const Obj_motion_category MOVING_IN =
    MeObject_Obj_motion_category_MOVING_IN;
  static const Obj_motion_category MOVING_OUT =
    MeObject_Obj_motion_category_MOVING_OUT;
  static const Obj_motion_category CROSSING =
    MeObject_Obj_motion_category_CROSSING;
  static const Obj_motion_category LTAP =
    MeObject_Obj_motion_category_LTAP;
  static const Obj_motion_category RTAP =
    MeObject_Obj_motion_category_RTAP;
  static const Obj_motion_category MOVING =
    MeObject_Obj_motion_category_MOVING;
  static const Obj_motion_category PRECEDING =
    MeObject_Obj_motion_category_PRECEDING;
  static const Obj_motion_category ONCOMING =
    MeObject_Obj_motion_category_ONCOMING;
  static inline bool Obj_motion_category_IsValid(int value) {
    return MeObject_Obj_motion_category_IsValid(value);
  }
  static const Obj_motion_category Obj_motion_category_MIN =
    MeObject_Obj_motion_category_Obj_motion_category_MIN;
  static const Obj_motion_category Obj_motion_category_MAX =
    MeObject_Obj_motion_category_Obj_motion_category_MAX;
  static const int Obj_motion_category_ARRAYSIZE =
    MeObject_Obj_motion_category_Obj_motion_category_ARRAYSIZE;

  typedef MeObject_Obj_motion_status Obj_motion_status;
  static const Obj_motion_status INVALID_STATUS =
    MeObject_Obj_motion_status_INVALID_STATUS;
  static const Obj_motion_status UNKONWN =
    MeObject_Obj_motion_status_UNKONWN;
  static const Obj_motion_status MOVING_motion_status =
    MeObject_Obj_motion_status_MOVING_motion_status;
  static const Obj_motion_status STATIONARY =
    MeObject_Obj_motion_status_STATIONARY;
  static const Obj_motion_status STOPPED =
    MeObject_Obj_motion_status_STOPPED;
  static const Obj_motion_status MOVING_SLOWLY =
    MeObject_Obj_motion_status_MOVING_SLOWLY;
  static inline bool Obj_motion_status_IsValid(int value) {
    return MeObject_Obj_motion_status_IsValid(value);
  }
  static const Obj_motion_status Obj_motion_status_MIN =
    MeObject_Obj_motion_status_Obj_motion_status_MIN;
  static const Obj_motion_status Obj_motion_status_MAX =
    MeObject_Obj_motion_status_Obj_motion_status_MAX;
  static const int Obj_motion_status_ARRAYSIZE =
    MeObject_Obj_motion_status_Obj_motion_status_ARRAYSIZE;

  typedef MeObject_Obj_motion_orientation Obj_motion_orientation;
  static const Obj_motion_orientation INVALID_ORIENTATION_STATUS =
    MeObject_Obj_motion_orientation_INVALID_ORIENTATION_STATUS;
  static const Obj_motion_orientation DRIFTING_RIGHT =
    MeObject_Obj_motion_orientation_DRIFTING_RIGHT;
  static const Obj_motion_orientation CROSSING_RIGHT =
    MeObject_Obj_motion_orientation_CROSSING_RIGHT;
  static const Obj_motion_orientation OC_DRIFTING_RIGHT =
    MeObject_Obj_motion_orientation_OC_DRIFTING_RIGHT;
  static const Obj_motion_orientation ONCOMMING =
    MeObject_Obj_motion_orientation_ONCOMMING;
  static const Obj_motion_orientation OC_DRIFTING_LEFT =
    MeObject_Obj_motion_orientation_OC_DRIFTING_LEFT;
  static const Obj_motion_orientation CROSSING_LEFT =
    MeObject_Obj_motion_orientation_CROSSING_LEFT;
  static const Obj_motion_orientation DRIFTING_LEFT =
    MeObject_Obj_motion_orientation_DRIFTING_LEFT;
  static const Obj_motion_orientation PRECEEDING =
    MeObject_Obj_motion_orientation_PRECEEDING;
  static const Obj_motion_orientation UNKNOWN_ORIENTATION_STATUS =
    MeObject_Obj_motion_orientation_UNKNOWN_ORIENTATION_STATUS;
  static inline bool Obj_motion_orientation_IsValid(int value) {
    return MeObject_Obj_motion_orientation_IsValid(value);
  }
  static const Obj_motion_orientation Obj_motion_orientation_MIN =
    MeObject_Obj_motion_orientation_Obj_motion_orientation_MIN;
  static const Obj_motion_orientation Obj_motion_orientation_MAX =
    MeObject_Obj_motion_orientation_Obj_motion_orientation_MAX;
  static const int Obj_motion_orientation_ARRAYSIZE =
    MeObject_Obj_motion_orientation_Obj_motion_orientation_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 obj_id = 1;
  bool has_obj_id() const;
  void clear_obj_id();
  static const int kObjIdFieldNumber = 1;
  ::google::protobuf::int32 obj_id() const;
  void set_obj_id(::google::protobuf::int32 value);

  // optional float obj_existence_probability = 2;
  bool has_obj_existence_probability() const;
  void clear_obj_existence_probability();
  static const int kObjExistenceProbabilityFieldNumber = 2;
  float obj_existence_probability() const;
  void set_obj_existence_probability(float value);

  // optional int32 obj_motion_category = 4;
  bool has_obj_motion_category() const;
  void clear_obj_motion_category();
  static const int kObjMotionCategoryFieldNumber = 4;
  ::google::protobuf::int32 obj_motion_category() const;
  void set_obj_motion_category(::google::protobuf::int32 value);

  // optional int32 obj_object_age = 5;
  bool has_obj_object_age() const;
  void clear_obj_object_age();
  static const int kObjObjectAgeFieldNumber = 5;
  ::google::protobuf::int32 obj_object_age() const;
  void set_obj_object_age(::google::protobuf::int32 value);

  // optional int32 obj_measuring_status = 6;
  bool has_obj_measuring_status() const;
  void clear_obj_measuring_status();
  static const int kObjMeasuringStatusFieldNumber = 6;
  ::google::protobuf::int32 obj_measuring_status() const;
  void set_obj_measuring_status(::google::protobuf::int32 value);

  // optional .atd.meprocess.MeObject.Obj_object_classType obj_object_class = 7;
  bool has_obj_object_class() const;
  void clear_obj_object_class();
  static const int kObjObjectClassFieldNumber = 7;
  ::atd::meprocess::MeObject_Obj_object_classType obj_object_class() const;
  void set_obj_object_class(::atd::meprocess::MeObject_Obj_object_classType value);

  // optional int32 obj_camera = 8;
  bool has_obj_camera() const;
  void clear_obj_camera();
  static const int kObjCameraFieldNumber = 8;
  ::google::protobuf::int32 obj_camera() const;
  void set_obj_camera(::google::protobuf::int32 value);

  // optional int32 obj_motion_status = 9;
  bool has_obj_motion_status() const;
  void clear_obj_motion_status();
  static const int kObjMotionStatusFieldNumber = 9;
  ::google::protobuf::int32 obj_motion_status() const;
  void set_obj_motion_status(::google::protobuf::int32 value);

  // optional bool obj_triggered_sdm = 3;
  bool has_obj_triggered_sdm() const;
  void clear_obj_triggered_sdm();
  static const int kObjTriggeredSdmFieldNumber = 3;
  bool obj_triggered_sdm() const;
  void set_obj_triggered_sdm(bool value);

  // optional bool obj_brake_light = 11;
  bool has_obj_brake_light() const;
  void clear_obj_brake_light();
  static const int kObjBrakeLightFieldNumber = 11;
  bool obj_brake_light() const;
  void set_obj_brake_light(bool value);

  // optional bool obj_turn_indicator_right = 12;
  bool has_obj_turn_indicator_right() const;
  void clear_obj_turn_indicator_right();
  static const int kObjTurnIndicatorRightFieldNumber = 12;
  bool obj_turn_indicator_right() const;
  void set_obj_turn_indicator_right(bool value);

  // optional bool obj_turn_indicator_left = 13;
  bool has_obj_turn_indicator_left() const;
  void clear_obj_turn_indicator_left();
  static const int kObjTurnIndicatorLeftFieldNumber = 13;
  bool obj_turn_indicator_left() const;
  void set_obj_turn_indicator_left(bool value);

  // optional int32 obj_motion_oreintation = 10;
  bool has_obj_motion_oreintation() const;
  void clear_obj_motion_oreintation();
  static const int kObjMotionOreintationFieldNumber = 10;
  ::google::protobuf::int32 obj_motion_oreintation() const;
  void set_obj_motion_oreintation(::google::protobuf::int32 value);

  // optional bool obj_light_indicator_validity = 14;
  bool has_obj_light_indicator_validity() const;
  void clear_obj_light_indicator_validity();
  static const int kObjLightIndicatorValidityFieldNumber = 14;
  bool obj_light_indicator_validity() const;
  void set_obj_light_indicator_validity(bool value);

  // optional bool obj_right_out_of_image = 15;
  bool has_obj_right_out_of_image() const;
  void clear_obj_right_out_of_image();
  static const int kObjRightOutOfImageFieldNumber = 15;
  bool obj_right_out_of_image() const;
  void set_obj_right_out_of_image(bool value);

  // optional bool obj_left_out_of_image = 16;
  bool has_obj_left_out_of_image() const;
  void clear_obj_left_out_of_image();
  static const int kObjLeftOutOfImageFieldNumber = 16;
  bool obj_left_out_of_image() const;
  void set_obj_left_out_of_image(bool value);

  // optional bool obj_lane_assignment_v = 18;
  bool has_obj_lane_assignment_v() const;
  void clear_obj_lane_assignment_v();
  static const int kObjLaneAssignmentVFieldNumber = 18;
  bool obj_lane_assignment_v() const;
  void set_obj_lane_assignment_v(bool value);

  // optional .atd.meprocess.MeObject.Obj_lane_assignmentType obj_lane_assignment = 17;
  bool has_obj_lane_assignment() const;
  void clear_obj_lane_assignment();
  static const int kObjLaneAssignmentFieldNumber = 17;
  ::atd::meprocess::MeObject_Obj_lane_assignmentType obj_lane_assignment() const;
  void set_obj_lane_assignment(::atd::meprocess::MeObject_Obj_lane_assignmentType value);

  // optional bool obj_top_out_of_image = 19;
  bool has_obj_top_out_of_image() const;
  void clear_obj_top_out_of_image();
  static const int kObjTopOutOfImageFieldNumber = 19;
  bool obj_top_out_of_image() const;
  void set_obj_top_out_of_image(bool value);

  // optional bool obj_bottom_out_of_image = 20;
  bool has_obj_bottom_out_of_image() const;
  void clear_obj_bottom_out_of_image();
  static const int kObjBottomOutOfImageFieldNumber = 20;
  bool obj_bottom_out_of_image() const;
  void set_obj_bottom_out_of_image(bool value);

  // optional bool obj_top_out_of_image_v = 21;
  bool has_obj_top_out_of_image_v() const;
  void clear_obj_top_out_of_image_v();
  static const int kObjTopOutOfImageVFieldNumber = 21;
  bool obj_top_out_of_image_v() const;
  void set_obj_top_out_of_image_v(bool value);

  // optional bool obj_bottom_out_of_image_v = 22;
  bool has_obj_bottom_out_of_image_v() const;
  void clear_obj_bottom_out_of_image_v();
  static const int kObjBottomOutOfImageVFieldNumber = 22;
  bool obj_bottom_out_of_image_v() const;
  void set_obj_bottom_out_of_image_v(bool value);

  // optional int32 reserved_1 = 23;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 23;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional int32 obj_age_seconds = 24;
  bool has_obj_age_seconds() const;
  void clear_obj_age_seconds();
  static const int kObjAgeSecondsFieldNumber = 24;
  ::google::protobuf::int32 obj_age_seconds() const;
  void set_obj_age_seconds(::google::protobuf::int32 value);

  // optional float obj_width = 26;
  bool has_obj_width() const;
  void clear_obj_width();
  static const int kObjWidthFieldNumber = 26;
  float obj_width() const;
  void set_obj_width(float value);

  // optional float obj_width_std = 28;
  bool has_obj_width_std() const;
  void clear_obj_width_std();
  static const int kObjWidthStdFieldNumber = 28;
  float obj_width_std() const;
  void set_obj_width_std(float value);

  // optional int32 reserved_2 = 29;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 29;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional bool obj_age_seconds_v = 25;
  bool has_obj_age_seconds_v() const;
  void clear_obj_age_seconds_v();
  static const int kObjAgeSecondsVFieldNumber = 25;
  bool obj_age_seconds_v() const;
  void set_obj_age_seconds_v(bool value);

  // optional bool obj_width_v = 27;
  bool has_obj_width_v() const;
  void clear_obj_width_v();
  static const int kObjWidthVFieldNumber = 27;
  bool obj_width_v() const;
  void set_obj_width_v(bool value);

  // optional bool obj_length_v = 31;
  bool has_obj_length_v() const;
  void clear_obj_length_v();
  static const int kObjLengthVFieldNumber = 31;
  bool obj_length_v() const;
  void set_obj_length_v(bool value);

  // optional bool obj_height_v = 34;
  bool has_obj_height_v() const;
  void clear_obj_height_v();
  static const int kObjHeightVFieldNumber = 34;
  bool obj_height_v() const;
  void set_obj_height_v(bool value);

  // optional float obj_length = 30;
  bool has_obj_length() const;
  void clear_obj_length();
  static const int kObjLengthFieldNumber = 30;
  float obj_length() const;
  void set_obj_length(float value);

  // optional float obj_length_std = 32;
  bool has_obj_length_std() const;
  void clear_obj_length_std();
  static const int kObjLengthStdFieldNumber = 32;
  float obj_length_std() const;
  void set_obj_length_std(float value);

  // optional float obj_height = 33;
  bool has_obj_height() const;
  void clear_obj_height();
  static const int kObjHeightFieldNumber = 33;
  float obj_height() const;
  void set_obj_height(float value);

  // optional int32 reserved_3 = 35;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 35;
  ::google::protobuf::int32 reserved_3() const;
  void set_reserved_3(::google::protobuf::int32 value);

  // optional float obj_height_std = 36;
  bool has_obj_height_std() const;
  void clear_obj_height_std();
  static const int kObjHeightStdFieldNumber = 36;
  float obj_height_std() const;
  void set_obj_height_std(float value);

  // optional float obj_absolute_long_velocity = 37;
  bool has_obj_absolute_long_velocity() const;
  void clear_obj_absolute_long_velocity();
  static const int kObjAbsoluteLongVelocityFieldNumber = 37;
  float obj_absolute_long_velocity() const;
  void set_obj_absolute_long_velocity(float value);

  // optional float obj_abs_long_velocity_std = 39;
  bool has_obj_abs_long_velocity_std() const;
  void clear_obj_abs_long_velocity_std();
  static const int kObjAbsLongVelocityStdFieldNumber = 39;
  float obj_abs_long_velocity_std() const;
  void set_obj_abs_long_velocity_std(float value);

  // optional float obj_absolute_lat_velocity = 40;
  bool has_obj_absolute_lat_velocity() const;
  void clear_obj_absolute_lat_velocity();
  static const int kObjAbsoluteLatVelocityFieldNumber = 40;
  float obj_absolute_lat_velocity() const;
  void set_obj_absolute_lat_velocity(float value);

  // optional float obj_abs_lat_velocity_std = 42;
  bool has_obj_abs_lat_velocity_std() const;
  void clear_obj_abs_lat_velocity_std();
  static const int kObjAbsLatVelocityStdFieldNumber = 42;
  float obj_abs_lat_velocity_std() const;
  void set_obj_abs_lat_velocity_std(float value);

  // optional bool obj_absolute_long_velocity_v = 38;
  bool has_obj_absolute_long_velocity_v() const;
  void clear_obj_absolute_long_velocity_v();
  static const int kObjAbsoluteLongVelocityVFieldNumber = 38;
  bool obj_absolute_long_velocity_v() const;
  void set_obj_absolute_long_velocity_v(bool value);

  // optional bool obj_absolute_lat_velocity_v = 41;
  bool has_obj_absolute_lat_velocity_v() const;
  void clear_obj_absolute_lat_velocity_v();
  static const int kObjAbsoluteLatVelocityVFieldNumber = 41;
  bool obj_absolute_lat_velocity_v() const;
  void set_obj_absolute_lat_velocity_v(bool value);

  // optional bool obj_absolute_lat_acc_v = 44;
  bool has_obj_absolute_lat_acc_v() const;
  void clear_obj_absolute_lat_acc_v();
  static const int kObjAbsoluteLatAccVFieldNumber = 44;
  bool obj_absolute_lat_acc_v() const;
  void set_obj_absolute_lat_acc_v(bool value);

  // optional bool obj_absolute_acceleration_v = 47;
  bool has_obj_absolute_acceleration_v() const;
  void clear_obj_absolute_acceleration_v();
  static const int kObjAbsoluteAccelerationVFieldNumber = 47;
  bool obj_absolute_acceleration_v() const;
  void set_obj_absolute_acceleration_v(bool value);

  // optional float obj_absolute_lat_acc = 43;
  bool has_obj_absolute_lat_acc() const;
  void clear_obj_absolute_lat_acc();
  static const int kObjAbsoluteLatAccFieldNumber = 43;
  float obj_absolute_lat_acc() const;
  void set_obj_absolute_lat_acc(float value);

  // optional float obj_absolute_lat_acc_std = 45;
  bool has_obj_absolute_lat_acc_std() const;
  void clear_obj_absolute_lat_acc_std();
  static const int kObjAbsoluteLatAccStdFieldNumber = 45;
  float obj_absolute_lat_acc_std() const;
  void set_obj_absolute_lat_acc_std(float value);

  // optional float obj_absolute_acceleration = 46;
  bool has_obj_absolute_acceleration() const;
  void clear_obj_absolute_acceleration();
  static const int kObjAbsoluteAccelerationFieldNumber = 46;
  float obj_absolute_acceleration() const;
  void set_obj_absolute_acceleration(float value);

  // optional float obj_absolute_acce_std = 48;
  bool has_obj_absolute_acce_std() const;
  void clear_obj_absolute_acce_std();
  static const int kObjAbsoluteAcceStdFieldNumber = 48;
  float obj_absolute_acce_std() const;
  void set_obj_absolute_acce_std(float value);

  // optional int32 reserved_4 = 49;
  bool has_reserved_4() const;
  void clear_reserved_4();
  static const int kReserved4FieldNumber = 49;
  ::google::protobuf::int32 reserved_4() const;
  void set_reserved_4(::google::protobuf::int32 value);

  // optional float obj_inv_ttc = 50;
  bool has_obj_inv_ttc() const;
  void clear_obj_inv_ttc();
  static const int kObjInvTtcFieldNumber = 50;
  float obj_inv_ttc() const;
  void set_obj_inv_ttc(float value);

  // optional float obj_relative_long_velocity = 52;
  bool has_obj_relative_long_velocity() const;
  void clear_obj_relative_long_velocity();
  static const int kObjRelativeLongVelocityFieldNumber = 52;
  float obj_relative_long_velocity() const;
  void set_obj_relative_long_velocity(float value);

  // optional int32 reserved_5 = 54;
  bool has_reserved_5() const;
  void clear_reserved_5();
  static const int kReserved5FieldNumber = 54;
  ::google::protobuf::int32 reserved_5() const;
  void set_reserved_5(::google::protobuf::int32 value);

  // optional float obj_relative_long_velo_std = 55;
  bool has_obj_relative_long_velo_std() const;
  void clear_obj_relative_long_velo_std();
  static const int kObjRelativeLongVeloStdFieldNumber = 55;
  float obj_relative_long_velo_std() const;
  void set_obj_relative_long_velo_std(float value);

  // optional bool obj_inv_ttc_v = 51;
  bool has_obj_inv_ttc_v() const;
  void clear_obj_inv_ttc_v();
  static const int kObjInvTtcVFieldNumber = 51;
  bool obj_inv_ttc_v() const;
  void set_obj_inv_ttc_v(bool value);

  // optional bool obj_relative_long_velocity_v = 53;
  bool has_obj_relative_long_velocity_v() const;
  void clear_obj_relative_long_velocity_v();
  static const int kObjRelativeLongVelocityVFieldNumber = 53;
  bool obj_relative_long_velocity_v() const;
  void set_obj_relative_long_velocity_v(bool value);

  // optional bool obj_relative_lat_velocity_v = 57;
  bool has_obj_relative_lat_velocity_v() const;
  void clear_obj_relative_lat_velocity_v();
  static const int kObjRelativeLatVelocityVFieldNumber = 57;
  bool obj_relative_lat_velocity_v() const;
  void set_obj_relative_lat_velocity_v(bool value);

  // optional bool obj_long_distance_v = 61;
  bool has_obj_long_distance_v() const;
  void clear_obj_long_distance_v();
  static const int kObjLongDistanceVFieldNumber = 61;
  bool obj_long_distance_v() const;
  void set_obj_long_distance_v(bool value);

  // optional float obj_relative_lat_velocity = 56;
  bool has_obj_relative_lat_velocity() const;
  void clear_obj_relative_lat_velocity();
  static const int kObjRelativeLatVelocityFieldNumber = 56;
  float obj_relative_lat_velocity() const;
  void set_obj_relative_lat_velocity(float value);

  // optional int32 reserved_6 = 58;
  bool has_reserved_6() const;
  void clear_reserved_6();
  static const int kReserved6FieldNumber = 58;
  ::google::protobuf::int32 reserved_6() const;
  void set_reserved_6(::google::protobuf::int32 value);

  // optional float obj_relative_lat_velocity_std = 59;
  bool has_obj_relative_lat_velocity_std() const;
  void clear_obj_relative_lat_velocity_std();
  static const int kObjRelativeLatVelocityStdFieldNumber = 59;
  float obj_relative_lat_velocity_std() const;
  void set_obj_relative_lat_velocity_std(float value);

  // optional float obj_long_distance = 60;
  bool has_obj_long_distance() const;
  void clear_obj_long_distance();
  static const int kObjLongDistanceFieldNumber = 60;
  float obj_long_distance() const;
  void set_obj_long_distance(float value);

  // optional int32 reserved_7 = 62;
  bool has_reserved_7() const;
  void clear_reserved_7();
  static const int kReserved7FieldNumber = 62;
  ::google::protobuf::int32 reserved_7() const;
  void set_reserved_7(::google::protobuf::int32 value);

  // optional float obj_long_distance_std = 63;
  bool has_obj_long_distance_std() const;
  void clear_obj_long_distance_std();
  static const int kObjLongDistanceStdFieldNumber = 63;
  float obj_long_distance_std() const;
  void set_obj_long_distance_std(float value);

  // optional float obj_lat_distance = 64;
  bool has_obj_lat_distance() const;
  void clear_obj_lat_distance();
  static const int kObjLatDistanceFieldNumber = 64;
  float obj_lat_distance() const;
  void set_obj_lat_distance(float value);

  // optional int32 reserved_8 = 66;
  bool has_reserved_8() const;
  void clear_reserved_8();
  static const int kReserved8FieldNumber = 66;
  ::google::protobuf::int32 reserved_8() const;
  void set_reserved_8(::google::protobuf::int32 value);

  // optional float obj_lat_distance_std = 67;
  bool has_obj_lat_distance_std() const;
  void clear_obj_lat_distance_std();
  static const int kObjLatDistanceStdFieldNumber = 67;
  float obj_lat_distance_std() const;
  void set_obj_lat_distance_std(float value);

  // optional float obj_absolute_speed = 68;
  bool has_obj_absolute_speed() const;
  void clear_obj_absolute_speed();
  static const int kObjAbsoluteSpeedFieldNumber = 68;
  float obj_absolute_speed() const;
  void set_obj_absolute_speed(float value);

  // optional int32 reserved_9 = 70;
  bool has_reserved_9() const;
  void clear_reserved_9();
  static const int kReserved9FieldNumber = 70;
  ::google::protobuf::int32 reserved_9() const;
  void set_reserved_9(::google::protobuf::int32 value);

  // optional bool obj_lat_distance_v = 65;
  bool has_obj_lat_distance_v() const;
  void clear_obj_lat_distance_v();
  static const int kObjLatDistanceVFieldNumber = 65;
  bool obj_lat_distance_v() const;
  void set_obj_lat_distance_v(bool value);

  // optional bool obj_absolute_speed_v = 69;
  bool has_obj_absolute_speed_v() const;
  void clear_obj_absolute_speed_v();
  static const int kObjAbsoluteSpeedVFieldNumber = 69;
  bool obj_absolute_speed_v() const;
  void set_obj_absolute_speed_v(bool value);

  // optional bool obj_heading_v = 73;
  bool has_obj_heading_v() const;
  void clear_obj_heading_v();
  static const int kObjHeadingVFieldNumber = 73;
  bool obj_heading_v() const;
  void set_obj_heading_v(bool value);

  // optional bool reserved_10 = 75;
  bool has_reserved_10() const;
  void clear_reserved_10();
  static const int kReserved10FieldNumber = 75;
  bool reserved_10() const;
  void set_reserved_10(bool value);

  // optional float obj_absolute_speed_std = 71;
  bool has_obj_absolute_speed_std() const;
  void clear_obj_absolute_speed_std();
  static const int kObjAbsoluteSpeedStdFieldNumber = 71;
  float obj_absolute_speed_std() const;
  void set_obj_absolute_speed_std(float value);

  // optional float obj_heading = 72;
  bool has_obj_heading() const;
  void clear_obj_heading();
  static const int kObjHeadingFieldNumber = 72;
  float obj_heading() const;
  void set_obj_heading(float value);

  // optional float obj_heading_std = 74;
  bool has_obj_heading_std() const;
  void clear_obj_heading_std();
  static const int kObjHeadingStdFieldNumber = 74;
  float obj_heading_std() const;
  void set_obj_heading_std(float value);

  // optional float obj_angle_rate = 76;
  bool has_obj_angle_rate() const;
  void clear_obj_angle_rate();
  static const int kObjAngleRateFieldNumber = 76;
  float obj_angle_rate() const;
  void set_obj_angle_rate(float value);

  // optional float obj_angle_rate_std = 78;
  bool has_obj_angle_rate_std() const;
  void clear_obj_angle_rate_std();
  static const int kObjAngleRateStdFieldNumber = 78;
  float obj_angle_rate_std() const;
  void set_obj_angle_rate_std(float value);

  // optional int32 reserved_11 = 79;
  bool has_reserved_11() const;
  void clear_reserved_11();
  static const int kReserved11FieldNumber = 79;
  ::google::protobuf::int32 reserved_11() const;
  void set_reserved_11(::google::protobuf::int32 value);

  // optional float obj_angle_right = 80;
  bool has_obj_angle_right() const;
  void clear_obj_angle_right();
  static const int kObjAngleRightFieldNumber = 80;
  float obj_angle_right() const;
  void set_obj_angle_right(float value);

  // optional float obj_angle_right_std = 82;
  bool has_obj_angle_right_std() const;
  void clear_obj_angle_right_std();
  static const int kObjAngleRightStdFieldNumber = 82;
  float obj_angle_right_std() const;
  void set_obj_angle_right_std(float value);

  // optional int32 reserved_12 = 83;
  bool has_reserved_12() const;
  void clear_reserved_12();
  static const int kReserved12FieldNumber = 83;
  ::google::protobuf::int32 reserved_12() const;
  void set_reserved_12(::google::protobuf::int32 value);

  // optional bool obj_angle_rate_v = 77;
  bool has_obj_angle_rate_v() const;
  void clear_obj_angle_rate_v();
  static const int kObjAngleRateVFieldNumber = 77;
  bool obj_angle_rate_v() const;
  void set_obj_angle_rate_v(bool value);

  // optional bool obj_angle_right_v = 81;
  bool has_obj_angle_right_v() const;
  void clear_obj_angle_right_v();
  static const int kObjAngleRightVFieldNumber = 81;
  bool obj_angle_right_v() const;
  void set_obj_angle_right_v(bool value);

  // optional bool obj_angle_left_v = 85;
  bool has_obj_angle_left_v() const;
  void clear_obj_angle_left_v();
  static const int kObjAngleLeftVFieldNumber = 85;
  bool obj_angle_left_v() const;
  void set_obj_angle_left_v(bool value);

  // optional bool obj_angle_side_v = 89;
  bool has_obj_angle_side_v() const;
  void clear_obj_angle_side_v();
  static const int kObjAngleSideVFieldNumber = 89;
  bool obj_angle_side_v() const;
  void set_obj_angle_side_v(bool value);

  // optional float obj_angle_left = 84;
  bool has_obj_angle_left() const;
  void clear_obj_angle_left();
  static const int kObjAngleLeftFieldNumber = 84;
  float obj_angle_left() const;
  void set_obj_angle_left(float value);

  // optional float obj_angle_left_std = 86;
  bool has_obj_angle_left_std() const;
  void clear_obj_angle_left_std();
  static const int kObjAngleLeftStdFieldNumber = 86;
  float obj_angle_left_std() const;
  void set_obj_angle_left_std(float value);

  // optional int32 reserved_13 = 87;
  bool has_reserved_13() const;
  void clear_reserved_13();
  static const int kReserved13FieldNumber = 87;
  ::google::protobuf::int32 reserved_13() const;
  void set_reserved_13(::google::protobuf::int32 value);

  // optional float obj_angle_side = 88;
  bool has_obj_angle_side() const;
  void clear_obj_angle_side();
  static const int kObjAngleSideFieldNumber = 88;
  float obj_angle_side() const;
  void set_obj_angle_side(float value);

  // optional float obj_angle_side_std = 90;
  bool has_obj_angle_side_std() const;
  void clear_obj_angle_side_std();
  static const int kObjAngleSideStdFieldNumber = 90;
  float obj_angle_side_std() const;
  void set_obj_angle_side_std(float value);

  // optional int32 reserved_14 = 91;
  bool has_reserved_14() const;
  void clear_reserved_14();
  static const int kReserved14FieldNumber = 91;
  ::google::protobuf::int32 reserved_14() const;
  void set_reserved_14(::google::protobuf::int32 value);

  // optional float obj_angle_mid = 92;
  bool has_obj_angle_mid() const;
  void clear_obj_angle_mid();
  static const int kObjAngleMidFieldNumber = 92;
  float obj_angle_mid() const;
  void set_obj_angle_mid(float value);

  // optional float obj_angle_mid_std = 94;
  bool has_obj_angle_mid_std() const;
  void clear_obj_angle_mid_std();
  static const int kObjAngleMidStdFieldNumber = 94;
  float obj_angle_mid_std() const;
  void set_obj_angle_mid_std(float value);

  // optional bool obj_angle_mid_v = 93;
  bool has_obj_angle_mid_v() const;
  void clear_obj_angle_mid_v();
  static const int kObjAngleMidVFieldNumber = 93;
  bool obj_angle_mid_v() const;
  void set_obj_angle_mid_v(bool value);

  // optional bool obj_is_in_drivable_area = 95;
  bool has_obj_is_in_drivable_area() const;
  void clear_obj_is_in_drivable_area();
  static const int kObjIsInDrivableAreaFieldNumber = 95;
  bool obj_is_in_drivable_area() const;
  void set_obj_is_in_drivable_area(bool value);

  // optional bool obj_is_in_drivable_area_v = 96;
  bool has_obj_is_in_drivable_area_v() const;
  void clear_obj_is_in_drivable_area_v();
  static const int kObjIsInDrivableAreaVFieldNumber = 96;
  bool obj_is_in_drivable_area_v() const;
  void set_obj_is_in_drivable_area_v(bool value);

  // optional bool obj_is_veryclose = 97;
  bool has_obj_is_veryclose() const;
  void clear_obj_is_veryclose();
  static const int kObjIsVerycloseFieldNumber = 97;
  bool obj_is_veryclose() const;
  void set_obj_is_veryclose(bool value);

  // optional bool obj_is_veryclose_v = 98;
  bool has_obj_is_veryclose_v() const;
  void clear_obj_is_veryclose_v();
  static const int kObjIsVerycloseVFieldNumber = 98;
  bool obj_is_veryclose_v() const;
  void set_obj_is_veryclose_v(bool value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.MeObject)
 private:
  void set_has_obj_id();
  void clear_has_obj_id();
  void set_has_obj_existence_probability();
  void clear_has_obj_existence_probability();
  void set_has_obj_triggered_sdm();
  void clear_has_obj_triggered_sdm();
  void set_has_obj_motion_category();
  void clear_has_obj_motion_category();
  void set_has_obj_object_age();
  void clear_has_obj_object_age();
  void set_has_obj_measuring_status();
  void clear_has_obj_measuring_status();
  void set_has_obj_object_class();
  void clear_has_obj_object_class();
  void set_has_obj_camera();
  void clear_has_obj_camera();
  void set_has_obj_motion_status();
  void clear_has_obj_motion_status();
  void set_has_obj_motion_oreintation();
  void clear_has_obj_motion_oreintation();
  void set_has_obj_brake_light();
  void clear_has_obj_brake_light();
  void set_has_obj_turn_indicator_right();
  void clear_has_obj_turn_indicator_right();
  void set_has_obj_turn_indicator_left();
  void clear_has_obj_turn_indicator_left();
  void set_has_obj_light_indicator_validity();
  void clear_has_obj_light_indicator_validity();
  void set_has_obj_right_out_of_image();
  void clear_has_obj_right_out_of_image();
  void set_has_obj_left_out_of_image();
  void clear_has_obj_left_out_of_image();
  void set_has_obj_lane_assignment();
  void clear_has_obj_lane_assignment();
  void set_has_obj_lane_assignment_v();
  void clear_has_obj_lane_assignment_v();
  void set_has_obj_top_out_of_image();
  void clear_has_obj_top_out_of_image();
  void set_has_obj_bottom_out_of_image();
  void clear_has_obj_bottom_out_of_image();
  void set_has_obj_top_out_of_image_v();
  void clear_has_obj_top_out_of_image_v();
  void set_has_obj_bottom_out_of_image_v();
  void clear_has_obj_bottom_out_of_image_v();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_obj_age_seconds();
  void clear_has_obj_age_seconds();
  void set_has_obj_age_seconds_v();
  void clear_has_obj_age_seconds_v();
  void set_has_obj_width();
  void clear_has_obj_width();
  void set_has_obj_width_v();
  void clear_has_obj_width_v();
  void set_has_obj_width_std();
  void clear_has_obj_width_std();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_obj_length();
  void clear_has_obj_length();
  void set_has_obj_length_v();
  void clear_has_obj_length_v();
  void set_has_obj_length_std();
  void clear_has_obj_length_std();
  void set_has_obj_height();
  void clear_has_obj_height();
  void set_has_obj_height_v();
  void clear_has_obj_height_v();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_obj_height_std();
  void clear_has_obj_height_std();
  void set_has_obj_absolute_long_velocity();
  void clear_has_obj_absolute_long_velocity();
  void set_has_obj_absolute_long_velocity_v();
  void clear_has_obj_absolute_long_velocity_v();
  void set_has_obj_abs_long_velocity_std();
  void clear_has_obj_abs_long_velocity_std();
  void set_has_obj_absolute_lat_velocity();
  void clear_has_obj_absolute_lat_velocity();
  void set_has_obj_absolute_lat_velocity_v();
  void clear_has_obj_absolute_lat_velocity_v();
  void set_has_obj_abs_lat_velocity_std();
  void clear_has_obj_abs_lat_velocity_std();
  void set_has_obj_absolute_lat_acc();
  void clear_has_obj_absolute_lat_acc();
  void set_has_obj_absolute_lat_acc_v();
  void clear_has_obj_absolute_lat_acc_v();
  void set_has_obj_absolute_lat_acc_std();
  void clear_has_obj_absolute_lat_acc_std();
  void set_has_obj_absolute_acceleration();
  void clear_has_obj_absolute_acceleration();
  void set_has_obj_absolute_acceleration_v();
  void clear_has_obj_absolute_acceleration_v();
  void set_has_obj_absolute_acce_std();
  void clear_has_obj_absolute_acce_std();
  void set_has_reserved_4();
  void clear_has_reserved_4();
  void set_has_obj_inv_ttc();
  void clear_has_obj_inv_ttc();
  void set_has_obj_inv_ttc_v();
  void clear_has_obj_inv_ttc_v();
  void set_has_obj_relative_long_velocity();
  void clear_has_obj_relative_long_velocity();
  void set_has_obj_relative_long_velocity_v();
  void clear_has_obj_relative_long_velocity_v();
  void set_has_reserved_5();
  void clear_has_reserved_5();
  void set_has_obj_relative_long_velo_std();
  void clear_has_obj_relative_long_velo_std();
  void set_has_obj_relative_lat_velocity();
  void clear_has_obj_relative_lat_velocity();
  void set_has_obj_relative_lat_velocity_v();
  void clear_has_obj_relative_lat_velocity_v();
  void set_has_reserved_6();
  void clear_has_reserved_6();
  void set_has_obj_relative_lat_velocity_std();
  void clear_has_obj_relative_lat_velocity_std();
  void set_has_obj_long_distance();
  void clear_has_obj_long_distance();
  void set_has_obj_long_distance_v();
  void clear_has_obj_long_distance_v();
  void set_has_reserved_7();
  void clear_has_reserved_7();
  void set_has_obj_long_distance_std();
  void clear_has_obj_long_distance_std();
  void set_has_obj_lat_distance();
  void clear_has_obj_lat_distance();
  void set_has_obj_lat_distance_v();
  void clear_has_obj_lat_distance_v();
  void set_has_reserved_8();
  void clear_has_reserved_8();
  void set_has_obj_lat_distance_std();
  void clear_has_obj_lat_distance_std();
  void set_has_obj_absolute_speed();
  void clear_has_obj_absolute_speed();
  void set_has_obj_absolute_speed_v();
  void clear_has_obj_absolute_speed_v();
  void set_has_reserved_9();
  void clear_has_reserved_9();
  void set_has_obj_absolute_speed_std();
  void clear_has_obj_absolute_speed_std();
  void set_has_obj_heading();
  void clear_has_obj_heading();
  void set_has_obj_heading_v();
  void clear_has_obj_heading_v();
  void set_has_obj_heading_std();
  void clear_has_obj_heading_std();
  void set_has_reserved_10();
  void clear_has_reserved_10();
  void set_has_obj_angle_rate();
  void clear_has_obj_angle_rate();
  void set_has_obj_angle_rate_v();
  void clear_has_obj_angle_rate_v();
  void set_has_obj_angle_rate_std();
  void clear_has_obj_angle_rate_std();
  void set_has_reserved_11();
  void clear_has_reserved_11();
  void set_has_obj_angle_right();
  void clear_has_obj_angle_right();
  void set_has_obj_angle_right_v();
  void clear_has_obj_angle_right_v();
  void set_has_obj_angle_right_std();
  void clear_has_obj_angle_right_std();
  void set_has_reserved_12();
  void clear_has_reserved_12();
  void set_has_obj_angle_left();
  void clear_has_obj_angle_left();
  void set_has_obj_angle_left_v();
  void clear_has_obj_angle_left_v();
  void set_has_obj_angle_left_std();
  void clear_has_obj_angle_left_std();
  void set_has_reserved_13();
  void clear_has_reserved_13();
  void set_has_obj_angle_side();
  void clear_has_obj_angle_side();
  void set_has_obj_angle_side_v();
  void clear_has_obj_angle_side_v();
  void set_has_obj_angle_side_std();
  void clear_has_obj_angle_side_std();
  void set_has_reserved_14();
  void clear_has_reserved_14();
  void set_has_obj_angle_mid();
  void clear_has_obj_angle_mid();
  void set_has_obj_angle_mid_v();
  void clear_has_obj_angle_mid_v();
  void set_has_obj_angle_mid_std();
  void clear_has_obj_angle_mid_std();
  void set_has_obj_is_in_drivable_area();
  void clear_has_obj_is_in_drivable_area();
  void set_has_obj_is_in_drivable_area_v();
  void clear_has_obj_is_in_drivable_area_v();
  void set_has_obj_is_veryclose();
  void clear_has_obj_is_veryclose();
  void set_has_obj_is_veryclose_v();
  void clear_has_obj_is_veryclose_v();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<4> _has_bits_;
  ::google::protobuf::int32 obj_id_;
  float obj_existence_probability_;
  ::google::protobuf::int32 obj_motion_category_;
  ::google::protobuf::int32 obj_object_age_;
  ::google::protobuf::int32 obj_measuring_status_;
  int obj_object_class_;
  ::google::protobuf::int32 obj_camera_;
  ::google::protobuf::int32 obj_motion_status_;
  bool obj_triggered_sdm_;
  bool obj_brake_light_;
  bool obj_turn_indicator_right_;
  bool obj_turn_indicator_left_;
  ::google::protobuf::int32 obj_motion_oreintation_;
  bool obj_light_indicator_validity_;
  bool obj_right_out_of_image_;
  bool obj_left_out_of_image_;
  bool obj_lane_assignment_v_;
  int obj_lane_assignment_;
  bool obj_top_out_of_image_;
  bool obj_bottom_out_of_image_;
  bool obj_top_out_of_image_v_;
  bool obj_bottom_out_of_image_v_;
  ::google::protobuf::int32 reserved_1_;
  ::google::protobuf::int32 obj_age_seconds_;
  float obj_width_;
  float obj_width_std_;
  ::google::protobuf::int32 reserved_2_;
  bool obj_age_seconds_v_;
  bool obj_width_v_;
  bool obj_length_v_;
  bool obj_height_v_;
  float obj_length_;
  float obj_length_std_;
  float obj_height_;
  ::google::protobuf::int32 reserved_3_;
  float obj_height_std_;
  float obj_absolute_long_velocity_;
  float obj_abs_long_velocity_std_;
  float obj_absolute_lat_velocity_;
  float obj_abs_lat_velocity_std_;
  bool obj_absolute_long_velocity_v_;
  bool obj_absolute_lat_velocity_v_;
  bool obj_absolute_lat_acc_v_;
  bool obj_absolute_acceleration_v_;
  float obj_absolute_lat_acc_;
  float obj_absolute_lat_acc_std_;
  float obj_absolute_acceleration_;
  float obj_absolute_acce_std_;
  ::google::protobuf::int32 reserved_4_;
  float obj_inv_ttc_;
  float obj_relative_long_velocity_;
  ::google::protobuf::int32 reserved_5_;
  float obj_relative_long_velo_std_;
  bool obj_inv_ttc_v_;
  bool obj_relative_long_velocity_v_;
  bool obj_relative_lat_velocity_v_;
  bool obj_long_distance_v_;
  float obj_relative_lat_velocity_;
  ::google::protobuf::int32 reserved_6_;
  float obj_relative_lat_velocity_std_;
  float obj_long_distance_;
  ::google::protobuf::int32 reserved_7_;
  float obj_long_distance_std_;
  float obj_lat_distance_;
  ::google::protobuf::int32 reserved_8_;
  float obj_lat_distance_std_;
  float obj_absolute_speed_;
  ::google::protobuf::int32 reserved_9_;
  bool obj_lat_distance_v_;
  bool obj_absolute_speed_v_;
  bool obj_heading_v_;
  bool reserved_10_;
  float obj_absolute_speed_std_;
  float obj_heading_;
  float obj_heading_std_;
  float obj_angle_rate_;
  float obj_angle_rate_std_;
  ::google::protobuf::int32 reserved_11_;
  float obj_angle_right_;
  float obj_angle_right_std_;
  ::google::protobuf::int32 reserved_12_;
  bool obj_angle_rate_v_;
  bool obj_angle_right_v_;
  bool obj_angle_left_v_;
  bool obj_angle_side_v_;
  float obj_angle_left_;
  float obj_angle_left_std_;
  ::google::protobuf::int32 reserved_13_;
  float obj_angle_side_;
  float obj_angle_side_std_;
  ::google::protobuf::int32 reserved_14_;
  float obj_angle_mid_;
  float obj_angle_mid_std_;
  bool obj_angle_mid_v_;
  bool obj_is_in_drivable_area_;
  bool obj_is_in_drivable_area_v_;
  bool obj_is_veryclose_;
  bool obj_is_veryclose_v_;
  mutable int _cached_size_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLDCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.SLDCommon) */ {
 public:
  SLDCommon();
  virtual ~SLDCommon();

  SLDCommon(const SLDCommon& from);

  inline SLDCommon& operator=(const SLDCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SLDCommon& default_instance();

  static inline const SLDCommon* internal_default_instance() {
    return reinterpret_cast<const SLDCommon*>(
               &_SLDCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    29;

  void Swap(SLDCommon* other);

  // implements Message ----------------------------------------------

  inline SLDCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  SLDCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SLDCommon& from);
  void MergeFrom(const SLDCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLDCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sld_zero_byte = 1;
  bool has_sld_zero_byte() const;
  void clear_sld_zero_byte();
  static const int kSldZeroByteFieldNumber = 1;
  ::google::protobuf::int32 sld_zero_byte() const;
  void set_sld_zero_byte(::google::protobuf::int32 value);

  // optional int32 sld_protocol_version = 2;
  bool has_sld_protocol_version() const;
  void clear_sld_protocol_version();
  static const int kSldProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 sld_protocol_version() const;
  void set_sld_protocol_version(::google::protobuf::int32 value);

  // optional int32 sld_sync_id = 3;
  bool has_sld_sync_id() const;
  void clear_sld_sync_id();
  static const int kSldSyncIdFieldNumber = 3;
  ::google::protobuf::int32 sld_sync_id() const;
  void set_sld_sync_id(::google::protobuf::int32 value);

  // optional int32 sld_num_of_lanes_close_left = 4;
  bool has_sld_num_of_lanes_close_left() const;
  void clear_sld_num_of_lanes_close_left();
  static const int kSldNumOfLanesCloseLeftFieldNumber = 4;
  ::google::protobuf::int32 sld_num_of_lanes_close_left() const;
  void set_sld_num_of_lanes_close_left(::google::protobuf::int32 value);

  // optional int32 sld_num_of_lanes_close_right = 5;
  bool has_sld_num_of_lanes_close_right() const;
  void clear_sld_num_of_lanes_close_right();
  static const int kSldNumOfLanesCloseRightFieldNumber = 5;
  ::google::protobuf::int32 sld_num_of_lanes_close_right() const;
  void set_sld_num_of_lanes_close_right(::google::protobuf::int32 value);

  // optional int32 reserved_1 = 6;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 6;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional int32 sld_num_of_lanes_far_left = 7;
  bool has_sld_num_of_lanes_far_left() const;
  void clear_sld_num_of_lanes_far_left();
  static const int kSldNumOfLanesFarLeftFieldNumber = 7;
  ::google::protobuf::int32 sld_num_of_lanes_far_left() const;
  void set_sld_num_of_lanes_far_left(::google::protobuf::int32 value);

  // optional int32 sld_num_of_lanes_far_right = 8;
  bool has_sld_num_of_lanes_far_right() const;
  void clear_sld_num_of_lanes_far_right();
  static const int kSldNumOfLanesFarRightFieldNumber = 8;
  ::google::protobuf::int32 sld_num_of_lanes_far_right() const;
  void set_sld_num_of_lanes_far_right(::google::protobuf::int32 value);

  // optional float sld_shoulder_right_width_close = 10;
  bool has_sld_shoulder_right_width_close() const;
  void clear_sld_shoulder_right_width_close();
  static const int kSldShoulderRightWidthCloseFieldNumber = 10;
  float sld_shoulder_right_width_close() const;
  void set_sld_shoulder_right_width_close(float value);

  // optional bool sld_has_shoulder_right_close = 9;
  bool has_sld_has_shoulder_right_close() const;
  void clear_sld_has_shoulder_right_close();
  static const int kSldHasShoulderRightCloseFieldNumber = 9;
  bool sld_has_shoulder_right_close() const;
  void set_sld_has_shoulder_right_close(bool value);

  // optional bool sld_has_shoulder_right_far = 11;
  bool has_sld_has_shoulder_right_far() const;
  void clear_sld_has_shoulder_right_far();
  static const int kSldHasShoulderRightFarFieldNumber = 11;
  bool sld_has_shoulder_right_far() const;
  void set_sld_has_shoulder_right_far(bool value);

  // optional float sld_shoulder_right_width_far = 12;
  bool has_sld_shoulder_right_width_far() const;
  void clear_sld_shoulder_right_width_far();
  static const int kSldShoulderRightWidthFarFieldNumber = 12;
  float sld_shoulder_right_width_far() const;
  void set_sld_shoulder_right_width_far(float value);

  // optional int32 sld_header_buffer = 13;
  bool has_sld_header_buffer() const;
  void clear_sld_header_buffer();
  static const int kSldHeaderBufferFieldNumber = 13;
  ::google::protobuf::int32 sld_header_buffer() const;
  void set_sld_header_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.SLDCommon)
 private:
  void set_has_sld_zero_byte();
  void clear_has_sld_zero_byte();
  void set_has_sld_protocol_version();
  void clear_has_sld_protocol_version();
  void set_has_sld_sync_id();
  void clear_has_sld_sync_id();
  void set_has_sld_num_of_lanes_close_left();
  void clear_has_sld_num_of_lanes_close_left();
  void set_has_sld_num_of_lanes_close_right();
  void clear_has_sld_num_of_lanes_close_right();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_sld_num_of_lanes_far_left();
  void clear_has_sld_num_of_lanes_far_left();
  void set_has_sld_num_of_lanes_far_right();
  void clear_has_sld_num_of_lanes_far_right();
  void set_has_sld_has_shoulder_right_close();
  void clear_has_sld_has_shoulder_right_close();
  void set_has_sld_shoulder_right_width_close();
  void clear_has_sld_shoulder_right_width_close();
  void set_has_sld_has_shoulder_right_far();
  void clear_has_sld_has_shoulder_right_far();
  void set_has_sld_shoulder_right_width_far();
  void clear_has_sld_shoulder_right_width_far();
  void set_has_sld_header_buffer();
  void clear_has_sld_header_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 sld_zero_byte_;
  ::google::protobuf::int32 sld_protocol_version_;
  ::google::protobuf::int32 sld_sync_id_;
  ::google::protobuf::int32 sld_num_of_lanes_close_left_;
  ::google::protobuf::int32 sld_num_of_lanes_close_right_;
  ::google::protobuf::int32 reserved_1_;
  ::google::protobuf::int32 sld_num_of_lanes_far_left_;
  ::google::protobuf::int32 sld_num_of_lanes_far_right_;
  float sld_shoulder_right_width_close_;
  bool sld_has_shoulder_right_close_;
  bool sld_has_shoulder_right_far_;
  float sld_shoulder_right_width_far_;
  ::google::protobuf::int32 sld_header_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_SL_Descrip : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_SL_Descrip) */ {
 public:
  Dt_Record_SL_Descrip();
  virtual ~Dt_Record_SL_Descrip();

  Dt_Record_SL_Descrip(const Dt_Record_SL_Descrip& from);

  inline Dt_Record_SL_Descrip& operator=(const Dt_Record_SL_Descrip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_SL_Descrip& default_instance();

  static inline const Dt_Record_SL_Descrip* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_SL_Descrip*>(
               &_Dt_Record_SL_Descrip_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    30;

  void Swap(Dt_Record_SL_Descrip* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_SL_Descrip* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_SL_Descrip* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_SL_Descrip& from);
  void MergeFrom(const Dt_Record_SL_Descrip& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_SL_Descrip* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.SLD dt_array_10_sld = 4;
  int dt_array_10_sld_size() const;
  void clear_dt_array_10_sld();
  static const int kDtArray10SldFieldNumber = 4;
  const ::atd::meprocess::SLD& dt_array_10_sld(int index) const;
  ::atd::meprocess::SLD* mutable_dt_array_10_sld(int index);
  ::atd::meprocess::SLD* add_dt_array_10_sld();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SLD >*
      mutable_dt_array_10_sld();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SLD >&
      dt_array_10_sld() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.SLDCommon stsldcommon = 3;
  bool has_stsldcommon() const;
  void clear_stsldcommon();
  static const int kStsldcommonFieldNumber = 3;
  const ::atd::meprocess::SLDCommon& stsldcommon() const;
  ::atd::meprocess::SLDCommon* mutable_stsldcommon();
  ::atd::meprocess::SLDCommon* release_stsldcommon();
  void set_allocated_stsldcommon(::atd::meprocess::SLDCommon* stsldcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_SL_Descrip)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stsldcommon();
  void clear_has_stsldcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SLD > dt_array_10_sld_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::SLDCommon* stsldcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLD : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.SLD) */ {
 public:
  SLD();
  virtual ~SLD();

  SLD(const SLD& from);

  inline SLD& operator=(const SLD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SLD& default_instance();

  static inline const SLD* internal_default_instance() {
    return reinterpret_cast<const SLD*>(
               &_SLD_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    31;

  void Swap(SLD* other);

  // implements Message ----------------------------------------------

  inline SLD* New() const PROTOBUF_FINAL { return New(NULL); }

  SLD* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SLD& from);
  void MergeFrom(const SLD& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLD* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SLD_Sld_role_0Type Sld_role_0Type;
  static const Sld_role_0Type LEFT_2 =
    SLD_Sld_role_0Type_LEFT_2;
  static const Sld_role_0Type LEFT_1 =
    SLD_Sld_role_0Type_LEFT_1;
  static const Sld_role_0Type HOST =
    SLD_Sld_role_0Type_HOST;
  static const Sld_role_0Type RIGHT_1 =
    SLD_Sld_role_0Type_RIGHT_1;
  static const Sld_role_0Type RIGHT_2 =
    SLD_Sld_role_0Type_RIGHT_2;
  static inline bool Sld_role_0Type_IsValid(int value) {
    return SLD_Sld_role_0Type_IsValid(value);
  }
  static const Sld_role_0Type Sld_role_0Type_MIN =
    SLD_Sld_role_0Type_Sld_role_0Type_MIN;
  static const Sld_role_0Type Sld_role_0Type_MAX =
    SLD_Sld_role_0Type_Sld_role_0Type_MAX;
  static const int Sld_role_0Type_ARRAYSIZE =
    SLD_Sld_role_0Type_Sld_role_0Type_ARRAYSIZE;

  typedef SLD_Sld_view_0Type Sld_view_0Type;
  static const Sld_view_0Type UNKNOWN =
    SLD_Sld_view_0Type_UNKNOWN;
  static const Sld_view_0Type FAR =
    SLD_Sld_view_0Type_FAR;
  static const Sld_view_0Type CLOSE =
    SLD_Sld_view_0Type_CLOSE;
  static inline bool Sld_view_0Type_IsValid(int value) {
    return SLD_Sld_view_0Type_IsValid(value);
  }
  static const Sld_view_0Type Sld_view_0Type_MIN =
    SLD_Sld_view_0Type_Sld_view_0Type_MIN;
  static const Sld_view_0Type Sld_view_0Type_MAX =
    SLD_Sld_view_0Type_Sld_view_0Type_MAX;
  static const int Sld_view_0Type_ARRAYSIZE =
    SLD_Sld_view_0Type_Sld_view_0Type_ARRAYSIZE;

  typedef SLD_Sld_direction_0Type Sld_direction_0Type;
  static const Sld_direction_0Type SLD_Direction_0_UNKNOWN_ =
    SLD_Sld_direction_0Type_SLD_Direction_0_UNKNOWN_;
  static const Sld_direction_0Type STRAIGHT =
    SLD_Sld_direction_0Type_STRAIGHT;
  static const Sld_direction_0Type RIGHT =
    SLD_Sld_direction_0Type_RIGHT;
  static const Sld_direction_0Type LEFT =
    SLD_Sld_direction_0Type_LEFT;
  static inline bool Sld_direction_0Type_IsValid(int value) {
    return SLD_Sld_direction_0Type_IsValid(value);
  }
  static const Sld_direction_0Type Sld_direction_0Type_MIN =
    SLD_Sld_direction_0Type_Sld_direction_0Type_MIN;
  static const Sld_direction_0Type Sld_direction_0Type_MAX =
    SLD_Sld_direction_0Type_Sld_direction_0Type_MAX;
  static const int Sld_direction_0Type_ARRAYSIZE =
    SLD_Sld_direction_0Type_Sld_direction_0Type_ARRAYSIZE;

  typedef SLD_Sld_type_0Type Sld_type_0Type;
  static const Sld_type_0Type UNKNOWN_CLASS =
    SLD_Sld_type_0Type_UNKNOWN_CLASS;
  static const Sld_type_0Type REGULAR =
    SLD_Sld_type_0Type_REGULAR;
  static const Sld_type_0Type NO_LANE =
    SLD_Sld_type_0Type_NO_LANE;
  static const Sld_type_0Type RESERVED_0 =
    SLD_Sld_type_0Type_RESERVED_0;
  static const Sld_type_0Type RESERVED_1 =
    SLD_Sld_type_0Type_RESERVED_1;
  static const Sld_type_0Type RESERVED_2 =
    SLD_Sld_type_0Type_RESERVED_2;
  static const Sld_type_0Type RESERVED_3 =
    SLD_Sld_type_0Type_RESERVED_3;
  static const Sld_type_0Type RESERVED_4 =
    SLD_Sld_type_0Type_RESERVED_4;
  static const Sld_type_0Type RESERVED_5 =
    SLD_Sld_type_0Type_RESERVED_5;
  static const Sld_type_0Type SHOULDER =
    SLD_Sld_type_0Type_SHOULDER;
  static const Sld_type_0Type OPENING =
    SLD_Sld_type_0Type_OPENING;
  static const Sld_type_0Type CLOSING =
    SLD_Sld_type_0Type_CLOSING;
  static const Sld_type_0Type BICYCLE_LANE =
    SLD_Sld_type_0Type_BICYCLE_LANE;
  static const Sld_type_0Type PARKING =
    SLD_Sld_type_0Type_PARKING;
  static const Sld_type_0Type CARPOOL =
    SLD_Sld_type_0Type_CARPOOL;
  static const Sld_type_0Type BAY =
    SLD_Sld_type_0Type_BAY;
  static const Sld_type_0Type BUS_LANE =
    SLD_Sld_type_0Type_BUS_LANE;
  static inline bool Sld_type_0Type_IsValid(int value) {
    return SLD_Sld_type_0Type_IsValid(value);
  }
  static const Sld_type_0Type Sld_type_0Type_MIN =
    SLD_Sld_type_0Type_Sld_type_0Type_MIN;
  static const Sld_type_0Type Sld_type_0Type_MAX =
    SLD_Sld_type_0Type_Sld_type_0Type_MAX;
  static const int Sld_type_0Type_ARRAYSIZE =
    SLD_Sld_type_0Type_Sld_type_0Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional float sld_existence_probability_0 = 1;
  bool has_sld_existence_probability_0() const;
  void clear_sld_existence_probability_0();
  static const int kSldExistenceProbability0FieldNumber = 1;
  float sld_existence_probability_0() const;
  void set_sld_existence_probability_0(float value);

  // optional float sld_nonexistence_probability_0 = 2;
  bool has_sld_nonexistence_probability_0() const;
  void clear_sld_nonexistence_probability_0();
  static const int kSldNonexistenceProbability0FieldNumber = 2;
  float sld_nonexistence_probability_0() const;
  void set_sld_nonexistence_probability_0(float value);

  // optional .atd.meprocess.SLD.Sld_role_0Type sld_role_0 = 3;
  bool has_sld_role_0() const;
  void clear_sld_role_0();
  static const int kSldRole0FieldNumber = 3;
  ::atd::meprocess::SLD_Sld_role_0Type sld_role_0() const;
  void set_sld_role_0(::atd::meprocess::SLD_Sld_role_0Type value);

  // optional .atd.meprocess.SLD.Sld_view_0Type sld_view_0 = 4;
  bool has_sld_view_0() const;
  void clear_sld_view_0();
  static const int kSldView0FieldNumber = 4;
  ::atd::meprocess::SLD_Sld_view_0Type sld_view_0() const;
  void set_sld_view_0(::atd::meprocess::SLD_Sld_view_0Type value);

  // optional int32 sld_orientation_0 = 5;
  bool has_sld_orientation_0() const;
  void clear_sld_orientation_0();
  static const int kSldOrientation0FieldNumber = 5;
  ::google::protobuf::int32 sld_orientation_0() const;
  void set_sld_orientation_0(::google::protobuf::int32 value);

  // optional float sld_orientation_probability_0 = 6;
  bool has_sld_orientation_probability_0() const;
  void clear_sld_orientation_probability_0();
  static const int kSldOrientationProbability0FieldNumber = 6;
  float sld_orientation_probability_0() const;
  void set_sld_orientation_probability_0(float value);

  // optional int32 sld_direction_0 = 7;
  bool has_sld_direction_0() const;
  void clear_sld_direction_0();
  static const int kSldDirection0FieldNumber = 7;
  ::google::protobuf::int32 sld_direction_0() const;
  void set_sld_direction_0(::google::protobuf::int32 value);

  // optional bool reserved_2 = 8;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 8;
  bool reserved_2() const;
  void set_reserved_2(bool value);

  // optional float sld_direction_probability_0 = 9;
  bool has_sld_direction_probability_0() const;
  void clear_sld_direction_probability_0();
  static const int kSldDirectionProbability0FieldNumber = 9;
  float sld_direction_probability_0() const;
  void set_sld_direction_probability_0(float value);

  // optional int32 sld_type_0 = 10;
  bool has_sld_type_0() const;
  void clear_sld_type_0();
  static const int kSldType0FieldNumber = 10;
  ::google::protobuf::int32 sld_type_0() const;
  void set_sld_type_0(::google::protobuf::int32 value);

  // optional float sld_type_probability_0 = 11;
  bool has_sld_type_probability_0() const;
  void clear_sld_type_probability_0();
  static const int kSldTypeProbability0FieldNumber = 11;
  float sld_type_probability_0() const;
  void set_sld_type_probability_0(float value);

  // optional int32 sld_buffer_0 = 12;
  bool has_sld_buffer_0() const;
  void clear_sld_buffer_0();
  static const int kSldBuffer0FieldNumber = 12;
  ::google::protobuf::int32 sld_buffer_0() const;
  void set_sld_buffer_0(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.SLD)
 private:
  void set_has_sld_existence_probability_0();
  void clear_has_sld_existence_probability_0();
  void set_has_sld_nonexistence_probability_0();
  void clear_has_sld_nonexistence_probability_0();
  void set_has_sld_role_0();
  void clear_has_sld_role_0();
  void set_has_sld_view_0();
  void clear_has_sld_view_0();
  void set_has_sld_orientation_0();
  void clear_has_sld_orientation_0();
  void set_has_sld_orientation_probability_0();
  void clear_has_sld_orientation_probability_0();
  void set_has_sld_direction_0();
  void clear_has_sld_direction_0();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_sld_direction_probability_0();
  void clear_has_sld_direction_probability_0();
  void set_has_sld_type_0();
  void clear_has_sld_type_0();
  void set_has_sld_type_probability_0();
  void clear_has_sld_type_probability_0();
  void set_has_sld_buffer_0();
  void clear_has_sld_buffer_0();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  float sld_existence_probability_0_;
  float sld_nonexistence_probability_0_;
  int sld_role_0_;
  int sld_view_0_;
  ::google::protobuf::int32 sld_orientation_0_;
  float sld_orientation_probability_0_;
  ::google::protobuf::int32 sld_direction_0_;
  bool reserved_2_;
  float sld_direction_probability_0_;
  ::google::protobuf::int32 sld_type_0_;
  float sld_type_probability_0_;
  ::google::protobuf::int32 sld_buffer_0_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SLCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.SLCommon) */ {
 public:
  SLCommon();
  virtual ~SLCommon();

  SLCommon(const SLCommon& from);

  inline SLCommon& operator=(const SLCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SLCommon& default_instance();

  static inline const SLCommon* internal_default_instance() {
    return reinterpret_cast<const SLCommon*>(
               &_SLCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    32;

  void Swap(SLCommon* other);

  // implements Message ----------------------------------------------

  inline SLCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  SLCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SLCommon& from);
  void MergeFrom(const SLCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SLCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sl_zero_byte = 1;
  bool has_sl_zero_byte() const;
  void clear_sl_zero_byte();
  static const int kSlZeroByteFieldNumber = 1;
  ::google::protobuf::int32 sl_zero_byte() const;
  void set_sl_zero_byte(::google::protobuf::int32 value);

  // optional int32 sl_protocol_version = 2;
  bool has_sl_protocol_version() const;
  void clear_sl_protocol_version();
  static const int kSlProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 sl_protocol_version() const;
  void set_sl_protocol_version(::google::protobuf::int32 value);

  // optional int32 sl_sync_id = 3;
  bool has_sl_sync_id() const;
  void clear_sl_sync_id();
  static const int kSlSyncIdFieldNumber = 3;
  ::google::protobuf::int32 sl_sync_id() const;
  void set_sl_sync_id(::google::protobuf::int32 value);

  // optional int32 sl_approved_lines = 4;
  bool has_sl_approved_lines() const;
  void clear_sl_approved_lines();
  static const int kSlApprovedLinesFieldNumber = 4;
  ::google::protobuf::int32 sl_approved_lines() const;
  void set_sl_approved_lines(::google::protobuf::int32 value);

  // optional int32 sl_header_buffer = 5;
  bool has_sl_header_buffer() const;
  void clear_sl_header_buffer();
  static const int kSlHeaderBufferFieldNumber = 5;
  ::google::protobuf::int32 sl_header_buffer() const;
  void set_sl_header_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.SLCommon)
 private:
  void set_has_sl_zero_byte();
  void clear_has_sl_zero_byte();
  void set_has_sl_protocol_version();
  void clear_has_sl_protocol_version();
  void set_has_sl_sync_id();
  void clear_has_sl_sync_id();
  void set_has_sl_approved_lines();
  void clear_has_sl_approved_lines();
  void set_has_sl_header_buffer();
  void clear_has_sl_header_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 sl_zero_byte_;
  ::google::protobuf::int32 sl_protocol_version_;
  ::google::protobuf::int32 sl_sync_id_;
  ::google::protobuf::int32 sl_approved_lines_;
  ::google::protobuf::int32 sl_header_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_SematicLine : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_SematicLine) */ {
 public:
  Dt_Record_SematicLine();
  virtual ~Dt_Record_SematicLine();

  Dt_Record_SematicLine(const Dt_Record_SematicLine& from);

  inline Dt_Record_SematicLine& operator=(const Dt_Record_SematicLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_SematicLine& default_instance();

  static inline const Dt_Record_SematicLine* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_SematicLine*>(
               &_Dt_Record_SematicLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    33;

  void Swap(Dt_Record_SematicLine* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_SematicLine* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_SematicLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_SematicLine& from);
  void MergeFrom(const Dt_Record_SematicLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_SematicLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.SematicLine dt_array_10_sematicline = 4;
  int dt_array_10_sematicline_size() const;
  void clear_dt_array_10_sematicline();
  static const int kDtArray10SematiclineFieldNumber = 4;
  const ::atd::meprocess::SematicLine& dt_array_10_sematicline(int index) const;
  ::atd::meprocess::SematicLine* mutable_dt_array_10_sematicline(int index);
  ::atd::meprocess::SematicLine* add_dt_array_10_sematicline();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicLine >*
      mutable_dt_array_10_sematicline();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicLine >&
      dt_array_10_sematicline() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.SLCommon stslcommon = 3;
  bool has_stslcommon() const;
  void clear_stslcommon();
  static const int kStslcommonFieldNumber = 3;
  const ::atd::meprocess::SLCommon& stslcommon() const;
  ::atd::meprocess::SLCommon* mutable_stslcommon();
  ::atd::meprocess::SLCommon* release_stslcommon();
  void set_allocated_stslcommon(::atd::meprocess::SLCommon* stslcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_SematicLine)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stslcommon();
  void clear_has_stslcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicLine > dt_array_10_sematicline_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::SLCommon* stslcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SematicLine : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.SematicLine) */ {
 public:
  SematicLine();
  virtual ~SematicLine();

  SematicLine(const SematicLine& from);

  inline SematicLine& operator=(const SematicLine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SematicLine& default_instance();

  static inline const SematicLine* internal_default_instance() {
    return reinterpret_cast<const SematicLine*>(
               &_SematicLine_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    34;

  void Swap(SematicLine* other);

  // implements Message ----------------------------------------------

  inline SematicLine* New() const PROTOBUF_FINAL { return New(NULL); }

  SematicLine* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SematicLine& from);
  void MergeFrom(const SematicLine& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SematicLine* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef SematicLine_Sl_typeType Sl_typeType;
  static const Sl_typeType SOLID =
    SematicLine_Sl_typeType_SOLID;
  static const Sl_typeType DASHED =
    SematicLine_Sl_typeType_DASHED;
  static const Sl_typeType TRIANGULAR =
    SematicLine_Sl_typeType_TRIANGULAR;
  static inline bool Sl_typeType_IsValid(int value) {
    return SematicLine_Sl_typeType_IsValid(value);
  }
  static const Sl_typeType Sl_typeType_MIN =
    SematicLine_Sl_typeType_Sl_typeType_MIN;
  static const Sl_typeType Sl_typeType_MAX =
    SematicLine_Sl_typeType_Sl_typeType_MAX;
  static const int Sl_typeType_ARRAYSIZE =
    SematicLine_Sl_typeType_Sl_typeType_ARRAYSIZE;

  typedef SematicLine_Sl_colorType Sl_colorType;
  static const Sl_colorType GREEN_BLUE =
    SematicLine_Sl_colorType_GREEN_BLUE;
  static const Sl_colorType WHITE =
    SematicLine_Sl_colorType_WHITE;
  static const Sl_colorType YELLOW_ORANGE_RED =
    SematicLine_Sl_colorType_YELLOW_ORANGE_RED;
  static inline bool Sl_colorType_IsValid(int value) {
    return SematicLine_Sl_colorType_IsValid(value);
  }
  static const Sl_colorType Sl_colorType_MIN =
    SematicLine_Sl_colorType_Sl_colorType_MIN;
  static const Sl_colorType Sl_colorType_MAX =
    SematicLine_Sl_colorType_Sl_colorType_MAX;
  static const int Sl_colorType_ARRAYSIZE =
    SematicLine_Sl_colorType_Sl_colorType_ARRAYSIZE;

  typedef SematicLine_Sl_measure_statusType Sl_measure_statusType;
  static const Sl_measure_statusType UNKNOWN =
    SematicLine_Sl_measure_statusType_UNKNOWN;
  static const Sl_measure_statusType IN_IMAGE =
    SematicLine_Sl_measure_statusType_IN_IMAGE;
  static const Sl_measure_statusType PREDICTED =
    SematicLine_Sl_measure_statusType_PREDICTED;
  static inline bool Sl_measure_statusType_IsValid(int value) {
    return SematicLine_Sl_measure_statusType_IsValid(value);
  }
  static const Sl_measure_statusType Sl_measure_statusType_MIN =
    SematicLine_Sl_measure_statusType_Sl_measure_statusType_MIN;
  static const Sl_measure_statusType Sl_measure_statusType_MAX =
    SematicLine_Sl_measure_statusType_Sl_measure_statusType_MAX;
  static const int Sl_measure_statusType_ARRAYSIZE =
    SematicLine_Sl_measure_statusType_Sl_measure_statusType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 sl_id = 1;
  bool has_sl_id() const;
  void clear_sl_id();
  static const int kSlIdFieldNumber = 1;
  ::google::protobuf::int32 sl_id() const;
  void set_sl_id(::google::protobuf::int32 value);

  // optional .atd.meprocess.SematicLine.Sl_typeType sl_type = 2;
  bool has_sl_type() const;
  void clear_sl_type();
  static const int kSlTypeFieldNumber = 2;
  ::atd::meprocess::SematicLine_Sl_typeType sl_type() const;
  void set_sl_type(::atd::meprocess::SematicLine_Sl_typeType value);

  // optional .atd.meprocess.SematicLine.Sl_colorType sl_color = 3;
  bool has_sl_color() const;
  void clear_sl_color();
  static const int kSlColorFieldNumber = 3;
  ::atd::meprocess::SematicLine_Sl_colorType sl_color() const;
  void set_sl_color(::atd::meprocess::SematicLine_Sl_colorType value);

  // optional .atd.meprocess.SematicLine.Sl_measure_statusType sl_measure_status = 4;
  bool has_sl_measure_status() const;
  void clear_sl_measure_status();
  static const int kSlMeasureStatusFieldNumber = 4;
  ::atd::meprocess::SematicLine_Sl_measure_statusType sl_measure_status() const;
  void set_sl_measure_status(::atd::meprocess::SematicLine_Sl_measure_statusType value);

  // optional float sl_lat_distance = 5;
  bool has_sl_lat_distance() const;
  void clear_sl_lat_distance();
  static const int kSlLatDistanceFieldNumber = 5;
  float sl_lat_distance() const;
  void set_sl_lat_distance(float value);

  // optional float sl_width = 6;
  bool has_sl_width() const;
  void clear_sl_width();
  static const int kSlWidthFieldNumber = 6;
  float sl_width() const;
  void set_sl_width(float value);

  // optional float sl_length = 7;
  bool has_sl_length() const;
  void clear_sl_length();
  static const int kSlLengthFieldNumber = 7;
  float sl_length() const;
  void set_sl_length(float value);

  // optional float sl_long_dist = 8;
  bool has_sl_long_dist() const;
  void clear_sl_long_dist();
  static const int kSlLongDistFieldNumber = 8;
  float sl_long_dist() const;
  void set_sl_long_dist(float value);

  // optional float sl_long_dist_std = 9;
  bool has_sl_long_dist_std() const;
  void clear_sl_long_dist_std();
  static const int kSlLongDistStdFieldNumber = 9;
  float sl_long_dist_std() const;
  void set_sl_long_dist_std(float value);

  // optional float sl_probability = 11;
  bool has_sl_probability() const;
  void clear_sl_probability();
  static const int kSlProbabilityFieldNumber = 11;
  float sl_probability() const;
  void set_sl_probability(float value);

  // optional float sl_angle = 12;
  bool has_sl_angle() const;
  void clear_sl_angle();
  static const int kSlAngleFieldNumber = 12;
  float sl_angle() const;
  void set_sl_angle(float value);

  // optional bool sl_close_to_junc = 10;
  bool has_sl_close_to_junc() const;
  void clear_sl_close_to_junc();
  static const int kSlCloseToJuncFieldNumber = 10;
  bool sl_close_to_junc() const;
  void set_sl_close_to_junc(bool value);

  // optional bool sl_is_relevant = 14;
  bool has_sl_is_relevant() const;
  void clear_sl_is_relevant();
  static const int kSlIsRelevantFieldNumber = 14;
  bool sl_is_relevant() const;
  void set_sl_is_relevant(bool value);

  // optional float sl_angle_std = 13;
  bool has_sl_angle_std() const;
  void clear_sl_angle_std();
  static const int kSlAngleStdFieldNumber = 13;
  float sl_angle_std() const;
  void set_sl_angle_std(float value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.SematicLine)
 private:
  void set_has_sl_id();
  void clear_has_sl_id();
  void set_has_sl_type();
  void clear_has_sl_type();
  void set_has_sl_color();
  void clear_has_sl_color();
  void set_has_sl_measure_status();
  void clear_has_sl_measure_status();
  void set_has_sl_lat_distance();
  void clear_has_sl_lat_distance();
  void set_has_sl_width();
  void clear_has_sl_width();
  void set_has_sl_length();
  void clear_has_sl_length();
  void set_has_sl_long_dist();
  void clear_has_sl_long_dist();
  void set_has_sl_long_dist_std();
  void clear_has_sl_long_dist_std();
  void set_has_sl_close_to_junc();
  void clear_has_sl_close_to_junc();
  void set_has_sl_probability();
  void clear_has_sl_probability();
  void set_has_sl_angle();
  void clear_has_sl_angle();
  void set_has_sl_angle_std();
  void clear_has_sl_angle_std();
  void set_has_sl_is_relevant();
  void clear_has_sl_is_relevant();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 sl_id_;
  int sl_type_;
  int sl_color_;
  int sl_measure_status_;
  float sl_lat_distance_;
  float sl_width_;
  float sl_length_;
  float sl_long_dist_;
  float sl_long_dist_std_;
  float sl_probability_;
  float sl_angle_;
  bool sl_close_to_junc_;
  bool sl_is_relevant_;
  float sl_angle_std_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SMCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.SMCommon) */ {
 public:
  SMCommon();
  virtual ~SMCommon();

  SMCommon(const SMCommon& from);

  inline SMCommon& operator=(const SMCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SMCommon& default_instance();

  static inline const SMCommon* internal_default_instance() {
    return reinterpret_cast<const SMCommon*>(
               &_SMCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    35;

  void Swap(SMCommon* other);

  // implements Message ----------------------------------------------

  inline SMCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  SMCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SMCommon& from);
  void MergeFrom(const SMCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SMCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sm_zero_byte = 1;
  bool has_sm_zero_byte() const;
  void clear_sm_zero_byte();
  static const int kSmZeroByteFieldNumber = 1;
  ::google::protobuf::int32 sm_zero_byte() const;
  void set_sm_zero_byte(::google::protobuf::int32 value);

  // optional int32 sm_protocol_version = 2;
  bool has_sm_protocol_version() const;
  void clear_sm_protocol_version();
  static const int kSmProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 sm_protocol_version() const;
  void set_sm_protocol_version(::google::protobuf::int32 value);

  // optional int32 sm_sync_id = 3;
  bool has_sm_sync_id() const;
  void clear_sm_sync_id();
  static const int kSmSyncIdFieldNumber = 3;
  ::google::protobuf::int32 sm_sync_id() const;
  void set_sm_sync_id(::google::protobuf::int32 value);

  // optional int32 sm_approved_marks = 4;
  bool has_sm_approved_marks() const;
  void clear_sm_approved_marks();
  static const int kSmApprovedMarksFieldNumber = 4;
  ::google::protobuf::int32 sm_approved_marks() const;
  void set_sm_approved_marks(::google::protobuf::int32 value);

  // optional int32 sm_header_buffer = 5;
  bool has_sm_header_buffer() const;
  void clear_sm_header_buffer();
  static const int kSmHeaderBufferFieldNumber = 5;
  ::google::protobuf::int32 sm_header_buffer() const;
  void set_sm_header_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.SMCommon)
 private:
  void set_has_sm_zero_byte();
  void clear_has_sm_zero_byte();
  void set_has_sm_protocol_version();
  void clear_has_sm_protocol_version();
  void set_has_sm_sync_id();
  void clear_has_sm_sync_id();
  void set_has_sm_approved_marks();
  void clear_has_sm_approved_marks();
  void set_has_sm_header_buffer();
  void clear_has_sm_header_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 sm_zero_byte_;
  ::google::protobuf::int32 sm_protocol_version_;
  ::google::protobuf::int32 sm_sync_id_;
  ::google::protobuf::int32 sm_approved_marks_;
  ::google::protobuf::int32 sm_header_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_SematicMark : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_SematicMark) */ {
 public:
  Dt_Record_SematicMark();
  virtual ~Dt_Record_SematicMark();

  Dt_Record_SematicMark(const Dt_Record_SematicMark& from);

  inline Dt_Record_SematicMark& operator=(const Dt_Record_SematicMark& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_SematicMark& default_instance();

  static inline const Dt_Record_SematicMark* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_SematicMark*>(
               &_Dt_Record_SematicMark_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    36;

  void Swap(Dt_Record_SematicMark* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_SematicMark* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_SematicMark* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_SematicMark& from);
  void MergeFrom(const Dt_Record_SematicMark& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_SematicMark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.SematicMark dt_array_20_sematicmark = 4;
  int dt_array_20_sematicmark_size() const;
  void clear_dt_array_20_sematicmark();
  static const int kDtArray20SematicmarkFieldNumber = 4;
  const ::atd::meprocess::SematicMark& dt_array_20_sematicmark(int index) const;
  ::atd::meprocess::SematicMark* mutable_dt_array_20_sematicmark(int index);
  ::atd::meprocess::SematicMark* add_dt_array_20_sematicmark();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicMark >*
      mutable_dt_array_20_sematicmark();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicMark >&
      dt_array_20_sematicmark() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.SMCommon stsmcommon = 3;
  bool has_stsmcommon() const;
  void clear_stsmcommon();
  static const int kStsmcommonFieldNumber = 3;
  const ::atd::meprocess::SMCommon& stsmcommon() const;
  ::atd::meprocess::SMCommon* mutable_stsmcommon();
  ::atd::meprocess::SMCommon* release_stsmcommon();
  void set_allocated_stsmcommon(::atd::meprocess::SMCommon* stsmcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_SematicMark)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_stsmcommon();
  void clear_has_stsmcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicMark > dt_array_20_sematicmark_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::SMCommon* stsmcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SematicMark : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.SematicMark) */ {
 public:
  SematicMark();
  virtual ~SematicMark();

  SematicMark(const SematicMark& from);

  inline SematicMark& operator=(const SematicMark& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SematicMark& default_instance();

  static inline const SematicMark* internal_default_instance() {
    return reinterpret_cast<const SematicMark*>(
               &_SematicMark_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    37;

  void Swap(SematicMark* other);

  // implements Message ----------------------------------------------

  inline SematicMark* New() const PROTOBUF_FINAL { return New(NULL); }

  SematicMark* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SematicMark& from);
  void MergeFrom(const SematicMark& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SematicMark* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 sm_id = 1;
  bool has_sm_id() const;
  void clear_sm_id();
  static const int kSmIdFieldNumber = 1;
  ::google::protobuf::int32 sm_id() const;
  void set_sm_id(::google::protobuf::int32 value);

  // optional int32 sm_type = 2;
  bool has_sm_type() const;
  void clear_sm_type();
  static const int kSmTypeFieldNumber = 2;
  ::google::protobuf::int32 sm_type() const;
  void set_sm_type(::google::protobuf::int32 value);

  // optional float sm_lat_distance = 3;
  bool has_sm_lat_distance() const;
  void clear_sm_lat_distance();
  static const int kSmLatDistanceFieldNumber = 3;
  float sm_lat_distance() const;
  void set_sm_lat_distance(float value);

  // optional int32 reserved_2 = 4;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 4;
  ::google::protobuf::int32 reserved_2() const;
  void set_reserved_2(::google::protobuf::int32 value);

  // optional float sm_long_distance = 5;
  bool has_sm_long_distance() const;
  void clear_sm_long_distance();
  static const int kSmLongDistanceFieldNumber = 5;
  float sm_long_distance() const;
  void set_sm_long_distance(float value);

  // optional float sm_confidence = 6;
  bool has_sm_confidence() const;
  void clear_sm_confidence();
  static const int kSmConfidenceFieldNumber = 6;
  float sm_confidence() const;
  void set_sm_confidence(float value);

  // optional int32 sm_buffer = 7;
  bool has_sm_buffer() const;
  void clear_sm_buffer();
  static const int kSmBufferFieldNumber = 7;
  ::google::protobuf::int32 sm_buffer() const;
  void set_sm_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.SematicMark)
 private:
  void set_has_sm_id();
  void clear_has_sm_id();
  void set_has_sm_type();
  void clear_has_sm_type();
  void set_has_sm_lat_distance();
  void clear_has_sm_lat_distance();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_sm_long_distance();
  void clear_has_sm_long_distance();
  void set_has_sm_confidence();
  void clear_has_sm_confidence();
  void set_has_sm_buffer();
  void clear_has_sm_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 sm_id_;
  ::google::protobuf::int32 sm_type_;
  float sm_lat_distance_;
  ::google::protobuf::int32 reserved_2_;
  float sm_long_distance_;
  float sm_confidence_;
  ::google::protobuf::int32 sm_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFLCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.TFLCommon) */ {
 public:
  TFLCommon();
  virtual ~TFLCommon();

  TFLCommon(const TFLCommon& from);

  inline TFLCommon& operator=(const TFLCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TFLCommon& default_instance();

  static inline const TFLCommon* internal_default_instance() {
    return reinterpret_cast<const TFLCommon*>(
               &_TFLCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    38;

  void Swap(TFLCommon* other);

  // implements Message ----------------------------------------------

  inline TFLCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  TFLCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TFLCommon& from);
  void MergeFrom(const TFLCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFLCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 tfl_zero_byte = 1;
  bool has_tfl_zero_byte() const;
  void clear_tfl_zero_byte();
  static const int kTflZeroByteFieldNumber = 1;
  ::google::protobuf::int32 tfl_zero_byte() const;
  void set_tfl_zero_byte(::google::protobuf::int32 value);

  // optional int32 tfl_protocol_version = 2;
  bool has_tfl_protocol_version() const;
  void clear_tfl_protocol_version();
  static const int kTflProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 tfl_protocol_version() const;
  void set_tfl_protocol_version(::google::protobuf::int32 value);

  // optional int32 tfl_sync_id = 3;
  bool has_tfl_sync_id() const;
  void clear_tfl_sync_id();
  static const int kTflSyncIdFieldNumber = 3;
  ::google::protobuf::int32 tfl_sync_id() const;
  void set_tfl_sync_id(::google::protobuf::int32 value);

  // optional int32 tfl_number_of_objects = 4;
  bool has_tfl_number_of_objects() const;
  void clear_tfl_number_of_objects();
  static const int kTflNumberOfObjectsFieldNumber = 4;
  ::google::protobuf::int32 tfl_number_of_objects() const;
  void set_tfl_number_of_objects(::google::protobuf::int32 value);

  // optional int32 tfl_header_buffer = 5;
  bool has_tfl_header_buffer() const;
  void clear_tfl_header_buffer();
  static const int kTflHeaderBufferFieldNumber = 5;
  ::google::protobuf::int32 tfl_header_buffer() const;
  void set_tfl_header_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.TFLCommon)
 private:
  void set_has_tfl_zero_byte();
  void clear_has_tfl_zero_byte();
  void set_has_tfl_protocol_version();
  void clear_has_tfl_protocol_version();
  void set_has_tfl_sync_id();
  void clear_has_tfl_sync_id();
  void set_has_tfl_number_of_objects();
  void clear_has_tfl_number_of_objects();
  void set_has_tfl_header_buffer();
  void clear_has_tfl_header_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tfl_zero_byte_;
  ::google::protobuf::int32 tfl_protocol_version_;
  ::google::protobuf::int32 tfl_sync_id_;
  ::google::protobuf::int32 tfl_number_of_objects_;
  ::google::protobuf::int32 tfl_header_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_TFL : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_TFL) */ {
 public:
  Dt_Record_TFL();
  virtual ~Dt_Record_TFL();

  Dt_Record_TFL(const Dt_Record_TFL& from);

  inline Dt_Record_TFL& operator=(const Dt_Record_TFL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_TFL& default_instance();

  static inline const Dt_Record_TFL* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_TFL*>(
               &_Dt_Record_TFL_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    39;

  void Swap(Dt_Record_TFL* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_TFL* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_TFL* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_TFL& from);
  void MergeFrom(const Dt_Record_TFL& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_TFL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.TFL dt_array_10_tfl = 4;
  int dt_array_10_tfl_size() const;
  void clear_dt_array_10_tfl();
  static const int kDtArray10TflFieldNumber = 4;
  const ::atd::meprocess::TFL& dt_array_10_tfl(int index) const;
  ::atd::meprocess::TFL* mutable_dt_array_10_tfl(int index);
  ::atd::meprocess::TFL* add_dt_array_10_tfl();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TFL >*
      mutable_dt_array_10_tfl();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TFL >&
      dt_array_10_tfl() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.TFLCommon sttflcommon = 3;
  bool has_sttflcommon() const;
  void clear_sttflcommon();
  static const int kSttflcommonFieldNumber = 3;
  const ::atd::meprocess::TFLCommon& sttflcommon() const;
  ::atd::meprocess::TFLCommon* mutable_sttflcommon();
  ::atd::meprocess::TFLCommon* release_sttflcommon();
  void set_allocated_sttflcommon(::atd::meprocess::TFLCommon* sttflcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_TFL)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_sttflcommon();
  void clear_has_sttflcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TFL > dt_array_10_tfl_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::TFLCommon* sttflcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TFL : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.TFL) */ {
 public:
  TFL();
  virtual ~TFL();

  TFL(const TFL& from);

  inline TFL& operator=(const TFL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TFL& default_instance();

  static inline const TFL* internal_default_instance() {
    return reinterpret_cast<const TFL*>(
               &_TFL_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    40;

  void Swap(TFL* other);

  // implements Message ----------------------------------------------

  inline TFL* New() const PROTOBUF_FINAL { return New(NULL); }

  TFL* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TFL& from);
  void MergeFrom(const TFL& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TFL* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TFL_Tfl_colorType Tfl_colorType;
  static const Tfl_colorType UNKNOWN_x000D_ =
    TFL_Tfl_colorType_UNKNOWN_x000D_;
  static const Tfl_colorType RED_x000D_ =
    TFL_Tfl_colorType_RED_x000D_;
  static const Tfl_colorType YELLOW_x000D_ =
    TFL_Tfl_colorType_YELLOW_x000D_;
  static const Tfl_colorType GREEN_x000D_ =
    TFL_Tfl_colorType_GREEN_x000D_;
  static const Tfl_colorType RED_YELLOW =
    TFL_Tfl_colorType_RED_YELLOW;
  static inline bool Tfl_colorType_IsValid(int value) {
    return TFL_Tfl_colorType_IsValid(value);
  }
  static const Tfl_colorType Tfl_colorType_MIN =
    TFL_Tfl_colorType_Tfl_colorType_MIN;
  static const Tfl_colorType Tfl_colorType_MAX =
    TFL_Tfl_colorType_Tfl_colorType_MAX;
  static const int Tfl_colorType_ARRAYSIZE =
    TFL_Tfl_colorType_Tfl_colorType_ARRAYSIZE;

  typedef TFL_Tfl_relevance_directionType Tfl_relevance_directionType;
  static const Tfl_relevance_directionType TFL_Relevance_Direction_UNKNOWN_x000D__ =
    TFL_Tfl_relevance_directionType_TFL_Relevance_Direction_UNKNOWN_x000D__;
  static const Tfl_relevance_directionType FORWARED_CENTER_x000D_ =
    TFL_Tfl_relevance_directionType_FORWARED_CENTER_x000D_;
  static const Tfl_relevance_directionType FORWARED_RIGHT =
    TFL_Tfl_relevance_directionType_FORWARED_RIGHT;
  static const Tfl_relevance_directionType LEFT_x000D_ =
    TFL_Tfl_relevance_directionType_LEFT_x000D_;
  static const Tfl_relevance_directionType RIGHT_x000D_ =
    TFL_Tfl_relevance_directionType_RIGHT_x000D_;
  static const Tfl_relevance_directionType FORWARED_LEFT_x000D_ =
    TFL_Tfl_relevance_directionType_FORWARED_LEFT_x000D_;
  static inline bool Tfl_relevance_directionType_IsValid(int value) {
    return TFL_Tfl_relevance_directionType_IsValid(value);
  }
  static const Tfl_relevance_directionType Tfl_relevance_directionType_MIN =
    TFL_Tfl_relevance_directionType_Tfl_relevance_directionType_MIN;
  static const Tfl_relevance_directionType Tfl_relevance_directionType_MAX =
    TFL_Tfl_relevance_directionType_Tfl_relevance_directionType_MAX;
  static const int Tfl_relevance_directionType_ARRAYSIZE =
    TFL_Tfl_relevance_directionType_Tfl_relevance_directionType_ARRAYSIZE;

  typedef TFL_Tfl_structure_orientationType Tfl_structure_orientationType;
  static const Tfl_structure_orientationType TFL_Structure_Orientation_UNKNOWN_x000D__ =
    TFL_Tfl_structure_orientationType_TFL_Structure_Orientation_UNKNOWN_x000D__;
  static const Tfl_structure_orientationType VERTICAL_x000D_ =
    TFL_Tfl_structure_orientationType_VERTICAL_x000D_;
  static const Tfl_structure_orientationType HORIZENTAL =
    TFL_Tfl_structure_orientationType_HORIZENTAL;
  static inline bool Tfl_structure_orientationType_IsValid(int value) {
    return TFL_Tfl_structure_orientationType_IsValid(value);
  }
  static const Tfl_structure_orientationType Tfl_structure_orientationType_MIN =
    TFL_Tfl_structure_orientationType_Tfl_structure_orientationType_MIN;
  static const Tfl_structure_orientationType Tfl_structure_orientationType_MAX =
    TFL_Tfl_structure_orientationType_Tfl_structure_orientationType_MAX;
  static const int Tfl_structure_orientationType_ARRAYSIZE =
    TFL_Tfl_structure_orientationType_Tfl_structure_orientationType_ARRAYSIZE;

  typedef TFL_Tfl_modeType Tfl_modeType;
  static const Tfl_modeType TFL_Mode_UNKNOWN_x000D__ =
    TFL_Tfl_modeType_TFL_Mode_UNKNOWN_x000D__;
  static const Tfl_modeType CONTINUOUS_x000D_ =
    TFL_Tfl_modeType_CONTINUOUS_x000D_;
  static const Tfl_modeType BLINKING =
    TFL_Tfl_modeType_BLINKING;
  static inline bool Tfl_modeType_IsValid(int value) {
    return TFL_Tfl_modeType_IsValid(value);
  }
  static const Tfl_modeType Tfl_modeType_MIN =
    TFL_Tfl_modeType_Tfl_modeType_MIN;
  static const Tfl_modeType Tfl_modeType_MAX =
    TFL_Tfl_modeType_Tfl_modeType_MAX;
  static const int Tfl_modeType_ARRAYSIZE =
    TFL_Tfl_modeType_Tfl_modeType_ARRAYSIZE;

  typedef TFL_Tfl_shapeType Tfl_shapeType;
  static const Tfl_shapeType TFL_Shape_UNKNOWN_x000D__ =
    TFL_Tfl_shapeType_TFL_Shape_UNKNOWN_x000D__;
  static const Tfl_shapeType CIRCULAR_x000D_ =
    TFL_Tfl_shapeType_CIRCULAR_x000D_;
  static const Tfl_shapeType DIAGONAL_x000D_ =
    TFL_Tfl_shapeType_DIAGONAL_x000D_;
  static const Tfl_shapeType FORWARED_x000D_ =
    TFL_Tfl_shapeType_FORWARED_x000D_;
  static const Tfl_shapeType ARROW_x000D_ =
    TFL_Tfl_shapeType_ARROW_x000D_;
  static const Tfl_shapeType TFL_Shape_LEFT_x000D__ =
    TFL_Tfl_shapeType_TFL_Shape_LEFT_x000D__;
  static const Tfl_shapeType PEDS =
    TFL_Tfl_shapeType_PEDS;
  static const Tfl_shapeType TFL_Shape_RIGHT_x000D__ =
    TFL_Tfl_shapeType_TFL_Shape_RIGHT_x000D__;
  static inline bool Tfl_shapeType_IsValid(int value) {
    return TFL_Tfl_shapeType_IsValid(value);
  }
  static const Tfl_shapeType Tfl_shapeType_MIN =
    TFL_Tfl_shapeType_Tfl_shapeType_MIN;
  static const Tfl_shapeType Tfl_shapeType_MAX =
    TFL_Tfl_shapeType_Tfl_shapeType_MAX;
  static const int Tfl_shapeType_ARRAYSIZE =
    TFL_Tfl_shapeType_Tfl_shapeType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 tfl_object_id = 1;
  bool has_tfl_object_id() const;
  void clear_tfl_object_id();
  static const int kTflObjectIdFieldNumber = 1;
  ::google::protobuf::int32 tfl_object_id() const;
  void set_tfl_object_id(::google::protobuf::int32 value);

  // optional int32 tfl_lightbox_id = 2;
  bool has_tfl_lightbox_id() const;
  void clear_tfl_lightbox_id();
  static const int kTflLightboxIdFieldNumber = 2;
  ::google::protobuf::int32 tfl_lightbox_id() const;
  void set_tfl_lightbox_id(::google::protobuf::int32 value);

  // optional float tfl_existence_probability = 3;
  bool has_tfl_existence_probability() const;
  void clear_tfl_existence_probability();
  static const int kTflExistenceProbabilityFieldNumber = 3;
  float tfl_existence_probability() const;
  void set_tfl_existence_probability(float value);

  // optional float tfl_relevance_probability = 4;
  bool has_tfl_relevance_probability() const;
  void clear_tfl_relevance_probability();
  static const int kTflRelevanceProbabilityFieldNumber = 4;
  float tfl_relevance_probability() const;
  void set_tfl_relevance_probability(float value);

  // optional int32 reserved_1 = 5;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 5;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional .atd.meprocess.TFL.Tfl_colorType tfl_color = 6;
  bool has_tfl_color() const;
  void clear_tfl_color();
  static const int kTflColorFieldNumber = 6;
  ::atd::meprocess::TFL_Tfl_colorType tfl_color() const;
  void set_tfl_color(::atd::meprocess::TFL_Tfl_colorType value);

  // optional int32 tfl_camera_source = 7;
  bool has_tfl_camera_source() const;
  void clear_tfl_camera_source();
  static const int kTflCameraSourceFieldNumber = 7;
  ::google::protobuf::int32 tfl_camera_source() const;
  void set_tfl_camera_source(::google::protobuf::int32 value);

  // optional int32 tfl_relevance_direction = 8;
  bool has_tfl_relevance_direction() const;
  void clear_tfl_relevance_direction();
  static const int kTflRelevanceDirectionFieldNumber = 8;
  ::google::protobuf::int32 tfl_relevance_direction() const;
  void set_tfl_relevance_direction(::google::protobuf::int32 value);

  // optional .atd.meprocess.TFL.Tfl_structure_orientationType tfl_structure_orientation = 9;
  bool has_tfl_structure_orientation() const;
  void clear_tfl_structure_orientation();
  static const int kTflStructureOrientationFieldNumber = 9;
  ::atd::meprocess::TFL_Tfl_structure_orientationType tfl_structure_orientation() const;
  void set_tfl_structure_orientation(::atd::meprocess::TFL_Tfl_structure_orientationType value);

  // optional float tfl_rel_dir_quality = 10;
  bool has_tfl_rel_dir_quality() const;
  void clear_tfl_rel_dir_quality();
  static const int kTflRelDirQualityFieldNumber = 10;
  float tfl_rel_dir_quality() const;
  void set_tfl_rel_dir_quality(float value);

  // optional .atd.meprocess.TFL.Tfl_modeType tfl_mode = 11;
  bool has_tfl_mode() const;
  void clear_tfl_mode();
  static const int kTflModeFieldNumber = 11;
  ::atd::meprocess::TFL_Tfl_modeType tfl_mode() const;
  void set_tfl_mode(::atd::meprocess::TFL_Tfl_modeType value);

  // optional bool reserved_2 = 12;
  bool has_reserved_2() const;
  void clear_reserved_2();
  static const int kReserved2FieldNumber = 12;
  bool reserved_2() const;
  void set_reserved_2(bool value);

  // optional float tfl_width = 13;
  bool has_tfl_width() const;
  void clear_tfl_width();
  static const int kTflWidthFieldNumber = 13;
  float tfl_width() const;
  void set_tfl_width(float value);

  // optional float tfl_width_std = 14;
  bool has_tfl_width_std() const;
  void clear_tfl_width_std();
  static const int kTflWidthStdFieldNumber = 14;
  float tfl_width_std() const;
  void set_tfl_width_std(float value);

  // optional float tfl_height = 15;
  bool has_tfl_height() const;
  void clear_tfl_height();
  static const int kTflHeightFieldNumber = 15;
  float tfl_height() const;
  void set_tfl_height(float value);

  // optional float tfl_height_std = 16;
  bool has_tfl_height_std() const;
  void clear_tfl_height_std();
  static const int kTflHeightStdFieldNumber = 16;
  float tfl_height_std() const;
  void set_tfl_height_std(float value);

  // optional float tfl_long_distance = 17;
  bool has_tfl_long_distance() const;
  void clear_tfl_long_distance();
  static const int kTflLongDistanceFieldNumber = 17;
  float tfl_long_distance() const;
  void set_tfl_long_distance(float value);

  // optional float tfl_long_distance_std = 18;
  bool has_tfl_long_distance_std() const;
  void clear_tfl_long_distance_std();
  static const int kTflLongDistanceStdFieldNumber = 18;
  float tfl_long_distance_std() const;
  void set_tfl_long_distance_std(float value);

  // optional float tfl_rel_height = 19;
  bool has_tfl_rel_height() const;
  void clear_tfl_rel_height();
  static const int kTflRelHeightFieldNumber = 19;
  float tfl_rel_height() const;
  void set_tfl_rel_height(float value);

  // optional float tfl_rel_height_std = 20;
  bool has_tfl_rel_height_std() const;
  void clear_tfl_rel_height_std();
  static const int kTflRelHeightStdFieldNumber = 20;
  float tfl_rel_height_std() const;
  void set_tfl_rel_height_std(float value);

  // optional int32 reserved_3 = 21;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 21;
  ::google::protobuf::int32 reserved_3() const;
  void set_reserved_3(::google::protobuf::int32 value);

  // optional float tfl_lat_distance = 22;
  bool has_tfl_lat_distance() const;
  void clear_tfl_lat_distance();
  static const int kTflLatDistanceFieldNumber = 22;
  float tfl_lat_distance() const;
  void set_tfl_lat_distance(float value);

  // optional float tfl_lat_distance_std = 23;
  bool has_tfl_lat_distance_std() const;
  void clear_tfl_lat_distance_std();
  static const int kTflLatDistanceStdFieldNumber = 23;
  float tfl_lat_distance_std() const;
  void set_tfl_lat_distance_std(float value);

  // optional int32 tfl_shape = 24;
  bool has_tfl_shape() const;
  void clear_tfl_shape();
  static const int kTflShapeFieldNumber = 24;
  ::google::protobuf::int32 tfl_shape() const;
  void set_tfl_shape(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.TFL)
 private:
  void set_has_tfl_object_id();
  void clear_has_tfl_object_id();
  void set_has_tfl_lightbox_id();
  void clear_has_tfl_lightbox_id();
  void set_has_tfl_existence_probability();
  void clear_has_tfl_existence_probability();
  void set_has_tfl_relevance_probability();
  void clear_has_tfl_relevance_probability();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_tfl_color();
  void clear_has_tfl_color();
  void set_has_tfl_camera_source();
  void clear_has_tfl_camera_source();
  void set_has_tfl_relevance_direction();
  void clear_has_tfl_relevance_direction();
  void set_has_tfl_structure_orientation();
  void clear_has_tfl_structure_orientation();
  void set_has_tfl_rel_dir_quality();
  void clear_has_tfl_rel_dir_quality();
  void set_has_tfl_mode();
  void clear_has_tfl_mode();
  void set_has_reserved_2();
  void clear_has_reserved_2();
  void set_has_tfl_width();
  void clear_has_tfl_width();
  void set_has_tfl_width_std();
  void clear_has_tfl_width_std();
  void set_has_tfl_height();
  void clear_has_tfl_height();
  void set_has_tfl_height_std();
  void clear_has_tfl_height_std();
  void set_has_tfl_long_distance();
  void clear_has_tfl_long_distance();
  void set_has_tfl_long_distance_std();
  void clear_has_tfl_long_distance_std();
  void set_has_tfl_rel_height();
  void clear_has_tfl_rel_height();
  void set_has_tfl_rel_height_std();
  void clear_has_tfl_rel_height_std();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_tfl_lat_distance();
  void clear_has_tfl_lat_distance();
  void set_has_tfl_lat_distance_std();
  void clear_has_tfl_lat_distance_std();
  void set_has_tfl_shape();
  void clear_has_tfl_shape();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tfl_object_id_;
  ::google::protobuf::int32 tfl_lightbox_id_;
  float tfl_existence_probability_;
  float tfl_relevance_probability_;
  ::google::protobuf::int32 reserved_1_;
  int tfl_color_;
  ::google::protobuf::int32 tfl_camera_source_;
  ::google::protobuf::int32 tfl_relevance_direction_;
  int tfl_structure_orientation_;
  float tfl_rel_dir_quality_;
  int tfl_mode_;
  bool reserved_2_;
  float tfl_width_;
  float tfl_width_std_;
  float tfl_height_;
  float tfl_height_std_;
  float tfl_long_distance_;
  float tfl_long_distance_std_;
  float tfl_rel_height_;
  float tfl_rel_height_std_;
  ::google::protobuf::int32 reserved_3_;
  float tfl_lat_distance_;
  float tfl_lat_distance_std_;
  ::google::protobuf::int32 tfl_shape_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TSRCommon : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.TSRCommon) */ {
 public:
  TSRCommon();
  virtual ~TSRCommon();

  TSRCommon(const TSRCommon& from);

  inline TSRCommon& operator=(const TSRCommon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TSRCommon& default_instance();

  static inline const TSRCommon* internal_default_instance() {
    return reinterpret_cast<const TSRCommon*>(
               &_TSRCommon_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    41;

  void Swap(TSRCommon* other);

  // implements Message ----------------------------------------------

  inline TSRCommon* New() const PROTOBUF_FINAL { return New(NULL); }

  TSRCommon* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TSRCommon& from);
  void MergeFrom(const TSRCommon& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TSRCommon* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 zero_byte = 1;
  bool has_zero_byte() const;
  void clear_zero_byte();
  static const int kZeroByteFieldNumber = 1;
  ::google::protobuf::int32 zero_byte() const;
  void set_zero_byte(::google::protobuf::int32 value);

  // optional int32 tsr_protocol_version = 2;
  bool has_tsr_protocol_version() const;
  void clear_tsr_protocol_version();
  static const int kTsrProtocolVersionFieldNumber = 2;
  ::google::protobuf::int32 tsr_protocol_version() const;
  void set_tsr_protocol_version(::google::protobuf::int32 value);

  // optional int32 tsr_sync_id = 3;
  bool has_tsr_sync_id() const;
  void clear_tsr_sync_id();
  static const int kTsrSyncIdFieldNumber = 3;
  ::google::protobuf::int32 tsr_sync_id() const;
  void set_tsr_sync_id(::google::protobuf::int32 value);

  // optional int32 reserved_1 = 4;
  bool has_reserved_1() const;
  void clear_reserved_1();
  static const int kReserved1FieldNumber = 4;
  ::google::protobuf::int32 reserved_1() const;
  void set_reserved_1(::google::protobuf::int32 value);

  // optional int32 tsr_apr__sign_count = 5;
  bool has_tsr_apr__sign_count() const;
  void clear_tsr_apr__sign_count();
  static const int kTsrAprSignCountFieldNumber = 5;
  ::google::protobuf::int32 tsr_apr__sign_count() const;
  void set_tsr_apr__sign_count(::google::protobuf::int32 value);

  // optional int32 tsr_filtered_sign_count = 6;
  bool has_tsr_filtered_sign_count() const;
  void clear_tsr_filtered_sign_count();
  static const int kTsrFilteredSignCountFieldNumber = 6;
  ::google::protobuf::int32 tsr_filtered_sign_count() const;
  void set_tsr_filtered_sign_count(::google::protobuf::int32 value);

  // optional int32 tsr_undertracking_sign_count = 7;
  bool has_tsr_undertracking_sign_count() const;
  void clear_tsr_undertracking_sign_count();
  static const int kTsrUndertrackingSignCountFieldNumber = 7;
  ::google::protobuf::int32 tsr_undertracking_sign_count() const;
  void set_tsr_undertracking_sign_count(::google::protobuf::int32 value);

  // optional int32 tsr_header_buffer = 8;
  bool has_tsr_header_buffer() const;
  void clear_tsr_header_buffer();
  static const int kTsrHeaderBufferFieldNumber = 8;
  ::google::protobuf::int32 tsr_header_buffer() const;
  void set_tsr_header_buffer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.TSRCommon)
 private:
  void set_has_zero_byte();
  void clear_has_zero_byte();
  void set_has_tsr_protocol_version();
  void clear_has_tsr_protocol_version();
  void set_has_tsr_sync_id();
  void clear_has_tsr_sync_id();
  void set_has_reserved_1();
  void clear_has_reserved_1();
  void set_has_tsr_apr__sign_count();
  void clear_has_tsr_apr__sign_count();
  void set_has_tsr_filtered_sign_count();
  void clear_has_tsr_filtered_sign_count();
  void set_has_tsr_undertracking_sign_count();
  void clear_has_tsr_undertracking_sign_count();
  void set_has_tsr_header_buffer();
  void clear_has_tsr_header_buffer();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 zero_byte_;
  ::google::protobuf::int32 tsr_protocol_version_;
  ::google::protobuf::int32 tsr_sync_id_;
  ::google::protobuf::int32 reserved_1_;
  ::google::protobuf::int32 tsr_apr__sign_count_;
  ::google::protobuf::int32 tsr_filtered_sign_count_;
  ::google::protobuf::int32 tsr_undertracking_sign_count_;
  ::google::protobuf::int32 tsr_header_buffer_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Dt_Record_TSR : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.Dt_Record_TSR) */ {
 public:
  Dt_Record_TSR();
  virtual ~Dt_Record_TSR();

  Dt_Record_TSR(const Dt_Record_TSR& from);

  inline Dt_Record_TSR& operator=(const Dt_Record_TSR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Dt_Record_TSR& default_instance();

  static inline const Dt_Record_TSR* internal_default_instance() {
    return reinterpret_cast<const Dt_Record_TSR*>(
               &_Dt_Record_TSR_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    42;

  void Swap(Dt_Record_TSR* other);

  // implements Message ----------------------------------------------

  inline Dt_Record_TSR* New() const PROTOBUF_FINAL { return New(NULL); }

  Dt_Record_TSR* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Dt_Record_TSR& from);
  void MergeFrom(const Dt_Record_TSR& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Dt_Record_TSR* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.meprocess.TSR dt_array_20_tsr = 4;
  int dt_array_20_tsr_size() const;
  void clear_dt_array_20_tsr();
  static const int kDtArray20TsrFieldNumber = 4;
  const ::atd::meprocess::TSR& dt_array_20_tsr(int index) const;
  ::atd::meprocess::TSR* mutable_dt_array_20_tsr(int index);
  ::atd::meprocess::TSR* add_dt_array_20_tsr();
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TSR >*
      mutable_dt_array_20_tsr();
  const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TSR >&
      dt_array_20_tsr() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.meprocess.TSRCommon sttsrcommon = 3;
  bool has_sttsrcommon() const;
  void clear_sttsrcommon();
  static const int kSttsrcommonFieldNumber = 3;
  const ::atd::meprocess::TSRCommon& sttsrcommon() const;
  ::atd::meprocess::TSRCommon* mutable_sttsrcommon();
  ::atd::meprocess::TSRCommon* release_sttsrcommon();
  void set_allocated_sttsrcommon(::atd::meprocess::TSRCommon* sttsrcommon);

  // @@protoc_insertion_point(class_scope:atd.meprocess.Dt_Record_TSR)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_sttsrcommon();
  void clear_has_sttsrcommon();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TSR > dt_array_20_tsr_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::meprocess::TSRCommon* sttsrcommon_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TSR : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.meprocess.TSR) */ {
 public:
  TSR();
  virtual ~TSR();

  TSR(const TSR& from);

  inline TSR& operator=(const TSR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const TSR& default_instance();

  static inline const TSR* internal_default_instance() {
    return reinterpret_cast<const TSR*>(
               &_TSR_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    43;

  void Swap(TSR* other);

  // implements Message ----------------------------------------------

  inline TSR* New() const PROTOBUF_FINAL { return New(NULL); }

  TSR* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const TSR& from);
  void MergeFrom(const TSR& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TSR* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef TSR_Tsr_relevancyType Tsr_relevancyType;
  static const Tsr_relevancyType RELEVANT_SIGN =
    TSR_Tsr_relevancyType_RELEVANT_SIGN;
  static const Tsr_relevancyType HIGHWAY_EXIT_SIGN =
    TSR_Tsr_relevancyType_HIGHWAY_EXIT_SIGN;
  static const Tsr_relevancyType OTHER_FILTER_REASON =
    TSR_Tsr_relevancyType_OTHER_FILTER_REASON;
  static const Tsr_relevancyType LANE_ASSIGNMENT_SIGN =
    TSR_Tsr_relevancyType_LANE_ASSIGNMENT_SIGN;
  static const Tsr_relevancyType PARALLEL_ROAD_SIGN =
    TSR_Tsr_relevancyType_PARALLEL_ROAD_SIGN;
  static const Tsr_relevancyType SIGN_ON_TURN =
    TSR_Tsr_relevancyType_SIGN_ON_TURN;
  static const Tsr_relevancyType FAR_IRRELEVANT_SIGN =
    TSR_Tsr_relevancyType_FAR_IRRELEVANT_SIGN;
  static const Tsr_relevancyType INTERNAL_SIGN_CONTRADICTION =
    TSR_Tsr_relevancyType_INTERNAL_SIGN_CONTRADICTION;
  static const Tsr_relevancyType ERROR_SIGN_CODE =
    TSR_Tsr_relevancyType_ERROR_SIGN_CODE;
  static const Tsr_relevancyType CIPV_IN_FRONT =
    TSR_Tsr_relevancyType_CIPV_IN_FRONT;
  static const Tsr_relevancyType CONTRADICT_ARROW_SIGN =
    TSR_Tsr_relevancyType_CONTRADICT_ARROW_SIGN;
  static inline bool Tsr_relevancyType_IsValid(int value) {
    return TSR_Tsr_relevancyType_IsValid(value);
  }
  static const Tsr_relevancyType Tsr_relevancyType_MIN =
    TSR_Tsr_relevancyType_Tsr_relevancyType_MIN;
  static const Tsr_relevancyType Tsr_relevancyType_MAX =
    TSR_Tsr_relevancyType_Tsr_relevancyType_MAX;
  static const int Tsr_relevancyType_ARRAYSIZE =
    TSR_Tsr_relevancyType_Tsr_relevancyType_ARRAYSIZE;

  typedef TSR_Tsr_filter_typeType Tsr_filter_typeType;
  static const Tsr_filter_typeType NO_SLI_FILTER =
    TSR_Tsr_filter_typeType_NO_SLI_FILTER;
  static const Tsr_filter_typeType TRUCK =
    TSR_Tsr_filter_typeType_TRUCK;
  static const Tsr_filter_typeType EMBEDDED =
    TSR_Tsr_filter_typeType_EMBEDDED;
  static const Tsr_filter_typeType MINIMUN =
    TSR_Tsr_filter_typeType_MINIMUN;
  static const Tsr_filter_typeType ROAD_NUMBER =
    TSR_Tsr_filter_typeType_ROAD_NUMBER;
  static const Tsr_filter_typeType RESERVED_1 =
    TSR_Tsr_filter_typeType_RESERVED_1;
  static const Tsr_filter_typeType RESERVED_2 =
    TSR_Tsr_filter_typeType_RESERVED_2;
  static const Tsr_filter_typeType RESERVED_3 =
    TSR_Tsr_filter_typeType_RESERVED_3;
  static inline bool Tsr_filter_typeType_IsValid(int value) {
    return TSR_Tsr_filter_typeType_IsValid(value);
  }
  static const Tsr_filter_typeType Tsr_filter_typeType_MIN =
    TSR_Tsr_filter_typeType_Tsr_filter_typeType_MIN;
  static const Tsr_filter_typeType Tsr_filter_typeType_MAX =
    TSR_Tsr_filter_typeType_Tsr_filter_typeType_MAX;
  static const int Tsr_filter_typeType_ARRAYSIZE =
    TSR_Tsr_filter_typeType_Tsr_filter_typeType_ARRAYSIZE;

  typedef TSR_Tsr_sign_shapeType Tsr_sign_shapeType;
  static const Tsr_sign_shapeType UNKNON =
    TSR_Tsr_sign_shapeType_UNKNON;
  static const Tsr_sign_shapeType CIRCLE =
    TSR_Tsr_sign_shapeType_CIRCLE;
  static const Tsr_sign_shapeType RECTANGLE =
    TSR_Tsr_sign_shapeType_RECTANGLE;
  static const Tsr_sign_shapeType TRIANGLE_UP =
    TSR_Tsr_sign_shapeType_TRIANGLE_UP;
  static const Tsr_sign_shapeType TRIANGLE_DOWN =
    TSR_Tsr_sign_shapeType_TRIANGLE_DOWN;
  static const Tsr_sign_shapeType DIAMOND =
    TSR_Tsr_sign_shapeType_DIAMOND;
  static const Tsr_sign_shapeType RESERVED_0 =
    TSR_Tsr_sign_shapeType_RESERVED_0;
  static const Tsr_sign_shapeType TSR_Sign_Shape_RESERVED_2_ =
    TSR_Tsr_sign_shapeType_TSR_Sign_Shape_RESERVED_2_;
  static const Tsr_sign_shapeType TSR_Sign_Shape_RESERVED_3_ =
    TSR_Tsr_sign_shapeType_TSR_Sign_Shape_RESERVED_3_;
  static inline bool Tsr_sign_shapeType_IsValid(int value) {
    return TSR_Tsr_sign_shapeType_IsValid(value);
  }
  static const Tsr_sign_shapeType Tsr_sign_shapeType_MIN =
    TSR_Tsr_sign_shapeType_Tsr_sign_shapeType_MIN;
  static const Tsr_sign_shapeType Tsr_sign_shapeType_MAX =
    TSR_Tsr_sign_shapeType_Tsr_sign_shapeType_MAX;
  static const int Tsr_sign_shapeType_ARRAYSIZE =
    TSR_Tsr_sign_shapeType_Tsr_sign_shapeType_ARRAYSIZE;

  typedef TSR_Tsr_sign_structureType Tsr_sign_structureType;
  static const Tsr_sign_structureType UNKNOWN =
    TSR_Tsr_sign_structureType_UNKNOWN;
  static const Tsr_sign_structureType STANDARD =
    TSR_Tsr_sign_structureType_STANDARD;
  static const Tsr_sign_structureType VARIABLE =
    TSR_Tsr_sign_structureType_VARIABLE;
  static const Tsr_sign_structureType ELECTRONIC =
    TSR_Tsr_sign_structureType_ELECTRONIC;
  static inline bool Tsr_sign_structureType_IsValid(int value) {
    return TSR_Tsr_sign_structureType_IsValid(value);
  }
  static const Tsr_sign_structureType Tsr_sign_structureType_MIN =
    TSR_Tsr_sign_structureType_Tsr_sign_structureType_MIN;
  static const Tsr_sign_structureType Tsr_sign_structureType_MAX =
    TSR_Tsr_sign_structureType_Tsr_sign_structureType_MAX;
  static const int Tsr_sign_structureType_ARRAYSIZE =
    TSR_Tsr_sign_structureType_Tsr_sign_structureType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional int32 tsr_id = 1;
  bool has_tsr_id() const;
  void clear_tsr_id();
  static const int kTsrIdFieldNumber = 1;
  ::google::protobuf::int32 tsr_id() const;
  void set_tsr_id(::google::protobuf::int32 value);

  // optional int32 tsr_camera_source = 2;
  bool has_tsr_camera_source() const;
  void clear_tsr_camera_source();
  static const int kTsrCameraSourceFieldNumber = 2;
  ::google::protobuf::int32 tsr_camera_source() const;
  void set_tsr_camera_source(::google::protobuf::int32 value);

  // optional int32 tsr_sign_name = 3;
  bool has_tsr_sign_name() const;
  void clear_tsr_sign_name();
  static const int kTsrSignNameFieldNumber = 3;
  ::google::protobuf::int32 tsr_sign_name() const;
  void set_tsr_sign_name(::google::protobuf::int32 value);

  // optional .atd.meprocess.TSR.Tsr_relevancyType tsr_relevancy = 4;
  bool has_tsr_relevancy() const;
  void clear_tsr_relevancy();
  static const int kTsrRelevancyFieldNumber = 4;
  ::atd::meprocess::TSR_Tsr_relevancyType tsr_relevancy() const;
  void set_tsr_relevancy(::atd::meprocess::TSR_Tsr_relevancyType value);

  // optional .atd.meprocess.TSR.Tsr_filter_typeType tsr_filter_type = 5;
  bool has_tsr_filter_type() const;
  void clear_tsr_filter_type();
  static const int kTsrFilterTypeFieldNumber = 5;
  ::atd::meprocess::TSR_Tsr_filter_typeType tsr_filter_type() const;
  void set_tsr_filter_type(::atd::meprocess::TSR_Tsr_filter_typeType value);

  // optional bool reserved_3 = 6;
  bool has_reserved_3() const;
  void clear_reserved_3();
  static const int kReserved3FieldNumber = 6;
  bool reserved_3() const;
  void set_reserved_3(bool value);

  // optional int32 tsr_sup1_signname = 7;
  bool has_tsr_sup1_signname() const;
  void clear_tsr_sup1_signname();
  static const int kTsrSup1SignnameFieldNumber = 7;
  ::google::protobuf::int32 tsr_sup1_signname() const;
  void set_tsr_sup1_signname(::google::protobuf::int32 value);

  // optional float tsr_sup1_confidence = 8;
  bool has_tsr_sup1_confidence() const;
  void clear_tsr_sup1_confidence();
  static const int kTsrSup1ConfidenceFieldNumber = 8;
  float tsr_sup1_confidence() const;
  void set_tsr_sup1_confidence(float value);

  // optional int32 tsr_sup2_signname = 9;
  bool has_tsr_sup2_signname() const;
  void clear_tsr_sup2_signname();
  static const int kTsrSup2SignnameFieldNumber = 9;
  ::google::protobuf::int32 tsr_sup2_signname() const;
  void set_tsr_sup2_signname(::google::protobuf::int32 value);

  // optional float tsr_sup2_confidence = 10;
  bool has_tsr_sup2_confidence() const;
  void clear_tsr_sup2_confidence();
  static const int kTsrSup2ConfidenceFieldNumber = 10;
  float tsr_sup2_confidence() const;
  void set_tsr_sup2_confidence(float value);

  // optional int32 reserved_4 = 11;
  bool has_reserved_4() const;
  void clear_reserved_4();
  static const int kReserved4FieldNumber = 11;
  ::google::protobuf::int32 reserved_4() const;
  void set_reserved_4(::google::protobuf::int32 value);

  // optional .atd.meprocess.TSR.Tsr_sign_shapeType tsr_sign_shape = 12;
  bool has_tsr_sign_shape() const;
  void clear_tsr_sign_shape();
  static const int kTsrSignShapeFieldNumber = 12;
  ::atd::meprocess::TSR_Tsr_sign_shapeType tsr_sign_shape() const;
  void set_tsr_sign_shape(::atd::meprocess::TSR_Tsr_sign_shapeType value);

  // optional .atd.meprocess.TSR.Tsr_sign_structureType tsr_sign_structure = 13;
  bool has_tsr_sign_structure() const;
  void clear_tsr_sign_structure();
  static const int kTsrSignStructureFieldNumber = 13;
  ::atd::meprocess::TSR_Tsr_sign_structureType tsr_sign_structure() const;
  void set_tsr_sign_structure(::atd::meprocess::TSR_Tsr_sign_structureType value);

  // optional float tsr_confidence = 14;
  bool has_tsr_confidence() const;
  void clear_tsr_confidence();
  static const int kTsrConfidenceFieldNumber = 14;
  float tsr_confidence() const;
  void set_tsr_confidence(float value);

  // optional float tsr_sign_long_distance = 15;
  bool has_tsr_sign_long_distance() const;
  void clear_tsr_sign_long_distance();
  static const int kTsrSignLongDistanceFieldNumber = 15;
  float tsr_sign_long_distance() const;
  void set_tsr_sign_long_distance(float value);

  // optional int32 reserved_5 = 16;
  bool has_reserved_5() const;
  void clear_reserved_5();
  static const int kReserved5FieldNumber = 16;
  ::google::protobuf::int32 reserved_5() const;
  void set_reserved_5(::google::protobuf::int32 value);

  // optional float tsr_sign_lateral_distance = 17;
  bool has_tsr_sign_lateral_distance() const;
  void clear_tsr_sign_lateral_distance();
  static const int kTsrSignLateralDistanceFieldNumber = 17;
  float tsr_sign_lateral_distance() const;
  void set_tsr_sign_lateral_distance(float value);

  // optional float tsr_sign_height = 18;
  bool has_tsr_sign_height() const;
  void clear_tsr_sign_height();
  static const int kTsrSignHeightFieldNumber = 18;
  float tsr_sign_height() const;
  void set_tsr_sign_height(float value);

  // optional int32 reserved_6 = 19;
  bool has_reserved_6() const;
  void clear_reserved_6();
  static const int kReserved6FieldNumber = 19;
  ::google::protobuf::int32 reserved_6() const;
  void set_reserved_6(::google::protobuf::int32 value);

  // optional float tsr_sign_long_distance_std = 20;
  bool has_tsr_sign_long_distance_std() const;
  void clear_tsr_sign_long_distance_std();
  static const int kTsrSignLongDistanceStdFieldNumber = 20;
  float tsr_sign_long_distance_std() const;
  void set_tsr_sign_long_distance_std(float value);

  // optional float tsr_sign_lat_distance_std = 21;
  bool has_tsr_sign_lat_distance_std() const;
  void clear_tsr_sign_lat_distance_std();
  static const int kTsrSignLatDistanceStdFieldNumber = 21;
  float tsr_sign_lat_distance_std() const;
  void set_tsr_sign_lat_distance_std(float value);

  // optional int32 reserved_7 = 22;
  bool has_reserved_7() const;
  void clear_reserved_7();
  static const int kReserved7FieldNumber = 22;
  ::google::protobuf::int32 reserved_7() const;
  void set_reserved_7(::google::protobuf::int32 value);

  // optional float tsr_sign_height_std = 23;
  bool has_tsr_sign_height_std() const;
  void clear_tsr_sign_height_std();
  static const int kTsrSignHeightStdFieldNumber = 23;
  float tsr_sign_height_std() const;
  void set_tsr_sign_height_std(float value);

  // optional float tsr_sign_panel_width = 24;
  bool has_tsr_sign_panel_width() const;
  void clear_tsr_sign_panel_width();
  static const int kTsrSignPanelWidthFieldNumber = 24;
  float tsr_sign_panel_width() const;
  void set_tsr_sign_panel_width(float value);

  // optional int32 reserved_8 = 25;
  bool has_reserved_8() const;
  void clear_reserved_8();
  static const int kReserved8FieldNumber = 25;
  ::google::protobuf::int32 reserved_8() const;
  void set_reserved_8(::google::protobuf::int32 value);

  // optional float tsr_sign_panel_height = 26;
  bool has_tsr_sign_panel_height() const;
  void clear_tsr_sign_panel_height();
  static const int kTsrSignPanelHeightFieldNumber = 26;
  float tsr_sign_panel_height() const;
  void set_tsr_sign_panel_height(float value);

  // optional float tsr_sign_panel_width_std = 27;
  bool has_tsr_sign_panel_width_std() const;
  void clear_tsr_sign_panel_width_std();
  static const int kTsrSignPanelWidthStdFieldNumber = 27;
  float tsr_sign_panel_width_std() const;
  void set_tsr_sign_panel_width_std(float value);

  // optional float tsr_sign_panel_height_std = 28;
  bool has_tsr_sign_panel_height_std() const;
  void clear_tsr_sign_panel_height_std();
  static const int kTsrSignPanelHeightStdFieldNumber = 28;
  float tsr_sign_panel_height_std() const;
  void set_tsr_sign_panel_height_std(float value);

  // optional int32 reserved_9 = 29;
  bool has_reserved_9() const;
  void clear_reserved_9();
  static const int kReserved9FieldNumber = 29;
  ::google::protobuf::int32 reserved_9() const;
  void set_reserved_9(::google::protobuf::int32 value);

  // optional float tsr_tracking_age = 30;
  bool has_tsr_tracking_age() const;
  void clear_tsr_tracking_age();
  static const int kTsrTrackingAgeFieldNumber = 30;
  float tsr_tracking_age() const;
  void set_tsr_tracking_age(float value);

  // @@protoc_insertion_point(class_scope:atd.meprocess.TSR)
 private:
  void set_has_tsr_id();
  void clear_has_tsr_id();
  void set_has_tsr_camera_source();
  void clear_has_tsr_camera_source();
  void set_has_tsr_sign_name();
  void clear_has_tsr_sign_name();
  void set_has_tsr_relevancy();
  void clear_has_tsr_relevancy();
  void set_has_tsr_filter_type();
  void clear_has_tsr_filter_type();
  void set_has_reserved_3();
  void clear_has_reserved_3();
  void set_has_tsr_sup1_signname();
  void clear_has_tsr_sup1_signname();
  void set_has_tsr_sup1_confidence();
  void clear_has_tsr_sup1_confidence();
  void set_has_tsr_sup2_signname();
  void clear_has_tsr_sup2_signname();
  void set_has_tsr_sup2_confidence();
  void clear_has_tsr_sup2_confidence();
  void set_has_reserved_4();
  void clear_has_reserved_4();
  void set_has_tsr_sign_shape();
  void clear_has_tsr_sign_shape();
  void set_has_tsr_sign_structure();
  void clear_has_tsr_sign_structure();
  void set_has_tsr_confidence();
  void clear_has_tsr_confidence();
  void set_has_tsr_sign_long_distance();
  void clear_has_tsr_sign_long_distance();
  void set_has_reserved_5();
  void clear_has_reserved_5();
  void set_has_tsr_sign_lateral_distance();
  void clear_has_tsr_sign_lateral_distance();
  void set_has_tsr_sign_height();
  void clear_has_tsr_sign_height();
  void set_has_reserved_6();
  void clear_has_reserved_6();
  void set_has_tsr_sign_long_distance_std();
  void clear_has_tsr_sign_long_distance_std();
  void set_has_tsr_sign_lat_distance_std();
  void clear_has_tsr_sign_lat_distance_std();
  void set_has_reserved_7();
  void clear_has_reserved_7();
  void set_has_tsr_sign_height_std();
  void clear_has_tsr_sign_height_std();
  void set_has_tsr_sign_panel_width();
  void clear_has_tsr_sign_panel_width();
  void set_has_reserved_8();
  void clear_has_reserved_8();
  void set_has_tsr_sign_panel_height();
  void clear_has_tsr_sign_panel_height();
  void set_has_tsr_sign_panel_width_std();
  void clear_has_tsr_sign_panel_width_std();
  void set_has_tsr_sign_panel_height_std();
  void clear_has_tsr_sign_panel_height_std();
  void set_has_reserved_9();
  void clear_has_reserved_9();
  void set_has_tsr_tracking_age();
  void clear_has_tsr_tracking_age();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 tsr_id_;
  ::google::protobuf::int32 tsr_camera_source_;
  ::google::protobuf::int32 tsr_sign_name_;
  int tsr_relevancy_;
  int tsr_filter_type_;
  bool reserved_3_;
  ::google::protobuf::int32 tsr_sup1_signname_;
  float tsr_sup1_confidence_;
  ::google::protobuf::int32 tsr_sup2_signname_;
  float tsr_sup2_confidence_;
  ::google::protobuf::int32 reserved_4_;
  int tsr_sign_shape_;
  int tsr_sign_structure_;
  float tsr_confidence_;
  float tsr_sign_long_distance_;
  ::google::protobuf::int32 reserved_5_;
  float tsr_sign_lateral_distance_;
  float tsr_sign_height_;
  ::google::protobuf::int32 reserved_6_;
  float tsr_sign_long_distance_std_;
  float tsr_sign_lat_distance_std_;
  ::google::protobuf::int32 reserved_7_;
  float tsr_sign_height_std_;
  float tsr_sign_panel_width_;
  ::google::protobuf::int32 reserved_8_;
  float tsr_sign_panel_height_;
  float tsr_sign_panel_width_std_;
  float tsr_sign_panel_height_std_;
  ::google::protobuf::int32 reserved_9_;
  float tsr_tracking_age_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Record_App

// optional int32 reserved_1 = 1;
inline bool Dt_Record_App::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_App::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_App::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_App::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 Dt_Record_App::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_1)
  return reserved_1_;
}
inline void Dt_Record_App::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_1)
}

// optional int32 application_message_version = 2;
inline bool Dt_Record_App::has_application_message_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dt_Record_App::set_has_application_message_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dt_Record_App::clear_has_application_message_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dt_Record_App::clear_application_message_version() {
  application_message_version_ = 0;
  clear_has_application_message_version();
}
inline ::google::protobuf::int32 Dt_Record_App::application_message_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.application_message_version)
  return application_message_version_;
}
inline void Dt_Record_App::set_application_message_version(::google::protobuf::int32 value) {
  set_has_application_message_version();
  application_message_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.application_message_version)
}

// optional int32 main_state = 3;
inline bool Dt_Record_App::has_main_state() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dt_Record_App::set_has_main_state() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dt_Record_App::clear_has_main_state() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dt_Record_App::clear_main_state() {
  main_state_ = 0;
  clear_has_main_state();
}
inline ::google::protobuf::int32 Dt_Record_App::main_state() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.main_state)
  return main_state_;
}
inline void Dt_Record_App::set_main_state(::google::protobuf::int32 value) {
  set_has_main_state();
  main_state_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.main_state)
}

// optional int32 sub_state = 4;
inline bool Dt_Record_App::has_sub_state() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dt_Record_App::set_has_sub_state() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dt_Record_App::clear_has_sub_state() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dt_Record_App::clear_sub_state() {
  sub_state_ = 0;
  clear_has_sub_state();
}
inline ::google::protobuf::int32 Dt_Record_App::sub_state() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.sub_state)
  return sub_state_;
}
inline void Dt_Record_App::set_sub_state(::google::protobuf::int32 value) {
  set_has_sub_state();
  sub_state_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.sub_state)
}

// optional float eyeq_process_index = 5;
inline bool Dt_Record_App::has_eyeq_process_index() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dt_Record_App::set_has_eyeq_process_index() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dt_Record_App::clear_has_eyeq_process_index() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dt_Record_App::clear_eyeq_process_index() {
  eyeq_process_index_ = 0;
  clear_has_eyeq_process_index();
}
inline float Dt_Record_App::eyeq_process_index() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeq_process_index)
  return eyeq_process_index_;
}
inline void Dt_Record_App::set_eyeq_process_index(float value) {
  set_has_eyeq_process_index();
  eyeq_process_index_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeq_process_index)
}

// optional float eyeq_timestamp = 6;
inline bool Dt_Record_App::has_eyeq_timestamp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dt_Record_App::set_has_eyeq_timestamp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dt_Record_App::clear_has_eyeq_timestamp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dt_Record_App::clear_eyeq_timestamp() {
  eyeq_timestamp_ = 0;
  clear_has_eyeq_timestamp();
}
inline float Dt_Record_App::eyeq_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeq_timestamp)
  return eyeq_timestamp_;
}
inline void Dt_Record_App::set_eyeq_timestamp(float value) {
  set_has_eyeq_timestamp();
  eyeq_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeq_timestamp)
}

// optional float eyeq_current_timestamp = 7;
inline bool Dt_Record_App::has_eyeq_current_timestamp() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Dt_Record_App::set_has_eyeq_current_timestamp() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Dt_Record_App::clear_has_eyeq_current_timestamp() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Dt_Record_App::clear_eyeq_current_timestamp() {
  eyeq_current_timestamp_ = 0;
  clear_has_eyeq_current_timestamp();
}
inline float Dt_Record_App::eyeq_current_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeq_current_timestamp)
  return eyeq_current_timestamp_;
}
inline void Dt_Record_App::set_eyeq_current_timestamp(float value) {
  set_has_eyeq_current_timestamp();
  eyeq_current_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeq_current_timestamp)
}

// optional int32 application_diagnostics_part_1 = 8;
inline bool Dt_Record_App::has_application_diagnostics_part_1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Dt_Record_App::set_has_application_diagnostics_part_1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Dt_Record_App::clear_has_application_diagnostics_part_1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Dt_Record_App::clear_application_diagnostics_part_1() {
  application_diagnostics_part_1_ = 0;
  clear_has_application_diagnostics_part_1();
}
inline ::google::protobuf::int32 Dt_Record_App::application_diagnostics_part_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.application_diagnostics_part_1)
  return application_diagnostics_part_1_;
}
inline void Dt_Record_App::set_application_diagnostics_part_1(::google::protobuf::int32 value) {
  set_has_application_diagnostics_part_1();
  application_diagnostics_part_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.application_diagnostics_part_1)
}

// optional int32 application_diagnostics_part_2 = 9;
inline bool Dt_Record_App::has_application_diagnostics_part_2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Dt_Record_App::set_has_application_diagnostics_part_2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Dt_Record_App::clear_has_application_diagnostics_part_2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Dt_Record_App::clear_application_diagnostics_part_2() {
  application_diagnostics_part_2_ = 0;
  clear_has_application_diagnostics_part_2();
}
inline ::google::protobuf::int32 Dt_Record_App::application_diagnostics_part_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.application_diagnostics_part_2)
  return application_diagnostics_part_2_;
}
inline void Dt_Record_App::set_application_diagnostics_part_2(::google::protobuf::int32 value) {
  set_has_application_diagnostics_part_2();
  application_diagnostics_part_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.application_diagnostics_part_2)
}

// optional .atd.meprocess.Dt_Record_App.Fatal_errorType fatal_error = 10;
inline bool Dt_Record_App::has_fatal_error() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Dt_Record_App::set_has_fatal_error() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Dt_Record_App::clear_has_fatal_error() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Dt_Record_App::clear_fatal_error() {
  fatal_error_ = 0;
  clear_has_fatal_error();
}
inline ::atd::meprocess::Dt_Record_App_Fatal_errorType Dt_Record_App::fatal_error() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.fatal_error)
  return static_cast< ::atd::meprocess::Dt_Record_App_Fatal_errorType >(fatal_error_);
}
inline void Dt_Record_App::set_fatal_error(::atd::meprocess::Dt_Record_App_Fatal_errorType value) {
  assert(::atd::meprocess::Dt_Record_App_Fatal_errorType_IsValid(value));
  set_has_fatal_error();
  fatal_error_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.fatal_error)
}

// optional int32 reserved_2 = 11;
inline bool Dt_Record_App::has_reserved_2() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Dt_Record_App::set_has_reserved_2() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Dt_Record_App::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Dt_Record_App::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 Dt_Record_App::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_2)
  return reserved_2_;
}
inline void Dt_Record_App::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_2)
}

// optional .atd.meprocess.Dt_Record_App.Minor_errorType minor_error = 12;
inline bool Dt_Record_App::has_minor_error() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Dt_Record_App::set_has_minor_error() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Dt_Record_App::clear_has_minor_error() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Dt_Record_App::clear_minor_error() {
  minor_error_ = 0;
  clear_has_minor_error();
}
inline ::atd::meprocess::Dt_Record_App_Minor_errorType Dt_Record_App::minor_error() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.minor_error)
  return static_cast< ::atd::meprocess::Dt_Record_App_Minor_errorType >(minor_error_);
}
inline void Dt_Record_App::set_minor_error(::atd::meprocess::Dt_Record_App_Minor_errorType value) {
  assert(::atd::meprocess::Dt_Record_App_Minor_errorType_IsValid(value));
  set_has_minor_error();
  minor_error_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.minor_error)
}

// optional int32 eyeqtemperature1 = 13;
inline bool Dt_Record_App::has_eyeqtemperature1() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Dt_Record_App::set_has_eyeqtemperature1() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Dt_Record_App::clear_has_eyeqtemperature1() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Dt_Record_App::clear_eyeqtemperature1() {
  eyeqtemperature1_ = 0;
  clear_has_eyeqtemperature1();
}
inline ::google::protobuf::int32 Dt_Record_App::eyeqtemperature1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeqtemperature1)
  return eyeqtemperature1_;
}
inline void Dt_Record_App::set_eyeqtemperature1(::google::protobuf::int32 value) {
  set_has_eyeqtemperature1();
  eyeqtemperature1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeqtemperature1)
}

// optional int32 eyeqtemperature2 = 14;
inline bool Dt_Record_App::has_eyeqtemperature2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Dt_Record_App::set_has_eyeqtemperature2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Dt_Record_App::clear_has_eyeqtemperature2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Dt_Record_App::clear_eyeqtemperature2() {
  eyeqtemperature2_ = 0;
  clear_has_eyeqtemperature2();
}
inline ::google::protobuf::int32 Dt_Record_App::eyeqtemperature2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.eyeqtemperature2)
  return eyeqtemperature2_;
}
inline void Dt_Record_App::set_eyeqtemperature2(::google::protobuf::int32 value) {
  set_has_eyeqtemperature2();
  eyeqtemperature2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.eyeqtemperature2)
}

// optional .atd.meprocess.Dt_Record_App.Temperture_ddrType temperture_ddr = 15;
inline bool Dt_Record_App::has_temperture_ddr() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void Dt_Record_App::set_has_temperture_ddr() {
  _has_bits_[1] |= 0x00400000u;
}
inline void Dt_Record_App::clear_has_temperture_ddr() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void Dt_Record_App::clear_temperture_ddr() {
  temperture_ddr_ = -1;
  clear_has_temperture_ddr();
}
inline ::atd::meprocess::Dt_Record_App_Temperture_ddrType Dt_Record_App::temperture_ddr() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.temperture_ddr)
  return static_cast< ::atd::meprocess::Dt_Record_App_Temperture_ddrType >(temperture_ddr_);
}
inline void Dt_Record_App::set_temperture_ddr(::atd::meprocess::Dt_Record_App_Temperture_ddrType value) {
  assert(::atd::meprocess::Dt_Record_App_Temperture_ddrType_IsValid(value));
  set_has_temperture_ddr();
  temperture_ddr_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.temperture_ddr)
}

// optional int32 reserved_4 = 16;
inline bool Dt_Record_App::has_reserved_4() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Dt_Record_App::set_has_reserved_4() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Dt_Record_App::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Dt_Record_App::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
inline ::google::protobuf::int32 Dt_Record_App::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_4)
  return reserved_4_;
}
inline void Dt_Record_App::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_4)
}

// optional int32 cfg_status = 17;
inline bool Dt_Record_App::has_cfg_status() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Dt_Record_App::set_has_cfg_status() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Dt_Record_App::clear_has_cfg_status() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Dt_Record_App::clear_cfg_status() {
  cfg_status_ = 0;
  clear_has_cfg_status();
}
inline ::google::protobuf::int32 Dt_Record_App::cfg_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.cfg_status)
  return cfg_status_;
}
inline void Dt_Record_App::set_cfg_status(::google::protobuf::int32 value) {
  set_has_cfg_status();
  cfg_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.cfg_status)
}

// optional int32 spihealthstatus = 18;
inline bool Dt_Record_App::has_spihealthstatus() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Dt_Record_App::set_has_spihealthstatus() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Dt_Record_App::clear_has_spihealthstatus() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Dt_Record_App::clear_spihealthstatus() {
  spihealthstatus_ = 0;
  clear_has_spihealthstatus();
}
inline ::google::protobuf::int32 Dt_Record_App::spihealthstatus() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.spihealthstatus)
  return spihealthstatus_;
}
inline void Dt_Record_App::set_spihealthstatus(::google::protobuf::int32 value) {
  set_has_spihealthstatus();
  spihealthstatus_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.spihealthstatus)
}

// optional int32 spierrors = 19;
inline bool Dt_Record_App::has_spierrors() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Dt_Record_App::set_has_spierrors() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Dt_Record_App::clear_has_spierrors() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Dt_Record_App::clear_spierrors() {
  spierrors_ = 0;
  clear_has_spierrors();
}
inline ::google::protobuf::int32 Dt_Record_App::spierrors() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.spierrors)
  return spierrors_;
}
inline void Dt_Record_App::set_spierrors(::google::protobuf::int32 value) {
  set_has_spierrors();
  spierrors_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.spierrors)
}

// optional int32 reserved_5 = 20;
inline bool Dt_Record_App::has_reserved_5() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Dt_Record_App::set_has_reserved_5() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Dt_Record_App::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Dt_Record_App::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
inline ::google::protobuf::int32 Dt_Record_App::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reserved_5)
  return reserved_5_;
}
inline void Dt_Record_App::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.reserved_5)
}

// optional int32 valid_cameras_information = 21;
inline bool Dt_Record_App::has_valid_cameras_information() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Dt_Record_App::set_has_valid_cameras_information() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Dt_Record_App::clear_has_valid_cameras_information() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Dt_Record_App::clear_valid_cameras_information() {
  valid_cameras_information_ = 0;
  clear_has_valid_cameras_information();
}
inline ::google::protobuf::int32 Dt_Record_App::valid_cameras_information() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.valid_cameras_information)
  return valid_cameras_information_;
}
inline void Dt_Record_App::set_valid_cameras_information(::google::protobuf::int32 value) {
  set_has_valid_cameras_information();
  valid_cameras_information_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.valid_cameras_information)
}

// optional int32 camera1_temperature = 22;
inline bool Dt_Record_App::has_camera1_temperature() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Dt_Record_App::set_has_camera1_temperature() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Dt_Record_App::clear_has_camera1_temperature() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Dt_Record_App::clear_camera1_temperature() {
  camera1_temperature_ = 0;
  clear_has_camera1_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera1_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_temperature)
  return camera1_temperature_;
}
inline void Dt_Record_App::set_camera1_temperature(::google::protobuf::int32 value) {
  set_has_camera1_temperature();
  camera1_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_temperature)
}

// optional int32 camera2_temperature = 23;
inline bool Dt_Record_App::has_camera2_temperature() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Dt_Record_App::set_has_camera2_temperature() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Dt_Record_App::clear_has_camera2_temperature() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Dt_Record_App::clear_camera2_temperature() {
  camera2_temperature_ = 0;
  clear_has_camera2_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera2_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_temperature)
  return camera2_temperature_;
}
inline void Dt_Record_App::set_camera2_temperature(::google::protobuf::int32 value) {
  set_has_camera2_temperature();
  camera2_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_temperature)
}

// optional int32 camera3_temperature = 24;
inline bool Dt_Record_App::has_camera3_temperature() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Dt_Record_App::set_has_camera3_temperature() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Dt_Record_App::clear_has_camera3_temperature() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Dt_Record_App::clear_camera3_temperature() {
  camera3_temperature_ = 0;
  clear_has_camera3_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera3_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_temperature)
  return camera3_temperature_;
}
inline void Dt_Record_App::set_camera3_temperature(::google::protobuf::int32 value) {
  set_has_camera3_temperature();
  camera3_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_temperature)
}

// optional int32 camera4_temperature = 25;
inline bool Dt_Record_App::has_camera4_temperature() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Dt_Record_App::set_has_camera4_temperature() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Dt_Record_App::clear_has_camera4_temperature() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Dt_Record_App::clear_camera4_temperature() {
  camera4_temperature_ = 0;
  clear_has_camera4_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera4_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_temperature)
  return camera4_temperature_;
}
inline void Dt_Record_App::set_camera4_temperature(::google::protobuf::int32 value) {
  set_has_camera4_temperature();
  camera4_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_temperature)
}

// optional int32 camera5_temperature = 26;
inline bool Dt_Record_App::has_camera5_temperature() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Dt_Record_App::set_has_camera5_temperature() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Dt_Record_App::clear_has_camera5_temperature() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Dt_Record_App::clear_camera5_temperature() {
  camera5_temperature_ = 0;
  clear_has_camera5_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera5_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_temperature)
  return camera5_temperature_;
}
inline void Dt_Record_App::set_camera5_temperature(::google::protobuf::int32 value) {
  set_has_camera5_temperature();
  camera5_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_temperature)
}

// optional int32 camera6_temperature = 27;
inline bool Dt_Record_App::has_camera6_temperature() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Dt_Record_App::set_has_camera6_temperature() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Dt_Record_App::clear_has_camera6_temperature() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Dt_Record_App::clear_camera6_temperature() {
  camera6_temperature_ = 0;
  clear_has_camera6_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera6_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_temperature)
  return camera6_temperature_;
}
inline void Dt_Record_App::set_camera6_temperature(::google::protobuf::int32 value) {
  set_has_camera6_temperature();
  camera6_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_temperature)
}

// optional int32 camera7_temperature = 28;
inline bool Dt_Record_App::has_camera7_temperature() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Dt_Record_App::set_has_camera7_temperature() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Dt_Record_App::clear_has_camera7_temperature() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Dt_Record_App::clear_camera7_temperature() {
  camera7_temperature_ = 0;
  clear_has_camera7_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera7_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_temperature)
  return camera7_temperature_;
}
inline void Dt_Record_App::set_camera7_temperature(::google::protobuf::int32 value) {
  set_has_camera7_temperature();
  camera7_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_temperature)
}

// optional int32 camera8_temperature = 29;
inline bool Dt_Record_App::has_camera8_temperature() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Dt_Record_App::set_has_camera8_temperature() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Dt_Record_App::clear_has_camera8_temperature() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Dt_Record_App::clear_camera8_temperature() {
  camera8_temperature_ = 0;
  clear_has_camera8_temperature();
}
inline ::google::protobuf::int32 Dt_Record_App::camera8_temperature() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_temperature)
  return camera8_temperature_;
}
inline void Dt_Record_App::set_camera8_temperature(::google::protobuf::int32 value) {
  set_has_camera8_temperature();
  camera8_temperature_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_temperature)
}

// optional int32 camera1_videoerrorrange = 30;
inline bool Dt_Record_App::has_camera1_videoerrorrange() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Dt_Record_App::set_has_camera1_videoerrorrange() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Dt_Record_App::clear_has_camera1_videoerrorrange() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Dt_Record_App::clear_camera1_videoerrorrange() {
  camera1_videoerrorrange_ = 0;
  clear_has_camera1_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera1_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_videoerrorrange)
  return camera1_videoerrorrange_;
}
inline void Dt_Record_App::set_camera1_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera1_videoerrorrange();
  camera1_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_videoerrorrange)
}

// optional int32 camera2_videoerrorrange = 31;
inline bool Dt_Record_App::has_camera2_videoerrorrange() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Dt_Record_App::set_has_camera2_videoerrorrange() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Dt_Record_App::clear_has_camera2_videoerrorrange() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Dt_Record_App::clear_camera2_videoerrorrange() {
  camera2_videoerrorrange_ = 0;
  clear_has_camera2_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera2_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_videoerrorrange)
  return camera2_videoerrorrange_;
}
inline void Dt_Record_App::set_camera2_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera2_videoerrorrange();
  camera2_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_videoerrorrange)
}

// optional int32 camera3_videoerrorrange = 32;
inline bool Dt_Record_App::has_camera3_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Dt_Record_App::set_has_camera3_videoerrorrange() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Dt_Record_App::clear_has_camera3_videoerrorrange() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Dt_Record_App::clear_camera3_videoerrorrange() {
  camera3_videoerrorrange_ = 0;
  clear_has_camera3_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera3_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_videoerrorrange)
  return camera3_videoerrorrange_;
}
inline void Dt_Record_App::set_camera3_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera3_videoerrorrange();
  camera3_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_videoerrorrange)
}

// optional int32 camera4_videoerrorrange = 33;
inline bool Dt_Record_App::has_camera4_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Dt_Record_App::set_has_camera4_videoerrorrange() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Dt_Record_App::clear_has_camera4_videoerrorrange() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Dt_Record_App::clear_camera4_videoerrorrange() {
  camera4_videoerrorrange_ = 0;
  clear_has_camera4_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera4_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_videoerrorrange)
  return camera4_videoerrorrange_;
}
inline void Dt_Record_App::set_camera4_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera4_videoerrorrange();
  camera4_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_videoerrorrange)
}

// optional int32 camera5_videoerrorrange = 34;
inline bool Dt_Record_App::has_camera5_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Dt_Record_App::set_has_camera5_videoerrorrange() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Dt_Record_App::clear_has_camera5_videoerrorrange() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Dt_Record_App::clear_camera5_videoerrorrange() {
  camera5_videoerrorrange_ = 0;
  clear_has_camera5_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera5_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_videoerrorrange)
  return camera5_videoerrorrange_;
}
inline void Dt_Record_App::set_camera5_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera5_videoerrorrange();
  camera5_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_videoerrorrange)
}

// optional int32 camera6_videoerrorrange = 35;
inline bool Dt_Record_App::has_camera6_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Dt_Record_App::set_has_camera6_videoerrorrange() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Dt_Record_App::clear_has_camera6_videoerrorrange() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Dt_Record_App::clear_camera6_videoerrorrange() {
  camera6_videoerrorrange_ = 0;
  clear_has_camera6_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera6_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_videoerrorrange)
  return camera6_videoerrorrange_;
}
inline void Dt_Record_App::set_camera6_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera6_videoerrorrange();
  camera6_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_videoerrorrange)
}

// optional int32 camera7_videoerrorrange = 36;
inline bool Dt_Record_App::has_camera7_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Dt_Record_App::set_has_camera7_videoerrorrange() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Dt_Record_App::clear_has_camera7_videoerrorrange() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Dt_Record_App::clear_camera7_videoerrorrange() {
  camera7_videoerrorrange_ = 0;
  clear_has_camera7_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera7_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_videoerrorrange)
  return camera7_videoerrorrange_;
}
inline void Dt_Record_App::set_camera7_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera7_videoerrorrange();
  camera7_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_videoerrorrange)
}

// optional int32 camera8_videoerrorrange = 37;
inline bool Dt_Record_App::has_camera8_videoerrorrange() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Dt_Record_App::set_has_camera8_videoerrorrange() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Dt_Record_App::clear_has_camera8_videoerrorrange() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Dt_Record_App::clear_camera8_videoerrorrange() {
  camera8_videoerrorrange_ = 0;
  clear_has_camera8_videoerrorrange();
}
inline ::google::protobuf::int32 Dt_Record_App::camera8_videoerrorrange() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_videoerrorrange)
  return camera8_videoerrorrange_;
}
inline void Dt_Record_App::set_camera8_videoerrorrange(::google::protobuf::int32 value) {
  set_has_camera8_videoerrorrange();
  camera8_videoerrorrange_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_videoerrorrange)
}

// optional float camera1_videoerrorflags_pt1 = 38;
inline bool Dt_Record_App::has_camera1_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Dt_Record_App::set_has_camera1_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Dt_Record_App::clear_has_camera1_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Dt_Record_App::clear_camera1_videoerrorflags_pt1() {
  camera1_videoerrorflags_pt1_ = 0;
  clear_has_camera1_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera1_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt1)
  return camera1_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera1_videoerrorflags_pt1(float value) {
  set_has_camera1_videoerrorflags_pt1();
  camera1_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt1)
}

// optional float camera2_videoerrorflags_pt1 = 39;
inline bool Dt_Record_App::has_camera2_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Dt_Record_App::set_has_camera2_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Dt_Record_App::clear_has_camera2_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Dt_Record_App::clear_camera2_videoerrorflags_pt1() {
  camera2_videoerrorflags_pt1_ = 0;
  clear_has_camera2_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera2_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt1)
  return camera2_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera2_videoerrorflags_pt1(float value) {
  set_has_camera2_videoerrorflags_pt1();
  camera2_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt1)
}

// optional float camera3_videoerrorflags_pt1 = 40;
inline bool Dt_Record_App::has_camera3_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Dt_Record_App::set_has_camera3_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Dt_Record_App::clear_has_camera3_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Dt_Record_App::clear_camera3_videoerrorflags_pt1() {
  camera3_videoerrorflags_pt1_ = 0;
  clear_has_camera3_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera3_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt1)
  return camera3_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera3_videoerrorflags_pt1(float value) {
  set_has_camera3_videoerrorflags_pt1();
  camera3_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt1)
}

// optional float camera4_videoerrorflags_pt1 = 41;
inline bool Dt_Record_App::has_camera4_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Dt_Record_App::set_has_camera4_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Dt_Record_App::clear_has_camera4_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Dt_Record_App::clear_camera4_videoerrorflags_pt1() {
  camera4_videoerrorflags_pt1_ = 0;
  clear_has_camera4_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera4_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt1)
  return camera4_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera4_videoerrorflags_pt1(float value) {
  set_has_camera4_videoerrorflags_pt1();
  camera4_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt1)
}

// optional float camera5_videoerrorflags_pt1 = 42;
inline bool Dt_Record_App::has_camera5_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Dt_Record_App::set_has_camera5_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Dt_Record_App::clear_has_camera5_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Dt_Record_App::clear_camera5_videoerrorflags_pt1() {
  camera5_videoerrorflags_pt1_ = 0;
  clear_has_camera5_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera5_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt1)
  return camera5_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera5_videoerrorflags_pt1(float value) {
  set_has_camera5_videoerrorflags_pt1();
  camera5_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt1)
}

// optional float camera6_videoerrorflags_pt1 = 43;
inline bool Dt_Record_App::has_camera6_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Dt_Record_App::set_has_camera6_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Dt_Record_App::clear_has_camera6_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Dt_Record_App::clear_camera6_videoerrorflags_pt1() {
  camera6_videoerrorflags_pt1_ = 0;
  clear_has_camera6_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera6_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt1)
  return camera6_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera6_videoerrorflags_pt1(float value) {
  set_has_camera6_videoerrorflags_pt1();
  camera6_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt1)
}

// optional float camera7_videoerrorflags_pt1 = 44;
inline bool Dt_Record_App::has_camera7_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Dt_Record_App::set_has_camera7_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Dt_Record_App::clear_has_camera7_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Dt_Record_App::clear_camera7_videoerrorflags_pt1() {
  camera7_videoerrorflags_pt1_ = 0;
  clear_has_camera7_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera7_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt1)
  return camera7_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera7_videoerrorflags_pt1(float value) {
  set_has_camera7_videoerrorflags_pt1();
  camera7_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt1)
}

// optional float camera8_videoerrorflags_pt1 = 45;
inline bool Dt_Record_App::has_camera8_videoerrorflags_pt1() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void Dt_Record_App::set_has_camera8_videoerrorflags_pt1() {
  _has_bits_[1] |= 0x00002000u;
}
inline void Dt_Record_App::clear_has_camera8_videoerrorflags_pt1() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void Dt_Record_App::clear_camera8_videoerrorflags_pt1() {
  camera8_videoerrorflags_pt1_ = 0;
  clear_has_camera8_videoerrorflags_pt1();
}
inline float Dt_Record_App::camera8_videoerrorflags_pt1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt1)
  return camera8_videoerrorflags_pt1_;
}
inline void Dt_Record_App::set_camera8_videoerrorflags_pt1(float value) {
  set_has_camera8_videoerrorflags_pt1();
  camera8_videoerrorflags_pt1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt1)
}

// optional float camera1_videoerrorflags_pt2 = 46;
inline bool Dt_Record_App::has_camera1_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void Dt_Record_App::set_has_camera1_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00004000u;
}
inline void Dt_Record_App::clear_has_camera1_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void Dt_Record_App::clear_camera1_videoerrorflags_pt2() {
  camera1_videoerrorflags_pt2_ = 0;
  clear_has_camera1_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera1_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt2)
  return camera1_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera1_videoerrorflags_pt2(float value) {
  set_has_camera1_videoerrorflags_pt2();
  camera1_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera1_videoerrorflags_pt2)
}

// optional float camera2_videoerrorflags_pt2 = 47;
inline bool Dt_Record_App::has_camera2_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void Dt_Record_App::set_has_camera2_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00008000u;
}
inline void Dt_Record_App::clear_has_camera2_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void Dt_Record_App::clear_camera2_videoerrorflags_pt2() {
  camera2_videoerrorflags_pt2_ = 0;
  clear_has_camera2_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera2_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt2)
  return camera2_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera2_videoerrorflags_pt2(float value) {
  set_has_camera2_videoerrorflags_pt2();
  camera2_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera2_videoerrorflags_pt2)
}

// optional float camera3_videoerrorflags_pt2 = 48;
inline bool Dt_Record_App::has_camera3_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void Dt_Record_App::set_has_camera3_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00010000u;
}
inline void Dt_Record_App::clear_has_camera3_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void Dt_Record_App::clear_camera3_videoerrorflags_pt2() {
  camera3_videoerrorflags_pt2_ = 0;
  clear_has_camera3_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera3_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt2)
  return camera3_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera3_videoerrorflags_pt2(float value) {
  set_has_camera3_videoerrorflags_pt2();
  camera3_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera3_videoerrorflags_pt2)
}

// optional float camera4_videoerrorflags_pt2 = 49;
inline bool Dt_Record_App::has_camera4_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void Dt_Record_App::set_has_camera4_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00020000u;
}
inline void Dt_Record_App::clear_has_camera4_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void Dt_Record_App::clear_camera4_videoerrorflags_pt2() {
  camera4_videoerrorflags_pt2_ = 0;
  clear_has_camera4_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera4_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt2)
  return camera4_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera4_videoerrorflags_pt2(float value) {
  set_has_camera4_videoerrorflags_pt2();
  camera4_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera4_videoerrorflags_pt2)
}

// optional float camera5_videoerrorflags_pt2 = 50;
inline bool Dt_Record_App::has_camera5_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void Dt_Record_App::set_has_camera5_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00040000u;
}
inline void Dt_Record_App::clear_has_camera5_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void Dt_Record_App::clear_camera5_videoerrorflags_pt2() {
  camera5_videoerrorflags_pt2_ = 0;
  clear_has_camera5_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera5_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt2)
  return camera5_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera5_videoerrorflags_pt2(float value) {
  set_has_camera5_videoerrorflags_pt2();
  camera5_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera5_videoerrorflags_pt2)
}

// optional float camera6_videoerrorflags_pt2 = 51;
inline bool Dt_Record_App::has_camera6_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void Dt_Record_App::set_has_camera6_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00080000u;
}
inline void Dt_Record_App::clear_has_camera6_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void Dt_Record_App::clear_camera6_videoerrorflags_pt2() {
  camera6_videoerrorflags_pt2_ = 0;
  clear_has_camera6_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera6_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt2)
  return camera6_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera6_videoerrorflags_pt2(float value) {
  set_has_camera6_videoerrorflags_pt2();
  camera6_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera6_videoerrorflags_pt2)
}

// optional float camera7_videoerrorflags_pt2 = 52;
inline bool Dt_Record_App::has_camera7_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void Dt_Record_App::set_has_camera7_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00100000u;
}
inline void Dt_Record_App::clear_has_camera7_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void Dt_Record_App::clear_camera7_videoerrorflags_pt2() {
  camera7_videoerrorflags_pt2_ = 0;
  clear_has_camera7_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera7_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt2)
  return camera7_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera7_videoerrorflags_pt2(float value) {
  set_has_camera7_videoerrorflags_pt2();
  camera7_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera7_videoerrorflags_pt2)
}

// optional float camera8_videoerrorflags_pt2 = 53;
inline bool Dt_Record_App::has_camera8_videoerrorflags_pt2() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void Dt_Record_App::set_has_camera8_videoerrorflags_pt2() {
  _has_bits_[1] |= 0x00200000u;
}
inline void Dt_Record_App::clear_has_camera8_videoerrorflags_pt2() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void Dt_Record_App::clear_camera8_videoerrorflags_pt2() {
  camera8_videoerrorflags_pt2_ = 0;
  clear_has_camera8_videoerrorflags_pt2();
}
inline float Dt_Record_App::camera8_videoerrorflags_pt2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt2)
  return camera8_videoerrorflags_pt2_;
}
inline void Dt_Record_App::set_camera8_videoerrorflags_pt2(float value) {
  set_has_camera8_videoerrorflags_pt2();
  camera8_videoerrorflags_pt2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_App.camera8_videoerrorflags_pt2)
}

// optional .atd.common.Header header = 54;
inline bool Dt_Record_App::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_App::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_App::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_App::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_App::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_App::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_App.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_App::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_App.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_App::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_App.header)
}

// optional .atd.common.Reserved reservedmsg = 55;
inline bool Dt_Record_App::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_App::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_App::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_App::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_App::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_App.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_App::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_App.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_App::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_App.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_App::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_App.reservedmsg)
}

// -------------------------------------------------------------------

// Dt_Record_Common

// optional int32 com_zero_byte = 1;
inline bool Dt_Record_Common::has_com_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_Common::set_has_com_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_Common::clear_has_com_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_Common::clear_com_zero_byte() {
  com_zero_byte_ = 0;
  clear_has_com_zero_byte();
}
inline ::google::protobuf::int32 Dt_Record_Common::com_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_zero_byte)
  return com_zero_byte_;
}
inline void Dt_Record_Common::set_com_zero_byte(::google::protobuf::int32 value) {
  set_has_com_zero_byte();
  com_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_zero_byte)
}

// optional int32 com_protocol_version = 2;
inline bool Dt_Record_Common::has_com_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dt_Record_Common::set_has_com_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dt_Record_Common::clear_has_com_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dt_Record_Common::clear_com_protocol_version() {
  com_protocol_version_ = 0;
  clear_has_com_protocol_version();
}
inline ::google::protobuf::int32 Dt_Record_Common::com_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_protocol_version)
  return com_protocol_version_;
}
inline void Dt_Record_Common::set_com_protocol_version(::google::protobuf::int32 value) {
  set_has_com_protocol_version();
  com_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_protocol_version)
}

// optional int32 com_sync_frame_id = 3;
inline bool Dt_Record_Common::has_com_sync_frame_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dt_Record_Common::set_has_com_sync_frame_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dt_Record_Common::clear_has_com_sync_frame_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dt_Record_Common::clear_com_sync_frame_id() {
  com_sync_frame_id_ = 0;
  clear_has_com_sync_frame_id();
}
inline ::google::protobuf::int32 Dt_Record_Common::com_sync_frame_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_sync_frame_id)
  return com_sync_frame_id_;
}
inline void Dt_Record_Common::set_com_sync_frame_id(::google::protobuf::int32 value) {
  set_has_com_sync_frame_id();
  com_sync_frame_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_sync_frame_id)
}

// optional int32 reserved_1 = 4;
inline bool Dt_Record_Common::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dt_Record_Common::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dt_Record_Common::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dt_Record_Common::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 Dt_Record_Common::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reserved_1)
  return reserved_1_;
}
inline void Dt_Record_Common::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.reserved_1)
}

// optional double com_frame_mcu_ts_start = 5;
inline bool Dt_Record_Common::has_com_frame_mcu_ts_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dt_Record_Common::set_has_com_frame_mcu_ts_start() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dt_Record_Common::clear_has_com_frame_mcu_ts_start() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dt_Record_Common::clear_com_frame_mcu_ts_start() {
  com_frame_mcu_ts_start_ = 0;
  clear_has_com_frame_mcu_ts_start();
}
inline double Dt_Record_Common::com_frame_mcu_ts_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_frame_mcu_ts_start)
  return com_frame_mcu_ts_start_;
}
inline void Dt_Record_Common::set_com_frame_mcu_ts_start(double value) {
  set_has_com_frame_mcu_ts_start();
  com_frame_mcu_ts_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_frame_mcu_ts_start)
}

// optional double com_last_mcu_sync_ts = 6;
inline bool Dt_Record_Common::has_com_last_mcu_sync_ts() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dt_Record_Common::set_has_com_last_mcu_sync_ts() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dt_Record_Common::clear_has_com_last_mcu_sync_ts() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dt_Record_Common::clear_com_last_mcu_sync_ts() {
  com_last_mcu_sync_ts_ = 0;
  clear_has_com_last_mcu_sync_ts();
}
inline double Dt_Record_Common::com_last_mcu_sync_ts() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_last_mcu_sync_ts)
  return com_last_mcu_sync_ts_;
}
inline void Dt_Record_Common::set_com_last_mcu_sync_ts(double value) {
  set_has_com_last_mcu_sync_ts();
  com_last_mcu_sync_ts_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_last_mcu_sync_ts)
}

// optional float com_last_clock_sync_error = 7;
inline bool Dt_Record_Common::has_com_last_clock_sync_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Dt_Record_Common::set_has_com_last_clock_sync_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Dt_Record_Common::clear_has_com_last_clock_sync_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Dt_Record_Common::clear_com_last_clock_sync_error() {
  com_last_clock_sync_error_ = 0;
  clear_has_com_last_clock_sync_error();
}
inline float Dt_Record_Common::com_last_clock_sync_error() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_last_clock_sync_error)
  return com_last_clock_sync_error_;
}
inline void Dt_Record_Common::set_com_last_clock_sync_error(float value) {
  set_has_com_last_clock_sync_error();
  com_last_clock_sync_error_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_last_clock_sync_error)
}

// optional int32 reserved_2 = 8;
inline bool Dt_Record_Common::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Dt_Record_Common::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Dt_Record_Common::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Dt_Record_Common::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 Dt_Record_Common::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reserved_2)
  return reserved_2_;
}
inline void Dt_Record_Common::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.reserved_2)
}

// optional float com_eyeq_frame_id = 9;
inline bool Dt_Record_Common::has_com_eyeq_frame_id() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Dt_Record_Common::set_has_com_eyeq_frame_id() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Dt_Record_Common::clear_has_com_eyeq_frame_id() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Dt_Record_Common::clear_com_eyeq_frame_id() {
  com_eyeq_frame_id_ = 0;
  clear_has_com_eyeq_frame_id();
}
inline float Dt_Record_Common::com_eyeq_frame_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_eyeq_frame_id)
  return com_eyeq_frame_id_;
}
inline void Dt_Record_Common::set_com_eyeq_frame_id(float value) {
  set_has_com_eyeq_frame_id();
  com_eyeq_frame_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_eyeq_frame_id)
}

// optional float com_cam_frame_id = 10;
inline bool Dt_Record_Common::has_com_cam_frame_id() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Dt_Record_Common::set_has_com_cam_frame_id() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Dt_Record_Common::clear_has_com_cam_frame_id() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Dt_Record_Common::clear_com_cam_frame_id() {
  com_cam_frame_id_ = 0;
  clear_has_com_cam_frame_id();
}
inline float Dt_Record_Common::com_cam_frame_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_cam_frame_id)
  return com_cam_frame_id_;
}
inline void Dt_Record_Common::set_com_cam_frame_id(float value) {
  set_has_com_cam_frame_id();
  com_cam_frame_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_cam_frame_id)
}

// optional .atd.meprocess.Dt_Record_Common.Com_daytime_indicatorType com_daytime_indicator = 11;
inline bool Dt_Record_Common::has_com_daytime_indicator() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Dt_Record_Common::set_has_com_daytime_indicator() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Dt_Record_Common::clear_has_com_daytime_indicator() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Dt_Record_Common::clear_com_daytime_indicator() {
  com_daytime_indicator_ = 0;
  clear_has_com_daytime_indicator();
}
inline ::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType Dt_Record_Common::com_daytime_indicator() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_daytime_indicator)
  return static_cast< ::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType >(com_daytime_indicator_);
}
inline void Dt_Record_Common::set_com_daytime_indicator(::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType value) {
  assert(::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType_IsValid(value));
  set_has_com_daytime_indicator();
  com_daytime_indicator_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_daytime_indicator)
}

// optional float com_daytime_ind_quality = 12;
inline bool Dt_Record_Common::has_com_daytime_ind_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Dt_Record_Common::set_has_com_daytime_ind_quality() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Dt_Record_Common::clear_has_com_daytime_ind_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Dt_Record_Common::clear_com_daytime_ind_quality() {
  com_daytime_ind_quality_ = 0;
  clear_has_com_daytime_ind_quality();
}
inline float Dt_Record_Common::com_daytime_ind_quality() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_daytime_ind_quality)
  return com_daytime_ind_quality_;
}
inline void Dt_Record_Common::set_com_daytime_ind_quality(float value) {
  set_has_com_daytime_ind_quality();
  com_daytime_ind_quality_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_daytime_ind_quality)
}

// optional .atd.meprocess.Dt_Record_Common.Com_hil_mode_statusType com_hil_mode_status = 13;
inline bool Dt_Record_Common::has_com_hil_mode_status() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Dt_Record_Common::set_has_com_hil_mode_status() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Dt_Record_Common::clear_has_com_hil_mode_status() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Dt_Record_Common::clear_com_hil_mode_status() {
  com_hil_mode_status_ = 0;
  clear_has_com_hil_mode_status();
}
inline ::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType Dt_Record_Common::com_hil_mode_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_hil_mode_status)
  return static_cast< ::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType >(com_hil_mode_status_);
}
inline void Dt_Record_Common::set_com_hil_mode_status(::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType value) {
  assert(::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType_IsValid(value));
  set_has_com_hil_mode_status();
  com_hil_mode_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_hil_mode_status)
}

// optional .atd.meprocess.Dt_Record_Common.Com_exposure_typeType com_exposure_type = 14;
inline bool Dt_Record_Common::has_com_exposure_type() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Dt_Record_Common::set_has_com_exposure_type() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Dt_Record_Common::clear_has_com_exposure_type() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Dt_Record_Common::clear_com_exposure_type() {
  com_exposure_type_ = 0;
  clear_has_com_exposure_type();
}
inline ::atd::meprocess::Dt_Record_Common_Com_exposure_typeType Dt_Record_Common::com_exposure_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.com_exposure_type)
  return static_cast< ::atd::meprocess::Dt_Record_Common_Com_exposure_typeType >(com_exposure_type_);
}
inline void Dt_Record_Common::set_com_exposure_type(::atd::meprocess::Dt_Record_Common_Com_exposure_typeType value) {
  assert(::atd::meprocess::Dt_Record_Common_Com_exposure_typeType_IsValid(value));
  set_has_com_exposure_type();
  com_exposure_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.com_exposure_type)
}

// optional float reserved_3 = 15;
inline bool Dt_Record_Common::has_reserved_3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Dt_Record_Common::set_has_reserved_3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Dt_Record_Common::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Dt_Record_Common::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
inline float Dt_Record_Common::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reserved_3)
  return reserved_3_;
}
inline void Dt_Record_Common::set_reserved_3(float value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Common.reserved_3)
}

// optional .atd.common.Header header = 16;
inline bool Dt_Record_Common::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_Common::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_Common::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_Common::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_Common::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_Common::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Common.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_Common::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Common.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_Common::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Common.header)
}

// optional .atd.common.Reserved reservedmsg = 17;
inline bool Dt_Record_Common::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_Common::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_Common::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_Common::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_Common::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Common.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_Common::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Common.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_Common::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Common.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_Common::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Common.reservedmsg)
}

// -------------------------------------------------------------------

// CACommon

// optional int32 zero_byte = 1;
inline bool CACommon::has_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CACommon::set_has_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CACommon::clear_has_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CACommon::clear_zero_byte() {
  zero_byte_ = 0;
  clear_has_zero_byte();
}
inline ::google::protobuf::int32 CACommon::zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.zero_byte)
  return zero_byte_;
}
inline void CACommon::set_zero_byte(::google::protobuf::int32 value) {
  set_has_zero_byte();
  zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.zero_byte)
}

// optional int32 ca_protocol_version = 2;
inline bool CACommon::has_ca_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CACommon::set_has_ca_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CACommon::clear_has_ca_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CACommon::clear_ca_protocol_version() {
  ca_protocol_version_ = 0;
  clear_has_ca_protocol_version();
}
inline ::google::protobuf::int32 CACommon::ca_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_protocol_version)
  return ca_protocol_version_;
}
inline void CACommon::set_ca_protocol_version(::google::protobuf::int32 value) {
  set_has_ca_protocol_version();
  ca_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_protocol_version)
}

// optional int32 ca_sync_id = 3;
inline bool CACommon::has_ca_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CACommon::set_has_ca_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CACommon::clear_has_ca_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CACommon::clear_ca_sync_id() {
  ca_sync_id_ = 0;
  clear_has_ca_sync_id();
}
inline ::google::protobuf::int32 CACommon::ca_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_sync_id)
  return ca_sync_id_;
}
inline void CACommon::set_ca_sync_id(::google::protobuf::int32 value) {
  set_has_ca_sync_id();
  ca_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_sync_id)
}

// optional .atd.meprocess.CACommon.Ca_region_codeType ca_region_code = 4;
inline bool CACommon::has_ca_region_code() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CACommon::set_has_ca_region_code() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CACommon::clear_has_ca_region_code() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CACommon::clear_ca_region_code() {
  ca_region_code_ = 0;
  clear_has_ca_region_code();
}
inline ::atd::meprocess::CACommon_Ca_region_codeType CACommon::ca_region_code() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_region_code)
  return static_cast< ::atd::meprocess::CACommon_Ca_region_codeType >(ca_region_code_);
}
inline void CACommon::set_ca_region_code(::atd::meprocess::CACommon_Ca_region_codeType value) {
  assert(::atd::meprocess::CACommon_Ca_region_codeType_IsValid(value));
  set_has_ca_region_code();
  ca_region_code_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_region_code)
}

// optional int32 ca_objects_count = 5;
inline bool CACommon::has_ca_objects_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CACommon::set_has_ca_objects_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CACommon::clear_has_ca_objects_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CACommon::clear_ca_objects_count() {
  ca_objects_count_ = 0;
  clear_has_ca_objects_count();
}
inline ::google::protobuf::int32 CACommon::ca_objects_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.CACommon.ca_objects_count)
  return ca_objects_count_;
}
inline void CACommon::set_ca_objects_count(::google::protobuf::int32 value) {
  set_has_ca_objects_count();
  ca_objects_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.CACommon.ca_objects_count)
}

// -------------------------------------------------------------------

// Dt_Record_ConstructionArea

// optional .atd.common.Header header = 1;
inline bool Dt_Record_ConstructionArea::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_ConstructionArea::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_ConstructionArea::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_ConstructionArea::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_ConstructionArea::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_ConstructionArea::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_ConstructionArea::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_ConstructionArea.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_ConstructionArea::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_ConstructionArea.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_ConstructionArea::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_ConstructionArea::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_ConstructionArea::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_ConstructionArea::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_ConstructionArea::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_ConstructionArea::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_ConstructionArea::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_ConstructionArea::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_ConstructionArea.reservedmsg)
}

// optional .atd.meprocess.CACommon stcacommon = 3;
inline bool Dt_Record_ConstructionArea::has_stcacommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_ConstructionArea::set_has_stcacommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_ConstructionArea::clear_has_stcacommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_ConstructionArea::clear_stcacommon() {
  if (stcacommon_ != NULL) stcacommon_->::atd::meprocess::CACommon::Clear();
  clear_has_stcacommon();
}
inline const ::atd::meprocess::CACommon& Dt_Record_ConstructionArea::stcacommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
  return stcacommon_ != NULL ? *stcacommon_
                         : *::atd::meprocess::CACommon::internal_default_instance();
}
inline ::atd::meprocess::CACommon* Dt_Record_ConstructionArea::mutable_stcacommon() {
  set_has_stcacommon();
  if (stcacommon_ == NULL) {
    stcacommon_ = new ::atd::meprocess::CACommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
  return stcacommon_;
}
inline ::atd::meprocess::CACommon* Dt_Record_ConstructionArea::release_stcacommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
  clear_has_stcacommon();
  ::atd::meprocess::CACommon* temp = stcacommon_;
  stcacommon_ = NULL;
  return temp;
}
inline void Dt_Record_ConstructionArea::set_allocated_stcacommon(::atd::meprocess::CACommon* stcacommon) {
  delete stcacommon_;
  stcacommon_ = stcacommon;
  if (stcacommon) {
    set_has_stcacommon();
  } else {
    clear_has_stcacommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_ConstructionArea.stcacommon)
}

// repeated .atd.meprocess.ConArea dt_array_14_ca = 4;
inline int Dt_Record_ConstructionArea::dt_array_14_ca_size() const {
  return dt_array_14_ca_.size();
}
inline void Dt_Record_ConstructionArea::clear_dt_array_14_ca() {
  dt_array_14_ca_.Clear();
}
inline const ::atd::meprocess::ConArea& Dt_Record_ConstructionArea::dt_array_14_ca(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_.Get(index);
}
inline ::atd::meprocess::ConArea* Dt_Record_ConstructionArea::mutable_dt_array_14_ca(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_.Mutable(index);
}
inline ::atd::meprocess::ConArea* Dt_Record_ConstructionArea::add_dt_array_14_ca() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::ConArea >*
Dt_Record_ConstructionArea::mutable_dt_array_14_ca() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return &dt_array_14_ca_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::ConArea >&
Dt_Record_ConstructionArea::dt_array_14_ca() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_ConstructionArea.dt_array_14_ca)
  return dt_array_14_ca_;
}

// -------------------------------------------------------------------

// ConArea

// optional int32 ca_id = 1;
inline bool ConArea::has_ca_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConArea::set_has_ca_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConArea::clear_has_ca_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConArea::clear_ca_id() {
  ca_id_ = 0;
  clear_has_ca_id();
}
inline ::google::protobuf::int32 ConArea::ca_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_id)
  return ca_id_;
}
inline void ConArea::set_ca_id(::google::protobuf::int32 value) {
  set_has_ca_id();
  ca_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_id)
}

// optional int32 ca_frame_age = 2;
inline bool ConArea::has_ca_frame_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConArea::set_has_ca_frame_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConArea::clear_has_ca_frame_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConArea::clear_ca_frame_age() {
  ca_frame_age_ = 0;
  clear_has_ca_frame_age();
}
inline ::google::protobuf::int32 ConArea::ca_frame_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_frame_age)
  return ca_frame_age_;
}
inline void ConArea::set_ca_frame_age(::google::protobuf::int32 value) {
  set_has_ca_frame_age();
  ca_frame_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_frame_age)
}

// optional .atd.meprocess.ConArea.Ca_ca_object_typeType ca_ca_object_type = 3;
inline bool ConArea::has_ca_ca_object_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConArea::set_has_ca_ca_object_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConArea::clear_has_ca_ca_object_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConArea::clear_ca_ca_object_type() {
  ca_ca_object_type_ = 0;
  clear_has_ca_ca_object_type();
}
inline ::atd::meprocess::ConArea_Ca_ca_object_typeType ConArea::ca_ca_object_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_ca_object_type)
  return static_cast< ::atd::meprocess::ConArea_Ca_ca_object_typeType >(ca_ca_object_type_);
}
inline void ConArea::set_ca_ca_object_type(::atd::meprocess::ConArea_Ca_ca_object_typeType value) {
  assert(::atd::meprocess::ConArea_Ca_ca_object_typeType_IsValid(value));
  set_has_ca_ca_object_type();
  ca_ca_object_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_ca_object_type)
}

// optional int32 reserved_1 = 4;
inline bool ConArea::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConArea::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConArea::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConArea::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 ConArea::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_1)
  return reserved_1_;
}
inline void ConArea::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_1)
}

// optional float ca_long_distance = 5;
inline bool ConArea::has_ca_long_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConArea::set_has_ca_long_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConArea::clear_has_ca_long_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConArea::clear_ca_long_distance() {
  ca_long_distance_ = 0;
  clear_has_ca_long_distance();
}
inline float ConArea::ca_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_long_distance)
  return ca_long_distance_;
}
inline void ConArea::set_ca_long_distance(float value) {
  set_has_ca_long_distance();
  ca_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_long_distance)
}

// optional float ca_long_distancstd = 6;
inline bool ConArea::has_ca_long_distancstd() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ConArea::set_has_ca_long_distancstd() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ConArea::clear_has_ca_long_distancstd() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ConArea::clear_ca_long_distancstd() {
  ca_long_distancstd_ = 0;
  clear_has_ca_long_distancstd();
}
inline float ConArea::ca_long_distancstd() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_long_distancstd)
  return ca_long_distancstd_;
}
inline void ConArea::set_ca_long_distancstd(float value) {
  set_has_ca_long_distancstd();
  ca_long_distancstd_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_long_distancstd)
}

// optional float ca_lat_distance = 7;
inline bool ConArea::has_ca_lat_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ConArea::set_has_ca_lat_distance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ConArea::clear_has_ca_lat_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ConArea::clear_ca_lat_distance() {
  ca_lat_distance_ = 0;
  clear_has_ca_lat_distance();
}
inline float ConArea::ca_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_lat_distance)
  return ca_lat_distance_;
}
inline void ConArea::set_ca_lat_distance(float value) {
  set_has_ca_lat_distance();
  ca_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_lat_distance)
}

// optional float ca_lat_distancstd = 8;
inline bool ConArea::has_ca_lat_distancstd() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ConArea::set_has_ca_lat_distancstd() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ConArea::clear_has_ca_lat_distancstd() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ConArea::clear_ca_lat_distancstd() {
  ca_lat_distancstd_ = 0;
  clear_has_ca_lat_distancstd();
}
inline float ConArea::ca_lat_distancstd() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_lat_distancstd)
  return ca_lat_distancstd_;
}
inline void ConArea::set_ca_lat_distancstd(float value) {
  set_has_ca_lat_distancstd();
  ca_lat_distancstd_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_lat_distancstd)
}

// optional int32 reserved_2 = 9;
inline bool ConArea::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ConArea::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ConArea::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ConArea::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 ConArea::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_2)
  return reserved_2_;
}
inline void ConArea::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_2)
}

// optional float ca_height = 10;
inline bool ConArea::has_ca_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ConArea::set_has_ca_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ConArea::clear_has_ca_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ConArea::clear_ca_height() {
  ca_height_ = 0;
  clear_has_ca_height();
}
inline float ConArea::ca_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_height)
  return ca_height_;
}
inline void ConArea::set_ca_height(float value) {
  set_has_ca_height();
  ca_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_height)
}

// optional float ca_height_std = 11;
inline bool ConArea::has_ca_height_std() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ConArea::set_has_ca_height_std() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ConArea::clear_has_ca_height_std() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ConArea::clear_ca_height_std() {
  ca_height_std_ = 0;
  clear_has_ca_height_std();
}
inline float ConArea::ca_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_height_std)
  return ca_height_std_;
}
inline void ConArea::set_ca_height_std(float value) {
  set_has_ca_height_std();
  ca_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_height_std)
}

// optional int32 reserved_3 = 12;
inline bool ConArea::has_reserved_3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ConArea::set_has_reserved_3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ConArea::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ConArea::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
inline ::google::protobuf::int32 ConArea::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_3)
  return reserved_3_;
}
inline void ConArea::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_3)
}

// optional float ca_object_height = 13;
inline bool ConArea::has_ca_object_height() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ConArea::set_has_ca_object_height() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ConArea::clear_has_ca_object_height() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ConArea::clear_ca_object_height() {
  ca_object_height_ = 0;
  clear_has_ca_object_height();
}
inline float ConArea::ca_object_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_height)
  return ca_object_height_;
}
inline void ConArea::set_ca_object_height(float value) {
  set_has_ca_object_height();
  ca_object_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_height)
}

// optional float ca_object_height_std = 14;
inline bool ConArea::has_ca_object_height_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ConArea::set_has_ca_object_height_std() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ConArea::clear_has_ca_object_height_std() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ConArea::clear_ca_object_height_std() {
  ca_object_height_std_ = 0;
  clear_has_ca_object_height_std();
}
inline float ConArea::ca_object_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_height_std)
  return ca_object_height_std_;
}
inline void ConArea::set_ca_object_height_std(float value) {
  set_has_ca_object_height_std();
  ca_object_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_height_std)
}

// optional int32 reserved_4 = 15;
inline bool ConArea::has_reserved_4() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ConArea::set_has_reserved_4() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ConArea::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ConArea::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
inline ::google::protobuf::int32 ConArea::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.reserved_4)
  return reserved_4_;
}
inline void ConArea::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.reserved_4)
}

// optional float ca_object_width = 16;
inline bool ConArea::has_ca_object_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ConArea::set_has_ca_object_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ConArea::clear_has_ca_object_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ConArea::clear_ca_object_width() {
  ca_object_width_ = 0;
  clear_has_ca_object_width();
}
inline float ConArea::ca_object_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_width)
  return ca_object_width_;
}
inline void ConArea::set_ca_object_width(float value) {
  set_has_ca_object_width();
  ca_object_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_width)
}

// optional float ca_object_width_std = 17;
inline bool ConArea::has_ca_object_width_std() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ConArea::set_has_ca_object_width_std() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ConArea::clear_has_ca_object_width_std() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ConArea::clear_ca_object_width_std() {
  ca_object_width_std_ = 0;
  clear_has_ca_object_width_std();
}
inline float ConArea::ca_object_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_object_width_std)
  return ca_object_width_std_;
}
inline void ConArea::set_ca_object_width_std(float value) {
  set_has_ca_object_width_std();
  ca_object_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_object_width_std)
}

// optional int32 ca_buffer = 18;
inline bool ConArea::has_ca_buffer() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ConArea::set_has_ca_buffer() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ConArea::clear_has_ca_buffer() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ConArea::clear_ca_buffer() {
  ca_buffer_ = 0;
  clear_has_ca_buffer();
}
inline ::google::protobuf::int32 ConArea::ca_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ConArea.ca_buffer)
  return ca_buffer_;
}
inline void ConArea::set_ca_buffer(::google::protobuf::int32 value) {
  set_has_ca_buffer();
  ca_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ConArea.ca_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_FCF

// optional int32 fcf_vd_zero_byte = 1;
inline bool Dt_Record_FCF::has_fcf_vd_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_FCF::clear_fcf_vd_zero_byte() {
  fcf_vd_zero_byte_ = 0;
  clear_has_fcf_vd_zero_byte();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_zero_byte)
  return fcf_vd_zero_byte_;
}
inline void Dt_Record_FCF::set_fcf_vd_zero_byte(::google::protobuf::int32 value) {
  set_has_fcf_vd_zero_byte();
  fcf_vd_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_zero_byte)
}

// optional int32 fcf_vd_protocol_version = 2;
inline bool Dt_Record_FCF::has_fcf_vd_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dt_Record_FCF::clear_fcf_vd_protocol_version() {
  fcf_vd_protocol_version_ = 0;
  clear_has_fcf_vd_protocol_version();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_protocol_version)
  return fcf_vd_protocol_version_;
}
inline void Dt_Record_FCF::set_fcf_vd_protocol_version(::google::protobuf::int32 value) {
  set_has_fcf_vd_protocol_version();
  fcf_vd_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_protocol_version)
}

// optional int32 fcf_vd_syncid = 3;
inline bool Dt_Record_FCF::has_fcf_vd_syncid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_syncid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_syncid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dt_Record_FCF::clear_fcf_vd_syncid() {
  fcf_vd_syncid_ = 0;
  clear_has_fcf_vd_syncid();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_syncid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_syncid)
  return fcf_vd_syncid_;
}
inline void Dt_Record_FCF::set_fcf_vd_syncid(::google::protobuf::int32 value) {
  set_has_fcf_vd_syncid();
  fcf_vd_syncid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_syncid)
}

// optional int32 fcf_vd_id_fcv = 4;
inline bool Dt_Record_FCF::has_fcf_vd_id_fcv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_id_fcv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_id_fcv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dt_Record_FCF::clear_fcf_vd_id_fcv() {
  fcf_vd_id_fcv_ = 0;
  clear_has_fcf_vd_id_fcv();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_fcv)
  return fcf_vd_id_fcv_;
}
inline void Dt_Record_FCF::set_fcf_vd_id_fcv(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_fcv();
  fcf_vd_id_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_fcv)
}

// optional float fcf_vd_alert_fcv = 5;
inline bool Dt_Record_FCF::has_fcf_vd_alert_fcv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_alert_fcv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_alert_fcv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dt_Record_FCF::clear_fcf_vd_alert_fcv() {
  fcf_vd_alert_fcv_ = 0;
  clear_has_fcf_vd_alert_fcv();
}
inline float Dt_Record_FCF::fcf_vd_alert_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_fcv)
  return fcf_vd_alert_fcv_;
}
inline void Dt_Record_FCF::set_fcf_vd_alert_fcv(float value) {
  set_has_fcf_vd_alert_fcv();
  fcf_vd_alert_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_fcv)
}

// optional .atd.meprocess.Dt_Record_FCF.Reserved_1Type reserved_1 = 6;
inline bool Dt_Record_FCF::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dt_Record_FCF::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dt_Record_FCF::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dt_Record_FCF::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::atd::meprocess::Dt_Record_FCF_Reserved_1Type Dt_Record_FCF::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_1)
  return static_cast< ::atd::meprocess::Dt_Record_FCF_Reserved_1Type >(reserved_1_);
}
inline void Dt_Record_FCF::set_reserved_1(::atd::meprocess::Dt_Record_FCF_Reserved_1Type value) {
  assert(::atd::meprocess::Dt_Record_FCF_Reserved_1Type_IsValid(value));
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_1)
}

// optional float fcf_vd_aeb_supp_fcv = 7;
inline bool Dt_Record_FCF::has_fcf_vd_aeb_supp_fcv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_fcv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_fcv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Dt_Record_FCF::clear_fcf_vd_aeb_supp_fcv() {
  fcf_vd_aeb_supp_fcv_ = 0;
  clear_has_fcf_vd_aeb_supp_fcv();
}
inline float Dt_Record_FCF::fcf_vd_aeb_supp_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_fcv)
  return fcf_vd_aeb_supp_fcv_;
}
inline void Dt_Record_FCF::set_fcf_vd_aeb_supp_fcv(float value) {
  set_has_fcf_vd_aeb_supp_fcv();
  fcf_vd_aeb_supp_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_fcv)
}

// optional int32 fcf_vd_alert_a = 8;
inline bool Dt_Record_FCF::has_fcf_vd_alert_a() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_alert_a() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_alert_a() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Dt_Record_FCF::clear_fcf_vd_alert_a() {
  fcf_vd_alert_a_ = 0;
  clear_has_fcf_vd_alert_a();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_a)
  return fcf_vd_alert_a_;
}
inline void Dt_Record_FCF::set_fcf_vd_alert_a(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_a();
  fcf_vd_alert_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_a)
}

// optional int32 fcf_vd_id_a = 9;
inline bool Dt_Record_FCF::has_fcf_vd_id_a() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_id_a() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_id_a() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Dt_Record_FCF::clear_fcf_vd_id_a() {
  fcf_vd_id_a_ = 0;
  clear_has_fcf_vd_id_a();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_a)
  return fcf_vd_id_a_;
}
inline void Dt_Record_FCF::set_fcf_vd_id_a(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_a();
  fcf_vd_id_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_a)
}

// optional bool fcf_vd_set_type_a = 10;
inline bool Dt_Record_FCF::has_fcf_vd_set_type_a() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_set_type_a() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_set_type_a() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_set_type_a() {
  fcf_vd_set_type_a_ = false;
  clear_has_fcf_vd_set_type_a();
}
inline bool Dt_Record_FCF::fcf_vd_set_type_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_a)
  return fcf_vd_set_type_a_;
}
inline void Dt_Record_FCF::set_fcf_vd_set_type_a(bool value) {
  set_has_fcf_vd_set_type_a();
  fcf_vd_set_type_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_a)
}

// optional int32 reserved_2 = 11;
inline bool Dt_Record_FCF::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Dt_Record_FCF::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Dt_Record_FCF::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Dt_Record_FCF::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 Dt_Record_FCF::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_2)
  return reserved_2_;
}
inline void Dt_Record_FCF::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_2)
}

// optional float fcf_vd_aeb_supp_a = 12;
inline bool Dt_Record_FCF::has_fcf_vd_aeb_supp_a() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_a() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_a() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_aeb_supp_a() {
  fcf_vd_aeb_supp_a_ = 0;
  clear_has_fcf_vd_aeb_supp_a();
}
inline float Dt_Record_FCF::fcf_vd_aeb_supp_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_a)
  return fcf_vd_aeb_supp_a_;
}
inline void Dt_Record_FCF::set_fcf_vd_aeb_supp_a(float value) {
  set_has_fcf_vd_aeb_supp_a();
  fcf_vd_aeb_supp_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_a)
}

// optional float fcf_vd_fcw_supp_a = 13;
inline bool Dt_Record_FCF::has_fcf_vd_fcw_supp_a() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_a() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_a() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_fcw_supp_a() {
  fcf_vd_fcw_supp_a_ = 0;
  clear_has_fcf_vd_fcw_supp_a();
}
inline float Dt_Record_FCF::fcf_vd_fcw_supp_a() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_a)
  return fcf_vd_fcw_supp_a_;
}
inline void Dt_Record_FCF::set_fcf_vd_fcw_supp_a(float value) {
  set_has_fcf_vd_fcw_supp_a();
  fcf_vd_fcw_supp_a_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_a)
}

// optional int32 fcf_vd_alert_b = 14;
inline bool Dt_Record_FCF::has_fcf_vd_alert_b() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_alert_b() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_alert_b() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_alert_b() {
  fcf_vd_alert_b_ = 0;
  clear_has_fcf_vd_alert_b();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_b)
  return fcf_vd_alert_b_;
}
inline void Dt_Record_FCF::set_fcf_vd_alert_b(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_b();
  fcf_vd_alert_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_b)
}

// optional int32 fcf_vd_id_b = 15;
inline bool Dt_Record_FCF::has_fcf_vd_id_b() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_id_b() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_id_b() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_id_b() {
  fcf_vd_id_b_ = 0;
  clear_has_fcf_vd_id_b();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_b)
  return fcf_vd_id_b_;
}
inline void Dt_Record_FCF::set_fcf_vd_id_b(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_b();
  fcf_vd_id_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_b)
}

// optional bool fcf_vd_set_type_b = 16;
inline bool Dt_Record_FCF::has_fcf_vd_set_type_b() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_set_type_b() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_set_type_b() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_set_type_b() {
  fcf_vd_set_type_b_ = false;
  clear_has_fcf_vd_set_type_b();
}
inline bool Dt_Record_FCF::fcf_vd_set_type_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_b)
  return fcf_vd_set_type_b_;
}
inline void Dt_Record_FCF::set_fcf_vd_set_type_b(bool value) {
  set_has_fcf_vd_set_type_b();
  fcf_vd_set_type_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_b)
}

// optional int32 reserved_3 = 17;
inline bool Dt_Record_FCF::has_reserved_3() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Dt_Record_FCF::set_has_reserved_3() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Dt_Record_FCF::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Dt_Record_FCF::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
inline ::google::protobuf::int32 Dt_Record_FCF::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_3)
  return reserved_3_;
}
inline void Dt_Record_FCF::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_3)
}

// optional float fcf_vd_aeb_supp_b = 18;
inline bool Dt_Record_FCF::has_fcf_vd_aeb_supp_b() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_b() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_b() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_aeb_supp_b() {
  fcf_vd_aeb_supp_b_ = 0;
  clear_has_fcf_vd_aeb_supp_b();
}
inline float Dt_Record_FCF::fcf_vd_aeb_supp_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_b)
  return fcf_vd_aeb_supp_b_;
}
inline void Dt_Record_FCF::set_fcf_vd_aeb_supp_b(float value) {
  set_has_fcf_vd_aeb_supp_b();
  fcf_vd_aeb_supp_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_b)
}

// optional float fcf_vd_fcw_supp_b = 19;
inline bool Dt_Record_FCF::has_fcf_vd_fcw_supp_b() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_b() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_b() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_fcw_supp_b() {
  fcf_vd_fcw_supp_b_ = 0;
  clear_has_fcf_vd_fcw_supp_b();
}
inline float Dt_Record_FCF::fcf_vd_fcw_supp_b() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_b)
  return fcf_vd_fcw_supp_b_;
}
inline void Dt_Record_FCF::set_fcf_vd_fcw_supp_b(float value) {
  set_has_fcf_vd_fcw_supp_b();
  fcf_vd_fcw_supp_b_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_b)
}

// optional int32 fcf_vd_alert_c = 20;
inline bool Dt_Record_FCF::has_fcf_vd_alert_c() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_alert_c() {
  _has_bits_[0] |= 0x00800000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_alert_c() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_alert_c() {
  fcf_vd_alert_c_ = 0;
  clear_has_fcf_vd_alert_c();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_c)
  return fcf_vd_alert_c_;
}
inline void Dt_Record_FCF::set_fcf_vd_alert_c(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_c();
  fcf_vd_alert_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_c)
}

// optional int32 fcf_vd_id_c = 21;
inline bool Dt_Record_FCF::has_fcf_vd_id_c() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_id_c() {
  _has_bits_[0] |= 0x01000000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_id_c() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_id_c() {
  fcf_vd_id_c_ = 0;
  clear_has_fcf_vd_id_c();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_c)
  return fcf_vd_id_c_;
}
inline void Dt_Record_FCF::set_fcf_vd_id_c(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_c();
  fcf_vd_id_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_c)
}

// optional bool fcf_vd_set_type_c = 22;
inline bool Dt_Record_FCF::has_fcf_vd_set_type_c() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_set_type_c() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_set_type_c() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_set_type_c() {
  fcf_vd_set_type_c_ = false;
  clear_has_fcf_vd_set_type_c();
}
inline bool Dt_Record_FCF::fcf_vd_set_type_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_c)
  return fcf_vd_set_type_c_;
}
inline void Dt_Record_FCF::set_fcf_vd_set_type_c(bool value) {
  set_has_fcf_vd_set_type_c();
  fcf_vd_set_type_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_c)
}

// optional int32 reserved_4 = 23;
inline bool Dt_Record_FCF::has_reserved_4() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void Dt_Record_FCF::set_has_reserved_4() {
  _has_bits_[0] |= 0x02000000u;
}
inline void Dt_Record_FCF::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void Dt_Record_FCF::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
inline ::google::protobuf::int32 Dt_Record_FCF::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_4)
  return reserved_4_;
}
inline void Dt_Record_FCF::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_4)
}

// optional float fcf_vd_aeb_supp_c = 24;
inline bool Dt_Record_FCF::has_fcf_vd_aeb_supp_c() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_c() {
  _has_bits_[0] |= 0x04000000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_c() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_aeb_supp_c() {
  fcf_vd_aeb_supp_c_ = 0;
  clear_has_fcf_vd_aeb_supp_c();
}
inline float Dt_Record_FCF::fcf_vd_aeb_supp_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_c)
  return fcf_vd_aeb_supp_c_;
}
inline void Dt_Record_FCF::set_fcf_vd_aeb_supp_c(float value) {
  set_has_fcf_vd_aeb_supp_c();
  fcf_vd_aeb_supp_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_c)
}

// optional float fcf_vd_fcw_supp_c = 25;
inline bool Dt_Record_FCF::has_fcf_vd_fcw_supp_c() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_c() {
  _has_bits_[0] |= 0x08000000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_c() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_fcw_supp_c() {
  fcf_vd_fcw_supp_c_ = 0;
  clear_has_fcf_vd_fcw_supp_c();
}
inline float Dt_Record_FCF::fcf_vd_fcw_supp_c() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_c)
  return fcf_vd_fcw_supp_c_;
}
inline void Dt_Record_FCF::set_fcf_vd_fcw_supp_c(float value) {
  set_has_fcf_vd_fcw_supp_c();
  fcf_vd_fcw_supp_c_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_c)
}

// optional int32 fcf_vd_alert_d = 26;
inline bool Dt_Record_FCF::has_fcf_vd_alert_d() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_alert_d() {
  _has_bits_[0] |= 0x10000000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_alert_d() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_alert_d() {
  fcf_vd_alert_d_ = 0;
  clear_has_fcf_vd_alert_d();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_d)
  return fcf_vd_alert_d_;
}
inline void Dt_Record_FCF::set_fcf_vd_alert_d(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_d();
  fcf_vd_alert_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_d)
}

// optional int32 fcf_vd_id_d = 27;
inline bool Dt_Record_FCF::has_fcf_vd_id_d() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_id_d() {
  _has_bits_[0] |= 0x20000000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_id_d() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_id_d() {
  fcf_vd_id_d_ = 0;
  clear_has_fcf_vd_id_d();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_d)
  return fcf_vd_id_d_;
}
inline void Dt_Record_FCF::set_fcf_vd_id_d(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_d();
  fcf_vd_id_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_d)
}

// optional bool fcf_vd_set_type_d = 28;
inline bool Dt_Record_FCF::has_fcf_vd_set_type_d() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_set_type_d() {
  _has_bits_[0] |= 0x00400000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_set_type_d() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_set_type_d() {
  fcf_vd_set_type_d_ = false;
  clear_has_fcf_vd_set_type_d();
}
inline bool Dt_Record_FCF::fcf_vd_set_type_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_d)
  return fcf_vd_set_type_d_;
}
inline void Dt_Record_FCF::set_fcf_vd_set_type_d(bool value) {
  set_has_fcf_vd_set_type_d();
  fcf_vd_set_type_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_d)
}

// optional int32 reserved_5 = 29;
inline bool Dt_Record_FCF::has_reserved_5() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void Dt_Record_FCF::set_has_reserved_5() {
  _has_bits_[0] |= 0x40000000u;
}
inline void Dt_Record_FCF::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void Dt_Record_FCF::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
inline ::google::protobuf::int32 Dt_Record_FCF::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_5)
  return reserved_5_;
}
inline void Dt_Record_FCF::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_5)
}

// optional float fcf_vd_aeb_supp_d = 30;
inline bool Dt_Record_FCF::has_fcf_vd_aeb_supp_d() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_d() {
  _has_bits_[0] |= 0x80000000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_d() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_aeb_supp_d() {
  fcf_vd_aeb_supp_d_ = 0;
  clear_has_fcf_vd_aeb_supp_d();
}
inline float Dt_Record_FCF::fcf_vd_aeb_supp_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_d)
  return fcf_vd_aeb_supp_d_;
}
inline void Dt_Record_FCF::set_fcf_vd_aeb_supp_d(float value) {
  set_has_fcf_vd_aeb_supp_d();
  fcf_vd_aeb_supp_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_d)
}

// optional float fcf_vd_fcw_supp_d = 31;
inline bool Dt_Record_FCF::has_fcf_vd_fcw_supp_d() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_d() {
  _has_bits_[1] |= 0x00000001u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_d() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void Dt_Record_FCF::clear_fcf_vd_fcw_supp_d() {
  fcf_vd_fcw_supp_d_ = 0;
  clear_has_fcf_vd_fcw_supp_d();
}
inline float Dt_Record_FCF::fcf_vd_fcw_supp_d() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_d)
  return fcf_vd_fcw_supp_d_;
}
inline void Dt_Record_FCF::set_fcf_vd_fcw_supp_d(float value) {
  set_has_fcf_vd_fcw_supp_d();
  fcf_vd_fcw_supp_d_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_d)
}

// optional int32 fcf_vd_alert_e = 32;
inline bool Dt_Record_FCF::has_fcf_vd_alert_e() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_alert_e() {
  _has_bits_[1] |= 0x00000002u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_alert_e() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void Dt_Record_FCF::clear_fcf_vd_alert_e() {
  fcf_vd_alert_e_ = 0;
  clear_has_fcf_vd_alert_e();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_e)
  return fcf_vd_alert_e_;
}
inline void Dt_Record_FCF::set_fcf_vd_alert_e(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_e();
  fcf_vd_alert_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_e)
}

// optional int32 fcf_vd_id_e = 33;
inline bool Dt_Record_FCF::has_fcf_vd_id_e() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_id_e() {
  _has_bits_[1] |= 0x00000004u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_id_e() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void Dt_Record_FCF::clear_fcf_vd_id_e() {
  fcf_vd_id_e_ = 0;
  clear_has_fcf_vd_id_e();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_e)
  return fcf_vd_id_e_;
}
inline void Dt_Record_FCF::set_fcf_vd_id_e(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_e();
  fcf_vd_id_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_e)
}

// optional bool fcf_vd_set_type_e = 34;
inline bool Dt_Record_FCF::has_fcf_vd_set_type_e() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_set_type_e() {
  _has_bits_[1] |= 0x00000040u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_set_type_e() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void Dt_Record_FCF::clear_fcf_vd_set_type_e() {
  fcf_vd_set_type_e_ = false;
  clear_has_fcf_vd_set_type_e();
}
inline bool Dt_Record_FCF::fcf_vd_set_type_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_e)
  return fcf_vd_set_type_e_;
}
inline void Dt_Record_FCF::set_fcf_vd_set_type_e(bool value) {
  set_has_fcf_vd_set_type_e();
  fcf_vd_set_type_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_e)
}

// optional int32 reserved_6 = 35;
inline bool Dt_Record_FCF::has_reserved_6() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void Dt_Record_FCF::set_has_reserved_6() {
  _has_bits_[1] |= 0x00000008u;
}
inline void Dt_Record_FCF::clear_has_reserved_6() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void Dt_Record_FCF::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
inline ::google::protobuf::int32 Dt_Record_FCF::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_6)
  return reserved_6_;
}
inline void Dt_Record_FCF::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_6)
}

// optional float fcf_vd_aeb_supp_e = 36;
inline bool Dt_Record_FCF::has_fcf_vd_aeb_supp_e() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_e() {
  _has_bits_[1] |= 0x00000010u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_e() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void Dt_Record_FCF::clear_fcf_vd_aeb_supp_e() {
  fcf_vd_aeb_supp_e_ = 0;
  clear_has_fcf_vd_aeb_supp_e();
}
inline float Dt_Record_FCF::fcf_vd_aeb_supp_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_e)
  return fcf_vd_aeb_supp_e_;
}
inline void Dt_Record_FCF::set_fcf_vd_aeb_supp_e(float value) {
  set_has_fcf_vd_aeb_supp_e();
  fcf_vd_aeb_supp_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_e)
}

// optional float fcf_vd_fcw_supp_e = 37;
inline bool Dt_Record_FCF::has_fcf_vd_fcw_supp_e() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_e() {
  _has_bits_[1] |= 0x00000020u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_e() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void Dt_Record_FCF::clear_fcf_vd_fcw_supp_e() {
  fcf_vd_fcw_supp_e_ = 0;
  clear_has_fcf_vd_fcw_supp_e();
}
inline float Dt_Record_FCF::fcf_vd_fcw_supp_e() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_e)
  return fcf_vd_fcw_supp_e_;
}
inline void Dt_Record_FCF::set_fcf_vd_fcw_supp_e(float value) {
  set_has_fcf_vd_fcw_supp_e();
  fcf_vd_fcw_supp_e_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_e)
}

// optional int32 fcf_vd_alert_f = 38;
inline bool Dt_Record_FCF::has_fcf_vd_alert_f() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_alert_f() {
  _has_bits_[1] |= 0x00000100u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_alert_f() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void Dt_Record_FCF::clear_fcf_vd_alert_f() {
  fcf_vd_alert_f_ = 0;
  clear_has_fcf_vd_alert_f();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_alert_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_f)
  return fcf_vd_alert_f_;
}
inline void Dt_Record_FCF::set_fcf_vd_alert_f(::google::protobuf::int32 value) {
  set_has_fcf_vd_alert_f();
  fcf_vd_alert_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_alert_f)
}

// optional int32 fcf_vd_id_f = 39;
inline bool Dt_Record_FCF::has_fcf_vd_id_f() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_id_f() {
  _has_bits_[1] |= 0x00000200u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_id_f() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void Dt_Record_FCF::clear_fcf_vd_id_f() {
  fcf_vd_id_f_ = 0;
  clear_has_fcf_vd_id_f();
}
inline ::google::protobuf::int32 Dt_Record_FCF::fcf_vd_id_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_id_f)
  return fcf_vd_id_f_;
}
inline void Dt_Record_FCF::set_fcf_vd_id_f(::google::protobuf::int32 value) {
  set_has_fcf_vd_id_f();
  fcf_vd_id_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_id_f)
}

// optional bool fcf_vd_set_type_f = 40;
inline bool Dt_Record_FCF::has_fcf_vd_set_type_f() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_set_type_f() {
  _has_bits_[1] |= 0x00000080u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_set_type_f() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void Dt_Record_FCF::clear_fcf_vd_set_type_f() {
  fcf_vd_set_type_f_ = false;
  clear_has_fcf_vd_set_type_f();
}
inline bool Dt_Record_FCF::fcf_vd_set_type_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_f)
  return fcf_vd_set_type_f_;
}
inline void Dt_Record_FCF::set_fcf_vd_set_type_f(bool value) {
  set_has_fcf_vd_set_type_f();
  fcf_vd_set_type_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_set_type_f)
}

// optional int32 reserved_7 = 41;
inline bool Dt_Record_FCF::has_reserved_7() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void Dt_Record_FCF::set_has_reserved_7() {
  _has_bits_[1] |= 0x00000400u;
}
inline void Dt_Record_FCF::clear_has_reserved_7() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void Dt_Record_FCF::clear_reserved_7() {
  reserved_7_ = 0;
  clear_has_reserved_7();
}
inline ::google::protobuf::int32 Dt_Record_FCF::reserved_7() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reserved_7)
  return reserved_7_;
}
inline void Dt_Record_FCF::set_reserved_7(::google::protobuf::int32 value) {
  set_has_reserved_7();
  reserved_7_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.reserved_7)
}

// optional float fcf_vd_aeb_supp_f = 42;
inline bool Dt_Record_FCF::has_fcf_vd_aeb_supp_f() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_aeb_supp_f() {
  _has_bits_[1] |= 0x00000800u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_aeb_supp_f() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void Dt_Record_FCF::clear_fcf_vd_aeb_supp_f() {
  fcf_vd_aeb_supp_f_ = 0;
  clear_has_fcf_vd_aeb_supp_f();
}
inline float Dt_Record_FCF::fcf_vd_aeb_supp_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_f)
  return fcf_vd_aeb_supp_f_;
}
inline void Dt_Record_FCF::set_fcf_vd_aeb_supp_f(float value) {
  set_has_fcf_vd_aeb_supp_f();
  fcf_vd_aeb_supp_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_aeb_supp_f)
}

// optional float fcf_vd_fcw_supp_f = 43;
inline bool Dt_Record_FCF::has_fcf_vd_fcw_supp_f() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void Dt_Record_FCF::set_has_fcf_vd_fcw_supp_f() {
  _has_bits_[1] |= 0x00001000u;
}
inline void Dt_Record_FCF::clear_has_fcf_vd_fcw_supp_f() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void Dt_Record_FCF::clear_fcf_vd_fcw_supp_f() {
  fcf_vd_fcw_supp_f_ = 0;
  clear_has_fcf_vd_fcw_supp_f();
}
inline float Dt_Record_FCF::fcf_vd_fcw_supp_f() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_f)
  return fcf_vd_fcw_supp_f_;
}
inline void Dt_Record_FCF::set_fcf_vd_fcw_supp_f(float value) {
  set_has_fcf_vd_fcw_supp_f();
  fcf_vd_fcw_supp_f_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FCF.fcf_vd_fcw_supp_f)
}

// optional .atd.common.Header header = 44;
inline bool Dt_Record_FCF::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_FCF::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_FCF::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_FCF::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_FCF::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_FCF::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_FCF::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_FCF::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF.header)
}

// optional .atd.common.Reserved reservedmsg = 45;
inline bool Dt_Record_FCF::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_FCF::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_FCF::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_FCF::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_FCF::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_FCF::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_FCF::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_FCF::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF.reservedmsg)
}

// -------------------------------------------------------------------

// VRUCommon

// optional int32 fcf_vru_zero_byte = 1;
inline bool VRUCommon::has_fcf_vru_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VRUCommon::clear_has_fcf_vru_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VRUCommon::clear_fcf_vru_zero_byte() {
  fcf_vru_zero_byte_ = 0;
  clear_has_fcf_vru_zero_byte();
}
inline ::google::protobuf::int32 VRUCommon::fcf_vru_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_zero_byte)
  return fcf_vru_zero_byte_;
}
inline void VRUCommon::set_fcf_vru_zero_byte(::google::protobuf::int32 value) {
  set_has_fcf_vru_zero_byte();
  fcf_vru_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_zero_byte)
}

// optional int32 fcf_vru_protocol_version = 2;
inline bool VRUCommon::has_fcf_vru_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VRUCommon::clear_has_fcf_vru_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VRUCommon::clear_fcf_vru_protocol_version() {
  fcf_vru_protocol_version_ = 0;
  clear_has_fcf_vru_protocol_version();
}
inline ::google::protobuf::int32 VRUCommon::fcf_vru_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_protocol_version)
  return fcf_vru_protocol_version_;
}
inline void VRUCommon::set_fcf_vru_protocol_version(::google::protobuf::int32 value) {
  set_has_fcf_vru_protocol_version();
  fcf_vru_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_protocol_version)
}

// optional int32 fcf_vru_sync_id = 3;
inline bool VRUCommon::has_fcf_vru_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VRUCommon::clear_has_fcf_vru_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VRUCommon::clear_fcf_vru_sync_id() {
  fcf_vru_sync_id_ = 0;
  clear_has_fcf_vru_sync_id();
}
inline ::google::protobuf::int32 VRUCommon::fcf_vru_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_sync_id)
  return fcf_vru_sync_id_;
}
inline void VRUCommon::set_fcf_vru_sync_id(::google::protobuf::int32 value) {
  set_has_fcf_vru_sync_id();
  fcf_vru_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_sync_id)
}

// optional int32 fcf_vru_mcp_id = 4;
inline bool VRUCommon::has_fcf_vru_mcp_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_mcp_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VRUCommon::clear_has_fcf_vru_mcp_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VRUCommon::clear_fcf_vru_mcp_id() {
  fcf_vru_mcp_id_ = 0;
  clear_has_fcf_vru_mcp_id();
}
inline ::google::protobuf::int32 VRUCommon::fcf_vru_mcp_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_mcp_id)
  return fcf_vru_mcp_id_;
}
inline void VRUCommon::set_fcf_vru_mcp_id(::google::protobuf::int32 value) {
  set_has_fcf_vru_mcp_id();
  fcf_vru_mcp_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_mcp_id)
}

// optional float fcf_vru_mcp_ttc = 5;
inline bool VRUCommon::has_fcf_vru_mcp_ttc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_mcp_ttc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VRUCommon::clear_has_fcf_vru_mcp_ttc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VRUCommon::clear_fcf_vru_mcp_ttc() {
  fcf_vru_mcp_ttc_ = 0;
  clear_has_fcf_vru_mcp_ttc();
}
inline float VRUCommon::fcf_vru_mcp_ttc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_mcp_ttc)
  return fcf_vru_mcp_ttc_;
}
inline void VRUCommon::set_fcf_vru_mcp_ttc(float value) {
  set_has_fcf_vru_mcp_ttc();
  fcf_vru_mcp_ttc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_mcp_ttc)
}

// optional bool fcf_mcp_vru_isbicycles = 6;
inline bool VRUCommon::has_fcf_mcp_vru_isbicycles() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VRUCommon::set_has_fcf_mcp_vru_isbicycles() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VRUCommon::clear_has_fcf_mcp_vru_isbicycles() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VRUCommon::clear_fcf_mcp_vru_isbicycles() {
  fcf_mcp_vru_isbicycles_ = false;
  clear_has_fcf_mcp_vru_isbicycles();
}
inline bool VRUCommon::fcf_mcp_vru_isbicycles() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_mcp_vru_isbicycles)
  return fcf_mcp_vru_isbicycles_;
}
inline void VRUCommon::set_fcf_mcp_vru_isbicycles(bool value) {
  set_has_fcf_mcp_vru_isbicycles();
  fcf_mcp_vru_isbicycles_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_mcp_vru_isbicycles)
}

// optional .atd.meprocess.VRUCommon.Fcf_vru_fcvType fcf_vru_fcv = 7;
inline bool VRUCommon::has_fcf_vru_fcv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_fcv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VRUCommon::clear_has_fcf_vru_fcv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VRUCommon::clear_fcf_vru_fcv() {
  fcf_vru_fcv_ = 0;
  clear_has_fcf_vru_fcv();
}
inline ::atd::meprocess::VRUCommon_Fcf_vru_fcvType VRUCommon::fcf_vru_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_fcv)
  return static_cast< ::atd::meprocess::VRUCommon_Fcf_vru_fcvType >(fcf_vru_fcv_);
}
inline void VRUCommon::set_fcf_vru_fcv(::atd::meprocess::VRUCommon_Fcf_vru_fcvType value) {
  assert(::atd::meprocess::VRUCommon_Fcf_vru_fcvType_IsValid(value));
  set_has_fcf_vru_fcv();
  fcf_vru_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_fcv)
}

// optional int32 fcf_vru_supress_fcv = 8;
inline bool VRUCommon::has_fcf_vru_supress_fcv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_supress_fcv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VRUCommon::clear_has_fcf_vru_supress_fcv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VRUCommon::clear_fcf_vru_supress_fcv() {
  fcf_vru_supress_fcv_ = 0;
  clear_has_fcf_vru_supress_fcv();
}
inline ::google::protobuf::int32 VRUCommon::fcf_vru_supress_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_supress_fcv)
  return fcf_vru_supress_fcv_;
}
inline void VRUCommon::set_fcf_vru_supress_fcv(::google::protobuf::int32 value) {
  set_has_fcf_vru_supress_fcv();
  fcf_vru_supress_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_supress_fcv)
}

// optional bool fcf_vru_curr_in_path_fcv = 9;
inline bool VRUCommon::has_fcf_vru_curr_in_path_fcv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_curr_in_path_fcv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VRUCommon::clear_has_fcf_vru_curr_in_path_fcv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VRUCommon::clear_fcf_vru_curr_in_path_fcv() {
  fcf_vru_curr_in_path_fcv_ = false;
  clear_has_fcf_vru_curr_in_path_fcv();
}
inline bool VRUCommon::fcf_vru_curr_in_path_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_curr_in_path_fcv)
  return fcf_vru_curr_in_path_fcv_;
}
inline void VRUCommon::set_fcf_vru_curr_in_path_fcv(bool value) {
  set_has_fcf_vru_curr_in_path_fcv();
  fcf_vru_curr_in_path_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_curr_in_path_fcv)
}

// optional bool fcf_vru_pred_in_path_fcv = 10;
inline bool VRUCommon::has_fcf_vru_pred_in_path_fcv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void VRUCommon::set_has_fcf_vru_pred_in_path_fcv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void VRUCommon::clear_has_fcf_vru_pred_in_path_fcv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void VRUCommon::clear_fcf_vru_pred_in_path_fcv() {
  fcf_vru_pred_in_path_fcv_ = false;
  clear_has_fcf_vru_pred_in_path_fcv();
}
inline bool VRUCommon::fcf_vru_pred_in_path_fcv() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.fcf_vru_pred_in_path_fcv)
  return fcf_vru_pred_in_path_fcv_;
}
inline void VRUCommon::set_fcf_vru_pred_in_path_fcv(bool value) {
  set_has_fcf_vru_pred_in_path_fcv();
  fcf_vru_pred_in_path_fcv_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.fcf_vru_pred_in_path_fcv)
}

// optional int32 reserved_1 = 11;
inline bool VRUCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void VRUCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void VRUCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void VRUCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 VRUCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.VRUCommon.reserved_1)
  return reserved_1_;
}
inline void VRUCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.VRUCommon.reserved_1)
}

// -------------------------------------------------------------------

// Dt_Record_FCF_VRU

// optional .atd.common.Header header = 1;
inline bool Dt_Record_FCF_VRU::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_FCF_VRU::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_FCF_VRU::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_FCF_VRU::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_FCF_VRU::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_FCF_VRU::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_FCF_VRU::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF_VRU.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_FCF_VRU::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF_VRU.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_FCF_VRU::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_FCF_VRU::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_FCF_VRU::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_FCF_VRU::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_FCF_VRU::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_FCF_VRU::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_FCF_VRU::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_FCF_VRU::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF_VRU.reservedmsg)
}

// optional .atd.meprocess.VRUCommon stvrucommon = 3;
inline bool Dt_Record_FCF_VRU::has_stvrucommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_FCF_VRU::set_has_stvrucommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_FCF_VRU::clear_has_stvrucommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_FCF_VRU::clear_stvrucommon() {
  if (stvrucommon_ != NULL) stvrucommon_->::atd::meprocess::VRUCommon::Clear();
  clear_has_stvrucommon();
}
inline const ::atd::meprocess::VRUCommon& Dt_Record_FCF_VRU::stvrucommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
  return stvrucommon_ != NULL ? *stvrucommon_
                         : *::atd::meprocess::VRUCommon::internal_default_instance();
}
inline ::atd::meprocess::VRUCommon* Dt_Record_FCF_VRU::mutable_stvrucommon() {
  set_has_stvrucommon();
  if (stvrucommon_ == NULL) {
    stvrucommon_ = new ::atd::meprocess::VRUCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
  return stvrucommon_;
}
inline ::atd::meprocess::VRUCommon* Dt_Record_FCF_VRU::release_stvrucommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
  clear_has_stvrucommon();
  ::atd::meprocess::VRUCommon* temp = stvrucommon_;
  stvrucommon_ = NULL;
  return temp;
}
inline void Dt_Record_FCF_VRU::set_allocated_stvrucommon(::atd::meprocess::VRUCommon* stvrucommon) {
  delete stvrucommon_;
  stvrucommon_ = stvrucommon;
  if (stvrucommon) {
    set_has_stvrucommon();
  } else {
    clear_has_stvrucommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FCF_VRU.stvrucommon)
}

// repeated .atd.meprocess.FCF_VRU dt_array_6_vru = 4;
inline int Dt_Record_FCF_VRU::dt_array_6_vru_size() const {
  return dt_array_6_vru_.size();
}
inline void Dt_Record_FCF_VRU::clear_dt_array_6_vru() {
  dt_array_6_vru_.Clear();
}
inline const ::atd::meprocess::FCF_VRU& Dt_Record_FCF_VRU::dt_array_6_vru(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_.Get(index);
}
inline ::atd::meprocess::FCF_VRU* Dt_Record_FCF_VRU::mutable_dt_array_6_vru(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_.Mutable(index);
}
inline ::atd::meprocess::FCF_VRU* Dt_Record_FCF_VRU::add_dt_array_6_vru() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FCF_VRU >*
Dt_Record_FCF_VRU::mutable_dt_array_6_vru() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return &dt_array_6_vru_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FCF_VRU >&
Dt_Record_FCF_VRU::dt_array_6_vru() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_FCF_VRU.dt_array_6_vru)
  return dt_array_6_vru_;
}

// -------------------------------------------------------------------

// FCF_VRU

// optional .atd.meprocess.FCF_VRU.Fcf_vru_alert_lType fcf_vru_alert_l = 1;
inline bool FCF_VRU::has_fcf_vru_alert_l() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FCF_VRU::set_has_fcf_vru_alert_l() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FCF_VRU::clear_has_fcf_vru_alert_l() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FCF_VRU::clear_fcf_vru_alert_l() {
  fcf_vru_alert_l_ = 39270;
  clear_has_fcf_vru_alert_l();
}
inline ::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType FCF_VRU::fcf_vru_alert_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_alert_l)
  return static_cast< ::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType >(fcf_vru_alert_l_);
}
inline void FCF_VRU::set_fcf_vru_alert_l(::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType value) {
  assert(::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType_IsValid(value));
  set_has_fcf_vru_alert_l();
  fcf_vru_alert_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_alert_l)
}

// optional int32 fcf_vru_supress_l = 2;
inline bool FCF_VRU::has_fcf_vru_supress_l() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FCF_VRU::set_has_fcf_vru_supress_l() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FCF_VRU::clear_has_fcf_vru_supress_l() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FCF_VRU::clear_fcf_vru_supress_l() {
  fcf_vru_supress_l_ = 0;
  clear_has_fcf_vru_supress_l();
}
inline ::google::protobuf::int32 FCF_VRU::fcf_vru_supress_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_supress_l)
  return fcf_vru_supress_l_;
}
inline void FCF_VRU::set_fcf_vru_supress_l(::google::protobuf::int32 value) {
  set_has_fcf_vru_supress_l();
  fcf_vru_supress_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_supress_l)
}

// optional float fcf_vru_ttc_thresh_l = 3;
inline bool FCF_VRU::has_fcf_vru_ttc_thresh_l() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FCF_VRU::set_has_fcf_vru_ttc_thresh_l() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FCF_VRU::clear_has_fcf_vru_ttc_thresh_l() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FCF_VRU::clear_fcf_vru_ttc_thresh_l() {
  fcf_vru_ttc_thresh_l_ = 0;
  clear_has_fcf_vru_ttc_thresh_l();
}
inline float FCF_VRU::fcf_vru_ttc_thresh_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_ttc_thresh_l)
  return fcf_vru_ttc_thresh_l_;
}
inline void FCF_VRU::set_fcf_vru_ttc_thresh_l(float value) {
  set_has_fcf_vru_ttc_thresh_l();
  fcf_vru_ttc_thresh_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_ttc_thresh_l)
}

// optional bool fcf_vru_curr_in_path_l = 4;
inline bool FCF_VRU::has_fcf_vru_curr_in_path_l() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FCF_VRU::set_has_fcf_vru_curr_in_path_l() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FCF_VRU::clear_has_fcf_vru_curr_in_path_l() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FCF_VRU::clear_fcf_vru_curr_in_path_l() {
  fcf_vru_curr_in_path_l_ = false;
  clear_has_fcf_vru_curr_in_path_l();
}
inline bool FCF_VRU::fcf_vru_curr_in_path_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_curr_in_path_l)
  return fcf_vru_curr_in_path_l_;
}
inline void FCF_VRU::set_fcf_vru_curr_in_path_l(bool value) {
  set_has_fcf_vru_curr_in_path_l();
  fcf_vru_curr_in_path_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_curr_in_path_l)
}

// optional bool fcf_vru_pred_in_path_l = 5;
inline bool FCF_VRU::has_fcf_vru_pred_in_path_l() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FCF_VRU::set_has_fcf_vru_pred_in_path_l() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FCF_VRU::clear_has_fcf_vru_pred_in_path_l() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FCF_VRU::clear_fcf_vru_pred_in_path_l() {
  fcf_vru_pred_in_path_l_ = false;
  clear_has_fcf_vru_pred_in_path_l();
}
inline bool FCF_VRU::fcf_vru_pred_in_path_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_pred_in_path_l)
  return fcf_vru_pred_in_path_l_;
}
inline void FCF_VRU::set_fcf_vru_pred_in_path_l(bool value) {
  set_has_fcf_vru_pred_in_path_l();
  fcf_vru_pred_in_path_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_pred_in_path_l)
}

// optional float fcf_vru_buffer_l = 6;
inline bool FCF_VRU::has_fcf_vru_buffer_l() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FCF_VRU::set_has_fcf_vru_buffer_l() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FCF_VRU::clear_has_fcf_vru_buffer_l() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FCF_VRU::clear_fcf_vru_buffer_l() {
  fcf_vru_buffer_l_ = 0;
  clear_has_fcf_vru_buffer_l();
}
inline float FCF_VRU::fcf_vru_buffer_l() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FCF_VRU.fcf_vru_buffer_l)
  return fcf_vru_buffer_l_;
}
inline void FCF_VRU::set_fcf_vru_buffer_l(float value) {
  set_has_fcf_vru_buffer_l();
  fcf_vru_buffer_l_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FCF_VRU.fcf_vru_buffer_l)
}

// -------------------------------------------------------------------

// Dt_Record_FailSafe

// optional int32 fs_zero_byte = 1;
inline bool Dt_Record_FailSafe::has_fs_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_FailSafe::clear_has_fs_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_FailSafe::clear_fs_zero_byte() {
  fs_zero_byte_ = 0;
  clear_has_fs_zero_byte();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::fs_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_zero_byte)
  return fs_zero_byte_;
}
inline void Dt_Record_FailSafe::set_fs_zero_byte(::google::protobuf::int32 value) {
  set_has_fs_zero_byte();
  fs_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_zero_byte)
}

// optional int32 fs_protocol_version = 2;
inline bool Dt_Record_FailSafe::has_fs_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dt_Record_FailSafe::clear_has_fs_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dt_Record_FailSafe::clear_fs_protocol_version() {
  fs_protocol_version_ = 0;
  clear_has_fs_protocol_version();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::fs_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_protocol_version)
  return fs_protocol_version_;
}
inline void Dt_Record_FailSafe::set_fs_protocol_version(::google::protobuf::int32 value) {
  set_has_fs_protocol_version();
  fs_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_protocol_version)
}

// optional int32 fs_sync_id = 3;
inline bool Dt_Record_FailSafe::has_fs_sync_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_sync_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dt_Record_FailSafe::clear_has_fs_sync_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dt_Record_FailSafe::clear_fs_sync_id() {
  fs_sync_id_ = 0;
  clear_has_fs_sync_id();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::fs_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_sync_id)
  return fs_sync_id_;
}
inline void Dt_Record_FailSafe::set_fs_sync_id(::google::protobuf::int32 value) {
  set_has_fs_sync_id();
  fs_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_sync_id)
}

// optional int32 fs_cameras_number = 4;
inline bool Dt_Record_FailSafe::has_fs_cameras_number() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_cameras_number() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dt_Record_FailSafe::clear_has_fs_cameras_number() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dt_Record_FailSafe::clear_fs_cameras_number() {
  fs_cameras_number_ = 0;
  clear_has_fs_cameras_number();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::fs_cameras_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_cameras_number)
  return fs_cameras_number_;
}
inline void Dt_Record_FailSafe::set_fs_cameras_number(::google::protobuf::int32 value) {
  set_has_fs_cameras_number();
  fs_cameras_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_cameras_number)
}

// optional int32 reserved_1 = 5;
inline bool Dt_Record_FailSafe::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dt_Record_FailSafe::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dt_Record_FailSafe::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dt_Record_FailSafe::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.reserved_1)
  return reserved_1_;
}
inline void Dt_Record_FailSafe::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.reserved_1)
}

// optional int32 fs_impacted_technologies = 6;
inline bool Dt_Record_FailSafe::has_fs_impacted_technologies() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_impacted_technologies() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dt_Record_FailSafe::clear_has_fs_impacted_technologies() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dt_Record_FailSafe::clear_fs_impacted_technologies() {
  fs_impacted_technologies_ = 0;
  clear_has_fs_impacted_technologies();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::fs_impacted_technologies() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_impacted_technologies)
  return fs_impacted_technologies_;
}
inline void Dt_Record_FailSafe::set_fs_impacted_technologies(::google::protobuf::int32 value) {
  set_has_fs_impacted_technologies();
  fs_impacted_technologies_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_impacted_technologies)
}

// optional int32 fs_camera_id_0 = 7;
inline bool Dt_Record_FailSafe::has_fs_camera_id_0() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_camera_id_0() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Dt_Record_FailSafe::clear_has_fs_camera_id_0() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Dt_Record_FailSafe::clear_fs_camera_id_0() {
  fs_camera_id_0_ = 0;
  clear_has_fs_camera_id_0();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::fs_camera_id_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_camera_id_0)
  return fs_camera_id_0_;
}
inline void Dt_Record_FailSafe::set_fs_camera_id_0(::google::protobuf::int32 value) {
  set_has_fs_camera_id_0();
  fs_camera_id_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_camera_id_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_rain_0Type fs_rain_0 = 8;
inline bool Dt_Record_FailSafe::has_fs_rain_0() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_rain_0() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Dt_Record_FailSafe::clear_has_fs_rain_0() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Dt_Record_FailSafe::clear_fs_rain_0() {
  fs_rain_0_ = 0;
  clear_has_fs_rain_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type Dt_Record_FailSafe::fs_rain_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_rain_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type >(fs_rain_0_);
}
inline void Dt_Record_FailSafe::set_fs_rain_0(::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type_IsValid(value));
  set_has_fs_rain_0();
  fs_rain_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_rain_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_fog_0Type fs_fog_0 = 9;
inline bool Dt_Record_FailSafe::has_fs_fog_0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_fog_0() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Dt_Record_FailSafe::clear_has_fs_fog_0() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Dt_Record_FailSafe::clear_fs_fog_0() {
  fs_fog_0_ = 0;
  clear_has_fs_fog_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type Dt_Record_FailSafe::fs_fog_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_fog_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type >(fs_fog_0_);
}
inline void Dt_Record_FailSafe::set_fs_fog_0(::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type_IsValid(value));
  set_has_fs_fog_0();
  fs_fog_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_fog_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_splashes_0Type fs_splashes_0 = 10;
inline bool Dt_Record_FailSafe::has_fs_splashes_0() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_splashes_0() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Dt_Record_FailSafe::clear_has_fs_splashes_0() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Dt_Record_FailSafe::clear_fs_splashes_0() {
  fs_splashes_0_ = 0;
  clear_has_fs_splashes_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type Dt_Record_FailSafe::fs_splashes_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_splashes_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type >(fs_splashes_0_);
}
inline void Dt_Record_FailSafe::set_fs_splashes_0(::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type_IsValid(value));
  set_has_fs_splashes_0();
  fs_splashes_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_splashes_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_self_glare_0Type fs_self_glare_0 = 11;
inline bool Dt_Record_FailSafe::has_fs_self_glare_0() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_self_glare_0() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_self_glare_0() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Dt_Record_FailSafe::clear_fs_self_glare_0() {
  fs_self_glare_0_ = 0;
  clear_has_fs_self_glare_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type Dt_Record_FailSafe::fs_self_glare_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_self_glare_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type >(fs_self_glare_0_);
}
inline void Dt_Record_FailSafe::set_fs_self_glare_0(::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type_IsValid(value));
  set_has_fs_self_glare_0();
  fs_self_glare_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_self_glare_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_sun_ray_0Type fs_sun_ray_0 = 12;
inline bool Dt_Record_FailSafe::has_fs_sun_ray_0() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_sun_ray_0() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_sun_ray_0() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Dt_Record_FailSafe::clear_fs_sun_ray_0() {
  fs_sun_ray_0_ = 0;
  clear_has_fs_sun_ray_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type Dt_Record_FailSafe::fs_sun_ray_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_sun_ray_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type >(fs_sun_ray_0_);
}
inline void Dt_Record_FailSafe::set_fs_sun_ray_0(::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type_IsValid(value));
  set_has_fs_sun_ray_0();
  fs_sun_ray_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_sun_ray_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_low_sun_0Type fs_low_sun_0 = 13;
inline bool Dt_Record_FailSafe::has_fs_low_sun_0() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_low_sun_0() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_low_sun_0() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Dt_Record_FailSafe::clear_fs_low_sun_0() {
  fs_low_sun_0_ = 0;
  clear_has_fs_low_sun_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type Dt_Record_FailSafe::fs_low_sun_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_low_sun_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type >(fs_low_sun_0_);
}
inline void Dt_Record_FailSafe::set_fs_low_sun_0(::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type_IsValid(value));
  set_has_fs_low_sun_0();
  fs_low_sun_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_low_sun_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_blur_image_0Type fs_blur_image_0 = 14;
inline bool Dt_Record_FailSafe::has_fs_blur_image_0() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_blur_image_0() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_blur_image_0() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Dt_Record_FailSafe::clear_fs_blur_image_0() {
  fs_blur_image_0_ = 0;
  clear_has_fs_blur_image_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type Dt_Record_FailSafe::fs_blur_image_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_blur_image_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type >(fs_blur_image_0_);
}
inline void Dt_Record_FailSafe::set_fs_blur_image_0(::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type_IsValid(value));
  set_has_fs_blur_image_0();
  fs_blur_image_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_blur_image_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_partial_blockage_0Type fs_partial_blockage_0 = 15;
inline bool Dt_Record_FailSafe::has_fs_partial_blockage_0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_partial_blockage_0() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_partial_blockage_0() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Dt_Record_FailSafe::clear_fs_partial_blockage_0() {
  fs_partial_blockage_0_ = 0;
  clear_has_fs_partial_blockage_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type Dt_Record_FailSafe::fs_partial_blockage_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_partial_blockage_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type >(fs_partial_blockage_0_);
}
inline void Dt_Record_FailSafe::set_fs_partial_blockage_0(::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type_IsValid(value));
  set_has_fs_partial_blockage_0();
  fs_partial_blockage_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_partial_blockage_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_full_blockage_0Type fs_full_blockage_0 = 16;
inline bool Dt_Record_FailSafe::has_fs_full_blockage_0() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_full_blockage_0() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_full_blockage_0() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Dt_Record_FailSafe::clear_fs_full_blockage_0() {
  fs_full_blockage_0_ = 0;
  clear_has_fs_full_blockage_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type Dt_Record_FailSafe::fs_full_blockage_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_full_blockage_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type >(fs_full_blockage_0_);
}
inline void Dt_Record_FailSafe::set_fs_full_blockage_0(::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type_IsValid(value));
  set_has_fs_full_blockage_0();
  fs_full_blockage_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_full_blockage_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_frozen_windshield_0Type fs_frozen_windshield_0 = 17;
inline bool Dt_Record_FailSafe::has_fs_frozen_windshield_0() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_frozen_windshield_0() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_frozen_windshield_0() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Dt_Record_FailSafe::clear_fs_frozen_windshield_0() {
  fs_frozen_windshield_0_ = 0;
  clear_has_fs_frozen_windshield_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type Dt_Record_FailSafe::fs_frozen_windshield_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_frozen_windshield_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type >(fs_frozen_windshield_0_);
}
inline void Dt_Record_FailSafe::set_fs_frozen_windshield_0(::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type_IsValid(value));
  set_has_fs_frozen_windshield_0();
  fs_frozen_windshield_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_frozen_windshield_0)
}

// optional .atd.meprocess.Dt_Record_FailSafe.Fs_out_of_calib_0Type fs_out_of_calib_0 = 18;
inline bool Dt_Record_FailSafe::has_fs_out_of_calib_0() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_out_of_calib_0() {
  _has_bits_[0] |= 0x00080000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_out_of_calib_0() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void Dt_Record_FailSafe::clear_fs_out_of_calib_0() {
  fs_out_of_calib_0_ = 0;
  clear_has_fs_out_of_calib_0();
}
inline ::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type Dt_Record_FailSafe::fs_out_of_calib_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_out_of_calib_0)
  return static_cast< ::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type >(fs_out_of_calib_0_);
}
inline void Dt_Record_FailSafe::set_fs_out_of_calib_0(::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type value) {
  assert(::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type_IsValid(value));
  set_has_fs_out_of_calib_0();
  fs_out_of_calib_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_out_of_calib_0)
}

// optional int32 fs_out_of_focus_0 = 19;
inline bool Dt_Record_FailSafe::has_fs_out_of_focus_0() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_fs_out_of_focus_0() {
  _has_bits_[0] |= 0x00100000u;
}
inline void Dt_Record_FailSafe::clear_has_fs_out_of_focus_0() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void Dt_Record_FailSafe::clear_fs_out_of_focus_0() {
  fs_out_of_focus_0_ = 0;
  clear_has_fs_out_of_focus_0();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::fs_out_of_focus_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.fs_out_of_focus_0)
  return fs_out_of_focus_0_;
}
inline void Dt_Record_FailSafe::set_fs_out_of_focus_0(::google::protobuf::int32 value) {
  set_has_fs_out_of_focus_0();
  fs_out_of_focus_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.fs_out_of_focus_0)
}

// optional int32 reserved_2 = 20;
inline bool Dt_Record_FailSafe::has_reserved_2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void Dt_Record_FailSafe::set_has_reserved_2() {
  _has_bits_[0] |= 0x00200000u;
}
inline void Dt_Record_FailSafe::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void Dt_Record_FailSafe::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 Dt_Record_FailSafe::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.reserved_2)
  return reserved_2_;
}
inline void Dt_Record_FailSafe::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_FailSafe.reserved_2)
}

// optional .atd.common.Header header = 21;
inline bool Dt_Record_FailSafe::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_FailSafe::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_FailSafe::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_FailSafe::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_FailSafe::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_FailSafe::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FailSafe.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_FailSafe::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FailSafe.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_FailSafe::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FailSafe.header)
}

// optional .atd.common.Reserved reservedmsg = 22;
inline bool Dt_Record_FailSafe::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_FailSafe::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_FailSafe::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_FailSafe::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_FailSafe::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_FailSafe::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_FailSafe::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_FailSafe::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_FailSafe.reservedmsg)
}

// -------------------------------------------------------------------

// FSPCommon

// optional int32 fsp_zero_byte = 1;
inline bool FSPCommon::has_fsp_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FSPCommon::set_has_fsp_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FSPCommon::clear_has_fsp_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FSPCommon::clear_fsp_zero_byte() {
  fsp_zero_byte_ = 0;
  clear_has_fsp_zero_byte();
}
inline ::google::protobuf::int32 FSPCommon::fsp_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_zero_byte)
  return fsp_zero_byte_;
}
inline void FSPCommon::set_fsp_zero_byte(::google::protobuf::int32 value) {
  set_has_fsp_zero_byte();
  fsp_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_zero_byte)
}

// optional int32 fsp_protocol_version = 2;
inline bool FSPCommon::has_fsp_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FSPCommon::set_has_fsp_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FSPCommon::clear_has_fsp_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FSPCommon::clear_fsp_protocol_version() {
  fsp_protocol_version_ = 0;
  clear_has_fsp_protocol_version();
}
inline ::google::protobuf::int32 FSPCommon::fsp_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_protocol_version)
  return fsp_protocol_version_;
}
inline void FSPCommon::set_fsp_protocol_version(::google::protobuf::int32 value) {
  set_has_fsp_protocol_version();
  fsp_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_protocol_version)
}

// optional int32 fsp_sync_id = 3;
inline bool FSPCommon::has_fsp_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FSPCommon::set_has_fsp_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FSPCommon::clear_has_fsp_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FSPCommon::clear_fsp_sync_id() {
  fsp_sync_id_ = 0;
  clear_has_fsp_sync_id();
}
inline ::google::protobuf::int32 FSPCommon::fsp_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_sync_id)
  return fsp_sync_id_;
}
inline void FSPCommon::set_fsp_sync_id(::google::protobuf::int32 value) {
  set_has_fsp_sync_id();
  fsp_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_sync_id)
}

// optional int32 fsp_num_of_obstacles = 4;
inline bool FSPCommon::has_fsp_num_of_obstacles() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FSPCommon::set_has_fsp_num_of_obstacles() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FSPCommon::clear_has_fsp_num_of_obstacles() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FSPCommon::clear_fsp_num_of_obstacles() {
  fsp_num_of_obstacles_ = 0;
  clear_has_fsp_num_of_obstacles();
}
inline ::google::protobuf::int32 FSPCommon::fsp_num_of_obstacles() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.fsp_num_of_obstacles)
  return fsp_num_of_obstacles_;
}
inline void FSPCommon::set_fsp_num_of_obstacles(::google::protobuf::int32 value) {
  set_has_fsp_num_of_obstacles();
  fsp_num_of_obstacles_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.fsp_num_of_obstacles)
}

// optional bool reserved_1 = 5;
inline bool FSPCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FSPCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FSPCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FSPCommon::clear_reserved_1() {
  reserved_1_ = false;
  clear_has_reserved_1();
}
inline bool FSPCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPCommon.reserved_1)
  return reserved_1_;
}
inline void FSPCommon::set_reserved_1(bool value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPCommon.reserved_1)
}

// -------------------------------------------------------------------

// Dt_Record_MeFreeSpace

// optional .atd.common.Header header = 1;
inline bool Dt_Record_MeFreeSpace::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_MeFreeSpace::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_MeFreeSpace::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_MeFreeSpace::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_MeFreeSpace::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_MeFreeSpace::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_MeFreeSpace::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeFreeSpace.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_MeFreeSpace::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeFreeSpace.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_MeFreeSpace::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_MeFreeSpace::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_MeFreeSpace::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_MeFreeSpace::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_MeFreeSpace::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_MeFreeSpace::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_MeFreeSpace::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_MeFreeSpace::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeFreeSpace.reservedmsg)
}

// optional .atd.meprocess.FSPCommon stfspcommon = 3;
inline bool Dt_Record_MeFreeSpace::has_stfspcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_MeFreeSpace::set_has_stfspcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_MeFreeSpace::clear_has_stfspcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_MeFreeSpace::clear_stfspcommon() {
  if (stfspcommon_ != NULL) stfspcommon_->::atd::meprocess::FSPCommon::Clear();
  clear_has_stfspcommon();
}
inline const ::atd::meprocess::FSPCommon& Dt_Record_MeFreeSpace::stfspcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
  return stfspcommon_ != NULL ? *stfspcommon_
                         : *::atd::meprocess::FSPCommon::internal_default_instance();
}
inline ::atd::meprocess::FSPCommon* Dt_Record_MeFreeSpace::mutable_stfspcommon() {
  set_has_stfspcommon();
  if (stfspcommon_ == NULL) {
    stfspcommon_ = new ::atd::meprocess::FSPCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
  return stfspcommon_;
}
inline ::atd::meprocess::FSPCommon* Dt_Record_MeFreeSpace::release_stfspcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
  clear_has_stfspcommon();
  ::atd::meprocess::FSPCommon* temp = stfspcommon_;
  stfspcommon_ = NULL;
  return temp;
}
inline void Dt_Record_MeFreeSpace::set_allocated_stfspcommon(::atd::meprocess::FSPCommon* stfspcommon) {
  delete stfspcommon_;
  stfspcommon_ = stfspcommon;
  if (stfspcommon) {
    set_has_stfspcommon();
  } else {
    clear_has_stfspcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeFreeSpace.stfspcommon)
}

// repeated .atd.meprocess.FSPoint dt_array_120_fspoint = 4;
inline int Dt_Record_MeFreeSpace::dt_array_120_fspoint_size() const {
  return dt_array_120_fspoint_.size();
}
inline void Dt_Record_MeFreeSpace::clear_dt_array_120_fspoint() {
  dt_array_120_fspoint_.Clear();
}
inline const ::atd::meprocess::FSPoint& Dt_Record_MeFreeSpace::dt_array_120_fspoint(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_.Get(index);
}
inline ::atd::meprocess::FSPoint* Dt_Record_MeFreeSpace::mutable_dt_array_120_fspoint(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_.Mutable(index);
}
inline ::atd::meprocess::FSPoint* Dt_Record_MeFreeSpace::add_dt_array_120_fspoint() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FSPoint >*
Dt_Record_MeFreeSpace::mutable_dt_array_120_fspoint() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return &dt_array_120_fspoint_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::FSPoint >&
Dt_Record_MeFreeSpace::dt_array_120_fspoint() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_MeFreeSpace.dt_array_120_fspoint)
  return dt_array_120_fspoint_;
}

// -------------------------------------------------------------------

// FSPoint

// optional int32 fsp_id = 1;
inline bool FSPoint::has_fsp_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FSPoint::set_has_fsp_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FSPoint::clear_has_fsp_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FSPoint::clear_fsp_id() {
  fsp_id_ = 0;
  clear_has_fsp_id();
}
inline ::google::protobuf::int32 FSPoint::fsp_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_id)
  return fsp_id_;
}
inline void FSPoint::set_fsp_id(::google::protobuf::int32 value) {
  set_has_fsp_id();
  fsp_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_id)
}

// optional bool fsp_is_valid = 2;
inline bool FSPoint::has_fsp_is_valid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FSPoint::set_has_fsp_is_valid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FSPoint::clear_has_fsp_is_valid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FSPoint::clear_fsp_is_valid() {
  fsp_is_valid_ = false;
  clear_has_fsp_is_valid();
}
inline bool FSPoint::fsp_is_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_is_valid)
  return fsp_is_valid_;
}
inline void FSPoint::set_fsp_is_valid(bool value) {
  set_has_fsp_is_valid();
  fsp_is_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_is_valid)
}

// optional float fsp_existence_prob = 3;
inline bool FSPoint::has_fsp_existence_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FSPoint::set_has_fsp_existence_prob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FSPoint::clear_has_fsp_existence_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FSPoint::clear_fsp_existence_prob() {
  fsp_existence_prob_ = 0;
  clear_has_fsp_existence_prob();
}
inline float FSPoint::fsp_existence_prob() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_existence_prob)
  return fsp_existence_prob_;
}
inline void FSPoint::set_fsp_existence_prob(float value) {
  set_has_fsp_existence_prob();
  fsp_existence_prob_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_existence_prob)
}

// optional float fsp_emptiness_prob = 4;
inline bool FSPoint::has_fsp_emptiness_prob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FSPoint::set_has_fsp_emptiness_prob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FSPoint::clear_has_fsp_emptiness_prob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FSPoint::clear_fsp_emptiness_prob() {
  fsp_emptiness_prob_ = 0;
  clear_has_fsp_emptiness_prob();
}
inline float FSPoint::fsp_emptiness_prob() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_emptiness_prob)
  return fsp_emptiness_prob_;
}
inline void FSPoint::set_fsp_emptiness_prob(float value) {
  set_has_fsp_emptiness_prob();
  fsp_emptiness_prob_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_emptiness_prob)
}

// optional .atd.meprocess.FSPoint.Fsp_mobility_statusType fsp_mobility_status = 5;
inline bool FSPoint::has_fsp_mobility_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FSPoint::set_has_fsp_mobility_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FSPoint::clear_has_fsp_mobility_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FSPoint::clear_fsp_mobility_status() {
  fsp_mobility_status_ = 0;
  clear_has_fsp_mobility_status();
}
inline ::atd::meprocess::FSPoint_Fsp_mobility_statusType FSPoint::fsp_mobility_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_mobility_status)
  return static_cast< ::atd::meprocess::FSPoint_Fsp_mobility_statusType >(fsp_mobility_status_);
}
inline void FSPoint::set_fsp_mobility_status(::atd::meprocess::FSPoint_Fsp_mobility_statusType value) {
  assert(::atd::meprocess::FSPoint_Fsp_mobility_statusType_IsValid(value));
  set_has_fsp_mobility_status();
  fsp_mobility_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_mobility_status)
}

// optional .atd.meprocess.FSPoint.Fsp_classification_typeType fsp_classification_type = 6;
inline bool FSPoint::has_fsp_classification_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FSPoint::set_has_fsp_classification_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FSPoint::clear_has_fsp_classification_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FSPoint::clear_fsp_classification_type() {
  fsp_classification_type_ = 0;
  clear_has_fsp_classification_type();
}
inline ::atd::meprocess::FSPoint_Fsp_classification_typeType FSPoint::fsp_classification_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_classification_type)
  return static_cast< ::atd::meprocess::FSPoint_Fsp_classification_typeType >(fsp_classification_type_);
}
inline void FSPoint::set_fsp_classification_type(::atd::meprocess::FSPoint_Fsp_classification_typeType value) {
  assert(::atd::meprocess::FSPoint_Fsp_classification_typeType_IsValid(value));
  set_has_fsp_classification_type();
  fsp_classification_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_classification_type)
}

// optional float fsp_range_std = 7;
inline bool FSPoint::has_fsp_range_std() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FSPoint::set_has_fsp_range_std() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FSPoint::clear_has_fsp_range_std() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FSPoint::clear_fsp_range_std() {
  fsp_range_std_ = 0;
  clear_has_fsp_range_std();
}
inline float FSPoint::fsp_range_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_range_std)
  return fsp_range_std_;
}
inline void FSPoint::set_fsp_range_std(float value) {
  set_has_fsp_range_std();
  fsp_range_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_range_std)
}

// optional float fsp_range = 8;
inline bool FSPoint::has_fsp_range() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void FSPoint::set_has_fsp_range() {
  _has_bits_[0] |= 0x00000080u;
}
inline void FSPoint::clear_has_fsp_range() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void FSPoint::clear_fsp_range() {
  fsp_range_ = 0;
  clear_has_fsp_range();
}
inline float FSPoint::fsp_range() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_range)
  return fsp_range_;
}
inline void FSPoint::set_fsp_range(float value) {
  set_has_fsp_range();
  fsp_range_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_range)
}

// optional float fsp_height = 9;
inline bool FSPoint::has_fsp_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void FSPoint::set_has_fsp_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void FSPoint::clear_has_fsp_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void FSPoint::clear_fsp_height() {
  fsp_height_ = 0;
  clear_has_fsp_height();
}
inline float FSPoint::fsp_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_height)
  return fsp_height_;
}
inline void FSPoint::set_fsp_height(float value) {
  set_has_fsp_height();
  fsp_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_height)
}

// optional float fsp_height_std = 10;
inline bool FSPoint::has_fsp_height_std() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void FSPoint::set_has_fsp_height_std() {
  _has_bits_[0] |= 0x00000200u;
}
inline void FSPoint::clear_has_fsp_height_std() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void FSPoint::clear_fsp_height_std() {
  fsp_height_std_ = 0;
  clear_has_fsp_height_std();
}
inline float FSPoint::fsp_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_height_std)
  return fsp_height_std_;
}
inline void FSPoint::set_fsp_height_std(float value) {
  set_has_fsp_height_std();
  fsp_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_height_std)
}

// optional int32 reserved_2 = 11;
inline bool FSPoint::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void FSPoint::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void FSPoint::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void FSPoint::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 FSPoint::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.reserved_2)
  return reserved_2_;
}
inline void FSPoint::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.reserved_2)
}

// optional float fsp_azimuth_angle = 12;
inline bool FSPoint::has_fsp_azimuth_angle() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void FSPoint::set_has_fsp_azimuth_angle() {
  _has_bits_[0] |= 0x00000800u;
}
inline void FSPoint::clear_has_fsp_azimuth_angle() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void FSPoint::clear_fsp_azimuth_angle() {
  fsp_azimuth_angle_ = 0;
  clear_has_fsp_azimuth_angle();
}
inline float FSPoint::fsp_azimuth_angle() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_azimuth_angle)
  return fsp_azimuth_angle_;
}
inline void FSPoint::set_fsp_azimuth_angle(float value) {
  set_has_fsp_azimuth_angle();
  fsp_azimuth_angle_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_azimuth_angle)
}

// optional int32 fsp_buffer = 13;
inline bool FSPoint::has_fsp_buffer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void FSPoint::set_has_fsp_buffer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void FSPoint::clear_has_fsp_buffer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void FSPoint::clear_fsp_buffer() {
  fsp_buffer_ = 0;
  clear_has_fsp_buffer();
}
inline ::google::protobuf::int32 FSPoint::fsp_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.FSPoint.fsp_buffer)
  return fsp_buffer_;
}
inline void FSPoint::set_fsp_buffer(::google::protobuf::int32 value) {
  set_has_fsp_buffer();
  fsp_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.FSPoint.fsp_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_HLB

// optional int32 hlb_zero_byte = 1;
inline bool Dt_Record_HLB::has_hlb_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_HLB::set_has_hlb_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_HLB::clear_has_hlb_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_HLB::clear_hlb_zero_byte() {
  hlb_zero_byte_ = 0;
  clear_has_hlb_zero_byte();
}
inline ::google::protobuf::int32 Dt_Record_HLB::hlb_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_zero_byte)
  return hlb_zero_byte_;
}
inline void Dt_Record_HLB::set_hlb_zero_byte(::google::protobuf::int32 value) {
  set_has_hlb_zero_byte();
  hlb_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_zero_byte)
}

// optional int32 hlb_protocol_version = 2;
inline bool Dt_Record_HLB::has_hlb_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dt_Record_HLB::set_has_hlb_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dt_Record_HLB::clear_has_hlb_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dt_Record_HLB::clear_hlb_protocol_version() {
  hlb_protocol_version_ = 0;
  clear_has_hlb_protocol_version();
}
inline ::google::protobuf::int32 Dt_Record_HLB::hlb_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_protocol_version)
  return hlb_protocol_version_;
}
inline void Dt_Record_HLB::set_hlb_protocol_version(::google::protobuf::int32 value) {
  set_has_hlb_protocol_version();
  hlb_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_protocol_version)
}

// optional int32 hlb_sync_id = 3;
inline bool Dt_Record_HLB::has_hlb_sync_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dt_Record_HLB::set_has_hlb_sync_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dt_Record_HLB::clear_has_hlb_sync_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dt_Record_HLB::clear_hlb_sync_id() {
  hlb_sync_id_ = 0;
  clear_has_hlb_sync_id();
}
inline ::google::protobuf::int32 Dt_Record_HLB::hlb_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_sync_id)
  return hlb_sync_id_;
}
inline void Dt_Record_HLB::set_hlb_sync_id(::google::protobuf::int32 value) {
  set_has_hlb_sync_id();
  hlb_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_sync_id)
}

// optional .atd.meprocess.Dt_Record_HLB.Hlb_running_modeType hlb_running_mode = 4;
inline bool Dt_Record_HLB::has_hlb_running_mode() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dt_Record_HLB::set_has_hlb_running_mode() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dt_Record_HLB::clear_has_hlb_running_mode() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dt_Record_HLB::clear_hlb_running_mode() {
  hlb_running_mode_ = 0;
  clear_has_hlb_running_mode();
}
inline ::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType Dt_Record_HLB::hlb_running_mode() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_running_mode)
  return static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType >(hlb_running_mode_);
}
inline void Dt_Record_HLB::set_hlb_running_mode(::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType value) {
  assert(::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType_IsValid(value));
  set_has_hlb_running_mode();
  hlb_running_mode_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_running_mode)
}

// optional .atd.meprocess.Dt_Record_HLB.Hlb_inactive_reasonType hlb_inactive_reason = 5;
inline bool Dt_Record_HLB::has_hlb_inactive_reason() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dt_Record_HLB::set_has_hlb_inactive_reason() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dt_Record_HLB::clear_has_hlb_inactive_reason() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dt_Record_HLB::clear_hlb_inactive_reason() {
  hlb_inactive_reason_ = 0;
  clear_has_hlb_inactive_reason();
}
inline ::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType Dt_Record_HLB::hlb_inactive_reason() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_inactive_reason)
  return static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType >(hlb_inactive_reason_);
}
inline void Dt_Record_HLB::set_hlb_inactive_reason(::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType value) {
  assert(::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType_IsValid(value));
  set_has_hlb_inactive_reason();
  hlb_inactive_reason_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_inactive_reason)
}

// optional .atd.meprocess.Dt_Record_HLB.Hlb_decisionType hlb_decision = 6;
inline bool Dt_Record_HLB::has_hlb_decision() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dt_Record_HLB::set_has_hlb_decision() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dt_Record_HLB::clear_has_hlb_decision() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dt_Record_HLB::clear_hlb_decision() {
  hlb_decision_ = 0;
  clear_has_hlb_decision();
}
inline ::atd::meprocess::Dt_Record_HLB_Hlb_decisionType Dt_Record_HLB::hlb_decision() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_decision)
  return static_cast< ::atd::meprocess::Dt_Record_HLB_Hlb_decisionType >(hlb_decision_);
}
inline void Dt_Record_HLB::set_hlb_decision(::atd::meprocess::Dt_Record_HLB_Hlb_decisionType value) {
  assert(::atd::meprocess::Dt_Record_HLB_Hlb_decisionType_IsValid(value));
  set_has_hlb_decision();
  hlb_decision_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_decision)
}

// optional bool reserved_1 = 7;
inline bool Dt_Record_HLB::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Dt_Record_HLB::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Dt_Record_HLB::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Dt_Record_HLB::clear_reserved_1() {
  reserved_1_ = false;
  clear_has_reserved_1();
}
inline bool Dt_Record_HLB::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.reserved_1)
  return reserved_1_;
}
inline void Dt_Record_HLB::set_reserved_1(bool value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.reserved_1)
}

// optional float hlb_reason = 8;
inline bool Dt_Record_HLB::has_hlb_reason() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Dt_Record_HLB::set_has_hlb_reason() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Dt_Record_HLB::clear_has_hlb_reason() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Dt_Record_HLB::clear_hlb_reason() {
  hlb_reason_ = 0;
  clear_has_hlb_reason();
}
inline float Dt_Record_HLB::hlb_reason() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.hlb_reason)
  return hlb_reason_;
}
inline void Dt_Record_HLB::set_hlb_reason(float value) {
  set_has_hlb_reason();
  hlb_reason_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_HLB.hlb_reason)
}

// optional .atd.common.Header header = 9;
inline bool Dt_Record_HLB::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_HLB::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_HLB::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_HLB::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_HLB::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_HLB::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_HLB.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_HLB::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_HLB.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_HLB::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_HLB.header)
}

// optional .atd.common.Reserved reservedmsg = 10;
inline bool Dt_Record_HLB::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_HLB::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_HLB::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_HLB::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_HLB::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_HLB.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_HLB::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_HLB.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_HLB::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_HLB.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_HLB::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_HLB.reservedmsg)
}

// -------------------------------------------------------------------

// Dt_Record_LDW

// optional int32 ldw_zero_byte = 1;
inline bool Dt_Record_LDW::has_ldw_zero_byte() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_zero_byte() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_LDW::clear_has_ldw_zero_byte() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_LDW::clear_ldw_zero_byte() {
  ldw_zero_byte_ = 0;
  clear_has_ldw_zero_byte();
}
inline ::google::protobuf::int32 Dt_Record_LDW::ldw_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_zero_byte)
  return ldw_zero_byte_;
}
inline void Dt_Record_LDW::set_ldw_zero_byte(::google::protobuf::int32 value) {
  set_has_ldw_zero_byte();
  ldw_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_zero_byte)
}

// optional int32 ldw_protocol_version = 2;
inline bool Dt_Record_LDW::has_ldw_protocol_version() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_protocol_version() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dt_Record_LDW::clear_has_ldw_protocol_version() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dt_Record_LDW::clear_ldw_protocol_version() {
  ldw_protocol_version_ = 0;
  clear_has_ldw_protocol_version();
}
inline ::google::protobuf::int32 Dt_Record_LDW::ldw_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_protocol_version)
  return ldw_protocol_version_;
}
inline void Dt_Record_LDW::set_ldw_protocol_version(::google::protobuf::int32 value) {
  set_has_ldw_protocol_version();
  ldw_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_protocol_version)
}

// optional int32 ldw_sync_id = 3;
inline bool Dt_Record_LDW::has_ldw_sync_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_sync_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dt_Record_LDW::clear_has_ldw_sync_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dt_Record_LDW::clear_ldw_sync_id() {
  ldw_sync_id_ = 0;
  clear_has_ldw_sync_id();
}
inline ::google::protobuf::int32 Dt_Record_LDW::ldw_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_sync_id)
  return ldw_sync_id_;
}
inline void Dt_Record_LDW::set_ldw_sync_id(::google::protobuf::int32 value) {
  set_has_ldw_sync_id();
  ldw_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_sync_id)
}

// optional bool ldw_line_valid_left = 4;
inline bool Dt_Record_LDW::has_ldw_line_valid_left() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_line_valid_left() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dt_Record_LDW::clear_has_ldw_line_valid_left() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dt_Record_LDW::clear_ldw_line_valid_left() {
  ldw_line_valid_left_ = false;
  clear_has_ldw_line_valid_left();
}
inline bool Dt_Record_LDW::ldw_line_valid_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_line_valid_left)
  return ldw_line_valid_left_;
}
inline void Dt_Record_LDW::set_ldw_line_valid_left(bool value) {
  set_has_ldw_line_valid_left();
  ldw_line_valid_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_line_valid_left)
}

// optional bool ldw_line_valid_right = 5;
inline bool Dt_Record_LDW::has_ldw_line_valid_right() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_line_valid_right() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dt_Record_LDW::clear_has_ldw_line_valid_right() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dt_Record_LDW::clear_ldw_line_valid_right() {
  ldw_line_valid_right_ = false;
  clear_has_ldw_line_valid_right();
}
inline bool Dt_Record_LDW::ldw_line_valid_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_line_valid_right)
  return ldw_line_valid_right_;
}
inline void Dt_Record_LDW::set_ldw_line_valid_right(bool value) {
  set_has_ldw_line_valid_right();
  ldw_line_valid_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_line_valid_right)
}

// optional int32 reserved_1 = 6;
inline bool Dt_Record_LDW::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dt_Record_LDW::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dt_Record_LDW::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dt_Record_LDW::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 Dt_Record_LDW::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.reserved_1)
  return reserved_1_;
}
inline void Dt_Record_LDW::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.reserved_1)
}

// optional int32 ldw_suppresion_reason = 7;
inline bool Dt_Record_LDW::has_ldw_suppresion_reason() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_suppresion_reason() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Dt_Record_LDW::clear_has_ldw_suppresion_reason() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Dt_Record_LDW::clear_ldw_suppresion_reason() {
  ldw_suppresion_reason_ = 0;
  clear_has_ldw_suppresion_reason();
}
inline ::google::protobuf::int32 Dt_Record_LDW::ldw_suppresion_reason() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_suppresion_reason)
  return ldw_suppresion_reason_;
}
inline void Dt_Record_LDW::set_ldw_suppresion_reason(::google::protobuf::int32 value) {
  set_has_ldw_suppresion_reason();
  ldw_suppresion_reason_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_suppresion_reason)
}

// optional float ldw_time_to_warning_left = 8;
inline bool Dt_Record_LDW::has_ldw_time_to_warning_left() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_time_to_warning_left() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Dt_Record_LDW::clear_has_ldw_time_to_warning_left() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Dt_Record_LDW::clear_ldw_time_to_warning_left() {
  ldw_time_to_warning_left_ = 0;
  clear_has_ldw_time_to_warning_left();
}
inline float Dt_Record_LDW::ldw_time_to_warning_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_left)
  return ldw_time_to_warning_left_;
}
inline void Dt_Record_LDW::set_ldw_time_to_warning_left(float value) {
  set_has_ldw_time_to_warning_left();
  ldw_time_to_warning_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_left)
}

// optional float ldw_time_to_warning_right = 9;
inline bool Dt_Record_LDW::has_ldw_time_to_warning_right() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_time_to_warning_right() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Dt_Record_LDW::clear_has_ldw_time_to_warning_right() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Dt_Record_LDW::clear_ldw_time_to_warning_right() {
  ldw_time_to_warning_right_ = 0;
  clear_has_ldw_time_to_warning_right();
}
inline float Dt_Record_LDW::ldw_time_to_warning_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_right)
  return ldw_time_to_warning_right_;
}
inline void Dt_Record_LDW::set_ldw_time_to_warning_right(float value) {
  set_has_ldw_time_to_warning_right();
  ldw_time_to_warning_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_time_to_warning_right)
}

// optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_leftType ldw_warning_status_left = 10;
inline bool Dt_Record_LDW::has_ldw_warning_status_left() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_warning_status_left() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Dt_Record_LDW::clear_has_ldw_warning_status_left() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Dt_Record_LDW::clear_ldw_warning_status_left() {
  ldw_warning_status_left_ = 0;
  clear_has_ldw_warning_status_left();
}
inline ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType Dt_Record_LDW::ldw_warning_status_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_warning_status_left)
  return static_cast< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType >(ldw_warning_status_left_);
}
inline void Dt_Record_LDW::set_ldw_warning_status_left(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType value) {
  assert(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType_IsValid(value));
  set_has_ldw_warning_status_left();
  ldw_warning_status_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_warning_status_left)
}

// optional .atd.meprocess.Dt_Record_LDW.Ldw_warning_status_rightType ldw_warning_status_right = 11;
inline bool Dt_Record_LDW::has_ldw_warning_status_right() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Dt_Record_LDW::set_has_ldw_warning_status_right() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Dt_Record_LDW::clear_has_ldw_warning_status_right() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Dt_Record_LDW::clear_ldw_warning_status_right() {
  ldw_warning_status_right_ = 0;
  clear_has_ldw_warning_status_right();
}
inline ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType Dt_Record_LDW::ldw_warning_status_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.ldw_warning_status_right)
  return static_cast< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType >(ldw_warning_status_right_);
}
inline void Dt_Record_LDW::set_ldw_warning_status_right(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType value) {
  assert(::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType_IsValid(value));
  set_has_ldw_warning_status_right();
  ldw_warning_status_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.ldw_warning_status_right)
}

// optional int32 reserved_2 = 12;
inline bool Dt_Record_LDW::has_reserved_2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Dt_Record_LDW::set_has_reserved_2() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Dt_Record_LDW::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Dt_Record_LDW::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 Dt_Record_LDW::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.reserved_2)
  return reserved_2_;
}
inline void Dt_Record_LDW::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_LDW.reserved_2)
}

// optional .atd.common.Header header = 13;
inline bool Dt_Record_LDW::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_LDW::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_LDW::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_LDW::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_LDW::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_LDW::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LDW.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_LDW::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LDW.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_LDW::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LDW.header)
}

// optional .atd.common.Reserved reservedmsg = 14;
inline bool Dt_Record_LDW::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_LDW::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_LDW::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_LDW::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_LDW::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LDW.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_LDW::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LDW.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_LDW::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LDW.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_LDW::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LDW.reservedmsg)
}

// -------------------------------------------------------------------

// LSCommon

// optional int32 zero_byte = 1;
inline bool LSCommon::has_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LSCommon::set_has_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LSCommon::clear_has_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LSCommon::clear_zero_byte() {
  zero_byte_ = 0;
  clear_has_zero_byte();
}
inline ::google::protobuf::int32 LSCommon::zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.zero_byte)
  return zero_byte_;
}
inline void LSCommon::set_zero_byte(::google::protobuf::int32 value) {
  set_has_zero_byte();
  zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.zero_byte)
}

// optional int32 ls_protocol_version = 2;
inline bool LSCommon::has_ls_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LSCommon::set_has_ls_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LSCommon::clear_has_ls_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LSCommon::clear_ls_protocol_version() {
  ls_protocol_version_ = 0;
  clear_has_ls_protocol_version();
}
inline ::google::protobuf::int32 LSCommon::ls_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_protocol_version)
  return ls_protocol_version_;
}
inline void LSCommon::set_ls_protocol_version(::google::protobuf::int32 value) {
  set_has_ls_protocol_version();
  ls_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_protocol_version)
}

// optional int32 ls_sync_id = 3;
inline bool LSCommon::has_ls_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LSCommon::set_has_ls_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LSCommon::clear_has_ls_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LSCommon::clear_ls_sync_id() {
  ls_sync_id_ = 0;
  clear_has_ls_sync_id();
}
inline ::google::protobuf::int32 LSCommon::ls_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_sync_id)
  return ls_sync_id_;
}
inline void LSCommon::set_ls_sync_id(::google::protobuf::int32 value) {
  set_has_ls_sync_id();
  ls_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_sync_id)
}

// optional int32 ls_adjacent_number = 4;
inline bool LSCommon::has_ls_adjacent_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LSCommon::set_has_ls_adjacent_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LSCommon::clear_has_ls_adjacent_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LSCommon::clear_ls_adjacent_number() {
  ls_adjacent_number_ = 0;
  clear_has_ls_adjacent_number();
}
inline ::google::protobuf::int32 LSCommon::ls_adjacent_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_adjacent_number)
  return ls_adjacent_number_;
}
inline void LSCommon::set_ls_adjacent_number(::google::protobuf::int32 value) {
  set_has_ls_adjacent_number();
  ls_adjacent_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_adjacent_number)
}

// optional bool ls_ca_is_construction_area = 5;
inline bool LSCommon::has_ls_ca_is_construction_area() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LSCommon::set_has_ls_ca_is_construction_area() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LSCommon::clear_has_ls_ca_is_construction_area() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LSCommon::clear_ls_ca_is_construction_area() {
  ls_ca_is_construction_area_ = false;
  clear_has_ls_ca_is_construction_area();
}
inline bool LSCommon::ls_ca_is_construction_area() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_ca_is_construction_area)
  return ls_ca_is_construction_area_;
}
inline void LSCommon::set_ls_ca_is_construction_area(bool value) {
  set_has_ls_ca_is_construction_area();
  ls_ca_is_construction_area_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_ca_is_construction_area)
}

// optional int32 ls_header_buffer_1 = 6;
inline bool LSCommon::has_ls_header_buffer_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LSCommon::set_has_ls_header_buffer_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LSCommon::clear_has_ls_header_buffer_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LSCommon::clear_ls_header_buffer_1() {
  ls_header_buffer_1_ = 0;
  clear_has_ls_header_buffer_1();
}
inline ::google::protobuf::int32 LSCommon::ls_header_buffer_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LSCommon.ls_header_buffer_1)
  return ls_header_buffer_1_;
}
inline void LSCommon::set_ls_header_buffer_1(::google::protobuf::int32 value) {
  set_has_ls_header_buffer_1();
  ls_header_buffer_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LSCommon.ls_header_buffer_1)
}

// -------------------------------------------------------------------

// LineParam

// optional bool valid = 10;
inline bool LineParam::has_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LineParam::set_has_valid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LineParam::clear_has_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LineParam::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool LineParam::valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.valid)
  return valid_;
}
inline void LineParam::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.valid)
}

// optional float c0 = 1;
inline bool LineParam::has_c0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineParam::set_has_c0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineParam::clear_has_c0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineParam::clear_c0() {
  c0_ = 0;
  clear_has_c0();
}
inline float LineParam::c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c0)
  return c0_;
}
inline void LineParam::set_c0(float value) {
  set_has_c0();
  c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c0)
}

// optional float c1 = 2;
inline bool LineParam::has_c1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LineParam::set_has_c1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LineParam::clear_has_c1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LineParam::clear_c1() {
  c1_ = 0;
  clear_has_c1();
}
inline float LineParam::c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c1)
  return c1_;
}
inline void LineParam::set_c1(float value) {
  set_has_c1();
  c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c1)
}

// optional float c2 = 3;
inline bool LineParam::has_c2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LineParam::set_has_c2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LineParam::clear_has_c2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LineParam::clear_c2() {
  c2_ = 0;
  clear_has_c2();
}
inline float LineParam::c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c2)
  return c2_;
}
inline void LineParam::set_c2(float value) {
  set_has_c2();
  c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c2)
}

// optional float c3 = 4;
inline bool LineParam::has_c3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LineParam::set_has_c3() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LineParam::clear_has_c3() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LineParam::clear_c3() {
  c3_ = 0;
  clear_has_c3();
}
inline float LineParam::c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c3)
  return c3_;
}
inline void LineParam::set_c3(float value) {
  set_has_c3();
  c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c3)
}

// optional float view_start = 5;
inline bool LineParam::has_view_start() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LineParam::set_has_view_start() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LineParam::clear_has_view_start() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LineParam::clear_view_start() {
  view_start_ = 0;
  clear_has_view_start();
}
inline float LineParam::view_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.view_start)
  return view_start_;
}
inline void LineParam::set_view_start(float value) {
  set_has_view_start();
  view_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.view_start)
}

// optional float view_end = 6;
inline bool LineParam::has_view_end() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LineParam::set_has_view_end() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LineParam::clear_has_view_end() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LineParam::clear_view_end() {
  view_end_ = 0;
  clear_has_view_end();
}
inline float LineParam::view_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.view_end)
  return view_end_;
}
inline void LineParam::set_view_end(float value) {
  set_has_view_end();
  view_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.view_end)
}

// optional int32 lineType = 7;
inline bool LineParam::has_linetype() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LineParam::set_has_linetype() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LineParam::clear_has_linetype() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LineParam::clear_linetype() {
  linetype_ = 0;
  clear_has_linetype();
}
inline ::google::protobuf::int32 LineParam::linetype() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.lineType)
  return linetype_;
}
inline void LineParam::set_linetype(::google::protobuf::int32 value) {
  set_has_linetype();
  linetype_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.lineType)
}

// optional int32 lineQuality = 8;
inline bool LineParam::has_linequality() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LineParam::set_has_linequality() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LineParam::clear_has_linequality() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LineParam::clear_linequality() {
  linequality_ = 0;
  clear_has_linequality();
}
inline ::google::protobuf::int32 LineParam::linequality() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.lineQuality)
  return linequality_;
}
inline void LineParam::set_linequality(::google::protobuf::int32 value) {
  set_has_linequality();
  linequality_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.lineQuality)
}

// optional float linewidth = 9;
inline bool LineParam::has_linewidth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LineParam::set_has_linewidth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LineParam::clear_has_linewidth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LineParam::clear_linewidth() {
  linewidth_ = 0;
  clear_has_linewidth();
}
inline float LineParam::linewidth() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.linewidth)
  return linewidth_;
}
inline void LineParam::set_linewidth(float value) {
  set_has_linewidth();
  linewidth_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.linewidth)
}

// optional float c0_std = 14;
inline bool LineParam::has_c0_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LineParam::set_has_c0_std() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LineParam::clear_has_c0_std() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LineParam::clear_c0_std() {
  c0_std_ = 0;
  clear_has_c0_std();
}
inline float LineParam::c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c0_std)
  return c0_std_;
}
inline void LineParam::set_c0_std(float value) {
  set_has_c0_std();
  c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c0_std)
}

// optional float c1_std = 11;
inline bool LineParam::has_c1_std() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LineParam::set_has_c1_std() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LineParam::clear_has_c1_std() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LineParam::clear_c1_std() {
  c1_std_ = 0;
  clear_has_c1_std();
}
inline float LineParam::c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c1_std)
  return c1_std_;
}
inline void LineParam::set_c1_std(float value) {
  set_has_c1_std();
  c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c1_std)
}

// optional float c2_std = 12;
inline bool LineParam::has_c2_std() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LineParam::set_has_c2_std() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LineParam::clear_has_c2_std() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LineParam::clear_c2_std() {
  c2_std_ = 0;
  clear_has_c2_std();
}
inline float LineParam::c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c2_std)
  return c2_std_;
}
inline void LineParam::set_c2_std(float value) {
  set_has_c2_std();
  c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c2_std)
}

// optional float c3_std = 13;
inline bool LineParam::has_c3_std() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LineParam::set_has_c3_std() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LineParam::clear_has_c3_std() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LineParam::clear_c3_std() {
  c3_std_ = 0;
  clear_has_c3_std();
}
inline float LineParam::c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LineParam.c3_std)
  return c3_std_;
}
inline void LineParam::set_c3_std(float value) {
  set_has_c3_std();
  c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LineParam.c3_std)
}

// -------------------------------------------------------------------

// Dt_Record_Lane_Support

// optional .atd.common.Header header = 1;
inline bool Dt_Record_Lane_Support::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_Lane_Support::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_Lane_Support::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_Lane_Support::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_Lane_Support::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_Lane_Support::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_Lane_Support::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_Lane_Support::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_Lane_Support::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_Lane_Support::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_Lane_Support::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_Lane_Support::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_Lane_Support::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_Lane_Support::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.reservedmsg)
}

// optional .atd.meprocess.LSCommon stlscommon = 3;
inline bool Dt_Record_Lane_Support::has_stlscommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_stlscommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_Lane_Support::clear_has_stlscommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_Lane_Support::clear_stlscommon() {
  if (stlscommon_ != NULL) stlscommon_->::atd::meprocess::LSCommon::Clear();
  clear_has_stlscommon();
}
inline const ::atd::meprocess::LSCommon& Dt_Record_Lane_Support::stlscommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
  return stlscommon_ != NULL ? *stlscommon_
                         : *::atd::meprocess::LSCommon::internal_default_instance();
}
inline ::atd::meprocess::LSCommon* Dt_Record_Lane_Support::mutable_stlscommon() {
  set_has_stlscommon();
  if (stlscommon_ == NULL) {
    stlscommon_ = new ::atd::meprocess::LSCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
  return stlscommon_;
}
inline ::atd::meprocess::LSCommon* Dt_Record_Lane_Support::release_stlscommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
  clear_has_stlscommon();
  ::atd::meprocess::LSCommon* temp = stlscommon_;
  stlscommon_ = NULL;
  return temp;
}
inline void Dt_Record_Lane_Support::set_allocated_stlscommon(::atd::meprocess::LSCommon* stlscommon) {
  delete stlscommon_;
  stlscommon_ = stlscommon;
  if (stlscommon) {
    set_has_stlscommon();
  } else {
    clear_has_stlscommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.stlscommon)
}

// repeated .atd.meprocess.LS_Host_Line dt_array_2_ls_host_line = 4;
inline int Dt_Record_Lane_Support::dt_array_2_ls_host_line_size() const {
  return dt_array_2_ls_host_line_.size();
}
inline void Dt_Record_Lane_Support::clear_dt_array_2_ls_host_line() {
  dt_array_2_ls_host_line_.Clear();
}
inline const ::atd::meprocess::LS_Host_Line& Dt_Record_Lane_Support::dt_array_2_ls_host_line(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_.Get(index);
}
inline ::atd::meprocess::LS_Host_Line* Dt_Record_Lane_Support::mutable_dt_array_2_ls_host_line(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_.Mutable(index);
}
inline ::atd::meprocess::LS_Host_Line* Dt_Record_Lane_Support::add_dt_array_2_ls_host_line() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Host_Line >*
Dt_Record_Lane_Support::mutable_dt_array_2_ls_host_line() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return &dt_array_2_ls_host_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Host_Line >&
Dt_Record_Lane_Support::dt_array_2_ls_host_line() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_2_ls_host_line)
  return dt_array_2_ls_host_line_;
}

// repeated .atd.meprocess.LS_Adjacent_Line dt_array_4_ls_adjacent_line = 6;
inline int Dt_Record_Lane_Support::dt_array_4_ls_adjacent_line_size() const {
  return dt_array_4_ls_adjacent_line_.size();
}
inline void Dt_Record_Lane_Support::clear_dt_array_4_ls_adjacent_line() {
  dt_array_4_ls_adjacent_line_.Clear();
}
inline const ::atd::meprocess::LS_Adjacent_Line& Dt_Record_Lane_Support::dt_array_4_ls_adjacent_line(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_.Get(index);
}
inline ::atd::meprocess::LS_Adjacent_Line* Dt_Record_Lane_Support::mutable_dt_array_4_ls_adjacent_line(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_.Mutable(index);
}
inline ::atd::meprocess::LS_Adjacent_Line* Dt_Record_Lane_Support::add_dt_array_4_ls_adjacent_line() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Adjacent_Line >*
Dt_Record_Lane_Support::mutable_dt_array_4_ls_adjacent_line() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return &dt_array_4_ls_adjacent_line_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_Adjacent_Line >&
Dt_Record_Lane_Support::dt_array_4_ls_adjacent_line() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_Lane_Support.dt_array_4_ls_adjacent_line)
  return dt_array_4_ls_adjacent_line_;
}

// optional .atd.meprocess.LineParam LeftLine = 7;
inline bool Dt_Record_Lane_Support::has_leftline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_leftline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Dt_Record_Lane_Support::clear_has_leftline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Dt_Record_Lane_Support::clear_leftline() {
  if (leftline_ != NULL) leftline_->::atd::meprocess::LineParam::Clear();
  clear_has_leftline();
}
inline const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::leftline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
  return leftline_ != NULL ? *leftline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_leftline() {
  set_has_leftline();
  if (leftline_ == NULL) {
    leftline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
  return leftline_;
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_leftline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
  clear_has_leftline();
  ::atd::meprocess::LineParam* temp = leftline_;
  leftline_ = NULL;
  return temp;
}
inline void Dt_Record_Lane_Support::set_allocated_leftline(::atd::meprocess::LineParam* leftline) {
  delete leftline_;
  leftline_ = leftline;
  if (leftline) {
    set_has_leftline();
  } else {
    clear_has_leftline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.LeftLine)
}

// optional .atd.meprocess.LineParam RightLine = 8;
inline bool Dt_Record_Lane_Support::has_rightline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_rightline() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Dt_Record_Lane_Support::clear_has_rightline() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Dt_Record_Lane_Support::clear_rightline() {
  if (rightline_ != NULL) rightline_->::atd::meprocess::LineParam::Clear();
  clear_has_rightline();
}
inline const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::rightline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.RightLine)
  return rightline_ != NULL ? *rightline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_rightline() {
  set_has_rightline();
  if (rightline_ == NULL) {
    rightline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.RightLine)
  return rightline_;
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_rightline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.RightLine)
  clear_has_rightline();
  ::atd::meprocess::LineParam* temp = rightline_;
  rightline_ = NULL;
  return temp;
}
inline void Dt_Record_Lane_Support::set_allocated_rightline(::atd::meprocess::LineParam* rightline) {
  delete rightline_;
  rightline_ = rightline;
  if (rightline) {
    set_has_rightline();
  } else {
    clear_has_rightline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.RightLine)
}

// optional int32 MeLaneStatus = 9;
inline bool Dt_Record_Lane_Support::has_melanestatus() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_melanestatus() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Dt_Record_Lane_Support::clear_has_melanestatus() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Dt_Record_Lane_Support::clear_melanestatus() {
  melanestatus_ = 0;
  clear_has_melanestatus();
}
inline ::google::protobuf::int32 Dt_Record_Lane_Support::melanestatus() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.MeLaneStatus)
  return melanestatus_;
}
inline void Dt_Record_Lane_Support::set_melanestatus(::google::protobuf::int32 value) {
  set_has_melanestatus();
  melanestatus_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.Dt_Record_Lane_Support.MeLaneStatus)
}

// optional .atd.meprocess.LineParam NextLeftLine = 10;
inline bool Dt_Record_Lane_Support::has_nextleftline() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_nextleftline() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Dt_Record_Lane_Support::clear_has_nextleftline() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Dt_Record_Lane_Support::clear_nextleftline() {
  if (nextleftline_ != NULL) nextleftline_->::atd::meprocess::LineParam::Clear();
  clear_has_nextleftline();
}
inline const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::nextleftline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
  return nextleftline_ != NULL ? *nextleftline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_nextleftline() {
  set_has_nextleftline();
  if (nextleftline_ == NULL) {
    nextleftline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
  return nextleftline_;
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_nextleftline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
  clear_has_nextleftline();
  ::atd::meprocess::LineParam* temp = nextleftline_;
  nextleftline_ = NULL;
  return temp;
}
inline void Dt_Record_Lane_Support::set_allocated_nextleftline(::atd::meprocess::LineParam* nextleftline) {
  delete nextleftline_;
  nextleftline_ = nextleftline;
  if (nextleftline) {
    set_has_nextleftline();
  } else {
    clear_has_nextleftline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.NextLeftLine)
}

// optional .atd.meprocess.LineParam NextRightLine = 11;
inline bool Dt_Record_Lane_Support::has_nextrightline() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Dt_Record_Lane_Support::set_has_nextrightline() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Dt_Record_Lane_Support::clear_has_nextrightline() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Dt_Record_Lane_Support::clear_nextrightline() {
  if (nextrightline_ != NULL) nextrightline_->::atd::meprocess::LineParam::Clear();
  clear_has_nextrightline();
}
inline const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::nextrightline() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
  return nextrightline_ != NULL ? *nextrightline_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_nextrightline() {
  set_has_nextrightline();
  if (nextrightline_ == NULL) {
    nextrightline_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
  return nextrightline_;
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::release_nextrightline() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
  clear_has_nextrightline();
  ::atd::meprocess::LineParam* temp = nextrightline_;
  nextrightline_ = NULL;
  return temp;
}
inline void Dt_Record_Lane_Support::set_allocated_nextrightline(::atd::meprocess::LineParam* nextrightline) {
  delete nextrightline_;
  nextrightline_ = nextrightline;
  if (nextrightline) {
    set_has_nextrightline();
  } else {
    clear_has_nextrightline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_Lane_Support.NextRightLine)
}

// repeated .atd.meprocess.LineParam RoleTypeLostAdjacentLine = 12;
inline int Dt_Record_Lane_Support::roletypelostadjacentline_size() const {
  return roletypelostadjacentline_.size();
}
inline void Dt_Record_Lane_Support::clear_roletypelostadjacentline() {
  roletypelostadjacentline_.Clear();
}
inline const ::atd::meprocess::LineParam& Dt_Record_Lane_Support::roletypelostadjacentline(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_.Get(index);
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::mutable_roletypelostadjacentline(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_.Mutable(index);
}
inline ::atd::meprocess::LineParam* Dt_Record_Lane_Support::add_roletypelostadjacentline() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LineParam >*
Dt_Record_Lane_Support::mutable_roletypelostadjacentline() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return &roletypelostadjacentline_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LineParam >&
Dt_Record_Lane_Support::roletypelostadjacentline() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_Lane_Support.RoleTypeLostAdjacentLine)
  return roletypelostadjacentline_;
}

// -------------------------------------------------------------------

// LS_Host_Line

// optional bool valid = 1;
inline bool LS_Host_Line::has_valid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LS_Host_Line::set_has_valid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LS_Host_Line::clear_has_valid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LS_Host_Line::clear_valid() {
  valid_ = false;
  clear_has_valid();
}
inline bool LS_Host_Line::valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.valid)
  return valid_;
}
inline void LS_Host_Line::set_valid(bool value) {
  set_has_valid();
  valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.valid)
}

// optional int32 track_id = 2;
inline bool LS_Host_Line::has_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LS_Host_Line::set_has_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LS_Host_Line::clear_has_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LS_Host_Line::clear_track_id() {
  track_id_ = 0;
  clear_has_track_id();
}
inline ::google::protobuf::int32 LS_Host_Line::track_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.track_id)
  return track_id_;
}
inline void LS_Host_Line::set_track_id(::google::protobuf::int32 value) {
  set_has_track_id();
  track_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.track_id)
}

// optional int32 age = 3;
inline bool LS_Host_Line::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LS_Host_Line::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LS_Host_Line::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LS_Host_Line::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 LS_Host_Line::age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.age)
  return age_;
}
inline void LS_Host_Line::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.age)
}

// optional float existence_probability = 4;
inline bool LS_Host_Line::has_existence_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LS_Host_Line::set_has_existence_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LS_Host_Line::clear_has_existence_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LS_Host_Line::clear_existence_probability() {
  existence_probability_ = 0;
  clear_has_existence_probability();
}
inline float LS_Host_Line::existence_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.existence_probability)
  return existence_probability_;
}
inline void LS_Host_Line::set_existence_probability(float value) {
  set_has_existence_probability();
  existence_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.existence_probability)
}

// optional .atd.meprocess.LS_Host_Line.ColorType color = 5;
inline bool LS_Host_Line::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LS_Host_Line::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LS_Host_Line::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LS_Host_Line::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::atd::meprocess::LS_Host_Line_ColorType LS_Host_Line::color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.color)
  return static_cast< ::atd::meprocess::LS_Host_Line_ColorType >(color_);
}
inline void LS_Host_Line::set_color(::atd::meprocess::LS_Host_Line_ColorType value) {
  assert(::atd::meprocess::LS_Host_Line_ColorType_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.color)
}

// optional int32 prediction_type = 6;
inline bool LS_Host_Line::has_prediction_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LS_Host_Line::set_has_prediction_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LS_Host_Line::clear_has_prediction_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LS_Host_Line::clear_prediction_type() {
  prediction_type_ = 0;
  clear_has_prediction_type();
}
inline ::google::protobuf::int32 LS_Host_Line::prediction_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.prediction_type)
  return prediction_type_;
}
inline void LS_Host_Line::set_prediction_type(::google::protobuf::int32 value) {
  set_has_prediction_type();
  prediction_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.prediction_type)
}

// optional bool reserved_1 = 7;
inline bool LS_Host_Line::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LS_Host_Line::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LS_Host_Line::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LS_Host_Line::clear_reserved_1() {
  reserved_1_ = false;
  clear_has_reserved_1();
}
inline bool LS_Host_Line::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_1)
  return reserved_1_;
}
inline void LS_Host_Line::set_reserved_1(bool value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_1)
}

// optional .atd.meprocess.LS_Host_Line.Type_classificationType type_classification = 8;
inline bool LS_Host_Line::has_type_classification() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LS_Host_Line::set_has_type_classification() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LS_Host_Line::clear_has_type_classification() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LS_Host_Line::clear_type_classification() {
  type_classification_ = 0;
  clear_has_type_classification();
}
inline ::atd::meprocess::LS_Host_Line_Type_classificationType LS_Host_Line::type_classification() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.type_classification)
  return static_cast< ::atd::meprocess::LS_Host_Line_Type_classificationType >(type_classification_);
}
inline void LS_Host_Line::set_type_classification(::atd::meprocess::LS_Host_Line_Type_classificationType value) {
  assert(::atd::meprocess::LS_Host_Line_Type_classificationType_IsValid(value));
  set_has_type_classification();
  type_classification_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.type_classification)
}

// optional .atd.meprocess.LS_Host_Line.Dlm_typeType dlm_type = 9;
inline bool LS_Host_Line::has_dlm_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LS_Host_Line::set_has_dlm_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LS_Host_Line::clear_has_dlm_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LS_Host_Line::clear_dlm_type() {
  dlm_type_ = 0;
  clear_has_dlm_type();
}
inline ::atd::meprocess::LS_Host_Line_Dlm_typeType LS_Host_Line::dlm_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.dlm_type)
  return static_cast< ::atd::meprocess::LS_Host_Line_Dlm_typeType >(dlm_type_);
}
inline void LS_Host_Line::set_dlm_type(::atd::meprocess::LS_Host_Line_Dlm_typeType value) {
  assert(::atd::meprocess::LS_Host_Line_Dlm_typeType_IsValid(value));
  set_has_dlm_type();
  dlm_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.dlm_type)
}

// optional .atd.meprocess.LS_Host_Line.Decel_typeType decel_type = 10;
inline bool LS_Host_Line::has_decel_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LS_Host_Line::set_has_decel_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LS_Host_Line::clear_has_decel_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LS_Host_Line::clear_decel_type() {
  decel_type_ = 0;
  clear_has_decel_type();
}
inline ::atd::meprocess::LS_Host_Line_Decel_typeType LS_Host_Line::decel_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.decel_type)
  return static_cast< ::atd::meprocess::LS_Host_Line_Decel_typeType >(decel_type_);
}
inline void LS_Host_Line::set_decel_type(::atd::meprocess::LS_Host_Line_Decel_typeType value) {
  assert(::atd::meprocess::LS_Host_Line_Decel_typeType_IsValid(value));
  set_has_decel_type();
  decel_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.decel_type)
}

// optional float view_range_start = 11;
inline bool LS_Host_Line::has_view_range_start() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LS_Host_Line::set_has_view_range_start() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LS_Host_Line::clear_has_view_range_start() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LS_Host_Line::clear_view_range_start() {
  view_range_start_ = 0;
  clear_has_view_range_start();
}
inline float LS_Host_Line::view_range_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.view_range_start)
  return view_range_start_;
}
inline void LS_Host_Line::set_view_range_start(float value) {
  set_has_view_range_start();
  view_range_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.view_range_start)
}

// optional int32 reserved_2 = 12;
inline bool LS_Host_Line::has_reserved_2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LS_Host_Line::set_has_reserved_2() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LS_Host_Line::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LS_Host_Line::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 LS_Host_Line::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_2)
  return reserved_2_;
}
inline void LS_Host_Line::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_2)
}

// optional float view_range_end = 13;
inline bool LS_Host_Line::has_view_range_end() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LS_Host_Line::set_has_view_range_end() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LS_Host_Line::clear_has_view_range_end() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LS_Host_Line::clear_view_range_end() {
  view_range_end_ = 0;
  clear_has_view_range_end();
}
inline float LS_Host_Line::view_range_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.view_range_end)
  return view_range_end_;
}
inline void LS_Host_Line::set_view_range_end(float value) {
  set_has_view_range_end();
  view_range_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.view_range_end)
}

// optional bool crossing = 14;
inline bool LS_Host_Line::has_crossing() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LS_Host_Line::set_has_crossing() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LS_Host_Line::clear_has_crossing() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LS_Host_Line::clear_crossing() {
  crossing_ = false;
  clear_has_crossing();
}
inline bool LS_Host_Line::crossing() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.crossing)
  return crossing_;
}
inline void LS_Host_Line::set_crossing(bool value) {
  set_has_crossing();
  crossing_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.crossing)
}

// optional float marker_width = 15;
inline bool LS_Host_Line::has_marker_width() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LS_Host_Line::set_has_marker_width() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LS_Host_Line::clear_has_marker_width() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LS_Host_Line::clear_marker_width() {
  marker_width_ = 0;
  clear_has_marker_width();
}
inline float LS_Host_Line::marker_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.marker_width)
  return marker_width_;
}
inline void LS_Host_Line::set_marker_width(float value) {
  set_has_marker_width();
  marker_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.marker_width)
}

// optional float marker_width_std = 16;
inline bool LS_Host_Line::has_marker_width_std() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LS_Host_Line::set_has_marker_width_std() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LS_Host_Line::clear_has_marker_width_std() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LS_Host_Line::clear_marker_width_std() {
  marker_width_std_ = 0;
  clear_has_marker_width_std();
}
inline float LS_Host_Line::marker_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.marker_width_std)
  return marker_width_std_;
}
inline void LS_Host_Line::set_marker_width_std(float value) {
  set_has_marker_width_std();
  marker_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.marker_width_std)
}

// optional bool reserved_3 = 17;
inline bool LS_Host_Line::has_reserved_3() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LS_Host_Line::set_has_reserved_3() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LS_Host_Line::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LS_Host_Line::clear_reserved_3() {
  reserved_3_ = false;
  clear_has_reserved_3();
}
inline bool LS_Host_Line::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_3)
  return reserved_3_;
}
inline void LS_Host_Line::set_reserved_3(bool value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_3)
}

// optional float dash_average_length = 18;
inline bool LS_Host_Line::has_dash_average_length() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LS_Host_Line::set_has_dash_average_length() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LS_Host_Line::clear_has_dash_average_length() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LS_Host_Line::clear_dash_average_length() {
  dash_average_length_ = 0;
  clear_has_dash_average_length();
}
inline float LS_Host_Line::dash_average_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.dash_average_length)
  return dash_average_length_;
}
inline void LS_Host_Line::set_dash_average_length(float value) {
  set_has_dash_average_length();
  dash_average_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.dash_average_length)
}

// optional float dash_average_gap = 19;
inline bool LS_Host_Line::has_dash_average_gap() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LS_Host_Line::set_has_dash_average_gap() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LS_Host_Line::clear_has_dash_average_gap() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LS_Host_Line::clear_dash_average_gap() {
  dash_average_gap_ = 0;
  clear_has_dash_average_gap();
}
inline float LS_Host_Line::dash_average_gap() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.dash_average_gap)
  return dash_average_gap_;
}
inline void LS_Host_Line::set_dash_average_gap(float value) {
  set_has_dash_average_gap();
  dash_average_gap_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.dash_average_gap)
}

// optional int32 reserved_4 = 20;
inline bool LS_Host_Line::has_reserved_4() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LS_Host_Line::set_has_reserved_4() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LS_Host_Line::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LS_Host_Line::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
inline ::google::protobuf::int32 LS_Host_Line::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_4)
  return reserved_4_;
}
inline void LS_Host_Line::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_4)
}

// optional float line_c0 = 21;
inline bool LS_Host_Line::has_line_c0() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LS_Host_Line::set_has_line_c0() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LS_Host_Line::clear_has_line_c0() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LS_Host_Line::clear_line_c0() {
  line_c0_ = 0;
  clear_has_line_c0();
}
inline float LS_Host_Line::line_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c0)
  return line_c0_;
}
inline void LS_Host_Line::set_line_c0(float value) {
  set_has_line_c0();
  line_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c0)
}

// optional float line_c0_std = 22;
inline bool LS_Host_Line::has_line_c0_std() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LS_Host_Line::set_has_line_c0_std() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LS_Host_Line::clear_has_line_c0_std() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LS_Host_Line::clear_line_c0_std() {
  line_c0_std_ = 0;
  clear_has_line_c0_std();
}
inline float LS_Host_Line::line_c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c0_std)
  return line_c0_std_;
}
inline void LS_Host_Line::set_line_c0_std(float value) {
  set_has_line_c0_std();
  line_c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c0_std)
}

// optional int32 reserved_5 = 23;
inline bool LS_Host_Line::has_reserved_5() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LS_Host_Line::set_has_reserved_5() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LS_Host_Line::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LS_Host_Line::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
inline ::google::protobuf::int32 LS_Host_Line::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_5)
  return reserved_5_;
}
inline void LS_Host_Line::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_5)
}

// optional float estimated_width = 24;
inline bool LS_Host_Line::has_estimated_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LS_Host_Line::set_has_estimated_width() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LS_Host_Line::clear_has_estimated_width() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LS_Host_Line::clear_estimated_width() {
  estimated_width_ = 0;
  clear_has_estimated_width();
}
inline float LS_Host_Line::estimated_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.estimated_width)
  return estimated_width_;
}
inline void LS_Host_Line::set_estimated_width(float value) {
  set_has_estimated_width();
  estimated_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.estimated_width)
}

// optional float line_c1 = 25;
inline bool LS_Host_Line::has_line_c1() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LS_Host_Line::set_has_line_c1() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LS_Host_Line::clear_has_line_c1() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LS_Host_Line::clear_line_c1() {
  line_c1_ = 0;
  clear_has_line_c1();
}
inline float LS_Host_Line::line_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c1)
  return line_c1_;
}
inline void LS_Host_Line::set_line_c1(float value) {
  set_has_line_c1();
  line_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c1)
}

// optional float line_c1_std = 26;
inline bool LS_Host_Line::has_line_c1_std() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LS_Host_Line::set_has_line_c1_std() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LS_Host_Line::clear_has_line_c1_std() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LS_Host_Line::clear_line_c1_std() {
  line_c1_std_ = 0;
  clear_has_line_c1_std();
}
inline float LS_Host_Line::line_c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c1_std)
  return line_c1_std_;
}
inline void LS_Host_Line::set_line_c1_std(float value) {
  set_has_line_c1_std();
  line_c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c1_std)
}

// optional bool reserved_6 = 27;
inline bool LS_Host_Line::has_reserved_6() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LS_Host_Line::set_has_reserved_6() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LS_Host_Line::clear_has_reserved_6() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LS_Host_Line::clear_reserved_6() {
  reserved_6_ = false;
  clear_has_reserved_6();
}
inline bool LS_Host_Line::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.reserved_6)
  return reserved_6_;
}
inline void LS_Host_Line::set_reserved_6(bool value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.reserved_6)
}

// optional double line_c2 = 28;
inline bool LS_Host_Line::has_line_c2() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LS_Host_Line::set_has_line_c2() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LS_Host_Line::clear_has_line_c2() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LS_Host_Line::clear_line_c2() {
  line_c2_ = 0;
  clear_has_line_c2();
}
inline double LS_Host_Line::line_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c2)
  return line_c2_;
}
inline void LS_Host_Line::set_line_c2(double value) {
  set_has_line_c2();
  line_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c2)
}

// optional double line_c2_std = 29;
inline bool LS_Host_Line::has_line_c2_std() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LS_Host_Line::set_has_line_c2_std() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LS_Host_Line::clear_has_line_c2_std() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LS_Host_Line::clear_line_c2_std() {
  line_c2_std_ = 0;
  clear_has_line_c2_std();
}
inline double LS_Host_Line::line_c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c2_std)
  return line_c2_std_;
}
inline void LS_Host_Line::set_line_c2_std(double value) {
  set_has_line_c2_std();
  line_c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c2_std)
}

// optional double line_c3 = 30;
inline bool LS_Host_Line::has_line_c3() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void LS_Host_Line::set_has_line_c3() {
  _has_bits_[0] |= 0x20000000u;
}
inline void LS_Host_Line::clear_has_line_c3() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void LS_Host_Line::clear_line_c3() {
  line_c3_ = 0;
  clear_has_line_c3();
}
inline double LS_Host_Line::line_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c3)
  return line_c3_;
}
inline void LS_Host_Line::set_line_c3(double value) {
  set_has_line_c3();
  line_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c3)
}

// optional double line_c3_std = 31;
inline bool LS_Host_Line::has_line_c3_std() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void LS_Host_Line::set_has_line_c3_std() {
  _has_bits_[0] |= 0x40000000u;
}
inline void LS_Host_Line::clear_has_line_c3_std() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void LS_Host_Line::clear_line_c3_std() {
  line_c3_std_ = 0;
  clear_has_line_c3_std();
}
inline double LS_Host_Line::line_c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Host_Line.line_c3_std)
  return line_c3_std_;
}
inline void LS_Host_Line::set_line_c3_std(double value) {
  set_has_line_c3_std();
  line_c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Host_Line.line_c3_std)
}

// -------------------------------------------------------------------

// LS_Adjacent_Line

// optional int32 lane_track_id = 1;
inline bool LS_Adjacent_Line::has_lane_track_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LS_Adjacent_Line::set_has_lane_track_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LS_Adjacent_Line::clear_has_lane_track_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LS_Adjacent_Line::clear_lane_track_id() {
  lane_track_id_ = 0;
  clear_has_lane_track_id();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::lane_track_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.lane_track_id)
  return lane_track_id_;
}
inline void LS_Adjacent_Line::set_lane_track_id(::google::protobuf::int32 value) {
  set_has_lane_track_id();
  lane_track_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.lane_track_id)
}

// optional int32 age = 2;
inline bool LS_Adjacent_Line::has_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LS_Adjacent_Line::set_has_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LS_Adjacent_Line::clear_has_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LS_Adjacent_Line::clear_age() {
  age_ = 0;
  clear_has_age();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.age)
  return age_;
}
inline void LS_Adjacent_Line::set_age(::google::protobuf::int32 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.age)
}

// optional float exist_probability = 3;
inline bool LS_Adjacent_Line::has_exist_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LS_Adjacent_Line::set_has_exist_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LS_Adjacent_Line::clear_has_exist_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LS_Adjacent_Line::clear_exist_probability() {
  exist_probability_ = 0;
  clear_has_exist_probability();
}
inline float LS_Adjacent_Line::exist_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.exist_probability)
  return exist_probability_;
}
inline void LS_Adjacent_Line::set_exist_probability(float value) {
  set_has_exist_probability();
  exist_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.exist_probability)
}

// optional .atd.meprocess.LS_Adjacent_Line.ColorType color = 4;
inline bool LS_Adjacent_Line::has_color() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LS_Adjacent_Line::set_has_color() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LS_Adjacent_Line::clear_has_color() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LS_Adjacent_Line::clear_color() {
  color_ = 0;
  clear_has_color();
}
inline ::atd::meprocess::LS_Adjacent_Line_ColorType LS_Adjacent_Line::color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.color)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_ColorType >(color_);
}
inline void LS_Adjacent_Line::set_color(::atd::meprocess::LS_Adjacent_Line_ColorType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_ColorType_IsValid(value));
  set_has_color();
  color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.color)
}

// optional int32 prediction_type = 5;
inline bool LS_Adjacent_Line::has_prediction_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LS_Adjacent_Line::set_has_prediction_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LS_Adjacent_Line::clear_has_prediction_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LS_Adjacent_Line::clear_prediction_type() {
  prediction_type_ = 0;
  clear_has_prediction_type();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::prediction_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.prediction_type)
  return prediction_type_;
}
inline void LS_Adjacent_Line::set_prediction_type(::google::protobuf::int32 value) {
  set_has_prediction_type();
  prediction_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.prediction_type)
}

// optional int32 reserved_13 = 6;
inline bool LS_Adjacent_Line::has_reserved_13() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LS_Adjacent_Line::set_has_reserved_13() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LS_Adjacent_Line::clear_has_reserved_13() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LS_Adjacent_Line::clear_reserved_13() {
  reserved_13_ = 0;
  clear_has_reserved_13();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::reserved_13() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_13)
  return reserved_13_;
}
inline void LS_Adjacent_Line::set_reserved_13(::google::protobuf::int32 value) {
  set_has_reserved_13();
  reserved_13_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_13)
}

// optional float view_range_start = 7;
inline bool LS_Adjacent_Line::has_view_range_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LS_Adjacent_Line::set_has_view_range_start() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LS_Adjacent_Line::clear_has_view_range_start() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LS_Adjacent_Line::clear_view_range_start() {
  view_range_start_ = 0;
  clear_has_view_range_start();
}
inline float LS_Adjacent_Line::view_range_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.view_range_start)
  return view_range_start_;
}
inline void LS_Adjacent_Line::set_view_range_start(float value) {
  set_has_view_range_start();
  view_range_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.view_range_start)
}

// optional float view_range_end = 8;
inline bool LS_Adjacent_Line::has_view_range_end() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LS_Adjacent_Line::set_has_view_range_end() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LS_Adjacent_Line::clear_has_view_range_end() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LS_Adjacent_Line::clear_view_range_end() {
  view_range_end_ = 0;
  clear_has_view_range_end();
}
inline float LS_Adjacent_Line::view_range_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.view_range_end)
  return view_range_end_;
}
inline void LS_Adjacent_Line::set_view_range_end(float value) {
  set_has_view_range_end();
  view_range_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.view_range_end)
}

// optional int32 reserved_14 = 9;
inline bool LS_Adjacent_Line::has_reserved_14() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LS_Adjacent_Line::set_has_reserved_14() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LS_Adjacent_Line::clear_has_reserved_14() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LS_Adjacent_Line::clear_reserved_14() {
  reserved_14_ = 0;
  clear_has_reserved_14();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::reserved_14() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_14)
  return reserved_14_;
}
inline void LS_Adjacent_Line::set_reserved_14(::google::protobuf::int32 value) {
  set_has_reserved_14();
  reserved_14_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_14)
}

// optional .atd.meprocess.LS_Adjacent_Line.Type_classType type_class = 10;
inline bool LS_Adjacent_Line::has_type_class() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LS_Adjacent_Line::set_has_type_class() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LS_Adjacent_Line::clear_has_type_class() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LS_Adjacent_Line::clear_type_class() {
  type_class_ = 0;
  clear_has_type_class();
}
inline ::atd::meprocess::LS_Adjacent_Line_Type_classType LS_Adjacent_Line::type_class() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.type_class)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Type_classType >(type_class_);
}
inline void LS_Adjacent_Line::set_type_class(::atd::meprocess::LS_Adjacent_Line_Type_classType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Type_classType_IsValid(value));
  set_has_type_class();
  type_class_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.type_class)
}

// optional .atd.meprocess.LS_Adjacent_Line.Dlm_typeType dlm_type = 11;
inline bool LS_Adjacent_Line::has_dlm_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LS_Adjacent_Line::set_has_dlm_type() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LS_Adjacent_Line::clear_has_dlm_type() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LS_Adjacent_Line::clear_dlm_type() {
  dlm_type_ = 0;
  clear_has_dlm_type();
}
inline ::atd::meprocess::LS_Adjacent_Line_Dlm_typeType LS_Adjacent_Line::dlm_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.dlm_type)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Dlm_typeType >(dlm_type_);
}
inline void LS_Adjacent_Line::set_dlm_type(::atd::meprocess::LS_Adjacent_Line_Dlm_typeType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Dlm_typeType_IsValid(value));
  set_has_dlm_type();
  dlm_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.dlm_type)
}

// optional .atd.meprocess.LS_Adjacent_Line.Decel_typeType decel_type = 12;
inline bool LS_Adjacent_Line::has_decel_type() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LS_Adjacent_Line::set_has_decel_type() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LS_Adjacent_Line::clear_has_decel_type() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LS_Adjacent_Line::clear_decel_type() {
  decel_type_ = 0;
  clear_has_decel_type();
}
inline ::atd::meprocess::LS_Adjacent_Line_Decel_typeType LS_Adjacent_Line::decel_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.decel_type)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Decel_typeType >(decel_type_);
}
inline void LS_Adjacent_Line::set_decel_type(::atd::meprocess::LS_Adjacent_Line_Decel_typeType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Decel_typeType_IsValid(value));
  set_has_decel_type();
  decel_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.decel_type)
}

// optional .atd.meprocess.LS_Adjacent_Line.Line_roleType line_role = 13;
inline bool LS_Adjacent_Line::has_line_role() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_role() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LS_Adjacent_Line::clear_has_line_role() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LS_Adjacent_Line::clear_line_role() {
  line_role_ = 0;
  clear_has_line_role();
}
inline ::atd::meprocess::LS_Adjacent_Line_Line_roleType LS_Adjacent_Line::line_role() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_role)
  return static_cast< ::atd::meprocess::LS_Adjacent_Line_Line_roleType >(line_role_);
}
inline void LS_Adjacent_Line::set_line_role(::atd::meprocess::LS_Adjacent_Line_Line_roleType value) {
  assert(::atd::meprocess::LS_Adjacent_Line_Line_roleType_IsValid(value));
  set_has_line_role();
  line_role_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_role)
}

// optional float marker_width = 14;
inline bool LS_Adjacent_Line::has_marker_width() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LS_Adjacent_Line::set_has_marker_width() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LS_Adjacent_Line::clear_has_marker_width() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LS_Adjacent_Line::clear_marker_width() {
  marker_width_ = 0;
  clear_has_marker_width();
}
inline float LS_Adjacent_Line::marker_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.marker_width)
  return marker_width_;
}
inline void LS_Adjacent_Line::set_marker_width(float value) {
  set_has_marker_width();
  marker_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.marker_width)
}

// optional float marker_width_std = 15;
inline bool LS_Adjacent_Line::has_marker_width_std() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LS_Adjacent_Line::set_has_marker_width_std() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LS_Adjacent_Line::clear_has_marker_width_std() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LS_Adjacent_Line::clear_marker_width_std() {
  marker_width_std_ = 0;
  clear_has_marker_width_std();
}
inline float LS_Adjacent_Line::marker_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.marker_width_std)
  return marker_width_std_;
}
inline void LS_Adjacent_Line::set_marker_width_std(float value) {
  set_has_marker_width_std();
  marker_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.marker_width_std)
}

// optional int32 reserved_15 = 16;
inline bool LS_Adjacent_Line::has_reserved_15() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LS_Adjacent_Line::set_has_reserved_15() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LS_Adjacent_Line::clear_has_reserved_15() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LS_Adjacent_Line::clear_reserved_15() {
  reserved_15_ = 0;
  clear_has_reserved_15();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::reserved_15() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_15)
  return reserved_15_;
}
inline void LS_Adjacent_Line::set_reserved_15(::google::protobuf::int32 value) {
  set_has_reserved_15();
  reserved_15_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_15)
}

// optional float dash_avg_length = 17;
inline bool LS_Adjacent_Line::has_dash_avg_length() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LS_Adjacent_Line::set_has_dash_avg_length() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LS_Adjacent_Line::clear_has_dash_avg_length() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LS_Adjacent_Line::clear_dash_avg_length() {
  dash_avg_length_ = 0;
  clear_has_dash_avg_length();
}
inline float LS_Adjacent_Line::dash_avg_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.dash_avg_length)
  return dash_avg_length_;
}
inline void LS_Adjacent_Line::set_dash_avg_length(float value) {
  set_has_dash_avg_length();
  dash_avg_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.dash_avg_length)
}

// optional float dash_avg_gap = 18;
inline bool LS_Adjacent_Line::has_dash_avg_gap() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LS_Adjacent_Line::set_has_dash_avg_gap() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LS_Adjacent_Line::clear_has_dash_avg_gap() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LS_Adjacent_Line::clear_dash_avg_gap() {
  dash_avg_gap_ = 0;
  clear_has_dash_avg_gap();
}
inline float LS_Adjacent_Line::dash_avg_gap() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.dash_avg_gap)
  return dash_avg_gap_;
}
inline void LS_Adjacent_Line::set_dash_avg_gap(float value) {
  set_has_dash_avg_gap();
  dash_avg_gap_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.dash_avg_gap)
}

// optional int32 reserved_16 = 19;
inline bool LS_Adjacent_Line::has_reserved_16() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void LS_Adjacent_Line::set_has_reserved_16() {
  _has_bits_[0] |= 0x00100000u;
}
inline void LS_Adjacent_Line::clear_has_reserved_16() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void LS_Adjacent_Line::clear_reserved_16() {
  reserved_16_ = 0;
  clear_has_reserved_16();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::reserved_16() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_16)
  return reserved_16_;
}
inline void LS_Adjacent_Line::set_reserved_16(::google::protobuf::int32 value) {
  set_has_reserved_16();
  reserved_16_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_16)
}

// optional double line_c3 = 20;
inline bool LS_Adjacent_Line::has_line_c3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LS_Adjacent_Line::clear_has_line_c3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LS_Adjacent_Line::clear_line_c3() {
  line_c3_ = 0;
  clear_has_line_c3();
}
inline double LS_Adjacent_Line::line_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c3)
  return line_c3_;
}
inline void LS_Adjacent_Line::set_line_c3(double value) {
  set_has_line_c3();
  line_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c3)
}

// optional double line_c3_std = 21;
inline bool LS_Adjacent_Line::has_line_c3_std() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c3_std() {
  _has_bits_[0] |= 0x00080000u;
}
inline void LS_Adjacent_Line::clear_has_line_c3_std() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void LS_Adjacent_Line::clear_line_c3_std() {
  line_c3_std_ = 0;
  clear_has_line_c3_std();
}
inline double LS_Adjacent_Line::line_c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c3_std)
  return line_c3_std_;
}
inline void LS_Adjacent_Line::set_line_c3_std(double value) {
  set_has_line_c3_std();
  line_c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c3_std)
}

// optional double line_c2 = 22;
inline bool LS_Adjacent_Line::has_line_c2() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c2() {
  _has_bits_[0] |= 0x00400000u;
}
inline void LS_Adjacent_Line::clear_has_line_c2() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void LS_Adjacent_Line::clear_line_c2() {
  line_c2_ = 0;
  clear_has_line_c2();
}
inline double LS_Adjacent_Line::line_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c2)
  return line_c2_;
}
inline void LS_Adjacent_Line::set_line_c2(double value) {
  set_has_line_c2();
  line_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c2)
}

// optional double line_c2_std = 23;
inline bool LS_Adjacent_Line::has_line_c2_std() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c2_std() {
  _has_bits_[0] |= 0x00800000u;
}
inline void LS_Adjacent_Line::clear_has_line_c2_std() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void LS_Adjacent_Line::clear_line_c2_std() {
  line_c2_std_ = 0;
  clear_has_line_c2_std();
}
inline double LS_Adjacent_Line::line_c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c2_std)
  return line_c2_std_;
}
inline void LS_Adjacent_Line::set_line_c2_std(double value) {
  set_has_line_c2_std();
  line_c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c2_std)
}

// optional float line_c1 = 24;
inline bool LS_Adjacent_Line::has_line_c1() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c1() {
  _has_bits_[0] |= 0x00200000u;
}
inline void LS_Adjacent_Line::clear_has_line_c1() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void LS_Adjacent_Line::clear_line_c1() {
  line_c1_ = 0;
  clear_has_line_c1();
}
inline float LS_Adjacent_Line::line_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c1)
  return line_c1_;
}
inline void LS_Adjacent_Line::set_line_c1(float value) {
  set_has_line_c1();
  line_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c1)
}

// optional float line_c1_std = 25;
inline bool LS_Adjacent_Line::has_line_c1_std() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c1_std() {
  _has_bits_[0] |= 0x01000000u;
}
inline void LS_Adjacent_Line::clear_has_line_c1_std() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void LS_Adjacent_Line::clear_line_c1_std() {
  line_c1_std_ = 0;
  clear_has_line_c1_std();
}
inline float LS_Adjacent_Line::line_c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c1_std)
  return line_c1_std_;
}
inline void LS_Adjacent_Line::set_line_c1_std(float value) {
  set_has_line_c1_std();
  line_c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c1_std)
}

// optional int32 reserved_17 = 26;
inline bool LS_Adjacent_Line::has_reserved_17() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void LS_Adjacent_Line::set_has_reserved_17() {
  _has_bits_[0] |= 0x02000000u;
}
inline void LS_Adjacent_Line::clear_has_reserved_17() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void LS_Adjacent_Line::clear_reserved_17() {
  reserved_17_ = 0;
  clear_has_reserved_17();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::reserved_17() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.reserved_17)
  return reserved_17_;
}
inline void LS_Adjacent_Line::set_reserved_17(::google::protobuf::int32 value) {
  set_has_reserved_17();
  reserved_17_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.reserved_17)
}

// optional float line_c0 = 27;
inline bool LS_Adjacent_Line::has_line_c0() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c0() {
  _has_bits_[0] |= 0x04000000u;
}
inline void LS_Adjacent_Line::clear_has_line_c0() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void LS_Adjacent_Line::clear_line_c0() {
  line_c0_ = 0;
  clear_has_line_c0();
}
inline float LS_Adjacent_Line::line_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c0)
  return line_c0_;
}
inline void LS_Adjacent_Line::set_line_c0(float value) {
  set_has_line_c0();
  line_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c0)
}

// optional float line_c0_std = 28;
inline bool LS_Adjacent_Line::has_line_c0_std() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void LS_Adjacent_Line::set_has_line_c0_std() {
  _has_bits_[0] |= 0x08000000u;
}
inline void LS_Adjacent_Line::clear_has_line_c0_std() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void LS_Adjacent_Line::clear_line_c0_std() {
  line_c0_std_ = 0;
  clear_has_line_c0_std();
}
inline float LS_Adjacent_Line::line_c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.line_c0_std)
  return line_c0_std_;
}
inline void LS_Adjacent_Line::set_line_c0_std(float value) {
  set_has_line_c0_std();
  line_c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.line_c0_std)
}

// optional int32 buffer = 29;
inline bool LS_Adjacent_Line::has_buffer() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void LS_Adjacent_Line::set_has_buffer() {
  _has_bits_[0] |= 0x10000000u;
}
inline void LS_Adjacent_Line::clear_has_buffer() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void LS_Adjacent_Line::clear_buffer() {
  buffer_ = 0;
  clear_has_buffer();
}
inline ::google::protobuf::int32 LS_Adjacent_Line::buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_Adjacent_Line.buffer)
  return buffer_;
}
inline void LS_Adjacent_Line::set_buffer(::google::protobuf::int32 value) {
  set_has_buffer();
  buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_Adjacent_Line.buffer)
}

// -------------------------------------------------------------------

// ADVCommon

// optional int32 ls_adv_zero_byte = 1;
inline bool ADVCommon::has_ls_adv_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ADVCommon::set_has_ls_adv_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ADVCommon::clear_has_ls_adv_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ADVCommon::clear_ls_adv_zero_byte() {
  ls_adv_zero_byte_ = 0;
  clear_has_ls_adv_zero_byte();
}
inline ::google::protobuf::int32 ADVCommon::ls_adv_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_adv_zero_byte)
  return ls_adv_zero_byte_;
}
inline void ADVCommon::set_ls_adv_zero_byte(::google::protobuf::int32 value) {
  set_has_ls_adv_zero_byte();
  ls_adv_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_adv_zero_byte)
}

// optional int32 ls_adv_protocol_version = 2;
inline bool ADVCommon::has_ls_adv_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ADVCommon::set_has_ls_adv_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ADVCommon::clear_has_ls_adv_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ADVCommon::clear_ls_adv_protocol_version() {
  ls_adv_protocol_version_ = 0;
  clear_has_ls_adv_protocol_version();
}
inline ::google::protobuf::int32 ADVCommon::ls_adv_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_adv_protocol_version)
  return ls_adv_protocol_version_;
}
inline void ADVCommon::set_ls_adv_protocol_version(::google::protobuf::int32 value) {
  set_has_ls_adv_protocol_version();
  ls_adv_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_adv_protocol_version)
}

// optional int32 ls_adv__sync_id = 3;
inline bool ADVCommon::has_ls_adv__sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ADVCommon::set_has_ls_adv__sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ADVCommon::clear_has_ls_adv__sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ADVCommon::clear_ls_adv__sync_id() {
  ls_adv__sync_id_ = 0;
  clear_has_ls_adv__sync_id();
}
inline ::google::protobuf::int32 ADVCommon::ls_adv__sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_adv__sync_id)
  return ls_adv__sync_id_;
}
inline void ADVCommon::set_ls_adv__sync_id(::google::protobuf::int32 value) {
  set_has_ls_adv__sync_id();
  ls_adv__sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_adv__sync_id)
}

// optional int32 ls_intp_number = 4;
inline bool ADVCommon::has_ls_intp_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ADVCommon::set_has_ls_intp_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ADVCommon::clear_has_ls_intp_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ADVCommon::clear_ls_intp_number() {
  ls_intp_number_ = 0;
  clear_has_ls_intp_number();
}
inline ::google::protobuf::int32 ADVCommon::ls_intp_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_number)
  return ls_intp_number_;
}
inline void ADVCommon::set_ls_intp_number(::google::protobuf::int32 value) {
  set_has_ls_intp_number();
  ls_intp_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_number)
}

// optional bool ls_ca_is_construction_area = 5;
inline bool ADVCommon::has_ls_ca_is_construction_area() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ADVCommon::set_has_ls_ca_is_construction_area() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ADVCommon::clear_has_ls_ca_is_construction_area() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ADVCommon::clear_ls_ca_is_construction_area() {
  ls_ca_is_construction_area_ = false;
  clear_has_ls_ca_is_construction_area();
}
inline bool ADVCommon::ls_ca_is_construction_area() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_ca_is_construction_area)
  return ls_ca_is_construction_area_;
}
inline void ADVCommon::set_ls_ca_is_construction_area(bool value) {
  set_has_ls_ca_is_construction_area();
  ls_ca_is_construction_area_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_ca_is_construction_area)
}

// optional bool ls_road_vertical_surface_valid = 6;
inline bool ADVCommon::has_ls_road_vertical_surface_valid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ADVCommon::set_has_ls_road_vertical_surface_valid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ADVCommon::clear_has_ls_road_vertical_surface_valid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ADVCommon::clear_ls_road_vertical_surface_valid() {
  ls_road_vertical_surface_valid_ = false;
  clear_has_ls_road_vertical_surface_valid();
}
inline bool ADVCommon::ls_road_vertical_surface_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surface_valid)
  return ls_road_vertical_surface_valid_;
}
inline void ADVCommon::set_ls_road_vertical_surface_valid(bool value) {
  set_has_ls_road_vertical_surface_valid();
  ls_road_vertical_surface_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surface_valid)
}

// optional int32 reserved_1 = 7;
inline bool ADVCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ADVCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ADVCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ADVCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 ADVCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_1)
  return reserved_1_;
}
inline void ADVCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_1)
}

// optional int32 ls_road_vertical_surface_vr = 8;
inline bool ADVCommon::has_ls_road_vertical_surface_vr() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ADVCommon::set_has_ls_road_vertical_surface_vr() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ADVCommon::clear_has_ls_road_vertical_surface_vr() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ADVCommon::clear_ls_road_vertical_surface_vr() {
  ls_road_vertical_surface_vr_ = 0;
  clear_has_ls_road_vertical_surface_vr();
}
inline ::google::protobuf::int32 ADVCommon::ls_road_vertical_surface_vr() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surface_vr)
  return ls_road_vertical_surface_vr_;
}
inline void ADVCommon::set_ls_road_vertical_surface_vr(::google::protobuf::int32 value) {
  set_has_ls_road_vertical_surface_vr();
  ls_road_vertical_surface_vr_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surface_vr)
}

// optional float ls_road_vertical_surface_c0 = 9;
inline bool ADVCommon::has_ls_road_vertical_surface_c0() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ADVCommon::set_has_ls_road_vertical_surface_c0() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ADVCommon::clear_has_ls_road_vertical_surface_c0() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ADVCommon::clear_ls_road_vertical_surface_c0() {
  ls_road_vertical_surface_c0_ = 0;
  clear_has_ls_road_vertical_surface_c0();
}
inline float ADVCommon::ls_road_vertical_surface_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surface_c0)
  return ls_road_vertical_surface_c0_;
}
inline void ADVCommon::set_ls_road_vertical_surface_c0(float value) {
  set_has_ls_road_vertical_surface_c0();
  ls_road_vertical_surface_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surface_c0)
}

// optional float ls_road_vertical_surfac_c1 = 10;
inline bool ADVCommon::has_ls_road_vertical_surfac_c1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ADVCommon::set_has_ls_road_vertical_surfac_c1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ADVCommon::clear_has_ls_road_vertical_surfac_c1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ADVCommon::clear_ls_road_vertical_surfac_c1() {
  ls_road_vertical_surfac_c1_ = 0;
  clear_has_ls_road_vertical_surfac_c1();
}
inline float ADVCommon::ls_road_vertical_surfac_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c1)
  return ls_road_vertical_surfac_c1_;
}
inline void ADVCommon::set_ls_road_vertical_surfac_c1(float value) {
  set_has_ls_road_vertical_surfac_c1();
  ls_road_vertical_surfac_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c1)
}

// optional int32 reserved_2 = 11;
inline bool ADVCommon::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ADVCommon::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ADVCommon::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ADVCommon::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 ADVCommon::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_2)
  return reserved_2_;
}
inline void ADVCommon::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_2)
}

// optional double ls_road_vertical_surfac_c2 = 12;
inline bool ADVCommon::has_ls_road_vertical_surfac_c2() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ADVCommon::set_has_ls_road_vertical_surfac_c2() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ADVCommon::clear_has_ls_road_vertical_surfac_c2() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ADVCommon::clear_ls_road_vertical_surfac_c2() {
  ls_road_vertical_surfac_c2_ = 0;
  clear_has_ls_road_vertical_surfac_c2();
}
inline double ADVCommon::ls_road_vertical_surfac_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c2)
  return ls_road_vertical_surfac_c2_;
}
inline void ADVCommon::set_ls_road_vertical_surfac_c2(double value) {
  set_has_ls_road_vertical_surfac_c2();
  ls_road_vertical_surfac_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c2)
}

// optional int32 reserved_3 = 13;
inline bool ADVCommon::has_reserved_3() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ADVCommon::set_has_reserved_3() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ADVCommon::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ADVCommon::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
inline ::google::protobuf::int32 ADVCommon::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_3)
  return reserved_3_;
}
inline void ADVCommon::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_3)
}

// optional double ls_road_vertical_surfac_c3 = 14;
inline bool ADVCommon::has_ls_road_vertical_surfac_c3() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ADVCommon::set_has_ls_road_vertical_surfac_c3() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ADVCommon::clear_has_ls_road_vertical_surfac_c3() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ADVCommon::clear_ls_road_vertical_surfac_c3() {
  ls_road_vertical_surfac_c3_ = 0;
  clear_has_ls_road_vertical_surfac_c3();
}
inline double ADVCommon::ls_road_vertical_surfac_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c3)
  return ls_road_vertical_surfac_c3_;
}
inline void ADVCommon::set_ls_road_vertical_surfac_c3(double value) {
  set_has_ls_road_vertical_surfac_c3();
  ls_road_vertical_surfac_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_road_vertical_surfac_c3)
}

// optional bool ls_path_pred_valid = 15;
inline bool ADVCommon::has_ls_path_pred_valid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ADVCommon::set_has_ls_path_pred_valid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ADVCommon::clear_has_ls_path_pred_valid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ADVCommon::clear_ls_path_pred_valid() {
  ls_path_pred_valid_ = false;
  clear_has_ls_path_pred_valid();
}
inline bool ADVCommon::ls_path_pred_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_valid)
  return ls_path_pred_valid_;
}
inline void ADVCommon::set_ls_path_pred_valid(bool value) {
  set_has_ls_path_pred_valid();
  ls_path_pred_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_valid)
}

// optional float ls_path_pred_c0 = 16;
inline bool ADVCommon::has_ls_path_pred_c0() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ADVCommon::set_has_ls_path_pred_c0() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ADVCommon::clear_has_ls_path_pred_c0() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ADVCommon::clear_ls_path_pred_c0() {
  ls_path_pred_c0_ = 0;
  clear_has_ls_path_pred_c0();
}
inline float ADVCommon::ls_path_pred_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c0)
  return ls_path_pred_c0_;
}
inline void ADVCommon::set_ls_path_pred_c0(float value) {
  set_has_ls_path_pred_c0();
  ls_path_pred_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c0)
}

// optional int32 reserved_4 = 17;
inline bool ADVCommon::has_reserved_4() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void ADVCommon::set_has_reserved_4() {
  _has_bits_[0] |= 0x00020000u;
}
inline void ADVCommon::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void ADVCommon::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
inline ::google::protobuf::int32 ADVCommon::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_4)
  return reserved_4_;
}
inline void ADVCommon::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_4)
}

// optional float ls_path_pred_c1 = 18;
inline bool ADVCommon::has_ls_path_pred_c1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void ADVCommon::set_has_ls_path_pred_c1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void ADVCommon::clear_has_ls_path_pred_c1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void ADVCommon::clear_ls_path_pred_c1() {
  ls_path_pred_c1_ = 0;
  clear_has_ls_path_pred_c1();
}
inline float ADVCommon::ls_path_pred_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c1)
  return ls_path_pred_c1_;
}
inline void ADVCommon::set_ls_path_pred_c1(float value) {
  set_has_ls_path_pred_c1();
  ls_path_pred_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c1)
}

// optional double ls_path_pred_c2 = 19;
inline bool ADVCommon::has_ls_path_pred_c2() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void ADVCommon::set_has_ls_path_pred_c2() {
  _has_bits_[0] |= 0x00080000u;
}
inline void ADVCommon::clear_has_ls_path_pred_c2() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void ADVCommon::clear_ls_path_pred_c2() {
  ls_path_pred_c2_ = 0;
  clear_has_ls_path_pred_c2();
}
inline double ADVCommon::ls_path_pred_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c2)
  return ls_path_pred_c2_;
}
inline void ADVCommon::set_ls_path_pred_c2(double value) {
  set_has_ls_path_pred_c2();
  ls_path_pred_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c2)
}

// optional int32 reserved_5 = 20;
inline bool ADVCommon::has_reserved_5() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void ADVCommon::set_has_reserved_5() {
  _has_bits_[0] |= 0x00200000u;
}
inline void ADVCommon::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void ADVCommon::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
inline ::google::protobuf::int32 ADVCommon::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.reserved_5)
  return reserved_5_;
}
inline void ADVCommon::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.reserved_5)
}

// optional double ls_path_pred_c3 = 21;
inline bool ADVCommon::has_ls_path_pred_c3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void ADVCommon::set_has_ls_path_pred_c3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void ADVCommon::clear_has_ls_path_pred_c3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void ADVCommon::clear_ls_path_pred_c3() {
  ls_path_pred_c3_ = 0;
  clear_has_ls_path_pred_c3();
}
inline double ADVCommon::ls_path_pred_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_c3)
  return ls_path_pred_c3_;
}
inline void ADVCommon::set_ls_path_pred_c3(double value) {
  set_has_ls_path_pred_c3();
  ls_path_pred_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_c3)
}

// optional float ls_path_pred_conf = 22;
inline bool ADVCommon::has_ls_path_pred_conf() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void ADVCommon::set_has_ls_path_pred_conf() {
  _has_bits_[0] |= 0x00400000u;
}
inline void ADVCommon::clear_has_ls_path_pred_conf() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void ADVCommon::clear_ls_path_pred_conf() {
  ls_path_pred_conf_ = 0;
  clear_has_ls_path_pred_conf();
}
inline float ADVCommon::ls_path_pred_conf() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_conf)
  return ls_path_pred_conf_;
}
inline void ADVCommon::set_ls_path_pred_conf(float value) {
  set_has_ls_path_pred_conf();
  ls_path_pred_conf_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_conf)
}

// optional float ls_path_pred_half_width = 23;
inline bool ADVCommon::has_ls_path_pred_half_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void ADVCommon::set_has_ls_path_pred_half_width() {
  _has_bits_[0] |= 0x00800000u;
}
inline void ADVCommon::clear_has_ls_path_pred_half_width() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void ADVCommon::clear_ls_path_pred_half_width() {
  ls_path_pred_half_width_ = 0;
  clear_has_ls_path_pred_half_width();
}
inline float ADVCommon::ls_path_pred_half_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_path_pred_half_width)
  return ls_path_pred_half_width_;
}
inline void ADVCommon::set_ls_path_pred_half_width(float value) {
  set_has_ls_path_pred_half_width();
  ls_path_pred_half_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_path_pred_half_width)
}

// optional bool ls_intp_is_highway_merge_left = 24;
inline bool ADVCommon::has_ls_intp_is_highway_merge_left() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ADVCommon::set_has_ls_intp_is_highway_merge_left() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ADVCommon::clear_has_ls_intp_is_highway_merge_left() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ADVCommon::clear_ls_intp_is_highway_merge_left() {
  ls_intp_is_highway_merge_left_ = false;
  clear_has_ls_intp_is_highway_merge_left();
}
inline bool ADVCommon::ls_intp_is_highway_merge_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_left)
  return ls_intp_is_highway_merge_left_;
}
inline void ADVCommon::set_ls_intp_is_highway_merge_left(bool value) {
  set_has_ls_intp_is_highway_merge_left();
  ls_intp_is_highway_merge_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_left)
}

// optional bool ls_intp_is_highway_merge_right = 25;
inline bool ADVCommon::has_ls_intp_is_highway_merge_right() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void ADVCommon::set_has_ls_intp_is_highway_merge_right() {
  _has_bits_[0] |= 0x01000000u;
}
inline void ADVCommon::clear_has_ls_intp_is_highway_merge_right() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void ADVCommon::clear_ls_intp_is_highway_merge_right() {
  ls_intp_is_highway_merge_right_ = false;
  clear_has_ls_intp_is_highway_merge_right();
}
inline bool ADVCommon::ls_intp_is_highway_merge_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_right)
  return ls_intp_is_highway_merge_right_;
}
inline void ADVCommon::set_ls_intp_is_highway_merge_right(bool value) {
  set_has_ls_intp_is_highway_merge_right();
  ls_intp_is_highway_merge_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_merge_right)
}

// optional bool ls_intp_is_highway_exit_left = 26;
inline bool ADVCommon::has_ls_intp_is_highway_exit_left() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void ADVCommon::set_has_ls_intp_is_highway_exit_left() {
  _has_bits_[0] |= 0x02000000u;
}
inline void ADVCommon::clear_has_ls_intp_is_highway_exit_left() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void ADVCommon::clear_ls_intp_is_highway_exit_left() {
  ls_intp_is_highway_exit_left_ = false;
  clear_has_ls_intp_is_highway_exit_left();
}
inline bool ADVCommon::ls_intp_is_highway_exit_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_left)
  return ls_intp_is_highway_exit_left_;
}
inline void ADVCommon::set_ls_intp_is_highway_exit_left(bool value) {
  set_has_ls_intp_is_highway_exit_left();
  ls_intp_is_highway_exit_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_left)
}

// optional bool ls_intp_is_highway_exit_right = 27;
inline bool ADVCommon::has_ls_intp_is_highway_exit_right() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void ADVCommon::set_has_ls_intp_is_highway_exit_right() {
  _has_bits_[0] |= 0x04000000u;
}
inline void ADVCommon::clear_has_ls_intp_is_highway_exit_right() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void ADVCommon::clear_ls_intp_is_highway_exit_right() {
  ls_intp_is_highway_exit_right_ = false;
  clear_has_ls_intp_is_highway_exit_right();
}
inline bool ADVCommon::ls_intp_is_highway_exit_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_right)
  return ls_intp_is_highway_exit_right_;
}
inline void ADVCommon::set_ls_intp_is_highway_exit_right(bool value) {
  set_has_ls_intp_is_highway_exit_right();
  ls_intp_is_highway_exit_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ADVCommon.ls_intp_is_highway_exit_right)
}

// -------------------------------------------------------------------

// Dt_Record_LS_ADV

// optional .atd.common.Header header = 1;
inline bool Dt_Record_LS_ADV::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_LS_ADV::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_LS_ADV::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_LS_ADV::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_LS_ADV::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_LS_ADV::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_LS_ADV::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_ADV.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_LS_ADV::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_ADV.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_LS_ADV::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_LS_ADV::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_LS_ADV::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_LS_ADV::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_LS_ADV::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_LS_ADV::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_LS_ADV::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_LS_ADV::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_ADV.reservedmsg)
}

// optional .atd.meprocess.ADVCommon stadvcommon = 3;
inline bool Dt_Record_LS_ADV::has_stadvcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_LS_ADV::set_has_stadvcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_LS_ADV::clear_has_stadvcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_LS_ADV::clear_stadvcommon() {
  if (stadvcommon_ != NULL) stadvcommon_->::atd::meprocess::ADVCommon::Clear();
  clear_has_stadvcommon();
}
inline const ::atd::meprocess::ADVCommon& Dt_Record_LS_ADV::stadvcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
  return stadvcommon_ != NULL ? *stadvcommon_
                         : *::atd::meprocess::ADVCommon::internal_default_instance();
}
inline ::atd::meprocess::ADVCommon* Dt_Record_LS_ADV::mutable_stadvcommon() {
  set_has_stadvcommon();
  if (stadvcommon_ == NULL) {
    stadvcommon_ = new ::atd::meprocess::ADVCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
  return stadvcommon_;
}
inline ::atd::meprocess::ADVCommon* Dt_Record_LS_ADV::release_stadvcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
  clear_has_stadvcommon();
  ::atd::meprocess::ADVCommon* temp = stadvcommon_;
  stadvcommon_ = NULL;
  return temp;
}
inline void Dt_Record_LS_ADV::set_allocated_stadvcommon(::atd::meprocess::ADVCommon* stadvcommon) {
  delete stadvcommon_;
  stadvcommon_ = stadvcommon;
  if (stadvcommon) {
    set_has_stadvcommon();
  } else {
    clear_has_stadvcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_ADV.stadvcommon)
}

// repeated .atd.meprocess.LS_INTP dt_array_8_ls_intp = 4;
inline int Dt_Record_LS_ADV::dt_array_8_ls_intp_size() const {
  return dt_array_8_ls_intp_.size();
}
inline void Dt_Record_LS_ADV::clear_dt_array_8_ls_intp() {
  dt_array_8_ls_intp_.Clear();
}
inline const ::atd::meprocess::LS_INTP& Dt_Record_LS_ADV::dt_array_8_ls_intp(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_.Get(index);
}
inline ::atd::meprocess::LS_INTP* Dt_Record_LS_ADV::mutable_dt_array_8_ls_intp(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_.Mutable(index);
}
inline ::atd::meprocess::LS_INTP* Dt_Record_LS_ADV::add_dt_array_8_ls_intp() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_INTP >*
Dt_Record_LS_ADV::mutable_dt_array_8_ls_intp() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return &dt_array_8_ls_intp_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::LS_INTP >&
Dt_Record_LS_ADV::dt_array_8_ls_intp() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_LS_ADV.dt_array_8_ls_intp)
  return dt_array_8_ls_intp_;
}

// -------------------------------------------------------------------

// LS_INTP

// optional .atd.meprocess.LS_INTP.Intp_typeType intp_type = 1;
inline bool LS_INTP::has_intp_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LS_INTP::set_has_intp_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LS_INTP::clear_has_intp_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LS_INTP::clear_intp_type() {
  intp_type_ = 0;
  clear_has_intp_type();
}
inline ::atd::meprocess::LS_INTP_Intp_typeType LS_INTP::intp_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_type)
  return static_cast< ::atd::meprocess::LS_INTP_Intp_typeType >(intp_type_);
}
inline void LS_INTP::set_intp_type(::atd::meprocess::LS_INTP_Intp_typeType value) {
  assert(::atd::meprocess::LS_INTP_Intp_typeType_IsValid(value));
  set_has_intp_type();
  intp_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_type)
}

// optional bool intp_is_start = 2;
inline bool LS_INTP::has_intp_is_start() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LS_INTP::set_has_intp_is_start() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LS_INTP::clear_has_intp_is_start() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LS_INTP::clear_intp_is_start() {
  intp_is_start_ = false;
  clear_has_intp_is_start();
}
inline bool LS_INTP::intp_is_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_is_start)
  return intp_is_start_;
}
inline void LS_INTP::set_intp_is_start(bool value) {
  set_has_intp_is_start();
  intp_is_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_is_start)
}

// optional bool intp_is_valid = 3;
inline bool LS_INTP::has_intp_is_valid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LS_INTP::set_has_intp_is_valid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LS_INTP::clear_has_intp_is_valid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LS_INTP::clear_intp_is_valid() {
  intp_is_valid_ = false;
  clear_has_intp_is_valid();
}
inline bool LS_INTP::intp_is_valid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_is_valid)
  return intp_is_valid_;
}
inline void LS_INTP::set_intp_is_valid(bool value) {
  set_has_intp_is_valid();
  intp_is_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_is_valid)
}

// optional .atd.meprocess.LS_INTP.Intp_line_roleType intp_line_role = 4;
inline bool LS_INTP::has_intp_line_role() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LS_INTP::set_has_intp_line_role() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LS_INTP::clear_has_intp_line_role() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LS_INTP::clear_intp_line_role() {
  intp_line_role_ = 0;
  clear_has_intp_line_role();
}
inline ::atd::meprocess::LS_INTP_Intp_line_roleType LS_INTP::intp_line_role() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_line_role)
  return static_cast< ::atd::meprocess::LS_INTP_Intp_line_roleType >(intp_line_role_);
}
inline void LS_INTP::set_intp_line_role(::atd::meprocess::LS_INTP_Intp_line_roleType value) {
  assert(::atd::meprocess::LS_INTP_Intp_line_roleType_IsValid(value));
  set_has_intp_line_role();
  intp_line_role_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_line_role)
}

// optional float intp_lat_distance = 5;
inline bool LS_INTP::has_intp_lat_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LS_INTP::set_has_intp_lat_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LS_INTP::clear_has_intp_lat_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LS_INTP::clear_intp_lat_distance() {
  intp_lat_distance_ = 0;
  clear_has_intp_lat_distance();
}
inline float LS_INTP::intp_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_lat_distance)
  return intp_lat_distance_;
}
inline void LS_INTP::set_intp_lat_distance(float value) {
  set_has_intp_lat_distance();
  intp_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_lat_distance)
}

// optional int32 reserved_6 = 6;
inline bool LS_INTP::has_reserved_6() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LS_INTP::set_has_reserved_6() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LS_INTP::clear_has_reserved_6() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LS_INTP::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
inline ::google::protobuf::int32 LS_INTP::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.reserved_6)
  return reserved_6_;
}
inline void LS_INTP::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.reserved_6)
}

// optional float intp_long_distance = 7;
inline bool LS_INTP::has_intp_long_distance() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LS_INTP::set_has_intp_long_distance() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LS_INTP::clear_has_intp_long_distance() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LS_INTP::clear_intp_long_distance() {
  intp_long_distance_ = 0;
  clear_has_intp_long_distance();
}
inline float LS_INTP::intp_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_long_distance)
  return intp_long_distance_;
}
inline void LS_INTP::set_intp_long_distance(float value) {
  set_has_intp_long_distance();
  intp_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_long_distance)
}

// optional int32 intp_buffer = 8;
inline bool LS_INTP::has_intp_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LS_INTP::set_has_intp_buffer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LS_INTP::clear_has_intp_buffer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LS_INTP::clear_intp_buffer() {
  intp_buffer_ = 0;
  clear_has_intp_buffer();
}
inline ::google::protobuf::int32 LS_INTP::intp_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.LS_INTP.intp_buffer)
  return intp_buffer_;
}
inline void LS_INTP::set_intp_buffer(::google::protobuf::int32 value) {
  set_has_intp_buffer();
  intp_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.LS_INTP.intp_buffer)
}

// -------------------------------------------------------------------

// RoadEdgeCommon

// optional int32 ls_road_edge_zero_byte = 1;
inline bool RoadEdgeCommon::has_ls_road_edge_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadEdgeCommon::set_has_ls_road_edge_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadEdgeCommon::clear_has_ls_road_edge_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadEdgeCommon::clear_ls_road_edge_zero_byte() {
  ls_road_edge_zero_byte_ = 0;
  clear_has_ls_road_edge_zero_byte();
}
inline ::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_zero_byte)
  return ls_road_edge_zero_byte_;
}
inline void RoadEdgeCommon::set_ls_road_edge_zero_byte(::google::protobuf::int32 value) {
  set_has_ls_road_edge_zero_byte();
  ls_road_edge_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_zero_byte)
}

// optional int32 ls_road_edge_protocol_version = 2;
inline bool RoadEdgeCommon::has_ls_road_edge_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadEdgeCommon::set_has_ls_road_edge_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadEdgeCommon::clear_has_ls_road_edge_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadEdgeCommon::clear_ls_road_edge_protocol_version() {
  ls_road_edge_protocol_version_ = 0;
  clear_has_ls_road_edge_protocol_version();
}
inline ::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_protocol_version)
  return ls_road_edge_protocol_version_;
}
inline void RoadEdgeCommon::set_ls_road_edge_protocol_version(::google::protobuf::int32 value) {
  set_has_ls_road_edge_protocol_version();
  ls_road_edge_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_protocol_version)
}

// optional int32 ls_road_edge_sync_id = 3;
inline bool RoadEdgeCommon::has_ls_road_edge_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadEdgeCommon::set_has_ls_road_edge_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadEdgeCommon::clear_has_ls_road_edge_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadEdgeCommon::clear_ls_road_edge_sync_id() {
  ls_road_edge_sync_id_ = 0;
  clear_has_ls_road_edge_sync_id();
}
inline ::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_sync_id)
  return ls_road_edge_sync_id_;
}
inline void RoadEdgeCommon::set_ls_road_edge_sync_id(::google::protobuf::int32 value) {
  set_has_ls_road_edge_sync_id();
  ls_road_edge_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_sync_id)
}

// optional int32 ls_road_edge_number = 4;
inline bool RoadEdgeCommon::has_ls_road_edge_number() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoadEdgeCommon::set_has_ls_road_edge_number() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoadEdgeCommon::clear_has_ls_road_edge_number() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoadEdgeCommon::clear_ls_road_edge_number() {
  ls_road_edge_number_ = 0;
  clear_has_ls_road_edge_number();
}
inline ::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_number() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_number)
  return ls_road_edge_number_;
}
inline void RoadEdgeCommon::set_ls_road_edge_number(::google::protobuf::int32 value) {
  set_has_ls_road_edge_number();
  ls_road_edge_number_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_number)
}

// optional int32 ls_road_edge_header_buffer = 5;
inline bool RoadEdgeCommon::has_ls_road_edge_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoadEdgeCommon::set_has_ls_road_edge_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoadEdgeCommon::clear_has_ls_road_edge_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoadEdgeCommon::clear_ls_road_edge_header_buffer() {
  ls_road_edge_header_buffer_ = 0;
  clear_has_ls_road_edge_header_buffer();
}
inline ::google::protobuf::int32 RoadEdgeCommon::ls_road_edge_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdgeCommon.ls_road_edge_header_buffer)
  return ls_road_edge_header_buffer_;
}
inline void RoadEdgeCommon::set_ls_road_edge_header_buffer(::google::protobuf::int32 value) {
  set_has_ls_road_edge_header_buffer();
  ls_road_edge_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdgeCommon.ls_road_edge_header_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_LS_Road_Edge

// optional .atd.common.Header header = 1;
inline bool Dt_Record_LS_Road_Edge::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_LS_Road_Edge::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_LS_Road_Edge::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_LS_Road_Edge::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_LS_Road_Edge::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_LS_Road_Edge::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_LS_Road_Edge::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_Road_Edge.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_LS_Road_Edge::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_Road_Edge.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_LS_Road_Edge::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_LS_Road_Edge::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_LS_Road_Edge::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_LS_Road_Edge::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_LS_Road_Edge::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_LS_Road_Edge::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_LS_Road_Edge::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_LS_Road_Edge::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_Road_Edge.reservedmsg)
}

// optional .atd.meprocess.RoadEdgeCommon stroadedgecommon = 3;
inline bool Dt_Record_LS_Road_Edge::has_stroadedgecommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_LS_Road_Edge::set_has_stroadedgecommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_LS_Road_Edge::clear_has_stroadedgecommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_LS_Road_Edge::clear_stroadedgecommon() {
  if (stroadedgecommon_ != NULL) stroadedgecommon_->::atd::meprocess::RoadEdgeCommon::Clear();
  clear_has_stroadedgecommon();
}
inline const ::atd::meprocess::RoadEdgeCommon& Dt_Record_LS_Road_Edge::stroadedgecommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
  return stroadedgecommon_ != NULL ? *stroadedgecommon_
                         : *::atd::meprocess::RoadEdgeCommon::internal_default_instance();
}
inline ::atd::meprocess::RoadEdgeCommon* Dt_Record_LS_Road_Edge::mutable_stroadedgecommon() {
  set_has_stroadedgecommon();
  if (stroadedgecommon_ == NULL) {
    stroadedgecommon_ = new ::atd::meprocess::RoadEdgeCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
  return stroadedgecommon_;
}
inline ::atd::meprocess::RoadEdgeCommon* Dt_Record_LS_Road_Edge::release_stroadedgecommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
  clear_has_stroadedgecommon();
  ::atd::meprocess::RoadEdgeCommon* temp = stroadedgecommon_;
  stroadedgecommon_ = NULL;
  return temp;
}
inline void Dt_Record_LS_Road_Edge::set_allocated_stroadedgecommon(::atd::meprocess::RoadEdgeCommon* stroadedgecommon) {
  delete stroadedgecommon_;
  stroadedgecommon_ = stroadedgecommon;
  if (stroadedgecommon) {
    set_has_stroadedgecommon();
  } else {
    clear_has_stroadedgecommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_LS_Road_Edge.stroadedgecommon)
}

// repeated .atd.meprocess.RoadEdge dt_array_4_ls_road_edge = 4;
inline int Dt_Record_LS_Road_Edge::dt_array_4_ls_road_edge_size() const {
  return dt_array_4_ls_road_edge_.size();
}
inline void Dt_Record_LS_Road_Edge::clear_dt_array_4_ls_road_edge() {
  dt_array_4_ls_road_edge_.Clear();
}
inline const ::atd::meprocess::RoadEdge& Dt_Record_LS_Road_Edge::dt_array_4_ls_road_edge(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_.Get(index);
}
inline ::atd::meprocess::RoadEdge* Dt_Record_LS_Road_Edge::mutable_dt_array_4_ls_road_edge(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_.Mutable(index);
}
inline ::atd::meprocess::RoadEdge* Dt_Record_LS_Road_Edge::add_dt_array_4_ls_road_edge() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::RoadEdge >*
Dt_Record_LS_Road_Edge::mutable_dt_array_4_ls_road_edge() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return &dt_array_4_ls_road_edge_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::RoadEdge >&
Dt_Record_LS_Road_Edge::dt_array_4_ls_road_edge() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_LS_Road_Edge.dt_array_4_ls_road_edge)
  return dt_array_4_ls_road_edge_;
}

// -------------------------------------------------------------------

// RoadEdge

// optional int32 ls_road_edge_id = 1;
inline bool RoadEdge::has_ls_road_edge_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RoadEdge::clear_has_ls_road_edge_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RoadEdge::clear_ls_road_edge_id() {
  ls_road_edge_id_ = 0;
  clear_has_ls_road_edge_id();
}
inline ::google::protobuf::int32 RoadEdge::ls_road_edge_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_id)
  return ls_road_edge_id_;
}
inline void RoadEdge::set_ls_road_edge_id(::google::protobuf::int32 value) {
  set_has_ls_road_edge_id();
  ls_road_edge_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_id)
}

// optional int32 ls_road_edge_age = 2;
inline bool RoadEdge::has_ls_road_edge_age() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_age() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RoadEdge::clear_has_ls_road_edge_age() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RoadEdge::clear_ls_road_edge_age() {
  ls_road_edge_age_ = 0;
  clear_has_ls_road_edge_age();
}
inline ::google::protobuf::int32 RoadEdge::ls_road_edge_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_age)
  return ls_road_edge_age_;
}
inline void RoadEdge::set_ls_road_edge_age(::google::protobuf::int32 value) {
  set_has_ls_road_edge_age();
  ls_road_edge_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_age)
}

// optional float ls_road_edge_exist_prob = 3;
inline bool RoadEdge::has_ls_road_edge_exist_prob() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_exist_prob() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RoadEdge::clear_has_ls_road_edge_exist_prob() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RoadEdge::clear_ls_road_edge_exist_prob() {
  ls_road_edge_exist_prob_ = 0;
  clear_has_ls_road_edge_exist_prob();
}
inline float RoadEdge::ls_road_edge_exist_prob() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_exist_prob)
  return ls_road_edge_exist_prob_;
}
inline void RoadEdge::set_ls_road_edge_exist_prob(float value) {
  set_has_ls_road_edge_exist_prob();
  ls_road_edge_exist_prob_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_exist_prob)
}

// optional .atd.meprocess.RoadEdge.Ls_road_edge_type_avg__classType ls_road_edge_type_avg__class = 4;
inline bool RoadEdge::has_ls_road_edge_type_avg__class() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_type_avg__class() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RoadEdge::clear_has_ls_road_edge_type_avg__class() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RoadEdge::clear_ls_road_edge_type_avg__class() {
  ls_road_edge_type_avg__class_ = 0;
  clear_has_ls_road_edge_type_avg__class();
}
inline ::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType RoadEdge::ls_road_edge_type_avg__class() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_type_avg__class)
  return static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType >(ls_road_edge_type_avg__class_);
}
inline void RoadEdge::set_ls_road_edge_type_avg__class(::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType value) {
  assert(::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType_IsValid(value));
  set_has_ls_road_edge_type_avg__class();
  ls_road_edge_type_avg__class_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_type_avg__class)
}

// optional int32 ls_road_edge_prediction_type = 5;
inline bool RoadEdge::has_ls_road_edge_prediction_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_prediction_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RoadEdge::clear_has_ls_road_edge_prediction_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RoadEdge::clear_ls_road_edge_prediction_type() {
  ls_road_edge_prediction_type_ = 0;
  clear_has_ls_road_edge_prediction_type();
}
inline ::google::protobuf::int32 RoadEdge::ls_road_edge_prediction_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_prediction_type)
  return ls_road_edge_prediction_type_;
}
inline void RoadEdge::set_ls_road_edge_prediction_type(::google::protobuf::int32 value) {
  set_has_ls_road_edge_prediction_type();
  ls_road_edge_prediction_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_prediction_type)
}

// optional float ls_road_edge_height = 6;
inline bool RoadEdge::has_ls_road_edge_height() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_height() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RoadEdge::clear_has_ls_road_edge_height() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RoadEdge::clear_ls_road_edge_height() {
  ls_road_edge_height_ = 0;
  clear_has_ls_road_edge_height();
}
inline float RoadEdge::ls_road_edge_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_height)
  return ls_road_edge_height_;
}
inline void RoadEdge::set_ls_road_edge_height(float value) {
  set_has_ls_road_edge_height();
  ls_road_edge_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_height)
}

// optional float ls_road_edge_view_range_start = 7;
inline bool RoadEdge::has_ls_road_edge_view_range_start() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_view_range_start() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RoadEdge::clear_has_ls_road_edge_view_range_start() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RoadEdge::clear_ls_road_edge_view_range_start() {
  ls_road_edge_view_range_start_ = 0;
  clear_has_ls_road_edge_view_range_start();
}
inline float RoadEdge::ls_road_edge_view_range_start() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_view_range_start)
  return ls_road_edge_view_range_start_;
}
inline void RoadEdge::set_ls_road_edge_view_range_start(float value) {
  set_has_ls_road_edge_view_range_start();
  ls_road_edge_view_range_start_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_view_range_start)
}

// optional int32 reserved_1 = 8;
inline bool RoadEdge::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RoadEdge::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RoadEdge::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RoadEdge::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 RoadEdge::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.reserved_1)
  return reserved_1_;
}
inline void RoadEdge::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.reserved_1)
}

// optional float ls_road_edge_view_range_end = 9;
inline bool RoadEdge::has_ls_road_edge_view_range_end() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_view_range_end() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RoadEdge::clear_has_ls_road_edge_view_range_end() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RoadEdge::clear_ls_road_edge_view_range_end() {
  ls_road_edge_view_range_end_ = 0;
  clear_has_ls_road_edge_view_range_end();
}
inline float RoadEdge::ls_road_edge_view_range_end() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_view_range_end)
  return ls_road_edge_view_range_end_;
}
inline void RoadEdge::set_ls_road_edge_view_range_end(float value) {
  set_has_ls_road_edge_view_range_end();
  ls_road_edge_view_range_end_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_view_range_end)
}

// optional .atd.meprocess.RoadEdge.Ls_road_edge_sideType ls_road_edge_side = 10;
inline bool RoadEdge::has_ls_road_edge_side() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_side() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RoadEdge::clear_has_ls_road_edge_side() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RoadEdge::clear_ls_road_edge_side() {
  ls_road_edge_side_ = 0;
  clear_has_ls_road_edge_side();
}
inline ::atd::meprocess::RoadEdge_Ls_road_edge_sideType RoadEdge::ls_road_edge_side() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_side)
  return static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_sideType >(ls_road_edge_side_);
}
inline void RoadEdge::set_ls_road_edge_side(::atd::meprocess::RoadEdge_Ls_road_edge_sideType value) {
  assert(::atd::meprocess::RoadEdge_Ls_road_edge_sideType_IsValid(value));
  set_has_ls_road_edge_side();
  ls_road_edge_side_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_side)
}

// optional .atd.meprocess.RoadEdge.Ls_road_edge_indexType ls_road_edge_index = 11;
inline bool RoadEdge::has_ls_road_edge_index() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_index() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RoadEdge::clear_has_ls_road_edge_index() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RoadEdge::clear_ls_road_edge_index() {
  ls_road_edge_index_ = 0;
  clear_has_ls_road_edge_index();
}
inline ::atd::meprocess::RoadEdge_Ls_road_edge_indexType RoadEdge::ls_road_edge_index() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_index)
  return static_cast< ::atd::meprocess::RoadEdge_Ls_road_edge_indexType >(ls_road_edge_index_);
}
inline void RoadEdge::set_ls_road_edge_index(::atd::meprocess::RoadEdge_Ls_road_edge_indexType value) {
  assert(::atd::meprocess::RoadEdge_Ls_road_edge_indexType_IsValid(value));
  set_has_ls_road_edge_index();
  ls_road_edge_index_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_index)
}

// optional int32 reserved_2 = 12;
inline bool RoadEdge::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RoadEdge::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RoadEdge::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RoadEdge::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 RoadEdge::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.reserved_2)
  return reserved_2_;
}
inline void RoadEdge::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.reserved_2)
}

// optional double ls_road_edge_line_c3 = 13;
inline bool RoadEdge::has_ls_road_edge_line_c3() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c3() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c3() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c3() {
  ls_road_edge_line_c3_ = 0;
  clear_has_ls_road_edge_line_c3();
}
inline double RoadEdge::ls_road_edge_line_c3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c3)
  return ls_road_edge_line_c3_;
}
inline void RoadEdge::set_ls_road_edge_line_c3(double value) {
  set_has_ls_road_edge_line_c3();
  ls_road_edge_line_c3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c3)
}

// optional double ls_road_edge_line_c3_std = 14;
inline bool RoadEdge::has_ls_road_edge_line_c3_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c3_std() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c3_std() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c3_std() {
  ls_road_edge_line_c3_std_ = 0;
  clear_has_ls_road_edge_line_c3_std();
}
inline double RoadEdge::ls_road_edge_line_c3_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c3_std)
  return ls_road_edge_line_c3_std_;
}
inline void RoadEdge::set_ls_road_edge_line_c3_std(double value) {
  set_has_ls_road_edge_line_c3_std();
  ls_road_edge_line_c3_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c3_std)
}

// optional double ls_road_edge_line_c2 = 15;
inline bool RoadEdge::has_ls_road_edge_line_c2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c2() {
  ls_road_edge_line_c2_ = 0;
  clear_has_ls_road_edge_line_c2();
}
inline double RoadEdge::ls_road_edge_line_c2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c2)
  return ls_road_edge_line_c2_;
}
inline void RoadEdge::set_ls_road_edge_line_c2(double value) {
  set_has_ls_road_edge_line_c2();
  ls_road_edge_line_c2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c2)
}

// optional double ls_road_edge_line_c2_std = 16;
inline bool RoadEdge::has_ls_road_edge_line_c2_std() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c2_std() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c2_std() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c2_std() {
  ls_road_edge_line_c2_std_ = 0;
  clear_has_ls_road_edge_line_c2_std();
}
inline double RoadEdge::ls_road_edge_line_c2_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c2_std)
  return ls_road_edge_line_c2_std_;
}
inline void RoadEdge::set_ls_road_edge_line_c2_std(double value) {
  set_has_ls_road_edge_line_c2_std();
  ls_road_edge_line_c2_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c2_std)
}

// optional float ls_road_edge_line_c1 = 17;
inline bool RoadEdge::has_ls_road_edge_line_c1() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c1() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c1() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c1() {
  ls_road_edge_line_c1_ = 0;
  clear_has_ls_road_edge_line_c1();
}
inline float RoadEdge::ls_road_edge_line_c1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c1)
  return ls_road_edge_line_c1_;
}
inline void RoadEdge::set_ls_road_edge_line_c1(float value) {
  set_has_ls_road_edge_line_c1();
  ls_road_edge_line_c1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c1)
}

// optional float ls_road_edge_line_c1_std = 18;
inline bool RoadEdge::has_ls_road_edge_line_c1_std() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c1_std() {
  _has_bits_[0] |= 0x00020000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c1_std() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c1_std() {
  ls_road_edge_line_c1_std_ = 0;
  clear_has_ls_road_edge_line_c1_std();
}
inline float RoadEdge::ls_road_edge_line_c1_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c1_std)
  return ls_road_edge_line_c1_std_;
}
inline void RoadEdge::set_ls_road_edge_line_c1_std(float value) {
  set_has_ls_road_edge_line_c1_std();
  ls_road_edge_line_c1_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c1_std)
}

// optional int32 reserved_3 = 19;
inline bool RoadEdge::has_reserved_3() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RoadEdge::set_has_reserved_3() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RoadEdge::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RoadEdge::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
inline ::google::protobuf::int32 RoadEdge::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.reserved_3)
  return reserved_3_;
}
inline void RoadEdge::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.reserved_3)
}

// optional float ls_road_edge_line_c0 = 20;
inline bool RoadEdge::has_ls_road_edge_line_c0() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c0() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c0() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c0() {
  ls_road_edge_line_c0_ = 0;
  clear_has_ls_road_edge_line_c0();
}
inline float RoadEdge::ls_road_edge_line_c0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c0)
  return ls_road_edge_line_c0_;
}
inline void RoadEdge::set_ls_road_edge_line_c0(float value) {
  set_has_ls_road_edge_line_c0();
  ls_road_edge_line_c0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c0)
}

// optional float ls_road_edge_line_c0_std = 21;
inline bool RoadEdge::has_ls_road_edge_line_c0_std() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_line_c0_std() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RoadEdge::clear_has_ls_road_edge_line_c0_std() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RoadEdge::clear_ls_road_edge_line_c0_std() {
  ls_road_edge_line_c0_std_ = 0;
  clear_has_ls_road_edge_line_c0_std();
}
inline float RoadEdge::ls_road_edge_line_c0_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_line_c0_std)
  return ls_road_edge_line_c0_std_;
}
inline void RoadEdge::set_ls_road_edge_line_c0_std(float value) {
  set_has_ls_road_edge_line_c0_std();
  ls_road_edge_line_c0_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_line_c0_std)
}

// optional int32 ls_road_edge_buffer = 22;
inline bool RoadEdge::has_ls_road_edge_buffer() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void RoadEdge::set_has_ls_road_edge_buffer() {
  _has_bits_[0] |= 0x00200000u;
}
inline void RoadEdge::clear_has_ls_road_edge_buffer() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void RoadEdge::clear_ls_road_edge_buffer() {
  ls_road_edge_buffer_ = 0;
  clear_has_ls_road_edge_buffer();
}
inline ::google::protobuf::int32 RoadEdge::ls_road_edge_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.RoadEdge.ls_road_edge_buffer)
  return ls_road_edge_buffer_;
}
inline void RoadEdge::set_ls_road_edge_buffer(::google::protobuf::int32 value) {
  set_has_ls_road_edge_buffer();
  ls_road_edge_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.RoadEdge.ls_road_edge_buffer)
}

// -------------------------------------------------------------------

// ObjCommon

// optional int32 obj_zero_byte = 1;
inline bool ObjCommon::has_obj_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ObjCommon::set_has_obj_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ObjCommon::clear_has_obj_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ObjCommon::clear_obj_zero_byte() {
  obj_zero_byte_ = 0;
  clear_has_obj_zero_byte();
}
inline ::google::protobuf::int32 ObjCommon::obj_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_zero_byte)
  return obj_zero_byte_;
}
inline void ObjCommon::set_obj_zero_byte(::google::protobuf::int32 value) {
  set_has_obj_zero_byte();
  obj_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_zero_byte)
}

// optional int32 obj_protocol_version = 2;
inline bool ObjCommon::has_obj_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ObjCommon::set_has_obj_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ObjCommon::clear_has_obj_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ObjCommon::clear_obj_protocol_version() {
  obj_protocol_version_ = 0;
  clear_has_obj_protocol_version();
}
inline ::google::protobuf::int32 ObjCommon::obj_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_protocol_version)
  return obj_protocol_version_;
}
inline void ObjCommon::set_obj_protocol_version(::google::protobuf::int32 value) {
  set_has_obj_protocol_version();
  obj_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_protocol_version)
}

// optional int32 obj_sync_id = 3;
inline bool ObjCommon::has_obj_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ObjCommon::set_has_obj_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ObjCommon::clear_has_obj_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ObjCommon::clear_obj_sync_id() {
  obj_sync_id_ = 0;
  clear_has_obj_sync_id();
}
inline ::google::protobuf::int32 ObjCommon::obj_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_sync_id)
  return obj_sync_id_;
}
inline void ObjCommon::set_obj_sync_id(::google::protobuf::int32 value) {
  set_has_obj_sync_id();
  obj_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_sync_id)
}

// optional int32 obj_vru_count = 4;
inline bool ObjCommon::has_obj_vru_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ObjCommon::set_has_obj_vru_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ObjCommon::clear_has_obj_vru_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ObjCommon::clear_obj_vru_count() {
  obj_vru_count_ = 0;
  clear_has_obj_vru_count();
}
inline ::google::protobuf::int32 ObjCommon::obj_vru_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vru_count)
  return obj_vru_count_;
}
inline void ObjCommon::set_obj_vru_count(::google::protobuf::int32 value) {
  set_has_obj_vru_count();
  obj_vru_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vru_count)
}

// optional int32 obj_vd_count = 5;
inline bool ObjCommon::has_obj_vd_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ObjCommon::set_has_obj_vd_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ObjCommon::clear_has_obj_vd_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ObjCommon::clear_obj_vd_count() {
  obj_vd_count_ = 0;
  clear_has_obj_vd_count();
}
inline ::google::protobuf::int32 ObjCommon::obj_vd_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_count)
  return obj_vd_count_;
}
inline void ObjCommon::set_obj_vd_count(::google::protobuf::int32 value) {
  set_has_obj_vd_count();
  obj_vd_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_count)
}

// optional int32 obj_general_obj_count = 6;
inline bool ObjCommon::has_obj_general_obj_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ObjCommon::set_has_obj_general_obj_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ObjCommon::clear_has_obj_general_obj_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ObjCommon::clear_obj_general_obj_count() {
  obj_general_obj_count_ = 0;
  clear_has_obj_general_obj_count();
}
inline ::google::protobuf::int32 ObjCommon::obj_general_obj_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_general_obj_count)
  return obj_general_obj_count_;
}
inline void ObjCommon::set_obj_general_obj_count(::google::protobuf::int32 value) {
  set_has_obj_general_obj_count();
  obj_general_obj_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_general_obj_count)
}

// optional int32 obj_animal_count = 7;
inline bool ObjCommon::has_obj_animal_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ObjCommon::set_has_obj_animal_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ObjCommon::clear_has_obj_animal_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ObjCommon::clear_obj_animal_count() {
  obj_animal_count_ = 0;
  clear_has_obj_animal_count();
}
inline ::google::protobuf::int32 ObjCommon::obj_animal_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_animal_count)
  return obj_animal_count_;
}
inline void ObjCommon::set_obj_animal_count(::google::protobuf::int32 value) {
  set_has_obj_animal_count();
  obj_animal_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_animal_count)
}

// optional int32 obj_vd_niv_left = 8;
inline bool ObjCommon::has_obj_vd_niv_left() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ObjCommon::set_has_obj_vd_niv_left() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ObjCommon::clear_has_obj_vd_niv_left() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ObjCommon::clear_obj_vd_niv_left() {
  obj_vd_niv_left_ = 0;
  clear_has_obj_vd_niv_left();
}
inline ::google::protobuf::int32 ObjCommon::obj_vd_niv_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_niv_left)
  return obj_vd_niv_left_;
}
inline void ObjCommon::set_obj_vd_niv_left(::google::protobuf::int32 value) {
  set_has_obj_vd_niv_left();
  obj_vd_niv_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_niv_left)
}

// optional int32 obj_vd_niv_right = 9;
inline bool ObjCommon::has_obj_vd_niv_right() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ObjCommon::set_has_obj_vd_niv_right() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ObjCommon::clear_has_obj_vd_niv_right() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ObjCommon::clear_obj_vd_niv_right() {
  obj_vd_niv_right_ = 0;
  clear_has_obj_vd_niv_right();
}
inline ::google::protobuf::int32 ObjCommon::obj_vd_niv_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_niv_right)
  return obj_vd_niv_right_;
}
inline void ObjCommon::set_obj_vd_niv_right(::google::protobuf::int32 value) {
  set_has_obj_vd_niv_right();
  obj_vd_niv_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_niv_right)
}

// optional int32 obj_vd_cipv_id = 10;
inline bool ObjCommon::has_obj_vd_cipv_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ObjCommon::set_has_obj_vd_cipv_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ObjCommon::clear_has_obj_vd_cipv_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ObjCommon::clear_obj_vd_cipv_id() {
  obj_vd_cipv_id_ = 0;
  clear_has_obj_vd_cipv_id();
}
inline ::google::protobuf::int32 ObjCommon::obj_vd_cipv_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_cipv_id)
  return obj_vd_cipv_id_;
}
inline void ObjCommon::set_obj_vd_cipv_id(::google::protobuf::int32 value) {
  set_has_obj_vd_cipv_id();
  obj_vd_cipv_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_cipv_id)
}

// optional .atd.meprocess.ObjCommon.Obj_vd_cipv_lostType obj_vd_cipv_lost = 11;
inline bool ObjCommon::has_obj_vd_cipv_lost() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ObjCommon::set_has_obj_vd_cipv_lost() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ObjCommon::clear_has_obj_vd_cipv_lost() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ObjCommon::clear_obj_vd_cipv_lost() {
  obj_vd_cipv_lost_ = 0;
  clear_has_obj_vd_cipv_lost();
}
inline ::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType ObjCommon::obj_vd_cipv_lost() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_cipv_lost)
  return static_cast< ::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType >(obj_vd_cipv_lost_);
}
inline void ObjCommon::set_obj_vd_cipv_lost(::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType value) {
  assert(::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType_IsValid(value));
  set_has_obj_vd_cipv_lost();
  obj_vd_cipv_lost_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_cipv_lost)
}

// optional .atd.meprocess.ObjCommon.Obj_vd_allow_acceType obj_vd_allow_acce = 12;
inline bool ObjCommon::has_obj_vd_allow_acce() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ObjCommon::set_has_obj_vd_allow_acce() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ObjCommon::clear_has_obj_vd_allow_acce() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ObjCommon::clear_obj_vd_allow_acce() {
  obj_vd_allow_acce_ = 0;
  clear_has_obj_vd_allow_acce();
}
inline ::atd::meprocess::ObjCommon_Obj_vd_allow_acceType ObjCommon::obj_vd_allow_acce() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_vd_allow_acce)
  return static_cast< ::atd::meprocess::ObjCommon_Obj_vd_allow_acceType >(obj_vd_allow_acce_);
}
inline void ObjCommon::set_obj_vd_allow_acce(::atd::meprocess::ObjCommon_Obj_vd_allow_acceType value) {
  assert(::atd::meprocess::ObjCommon_Obj_vd_allow_acceType_IsValid(value));
  set_has_obj_vd_allow_acce();
  obj_vd_allow_acce_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_vd_allow_acce)
}

// optional float obj_header_buffer = 13;
inline bool ObjCommon::has_obj_header_buffer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ObjCommon::set_has_obj_header_buffer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ObjCommon::clear_has_obj_header_buffer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ObjCommon::clear_obj_header_buffer() {
  obj_header_buffer_ = 0;
  clear_has_obj_header_buffer();
}
inline float ObjCommon::obj_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.ObjCommon.obj_header_buffer)
  return obj_header_buffer_;
}
inline void ObjCommon::set_obj_header_buffer(float value) {
  set_has_obj_header_buffer();
  obj_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.ObjCommon.obj_header_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_MeObjects

// optional .atd.common.Header header = 1;
inline bool Dt_Record_MeObjects::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_MeObjects::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_MeObjects::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_MeObjects::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_MeObjects::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_MeObjects::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_MeObjects::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeObjects.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_MeObjects::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeObjects.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_MeObjects::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_MeObjects::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_MeObjects::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_MeObjects::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_MeObjects::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_MeObjects::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_MeObjects::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_MeObjects::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeObjects.reservedmsg)
}

// optional .atd.meprocess.ObjCommon stobjcommon = 3;
inline bool Dt_Record_MeObjects::has_stobjcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_MeObjects::set_has_stobjcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_MeObjects::clear_has_stobjcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_MeObjects::clear_stobjcommon() {
  if (stobjcommon_ != NULL) stobjcommon_->::atd::meprocess::ObjCommon::Clear();
  clear_has_stobjcommon();
}
inline const ::atd::meprocess::ObjCommon& Dt_Record_MeObjects::stobjcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
  return stobjcommon_ != NULL ? *stobjcommon_
                         : *::atd::meprocess::ObjCommon::internal_default_instance();
}
inline ::atd::meprocess::ObjCommon* Dt_Record_MeObjects::mutable_stobjcommon() {
  set_has_stobjcommon();
  if (stobjcommon_ == NULL) {
    stobjcommon_ = new ::atd::meprocess::ObjCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
  return stobjcommon_;
}
inline ::atd::meprocess::ObjCommon* Dt_Record_MeObjects::release_stobjcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
  clear_has_stobjcommon();
  ::atd::meprocess::ObjCommon* temp = stobjcommon_;
  stobjcommon_ = NULL;
  return temp;
}
inline void Dt_Record_MeObjects::set_allocated_stobjcommon(::atd::meprocess::ObjCommon* stobjcommon) {
  delete stobjcommon_;
  stobjcommon_ = stobjcommon;
  if (stobjcommon) {
    set_has_stobjcommon();
  } else {
    clear_has_stobjcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_MeObjects.stobjcommon)
}

// repeated .atd.meprocess.MeObject dt_array_20_meobject = 4;
inline int Dt_Record_MeObjects::dt_array_20_meobject_size() const {
  return dt_array_20_meobject_.size();
}
inline void Dt_Record_MeObjects::clear_dt_array_20_meobject() {
  dt_array_20_meobject_.Clear();
}
inline const ::atd::meprocess::MeObject& Dt_Record_MeObjects::dt_array_20_meobject(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_.Get(index);
}
inline ::atd::meprocess::MeObject* Dt_Record_MeObjects::mutable_dt_array_20_meobject(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_.Mutable(index);
}
inline ::atd::meprocess::MeObject* Dt_Record_MeObjects::add_dt_array_20_meobject() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::MeObject >*
Dt_Record_MeObjects::mutable_dt_array_20_meobject() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return &dt_array_20_meobject_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::MeObject >&
Dt_Record_MeObjects::dt_array_20_meobject() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_MeObjects.dt_array_20_meobject)
  return dt_array_20_meobject_;
}

// -------------------------------------------------------------------

// MeObject

// optional int32 obj_id = 1;
inline bool MeObject::has_obj_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MeObject::set_has_obj_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MeObject::clear_has_obj_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MeObject::clear_obj_id() {
  obj_id_ = 0;
  clear_has_obj_id();
}
inline ::google::protobuf::int32 MeObject::obj_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_id)
  return obj_id_;
}
inline void MeObject::set_obj_id(::google::protobuf::int32 value) {
  set_has_obj_id();
  obj_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_id)
}

// optional float obj_existence_probability = 2;
inline bool MeObject::has_obj_existence_probability() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MeObject::set_has_obj_existence_probability() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MeObject::clear_has_obj_existence_probability() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MeObject::clear_obj_existence_probability() {
  obj_existence_probability_ = 0;
  clear_has_obj_existence_probability();
}
inline float MeObject::obj_existence_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_existence_probability)
  return obj_existence_probability_;
}
inline void MeObject::set_obj_existence_probability(float value) {
  set_has_obj_existence_probability();
  obj_existence_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_existence_probability)
}

// optional bool obj_triggered_sdm = 3;
inline bool MeObject::has_obj_triggered_sdm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void MeObject::set_has_obj_triggered_sdm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void MeObject::clear_has_obj_triggered_sdm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void MeObject::clear_obj_triggered_sdm() {
  obj_triggered_sdm_ = false;
  clear_has_obj_triggered_sdm();
}
inline bool MeObject::obj_triggered_sdm() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_triggered_sdm)
  return obj_triggered_sdm_;
}
inline void MeObject::set_obj_triggered_sdm(bool value) {
  set_has_obj_triggered_sdm();
  obj_triggered_sdm_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_triggered_sdm)
}

// optional int32 obj_motion_category = 4;
inline bool MeObject::has_obj_motion_category() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MeObject::set_has_obj_motion_category() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MeObject::clear_has_obj_motion_category() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MeObject::clear_obj_motion_category() {
  obj_motion_category_ = 0;
  clear_has_obj_motion_category();
}
inline ::google::protobuf::int32 MeObject::obj_motion_category() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_motion_category)
  return obj_motion_category_;
}
inline void MeObject::set_obj_motion_category(::google::protobuf::int32 value) {
  set_has_obj_motion_category();
  obj_motion_category_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_motion_category)
}

// optional int32 obj_object_age = 5;
inline bool MeObject::has_obj_object_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MeObject::set_has_obj_object_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MeObject::clear_has_obj_object_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MeObject::clear_obj_object_age() {
  obj_object_age_ = 0;
  clear_has_obj_object_age();
}
inline ::google::protobuf::int32 MeObject::obj_object_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_object_age)
  return obj_object_age_;
}
inline void MeObject::set_obj_object_age(::google::protobuf::int32 value) {
  set_has_obj_object_age();
  obj_object_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_object_age)
}

// optional int32 obj_measuring_status = 6;
inline bool MeObject::has_obj_measuring_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MeObject::set_has_obj_measuring_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MeObject::clear_has_obj_measuring_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MeObject::clear_obj_measuring_status() {
  obj_measuring_status_ = 0;
  clear_has_obj_measuring_status();
}
inline ::google::protobuf::int32 MeObject::obj_measuring_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_measuring_status)
  return obj_measuring_status_;
}
inline void MeObject::set_obj_measuring_status(::google::protobuf::int32 value) {
  set_has_obj_measuring_status();
  obj_measuring_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_measuring_status)
}

// optional .atd.meprocess.MeObject.Obj_object_classType obj_object_class = 7;
inline bool MeObject::has_obj_object_class() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MeObject::set_has_obj_object_class() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MeObject::clear_has_obj_object_class() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MeObject::clear_obj_object_class() {
  obj_object_class_ = 0;
  clear_has_obj_object_class();
}
inline ::atd::meprocess::MeObject_Obj_object_classType MeObject::obj_object_class() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_object_class)
  return static_cast< ::atd::meprocess::MeObject_Obj_object_classType >(obj_object_class_);
}
inline void MeObject::set_obj_object_class(::atd::meprocess::MeObject_Obj_object_classType value) {
  assert(::atd::meprocess::MeObject_Obj_object_classType_IsValid(value));
  set_has_obj_object_class();
  obj_object_class_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_object_class)
}

// optional int32 obj_camera = 8;
inline bool MeObject::has_obj_camera() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MeObject::set_has_obj_camera() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MeObject::clear_has_obj_camera() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MeObject::clear_obj_camera() {
  obj_camera_ = 0;
  clear_has_obj_camera();
}
inline ::google::protobuf::int32 MeObject::obj_camera() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_camera)
  return obj_camera_;
}
inline void MeObject::set_obj_camera(::google::protobuf::int32 value) {
  set_has_obj_camera();
  obj_camera_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_camera)
}

// optional int32 obj_motion_status = 9;
inline bool MeObject::has_obj_motion_status() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MeObject::set_has_obj_motion_status() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MeObject::clear_has_obj_motion_status() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MeObject::clear_obj_motion_status() {
  obj_motion_status_ = 0;
  clear_has_obj_motion_status();
}
inline ::google::protobuf::int32 MeObject::obj_motion_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_motion_status)
  return obj_motion_status_;
}
inline void MeObject::set_obj_motion_status(::google::protobuf::int32 value) {
  set_has_obj_motion_status();
  obj_motion_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_motion_status)
}

// optional int32 obj_motion_oreintation = 10;
inline bool MeObject::has_obj_motion_oreintation() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void MeObject::set_has_obj_motion_oreintation() {
  _has_bits_[0] |= 0x00001000u;
}
inline void MeObject::clear_has_obj_motion_oreintation() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void MeObject::clear_obj_motion_oreintation() {
  obj_motion_oreintation_ = 0;
  clear_has_obj_motion_oreintation();
}
inline ::google::protobuf::int32 MeObject::obj_motion_oreintation() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_motion_oreintation)
  return obj_motion_oreintation_;
}
inline void MeObject::set_obj_motion_oreintation(::google::protobuf::int32 value) {
  set_has_obj_motion_oreintation();
  obj_motion_oreintation_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_motion_oreintation)
}

// optional bool obj_brake_light = 11;
inline bool MeObject::has_obj_brake_light() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void MeObject::set_has_obj_brake_light() {
  _has_bits_[0] |= 0x00000200u;
}
inline void MeObject::clear_has_obj_brake_light() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void MeObject::clear_obj_brake_light() {
  obj_brake_light_ = false;
  clear_has_obj_brake_light();
}
inline bool MeObject::obj_brake_light() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_brake_light)
  return obj_brake_light_;
}
inline void MeObject::set_obj_brake_light(bool value) {
  set_has_obj_brake_light();
  obj_brake_light_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_brake_light)
}

// optional bool obj_turn_indicator_right = 12;
inline bool MeObject::has_obj_turn_indicator_right() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void MeObject::set_has_obj_turn_indicator_right() {
  _has_bits_[0] |= 0x00000400u;
}
inline void MeObject::clear_has_obj_turn_indicator_right() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void MeObject::clear_obj_turn_indicator_right() {
  obj_turn_indicator_right_ = false;
  clear_has_obj_turn_indicator_right();
}
inline bool MeObject::obj_turn_indicator_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_turn_indicator_right)
  return obj_turn_indicator_right_;
}
inline void MeObject::set_obj_turn_indicator_right(bool value) {
  set_has_obj_turn_indicator_right();
  obj_turn_indicator_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_turn_indicator_right)
}

// optional bool obj_turn_indicator_left = 13;
inline bool MeObject::has_obj_turn_indicator_left() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void MeObject::set_has_obj_turn_indicator_left() {
  _has_bits_[0] |= 0x00000800u;
}
inline void MeObject::clear_has_obj_turn_indicator_left() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void MeObject::clear_obj_turn_indicator_left() {
  obj_turn_indicator_left_ = false;
  clear_has_obj_turn_indicator_left();
}
inline bool MeObject::obj_turn_indicator_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_turn_indicator_left)
  return obj_turn_indicator_left_;
}
inline void MeObject::set_obj_turn_indicator_left(bool value) {
  set_has_obj_turn_indicator_left();
  obj_turn_indicator_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_turn_indicator_left)
}

// optional bool obj_light_indicator_validity = 14;
inline bool MeObject::has_obj_light_indicator_validity() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void MeObject::set_has_obj_light_indicator_validity() {
  _has_bits_[0] |= 0x00002000u;
}
inline void MeObject::clear_has_obj_light_indicator_validity() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void MeObject::clear_obj_light_indicator_validity() {
  obj_light_indicator_validity_ = false;
  clear_has_obj_light_indicator_validity();
}
inline bool MeObject::obj_light_indicator_validity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_light_indicator_validity)
  return obj_light_indicator_validity_;
}
inline void MeObject::set_obj_light_indicator_validity(bool value) {
  set_has_obj_light_indicator_validity();
  obj_light_indicator_validity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_light_indicator_validity)
}

// optional bool obj_right_out_of_image = 15;
inline bool MeObject::has_obj_right_out_of_image() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void MeObject::set_has_obj_right_out_of_image() {
  _has_bits_[0] |= 0x00004000u;
}
inline void MeObject::clear_has_obj_right_out_of_image() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void MeObject::clear_obj_right_out_of_image() {
  obj_right_out_of_image_ = false;
  clear_has_obj_right_out_of_image();
}
inline bool MeObject::obj_right_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_right_out_of_image)
  return obj_right_out_of_image_;
}
inline void MeObject::set_obj_right_out_of_image(bool value) {
  set_has_obj_right_out_of_image();
  obj_right_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_right_out_of_image)
}

// optional bool obj_left_out_of_image = 16;
inline bool MeObject::has_obj_left_out_of_image() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void MeObject::set_has_obj_left_out_of_image() {
  _has_bits_[0] |= 0x00008000u;
}
inline void MeObject::clear_has_obj_left_out_of_image() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void MeObject::clear_obj_left_out_of_image() {
  obj_left_out_of_image_ = false;
  clear_has_obj_left_out_of_image();
}
inline bool MeObject::obj_left_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_left_out_of_image)
  return obj_left_out_of_image_;
}
inline void MeObject::set_obj_left_out_of_image(bool value) {
  set_has_obj_left_out_of_image();
  obj_left_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_left_out_of_image)
}

// optional .atd.meprocess.MeObject.Obj_lane_assignmentType obj_lane_assignment = 17;
inline bool MeObject::has_obj_lane_assignment() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void MeObject::set_has_obj_lane_assignment() {
  _has_bits_[0] |= 0x00020000u;
}
inline void MeObject::clear_has_obj_lane_assignment() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void MeObject::clear_obj_lane_assignment() {
  obj_lane_assignment_ = 0;
  clear_has_obj_lane_assignment();
}
inline ::atd::meprocess::MeObject_Obj_lane_assignmentType MeObject::obj_lane_assignment() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lane_assignment)
  return static_cast< ::atd::meprocess::MeObject_Obj_lane_assignmentType >(obj_lane_assignment_);
}
inline void MeObject::set_obj_lane_assignment(::atd::meprocess::MeObject_Obj_lane_assignmentType value) {
  assert(::atd::meprocess::MeObject_Obj_lane_assignmentType_IsValid(value));
  set_has_obj_lane_assignment();
  obj_lane_assignment_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lane_assignment)
}

// optional bool obj_lane_assignment_v = 18;
inline bool MeObject::has_obj_lane_assignment_v() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void MeObject::set_has_obj_lane_assignment_v() {
  _has_bits_[0] |= 0x00010000u;
}
inline void MeObject::clear_has_obj_lane_assignment_v() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void MeObject::clear_obj_lane_assignment_v() {
  obj_lane_assignment_v_ = false;
  clear_has_obj_lane_assignment_v();
}
inline bool MeObject::obj_lane_assignment_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lane_assignment_v)
  return obj_lane_assignment_v_;
}
inline void MeObject::set_obj_lane_assignment_v(bool value) {
  set_has_obj_lane_assignment_v();
  obj_lane_assignment_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lane_assignment_v)
}

// optional bool obj_top_out_of_image = 19;
inline bool MeObject::has_obj_top_out_of_image() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void MeObject::set_has_obj_top_out_of_image() {
  _has_bits_[0] |= 0x00040000u;
}
inline void MeObject::clear_has_obj_top_out_of_image() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void MeObject::clear_obj_top_out_of_image() {
  obj_top_out_of_image_ = false;
  clear_has_obj_top_out_of_image();
}
inline bool MeObject::obj_top_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_top_out_of_image)
  return obj_top_out_of_image_;
}
inline void MeObject::set_obj_top_out_of_image(bool value) {
  set_has_obj_top_out_of_image();
  obj_top_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_top_out_of_image)
}

// optional bool obj_bottom_out_of_image = 20;
inline bool MeObject::has_obj_bottom_out_of_image() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void MeObject::set_has_obj_bottom_out_of_image() {
  _has_bits_[0] |= 0x00080000u;
}
inline void MeObject::clear_has_obj_bottom_out_of_image() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void MeObject::clear_obj_bottom_out_of_image() {
  obj_bottom_out_of_image_ = false;
  clear_has_obj_bottom_out_of_image();
}
inline bool MeObject::obj_bottom_out_of_image() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_bottom_out_of_image)
  return obj_bottom_out_of_image_;
}
inline void MeObject::set_obj_bottom_out_of_image(bool value) {
  set_has_obj_bottom_out_of_image();
  obj_bottom_out_of_image_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_bottom_out_of_image)
}

// optional bool obj_top_out_of_image_v = 21;
inline bool MeObject::has_obj_top_out_of_image_v() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void MeObject::set_has_obj_top_out_of_image_v() {
  _has_bits_[0] |= 0x00100000u;
}
inline void MeObject::clear_has_obj_top_out_of_image_v() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void MeObject::clear_obj_top_out_of_image_v() {
  obj_top_out_of_image_v_ = false;
  clear_has_obj_top_out_of_image_v();
}
inline bool MeObject::obj_top_out_of_image_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_top_out_of_image_v)
  return obj_top_out_of_image_v_;
}
inline void MeObject::set_obj_top_out_of_image_v(bool value) {
  set_has_obj_top_out_of_image_v();
  obj_top_out_of_image_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_top_out_of_image_v)
}

// optional bool obj_bottom_out_of_image_v = 22;
inline bool MeObject::has_obj_bottom_out_of_image_v() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void MeObject::set_has_obj_bottom_out_of_image_v() {
  _has_bits_[0] |= 0x00200000u;
}
inline void MeObject::clear_has_obj_bottom_out_of_image_v() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void MeObject::clear_obj_bottom_out_of_image_v() {
  obj_bottom_out_of_image_v_ = false;
  clear_has_obj_bottom_out_of_image_v();
}
inline bool MeObject::obj_bottom_out_of_image_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_bottom_out_of_image_v)
  return obj_bottom_out_of_image_v_;
}
inline void MeObject::set_obj_bottom_out_of_image_v(bool value) {
  set_has_obj_bottom_out_of_image_v();
  obj_bottom_out_of_image_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_bottom_out_of_image_v)
}

// optional int32 reserved_1 = 23;
inline bool MeObject::has_reserved_1() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void MeObject::set_has_reserved_1() {
  _has_bits_[0] |= 0x00400000u;
}
inline void MeObject::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void MeObject::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 MeObject::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_1)
  return reserved_1_;
}
inline void MeObject::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_1)
}

// optional int32 obj_age_seconds = 24;
inline bool MeObject::has_obj_age_seconds() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void MeObject::set_has_obj_age_seconds() {
  _has_bits_[0] |= 0x00800000u;
}
inline void MeObject::clear_has_obj_age_seconds() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void MeObject::clear_obj_age_seconds() {
  obj_age_seconds_ = 0;
  clear_has_obj_age_seconds();
}
inline ::google::protobuf::int32 MeObject::obj_age_seconds() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_age_seconds)
  return obj_age_seconds_;
}
inline void MeObject::set_obj_age_seconds(::google::protobuf::int32 value) {
  set_has_obj_age_seconds();
  obj_age_seconds_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_age_seconds)
}

// optional bool obj_age_seconds_v = 25;
inline bool MeObject::has_obj_age_seconds_v() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void MeObject::set_has_obj_age_seconds_v() {
  _has_bits_[0] |= 0x08000000u;
}
inline void MeObject::clear_has_obj_age_seconds_v() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void MeObject::clear_obj_age_seconds_v() {
  obj_age_seconds_v_ = false;
  clear_has_obj_age_seconds_v();
}
inline bool MeObject::obj_age_seconds_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_age_seconds_v)
  return obj_age_seconds_v_;
}
inline void MeObject::set_obj_age_seconds_v(bool value) {
  set_has_obj_age_seconds_v();
  obj_age_seconds_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_age_seconds_v)
}

// optional float obj_width = 26;
inline bool MeObject::has_obj_width() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void MeObject::set_has_obj_width() {
  _has_bits_[0] |= 0x01000000u;
}
inline void MeObject::clear_has_obj_width() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void MeObject::clear_obj_width() {
  obj_width_ = 0;
  clear_has_obj_width();
}
inline float MeObject::obj_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_width)
  return obj_width_;
}
inline void MeObject::set_obj_width(float value) {
  set_has_obj_width();
  obj_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_width)
}

// optional bool obj_width_v = 27;
inline bool MeObject::has_obj_width_v() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void MeObject::set_has_obj_width_v() {
  _has_bits_[0] |= 0x10000000u;
}
inline void MeObject::clear_has_obj_width_v() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void MeObject::clear_obj_width_v() {
  obj_width_v_ = false;
  clear_has_obj_width_v();
}
inline bool MeObject::obj_width_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_width_v)
  return obj_width_v_;
}
inline void MeObject::set_obj_width_v(bool value) {
  set_has_obj_width_v();
  obj_width_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_width_v)
}

// optional float obj_width_std = 28;
inline bool MeObject::has_obj_width_std() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void MeObject::set_has_obj_width_std() {
  _has_bits_[0] |= 0x02000000u;
}
inline void MeObject::clear_has_obj_width_std() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void MeObject::clear_obj_width_std() {
  obj_width_std_ = 0;
  clear_has_obj_width_std();
}
inline float MeObject::obj_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_width_std)
  return obj_width_std_;
}
inline void MeObject::set_obj_width_std(float value) {
  set_has_obj_width_std();
  obj_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_width_std)
}

// optional int32 reserved_2 = 29;
inline bool MeObject::has_reserved_2() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void MeObject::set_has_reserved_2() {
  _has_bits_[0] |= 0x04000000u;
}
inline void MeObject::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void MeObject::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 MeObject::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_2)
  return reserved_2_;
}
inline void MeObject::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_2)
}

// optional float obj_length = 30;
inline bool MeObject::has_obj_length() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void MeObject::set_has_obj_length() {
  _has_bits_[0] |= 0x80000000u;
}
inline void MeObject::clear_has_obj_length() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void MeObject::clear_obj_length() {
  obj_length_ = 0;
  clear_has_obj_length();
}
inline float MeObject::obj_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_length)
  return obj_length_;
}
inline void MeObject::set_obj_length(float value) {
  set_has_obj_length();
  obj_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_length)
}

// optional bool obj_length_v = 31;
inline bool MeObject::has_obj_length_v() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void MeObject::set_has_obj_length_v() {
  _has_bits_[0] |= 0x20000000u;
}
inline void MeObject::clear_has_obj_length_v() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void MeObject::clear_obj_length_v() {
  obj_length_v_ = false;
  clear_has_obj_length_v();
}
inline bool MeObject::obj_length_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_length_v)
  return obj_length_v_;
}
inline void MeObject::set_obj_length_v(bool value) {
  set_has_obj_length_v();
  obj_length_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_length_v)
}

// optional float obj_length_std = 32;
inline bool MeObject::has_obj_length_std() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void MeObject::set_has_obj_length_std() {
  _has_bits_[1] |= 0x00000001u;
}
inline void MeObject::clear_has_obj_length_std() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void MeObject::clear_obj_length_std() {
  obj_length_std_ = 0;
  clear_has_obj_length_std();
}
inline float MeObject::obj_length_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_length_std)
  return obj_length_std_;
}
inline void MeObject::set_obj_length_std(float value) {
  set_has_obj_length_std();
  obj_length_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_length_std)
}

// optional float obj_height = 33;
inline bool MeObject::has_obj_height() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void MeObject::set_has_obj_height() {
  _has_bits_[1] |= 0x00000002u;
}
inline void MeObject::clear_has_obj_height() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void MeObject::clear_obj_height() {
  obj_height_ = 0;
  clear_has_obj_height();
}
inline float MeObject::obj_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_height)
  return obj_height_;
}
inline void MeObject::set_obj_height(float value) {
  set_has_obj_height();
  obj_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_height)
}

// optional bool obj_height_v = 34;
inline bool MeObject::has_obj_height_v() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void MeObject::set_has_obj_height_v() {
  _has_bits_[0] |= 0x40000000u;
}
inline void MeObject::clear_has_obj_height_v() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void MeObject::clear_obj_height_v() {
  obj_height_v_ = false;
  clear_has_obj_height_v();
}
inline bool MeObject::obj_height_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_height_v)
  return obj_height_v_;
}
inline void MeObject::set_obj_height_v(bool value) {
  set_has_obj_height_v();
  obj_height_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_height_v)
}

// optional int32 reserved_3 = 35;
inline bool MeObject::has_reserved_3() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void MeObject::set_has_reserved_3() {
  _has_bits_[1] |= 0x00000004u;
}
inline void MeObject::clear_has_reserved_3() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void MeObject::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
inline ::google::protobuf::int32 MeObject::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_3)
  return reserved_3_;
}
inline void MeObject::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_3)
}

// optional float obj_height_std = 36;
inline bool MeObject::has_obj_height_std() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void MeObject::set_has_obj_height_std() {
  _has_bits_[1] |= 0x00000008u;
}
inline void MeObject::clear_has_obj_height_std() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void MeObject::clear_obj_height_std() {
  obj_height_std_ = 0;
  clear_has_obj_height_std();
}
inline float MeObject::obj_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_height_std)
  return obj_height_std_;
}
inline void MeObject::set_obj_height_std(float value) {
  set_has_obj_height_std();
  obj_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_height_std)
}

// optional float obj_absolute_long_velocity = 37;
inline bool MeObject::has_obj_absolute_long_velocity() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void MeObject::set_has_obj_absolute_long_velocity() {
  _has_bits_[1] |= 0x00000010u;
}
inline void MeObject::clear_has_obj_absolute_long_velocity() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void MeObject::clear_obj_absolute_long_velocity() {
  obj_absolute_long_velocity_ = 0;
  clear_has_obj_absolute_long_velocity();
}
inline float MeObject::obj_absolute_long_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_long_velocity)
  return obj_absolute_long_velocity_;
}
inline void MeObject::set_obj_absolute_long_velocity(float value) {
  set_has_obj_absolute_long_velocity();
  obj_absolute_long_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_long_velocity)
}

// optional bool obj_absolute_long_velocity_v = 38;
inline bool MeObject::has_obj_absolute_long_velocity_v() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void MeObject::set_has_obj_absolute_long_velocity_v() {
  _has_bits_[1] |= 0x00000100u;
}
inline void MeObject::clear_has_obj_absolute_long_velocity_v() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void MeObject::clear_obj_absolute_long_velocity_v() {
  obj_absolute_long_velocity_v_ = false;
  clear_has_obj_absolute_long_velocity_v();
}
inline bool MeObject::obj_absolute_long_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_long_velocity_v)
  return obj_absolute_long_velocity_v_;
}
inline void MeObject::set_obj_absolute_long_velocity_v(bool value) {
  set_has_obj_absolute_long_velocity_v();
  obj_absolute_long_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_long_velocity_v)
}

// optional float obj_abs_long_velocity_std = 39;
inline bool MeObject::has_obj_abs_long_velocity_std() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void MeObject::set_has_obj_abs_long_velocity_std() {
  _has_bits_[1] |= 0x00000020u;
}
inline void MeObject::clear_has_obj_abs_long_velocity_std() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void MeObject::clear_obj_abs_long_velocity_std() {
  obj_abs_long_velocity_std_ = 0;
  clear_has_obj_abs_long_velocity_std();
}
inline float MeObject::obj_abs_long_velocity_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_abs_long_velocity_std)
  return obj_abs_long_velocity_std_;
}
inline void MeObject::set_obj_abs_long_velocity_std(float value) {
  set_has_obj_abs_long_velocity_std();
  obj_abs_long_velocity_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_abs_long_velocity_std)
}

// optional float obj_absolute_lat_velocity = 40;
inline bool MeObject::has_obj_absolute_lat_velocity() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void MeObject::set_has_obj_absolute_lat_velocity() {
  _has_bits_[1] |= 0x00000040u;
}
inline void MeObject::clear_has_obj_absolute_lat_velocity() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void MeObject::clear_obj_absolute_lat_velocity() {
  obj_absolute_lat_velocity_ = 0;
  clear_has_obj_absolute_lat_velocity();
}
inline float MeObject::obj_absolute_lat_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_velocity)
  return obj_absolute_lat_velocity_;
}
inline void MeObject::set_obj_absolute_lat_velocity(float value) {
  set_has_obj_absolute_lat_velocity();
  obj_absolute_lat_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_velocity)
}

// optional bool obj_absolute_lat_velocity_v = 41;
inline bool MeObject::has_obj_absolute_lat_velocity_v() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void MeObject::set_has_obj_absolute_lat_velocity_v() {
  _has_bits_[1] |= 0x00000200u;
}
inline void MeObject::clear_has_obj_absolute_lat_velocity_v() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void MeObject::clear_obj_absolute_lat_velocity_v() {
  obj_absolute_lat_velocity_v_ = false;
  clear_has_obj_absolute_lat_velocity_v();
}
inline bool MeObject::obj_absolute_lat_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_velocity_v)
  return obj_absolute_lat_velocity_v_;
}
inline void MeObject::set_obj_absolute_lat_velocity_v(bool value) {
  set_has_obj_absolute_lat_velocity_v();
  obj_absolute_lat_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_velocity_v)
}

// optional float obj_abs_lat_velocity_std = 42;
inline bool MeObject::has_obj_abs_lat_velocity_std() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void MeObject::set_has_obj_abs_lat_velocity_std() {
  _has_bits_[1] |= 0x00000080u;
}
inline void MeObject::clear_has_obj_abs_lat_velocity_std() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void MeObject::clear_obj_abs_lat_velocity_std() {
  obj_abs_lat_velocity_std_ = 0;
  clear_has_obj_abs_lat_velocity_std();
}
inline float MeObject::obj_abs_lat_velocity_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_abs_lat_velocity_std)
  return obj_abs_lat_velocity_std_;
}
inline void MeObject::set_obj_abs_lat_velocity_std(float value) {
  set_has_obj_abs_lat_velocity_std();
  obj_abs_lat_velocity_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_abs_lat_velocity_std)
}

// optional float obj_absolute_lat_acc = 43;
inline bool MeObject::has_obj_absolute_lat_acc() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void MeObject::set_has_obj_absolute_lat_acc() {
  _has_bits_[1] |= 0x00001000u;
}
inline void MeObject::clear_has_obj_absolute_lat_acc() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void MeObject::clear_obj_absolute_lat_acc() {
  obj_absolute_lat_acc_ = 0;
  clear_has_obj_absolute_lat_acc();
}
inline float MeObject::obj_absolute_lat_acc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_acc)
  return obj_absolute_lat_acc_;
}
inline void MeObject::set_obj_absolute_lat_acc(float value) {
  set_has_obj_absolute_lat_acc();
  obj_absolute_lat_acc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_acc)
}

// optional bool obj_absolute_lat_acc_v = 44;
inline bool MeObject::has_obj_absolute_lat_acc_v() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void MeObject::set_has_obj_absolute_lat_acc_v() {
  _has_bits_[1] |= 0x00000400u;
}
inline void MeObject::clear_has_obj_absolute_lat_acc_v() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void MeObject::clear_obj_absolute_lat_acc_v() {
  obj_absolute_lat_acc_v_ = false;
  clear_has_obj_absolute_lat_acc_v();
}
inline bool MeObject::obj_absolute_lat_acc_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_acc_v)
  return obj_absolute_lat_acc_v_;
}
inline void MeObject::set_obj_absolute_lat_acc_v(bool value) {
  set_has_obj_absolute_lat_acc_v();
  obj_absolute_lat_acc_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_acc_v)
}

// optional float obj_absolute_lat_acc_std = 45;
inline bool MeObject::has_obj_absolute_lat_acc_std() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void MeObject::set_has_obj_absolute_lat_acc_std() {
  _has_bits_[1] |= 0x00002000u;
}
inline void MeObject::clear_has_obj_absolute_lat_acc_std() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void MeObject::clear_obj_absolute_lat_acc_std() {
  obj_absolute_lat_acc_std_ = 0;
  clear_has_obj_absolute_lat_acc_std();
}
inline float MeObject::obj_absolute_lat_acc_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_lat_acc_std)
  return obj_absolute_lat_acc_std_;
}
inline void MeObject::set_obj_absolute_lat_acc_std(float value) {
  set_has_obj_absolute_lat_acc_std();
  obj_absolute_lat_acc_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_lat_acc_std)
}

// optional float obj_absolute_acceleration = 46;
inline bool MeObject::has_obj_absolute_acceleration() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void MeObject::set_has_obj_absolute_acceleration() {
  _has_bits_[1] |= 0x00004000u;
}
inline void MeObject::clear_has_obj_absolute_acceleration() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void MeObject::clear_obj_absolute_acceleration() {
  obj_absolute_acceleration_ = 0;
  clear_has_obj_absolute_acceleration();
}
inline float MeObject::obj_absolute_acceleration() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_acceleration)
  return obj_absolute_acceleration_;
}
inline void MeObject::set_obj_absolute_acceleration(float value) {
  set_has_obj_absolute_acceleration();
  obj_absolute_acceleration_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_acceleration)
}

// optional bool obj_absolute_acceleration_v = 47;
inline bool MeObject::has_obj_absolute_acceleration_v() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void MeObject::set_has_obj_absolute_acceleration_v() {
  _has_bits_[1] |= 0x00000800u;
}
inline void MeObject::clear_has_obj_absolute_acceleration_v() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void MeObject::clear_obj_absolute_acceleration_v() {
  obj_absolute_acceleration_v_ = false;
  clear_has_obj_absolute_acceleration_v();
}
inline bool MeObject::obj_absolute_acceleration_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_acceleration_v)
  return obj_absolute_acceleration_v_;
}
inline void MeObject::set_obj_absolute_acceleration_v(bool value) {
  set_has_obj_absolute_acceleration_v();
  obj_absolute_acceleration_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_acceleration_v)
}

// optional float obj_absolute_acce_std = 48;
inline bool MeObject::has_obj_absolute_acce_std() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void MeObject::set_has_obj_absolute_acce_std() {
  _has_bits_[1] |= 0x00008000u;
}
inline void MeObject::clear_has_obj_absolute_acce_std() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void MeObject::clear_obj_absolute_acce_std() {
  obj_absolute_acce_std_ = 0;
  clear_has_obj_absolute_acce_std();
}
inline float MeObject::obj_absolute_acce_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_acce_std)
  return obj_absolute_acce_std_;
}
inline void MeObject::set_obj_absolute_acce_std(float value) {
  set_has_obj_absolute_acce_std();
  obj_absolute_acce_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_acce_std)
}

// optional int32 reserved_4 = 49;
inline bool MeObject::has_reserved_4() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void MeObject::set_has_reserved_4() {
  _has_bits_[1] |= 0x00010000u;
}
inline void MeObject::clear_has_reserved_4() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void MeObject::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
inline ::google::protobuf::int32 MeObject::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_4)
  return reserved_4_;
}
inline void MeObject::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_4)
}

// optional float obj_inv_ttc = 50;
inline bool MeObject::has_obj_inv_ttc() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void MeObject::set_has_obj_inv_ttc() {
  _has_bits_[1] |= 0x00020000u;
}
inline void MeObject::clear_has_obj_inv_ttc() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void MeObject::clear_obj_inv_ttc() {
  obj_inv_ttc_ = 0;
  clear_has_obj_inv_ttc();
}
inline float MeObject::obj_inv_ttc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_inv_ttc)
  return obj_inv_ttc_;
}
inline void MeObject::set_obj_inv_ttc(float value) {
  set_has_obj_inv_ttc();
  obj_inv_ttc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_inv_ttc)
}

// optional bool obj_inv_ttc_v = 51;
inline bool MeObject::has_obj_inv_ttc_v() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void MeObject::set_has_obj_inv_ttc_v() {
  _has_bits_[1] |= 0x00200000u;
}
inline void MeObject::clear_has_obj_inv_ttc_v() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void MeObject::clear_obj_inv_ttc_v() {
  obj_inv_ttc_v_ = false;
  clear_has_obj_inv_ttc_v();
}
inline bool MeObject::obj_inv_ttc_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_inv_ttc_v)
  return obj_inv_ttc_v_;
}
inline void MeObject::set_obj_inv_ttc_v(bool value) {
  set_has_obj_inv_ttc_v();
  obj_inv_ttc_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_inv_ttc_v)
}

// optional float obj_relative_long_velocity = 52;
inline bool MeObject::has_obj_relative_long_velocity() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void MeObject::set_has_obj_relative_long_velocity() {
  _has_bits_[1] |= 0x00040000u;
}
inline void MeObject::clear_has_obj_relative_long_velocity() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void MeObject::clear_obj_relative_long_velocity() {
  obj_relative_long_velocity_ = 0;
  clear_has_obj_relative_long_velocity();
}
inline float MeObject::obj_relative_long_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_long_velocity)
  return obj_relative_long_velocity_;
}
inline void MeObject::set_obj_relative_long_velocity(float value) {
  set_has_obj_relative_long_velocity();
  obj_relative_long_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_long_velocity)
}

// optional bool obj_relative_long_velocity_v = 53;
inline bool MeObject::has_obj_relative_long_velocity_v() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void MeObject::set_has_obj_relative_long_velocity_v() {
  _has_bits_[1] |= 0x00400000u;
}
inline void MeObject::clear_has_obj_relative_long_velocity_v() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void MeObject::clear_obj_relative_long_velocity_v() {
  obj_relative_long_velocity_v_ = false;
  clear_has_obj_relative_long_velocity_v();
}
inline bool MeObject::obj_relative_long_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_long_velocity_v)
  return obj_relative_long_velocity_v_;
}
inline void MeObject::set_obj_relative_long_velocity_v(bool value) {
  set_has_obj_relative_long_velocity_v();
  obj_relative_long_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_long_velocity_v)
}

// optional int32 reserved_5 = 54;
inline bool MeObject::has_reserved_5() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void MeObject::set_has_reserved_5() {
  _has_bits_[1] |= 0x00080000u;
}
inline void MeObject::clear_has_reserved_5() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void MeObject::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
inline ::google::protobuf::int32 MeObject::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_5)
  return reserved_5_;
}
inline void MeObject::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_5)
}

// optional float obj_relative_long_velo_std = 55;
inline bool MeObject::has_obj_relative_long_velo_std() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void MeObject::set_has_obj_relative_long_velo_std() {
  _has_bits_[1] |= 0x00100000u;
}
inline void MeObject::clear_has_obj_relative_long_velo_std() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void MeObject::clear_obj_relative_long_velo_std() {
  obj_relative_long_velo_std_ = 0;
  clear_has_obj_relative_long_velo_std();
}
inline float MeObject::obj_relative_long_velo_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_long_velo_std)
  return obj_relative_long_velo_std_;
}
inline void MeObject::set_obj_relative_long_velo_std(float value) {
  set_has_obj_relative_long_velo_std();
  obj_relative_long_velo_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_long_velo_std)
}

// optional float obj_relative_lat_velocity = 56;
inline bool MeObject::has_obj_relative_lat_velocity() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void MeObject::set_has_obj_relative_lat_velocity() {
  _has_bits_[1] |= 0x02000000u;
}
inline void MeObject::clear_has_obj_relative_lat_velocity() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void MeObject::clear_obj_relative_lat_velocity() {
  obj_relative_lat_velocity_ = 0;
  clear_has_obj_relative_lat_velocity();
}
inline float MeObject::obj_relative_lat_velocity() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_lat_velocity)
  return obj_relative_lat_velocity_;
}
inline void MeObject::set_obj_relative_lat_velocity(float value) {
  set_has_obj_relative_lat_velocity();
  obj_relative_lat_velocity_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_lat_velocity)
}

// optional bool obj_relative_lat_velocity_v = 57;
inline bool MeObject::has_obj_relative_lat_velocity_v() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void MeObject::set_has_obj_relative_lat_velocity_v() {
  _has_bits_[1] |= 0x00800000u;
}
inline void MeObject::clear_has_obj_relative_lat_velocity_v() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void MeObject::clear_obj_relative_lat_velocity_v() {
  obj_relative_lat_velocity_v_ = false;
  clear_has_obj_relative_lat_velocity_v();
}
inline bool MeObject::obj_relative_lat_velocity_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_lat_velocity_v)
  return obj_relative_lat_velocity_v_;
}
inline void MeObject::set_obj_relative_lat_velocity_v(bool value) {
  set_has_obj_relative_lat_velocity_v();
  obj_relative_lat_velocity_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_lat_velocity_v)
}

// optional int32 reserved_6 = 58;
inline bool MeObject::has_reserved_6() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void MeObject::set_has_reserved_6() {
  _has_bits_[1] |= 0x04000000u;
}
inline void MeObject::clear_has_reserved_6() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void MeObject::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
inline ::google::protobuf::int32 MeObject::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_6)
  return reserved_6_;
}
inline void MeObject::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_6)
}

// optional float obj_relative_lat_velocity_std = 59;
inline bool MeObject::has_obj_relative_lat_velocity_std() const {
  return (_has_bits_[1] & 0x08000000u) != 0;
}
inline void MeObject::set_has_obj_relative_lat_velocity_std() {
  _has_bits_[1] |= 0x08000000u;
}
inline void MeObject::clear_has_obj_relative_lat_velocity_std() {
  _has_bits_[1] &= ~0x08000000u;
}
inline void MeObject::clear_obj_relative_lat_velocity_std() {
  obj_relative_lat_velocity_std_ = 0;
  clear_has_obj_relative_lat_velocity_std();
}
inline float MeObject::obj_relative_lat_velocity_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_relative_lat_velocity_std)
  return obj_relative_lat_velocity_std_;
}
inline void MeObject::set_obj_relative_lat_velocity_std(float value) {
  set_has_obj_relative_lat_velocity_std();
  obj_relative_lat_velocity_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_relative_lat_velocity_std)
}

// optional float obj_long_distance = 60;
inline bool MeObject::has_obj_long_distance() const {
  return (_has_bits_[1] & 0x10000000u) != 0;
}
inline void MeObject::set_has_obj_long_distance() {
  _has_bits_[1] |= 0x10000000u;
}
inline void MeObject::clear_has_obj_long_distance() {
  _has_bits_[1] &= ~0x10000000u;
}
inline void MeObject::clear_obj_long_distance() {
  obj_long_distance_ = 0;
  clear_has_obj_long_distance();
}
inline float MeObject::obj_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_long_distance)
  return obj_long_distance_;
}
inline void MeObject::set_obj_long_distance(float value) {
  set_has_obj_long_distance();
  obj_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_long_distance)
}

// optional bool obj_long_distance_v = 61;
inline bool MeObject::has_obj_long_distance_v() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void MeObject::set_has_obj_long_distance_v() {
  _has_bits_[1] |= 0x01000000u;
}
inline void MeObject::clear_has_obj_long_distance_v() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void MeObject::clear_obj_long_distance_v() {
  obj_long_distance_v_ = false;
  clear_has_obj_long_distance_v();
}
inline bool MeObject::obj_long_distance_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_long_distance_v)
  return obj_long_distance_v_;
}
inline void MeObject::set_obj_long_distance_v(bool value) {
  set_has_obj_long_distance_v();
  obj_long_distance_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_long_distance_v)
}

// optional int32 reserved_7 = 62;
inline bool MeObject::has_reserved_7() const {
  return (_has_bits_[1] & 0x20000000u) != 0;
}
inline void MeObject::set_has_reserved_7() {
  _has_bits_[1] |= 0x20000000u;
}
inline void MeObject::clear_has_reserved_7() {
  _has_bits_[1] &= ~0x20000000u;
}
inline void MeObject::clear_reserved_7() {
  reserved_7_ = 0;
  clear_has_reserved_7();
}
inline ::google::protobuf::int32 MeObject::reserved_7() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_7)
  return reserved_7_;
}
inline void MeObject::set_reserved_7(::google::protobuf::int32 value) {
  set_has_reserved_7();
  reserved_7_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_7)
}

// optional float obj_long_distance_std = 63;
inline bool MeObject::has_obj_long_distance_std() const {
  return (_has_bits_[1] & 0x40000000u) != 0;
}
inline void MeObject::set_has_obj_long_distance_std() {
  _has_bits_[1] |= 0x40000000u;
}
inline void MeObject::clear_has_obj_long_distance_std() {
  _has_bits_[1] &= ~0x40000000u;
}
inline void MeObject::clear_obj_long_distance_std() {
  obj_long_distance_std_ = 0;
  clear_has_obj_long_distance_std();
}
inline float MeObject::obj_long_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_long_distance_std)
  return obj_long_distance_std_;
}
inline void MeObject::set_obj_long_distance_std(float value) {
  set_has_obj_long_distance_std();
  obj_long_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_long_distance_std)
}

// optional float obj_lat_distance = 64;
inline bool MeObject::has_obj_lat_distance() const {
  return (_has_bits_[1] & 0x80000000u) != 0;
}
inline void MeObject::set_has_obj_lat_distance() {
  _has_bits_[1] |= 0x80000000u;
}
inline void MeObject::clear_has_obj_lat_distance() {
  _has_bits_[1] &= ~0x80000000u;
}
inline void MeObject::clear_obj_lat_distance() {
  obj_lat_distance_ = 0;
  clear_has_obj_lat_distance();
}
inline float MeObject::obj_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lat_distance)
  return obj_lat_distance_;
}
inline void MeObject::set_obj_lat_distance(float value) {
  set_has_obj_lat_distance();
  obj_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lat_distance)
}

// optional bool obj_lat_distance_v = 65;
inline bool MeObject::has_obj_lat_distance_v() const {
  return (_has_bits_[2] & 0x00000010u) != 0;
}
inline void MeObject::set_has_obj_lat_distance_v() {
  _has_bits_[2] |= 0x00000010u;
}
inline void MeObject::clear_has_obj_lat_distance_v() {
  _has_bits_[2] &= ~0x00000010u;
}
inline void MeObject::clear_obj_lat_distance_v() {
  obj_lat_distance_v_ = false;
  clear_has_obj_lat_distance_v();
}
inline bool MeObject::obj_lat_distance_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lat_distance_v)
  return obj_lat_distance_v_;
}
inline void MeObject::set_obj_lat_distance_v(bool value) {
  set_has_obj_lat_distance_v();
  obj_lat_distance_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lat_distance_v)
}

// optional int32 reserved_8 = 66;
inline bool MeObject::has_reserved_8() const {
  return (_has_bits_[2] & 0x00000001u) != 0;
}
inline void MeObject::set_has_reserved_8() {
  _has_bits_[2] |= 0x00000001u;
}
inline void MeObject::clear_has_reserved_8() {
  _has_bits_[2] &= ~0x00000001u;
}
inline void MeObject::clear_reserved_8() {
  reserved_8_ = 0;
  clear_has_reserved_8();
}
inline ::google::protobuf::int32 MeObject::reserved_8() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_8)
  return reserved_8_;
}
inline void MeObject::set_reserved_8(::google::protobuf::int32 value) {
  set_has_reserved_8();
  reserved_8_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_8)
}

// optional float obj_lat_distance_std = 67;
inline bool MeObject::has_obj_lat_distance_std() const {
  return (_has_bits_[2] & 0x00000002u) != 0;
}
inline void MeObject::set_has_obj_lat_distance_std() {
  _has_bits_[2] |= 0x00000002u;
}
inline void MeObject::clear_has_obj_lat_distance_std() {
  _has_bits_[2] &= ~0x00000002u;
}
inline void MeObject::clear_obj_lat_distance_std() {
  obj_lat_distance_std_ = 0;
  clear_has_obj_lat_distance_std();
}
inline float MeObject::obj_lat_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_lat_distance_std)
  return obj_lat_distance_std_;
}
inline void MeObject::set_obj_lat_distance_std(float value) {
  set_has_obj_lat_distance_std();
  obj_lat_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_lat_distance_std)
}

// optional float obj_absolute_speed = 68;
inline bool MeObject::has_obj_absolute_speed() const {
  return (_has_bits_[2] & 0x00000004u) != 0;
}
inline void MeObject::set_has_obj_absolute_speed() {
  _has_bits_[2] |= 0x00000004u;
}
inline void MeObject::clear_has_obj_absolute_speed() {
  _has_bits_[2] &= ~0x00000004u;
}
inline void MeObject::clear_obj_absolute_speed() {
  obj_absolute_speed_ = 0;
  clear_has_obj_absolute_speed();
}
inline float MeObject::obj_absolute_speed() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_speed)
  return obj_absolute_speed_;
}
inline void MeObject::set_obj_absolute_speed(float value) {
  set_has_obj_absolute_speed();
  obj_absolute_speed_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_speed)
}

// optional bool obj_absolute_speed_v = 69;
inline bool MeObject::has_obj_absolute_speed_v() const {
  return (_has_bits_[2] & 0x00000020u) != 0;
}
inline void MeObject::set_has_obj_absolute_speed_v() {
  _has_bits_[2] |= 0x00000020u;
}
inline void MeObject::clear_has_obj_absolute_speed_v() {
  _has_bits_[2] &= ~0x00000020u;
}
inline void MeObject::clear_obj_absolute_speed_v() {
  obj_absolute_speed_v_ = false;
  clear_has_obj_absolute_speed_v();
}
inline bool MeObject::obj_absolute_speed_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_speed_v)
  return obj_absolute_speed_v_;
}
inline void MeObject::set_obj_absolute_speed_v(bool value) {
  set_has_obj_absolute_speed_v();
  obj_absolute_speed_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_speed_v)
}

// optional int32 reserved_9 = 70;
inline bool MeObject::has_reserved_9() const {
  return (_has_bits_[2] & 0x00000008u) != 0;
}
inline void MeObject::set_has_reserved_9() {
  _has_bits_[2] |= 0x00000008u;
}
inline void MeObject::clear_has_reserved_9() {
  _has_bits_[2] &= ~0x00000008u;
}
inline void MeObject::clear_reserved_9() {
  reserved_9_ = 0;
  clear_has_reserved_9();
}
inline ::google::protobuf::int32 MeObject::reserved_9() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_9)
  return reserved_9_;
}
inline void MeObject::set_reserved_9(::google::protobuf::int32 value) {
  set_has_reserved_9();
  reserved_9_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_9)
}

// optional float obj_absolute_speed_std = 71;
inline bool MeObject::has_obj_absolute_speed_std() const {
  return (_has_bits_[2] & 0x00000100u) != 0;
}
inline void MeObject::set_has_obj_absolute_speed_std() {
  _has_bits_[2] |= 0x00000100u;
}
inline void MeObject::clear_has_obj_absolute_speed_std() {
  _has_bits_[2] &= ~0x00000100u;
}
inline void MeObject::clear_obj_absolute_speed_std() {
  obj_absolute_speed_std_ = 0;
  clear_has_obj_absolute_speed_std();
}
inline float MeObject::obj_absolute_speed_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_absolute_speed_std)
  return obj_absolute_speed_std_;
}
inline void MeObject::set_obj_absolute_speed_std(float value) {
  set_has_obj_absolute_speed_std();
  obj_absolute_speed_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_absolute_speed_std)
}

// optional float obj_heading = 72;
inline bool MeObject::has_obj_heading() const {
  return (_has_bits_[2] & 0x00000200u) != 0;
}
inline void MeObject::set_has_obj_heading() {
  _has_bits_[2] |= 0x00000200u;
}
inline void MeObject::clear_has_obj_heading() {
  _has_bits_[2] &= ~0x00000200u;
}
inline void MeObject::clear_obj_heading() {
  obj_heading_ = 0;
  clear_has_obj_heading();
}
inline float MeObject::obj_heading() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_heading)
  return obj_heading_;
}
inline void MeObject::set_obj_heading(float value) {
  set_has_obj_heading();
  obj_heading_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_heading)
}

// optional bool obj_heading_v = 73;
inline bool MeObject::has_obj_heading_v() const {
  return (_has_bits_[2] & 0x00000040u) != 0;
}
inline void MeObject::set_has_obj_heading_v() {
  _has_bits_[2] |= 0x00000040u;
}
inline void MeObject::clear_has_obj_heading_v() {
  _has_bits_[2] &= ~0x00000040u;
}
inline void MeObject::clear_obj_heading_v() {
  obj_heading_v_ = false;
  clear_has_obj_heading_v();
}
inline bool MeObject::obj_heading_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_heading_v)
  return obj_heading_v_;
}
inline void MeObject::set_obj_heading_v(bool value) {
  set_has_obj_heading_v();
  obj_heading_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_heading_v)
}

// optional float obj_heading_std = 74;
inline bool MeObject::has_obj_heading_std() const {
  return (_has_bits_[2] & 0x00000400u) != 0;
}
inline void MeObject::set_has_obj_heading_std() {
  _has_bits_[2] |= 0x00000400u;
}
inline void MeObject::clear_has_obj_heading_std() {
  _has_bits_[2] &= ~0x00000400u;
}
inline void MeObject::clear_obj_heading_std() {
  obj_heading_std_ = 0;
  clear_has_obj_heading_std();
}
inline float MeObject::obj_heading_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_heading_std)
  return obj_heading_std_;
}
inline void MeObject::set_obj_heading_std(float value) {
  set_has_obj_heading_std();
  obj_heading_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_heading_std)
}

// optional bool reserved_10 = 75;
inline bool MeObject::has_reserved_10() const {
  return (_has_bits_[2] & 0x00000080u) != 0;
}
inline void MeObject::set_has_reserved_10() {
  _has_bits_[2] |= 0x00000080u;
}
inline void MeObject::clear_has_reserved_10() {
  _has_bits_[2] &= ~0x00000080u;
}
inline void MeObject::clear_reserved_10() {
  reserved_10_ = false;
  clear_has_reserved_10();
}
inline bool MeObject::reserved_10() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_10)
  return reserved_10_;
}
inline void MeObject::set_reserved_10(bool value) {
  set_has_reserved_10();
  reserved_10_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_10)
}

// optional float obj_angle_rate = 76;
inline bool MeObject::has_obj_angle_rate() const {
  return (_has_bits_[2] & 0x00000800u) != 0;
}
inline void MeObject::set_has_obj_angle_rate() {
  _has_bits_[2] |= 0x00000800u;
}
inline void MeObject::clear_has_obj_angle_rate() {
  _has_bits_[2] &= ~0x00000800u;
}
inline void MeObject::clear_obj_angle_rate() {
  obj_angle_rate_ = 0;
  clear_has_obj_angle_rate();
}
inline float MeObject::obj_angle_rate() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_rate)
  return obj_angle_rate_;
}
inline void MeObject::set_obj_angle_rate(float value) {
  set_has_obj_angle_rate();
  obj_angle_rate_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_rate)
}

// optional bool obj_angle_rate_v = 77;
inline bool MeObject::has_obj_angle_rate_v() const {
  return (_has_bits_[2] & 0x00020000u) != 0;
}
inline void MeObject::set_has_obj_angle_rate_v() {
  _has_bits_[2] |= 0x00020000u;
}
inline void MeObject::clear_has_obj_angle_rate_v() {
  _has_bits_[2] &= ~0x00020000u;
}
inline void MeObject::clear_obj_angle_rate_v() {
  obj_angle_rate_v_ = false;
  clear_has_obj_angle_rate_v();
}
inline bool MeObject::obj_angle_rate_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_rate_v)
  return obj_angle_rate_v_;
}
inline void MeObject::set_obj_angle_rate_v(bool value) {
  set_has_obj_angle_rate_v();
  obj_angle_rate_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_rate_v)
}

// optional float obj_angle_rate_std = 78;
inline bool MeObject::has_obj_angle_rate_std() const {
  return (_has_bits_[2] & 0x00001000u) != 0;
}
inline void MeObject::set_has_obj_angle_rate_std() {
  _has_bits_[2] |= 0x00001000u;
}
inline void MeObject::clear_has_obj_angle_rate_std() {
  _has_bits_[2] &= ~0x00001000u;
}
inline void MeObject::clear_obj_angle_rate_std() {
  obj_angle_rate_std_ = 0;
  clear_has_obj_angle_rate_std();
}
inline float MeObject::obj_angle_rate_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_rate_std)
  return obj_angle_rate_std_;
}
inline void MeObject::set_obj_angle_rate_std(float value) {
  set_has_obj_angle_rate_std();
  obj_angle_rate_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_rate_std)
}

// optional int32 reserved_11 = 79;
inline bool MeObject::has_reserved_11() const {
  return (_has_bits_[2] & 0x00002000u) != 0;
}
inline void MeObject::set_has_reserved_11() {
  _has_bits_[2] |= 0x00002000u;
}
inline void MeObject::clear_has_reserved_11() {
  _has_bits_[2] &= ~0x00002000u;
}
inline void MeObject::clear_reserved_11() {
  reserved_11_ = 0;
  clear_has_reserved_11();
}
inline ::google::protobuf::int32 MeObject::reserved_11() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_11)
  return reserved_11_;
}
inline void MeObject::set_reserved_11(::google::protobuf::int32 value) {
  set_has_reserved_11();
  reserved_11_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_11)
}

// optional float obj_angle_right = 80;
inline bool MeObject::has_obj_angle_right() const {
  return (_has_bits_[2] & 0x00004000u) != 0;
}
inline void MeObject::set_has_obj_angle_right() {
  _has_bits_[2] |= 0x00004000u;
}
inline void MeObject::clear_has_obj_angle_right() {
  _has_bits_[2] &= ~0x00004000u;
}
inline void MeObject::clear_obj_angle_right() {
  obj_angle_right_ = 0;
  clear_has_obj_angle_right();
}
inline float MeObject::obj_angle_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_right)
  return obj_angle_right_;
}
inline void MeObject::set_obj_angle_right(float value) {
  set_has_obj_angle_right();
  obj_angle_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_right)
}

// optional bool obj_angle_right_v = 81;
inline bool MeObject::has_obj_angle_right_v() const {
  return (_has_bits_[2] & 0x00040000u) != 0;
}
inline void MeObject::set_has_obj_angle_right_v() {
  _has_bits_[2] |= 0x00040000u;
}
inline void MeObject::clear_has_obj_angle_right_v() {
  _has_bits_[2] &= ~0x00040000u;
}
inline void MeObject::clear_obj_angle_right_v() {
  obj_angle_right_v_ = false;
  clear_has_obj_angle_right_v();
}
inline bool MeObject::obj_angle_right_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_right_v)
  return obj_angle_right_v_;
}
inline void MeObject::set_obj_angle_right_v(bool value) {
  set_has_obj_angle_right_v();
  obj_angle_right_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_right_v)
}

// optional float obj_angle_right_std = 82;
inline bool MeObject::has_obj_angle_right_std() const {
  return (_has_bits_[2] & 0x00008000u) != 0;
}
inline void MeObject::set_has_obj_angle_right_std() {
  _has_bits_[2] |= 0x00008000u;
}
inline void MeObject::clear_has_obj_angle_right_std() {
  _has_bits_[2] &= ~0x00008000u;
}
inline void MeObject::clear_obj_angle_right_std() {
  obj_angle_right_std_ = 0;
  clear_has_obj_angle_right_std();
}
inline float MeObject::obj_angle_right_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_right_std)
  return obj_angle_right_std_;
}
inline void MeObject::set_obj_angle_right_std(float value) {
  set_has_obj_angle_right_std();
  obj_angle_right_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_right_std)
}

// optional int32 reserved_12 = 83;
inline bool MeObject::has_reserved_12() const {
  return (_has_bits_[2] & 0x00010000u) != 0;
}
inline void MeObject::set_has_reserved_12() {
  _has_bits_[2] |= 0x00010000u;
}
inline void MeObject::clear_has_reserved_12() {
  _has_bits_[2] &= ~0x00010000u;
}
inline void MeObject::clear_reserved_12() {
  reserved_12_ = 0;
  clear_has_reserved_12();
}
inline ::google::protobuf::int32 MeObject::reserved_12() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_12)
  return reserved_12_;
}
inline void MeObject::set_reserved_12(::google::protobuf::int32 value) {
  set_has_reserved_12();
  reserved_12_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_12)
}

// optional float obj_angle_left = 84;
inline bool MeObject::has_obj_angle_left() const {
  return (_has_bits_[2] & 0x00200000u) != 0;
}
inline void MeObject::set_has_obj_angle_left() {
  _has_bits_[2] |= 0x00200000u;
}
inline void MeObject::clear_has_obj_angle_left() {
  _has_bits_[2] &= ~0x00200000u;
}
inline void MeObject::clear_obj_angle_left() {
  obj_angle_left_ = 0;
  clear_has_obj_angle_left();
}
inline float MeObject::obj_angle_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_left)
  return obj_angle_left_;
}
inline void MeObject::set_obj_angle_left(float value) {
  set_has_obj_angle_left();
  obj_angle_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_left)
}

// optional bool obj_angle_left_v = 85;
inline bool MeObject::has_obj_angle_left_v() const {
  return (_has_bits_[2] & 0x00080000u) != 0;
}
inline void MeObject::set_has_obj_angle_left_v() {
  _has_bits_[2] |= 0x00080000u;
}
inline void MeObject::clear_has_obj_angle_left_v() {
  _has_bits_[2] &= ~0x00080000u;
}
inline void MeObject::clear_obj_angle_left_v() {
  obj_angle_left_v_ = false;
  clear_has_obj_angle_left_v();
}
inline bool MeObject::obj_angle_left_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_left_v)
  return obj_angle_left_v_;
}
inline void MeObject::set_obj_angle_left_v(bool value) {
  set_has_obj_angle_left_v();
  obj_angle_left_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_left_v)
}

// optional float obj_angle_left_std = 86;
inline bool MeObject::has_obj_angle_left_std() const {
  return (_has_bits_[2] & 0x00400000u) != 0;
}
inline void MeObject::set_has_obj_angle_left_std() {
  _has_bits_[2] |= 0x00400000u;
}
inline void MeObject::clear_has_obj_angle_left_std() {
  _has_bits_[2] &= ~0x00400000u;
}
inline void MeObject::clear_obj_angle_left_std() {
  obj_angle_left_std_ = 0;
  clear_has_obj_angle_left_std();
}
inline float MeObject::obj_angle_left_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_left_std)
  return obj_angle_left_std_;
}
inline void MeObject::set_obj_angle_left_std(float value) {
  set_has_obj_angle_left_std();
  obj_angle_left_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_left_std)
}

// optional int32 reserved_13 = 87;
inline bool MeObject::has_reserved_13() const {
  return (_has_bits_[2] & 0x00800000u) != 0;
}
inline void MeObject::set_has_reserved_13() {
  _has_bits_[2] |= 0x00800000u;
}
inline void MeObject::clear_has_reserved_13() {
  _has_bits_[2] &= ~0x00800000u;
}
inline void MeObject::clear_reserved_13() {
  reserved_13_ = 0;
  clear_has_reserved_13();
}
inline ::google::protobuf::int32 MeObject::reserved_13() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_13)
  return reserved_13_;
}
inline void MeObject::set_reserved_13(::google::protobuf::int32 value) {
  set_has_reserved_13();
  reserved_13_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_13)
}

// optional float obj_angle_side = 88;
inline bool MeObject::has_obj_angle_side() const {
  return (_has_bits_[2] & 0x01000000u) != 0;
}
inline void MeObject::set_has_obj_angle_side() {
  _has_bits_[2] |= 0x01000000u;
}
inline void MeObject::clear_has_obj_angle_side() {
  _has_bits_[2] &= ~0x01000000u;
}
inline void MeObject::clear_obj_angle_side() {
  obj_angle_side_ = 0;
  clear_has_obj_angle_side();
}
inline float MeObject::obj_angle_side() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_side)
  return obj_angle_side_;
}
inline void MeObject::set_obj_angle_side(float value) {
  set_has_obj_angle_side();
  obj_angle_side_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_side)
}

// optional bool obj_angle_side_v = 89;
inline bool MeObject::has_obj_angle_side_v() const {
  return (_has_bits_[2] & 0x00100000u) != 0;
}
inline void MeObject::set_has_obj_angle_side_v() {
  _has_bits_[2] |= 0x00100000u;
}
inline void MeObject::clear_has_obj_angle_side_v() {
  _has_bits_[2] &= ~0x00100000u;
}
inline void MeObject::clear_obj_angle_side_v() {
  obj_angle_side_v_ = false;
  clear_has_obj_angle_side_v();
}
inline bool MeObject::obj_angle_side_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_side_v)
  return obj_angle_side_v_;
}
inline void MeObject::set_obj_angle_side_v(bool value) {
  set_has_obj_angle_side_v();
  obj_angle_side_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_side_v)
}

// optional float obj_angle_side_std = 90;
inline bool MeObject::has_obj_angle_side_std() const {
  return (_has_bits_[2] & 0x02000000u) != 0;
}
inline void MeObject::set_has_obj_angle_side_std() {
  _has_bits_[2] |= 0x02000000u;
}
inline void MeObject::clear_has_obj_angle_side_std() {
  _has_bits_[2] &= ~0x02000000u;
}
inline void MeObject::clear_obj_angle_side_std() {
  obj_angle_side_std_ = 0;
  clear_has_obj_angle_side_std();
}
inline float MeObject::obj_angle_side_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_side_std)
  return obj_angle_side_std_;
}
inline void MeObject::set_obj_angle_side_std(float value) {
  set_has_obj_angle_side_std();
  obj_angle_side_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_side_std)
}

// optional int32 reserved_14 = 91;
inline bool MeObject::has_reserved_14() const {
  return (_has_bits_[2] & 0x04000000u) != 0;
}
inline void MeObject::set_has_reserved_14() {
  _has_bits_[2] |= 0x04000000u;
}
inline void MeObject::clear_has_reserved_14() {
  _has_bits_[2] &= ~0x04000000u;
}
inline void MeObject::clear_reserved_14() {
  reserved_14_ = 0;
  clear_has_reserved_14();
}
inline ::google::protobuf::int32 MeObject::reserved_14() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.reserved_14)
  return reserved_14_;
}
inline void MeObject::set_reserved_14(::google::protobuf::int32 value) {
  set_has_reserved_14();
  reserved_14_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.reserved_14)
}

// optional float obj_angle_mid = 92;
inline bool MeObject::has_obj_angle_mid() const {
  return (_has_bits_[2] & 0x08000000u) != 0;
}
inline void MeObject::set_has_obj_angle_mid() {
  _has_bits_[2] |= 0x08000000u;
}
inline void MeObject::clear_has_obj_angle_mid() {
  _has_bits_[2] &= ~0x08000000u;
}
inline void MeObject::clear_obj_angle_mid() {
  obj_angle_mid_ = 0;
  clear_has_obj_angle_mid();
}
inline float MeObject::obj_angle_mid() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_mid)
  return obj_angle_mid_;
}
inline void MeObject::set_obj_angle_mid(float value) {
  set_has_obj_angle_mid();
  obj_angle_mid_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_mid)
}

// optional bool obj_angle_mid_v = 93;
inline bool MeObject::has_obj_angle_mid_v() const {
  return (_has_bits_[2] & 0x20000000u) != 0;
}
inline void MeObject::set_has_obj_angle_mid_v() {
  _has_bits_[2] |= 0x20000000u;
}
inline void MeObject::clear_has_obj_angle_mid_v() {
  _has_bits_[2] &= ~0x20000000u;
}
inline void MeObject::clear_obj_angle_mid_v() {
  obj_angle_mid_v_ = false;
  clear_has_obj_angle_mid_v();
}
inline bool MeObject::obj_angle_mid_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_mid_v)
  return obj_angle_mid_v_;
}
inline void MeObject::set_obj_angle_mid_v(bool value) {
  set_has_obj_angle_mid_v();
  obj_angle_mid_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_mid_v)
}

// optional float obj_angle_mid_std = 94;
inline bool MeObject::has_obj_angle_mid_std() const {
  return (_has_bits_[2] & 0x10000000u) != 0;
}
inline void MeObject::set_has_obj_angle_mid_std() {
  _has_bits_[2] |= 0x10000000u;
}
inline void MeObject::clear_has_obj_angle_mid_std() {
  _has_bits_[2] &= ~0x10000000u;
}
inline void MeObject::clear_obj_angle_mid_std() {
  obj_angle_mid_std_ = 0;
  clear_has_obj_angle_mid_std();
}
inline float MeObject::obj_angle_mid_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_angle_mid_std)
  return obj_angle_mid_std_;
}
inline void MeObject::set_obj_angle_mid_std(float value) {
  set_has_obj_angle_mid_std();
  obj_angle_mid_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_angle_mid_std)
}

// optional bool obj_is_in_drivable_area = 95;
inline bool MeObject::has_obj_is_in_drivable_area() const {
  return (_has_bits_[2] & 0x40000000u) != 0;
}
inline void MeObject::set_has_obj_is_in_drivable_area() {
  _has_bits_[2] |= 0x40000000u;
}
inline void MeObject::clear_has_obj_is_in_drivable_area() {
  _has_bits_[2] &= ~0x40000000u;
}
inline void MeObject::clear_obj_is_in_drivable_area() {
  obj_is_in_drivable_area_ = false;
  clear_has_obj_is_in_drivable_area();
}
inline bool MeObject::obj_is_in_drivable_area() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_in_drivable_area)
  return obj_is_in_drivable_area_;
}
inline void MeObject::set_obj_is_in_drivable_area(bool value) {
  set_has_obj_is_in_drivable_area();
  obj_is_in_drivable_area_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_in_drivable_area)
}

// optional bool obj_is_in_drivable_area_v = 96;
inline bool MeObject::has_obj_is_in_drivable_area_v() const {
  return (_has_bits_[2] & 0x80000000u) != 0;
}
inline void MeObject::set_has_obj_is_in_drivable_area_v() {
  _has_bits_[2] |= 0x80000000u;
}
inline void MeObject::clear_has_obj_is_in_drivable_area_v() {
  _has_bits_[2] &= ~0x80000000u;
}
inline void MeObject::clear_obj_is_in_drivable_area_v() {
  obj_is_in_drivable_area_v_ = false;
  clear_has_obj_is_in_drivable_area_v();
}
inline bool MeObject::obj_is_in_drivable_area_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_in_drivable_area_v)
  return obj_is_in_drivable_area_v_;
}
inline void MeObject::set_obj_is_in_drivable_area_v(bool value) {
  set_has_obj_is_in_drivable_area_v();
  obj_is_in_drivable_area_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_in_drivable_area_v)
}

// optional bool obj_is_veryclose = 97;
inline bool MeObject::has_obj_is_veryclose() const {
  return (_has_bits_[3] & 0x00000001u) != 0;
}
inline void MeObject::set_has_obj_is_veryclose() {
  _has_bits_[3] |= 0x00000001u;
}
inline void MeObject::clear_has_obj_is_veryclose() {
  _has_bits_[3] &= ~0x00000001u;
}
inline void MeObject::clear_obj_is_veryclose() {
  obj_is_veryclose_ = false;
  clear_has_obj_is_veryclose();
}
inline bool MeObject::obj_is_veryclose() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_veryclose)
  return obj_is_veryclose_;
}
inline void MeObject::set_obj_is_veryclose(bool value) {
  set_has_obj_is_veryclose();
  obj_is_veryclose_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_veryclose)
}

// optional bool obj_is_veryclose_v = 98;
inline bool MeObject::has_obj_is_veryclose_v() const {
  return (_has_bits_[3] & 0x00000002u) != 0;
}
inline void MeObject::set_has_obj_is_veryclose_v() {
  _has_bits_[3] |= 0x00000002u;
}
inline void MeObject::clear_has_obj_is_veryclose_v() {
  _has_bits_[3] &= ~0x00000002u;
}
inline void MeObject::clear_obj_is_veryclose_v() {
  obj_is_veryclose_v_ = false;
  clear_has_obj_is_veryclose_v();
}
inline bool MeObject::obj_is_veryclose_v() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.MeObject.obj_is_veryclose_v)
  return obj_is_veryclose_v_;
}
inline void MeObject::set_obj_is_veryclose_v(bool value) {
  set_has_obj_is_veryclose_v();
  obj_is_veryclose_v_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.MeObject.obj_is_veryclose_v)
}

// -------------------------------------------------------------------

// SLDCommon

// optional int32 sld_zero_byte = 1;
inline bool SLDCommon::has_sld_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SLDCommon::set_has_sld_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SLDCommon::clear_has_sld_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SLDCommon::clear_sld_zero_byte() {
  sld_zero_byte_ = 0;
  clear_has_sld_zero_byte();
}
inline ::google::protobuf::int32 SLDCommon::sld_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_zero_byte)
  return sld_zero_byte_;
}
inline void SLDCommon::set_sld_zero_byte(::google::protobuf::int32 value) {
  set_has_sld_zero_byte();
  sld_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_zero_byte)
}

// optional int32 sld_protocol_version = 2;
inline bool SLDCommon::has_sld_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SLDCommon::set_has_sld_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SLDCommon::clear_has_sld_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SLDCommon::clear_sld_protocol_version() {
  sld_protocol_version_ = 0;
  clear_has_sld_protocol_version();
}
inline ::google::protobuf::int32 SLDCommon::sld_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_protocol_version)
  return sld_protocol_version_;
}
inline void SLDCommon::set_sld_protocol_version(::google::protobuf::int32 value) {
  set_has_sld_protocol_version();
  sld_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_protocol_version)
}

// optional int32 sld_sync_id = 3;
inline bool SLDCommon::has_sld_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SLDCommon::set_has_sld_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SLDCommon::clear_has_sld_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SLDCommon::clear_sld_sync_id() {
  sld_sync_id_ = 0;
  clear_has_sld_sync_id();
}
inline ::google::protobuf::int32 SLDCommon::sld_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_sync_id)
  return sld_sync_id_;
}
inline void SLDCommon::set_sld_sync_id(::google::protobuf::int32 value) {
  set_has_sld_sync_id();
  sld_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_sync_id)
}

// optional int32 sld_num_of_lanes_close_left = 4;
inline bool SLDCommon::has_sld_num_of_lanes_close_left() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SLDCommon::set_has_sld_num_of_lanes_close_left() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SLDCommon::clear_has_sld_num_of_lanes_close_left() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SLDCommon::clear_sld_num_of_lanes_close_left() {
  sld_num_of_lanes_close_left_ = 0;
  clear_has_sld_num_of_lanes_close_left();
}
inline ::google::protobuf::int32 SLDCommon::sld_num_of_lanes_close_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_close_left)
  return sld_num_of_lanes_close_left_;
}
inline void SLDCommon::set_sld_num_of_lanes_close_left(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_close_left();
  sld_num_of_lanes_close_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_close_left)
}

// optional int32 sld_num_of_lanes_close_right = 5;
inline bool SLDCommon::has_sld_num_of_lanes_close_right() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SLDCommon::set_has_sld_num_of_lanes_close_right() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SLDCommon::clear_has_sld_num_of_lanes_close_right() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SLDCommon::clear_sld_num_of_lanes_close_right() {
  sld_num_of_lanes_close_right_ = 0;
  clear_has_sld_num_of_lanes_close_right();
}
inline ::google::protobuf::int32 SLDCommon::sld_num_of_lanes_close_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_close_right)
  return sld_num_of_lanes_close_right_;
}
inline void SLDCommon::set_sld_num_of_lanes_close_right(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_close_right();
  sld_num_of_lanes_close_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_close_right)
}

// optional int32 reserved_1 = 6;
inline bool SLDCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SLDCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SLDCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SLDCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 SLDCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.reserved_1)
  return reserved_1_;
}
inline void SLDCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.reserved_1)
}

// optional int32 sld_num_of_lanes_far_left = 7;
inline bool SLDCommon::has_sld_num_of_lanes_far_left() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SLDCommon::set_has_sld_num_of_lanes_far_left() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SLDCommon::clear_has_sld_num_of_lanes_far_left() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SLDCommon::clear_sld_num_of_lanes_far_left() {
  sld_num_of_lanes_far_left_ = 0;
  clear_has_sld_num_of_lanes_far_left();
}
inline ::google::protobuf::int32 SLDCommon::sld_num_of_lanes_far_left() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_far_left)
  return sld_num_of_lanes_far_left_;
}
inline void SLDCommon::set_sld_num_of_lanes_far_left(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_far_left();
  sld_num_of_lanes_far_left_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_far_left)
}

// optional int32 sld_num_of_lanes_far_right = 8;
inline bool SLDCommon::has_sld_num_of_lanes_far_right() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SLDCommon::set_has_sld_num_of_lanes_far_right() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SLDCommon::clear_has_sld_num_of_lanes_far_right() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SLDCommon::clear_sld_num_of_lanes_far_right() {
  sld_num_of_lanes_far_right_ = 0;
  clear_has_sld_num_of_lanes_far_right();
}
inline ::google::protobuf::int32 SLDCommon::sld_num_of_lanes_far_right() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_num_of_lanes_far_right)
  return sld_num_of_lanes_far_right_;
}
inline void SLDCommon::set_sld_num_of_lanes_far_right(::google::protobuf::int32 value) {
  set_has_sld_num_of_lanes_far_right();
  sld_num_of_lanes_far_right_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_num_of_lanes_far_right)
}

// optional bool sld_has_shoulder_right_close = 9;
inline bool SLDCommon::has_sld_has_shoulder_right_close() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SLDCommon::set_has_sld_has_shoulder_right_close() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SLDCommon::clear_has_sld_has_shoulder_right_close() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SLDCommon::clear_sld_has_shoulder_right_close() {
  sld_has_shoulder_right_close_ = false;
  clear_has_sld_has_shoulder_right_close();
}
inline bool SLDCommon::sld_has_shoulder_right_close() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_has_shoulder_right_close)
  return sld_has_shoulder_right_close_;
}
inline void SLDCommon::set_sld_has_shoulder_right_close(bool value) {
  set_has_sld_has_shoulder_right_close();
  sld_has_shoulder_right_close_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_has_shoulder_right_close)
}

// optional float sld_shoulder_right_width_close = 10;
inline bool SLDCommon::has_sld_shoulder_right_width_close() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SLDCommon::set_has_sld_shoulder_right_width_close() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SLDCommon::clear_has_sld_shoulder_right_width_close() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SLDCommon::clear_sld_shoulder_right_width_close() {
  sld_shoulder_right_width_close_ = 0;
  clear_has_sld_shoulder_right_width_close();
}
inline float SLDCommon::sld_shoulder_right_width_close() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_shoulder_right_width_close)
  return sld_shoulder_right_width_close_;
}
inline void SLDCommon::set_sld_shoulder_right_width_close(float value) {
  set_has_sld_shoulder_right_width_close();
  sld_shoulder_right_width_close_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_shoulder_right_width_close)
}

// optional bool sld_has_shoulder_right_far = 11;
inline bool SLDCommon::has_sld_has_shoulder_right_far() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SLDCommon::set_has_sld_has_shoulder_right_far() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SLDCommon::clear_has_sld_has_shoulder_right_far() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SLDCommon::clear_sld_has_shoulder_right_far() {
  sld_has_shoulder_right_far_ = false;
  clear_has_sld_has_shoulder_right_far();
}
inline bool SLDCommon::sld_has_shoulder_right_far() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_has_shoulder_right_far)
  return sld_has_shoulder_right_far_;
}
inline void SLDCommon::set_sld_has_shoulder_right_far(bool value) {
  set_has_sld_has_shoulder_right_far();
  sld_has_shoulder_right_far_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_has_shoulder_right_far)
}

// optional float sld_shoulder_right_width_far = 12;
inline bool SLDCommon::has_sld_shoulder_right_width_far() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SLDCommon::set_has_sld_shoulder_right_width_far() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SLDCommon::clear_has_sld_shoulder_right_width_far() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SLDCommon::clear_sld_shoulder_right_width_far() {
  sld_shoulder_right_width_far_ = 0;
  clear_has_sld_shoulder_right_width_far();
}
inline float SLDCommon::sld_shoulder_right_width_far() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_shoulder_right_width_far)
  return sld_shoulder_right_width_far_;
}
inline void SLDCommon::set_sld_shoulder_right_width_far(float value) {
  set_has_sld_shoulder_right_width_far();
  sld_shoulder_right_width_far_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_shoulder_right_width_far)
}

// optional int32 sld_header_buffer = 13;
inline bool SLDCommon::has_sld_header_buffer() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SLDCommon::set_has_sld_header_buffer() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SLDCommon::clear_has_sld_header_buffer() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SLDCommon::clear_sld_header_buffer() {
  sld_header_buffer_ = 0;
  clear_has_sld_header_buffer();
}
inline ::google::protobuf::int32 SLDCommon::sld_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLDCommon.sld_header_buffer)
  return sld_header_buffer_;
}
inline void SLDCommon::set_sld_header_buffer(::google::protobuf::int32 value) {
  set_has_sld_header_buffer();
  sld_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLDCommon.sld_header_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_SL_Descrip

// optional .atd.common.Header header = 1;
inline bool Dt_Record_SL_Descrip::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_SL_Descrip::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_SL_Descrip::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_SL_Descrip::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_SL_Descrip::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_SL_Descrip::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_SL_Descrip::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SL_Descrip.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_SL_Descrip::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SL_Descrip.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_SL_Descrip::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_SL_Descrip::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_SL_Descrip::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_SL_Descrip::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_SL_Descrip::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_SL_Descrip::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_SL_Descrip::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_SL_Descrip::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SL_Descrip.reservedmsg)
}

// optional .atd.meprocess.SLDCommon stsldcommon = 3;
inline bool Dt_Record_SL_Descrip::has_stsldcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_SL_Descrip::set_has_stsldcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_SL_Descrip::clear_has_stsldcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_SL_Descrip::clear_stsldcommon() {
  if (stsldcommon_ != NULL) stsldcommon_->::atd::meprocess::SLDCommon::Clear();
  clear_has_stsldcommon();
}
inline const ::atd::meprocess::SLDCommon& Dt_Record_SL_Descrip::stsldcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
  return stsldcommon_ != NULL ? *stsldcommon_
                         : *::atd::meprocess::SLDCommon::internal_default_instance();
}
inline ::atd::meprocess::SLDCommon* Dt_Record_SL_Descrip::mutable_stsldcommon() {
  set_has_stsldcommon();
  if (stsldcommon_ == NULL) {
    stsldcommon_ = new ::atd::meprocess::SLDCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
  return stsldcommon_;
}
inline ::atd::meprocess::SLDCommon* Dt_Record_SL_Descrip::release_stsldcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
  clear_has_stsldcommon();
  ::atd::meprocess::SLDCommon* temp = stsldcommon_;
  stsldcommon_ = NULL;
  return temp;
}
inline void Dt_Record_SL_Descrip::set_allocated_stsldcommon(::atd::meprocess::SLDCommon* stsldcommon) {
  delete stsldcommon_;
  stsldcommon_ = stsldcommon;
  if (stsldcommon) {
    set_has_stsldcommon();
  } else {
    clear_has_stsldcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SL_Descrip.stsldcommon)
}

// repeated .atd.meprocess.SLD dt_array_10_sld = 4;
inline int Dt_Record_SL_Descrip::dt_array_10_sld_size() const {
  return dt_array_10_sld_.size();
}
inline void Dt_Record_SL_Descrip::clear_dt_array_10_sld() {
  dt_array_10_sld_.Clear();
}
inline const ::atd::meprocess::SLD& Dt_Record_SL_Descrip::dt_array_10_sld(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_.Get(index);
}
inline ::atd::meprocess::SLD* Dt_Record_SL_Descrip::mutable_dt_array_10_sld(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_.Mutable(index);
}
inline ::atd::meprocess::SLD* Dt_Record_SL_Descrip::add_dt_array_10_sld() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SLD >*
Dt_Record_SL_Descrip::mutable_dt_array_10_sld() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return &dt_array_10_sld_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SLD >&
Dt_Record_SL_Descrip::dt_array_10_sld() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_SL_Descrip.dt_array_10_sld)
  return dt_array_10_sld_;
}

// -------------------------------------------------------------------

// SLD

// optional float sld_existence_probability_0 = 1;
inline bool SLD::has_sld_existence_probability_0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SLD::set_has_sld_existence_probability_0() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SLD::clear_has_sld_existence_probability_0() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SLD::clear_sld_existence_probability_0() {
  sld_existence_probability_0_ = 0;
  clear_has_sld_existence_probability_0();
}
inline float SLD::sld_existence_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_existence_probability_0)
  return sld_existence_probability_0_;
}
inline void SLD::set_sld_existence_probability_0(float value) {
  set_has_sld_existence_probability_0();
  sld_existence_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_existence_probability_0)
}

// optional float sld_nonexistence_probability_0 = 2;
inline bool SLD::has_sld_nonexistence_probability_0() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SLD::set_has_sld_nonexistence_probability_0() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SLD::clear_has_sld_nonexistence_probability_0() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SLD::clear_sld_nonexistence_probability_0() {
  sld_nonexistence_probability_0_ = 0;
  clear_has_sld_nonexistence_probability_0();
}
inline float SLD::sld_nonexistence_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_nonexistence_probability_0)
  return sld_nonexistence_probability_0_;
}
inline void SLD::set_sld_nonexistence_probability_0(float value) {
  set_has_sld_nonexistence_probability_0();
  sld_nonexistence_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_nonexistence_probability_0)
}

// optional .atd.meprocess.SLD.Sld_role_0Type sld_role_0 = 3;
inline bool SLD::has_sld_role_0() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SLD::set_has_sld_role_0() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SLD::clear_has_sld_role_0() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SLD::clear_sld_role_0() {
  sld_role_0_ = 0;
  clear_has_sld_role_0();
}
inline ::atd::meprocess::SLD_Sld_role_0Type SLD::sld_role_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_role_0)
  return static_cast< ::atd::meprocess::SLD_Sld_role_0Type >(sld_role_0_);
}
inline void SLD::set_sld_role_0(::atd::meprocess::SLD_Sld_role_0Type value) {
  assert(::atd::meprocess::SLD_Sld_role_0Type_IsValid(value));
  set_has_sld_role_0();
  sld_role_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_role_0)
}

// optional .atd.meprocess.SLD.Sld_view_0Type sld_view_0 = 4;
inline bool SLD::has_sld_view_0() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SLD::set_has_sld_view_0() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SLD::clear_has_sld_view_0() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SLD::clear_sld_view_0() {
  sld_view_0_ = 0;
  clear_has_sld_view_0();
}
inline ::atd::meprocess::SLD_Sld_view_0Type SLD::sld_view_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_view_0)
  return static_cast< ::atd::meprocess::SLD_Sld_view_0Type >(sld_view_0_);
}
inline void SLD::set_sld_view_0(::atd::meprocess::SLD_Sld_view_0Type value) {
  assert(::atd::meprocess::SLD_Sld_view_0Type_IsValid(value));
  set_has_sld_view_0();
  sld_view_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_view_0)
}

// optional int32 sld_orientation_0 = 5;
inline bool SLD::has_sld_orientation_0() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SLD::set_has_sld_orientation_0() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SLD::clear_has_sld_orientation_0() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SLD::clear_sld_orientation_0() {
  sld_orientation_0_ = 0;
  clear_has_sld_orientation_0();
}
inline ::google::protobuf::int32 SLD::sld_orientation_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_orientation_0)
  return sld_orientation_0_;
}
inline void SLD::set_sld_orientation_0(::google::protobuf::int32 value) {
  set_has_sld_orientation_0();
  sld_orientation_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_orientation_0)
}

// optional float sld_orientation_probability_0 = 6;
inline bool SLD::has_sld_orientation_probability_0() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SLD::set_has_sld_orientation_probability_0() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SLD::clear_has_sld_orientation_probability_0() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SLD::clear_sld_orientation_probability_0() {
  sld_orientation_probability_0_ = 0;
  clear_has_sld_orientation_probability_0();
}
inline float SLD::sld_orientation_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_orientation_probability_0)
  return sld_orientation_probability_0_;
}
inline void SLD::set_sld_orientation_probability_0(float value) {
  set_has_sld_orientation_probability_0();
  sld_orientation_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_orientation_probability_0)
}

// optional int32 sld_direction_0 = 7;
inline bool SLD::has_sld_direction_0() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SLD::set_has_sld_direction_0() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SLD::clear_has_sld_direction_0() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SLD::clear_sld_direction_0() {
  sld_direction_0_ = 0;
  clear_has_sld_direction_0();
}
inline ::google::protobuf::int32 SLD::sld_direction_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_direction_0)
  return sld_direction_0_;
}
inline void SLD::set_sld_direction_0(::google::protobuf::int32 value) {
  set_has_sld_direction_0();
  sld_direction_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_direction_0)
}

// optional bool reserved_2 = 8;
inline bool SLD::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SLD::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SLD::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SLD::clear_reserved_2() {
  reserved_2_ = false;
  clear_has_reserved_2();
}
inline bool SLD::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.reserved_2)
  return reserved_2_;
}
inline void SLD::set_reserved_2(bool value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.reserved_2)
}

// optional float sld_direction_probability_0 = 9;
inline bool SLD::has_sld_direction_probability_0() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SLD::set_has_sld_direction_probability_0() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SLD::clear_has_sld_direction_probability_0() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SLD::clear_sld_direction_probability_0() {
  sld_direction_probability_0_ = 0;
  clear_has_sld_direction_probability_0();
}
inline float SLD::sld_direction_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_direction_probability_0)
  return sld_direction_probability_0_;
}
inline void SLD::set_sld_direction_probability_0(float value) {
  set_has_sld_direction_probability_0();
  sld_direction_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_direction_probability_0)
}

// optional int32 sld_type_0 = 10;
inline bool SLD::has_sld_type_0() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SLD::set_has_sld_type_0() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SLD::clear_has_sld_type_0() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SLD::clear_sld_type_0() {
  sld_type_0_ = 0;
  clear_has_sld_type_0();
}
inline ::google::protobuf::int32 SLD::sld_type_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_type_0)
  return sld_type_0_;
}
inline void SLD::set_sld_type_0(::google::protobuf::int32 value) {
  set_has_sld_type_0();
  sld_type_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_type_0)
}

// optional float sld_type_probability_0 = 11;
inline bool SLD::has_sld_type_probability_0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SLD::set_has_sld_type_probability_0() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SLD::clear_has_sld_type_probability_0() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SLD::clear_sld_type_probability_0() {
  sld_type_probability_0_ = 0;
  clear_has_sld_type_probability_0();
}
inline float SLD::sld_type_probability_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_type_probability_0)
  return sld_type_probability_0_;
}
inline void SLD::set_sld_type_probability_0(float value) {
  set_has_sld_type_probability_0();
  sld_type_probability_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_type_probability_0)
}

// optional int32 sld_buffer_0 = 12;
inline bool SLD::has_sld_buffer_0() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SLD::set_has_sld_buffer_0() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SLD::clear_has_sld_buffer_0() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SLD::clear_sld_buffer_0() {
  sld_buffer_0_ = 0;
  clear_has_sld_buffer_0();
}
inline ::google::protobuf::int32 SLD::sld_buffer_0() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLD.sld_buffer_0)
  return sld_buffer_0_;
}
inline void SLD::set_sld_buffer_0(::google::protobuf::int32 value) {
  set_has_sld_buffer_0();
  sld_buffer_0_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLD.sld_buffer_0)
}

// -------------------------------------------------------------------

// SLCommon

// optional int32 sl_zero_byte = 1;
inline bool SLCommon::has_sl_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SLCommon::set_has_sl_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SLCommon::clear_has_sl_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SLCommon::clear_sl_zero_byte() {
  sl_zero_byte_ = 0;
  clear_has_sl_zero_byte();
}
inline ::google::protobuf::int32 SLCommon::sl_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_zero_byte)
  return sl_zero_byte_;
}
inline void SLCommon::set_sl_zero_byte(::google::protobuf::int32 value) {
  set_has_sl_zero_byte();
  sl_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_zero_byte)
}

// optional int32 sl_protocol_version = 2;
inline bool SLCommon::has_sl_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SLCommon::set_has_sl_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SLCommon::clear_has_sl_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SLCommon::clear_sl_protocol_version() {
  sl_protocol_version_ = 0;
  clear_has_sl_protocol_version();
}
inline ::google::protobuf::int32 SLCommon::sl_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_protocol_version)
  return sl_protocol_version_;
}
inline void SLCommon::set_sl_protocol_version(::google::protobuf::int32 value) {
  set_has_sl_protocol_version();
  sl_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_protocol_version)
}

// optional int32 sl_sync_id = 3;
inline bool SLCommon::has_sl_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SLCommon::set_has_sl_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SLCommon::clear_has_sl_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SLCommon::clear_sl_sync_id() {
  sl_sync_id_ = 0;
  clear_has_sl_sync_id();
}
inline ::google::protobuf::int32 SLCommon::sl_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_sync_id)
  return sl_sync_id_;
}
inline void SLCommon::set_sl_sync_id(::google::protobuf::int32 value) {
  set_has_sl_sync_id();
  sl_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_sync_id)
}

// optional int32 sl_approved_lines = 4;
inline bool SLCommon::has_sl_approved_lines() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SLCommon::set_has_sl_approved_lines() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SLCommon::clear_has_sl_approved_lines() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SLCommon::clear_sl_approved_lines() {
  sl_approved_lines_ = 0;
  clear_has_sl_approved_lines();
}
inline ::google::protobuf::int32 SLCommon::sl_approved_lines() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_approved_lines)
  return sl_approved_lines_;
}
inline void SLCommon::set_sl_approved_lines(::google::protobuf::int32 value) {
  set_has_sl_approved_lines();
  sl_approved_lines_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_approved_lines)
}

// optional int32 sl_header_buffer = 5;
inline bool SLCommon::has_sl_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SLCommon::set_has_sl_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SLCommon::clear_has_sl_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SLCommon::clear_sl_header_buffer() {
  sl_header_buffer_ = 0;
  clear_has_sl_header_buffer();
}
inline ::google::protobuf::int32 SLCommon::sl_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SLCommon.sl_header_buffer)
  return sl_header_buffer_;
}
inline void SLCommon::set_sl_header_buffer(::google::protobuf::int32 value) {
  set_has_sl_header_buffer();
  sl_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SLCommon.sl_header_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_SematicLine

// optional .atd.common.Header header = 1;
inline bool Dt_Record_SematicLine::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_SematicLine::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_SematicLine::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_SematicLine::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_SematicLine::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_SematicLine::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_SematicLine::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicLine.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_SematicLine::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicLine.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_SematicLine::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_SematicLine::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_SematicLine::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_SematicLine::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_SematicLine::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_SematicLine::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_SematicLine::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_SematicLine::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicLine.reservedmsg)
}

// optional .atd.meprocess.SLCommon stslcommon = 3;
inline bool Dt_Record_SematicLine::has_stslcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_SematicLine::set_has_stslcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_SematicLine::clear_has_stslcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_SematicLine::clear_stslcommon() {
  if (stslcommon_ != NULL) stslcommon_->::atd::meprocess::SLCommon::Clear();
  clear_has_stslcommon();
}
inline const ::atd::meprocess::SLCommon& Dt_Record_SematicLine::stslcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.stslcommon)
  return stslcommon_ != NULL ? *stslcommon_
                         : *::atd::meprocess::SLCommon::internal_default_instance();
}
inline ::atd::meprocess::SLCommon* Dt_Record_SematicLine::mutable_stslcommon() {
  set_has_stslcommon();
  if (stslcommon_ == NULL) {
    stslcommon_ = new ::atd::meprocess::SLCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.stslcommon)
  return stslcommon_;
}
inline ::atd::meprocess::SLCommon* Dt_Record_SematicLine::release_stslcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicLine.stslcommon)
  clear_has_stslcommon();
  ::atd::meprocess::SLCommon* temp = stslcommon_;
  stslcommon_ = NULL;
  return temp;
}
inline void Dt_Record_SematicLine::set_allocated_stslcommon(::atd::meprocess::SLCommon* stslcommon) {
  delete stslcommon_;
  stslcommon_ = stslcommon;
  if (stslcommon) {
    set_has_stslcommon();
  } else {
    clear_has_stslcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicLine.stslcommon)
}

// repeated .atd.meprocess.SematicLine dt_array_10_sematicline = 4;
inline int Dt_Record_SematicLine::dt_array_10_sematicline_size() const {
  return dt_array_10_sematicline_.size();
}
inline void Dt_Record_SematicLine::clear_dt_array_10_sematicline() {
  dt_array_10_sematicline_.Clear();
}
inline const ::atd::meprocess::SematicLine& Dt_Record_SematicLine::dt_array_10_sematicline(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_.Get(index);
}
inline ::atd::meprocess::SematicLine* Dt_Record_SematicLine::mutable_dt_array_10_sematicline(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_.Mutable(index);
}
inline ::atd::meprocess::SematicLine* Dt_Record_SematicLine::add_dt_array_10_sematicline() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicLine >*
Dt_Record_SematicLine::mutable_dt_array_10_sematicline() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return &dt_array_10_sematicline_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicLine >&
Dt_Record_SematicLine::dt_array_10_sematicline() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_SematicLine.dt_array_10_sematicline)
  return dt_array_10_sematicline_;
}

// -------------------------------------------------------------------

// SematicLine

// optional int32 sl_id = 1;
inline bool SematicLine::has_sl_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SematicLine::set_has_sl_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SematicLine::clear_has_sl_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SematicLine::clear_sl_id() {
  sl_id_ = 0;
  clear_has_sl_id();
}
inline ::google::protobuf::int32 SematicLine::sl_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_id)
  return sl_id_;
}
inline void SematicLine::set_sl_id(::google::protobuf::int32 value) {
  set_has_sl_id();
  sl_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_id)
}

// optional .atd.meprocess.SematicLine.Sl_typeType sl_type = 2;
inline bool SematicLine::has_sl_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SematicLine::set_has_sl_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SematicLine::clear_has_sl_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SematicLine::clear_sl_type() {
  sl_type_ = 0;
  clear_has_sl_type();
}
inline ::atd::meprocess::SematicLine_Sl_typeType SematicLine::sl_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_type)
  return static_cast< ::atd::meprocess::SematicLine_Sl_typeType >(sl_type_);
}
inline void SematicLine::set_sl_type(::atd::meprocess::SematicLine_Sl_typeType value) {
  assert(::atd::meprocess::SematicLine_Sl_typeType_IsValid(value));
  set_has_sl_type();
  sl_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_type)
}

// optional .atd.meprocess.SematicLine.Sl_colorType sl_color = 3;
inline bool SematicLine::has_sl_color() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SematicLine::set_has_sl_color() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SematicLine::clear_has_sl_color() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SematicLine::clear_sl_color() {
  sl_color_ = 0;
  clear_has_sl_color();
}
inline ::atd::meprocess::SematicLine_Sl_colorType SematicLine::sl_color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_color)
  return static_cast< ::atd::meprocess::SematicLine_Sl_colorType >(sl_color_);
}
inline void SematicLine::set_sl_color(::atd::meprocess::SematicLine_Sl_colorType value) {
  assert(::atd::meprocess::SematicLine_Sl_colorType_IsValid(value));
  set_has_sl_color();
  sl_color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_color)
}

// optional .atd.meprocess.SematicLine.Sl_measure_statusType sl_measure_status = 4;
inline bool SematicLine::has_sl_measure_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SematicLine::set_has_sl_measure_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SematicLine::clear_has_sl_measure_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SematicLine::clear_sl_measure_status() {
  sl_measure_status_ = 0;
  clear_has_sl_measure_status();
}
inline ::atd::meprocess::SematicLine_Sl_measure_statusType SematicLine::sl_measure_status() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_measure_status)
  return static_cast< ::atd::meprocess::SematicLine_Sl_measure_statusType >(sl_measure_status_);
}
inline void SematicLine::set_sl_measure_status(::atd::meprocess::SematicLine_Sl_measure_statusType value) {
  assert(::atd::meprocess::SematicLine_Sl_measure_statusType_IsValid(value));
  set_has_sl_measure_status();
  sl_measure_status_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_measure_status)
}

// optional float sl_lat_distance = 5;
inline bool SematicLine::has_sl_lat_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SematicLine::set_has_sl_lat_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SematicLine::clear_has_sl_lat_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SematicLine::clear_sl_lat_distance() {
  sl_lat_distance_ = 0;
  clear_has_sl_lat_distance();
}
inline float SematicLine::sl_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_lat_distance)
  return sl_lat_distance_;
}
inline void SematicLine::set_sl_lat_distance(float value) {
  set_has_sl_lat_distance();
  sl_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_lat_distance)
}

// optional float sl_width = 6;
inline bool SematicLine::has_sl_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SematicLine::set_has_sl_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SematicLine::clear_has_sl_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SematicLine::clear_sl_width() {
  sl_width_ = 0;
  clear_has_sl_width();
}
inline float SematicLine::sl_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_width)
  return sl_width_;
}
inline void SematicLine::set_sl_width(float value) {
  set_has_sl_width();
  sl_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_width)
}

// optional float sl_length = 7;
inline bool SematicLine::has_sl_length() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SematicLine::set_has_sl_length() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SematicLine::clear_has_sl_length() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SematicLine::clear_sl_length() {
  sl_length_ = 0;
  clear_has_sl_length();
}
inline float SematicLine::sl_length() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_length)
  return sl_length_;
}
inline void SematicLine::set_sl_length(float value) {
  set_has_sl_length();
  sl_length_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_length)
}

// optional float sl_long_dist = 8;
inline bool SematicLine::has_sl_long_dist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SematicLine::set_has_sl_long_dist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SematicLine::clear_has_sl_long_dist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SematicLine::clear_sl_long_dist() {
  sl_long_dist_ = 0;
  clear_has_sl_long_dist();
}
inline float SematicLine::sl_long_dist() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_long_dist)
  return sl_long_dist_;
}
inline void SematicLine::set_sl_long_dist(float value) {
  set_has_sl_long_dist();
  sl_long_dist_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_long_dist)
}

// optional float sl_long_dist_std = 9;
inline bool SematicLine::has_sl_long_dist_std() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SematicLine::set_has_sl_long_dist_std() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SematicLine::clear_has_sl_long_dist_std() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SematicLine::clear_sl_long_dist_std() {
  sl_long_dist_std_ = 0;
  clear_has_sl_long_dist_std();
}
inline float SematicLine::sl_long_dist_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_long_dist_std)
  return sl_long_dist_std_;
}
inline void SematicLine::set_sl_long_dist_std(float value) {
  set_has_sl_long_dist_std();
  sl_long_dist_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_long_dist_std)
}

// optional bool sl_close_to_junc = 10;
inline bool SematicLine::has_sl_close_to_junc() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SematicLine::set_has_sl_close_to_junc() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SematicLine::clear_has_sl_close_to_junc() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SematicLine::clear_sl_close_to_junc() {
  sl_close_to_junc_ = false;
  clear_has_sl_close_to_junc();
}
inline bool SematicLine::sl_close_to_junc() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_close_to_junc)
  return sl_close_to_junc_;
}
inline void SematicLine::set_sl_close_to_junc(bool value) {
  set_has_sl_close_to_junc();
  sl_close_to_junc_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_close_to_junc)
}

// optional float sl_probability = 11;
inline bool SematicLine::has_sl_probability() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SematicLine::set_has_sl_probability() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SematicLine::clear_has_sl_probability() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SematicLine::clear_sl_probability() {
  sl_probability_ = 0;
  clear_has_sl_probability();
}
inline float SematicLine::sl_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_probability)
  return sl_probability_;
}
inline void SematicLine::set_sl_probability(float value) {
  set_has_sl_probability();
  sl_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_probability)
}

// optional float sl_angle = 12;
inline bool SematicLine::has_sl_angle() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SematicLine::set_has_sl_angle() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SematicLine::clear_has_sl_angle() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SematicLine::clear_sl_angle() {
  sl_angle_ = 0;
  clear_has_sl_angle();
}
inline float SematicLine::sl_angle() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_angle)
  return sl_angle_;
}
inline void SematicLine::set_sl_angle(float value) {
  set_has_sl_angle();
  sl_angle_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_angle)
}

// optional float sl_angle_std = 13;
inline bool SematicLine::has_sl_angle_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SematicLine::set_has_sl_angle_std() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SematicLine::clear_has_sl_angle_std() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SematicLine::clear_sl_angle_std() {
  sl_angle_std_ = 0;
  clear_has_sl_angle_std();
}
inline float SematicLine::sl_angle_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_angle_std)
  return sl_angle_std_;
}
inline void SematicLine::set_sl_angle_std(float value) {
  set_has_sl_angle_std();
  sl_angle_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_angle_std)
}

// optional bool sl_is_relevant = 14;
inline bool SematicLine::has_sl_is_relevant() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SematicLine::set_has_sl_is_relevant() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SematicLine::clear_has_sl_is_relevant() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SematicLine::clear_sl_is_relevant() {
  sl_is_relevant_ = false;
  clear_has_sl_is_relevant();
}
inline bool SematicLine::sl_is_relevant() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicLine.sl_is_relevant)
  return sl_is_relevant_;
}
inline void SematicLine::set_sl_is_relevant(bool value) {
  set_has_sl_is_relevant();
  sl_is_relevant_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicLine.sl_is_relevant)
}

// -------------------------------------------------------------------

// SMCommon

// optional int32 sm_zero_byte = 1;
inline bool SMCommon::has_sm_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SMCommon::set_has_sm_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SMCommon::clear_has_sm_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SMCommon::clear_sm_zero_byte() {
  sm_zero_byte_ = 0;
  clear_has_sm_zero_byte();
}
inline ::google::protobuf::int32 SMCommon::sm_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_zero_byte)
  return sm_zero_byte_;
}
inline void SMCommon::set_sm_zero_byte(::google::protobuf::int32 value) {
  set_has_sm_zero_byte();
  sm_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_zero_byte)
}

// optional int32 sm_protocol_version = 2;
inline bool SMCommon::has_sm_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SMCommon::set_has_sm_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SMCommon::clear_has_sm_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SMCommon::clear_sm_protocol_version() {
  sm_protocol_version_ = 0;
  clear_has_sm_protocol_version();
}
inline ::google::protobuf::int32 SMCommon::sm_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_protocol_version)
  return sm_protocol_version_;
}
inline void SMCommon::set_sm_protocol_version(::google::protobuf::int32 value) {
  set_has_sm_protocol_version();
  sm_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_protocol_version)
}

// optional int32 sm_sync_id = 3;
inline bool SMCommon::has_sm_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SMCommon::set_has_sm_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SMCommon::clear_has_sm_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SMCommon::clear_sm_sync_id() {
  sm_sync_id_ = 0;
  clear_has_sm_sync_id();
}
inline ::google::protobuf::int32 SMCommon::sm_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_sync_id)
  return sm_sync_id_;
}
inline void SMCommon::set_sm_sync_id(::google::protobuf::int32 value) {
  set_has_sm_sync_id();
  sm_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_sync_id)
}

// optional int32 sm_approved_marks = 4;
inline bool SMCommon::has_sm_approved_marks() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SMCommon::set_has_sm_approved_marks() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SMCommon::clear_has_sm_approved_marks() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SMCommon::clear_sm_approved_marks() {
  sm_approved_marks_ = 0;
  clear_has_sm_approved_marks();
}
inline ::google::protobuf::int32 SMCommon::sm_approved_marks() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_approved_marks)
  return sm_approved_marks_;
}
inline void SMCommon::set_sm_approved_marks(::google::protobuf::int32 value) {
  set_has_sm_approved_marks();
  sm_approved_marks_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_approved_marks)
}

// optional int32 sm_header_buffer = 5;
inline bool SMCommon::has_sm_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SMCommon::set_has_sm_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SMCommon::clear_has_sm_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SMCommon::clear_sm_header_buffer() {
  sm_header_buffer_ = 0;
  clear_has_sm_header_buffer();
}
inline ::google::protobuf::int32 SMCommon::sm_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SMCommon.sm_header_buffer)
  return sm_header_buffer_;
}
inline void SMCommon::set_sm_header_buffer(::google::protobuf::int32 value) {
  set_has_sm_header_buffer();
  sm_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SMCommon.sm_header_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_SematicMark

// optional .atd.common.Header header = 1;
inline bool Dt_Record_SematicMark::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_SematicMark::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_SematicMark::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_SematicMark::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_SematicMark::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_SematicMark::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_SematicMark::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicMark.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_SematicMark::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicMark.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_SematicMark::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_SematicMark::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_SematicMark::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_SematicMark::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_SematicMark::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_SematicMark::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_SematicMark::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_SematicMark::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicMark.reservedmsg)
}

// optional .atd.meprocess.SMCommon stsmcommon = 3;
inline bool Dt_Record_SematicMark::has_stsmcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_SematicMark::set_has_stsmcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_SematicMark::clear_has_stsmcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_SematicMark::clear_stsmcommon() {
  if (stsmcommon_ != NULL) stsmcommon_->::atd::meprocess::SMCommon::Clear();
  clear_has_stsmcommon();
}
inline const ::atd::meprocess::SMCommon& Dt_Record_SematicMark::stsmcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
  return stsmcommon_ != NULL ? *stsmcommon_
                         : *::atd::meprocess::SMCommon::internal_default_instance();
}
inline ::atd::meprocess::SMCommon* Dt_Record_SematicMark::mutable_stsmcommon() {
  set_has_stsmcommon();
  if (stsmcommon_ == NULL) {
    stsmcommon_ = new ::atd::meprocess::SMCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
  return stsmcommon_;
}
inline ::atd::meprocess::SMCommon* Dt_Record_SematicMark::release_stsmcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
  clear_has_stsmcommon();
  ::atd::meprocess::SMCommon* temp = stsmcommon_;
  stsmcommon_ = NULL;
  return temp;
}
inline void Dt_Record_SematicMark::set_allocated_stsmcommon(::atd::meprocess::SMCommon* stsmcommon) {
  delete stsmcommon_;
  stsmcommon_ = stsmcommon;
  if (stsmcommon) {
    set_has_stsmcommon();
  } else {
    clear_has_stsmcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_SematicMark.stsmcommon)
}

// repeated .atd.meprocess.SematicMark dt_array_20_sematicmark = 4;
inline int Dt_Record_SematicMark::dt_array_20_sematicmark_size() const {
  return dt_array_20_sematicmark_.size();
}
inline void Dt_Record_SematicMark::clear_dt_array_20_sematicmark() {
  dt_array_20_sematicmark_.Clear();
}
inline const ::atd::meprocess::SematicMark& Dt_Record_SematicMark::dt_array_20_sematicmark(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_.Get(index);
}
inline ::atd::meprocess::SematicMark* Dt_Record_SematicMark::mutable_dt_array_20_sematicmark(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_.Mutable(index);
}
inline ::atd::meprocess::SematicMark* Dt_Record_SematicMark::add_dt_array_20_sematicmark() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicMark >*
Dt_Record_SematicMark::mutable_dt_array_20_sematicmark() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return &dt_array_20_sematicmark_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::SematicMark >&
Dt_Record_SematicMark::dt_array_20_sematicmark() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_SematicMark.dt_array_20_sematicmark)
  return dt_array_20_sematicmark_;
}

// -------------------------------------------------------------------

// SematicMark

// optional int32 sm_id = 1;
inline bool SematicMark::has_sm_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SematicMark::set_has_sm_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SematicMark::clear_has_sm_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SematicMark::clear_sm_id() {
  sm_id_ = 0;
  clear_has_sm_id();
}
inline ::google::protobuf::int32 SematicMark::sm_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_id)
  return sm_id_;
}
inline void SematicMark::set_sm_id(::google::protobuf::int32 value) {
  set_has_sm_id();
  sm_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_id)
}

// optional int32 sm_type = 2;
inline bool SematicMark::has_sm_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SematicMark::set_has_sm_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SematicMark::clear_has_sm_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SematicMark::clear_sm_type() {
  sm_type_ = 0;
  clear_has_sm_type();
}
inline ::google::protobuf::int32 SematicMark::sm_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_type)
  return sm_type_;
}
inline void SematicMark::set_sm_type(::google::protobuf::int32 value) {
  set_has_sm_type();
  sm_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_type)
}

// optional float sm_lat_distance = 3;
inline bool SematicMark::has_sm_lat_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SematicMark::set_has_sm_lat_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SematicMark::clear_has_sm_lat_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SematicMark::clear_sm_lat_distance() {
  sm_lat_distance_ = 0;
  clear_has_sm_lat_distance();
}
inline float SematicMark::sm_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_lat_distance)
  return sm_lat_distance_;
}
inline void SematicMark::set_sm_lat_distance(float value) {
  set_has_sm_lat_distance();
  sm_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_lat_distance)
}

// optional int32 reserved_2 = 4;
inline bool SematicMark::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SematicMark::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SematicMark::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SematicMark::clear_reserved_2() {
  reserved_2_ = 0;
  clear_has_reserved_2();
}
inline ::google::protobuf::int32 SematicMark::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.reserved_2)
  return reserved_2_;
}
inline void SematicMark::set_reserved_2(::google::protobuf::int32 value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.reserved_2)
}

// optional float sm_long_distance = 5;
inline bool SematicMark::has_sm_long_distance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SematicMark::set_has_sm_long_distance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SematicMark::clear_has_sm_long_distance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SematicMark::clear_sm_long_distance() {
  sm_long_distance_ = 0;
  clear_has_sm_long_distance();
}
inline float SematicMark::sm_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_long_distance)
  return sm_long_distance_;
}
inline void SematicMark::set_sm_long_distance(float value) {
  set_has_sm_long_distance();
  sm_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_long_distance)
}

// optional float sm_confidence = 6;
inline bool SematicMark::has_sm_confidence() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SematicMark::set_has_sm_confidence() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SematicMark::clear_has_sm_confidence() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SematicMark::clear_sm_confidence() {
  sm_confidence_ = 0;
  clear_has_sm_confidence();
}
inline float SematicMark::sm_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_confidence)
  return sm_confidence_;
}
inline void SematicMark::set_sm_confidence(float value) {
  set_has_sm_confidence();
  sm_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_confidence)
}

// optional int32 sm_buffer = 7;
inline bool SematicMark::has_sm_buffer() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SematicMark::set_has_sm_buffer() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SematicMark::clear_has_sm_buffer() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SematicMark::clear_sm_buffer() {
  sm_buffer_ = 0;
  clear_has_sm_buffer();
}
inline ::google::protobuf::int32 SematicMark::sm_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.SematicMark.sm_buffer)
  return sm_buffer_;
}
inline void SematicMark::set_sm_buffer(::google::protobuf::int32 value) {
  set_has_sm_buffer();
  sm_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.SematicMark.sm_buffer)
}

// -------------------------------------------------------------------

// TFLCommon

// optional int32 tfl_zero_byte = 1;
inline bool TFLCommon::has_tfl_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFLCommon::set_has_tfl_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFLCommon::clear_has_tfl_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFLCommon::clear_tfl_zero_byte() {
  tfl_zero_byte_ = 0;
  clear_has_tfl_zero_byte();
}
inline ::google::protobuf::int32 TFLCommon::tfl_zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_zero_byte)
  return tfl_zero_byte_;
}
inline void TFLCommon::set_tfl_zero_byte(::google::protobuf::int32 value) {
  set_has_tfl_zero_byte();
  tfl_zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_zero_byte)
}

// optional int32 tfl_protocol_version = 2;
inline bool TFLCommon::has_tfl_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFLCommon::set_has_tfl_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFLCommon::clear_has_tfl_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFLCommon::clear_tfl_protocol_version() {
  tfl_protocol_version_ = 0;
  clear_has_tfl_protocol_version();
}
inline ::google::protobuf::int32 TFLCommon::tfl_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_protocol_version)
  return tfl_protocol_version_;
}
inline void TFLCommon::set_tfl_protocol_version(::google::protobuf::int32 value) {
  set_has_tfl_protocol_version();
  tfl_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_protocol_version)
}

// optional int32 tfl_sync_id = 3;
inline bool TFLCommon::has_tfl_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFLCommon::set_has_tfl_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFLCommon::clear_has_tfl_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFLCommon::clear_tfl_sync_id() {
  tfl_sync_id_ = 0;
  clear_has_tfl_sync_id();
}
inline ::google::protobuf::int32 TFLCommon::tfl_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_sync_id)
  return tfl_sync_id_;
}
inline void TFLCommon::set_tfl_sync_id(::google::protobuf::int32 value) {
  set_has_tfl_sync_id();
  tfl_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_sync_id)
}

// optional int32 tfl_number_of_objects = 4;
inline bool TFLCommon::has_tfl_number_of_objects() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFLCommon::set_has_tfl_number_of_objects() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFLCommon::clear_has_tfl_number_of_objects() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFLCommon::clear_tfl_number_of_objects() {
  tfl_number_of_objects_ = 0;
  clear_has_tfl_number_of_objects();
}
inline ::google::protobuf::int32 TFLCommon::tfl_number_of_objects() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_number_of_objects)
  return tfl_number_of_objects_;
}
inline void TFLCommon::set_tfl_number_of_objects(::google::protobuf::int32 value) {
  set_has_tfl_number_of_objects();
  tfl_number_of_objects_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_number_of_objects)
}

// optional int32 tfl_header_buffer = 5;
inline bool TFLCommon::has_tfl_header_buffer() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TFLCommon::set_has_tfl_header_buffer() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TFLCommon::clear_has_tfl_header_buffer() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TFLCommon::clear_tfl_header_buffer() {
  tfl_header_buffer_ = 0;
  clear_has_tfl_header_buffer();
}
inline ::google::protobuf::int32 TFLCommon::tfl_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFLCommon.tfl_header_buffer)
  return tfl_header_buffer_;
}
inline void TFLCommon::set_tfl_header_buffer(::google::protobuf::int32 value) {
  set_has_tfl_header_buffer();
  tfl_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFLCommon.tfl_header_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_TFL

// optional .atd.common.Header header = 1;
inline bool Dt_Record_TFL::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_TFL::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_TFL::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_TFL::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_TFL::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_TFL::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_TFL::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TFL.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_TFL::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TFL.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_TFL::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_TFL::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_TFL::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_TFL::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_TFL::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_TFL::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_TFL::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TFL.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_TFL::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TFL.reservedmsg)
}

// optional .atd.meprocess.TFLCommon sttflcommon = 3;
inline bool Dt_Record_TFL::has_sttflcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_TFL::set_has_sttflcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_TFL::clear_has_sttflcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_TFL::clear_sttflcommon() {
  if (sttflcommon_ != NULL) sttflcommon_->::atd::meprocess::TFLCommon::Clear();
  clear_has_sttflcommon();
}
inline const ::atd::meprocess::TFLCommon& Dt_Record_TFL::sttflcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.sttflcommon)
  return sttflcommon_ != NULL ? *sttflcommon_
                         : *::atd::meprocess::TFLCommon::internal_default_instance();
}
inline ::atd::meprocess::TFLCommon* Dt_Record_TFL::mutable_sttflcommon() {
  set_has_sttflcommon();
  if (sttflcommon_ == NULL) {
    sttflcommon_ = new ::atd::meprocess::TFLCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.sttflcommon)
  return sttflcommon_;
}
inline ::atd::meprocess::TFLCommon* Dt_Record_TFL::release_sttflcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TFL.sttflcommon)
  clear_has_sttflcommon();
  ::atd::meprocess::TFLCommon* temp = sttflcommon_;
  sttflcommon_ = NULL;
  return temp;
}
inline void Dt_Record_TFL::set_allocated_sttflcommon(::atd::meprocess::TFLCommon* sttflcommon) {
  delete sttflcommon_;
  sttflcommon_ = sttflcommon;
  if (sttflcommon) {
    set_has_sttflcommon();
  } else {
    clear_has_sttflcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TFL.sttflcommon)
}

// repeated .atd.meprocess.TFL dt_array_10_tfl = 4;
inline int Dt_Record_TFL::dt_array_10_tfl_size() const {
  return dt_array_10_tfl_.size();
}
inline void Dt_Record_TFL::clear_dt_array_10_tfl() {
  dt_array_10_tfl_.Clear();
}
inline const ::atd::meprocess::TFL& Dt_Record_TFL::dt_array_10_tfl(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_.Get(index);
}
inline ::atd::meprocess::TFL* Dt_Record_TFL::mutable_dt_array_10_tfl(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_.Mutable(index);
}
inline ::atd::meprocess::TFL* Dt_Record_TFL::add_dt_array_10_tfl() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TFL >*
Dt_Record_TFL::mutable_dt_array_10_tfl() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return &dt_array_10_tfl_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TFL >&
Dt_Record_TFL::dt_array_10_tfl() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_TFL.dt_array_10_tfl)
  return dt_array_10_tfl_;
}

// -------------------------------------------------------------------

// TFL

// optional int32 tfl_object_id = 1;
inline bool TFL::has_tfl_object_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TFL::set_has_tfl_object_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TFL::clear_has_tfl_object_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TFL::clear_tfl_object_id() {
  tfl_object_id_ = 0;
  clear_has_tfl_object_id();
}
inline ::google::protobuf::int32 TFL::tfl_object_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_object_id)
  return tfl_object_id_;
}
inline void TFL::set_tfl_object_id(::google::protobuf::int32 value) {
  set_has_tfl_object_id();
  tfl_object_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_object_id)
}

// optional int32 tfl_lightbox_id = 2;
inline bool TFL::has_tfl_lightbox_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TFL::set_has_tfl_lightbox_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TFL::clear_has_tfl_lightbox_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TFL::clear_tfl_lightbox_id() {
  tfl_lightbox_id_ = 0;
  clear_has_tfl_lightbox_id();
}
inline ::google::protobuf::int32 TFL::tfl_lightbox_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_lightbox_id)
  return tfl_lightbox_id_;
}
inline void TFL::set_tfl_lightbox_id(::google::protobuf::int32 value) {
  set_has_tfl_lightbox_id();
  tfl_lightbox_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_lightbox_id)
}

// optional float tfl_existence_probability = 3;
inline bool TFL::has_tfl_existence_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TFL::set_has_tfl_existence_probability() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TFL::clear_has_tfl_existence_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TFL::clear_tfl_existence_probability() {
  tfl_existence_probability_ = 0;
  clear_has_tfl_existence_probability();
}
inline float TFL::tfl_existence_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_existence_probability)
  return tfl_existence_probability_;
}
inline void TFL::set_tfl_existence_probability(float value) {
  set_has_tfl_existence_probability();
  tfl_existence_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_existence_probability)
}

// optional float tfl_relevance_probability = 4;
inline bool TFL::has_tfl_relevance_probability() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TFL::set_has_tfl_relevance_probability() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TFL::clear_has_tfl_relevance_probability() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TFL::clear_tfl_relevance_probability() {
  tfl_relevance_probability_ = 0;
  clear_has_tfl_relevance_probability();
}
inline float TFL::tfl_relevance_probability() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_relevance_probability)
  return tfl_relevance_probability_;
}
inline void TFL::set_tfl_relevance_probability(float value) {
  set_has_tfl_relevance_probability();
  tfl_relevance_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_relevance_probability)
}

// optional int32 reserved_1 = 5;
inline bool TFL::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TFL::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TFL::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TFL::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 TFL::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.reserved_1)
  return reserved_1_;
}
inline void TFL::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.reserved_1)
}

// optional .atd.meprocess.TFL.Tfl_colorType tfl_color = 6;
inline bool TFL::has_tfl_color() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TFL::set_has_tfl_color() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TFL::clear_has_tfl_color() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TFL::clear_tfl_color() {
  tfl_color_ = 0;
  clear_has_tfl_color();
}
inline ::atd::meprocess::TFL_Tfl_colorType TFL::tfl_color() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_color)
  return static_cast< ::atd::meprocess::TFL_Tfl_colorType >(tfl_color_);
}
inline void TFL::set_tfl_color(::atd::meprocess::TFL_Tfl_colorType value) {
  assert(::atd::meprocess::TFL_Tfl_colorType_IsValid(value));
  set_has_tfl_color();
  tfl_color_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_color)
}

// optional int32 tfl_camera_source = 7;
inline bool TFL::has_tfl_camera_source() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TFL::set_has_tfl_camera_source() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TFL::clear_has_tfl_camera_source() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TFL::clear_tfl_camera_source() {
  tfl_camera_source_ = 0;
  clear_has_tfl_camera_source();
}
inline ::google::protobuf::int32 TFL::tfl_camera_source() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_camera_source)
  return tfl_camera_source_;
}
inline void TFL::set_tfl_camera_source(::google::protobuf::int32 value) {
  set_has_tfl_camera_source();
  tfl_camera_source_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_camera_source)
}

// optional int32 tfl_relevance_direction = 8;
inline bool TFL::has_tfl_relevance_direction() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TFL::set_has_tfl_relevance_direction() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TFL::clear_has_tfl_relevance_direction() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TFL::clear_tfl_relevance_direction() {
  tfl_relevance_direction_ = 0;
  clear_has_tfl_relevance_direction();
}
inline ::google::protobuf::int32 TFL::tfl_relevance_direction() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_relevance_direction)
  return tfl_relevance_direction_;
}
inline void TFL::set_tfl_relevance_direction(::google::protobuf::int32 value) {
  set_has_tfl_relevance_direction();
  tfl_relevance_direction_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_relevance_direction)
}

// optional .atd.meprocess.TFL.Tfl_structure_orientationType tfl_structure_orientation = 9;
inline bool TFL::has_tfl_structure_orientation() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TFL::set_has_tfl_structure_orientation() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TFL::clear_has_tfl_structure_orientation() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TFL::clear_tfl_structure_orientation() {
  tfl_structure_orientation_ = 0;
  clear_has_tfl_structure_orientation();
}
inline ::atd::meprocess::TFL_Tfl_structure_orientationType TFL::tfl_structure_orientation() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_structure_orientation)
  return static_cast< ::atd::meprocess::TFL_Tfl_structure_orientationType >(tfl_structure_orientation_);
}
inline void TFL::set_tfl_structure_orientation(::atd::meprocess::TFL_Tfl_structure_orientationType value) {
  assert(::atd::meprocess::TFL_Tfl_structure_orientationType_IsValid(value));
  set_has_tfl_structure_orientation();
  tfl_structure_orientation_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_structure_orientation)
}

// optional float tfl_rel_dir_quality = 10;
inline bool TFL::has_tfl_rel_dir_quality() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TFL::set_has_tfl_rel_dir_quality() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TFL::clear_has_tfl_rel_dir_quality() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TFL::clear_tfl_rel_dir_quality() {
  tfl_rel_dir_quality_ = 0;
  clear_has_tfl_rel_dir_quality();
}
inline float TFL::tfl_rel_dir_quality() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_rel_dir_quality)
  return tfl_rel_dir_quality_;
}
inline void TFL::set_tfl_rel_dir_quality(float value) {
  set_has_tfl_rel_dir_quality();
  tfl_rel_dir_quality_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_rel_dir_quality)
}

// optional .atd.meprocess.TFL.Tfl_modeType tfl_mode = 11;
inline bool TFL::has_tfl_mode() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TFL::set_has_tfl_mode() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TFL::clear_has_tfl_mode() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TFL::clear_tfl_mode() {
  tfl_mode_ = 0;
  clear_has_tfl_mode();
}
inline ::atd::meprocess::TFL_Tfl_modeType TFL::tfl_mode() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_mode)
  return static_cast< ::atd::meprocess::TFL_Tfl_modeType >(tfl_mode_);
}
inline void TFL::set_tfl_mode(::atd::meprocess::TFL_Tfl_modeType value) {
  assert(::atd::meprocess::TFL_Tfl_modeType_IsValid(value));
  set_has_tfl_mode();
  tfl_mode_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_mode)
}

// optional bool reserved_2 = 12;
inline bool TFL::has_reserved_2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TFL::set_has_reserved_2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TFL::clear_has_reserved_2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TFL::clear_reserved_2() {
  reserved_2_ = false;
  clear_has_reserved_2();
}
inline bool TFL::reserved_2() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.reserved_2)
  return reserved_2_;
}
inline void TFL::set_reserved_2(bool value) {
  set_has_reserved_2();
  reserved_2_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.reserved_2)
}

// optional float tfl_width = 13;
inline bool TFL::has_tfl_width() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TFL::set_has_tfl_width() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TFL::clear_has_tfl_width() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TFL::clear_tfl_width() {
  tfl_width_ = 0;
  clear_has_tfl_width();
}
inline float TFL::tfl_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_width)
  return tfl_width_;
}
inline void TFL::set_tfl_width(float value) {
  set_has_tfl_width();
  tfl_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_width)
}

// optional float tfl_width_std = 14;
inline bool TFL::has_tfl_width_std() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TFL::set_has_tfl_width_std() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TFL::clear_has_tfl_width_std() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TFL::clear_tfl_width_std() {
  tfl_width_std_ = 0;
  clear_has_tfl_width_std();
}
inline float TFL::tfl_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_width_std)
  return tfl_width_std_;
}
inline void TFL::set_tfl_width_std(float value) {
  set_has_tfl_width_std();
  tfl_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_width_std)
}

// optional float tfl_height = 15;
inline bool TFL::has_tfl_height() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TFL::set_has_tfl_height() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TFL::clear_has_tfl_height() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TFL::clear_tfl_height() {
  tfl_height_ = 0;
  clear_has_tfl_height();
}
inline float TFL::tfl_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_height)
  return tfl_height_;
}
inline void TFL::set_tfl_height(float value) {
  set_has_tfl_height();
  tfl_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_height)
}

// optional float tfl_height_std = 16;
inline bool TFL::has_tfl_height_std() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TFL::set_has_tfl_height_std() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TFL::clear_has_tfl_height_std() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TFL::clear_tfl_height_std() {
  tfl_height_std_ = 0;
  clear_has_tfl_height_std();
}
inline float TFL::tfl_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_height_std)
  return tfl_height_std_;
}
inline void TFL::set_tfl_height_std(float value) {
  set_has_tfl_height_std();
  tfl_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_height_std)
}

// optional float tfl_long_distance = 17;
inline bool TFL::has_tfl_long_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TFL::set_has_tfl_long_distance() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TFL::clear_has_tfl_long_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TFL::clear_tfl_long_distance() {
  tfl_long_distance_ = 0;
  clear_has_tfl_long_distance();
}
inline float TFL::tfl_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_long_distance)
  return tfl_long_distance_;
}
inline void TFL::set_tfl_long_distance(float value) {
  set_has_tfl_long_distance();
  tfl_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_long_distance)
}

// optional float tfl_long_distance_std = 18;
inline bool TFL::has_tfl_long_distance_std() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TFL::set_has_tfl_long_distance_std() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TFL::clear_has_tfl_long_distance_std() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TFL::clear_tfl_long_distance_std() {
  tfl_long_distance_std_ = 0;
  clear_has_tfl_long_distance_std();
}
inline float TFL::tfl_long_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_long_distance_std)
  return tfl_long_distance_std_;
}
inline void TFL::set_tfl_long_distance_std(float value) {
  set_has_tfl_long_distance_std();
  tfl_long_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_long_distance_std)
}

// optional float tfl_rel_height = 19;
inline bool TFL::has_tfl_rel_height() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TFL::set_has_tfl_rel_height() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TFL::clear_has_tfl_rel_height() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TFL::clear_tfl_rel_height() {
  tfl_rel_height_ = 0;
  clear_has_tfl_rel_height();
}
inline float TFL::tfl_rel_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_rel_height)
  return tfl_rel_height_;
}
inline void TFL::set_tfl_rel_height(float value) {
  set_has_tfl_rel_height();
  tfl_rel_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_rel_height)
}

// optional float tfl_rel_height_std = 20;
inline bool TFL::has_tfl_rel_height_std() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TFL::set_has_tfl_rel_height_std() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TFL::clear_has_tfl_rel_height_std() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TFL::clear_tfl_rel_height_std() {
  tfl_rel_height_std_ = 0;
  clear_has_tfl_rel_height_std();
}
inline float TFL::tfl_rel_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_rel_height_std)
  return tfl_rel_height_std_;
}
inline void TFL::set_tfl_rel_height_std(float value) {
  set_has_tfl_rel_height_std();
  tfl_rel_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_rel_height_std)
}

// optional int32 reserved_3 = 21;
inline bool TFL::has_reserved_3() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TFL::set_has_reserved_3() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TFL::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TFL::clear_reserved_3() {
  reserved_3_ = 0;
  clear_has_reserved_3();
}
inline ::google::protobuf::int32 TFL::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.reserved_3)
  return reserved_3_;
}
inline void TFL::set_reserved_3(::google::protobuf::int32 value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.reserved_3)
}

// optional float tfl_lat_distance = 22;
inline bool TFL::has_tfl_lat_distance() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TFL::set_has_tfl_lat_distance() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TFL::clear_has_tfl_lat_distance() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TFL::clear_tfl_lat_distance() {
  tfl_lat_distance_ = 0;
  clear_has_tfl_lat_distance();
}
inline float TFL::tfl_lat_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_lat_distance)
  return tfl_lat_distance_;
}
inline void TFL::set_tfl_lat_distance(float value) {
  set_has_tfl_lat_distance();
  tfl_lat_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_lat_distance)
}

// optional float tfl_lat_distance_std = 23;
inline bool TFL::has_tfl_lat_distance_std() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TFL::set_has_tfl_lat_distance_std() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TFL::clear_has_tfl_lat_distance_std() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TFL::clear_tfl_lat_distance_std() {
  tfl_lat_distance_std_ = 0;
  clear_has_tfl_lat_distance_std();
}
inline float TFL::tfl_lat_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_lat_distance_std)
  return tfl_lat_distance_std_;
}
inline void TFL::set_tfl_lat_distance_std(float value) {
  set_has_tfl_lat_distance_std();
  tfl_lat_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_lat_distance_std)
}

// optional int32 tfl_shape = 24;
inline bool TFL::has_tfl_shape() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TFL::set_has_tfl_shape() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TFL::clear_has_tfl_shape() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TFL::clear_tfl_shape() {
  tfl_shape_ = 0;
  clear_has_tfl_shape();
}
inline ::google::protobuf::int32 TFL::tfl_shape() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TFL.tfl_shape)
  return tfl_shape_;
}
inline void TFL::set_tfl_shape(::google::protobuf::int32 value) {
  set_has_tfl_shape();
  tfl_shape_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TFL.tfl_shape)
}

// -------------------------------------------------------------------

// TSRCommon

// optional int32 zero_byte = 1;
inline bool TSRCommon::has_zero_byte() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSRCommon::set_has_zero_byte() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSRCommon::clear_has_zero_byte() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSRCommon::clear_zero_byte() {
  zero_byte_ = 0;
  clear_has_zero_byte();
}
inline ::google::protobuf::int32 TSRCommon::zero_byte() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.zero_byte)
  return zero_byte_;
}
inline void TSRCommon::set_zero_byte(::google::protobuf::int32 value) {
  set_has_zero_byte();
  zero_byte_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.zero_byte)
}

// optional int32 tsr_protocol_version = 2;
inline bool TSRCommon::has_tsr_protocol_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSRCommon::set_has_tsr_protocol_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSRCommon::clear_has_tsr_protocol_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSRCommon::clear_tsr_protocol_version() {
  tsr_protocol_version_ = 0;
  clear_has_tsr_protocol_version();
}
inline ::google::protobuf::int32 TSRCommon::tsr_protocol_version() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_protocol_version)
  return tsr_protocol_version_;
}
inline void TSRCommon::set_tsr_protocol_version(::google::protobuf::int32 value) {
  set_has_tsr_protocol_version();
  tsr_protocol_version_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_protocol_version)
}

// optional int32 tsr_sync_id = 3;
inline bool TSRCommon::has_tsr_sync_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSRCommon::set_has_tsr_sync_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSRCommon::clear_has_tsr_sync_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSRCommon::clear_tsr_sync_id() {
  tsr_sync_id_ = 0;
  clear_has_tsr_sync_id();
}
inline ::google::protobuf::int32 TSRCommon::tsr_sync_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_sync_id)
  return tsr_sync_id_;
}
inline void TSRCommon::set_tsr_sync_id(::google::protobuf::int32 value) {
  set_has_tsr_sync_id();
  tsr_sync_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_sync_id)
}

// optional int32 reserved_1 = 4;
inline bool TSRCommon::has_reserved_1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSRCommon::set_has_reserved_1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSRCommon::clear_has_reserved_1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSRCommon::clear_reserved_1() {
  reserved_1_ = 0;
  clear_has_reserved_1();
}
inline ::google::protobuf::int32 TSRCommon::reserved_1() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.reserved_1)
  return reserved_1_;
}
inline void TSRCommon::set_reserved_1(::google::protobuf::int32 value) {
  set_has_reserved_1();
  reserved_1_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.reserved_1)
}

// optional int32 tsr_apr__sign_count = 5;
inline bool TSRCommon::has_tsr_apr__sign_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSRCommon::set_has_tsr_apr__sign_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSRCommon::clear_has_tsr_apr__sign_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSRCommon::clear_tsr_apr__sign_count() {
  tsr_apr__sign_count_ = 0;
  clear_has_tsr_apr__sign_count();
}
inline ::google::protobuf::int32 TSRCommon::tsr_apr__sign_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_apr__sign_count)
  return tsr_apr__sign_count_;
}
inline void TSRCommon::set_tsr_apr__sign_count(::google::protobuf::int32 value) {
  set_has_tsr_apr__sign_count();
  tsr_apr__sign_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_apr__sign_count)
}

// optional int32 tsr_filtered_sign_count = 6;
inline bool TSRCommon::has_tsr_filtered_sign_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TSRCommon::set_has_tsr_filtered_sign_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TSRCommon::clear_has_tsr_filtered_sign_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TSRCommon::clear_tsr_filtered_sign_count() {
  tsr_filtered_sign_count_ = 0;
  clear_has_tsr_filtered_sign_count();
}
inline ::google::protobuf::int32 TSRCommon::tsr_filtered_sign_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_filtered_sign_count)
  return tsr_filtered_sign_count_;
}
inline void TSRCommon::set_tsr_filtered_sign_count(::google::protobuf::int32 value) {
  set_has_tsr_filtered_sign_count();
  tsr_filtered_sign_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_filtered_sign_count)
}

// optional int32 tsr_undertracking_sign_count = 7;
inline bool TSRCommon::has_tsr_undertracking_sign_count() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TSRCommon::set_has_tsr_undertracking_sign_count() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TSRCommon::clear_has_tsr_undertracking_sign_count() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TSRCommon::clear_tsr_undertracking_sign_count() {
  tsr_undertracking_sign_count_ = 0;
  clear_has_tsr_undertracking_sign_count();
}
inline ::google::protobuf::int32 TSRCommon::tsr_undertracking_sign_count() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_undertracking_sign_count)
  return tsr_undertracking_sign_count_;
}
inline void TSRCommon::set_tsr_undertracking_sign_count(::google::protobuf::int32 value) {
  set_has_tsr_undertracking_sign_count();
  tsr_undertracking_sign_count_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_undertracking_sign_count)
}

// optional int32 tsr_header_buffer = 8;
inline bool TSRCommon::has_tsr_header_buffer() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TSRCommon::set_has_tsr_header_buffer() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TSRCommon::clear_has_tsr_header_buffer() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TSRCommon::clear_tsr_header_buffer() {
  tsr_header_buffer_ = 0;
  clear_has_tsr_header_buffer();
}
inline ::google::protobuf::int32 TSRCommon::tsr_header_buffer() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSRCommon.tsr_header_buffer)
  return tsr_header_buffer_;
}
inline void TSRCommon::set_tsr_header_buffer(::google::protobuf::int32 value) {
  set_has_tsr_header_buffer();
  tsr_header_buffer_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSRCommon.tsr_header_buffer)
}

// -------------------------------------------------------------------

// Dt_Record_TSR

// optional .atd.common.Header header = 1;
inline bool Dt_Record_TSR::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Dt_Record_TSR::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Dt_Record_TSR::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Dt_Record_TSR::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Dt_Record_TSR::header() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Dt_Record_TSR::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.header)
  return header_;
}
inline ::atd::common::Header* Dt_Record_TSR::release_header() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TSR.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Dt_Record_TSR::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TSR.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Dt_Record_TSR::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Dt_Record_TSR::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Dt_Record_TSR::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Dt_Record_TSR::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Dt_Record_TSR::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Dt_Record_TSR::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Dt_Record_TSR::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TSR.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Dt_Record_TSR::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TSR.reservedmsg)
}

// optional .atd.meprocess.TSRCommon sttsrcommon = 3;
inline bool Dt_Record_TSR::has_sttsrcommon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Dt_Record_TSR::set_has_sttsrcommon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Dt_Record_TSR::clear_has_sttsrcommon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Dt_Record_TSR::clear_sttsrcommon() {
  if (sttsrcommon_ != NULL) sttsrcommon_->::atd::meprocess::TSRCommon::Clear();
  clear_has_sttsrcommon();
}
inline const ::atd::meprocess::TSRCommon& Dt_Record_TSR::sttsrcommon() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.sttsrcommon)
  return sttsrcommon_ != NULL ? *sttsrcommon_
                         : *::atd::meprocess::TSRCommon::internal_default_instance();
}
inline ::atd::meprocess::TSRCommon* Dt_Record_TSR::mutable_sttsrcommon() {
  set_has_sttsrcommon();
  if (sttsrcommon_ == NULL) {
    sttsrcommon_ = new ::atd::meprocess::TSRCommon;
  }
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.sttsrcommon)
  return sttsrcommon_;
}
inline ::atd::meprocess::TSRCommon* Dt_Record_TSR::release_sttsrcommon() {
  // @@protoc_insertion_point(field_release:atd.meprocess.Dt_Record_TSR.sttsrcommon)
  clear_has_sttsrcommon();
  ::atd::meprocess::TSRCommon* temp = sttsrcommon_;
  sttsrcommon_ = NULL;
  return temp;
}
inline void Dt_Record_TSR::set_allocated_sttsrcommon(::atd::meprocess::TSRCommon* sttsrcommon) {
  delete sttsrcommon_;
  sttsrcommon_ = sttsrcommon;
  if (sttsrcommon) {
    set_has_sttsrcommon();
  } else {
    clear_has_sttsrcommon();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.meprocess.Dt_Record_TSR.sttsrcommon)
}

// repeated .atd.meprocess.TSR dt_array_20_tsr = 4;
inline int Dt_Record_TSR::dt_array_20_tsr_size() const {
  return dt_array_20_tsr_.size();
}
inline void Dt_Record_TSR::clear_dt_array_20_tsr() {
  dt_array_20_tsr_.Clear();
}
inline const ::atd::meprocess::TSR& Dt_Record_TSR::dt_array_20_tsr(int index) const {
  // @@protoc_insertion_point(field_get:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_.Get(index);
}
inline ::atd::meprocess::TSR* Dt_Record_TSR::mutable_dt_array_20_tsr(int index) {
  // @@protoc_insertion_point(field_mutable:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_.Mutable(index);
}
inline ::atd::meprocess::TSR* Dt_Record_TSR::add_dt_array_20_tsr() {
  // @@protoc_insertion_point(field_add:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TSR >*
Dt_Record_TSR::mutable_dt_array_20_tsr() {
  // @@protoc_insertion_point(field_mutable_list:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return &dt_array_20_tsr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::meprocess::TSR >&
Dt_Record_TSR::dt_array_20_tsr() const {
  // @@protoc_insertion_point(field_list:atd.meprocess.Dt_Record_TSR.dt_array_20_tsr)
  return dt_array_20_tsr_;
}

// -------------------------------------------------------------------

// TSR

// optional int32 tsr_id = 1;
inline bool TSR::has_tsr_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TSR::set_has_tsr_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TSR::clear_has_tsr_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TSR::clear_tsr_id() {
  tsr_id_ = 0;
  clear_has_tsr_id();
}
inline ::google::protobuf::int32 TSR::tsr_id() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_id)
  return tsr_id_;
}
inline void TSR::set_tsr_id(::google::protobuf::int32 value) {
  set_has_tsr_id();
  tsr_id_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_id)
}

// optional int32 tsr_camera_source = 2;
inline bool TSR::has_tsr_camera_source() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TSR::set_has_tsr_camera_source() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TSR::clear_has_tsr_camera_source() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TSR::clear_tsr_camera_source() {
  tsr_camera_source_ = 0;
  clear_has_tsr_camera_source();
}
inline ::google::protobuf::int32 TSR::tsr_camera_source() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_camera_source)
  return tsr_camera_source_;
}
inline void TSR::set_tsr_camera_source(::google::protobuf::int32 value) {
  set_has_tsr_camera_source();
  tsr_camera_source_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_camera_source)
}

// optional int32 tsr_sign_name = 3;
inline bool TSR::has_tsr_sign_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TSR::set_has_tsr_sign_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TSR::clear_has_tsr_sign_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TSR::clear_tsr_sign_name() {
  tsr_sign_name_ = 0;
  clear_has_tsr_sign_name();
}
inline ::google::protobuf::int32 TSR::tsr_sign_name() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_name)
  return tsr_sign_name_;
}
inline void TSR::set_tsr_sign_name(::google::protobuf::int32 value) {
  set_has_tsr_sign_name();
  tsr_sign_name_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_name)
}

// optional .atd.meprocess.TSR.Tsr_relevancyType tsr_relevancy = 4;
inline bool TSR::has_tsr_relevancy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TSR::set_has_tsr_relevancy() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TSR::clear_has_tsr_relevancy() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TSR::clear_tsr_relevancy() {
  tsr_relevancy_ = 0;
  clear_has_tsr_relevancy();
}
inline ::atd::meprocess::TSR_Tsr_relevancyType TSR::tsr_relevancy() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_relevancy)
  return static_cast< ::atd::meprocess::TSR_Tsr_relevancyType >(tsr_relevancy_);
}
inline void TSR::set_tsr_relevancy(::atd::meprocess::TSR_Tsr_relevancyType value) {
  assert(::atd::meprocess::TSR_Tsr_relevancyType_IsValid(value));
  set_has_tsr_relevancy();
  tsr_relevancy_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_relevancy)
}

// optional .atd.meprocess.TSR.Tsr_filter_typeType tsr_filter_type = 5;
inline bool TSR::has_tsr_filter_type() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TSR::set_has_tsr_filter_type() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TSR::clear_has_tsr_filter_type() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TSR::clear_tsr_filter_type() {
  tsr_filter_type_ = 0;
  clear_has_tsr_filter_type();
}
inline ::atd::meprocess::TSR_Tsr_filter_typeType TSR::tsr_filter_type() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_filter_type)
  return static_cast< ::atd::meprocess::TSR_Tsr_filter_typeType >(tsr_filter_type_);
}
inline void TSR::set_tsr_filter_type(::atd::meprocess::TSR_Tsr_filter_typeType value) {
  assert(::atd::meprocess::TSR_Tsr_filter_typeType_IsValid(value));
  set_has_tsr_filter_type();
  tsr_filter_type_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_filter_type)
}

// optional bool reserved_3 = 6;
inline bool TSR::has_reserved_3() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TSR::set_has_reserved_3() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TSR::clear_has_reserved_3() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TSR::clear_reserved_3() {
  reserved_3_ = false;
  clear_has_reserved_3();
}
inline bool TSR::reserved_3() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_3)
  return reserved_3_;
}
inline void TSR::set_reserved_3(bool value) {
  set_has_reserved_3();
  reserved_3_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_3)
}

// optional int32 tsr_sup1_signname = 7;
inline bool TSR::has_tsr_sup1_signname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TSR::set_has_tsr_sup1_signname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TSR::clear_has_tsr_sup1_signname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TSR::clear_tsr_sup1_signname() {
  tsr_sup1_signname_ = 0;
  clear_has_tsr_sup1_signname();
}
inline ::google::protobuf::int32 TSR::tsr_sup1_signname() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup1_signname)
  return tsr_sup1_signname_;
}
inline void TSR::set_tsr_sup1_signname(::google::protobuf::int32 value) {
  set_has_tsr_sup1_signname();
  tsr_sup1_signname_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup1_signname)
}

// optional float tsr_sup1_confidence = 8;
inline bool TSR::has_tsr_sup1_confidence() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TSR::set_has_tsr_sup1_confidence() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TSR::clear_has_tsr_sup1_confidence() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TSR::clear_tsr_sup1_confidence() {
  tsr_sup1_confidence_ = 0;
  clear_has_tsr_sup1_confidence();
}
inline float TSR::tsr_sup1_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup1_confidence)
  return tsr_sup1_confidence_;
}
inline void TSR::set_tsr_sup1_confidence(float value) {
  set_has_tsr_sup1_confidence();
  tsr_sup1_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup1_confidence)
}

// optional int32 tsr_sup2_signname = 9;
inline bool TSR::has_tsr_sup2_signname() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TSR::set_has_tsr_sup2_signname() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TSR::clear_has_tsr_sup2_signname() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TSR::clear_tsr_sup2_signname() {
  tsr_sup2_signname_ = 0;
  clear_has_tsr_sup2_signname();
}
inline ::google::protobuf::int32 TSR::tsr_sup2_signname() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup2_signname)
  return tsr_sup2_signname_;
}
inline void TSR::set_tsr_sup2_signname(::google::protobuf::int32 value) {
  set_has_tsr_sup2_signname();
  tsr_sup2_signname_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup2_signname)
}

// optional float tsr_sup2_confidence = 10;
inline bool TSR::has_tsr_sup2_confidence() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TSR::set_has_tsr_sup2_confidence() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TSR::clear_has_tsr_sup2_confidence() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TSR::clear_tsr_sup2_confidence() {
  tsr_sup2_confidence_ = 0;
  clear_has_tsr_sup2_confidence();
}
inline float TSR::tsr_sup2_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sup2_confidence)
  return tsr_sup2_confidence_;
}
inline void TSR::set_tsr_sup2_confidence(float value) {
  set_has_tsr_sup2_confidence();
  tsr_sup2_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sup2_confidence)
}

// optional int32 reserved_4 = 11;
inline bool TSR::has_reserved_4() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TSR::set_has_reserved_4() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TSR::clear_has_reserved_4() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TSR::clear_reserved_4() {
  reserved_4_ = 0;
  clear_has_reserved_4();
}
inline ::google::protobuf::int32 TSR::reserved_4() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_4)
  return reserved_4_;
}
inline void TSR::set_reserved_4(::google::protobuf::int32 value) {
  set_has_reserved_4();
  reserved_4_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_4)
}

// optional .atd.meprocess.TSR.Tsr_sign_shapeType tsr_sign_shape = 12;
inline bool TSR::has_tsr_sign_shape() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TSR::set_has_tsr_sign_shape() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TSR::clear_has_tsr_sign_shape() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TSR::clear_tsr_sign_shape() {
  tsr_sign_shape_ = 0;
  clear_has_tsr_sign_shape();
}
inline ::atd::meprocess::TSR_Tsr_sign_shapeType TSR::tsr_sign_shape() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_shape)
  return static_cast< ::atd::meprocess::TSR_Tsr_sign_shapeType >(tsr_sign_shape_);
}
inline void TSR::set_tsr_sign_shape(::atd::meprocess::TSR_Tsr_sign_shapeType value) {
  assert(::atd::meprocess::TSR_Tsr_sign_shapeType_IsValid(value));
  set_has_tsr_sign_shape();
  tsr_sign_shape_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_shape)
}

// optional .atd.meprocess.TSR.Tsr_sign_structureType tsr_sign_structure = 13;
inline bool TSR::has_tsr_sign_structure() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TSR::set_has_tsr_sign_structure() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TSR::clear_has_tsr_sign_structure() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TSR::clear_tsr_sign_structure() {
  tsr_sign_structure_ = 0;
  clear_has_tsr_sign_structure();
}
inline ::atd::meprocess::TSR_Tsr_sign_structureType TSR::tsr_sign_structure() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_structure)
  return static_cast< ::atd::meprocess::TSR_Tsr_sign_structureType >(tsr_sign_structure_);
}
inline void TSR::set_tsr_sign_structure(::atd::meprocess::TSR_Tsr_sign_structureType value) {
  assert(::atd::meprocess::TSR_Tsr_sign_structureType_IsValid(value));
  set_has_tsr_sign_structure();
  tsr_sign_structure_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_structure)
}

// optional float tsr_confidence = 14;
inline bool TSR::has_tsr_confidence() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TSR::set_has_tsr_confidence() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TSR::clear_has_tsr_confidence() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TSR::clear_tsr_confidence() {
  tsr_confidence_ = 0;
  clear_has_tsr_confidence();
}
inline float TSR::tsr_confidence() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_confidence)
  return tsr_confidence_;
}
inline void TSR::set_tsr_confidence(float value) {
  set_has_tsr_confidence();
  tsr_confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_confidence)
}

// optional float tsr_sign_long_distance = 15;
inline bool TSR::has_tsr_sign_long_distance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TSR::set_has_tsr_sign_long_distance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TSR::clear_has_tsr_sign_long_distance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TSR::clear_tsr_sign_long_distance() {
  tsr_sign_long_distance_ = 0;
  clear_has_tsr_sign_long_distance();
}
inline float TSR::tsr_sign_long_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_long_distance)
  return tsr_sign_long_distance_;
}
inline void TSR::set_tsr_sign_long_distance(float value) {
  set_has_tsr_sign_long_distance();
  tsr_sign_long_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_long_distance)
}

// optional int32 reserved_5 = 16;
inline bool TSR::has_reserved_5() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TSR::set_has_reserved_5() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TSR::clear_has_reserved_5() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TSR::clear_reserved_5() {
  reserved_5_ = 0;
  clear_has_reserved_5();
}
inline ::google::protobuf::int32 TSR::reserved_5() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_5)
  return reserved_5_;
}
inline void TSR::set_reserved_5(::google::protobuf::int32 value) {
  set_has_reserved_5();
  reserved_5_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_5)
}

// optional float tsr_sign_lateral_distance = 17;
inline bool TSR::has_tsr_sign_lateral_distance() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TSR::set_has_tsr_sign_lateral_distance() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TSR::clear_has_tsr_sign_lateral_distance() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TSR::clear_tsr_sign_lateral_distance() {
  tsr_sign_lateral_distance_ = 0;
  clear_has_tsr_sign_lateral_distance();
}
inline float TSR::tsr_sign_lateral_distance() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_lateral_distance)
  return tsr_sign_lateral_distance_;
}
inline void TSR::set_tsr_sign_lateral_distance(float value) {
  set_has_tsr_sign_lateral_distance();
  tsr_sign_lateral_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_lateral_distance)
}

// optional float tsr_sign_height = 18;
inline bool TSR::has_tsr_sign_height() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TSR::set_has_tsr_sign_height() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TSR::clear_has_tsr_sign_height() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TSR::clear_tsr_sign_height() {
  tsr_sign_height_ = 0;
  clear_has_tsr_sign_height();
}
inline float TSR::tsr_sign_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_height)
  return tsr_sign_height_;
}
inline void TSR::set_tsr_sign_height(float value) {
  set_has_tsr_sign_height();
  tsr_sign_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_height)
}

// optional int32 reserved_6 = 19;
inline bool TSR::has_reserved_6() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TSR::set_has_reserved_6() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TSR::clear_has_reserved_6() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TSR::clear_reserved_6() {
  reserved_6_ = 0;
  clear_has_reserved_6();
}
inline ::google::protobuf::int32 TSR::reserved_6() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_6)
  return reserved_6_;
}
inline void TSR::set_reserved_6(::google::protobuf::int32 value) {
  set_has_reserved_6();
  reserved_6_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_6)
}

// optional float tsr_sign_long_distance_std = 20;
inline bool TSR::has_tsr_sign_long_distance_std() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TSR::set_has_tsr_sign_long_distance_std() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TSR::clear_has_tsr_sign_long_distance_std() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TSR::clear_tsr_sign_long_distance_std() {
  tsr_sign_long_distance_std_ = 0;
  clear_has_tsr_sign_long_distance_std();
}
inline float TSR::tsr_sign_long_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_long_distance_std)
  return tsr_sign_long_distance_std_;
}
inline void TSR::set_tsr_sign_long_distance_std(float value) {
  set_has_tsr_sign_long_distance_std();
  tsr_sign_long_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_long_distance_std)
}

// optional float tsr_sign_lat_distance_std = 21;
inline bool TSR::has_tsr_sign_lat_distance_std() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TSR::set_has_tsr_sign_lat_distance_std() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TSR::clear_has_tsr_sign_lat_distance_std() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TSR::clear_tsr_sign_lat_distance_std() {
  tsr_sign_lat_distance_std_ = 0;
  clear_has_tsr_sign_lat_distance_std();
}
inline float TSR::tsr_sign_lat_distance_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_lat_distance_std)
  return tsr_sign_lat_distance_std_;
}
inline void TSR::set_tsr_sign_lat_distance_std(float value) {
  set_has_tsr_sign_lat_distance_std();
  tsr_sign_lat_distance_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_lat_distance_std)
}

// optional int32 reserved_7 = 22;
inline bool TSR::has_reserved_7() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TSR::set_has_reserved_7() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TSR::clear_has_reserved_7() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TSR::clear_reserved_7() {
  reserved_7_ = 0;
  clear_has_reserved_7();
}
inline ::google::protobuf::int32 TSR::reserved_7() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_7)
  return reserved_7_;
}
inline void TSR::set_reserved_7(::google::protobuf::int32 value) {
  set_has_reserved_7();
  reserved_7_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_7)
}

// optional float tsr_sign_height_std = 23;
inline bool TSR::has_tsr_sign_height_std() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TSR::set_has_tsr_sign_height_std() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TSR::clear_has_tsr_sign_height_std() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TSR::clear_tsr_sign_height_std() {
  tsr_sign_height_std_ = 0;
  clear_has_tsr_sign_height_std();
}
inline float TSR::tsr_sign_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_height_std)
  return tsr_sign_height_std_;
}
inline void TSR::set_tsr_sign_height_std(float value) {
  set_has_tsr_sign_height_std();
  tsr_sign_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_height_std)
}

// optional float tsr_sign_panel_width = 24;
inline bool TSR::has_tsr_sign_panel_width() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TSR::set_has_tsr_sign_panel_width() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TSR::clear_has_tsr_sign_panel_width() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TSR::clear_tsr_sign_panel_width() {
  tsr_sign_panel_width_ = 0;
  clear_has_tsr_sign_panel_width();
}
inline float TSR::tsr_sign_panel_width() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_width)
  return tsr_sign_panel_width_;
}
inline void TSR::set_tsr_sign_panel_width(float value) {
  set_has_tsr_sign_panel_width();
  tsr_sign_panel_width_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_width)
}

// optional int32 reserved_8 = 25;
inline bool TSR::has_reserved_8() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TSR::set_has_reserved_8() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TSR::clear_has_reserved_8() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TSR::clear_reserved_8() {
  reserved_8_ = 0;
  clear_has_reserved_8();
}
inline ::google::protobuf::int32 TSR::reserved_8() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_8)
  return reserved_8_;
}
inline void TSR::set_reserved_8(::google::protobuf::int32 value) {
  set_has_reserved_8();
  reserved_8_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_8)
}

// optional float tsr_sign_panel_height = 26;
inline bool TSR::has_tsr_sign_panel_height() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TSR::set_has_tsr_sign_panel_height() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TSR::clear_has_tsr_sign_panel_height() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TSR::clear_tsr_sign_panel_height() {
  tsr_sign_panel_height_ = 0;
  clear_has_tsr_sign_panel_height();
}
inline float TSR::tsr_sign_panel_height() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_height)
  return tsr_sign_panel_height_;
}
inline void TSR::set_tsr_sign_panel_height(float value) {
  set_has_tsr_sign_panel_height();
  tsr_sign_panel_height_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_height)
}

// optional float tsr_sign_panel_width_std = 27;
inline bool TSR::has_tsr_sign_panel_width_std() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TSR::set_has_tsr_sign_panel_width_std() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TSR::clear_has_tsr_sign_panel_width_std() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TSR::clear_tsr_sign_panel_width_std() {
  tsr_sign_panel_width_std_ = 0;
  clear_has_tsr_sign_panel_width_std();
}
inline float TSR::tsr_sign_panel_width_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_width_std)
  return tsr_sign_panel_width_std_;
}
inline void TSR::set_tsr_sign_panel_width_std(float value) {
  set_has_tsr_sign_panel_width_std();
  tsr_sign_panel_width_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_width_std)
}

// optional float tsr_sign_panel_height_std = 28;
inline bool TSR::has_tsr_sign_panel_height_std() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TSR::set_has_tsr_sign_panel_height_std() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TSR::clear_has_tsr_sign_panel_height_std() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TSR::clear_tsr_sign_panel_height_std() {
  tsr_sign_panel_height_std_ = 0;
  clear_has_tsr_sign_panel_height_std();
}
inline float TSR::tsr_sign_panel_height_std() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_sign_panel_height_std)
  return tsr_sign_panel_height_std_;
}
inline void TSR::set_tsr_sign_panel_height_std(float value) {
  set_has_tsr_sign_panel_height_std();
  tsr_sign_panel_height_std_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_sign_panel_height_std)
}

// optional int32 reserved_9 = 29;
inline bool TSR::has_reserved_9() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TSR::set_has_reserved_9() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TSR::clear_has_reserved_9() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TSR::clear_reserved_9() {
  reserved_9_ = 0;
  clear_has_reserved_9();
}
inline ::google::protobuf::int32 TSR::reserved_9() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.reserved_9)
  return reserved_9_;
}
inline void TSR::set_reserved_9(::google::protobuf::int32 value) {
  set_has_reserved_9();
  reserved_9_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.reserved_9)
}

// optional float tsr_tracking_age = 30;
inline bool TSR::has_tsr_tracking_age() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TSR::set_has_tsr_tracking_age() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TSR::clear_has_tsr_tracking_age() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TSR::clear_tsr_tracking_age() {
  tsr_tracking_age_ = 0;
  clear_has_tsr_tracking_age();
}
inline float TSR::tsr_tracking_age() const {
  // @@protoc_insertion_point(field_get:atd.meprocess.TSR.tsr_tracking_age)
  return tsr_tracking_age_;
}
inline void TSR::set_tsr_tracking_age(float value) {
  set_has_tsr_tracking_age();
  tsr_tracking_age_ = value;
  // @@protoc_insertion_point(field_set:atd.meprocess.TSR.tsr_tracking_age)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace meprocess
}  // namespace atd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_App_Fatal_errorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_App_Minor_errorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_App_Temperture_ddrType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_Common_Com_daytime_indicatorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_Common_Com_hil_mode_statusType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_Common_Com_exposure_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::CACommon_Ca_region_codeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::ConArea_Ca_ca_object_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_alert_fcvType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Reserved_1Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_aeb_supp_aType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_fcw_supp_aType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_aeb_supp_bType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_fcw_supp_bType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_aeb_supp_cType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_fcw_supp_cType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_aeb_supp_dType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_fcw_supp_dType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_aeb_supp_eType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_fcw_supp_eType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_aeb_supp_fType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FCF_Fcf_vd_fcw_supp_fType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::VRUCommon_Fcf_vru_fcvType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::VRUCommon_Fcf_vru_supress_fcvType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::FCF_VRU_Fcf_vru_alert_lType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::FCF_VRU_Fcf_vru_supress_lType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_impacted_technologiesType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_rain_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_fog_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_splashes_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_self_glare_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_sun_ray_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_low_sun_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_blur_image_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_partial_blockage_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_full_blockage_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_frozen_windshield_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_calib_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_FailSafe_Fs_out_of_focus_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::FSPoint_Fsp_mobility_statusType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::FSPoint_Fsp_classification_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_HLB_Hlb_running_modeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_HLB_Hlb_inactive_reasonType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_HLB_Hlb_decisionType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_HLB_Hlb_reasonType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_LDW_Ldw_suppresion_reasonType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_leftType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_LDW_Ldw_warning_status_rightType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::Dt_Record_Lane_Support_CurHostLaneStutus> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Host_Line_ColorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Host_Line_Prediction_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Host_Line_Type_classificationType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Host_Line_Dlm_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Host_Line_Decel_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Adjacent_Line_ColorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Adjacent_Line_Prediction_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Adjacent_Line_Type_classType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Adjacent_Line_Dlm_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Adjacent_Line_Decel_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_Adjacent_Line_Line_roleType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_INTP_Intp_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::LS_INTP_Intp_line_roleType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::RoadEdge_Ls_road_edge_type_avg__classType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::RoadEdge_Ls_road_edge_prediction_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::RoadEdge_Ls_road_edge_sideType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::RoadEdge_Ls_road_edge_indexType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::ObjCommon_Obj_vd_cipv_lostType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::ObjCommon_Obj_vd_allow_acceType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::MeObject_Obj_measuring_statusType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::MeObject_Obj_object_classType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::MeObject_Obj_lane_assignmentType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::MeObject_Obj_motion_category> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::MeObject_Obj_motion_status> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::MeObject_Obj_motion_orientation> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::SLD_Sld_role_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::SLD_Sld_view_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::SLD_Sld_direction_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::SLD_Sld_type_0Type> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::SematicLine_Sl_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::SematicLine_Sl_colorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::SematicLine_Sl_measure_statusType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TFL_Tfl_colorType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TFL_Tfl_relevance_directionType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TFL_Tfl_structure_orientationType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TFL_Tfl_modeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TFL_Tfl_shapeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TSR_Tsr_relevancyType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TSR_Tsr_filter_typeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TSR_Tsr_sign_shapeType> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::meprocess::TSR_Tsr_sign_structureType> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto__INCLUDED
