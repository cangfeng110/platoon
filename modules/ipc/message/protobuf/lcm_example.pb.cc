// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/lcm_example.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/lcm_example.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace common {
class FixMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FixMsg> {
} _FixMsg_default_instance_;
class DelimitedMsgDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DelimitedMsg> {
} _DelimitedMsg_default_instance_;
class testarrayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<testarray> {
} _testarray_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _FixMsg_default_instance_.Shutdown();
  _DelimitedMsg_default_instance_.Shutdown();
  _testarray_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _FixMsg_default_instance_.DefaultConstruct();
  _DelimitedMsg_default_instance_.DefaultConstruct();
  _testarray_default_instance_.DefaultConstruct();
  _FixMsg_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _FixMsg_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _DelimitedMsg_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _DelimitedMsg_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FixMsg::kHeaderFieldNumber;
const int FixMsg::kReservedmsgFieldNumber;
const int FixMsg::kOnearrayFieldNumber;
const int FixMsg::kMsgNumFloat32FieldNumber;
const int FixMsg::kMsgNumFloat64FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FixMsg::FixMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.FixMsg)
}
FixMsg::FixMsg(const FixMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onearray_(from.onearray_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&msg_num_float_64_, &from.msg_num_float_64_,
    reinterpret_cast<char*>(&msg_num_float_32_) -
    reinterpret_cast<char*>(&msg_num_float_64_) + sizeof(msg_num_float_32_));
  // @@protoc_insertion_point(copy_constructor:atd.common.FixMsg)
}

void FixMsg::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&msg_num_float_32_) -
    reinterpret_cast<char*>(&header_) + sizeof(msg_num_float_32_));
}

FixMsg::~FixMsg() {
  // @@protoc_insertion_point(destructor:atd.common.FixMsg)
  SharedDtor();
}

void FixMsg::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void FixMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FixMsg& FixMsg::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::InitDefaults();
  return *internal_default_instance();
}

FixMsg* FixMsg::New(::google::protobuf::Arena* arena) const {
  FixMsg* n = new FixMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FixMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.FixMsg)
  onearray_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&msg_num_float_64_, 0, reinterpret_cast<char*>(&msg_num_float_32_) -
      reinterpret_cast<char*>(&msg_num_float_64_) + sizeof(msg_num_float_32_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FixMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.FixMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.testarray onearray = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onearray()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required float msg_num_float_32 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_msg_num_float_32();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &msg_num_float_32_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double msg_num_float_64 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_msg_num_float_64();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msg_num_float_64_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.FixMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.FixMsg)
  return false;
#undef DO_
}

void FixMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.FixMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // repeated .atd.common.testarray onearray = 3;
  for (unsigned int i = 0, n = this->onearray_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->onearray(i), output);
  }

  // required float msg_num_float_32 = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->msg_num_float_32(), output);
  }

  // required double msg_num_float_64 = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->msg_num_float_64(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.FixMsg)
}

size_t FixMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atd.common.FixMsg)
  size_t total_size = 0;

  if (has_msg_num_float_64()) {
    // required double msg_num_float_64 = 6;
    total_size += 1 + 8;
  }

  if (has_msg_num_float_32()) {
    // required float msg_num_float_32 = 5;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t FixMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.FixMsg)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required double msg_num_float_64 = 6;
    total_size += 1 + 8;

    // required float msg_num_float_32 = 5;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated .atd.common.testarray onearray = 3;
  {
    unsigned int count = this->onearray_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onearray(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FixMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FixMsg*>(&from));
}

void FixMsg::MergeFrom(const FixMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.FixMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onearray_.MergeFrom(from.onearray_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      msg_num_float_64_ = from.msg_num_float_64_;
    }
    if (cached_has_bits & 0x00000008u) {
      msg_num_float_32_ = from.msg_num_float_32_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FixMsg::CopyFrom(const FixMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.FixMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FixMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000c) != 0x0000000c) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->onearray())) return false;
  return true;
}

void FixMsg::Swap(FixMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FixMsg::InternalSwap(FixMsg* other) {
  onearray_.InternalSwap(&other->onearray_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(msg_num_float_64_, other->msg_num_float_64_);
  std::swap(msg_num_float_32_, other->msg_num_float_32_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FixMsg::GetTypeName() const {
  return "atd.common.FixMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FixMsg

// optional .atd.common.Header header = 1;
bool FixMsg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FixMsg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void FixMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void FixMsg::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& FixMsg::header() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* FixMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.FixMsg.header)
  return header_;
}
::atd::common::Header* FixMsg::release_header() {
  // @@protoc_insertion_point(field_release:atd.common.FixMsg.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void FixMsg::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.FixMsg.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool FixMsg::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FixMsg::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void FixMsg::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void FixMsg::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& FixMsg::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* FixMsg::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.FixMsg.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* FixMsg::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.common.FixMsg.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void FixMsg::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.FixMsg.reservedmsg)
}

// repeated .atd.common.testarray onearray = 3;
int FixMsg::onearray_size() const {
  return onearray_.size();
}
void FixMsg::clear_onearray() {
  onearray_.Clear();
}
const ::atd::common::testarray& FixMsg::onearray(int index) const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.onearray)
  return onearray_.Get(index);
}
::atd::common::testarray* FixMsg::mutable_onearray(int index) {
  // @@protoc_insertion_point(field_mutable:atd.common.FixMsg.onearray)
  return onearray_.Mutable(index);
}
::atd::common::testarray* FixMsg::add_onearray() {
  // @@protoc_insertion_point(field_add:atd.common.FixMsg.onearray)
  return onearray_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::testarray >*
FixMsg::mutable_onearray() {
  // @@protoc_insertion_point(field_mutable_list:atd.common.FixMsg.onearray)
  return &onearray_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::testarray >&
FixMsg::onearray() const {
  // @@protoc_insertion_point(field_list:atd.common.FixMsg.onearray)
  return onearray_;
}

// required float msg_num_float_32 = 5;
bool FixMsg::has_msg_num_float_32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void FixMsg::set_has_msg_num_float_32() {
  _has_bits_[0] |= 0x00000008u;
}
void FixMsg::clear_has_msg_num_float_32() {
  _has_bits_[0] &= ~0x00000008u;
}
void FixMsg::clear_msg_num_float_32() {
  msg_num_float_32_ = 0;
  clear_has_msg_num_float_32();
}
float FixMsg::msg_num_float_32() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.msg_num_float_32)
  return msg_num_float_32_;
}
void FixMsg::set_msg_num_float_32(float value) {
  set_has_msg_num_float_32();
  msg_num_float_32_ = value;
  // @@protoc_insertion_point(field_set:atd.common.FixMsg.msg_num_float_32)
}

// required double msg_num_float_64 = 6;
bool FixMsg::has_msg_num_float_64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void FixMsg::set_has_msg_num_float_64() {
  _has_bits_[0] |= 0x00000004u;
}
void FixMsg::clear_has_msg_num_float_64() {
  _has_bits_[0] &= ~0x00000004u;
}
void FixMsg::clear_msg_num_float_64() {
  msg_num_float_64_ = 0;
  clear_has_msg_num_float_64();
}
double FixMsg::msg_num_float_64() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.msg_num_float_64)
  return msg_num_float_64_;
}
void FixMsg::set_msg_num_float_64(double value) {
  set_has_msg_num_float_64();
  msg_num_float_64_ = value;
  // @@protoc_insertion_point(field_set:atd.common.FixMsg.msg_num_float_64)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DelimitedMsg::kHeaderFieldNumber;
const int DelimitedMsg::kReservedmsgFieldNumber;
const int DelimitedMsg::kMsgBytesFieldNumber;
const int DelimitedMsg::kMsgStringFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DelimitedMsg::DelimitedMsg()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.DelimitedMsg)
}
DelimitedMsg::DelimitedMsg(const DelimitedMsg& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_bytes()) {
    msg_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_bytes_);
  }
  msg_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg_string()) {
    msg_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_string_);
  }
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.common.DelimitedMsg)
}

void DelimitedMsg::SharedCtor() {
  _cached_size_ = 0;
  msg_bytes_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&reservedmsg_) -
    reinterpret_cast<char*>(&header_) + sizeof(reservedmsg_));
}

DelimitedMsg::~DelimitedMsg() {
  // @@protoc_insertion_point(destructor:atd.common.DelimitedMsg)
  SharedDtor();
}

void DelimitedMsg::SharedDtor() {
  msg_bytes_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void DelimitedMsg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DelimitedMsg& DelimitedMsg::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::InitDefaults();
  return *internal_default_instance();
}

DelimitedMsg* DelimitedMsg::New(::google::protobuf::Arena* arena) const {
  DelimitedMsg* n = new DelimitedMsg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DelimitedMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.DelimitedMsg)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_msg_bytes()) {
      GOOGLE_DCHECK(!msg_bytes_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_bytes_.UnsafeRawStringPointer())->clear();
    }
    if (has_msg_string()) {
      GOOGLE_DCHECK(!msg_string_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_string_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DelimitedMsg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.DelimitedMsg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes msg_bytes = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_msg_bytes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string msg_string = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg_string()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.DelimitedMsg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.DelimitedMsg)
  return false;
#undef DO_
}

void DelimitedMsg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.DelimitedMsg)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // required bytes msg_bytes = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->msg_bytes(), output);
  }

  // required string msg_string = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->msg_string(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.DelimitedMsg)
}

size_t DelimitedMsg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atd.common.DelimitedMsg)
  size_t total_size = 0;

  if (has_msg_bytes()) {
    // required bytes msg_bytes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_bytes());
  }

  if (has_msg_string()) {
    // required string msg_string = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_string());
  }

  return total_size;
}
size_t DelimitedMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.DelimitedMsg)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes msg_bytes = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->msg_bytes());

    // required string msg_string = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg_string());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 12u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DelimitedMsg::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DelimitedMsg*>(&from));
}

void DelimitedMsg::MergeFrom(const DelimitedMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.DelimitedMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg_bytes();
      msg_bytes_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_bytes_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_msg_string();
      msg_string_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_string_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
  }
}

void DelimitedMsg::CopyFrom(const DelimitedMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.DelimitedMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DelimitedMsg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DelimitedMsg::Swap(DelimitedMsg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DelimitedMsg::InternalSwap(DelimitedMsg* other) {
  msg_bytes_.Swap(&other->msg_bytes_);
  msg_string_.Swap(&other->msg_string_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DelimitedMsg::GetTypeName() const {
  return "atd.common.DelimitedMsg";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DelimitedMsg

// optional .atd.common.Header header = 1;
bool DelimitedMsg::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DelimitedMsg::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
void DelimitedMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
void DelimitedMsg::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& DelimitedMsg::header() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* DelimitedMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.header)
  return header_;
}
::atd::common::Header* DelimitedMsg::release_header() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void DelimitedMsg::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool DelimitedMsg::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DelimitedMsg::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000008u;
}
void DelimitedMsg::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
void DelimitedMsg::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& DelimitedMsg::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* DelimitedMsg::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* DelimitedMsg::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void DelimitedMsg::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.reservedmsg)
}

// required bytes msg_bytes = 3;
bool DelimitedMsg::has_msg_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DelimitedMsg::set_has_msg_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
void DelimitedMsg::clear_has_msg_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
void DelimitedMsg::clear_msg_bytes() {
  msg_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_bytes();
}
const ::std::string& DelimitedMsg::msg_bytes() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.msg_bytes)
  return msg_bytes_.GetNoArena();
}
void DelimitedMsg::set_msg_bytes(const ::std::string& value) {
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.common.DelimitedMsg.msg_bytes)
}
#if LANG_CXX11
void DelimitedMsg::set_msg_bytes(::std::string&& value) {
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.common.DelimitedMsg.msg_bytes)
}
#endif
void DelimitedMsg::set_msg_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.common.DelimitedMsg.msg_bytes)
}
void DelimitedMsg::set_msg_bytes(const void* value, size_t size) {
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.common.DelimitedMsg.msg_bytes)
}
::std::string* DelimitedMsg::mutable_msg_bytes() {
  set_has_msg_bytes();
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.msg_bytes)
  return msg_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelimitedMsg::release_msg_bytes() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.msg_bytes)
  clear_has_msg_bytes();
  return msg_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelimitedMsg::set_allocated_msg_bytes(::std::string* msg_bytes) {
  if (msg_bytes != NULL) {
    set_has_msg_bytes();
  } else {
    clear_has_msg_bytes();
  }
  msg_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_bytes);
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.msg_bytes)
}

// required string msg_string = 4;
bool DelimitedMsg::has_msg_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DelimitedMsg::set_has_msg_string() {
  _has_bits_[0] |= 0x00000002u;
}
void DelimitedMsg::clear_has_msg_string() {
  _has_bits_[0] &= ~0x00000002u;
}
void DelimitedMsg::clear_msg_string() {
  msg_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_string();
}
const ::std::string& DelimitedMsg::msg_string() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.msg_string)
  return msg_string_.GetNoArena();
}
void DelimitedMsg::set_msg_string(const ::std::string& value) {
  set_has_msg_string();
  msg_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.common.DelimitedMsg.msg_string)
}
#if LANG_CXX11
void DelimitedMsg::set_msg_string(::std::string&& value) {
  set_has_msg_string();
  msg_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.common.DelimitedMsg.msg_string)
}
#endif
void DelimitedMsg::set_msg_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_string();
  msg_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.common.DelimitedMsg.msg_string)
}
void DelimitedMsg::set_msg_string(const char* value, size_t size) {
  set_has_msg_string();
  msg_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.common.DelimitedMsg.msg_string)
}
::std::string* DelimitedMsg::mutable_msg_string() {
  set_has_msg_string();
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.msg_string)
  return msg_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DelimitedMsg::release_msg_string() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.msg_string)
  clear_has_msg_string();
  return msg_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DelimitedMsg::set_allocated_msg_string(::std::string* msg_string) {
  if (msg_string != NULL) {
    set_has_msg_string();
  } else {
    clear_has_msg_string();
  }
  msg_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_string);
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.msg_string)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int testarray::kMsg1FieldNumber;
const int testarray::kMsg2FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

testarray::testarray()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.testarray)
}
testarray::testarray(const testarray& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&msg_2_, &from.msg_2_,
    reinterpret_cast<char*>(&msg_1_) -
    reinterpret_cast<char*>(&msg_2_) + sizeof(msg_1_));
  // @@protoc_insertion_point(copy_constructor:atd.common.testarray)
}

void testarray::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&msg_2_, 0, reinterpret_cast<char*>(&msg_1_) -
    reinterpret_cast<char*>(&msg_2_) + sizeof(msg_1_));
}

testarray::~testarray() {
  // @@protoc_insertion_point(destructor:atd.common.testarray)
  SharedDtor();
}

void testarray::SharedDtor() {
}

void testarray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const testarray& testarray::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::InitDefaults();
  return *internal_default_instance();
}

testarray* testarray::New(::google::protobuf::Arena* arena) const {
  testarray* n = new testarray;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void testarray::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.testarray)
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&msg_2_, 0, reinterpret_cast<char*>(&msg_1_) -
      reinterpret_cast<char*>(&msg_2_) + sizeof(msg_1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool testarray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.testarray)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float msg_1 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_msg_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &msg_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required double msg_2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_msg_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &msg_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.testarray)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.testarray)
  return false;
#undef DO_
}

void testarray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.testarray)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required float msg_1 = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->msg_1(), output);
  }

  // required double msg_2 = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->msg_2(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.testarray)
}

size_t testarray::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atd.common.testarray)
  size_t total_size = 0;

  if (has_msg_2()) {
    // required double msg_2 = 2;
    total_size += 1 + 8;
  }

  if (has_msg_1()) {
    // required float msg_1 = 1;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t testarray::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.testarray)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double msg_2 = 2;
    total_size += 1 + 8;

    // required float msg_1 = 1;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void testarray::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const testarray*>(&from));
}

void testarray::MergeFrom(const testarray& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.testarray)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      msg_2_ = from.msg_2_;
    }
    if (cached_has_bits & 0x00000002u) {
      msg_1_ = from.msg_1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void testarray::CopyFrom(const testarray& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.testarray)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool testarray::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void testarray::Swap(testarray* other) {
  if (other == this) return;
  InternalSwap(other);
}
void testarray::InternalSwap(testarray* other) {
  std::swap(msg_2_, other->msg_2_);
  std::swap(msg_1_, other->msg_1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string testarray::GetTypeName() const {
  return "atd.common.testarray";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// testarray

// required float msg_1 = 1;
bool testarray::has_msg_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void testarray::set_has_msg_1() {
  _has_bits_[0] |= 0x00000002u;
}
void testarray::clear_has_msg_1() {
  _has_bits_[0] &= ~0x00000002u;
}
void testarray::clear_msg_1() {
  msg_1_ = 0;
  clear_has_msg_1();
}
float testarray::msg_1() const {
  // @@protoc_insertion_point(field_get:atd.common.testarray.msg_1)
  return msg_1_;
}
void testarray::set_msg_1(float value) {
  set_has_msg_1();
  msg_1_ = value;
  // @@protoc_insertion_point(field_set:atd.common.testarray.msg_1)
}

// required double msg_2 = 2;
bool testarray::has_msg_2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void testarray::set_has_msg_2() {
  _has_bits_[0] |= 0x00000001u;
}
void testarray::clear_has_msg_2() {
  _has_bits_[0] &= ~0x00000001u;
}
void testarray::clear_msg_2() {
  msg_2_ = 0;
  clear_has_msg_2();
}
double testarray::msg_2() const {
  // @@protoc_insertion_point(field_get:atd.common.testarray.msg_2)
  return msg_2_;
}
void testarray::set_msg_2(double value) {
  set_has_msg_2();
  msg_2_ = value;
  // @@protoc_insertion_point(field_set:atd.common.testarray.msg_2)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace atd

// @@protoc_insertion_point(global_scope)
