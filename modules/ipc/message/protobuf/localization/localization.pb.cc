// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/localization/localization.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/localization/localization.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace localization {
class UncertaintyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Uncertainty> {
} _Uncertainty_default_instance_;
class LocalizationAbsEstimateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalizationAbsEstimate> {
} _LocalizationAbsEstimate_default_instance_;
class LocalizationMapMatchEstimateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalizationMapMatchEstimate> {
} _LocalizationMapMatchEstimate_default_instance_;
class LocalizationEstimateDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocalizationEstimate> {
} _LocalizationEstimate_default_instance_;
class ParticleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Particle> {
} _Particle_default_instance_;
class ParticlesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Particles> {
} _Particles_default_instance_;
class Particles_CollectionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Particles_Collection> {
} _Particles_Collection_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Uncertainty_default_instance_.Shutdown();
  _LocalizationAbsEstimate_default_instance_.Shutdown();
  _LocalizationMapMatchEstimate_default_instance_.Shutdown();
  _LocalizationEstimate_default_instance_.Shutdown();
  _Particle_default_instance_.Shutdown();
  _Particles_default_instance_.Shutdown();
  _Particles_Collection_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fpnc_5fpoint_2eproto::InitDefaults();
  _Uncertainty_default_instance_.DefaultConstruct();
  _LocalizationAbsEstimate_default_instance_.DefaultConstruct();
  _LocalizationMapMatchEstimate_default_instance_.DefaultConstruct();
  _LocalizationEstimate_default_instance_.DefaultConstruct();
  _Particle_default_instance_.DefaultConstruct();
  _Particles_default_instance_.DefaultConstruct();
  _Particles_Collection_default_instance_.DefaultConstruct();
  _Uncertainty_default_instance_.get_mutable()->position_std_dev_ = const_cast< ::atd::common::Point3D*>(
      ::atd::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->orientation_std_dev_ = const_cast< ::atd::common::Point3D*>(
      ::atd::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->linear_velocity_std_dev_ = const_cast< ::atd::common::Point3D*>(
      ::atd::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->linear_acceleration_std_dev_ = const_cast< ::atd::common::Point3D*>(
      ::atd::common::Point3D::internal_default_instance());
  _Uncertainty_default_instance_.get_mutable()->angular_velocity_std_dev_ = const_cast< ::atd::common::Point3D*>(
      ::atd::common::Point3D::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->uncertainty_ = const_cast< ::atd::localization::Uncertainty*>(
      ::atd::localization::Uncertainty::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->uwb_ = const_cast< ::atd::localization::Particles*>(
      ::atd::localization::Particles::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->ins_ = const_cast< ::atd::localization::Particles*>(
      ::atd::localization::Particles::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->ofilm_ = const_cast< ::atd::localization::Particles*>(
      ::atd::localization::Particles::internal_default_instance());
  _LocalizationAbsEstimate_default_instance_.get_mutable()->locabs_ = const_cast< ::atd::localization::Particles*>(
      ::atd::localization::Particles::internal_default_instance());
  _LocalizationMapMatchEstimate_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _LocalizationMapMatchEstimate_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _LocalizationMapMatchEstimate_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _LocalizationMapMatchEstimate_default_instance_.get_mutable()->uncertainty_ = const_cast< ::atd::localization::Uncertainty*>(
      ::atd::localization::Uncertainty::internal_default_instance());
  _LocalizationMapMatchEstimate_default_instance_.get_mutable()->histraj_ = const_cast< ::atd::localization::Particles*>(
      ::atd::localization::Particles::internal_default_instance());
  _LocalizationMapMatchEstimate_default_instance_.get_mutable()->grid_ = const_cast< ::atd::localization::Particles*>(
      ::atd::localization::Particles::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->uncertainty_ = const_cast< ::atd::localization::Uncertainty*>(
      ::atd::localization::Uncertainty::internal_default_instance());
  _LocalizationEstimate_default_instance_.get_mutable()->particles_ = const_cast< ::atd::localization::Particles*>(
      ::atd::localization::Particles::internal_default_instance());
  _Particle_default_instance_.get_mutable()->arrow_ = const_cast< ::atd::common::Arrow2D*>(
      ::atd::common::Arrow2D::internal_default_instance());
  _Particle_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _Particles_Collection_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Particles_Collection_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fpnc_5fpoint_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto

bool MeasureState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uncertainty::kPositionStdDevFieldNumber;
const int Uncertainty::kOrientationStdDevFieldNumber;
const int Uncertainty::kLinearVelocityStdDevFieldNumber;
const int Uncertainty::kLinearAccelerationStdDevFieldNumber;
const int Uncertainty::kAngularVelocityStdDevFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uncertainty::Uncertainty()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.localization.Uncertainty)
}
Uncertainty::Uncertainty(const Uncertainty& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position_std_dev()) {
    position_std_dev_ = new ::atd::common::Point3D(*from.position_std_dev_);
  } else {
    position_std_dev_ = NULL;
  }
  if (from.has_orientation_std_dev()) {
    orientation_std_dev_ = new ::atd::common::Point3D(*from.orientation_std_dev_);
  } else {
    orientation_std_dev_ = NULL;
  }
  if (from.has_linear_velocity_std_dev()) {
    linear_velocity_std_dev_ = new ::atd::common::Point3D(*from.linear_velocity_std_dev_);
  } else {
    linear_velocity_std_dev_ = NULL;
  }
  if (from.has_linear_acceleration_std_dev()) {
    linear_acceleration_std_dev_ = new ::atd::common::Point3D(*from.linear_acceleration_std_dev_);
  } else {
    linear_acceleration_std_dev_ = NULL;
  }
  if (from.has_angular_velocity_std_dev()) {
    angular_velocity_std_dev_ = new ::atd::common::Point3D(*from.angular_velocity_std_dev_);
  } else {
    angular_velocity_std_dev_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.localization.Uncertainty)
}

void Uncertainty::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_std_dev_, 0, reinterpret_cast<char*>(&angular_velocity_std_dev_) -
    reinterpret_cast<char*>(&position_std_dev_) + sizeof(angular_velocity_std_dev_));
}

Uncertainty::~Uncertainty() {
  // @@protoc_insertion_point(destructor:atd.localization.Uncertainty)
  SharedDtor();
}

void Uncertainty::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete orientation_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete linear_velocity_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete linear_acceleration_std_dev_;
  }
  if (this != internal_default_instance()) {
    delete angular_velocity_std_dev_;
  }
}

void Uncertainty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Uncertainty& Uncertainty::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Uncertainty* Uncertainty::New(::google::protobuf::Arena* arena) const {
  Uncertainty* n = new Uncertainty;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uncertainty::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.localization.Uncertainty)
  if (_has_bits_[0 / 32] & 31u) {
    if (has_position_std_dev()) {
      GOOGLE_DCHECK(position_std_dev_ != NULL);
      position_std_dev_->::atd::common::Point3D::Clear();
    }
    if (has_orientation_std_dev()) {
      GOOGLE_DCHECK(orientation_std_dev_ != NULL);
      orientation_std_dev_->::atd::common::Point3D::Clear();
    }
    if (has_linear_velocity_std_dev()) {
      GOOGLE_DCHECK(linear_velocity_std_dev_ != NULL);
      linear_velocity_std_dev_->::atd::common::Point3D::Clear();
    }
    if (has_linear_acceleration_std_dev()) {
      GOOGLE_DCHECK(linear_acceleration_std_dev_ != NULL);
      linear_acceleration_std_dev_->::atd::common::Point3D::Clear();
    }
    if (has_angular_velocity_std_dev()) {
      GOOGLE_DCHECK(angular_velocity_std_dev_ != NULL);
      angular_velocity_std_dev_->::atd::common::Point3D::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Uncertainty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.localization.Uncertainty)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Point3D position_std_dev = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Point3D orientation_std_dev = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Point3D linear_velocity_std_dev = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Point3D linear_acceleration_std_dev = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_linear_acceleration_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Point3D angular_velocity_std_dev = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_angular_velocity_std_dev()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.localization.Uncertainty)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.localization.Uncertainty)
  return false;
#undef DO_
}

void Uncertainty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.localization.Uncertainty)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Point3D position_std_dev = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->position_std_dev_, output);
  }

  // optional .atd.common.Point3D orientation_std_dev = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->orientation_std_dev_, output);
  }

  // optional .atd.common.Point3D linear_velocity_std_dev = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->linear_velocity_std_dev_, output);
  }

  // optional .atd.common.Point3D linear_acceleration_std_dev = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->linear_acceleration_std_dev_, output);
  }

  // optional .atd.common.Point3D angular_velocity_std_dev = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->angular_velocity_std_dev_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.localization.Uncertainty)
}

size_t Uncertainty::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.localization.Uncertainty)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .atd.common.Point3D position_std_dev = 1;
    if (has_position_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_std_dev_);
    }

    // optional .atd.common.Point3D orientation_std_dev = 2;
    if (has_orientation_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->orientation_std_dev_);
    }

    // optional .atd.common.Point3D linear_velocity_std_dev = 3;
    if (has_linear_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_velocity_std_dev_);
    }

    // optional .atd.common.Point3D linear_acceleration_std_dev = 4;
    if (has_linear_acceleration_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->linear_acceleration_std_dev_);
    }

    // optional .atd.common.Point3D angular_velocity_std_dev = 5;
    if (has_angular_velocity_std_dev()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->angular_velocity_std_dev_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uncertainty::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Uncertainty*>(&from));
}

void Uncertainty::MergeFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.localization.Uncertainty)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position_std_dev()->::atd::common::Point3D::MergeFrom(from.position_std_dev());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_orientation_std_dev()->::atd::common::Point3D::MergeFrom(from.orientation_std_dev());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_linear_velocity_std_dev()->::atd::common::Point3D::MergeFrom(from.linear_velocity_std_dev());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_linear_acceleration_std_dev()->::atd::common::Point3D::MergeFrom(from.linear_acceleration_std_dev());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_angular_velocity_std_dev()->::atd::common::Point3D::MergeFrom(from.angular_velocity_std_dev());
    }
  }
}

void Uncertainty::CopyFrom(const Uncertainty& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.localization.Uncertainty)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uncertainty::IsInitialized() const {
  return true;
}

void Uncertainty::Swap(Uncertainty* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uncertainty::InternalSwap(Uncertainty* other) {
  std::swap(position_std_dev_, other->position_std_dev_);
  std::swap(orientation_std_dev_, other->orientation_std_dev_);
  std::swap(linear_velocity_std_dev_, other->linear_velocity_std_dev_);
  std::swap(linear_acceleration_std_dev_, other->linear_acceleration_std_dev_);
  std::swap(angular_velocity_std_dev_, other->angular_velocity_std_dev_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Uncertainty::GetTypeName() const {
  return "atd.localization.Uncertainty";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uncertainty

// optional .atd.common.Point3D position_std_dev = 1;
bool Uncertainty::has_position_std_dev() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Uncertainty::set_has_position_std_dev() {
  _has_bits_[0] |= 0x00000001u;
}
void Uncertainty::clear_has_position_std_dev() {
  _has_bits_[0] &= ~0x00000001u;
}
void Uncertainty::clear_position_std_dev() {
  if (position_std_dev_ != NULL) position_std_dev_->::atd::common::Point3D::Clear();
  clear_has_position_std_dev();
}
const ::atd::common::Point3D& Uncertainty::position_std_dev() const {
  // @@protoc_insertion_point(field_get:atd.localization.Uncertainty.position_std_dev)
  return position_std_dev_ != NULL ? *position_std_dev_
                         : *::atd::common::Point3D::internal_default_instance();
}
::atd::common::Point3D* Uncertainty::mutable_position_std_dev() {
  set_has_position_std_dev();
  if (position_std_dev_ == NULL) {
    position_std_dev_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Uncertainty.position_std_dev)
  return position_std_dev_;
}
::atd::common::Point3D* Uncertainty::release_position_std_dev() {
  // @@protoc_insertion_point(field_release:atd.localization.Uncertainty.position_std_dev)
  clear_has_position_std_dev();
  ::atd::common::Point3D* temp = position_std_dev_;
  position_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_position_std_dev(::atd::common::Point3D* position_std_dev) {
  delete position_std_dev_;
  position_std_dev_ = position_std_dev;
  if (position_std_dev) {
    set_has_position_std_dev();
  } else {
    clear_has_position_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Uncertainty.position_std_dev)
}

// optional .atd.common.Point3D orientation_std_dev = 2;
bool Uncertainty::has_orientation_std_dev() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Uncertainty::set_has_orientation_std_dev() {
  _has_bits_[0] |= 0x00000002u;
}
void Uncertainty::clear_has_orientation_std_dev() {
  _has_bits_[0] &= ~0x00000002u;
}
void Uncertainty::clear_orientation_std_dev() {
  if (orientation_std_dev_ != NULL) orientation_std_dev_->::atd::common::Point3D::Clear();
  clear_has_orientation_std_dev();
}
const ::atd::common::Point3D& Uncertainty::orientation_std_dev() const {
  // @@protoc_insertion_point(field_get:atd.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_ != NULL ? *orientation_std_dev_
                         : *::atd::common::Point3D::internal_default_instance();
}
::atd::common::Point3D* Uncertainty::mutable_orientation_std_dev() {
  set_has_orientation_std_dev();
  if (orientation_std_dev_ == NULL) {
    orientation_std_dev_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Uncertainty.orientation_std_dev)
  return orientation_std_dev_;
}
::atd::common::Point3D* Uncertainty::release_orientation_std_dev() {
  // @@protoc_insertion_point(field_release:atd.localization.Uncertainty.orientation_std_dev)
  clear_has_orientation_std_dev();
  ::atd::common::Point3D* temp = orientation_std_dev_;
  orientation_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_orientation_std_dev(::atd::common::Point3D* orientation_std_dev) {
  delete orientation_std_dev_;
  orientation_std_dev_ = orientation_std_dev;
  if (orientation_std_dev) {
    set_has_orientation_std_dev();
  } else {
    clear_has_orientation_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Uncertainty.orientation_std_dev)
}

// optional .atd.common.Point3D linear_velocity_std_dev = 3;
bool Uncertainty::has_linear_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Uncertainty::set_has_linear_velocity_std_dev() {
  _has_bits_[0] |= 0x00000004u;
}
void Uncertainty::clear_has_linear_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000004u;
}
void Uncertainty::clear_linear_velocity_std_dev() {
  if (linear_velocity_std_dev_ != NULL) linear_velocity_std_dev_->::atd::common::Point3D::Clear();
  clear_has_linear_velocity_std_dev();
}
const ::atd::common::Point3D& Uncertainty::linear_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:atd.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_ != NULL ? *linear_velocity_std_dev_
                         : *::atd::common::Point3D::internal_default_instance();
}
::atd::common::Point3D* Uncertainty::mutable_linear_velocity_std_dev() {
  set_has_linear_velocity_std_dev();
  if (linear_velocity_std_dev_ == NULL) {
    linear_velocity_std_dev_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Uncertainty.linear_velocity_std_dev)
  return linear_velocity_std_dev_;
}
::atd::common::Point3D* Uncertainty::release_linear_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:atd.localization.Uncertainty.linear_velocity_std_dev)
  clear_has_linear_velocity_std_dev();
  ::atd::common::Point3D* temp = linear_velocity_std_dev_;
  linear_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_velocity_std_dev(::atd::common::Point3D* linear_velocity_std_dev) {
  delete linear_velocity_std_dev_;
  linear_velocity_std_dev_ = linear_velocity_std_dev;
  if (linear_velocity_std_dev) {
    set_has_linear_velocity_std_dev();
  } else {
    clear_has_linear_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Uncertainty.linear_velocity_std_dev)
}

// optional .atd.common.Point3D linear_acceleration_std_dev = 4;
bool Uncertainty::has_linear_acceleration_std_dev() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Uncertainty::set_has_linear_acceleration_std_dev() {
  _has_bits_[0] |= 0x00000008u;
}
void Uncertainty::clear_has_linear_acceleration_std_dev() {
  _has_bits_[0] &= ~0x00000008u;
}
void Uncertainty::clear_linear_acceleration_std_dev() {
  if (linear_acceleration_std_dev_ != NULL) linear_acceleration_std_dev_->::atd::common::Point3D::Clear();
  clear_has_linear_acceleration_std_dev();
}
const ::atd::common::Point3D& Uncertainty::linear_acceleration_std_dev() const {
  // @@protoc_insertion_point(field_get:atd.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_ != NULL ? *linear_acceleration_std_dev_
                         : *::atd::common::Point3D::internal_default_instance();
}
::atd::common::Point3D* Uncertainty::mutable_linear_acceleration_std_dev() {
  set_has_linear_acceleration_std_dev();
  if (linear_acceleration_std_dev_ == NULL) {
    linear_acceleration_std_dev_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Uncertainty.linear_acceleration_std_dev)
  return linear_acceleration_std_dev_;
}
::atd::common::Point3D* Uncertainty::release_linear_acceleration_std_dev() {
  // @@protoc_insertion_point(field_release:atd.localization.Uncertainty.linear_acceleration_std_dev)
  clear_has_linear_acceleration_std_dev();
  ::atd::common::Point3D* temp = linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_linear_acceleration_std_dev(::atd::common::Point3D* linear_acceleration_std_dev) {
  delete linear_acceleration_std_dev_;
  linear_acceleration_std_dev_ = linear_acceleration_std_dev;
  if (linear_acceleration_std_dev) {
    set_has_linear_acceleration_std_dev();
  } else {
    clear_has_linear_acceleration_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Uncertainty.linear_acceleration_std_dev)
}

// optional .atd.common.Point3D angular_velocity_std_dev = 5;
bool Uncertainty::has_angular_velocity_std_dev() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Uncertainty::set_has_angular_velocity_std_dev() {
  _has_bits_[0] |= 0x00000010u;
}
void Uncertainty::clear_has_angular_velocity_std_dev() {
  _has_bits_[0] &= ~0x00000010u;
}
void Uncertainty::clear_angular_velocity_std_dev() {
  if (angular_velocity_std_dev_ != NULL) angular_velocity_std_dev_->::atd::common::Point3D::Clear();
  clear_has_angular_velocity_std_dev();
}
const ::atd::common::Point3D& Uncertainty::angular_velocity_std_dev() const {
  // @@protoc_insertion_point(field_get:atd.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_ != NULL ? *angular_velocity_std_dev_
                         : *::atd::common::Point3D::internal_default_instance();
}
::atd::common::Point3D* Uncertainty::mutable_angular_velocity_std_dev() {
  set_has_angular_velocity_std_dev();
  if (angular_velocity_std_dev_ == NULL) {
    angular_velocity_std_dev_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Uncertainty.angular_velocity_std_dev)
  return angular_velocity_std_dev_;
}
::atd::common::Point3D* Uncertainty::release_angular_velocity_std_dev() {
  // @@protoc_insertion_point(field_release:atd.localization.Uncertainty.angular_velocity_std_dev)
  clear_has_angular_velocity_std_dev();
  ::atd::common::Point3D* temp = angular_velocity_std_dev_;
  angular_velocity_std_dev_ = NULL;
  return temp;
}
void Uncertainty::set_allocated_angular_velocity_std_dev(::atd::common::Point3D* angular_velocity_std_dev) {
  delete angular_velocity_std_dev_;
  angular_velocity_std_dev_ = angular_velocity_std_dev;
  if (angular_velocity_std_dev) {
    set_has_angular_velocity_std_dev();
  } else {
    clear_has_angular_velocity_std_dev();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Uncertainty.angular_velocity_std_dev)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationAbsEstimate::kHeaderFieldNumber;
const int LocalizationAbsEstimate::kReservedmsgFieldNumber;
const int LocalizationAbsEstimate::kPoseFieldNumber;
const int LocalizationAbsEstimate::kUncertaintyFieldNumber;
const int LocalizationAbsEstimate::kUwbFieldNumber;
const int LocalizationAbsEstimate::kInsFieldNumber;
const int LocalizationAbsEstimate::kOfilmFieldNumber;
const int LocalizationAbsEstimate::kLocabsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationAbsEstimate::LocalizationAbsEstimate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.localization.LocalizationAbsEstimate)
}
LocalizationAbsEstimate::LocalizationAbsEstimate(const LocalizationAbsEstimate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_uncertainty()) {
    uncertainty_ = new ::atd::localization::Uncertainty(*from.uncertainty_);
  } else {
    uncertainty_ = NULL;
  }
  if (from.has_uwb()) {
    uwb_ = new ::atd::localization::Particles(*from.uwb_);
  } else {
    uwb_ = NULL;
  }
  if (from.has_ins()) {
    ins_ = new ::atd::localization::Particles(*from.ins_);
  } else {
    ins_ = NULL;
  }
  if (from.has_ofilm()) {
    ofilm_ = new ::atd::localization::Particles(*from.ofilm_);
  } else {
    ofilm_ = NULL;
  }
  if (from.has_locabs()) {
    locabs_ = new ::atd::localization::Particles(*from.locabs_);
  } else {
    locabs_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.localization.LocalizationAbsEstimate)
}

void LocalizationAbsEstimate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&locabs_) -
    reinterpret_cast<char*>(&header_) + sizeof(locabs_));
}

LocalizationAbsEstimate::~LocalizationAbsEstimate() {
  // @@protoc_insertion_point(destructor:atd.localization.LocalizationAbsEstimate)
  SharedDtor();
}

void LocalizationAbsEstimate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete uncertainty_;
  }
  if (this != internal_default_instance()) {
    delete uwb_;
  }
  if (this != internal_default_instance()) {
    delete ins_;
  }
  if (this != internal_default_instance()) {
    delete ofilm_;
  }
  if (this != internal_default_instance()) {
    delete locabs_;
  }
}

void LocalizationAbsEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocalizationAbsEstimate& LocalizationAbsEstimate::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationAbsEstimate* LocalizationAbsEstimate::New(::google::protobuf::Arena* arena) const {
  LocalizationAbsEstimate* n = new LocalizationAbsEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationAbsEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.localization.LocalizationAbsEstimate)
  if (_has_bits_[0 / 32] & 255u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_uncertainty()) {
      GOOGLE_DCHECK(uncertainty_ != NULL);
      uncertainty_->::atd::localization::Uncertainty::Clear();
    }
    if (has_uwb()) {
      GOOGLE_DCHECK(uwb_ != NULL);
      uwb_->::atd::localization::Particles::Clear();
    }
    if (has_ins()) {
      GOOGLE_DCHECK(ins_ != NULL);
      ins_->::atd::localization::Particles::Clear();
    }
    if (has_ofilm()) {
      GOOGLE_DCHECK(ofilm_ != NULL);
      ofilm_->::atd::localization::Particles::Clear();
    }
    if (has_locabs()) {
      GOOGLE_DCHECK(locabs_ != NULL);
      locabs_->::atd::localization::Particles::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationAbsEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.localization.LocalizationAbsEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Uncertainty uncertainty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Particles uwb = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uwb()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Particles ins = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Particles ofilm = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ofilm()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Particles locabs = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_locabs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.localization.LocalizationAbsEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.localization.LocalizationAbsEstimate)
  return false;
#undef DO_
}

void LocalizationAbsEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.localization.LocalizationAbsEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // optional .atd.localization.Uncertainty uncertainty = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->uncertainty_, output);
  }

  // optional .atd.localization.Particles uwb = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->uwb_, output);
  }

  // optional .atd.localization.Particles ins = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->ins_, output);
  }

  // optional .atd.localization.Particles ofilm = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->ofilm_, output);
  }

  // optional .atd.localization.Particles locabs = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->locabs_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.localization.LocalizationAbsEstimate)
}

size_t LocalizationAbsEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.localization.LocalizationAbsEstimate)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.localization.Uncertainty uncertainty = 4;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uncertainty_);
    }

    // optional .atd.localization.Particles uwb = 5;
    if (has_uwb()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uwb_);
    }

    // optional .atd.localization.Particles ins = 6;
    if (has_ins()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ins_);
    }

    // optional .atd.localization.Particles ofilm = 7;
    if (has_ofilm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->ofilm_);
    }

    // optional .atd.localization.Particles locabs = 8;
    if (has_locabs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->locabs_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationAbsEstimate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocalizationAbsEstimate*>(&from));
}

void LocalizationAbsEstimate::MergeFrom(const LocalizationAbsEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.localization.LocalizationAbsEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_uncertainty()->::atd::localization::Uncertainty::MergeFrom(from.uncertainty());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_uwb()->::atd::localization::Particles::MergeFrom(from.uwb());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_ins()->::atd::localization::Particles::MergeFrom(from.ins());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_ofilm()->::atd::localization::Particles::MergeFrom(from.ofilm());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_locabs()->::atd::localization::Particles::MergeFrom(from.locabs());
    }
  }
}

void LocalizationAbsEstimate::CopyFrom(const LocalizationAbsEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.localization.LocalizationAbsEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationAbsEstimate::IsInitialized() const {
  return true;
}

void LocalizationAbsEstimate::Swap(LocalizationAbsEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationAbsEstimate::InternalSwap(LocalizationAbsEstimate* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(uncertainty_, other->uncertainty_);
  std::swap(uwb_, other->uwb_);
  std::swap(ins_, other->ins_);
  std::swap(ofilm_, other->ofilm_);
  std::swap(locabs_, other->locabs_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LocalizationAbsEstimate::GetTypeName() const {
  return "atd.localization.LocalizationAbsEstimate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationAbsEstimate

// optional .atd.common.Header header = 1;
bool LocalizationAbsEstimate::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationAbsEstimate::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationAbsEstimate::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationAbsEstimate::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& LocalizationAbsEstimate::header() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* LocalizationAbsEstimate::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.header)
  return header_;
}
::atd::common::Header* LocalizationAbsEstimate::release_header() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool LocalizationAbsEstimate::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationAbsEstimate::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationAbsEstimate::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationAbsEstimate::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& LocalizationAbsEstimate::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* LocalizationAbsEstimate::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* LocalizationAbsEstimate::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool LocalizationAbsEstimate::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationAbsEstimate::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationAbsEstimate::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationAbsEstimate::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& LocalizationAbsEstimate::pose() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* LocalizationAbsEstimate::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.pose)
  return pose_;
}
::atd::localization::Pose* LocalizationAbsEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.pose)
}

// optional .atd.localization.Uncertainty uncertainty = 4;
bool LocalizationAbsEstimate::has_uncertainty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationAbsEstimate::set_has_uncertainty() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationAbsEstimate::clear_has_uncertainty() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationAbsEstimate::clear_uncertainty() {
  if (uncertainty_ != NULL) uncertainty_->::atd::localization::Uncertainty::Clear();
  clear_has_uncertainty();
}
const ::atd::localization::Uncertainty& LocalizationAbsEstimate::uncertainty() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.uncertainty)
  return uncertainty_ != NULL ? *uncertainty_
                         : *::atd::localization::Uncertainty::internal_default_instance();
}
::atd::localization::Uncertainty* LocalizationAbsEstimate::mutable_uncertainty() {
  set_has_uncertainty();
  if (uncertainty_ == NULL) {
    uncertainty_ = new ::atd::localization::Uncertainty;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.uncertainty)
  return uncertainty_;
}
::atd::localization::Uncertainty* LocalizationAbsEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.uncertainty)
  clear_has_uncertainty();
  ::atd::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_uncertainty(::atd::localization::Uncertainty* uncertainty) {
  delete uncertainty_;
  uncertainty_ = uncertainty;
  if (uncertainty) {
    set_has_uncertainty();
  } else {
    clear_has_uncertainty();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.uncertainty)
}

// optional .atd.localization.Particles uwb = 5;
bool LocalizationAbsEstimate::has_uwb() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalizationAbsEstimate::set_has_uwb() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalizationAbsEstimate::clear_has_uwb() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalizationAbsEstimate::clear_uwb() {
  if (uwb_ != NULL) uwb_->::atd::localization::Particles::Clear();
  clear_has_uwb();
}
const ::atd::localization::Particles& LocalizationAbsEstimate::uwb() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.uwb)
  return uwb_ != NULL ? *uwb_
                         : *::atd::localization::Particles::internal_default_instance();
}
::atd::localization::Particles* LocalizationAbsEstimate::mutable_uwb() {
  set_has_uwb();
  if (uwb_ == NULL) {
    uwb_ = new ::atd::localization::Particles;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.uwb)
  return uwb_;
}
::atd::localization::Particles* LocalizationAbsEstimate::release_uwb() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.uwb)
  clear_has_uwb();
  ::atd::localization::Particles* temp = uwb_;
  uwb_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_uwb(::atd::localization::Particles* uwb) {
  delete uwb_;
  uwb_ = uwb;
  if (uwb) {
    set_has_uwb();
  } else {
    clear_has_uwb();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.uwb)
}

// optional .atd.localization.Particles ins = 6;
bool LocalizationAbsEstimate::has_ins() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LocalizationAbsEstimate::set_has_ins() {
  _has_bits_[0] |= 0x00000020u;
}
void LocalizationAbsEstimate::clear_has_ins() {
  _has_bits_[0] &= ~0x00000020u;
}
void LocalizationAbsEstimate::clear_ins() {
  if (ins_ != NULL) ins_->::atd::localization::Particles::Clear();
  clear_has_ins();
}
const ::atd::localization::Particles& LocalizationAbsEstimate::ins() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.ins)
  return ins_ != NULL ? *ins_
                         : *::atd::localization::Particles::internal_default_instance();
}
::atd::localization::Particles* LocalizationAbsEstimate::mutable_ins() {
  set_has_ins();
  if (ins_ == NULL) {
    ins_ = new ::atd::localization::Particles;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.ins)
  return ins_;
}
::atd::localization::Particles* LocalizationAbsEstimate::release_ins() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.ins)
  clear_has_ins();
  ::atd::localization::Particles* temp = ins_;
  ins_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_ins(::atd::localization::Particles* ins) {
  delete ins_;
  ins_ = ins;
  if (ins) {
    set_has_ins();
  } else {
    clear_has_ins();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.ins)
}

// optional .atd.localization.Particles ofilm = 7;
bool LocalizationAbsEstimate::has_ofilm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void LocalizationAbsEstimate::set_has_ofilm() {
  _has_bits_[0] |= 0x00000040u;
}
void LocalizationAbsEstimate::clear_has_ofilm() {
  _has_bits_[0] &= ~0x00000040u;
}
void LocalizationAbsEstimate::clear_ofilm() {
  if (ofilm_ != NULL) ofilm_->::atd::localization::Particles::Clear();
  clear_has_ofilm();
}
const ::atd::localization::Particles& LocalizationAbsEstimate::ofilm() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.ofilm)
  return ofilm_ != NULL ? *ofilm_
                         : *::atd::localization::Particles::internal_default_instance();
}
::atd::localization::Particles* LocalizationAbsEstimate::mutable_ofilm() {
  set_has_ofilm();
  if (ofilm_ == NULL) {
    ofilm_ = new ::atd::localization::Particles;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.ofilm)
  return ofilm_;
}
::atd::localization::Particles* LocalizationAbsEstimate::release_ofilm() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.ofilm)
  clear_has_ofilm();
  ::atd::localization::Particles* temp = ofilm_;
  ofilm_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_ofilm(::atd::localization::Particles* ofilm) {
  delete ofilm_;
  ofilm_ = ofilm;
  if (ofilm) {
    set_has_ofilm();
  } else {
    clear_has_ofilm();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.ofilm)
}

// optional .atd.localization.Particles locabs = 8;
bool LocalizationAbsEstimate::has_locabs() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void LocalizationAbsEstimate::set_has_locabs() {
  _has_bits_[0] |= 0x00000080u;
}
void LocalizationAbsEstimate::clear_has_locabs() {
  _has_bits_[0] &= ~0x00000080u;
}
void LocalizationAbsEstimate::clear_locabs() {
  if (locabs_ != NULL) locabs_->::atd::localization::Particles::Clear();
  clear_has_locabs();
}
const ::atd::localization::Particles& LocalizationAbsEstimate::locabs() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationAbsEstimate.locabs)
  return locabs_ != NULL ? *locabs_
                         : *::atd::localization::Particles::internal_default_instance();
}
::atd::localization::Particles* LocalizationAbsEstimate::mutable_locabs() {
  set_has_locabs();
  if (locabs_ == NULL) {
    locabs_ = new ::atd::localization::Particles;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationAbsEstimate.locabs)
  return locabs_;
}
::atd::localization::Particles* LocalizationAbsEstimate::release_locabs() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationAbsEstimate.locabs)
  clear_has_locabs();
  ::atd::localization::Particles* temp = locabs_;
  locabs_ = NULL;
  return temp;
}
void LocalizationAbsEstimate::set_allocated_locabs(::atd::localization::Particles* locabs) {
  delete locabs_;
  locabs_ = locabs;
  if (locabs) {
    set_has_locabs();
  } else {
    clear_has_locabs();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationAbsEstimate.locabs)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationMapMatchEstimate::kHeaderFieldNumber;
const int LocalizationMapMatchEstimate::kReservedmsgFieldNumber;
const int LocalizationMapMatchEstimate::kPoseFieldNumber;
const int LocalizationMapMatchEstimate::kUncertaintyFieldNumber;
const int LocalizationMapMatchEstimate::kHistrajFieldNumber;
const int LocalizationMapMatchEstimate::kGridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationMapMatchEstimate::LocalizationMapMatchEstimate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.localization.LocalizationMapMatchEstimate)
}
LocalizationMapMatchEstimate::LocalizationMapMatchEstimate(const LocalizationMapMatchEstimate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_uncertainty()) {
    uncertainty_ = new ::atd::localization::Uncertainty(*from.uncertainty_);
  } else {
    uncertainty_ = NULL;
  }
  if (from.has_histraj()) {
    histraj_ = new ::atd::localization::Particles(*from.histraj_);
  } else {
    histraj_ = NULL;
  }
  if (from.has_grid()) {
    grid_ = new ::atd::localization::Particles(*from.grid_);
  } else {
    grid_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.localization.LocalizationMapMatchEstimate)
}

void LocalizationMapMatchEstimate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&grid_) -
    reinterpret_cast<char*>(&header_) + sizeof(grid_));
}

LocalizationMapMatchEstimate::~LocalizationMapMatchEstimate() {
  // @@protoc_insertion_point(destructor:atd.localization.LocalizationMapMatchEstimate)
  SharedDtor();
}

void LocalizationMapMatchEstimate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete uncertainty_;
  }
  if (this != internal_default_instance()) {
    delete histraj_;
  }
  if (this != internal_default_instance()) {
    delete grid_;
  }
}

void LocalizationMapMatchEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocalizationMapMatchEstimate& LocalizationMapMatchEstimate::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationMapMatchEstimate* LocalizationMapMatchEstimate::New(::google::protobuf::Arena* arena) const {
  LocalizationMapMatchEstimate* n = new LocalizationMapMatchEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationMapMatchEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.localization.LocalizationMapMatchEstimate)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_uncertainty()) {
      GOOGLE_DCHECK(uncertainty_ != NULL);
      uncertainty_->::atd::localization::Uncertainty::Clear();
    }
    if (has_histraj()) {
      GOOGLE_DCHECK(histraj_ != NULL);
      histraj_->::atd::localization::Particles::Clear();
    }
    if (has_grid()) {
      GOOGLE_DCHECK(grid_ != NULL);
      grid_->::atd::localization::Particles::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationMapMatchEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.localization.LocalizationMapMatchEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Uncertainty uncertainty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Particles histraj = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_histraj()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Particles grid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_grid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.localization.LocalizationMapMatchEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.localization.LocalizationMapMatchEstimate)
  return false;
#undef DO_
}

void LocalizationMapMatchEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.localization.LocalizationMapMatchEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // optional .atd.localization.Uncertainty uncertainty = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->uncertainty_, output);
  }

  // optional .atd.localization.Particles histraj = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->histraj_, output);
  }

  // optional .atd.localization.Particles grid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->grid_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.localization.LocalizationMapMatchEstimate)
}

size_t LocalizationMapMatchEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.localization.LocalizationMapMatchEstimate)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.localization.Uncertainty uncertainty = 4;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uncertainty_);
    }

    // optional .atd.localization.Particles histraj = 5;
    if (has_histraj()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->histraj_);
    }

    // optional .atd.localization.Particles grid = 6;
    if (has_grid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->grid_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationMapMatchEstimate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocalizationMapMatchEstimate*>(&from));
}

void LocalizationMapMatchEstimate::MergeFrom(const LocalizationMapMatchEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.localization.LocalizationMapMatchEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_uncertainty()->::atd::localization::Uncertainty::MergeFrom(from.uncertainty());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_histraj()->::atd::localization::Particles::MergeFrom(from.histraj());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_grid()->::atd::localization::Particles::MergeFrom(from.grid());
    }
  }
}

void LocalizationMapMatchEstimate::CopyFrom(const LocalizationMapMatchEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.localization.LocalizationMapMatchEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationMapMatchEstimate::IsInitialized() const {
  return true;
}

void LocalizationMapMatchEstimate::Swap(LocalizationMapMatchEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationMapMatchEstimate::InternalSwap(LocalizationMapMatchEstimate* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(uncertainty_, other->uncertainty_);
  std::swap(histraj_, other->histraj_);
  std::swap(grid_, other->grid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LocalizationMapMatchEstimate::GetTypeName() const {
  return "atd.localization.LocalizationMapMatchEstimate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationMapMatchEstimate

// optional .atd.common.Header header = 1;
bool LocalizationMapMatchEstimate::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationMapMatchEstimate::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationMapMatchEstimate::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationMapMatchEstimate::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& LocalizationMapMatchEstimate::header() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationMapMatchEstimate.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* LocalizationMapMatchEstimate::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationMapMatchEstimate.header)
  return header_;
}
::atd::common::Header* LocalizationMapMatchEstimate::release_header() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationMapMatchEstimate.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationMapMatchEstimate::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationMapMatchEstimate.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool LocalizationMapMatchEstimate::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationMapMatchEstimate::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationMapMatchEstimate::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationMapMatchEstimate::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& LocalizationMapMatchEstimate::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationMapMatchEstimate.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* LocalizationMapMatchEstimate::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationMapMatchEstimate.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* LocalizationMapMatchEstimate::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationMapMatchEstimate.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void LocalizationMapMatchEstimate::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationMapMatchEstimate.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool LocalizationMapMatchEstimate::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationMapMatchEstimate::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationMapMatchEstimate::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationMapMatchEstimate::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& LocalizationMapMatchEstimate::pose() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationMapMatchEstimate.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* LocalizationMapMatchEstimate::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationMapMatchEstimate.pose)
  return pose_;
}
::atd::localization::Pose* LocalizationMapMatchEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationMapMatchEstimate.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LocalizationMapMatchEstimate::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationMapMatchEstimate.pose)
}

// optional .atd.localization.Uncertainty uncertainty = 4;
bool LocalizationMapMatchEstimate::has_uncertainty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationMapMatchEstimate::set_has_uncertainty() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationMapMatchEstimate::clear_has_uncertainty() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationMapMatchEstimate::clear_uncertainty() {
  if (uncertainty_ != NULL) uncertainty_->::atd::localization::Uncertainty::Clear();
  clear_has_uncertainty();
}
const ::atd::localization::Uncertainty& LocalizationMapMatchEstimate::uncertainty() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationMapMatchEstimate.uncertainty)
  return uncertainty_ != NULL ? *uncertainty_
                         : *::atd::localization::Uncertainty::internal_default_instance();
}
::atd::localization::Uncertainty* LocalizationMapMatchEstimate::mutable_uncertainty() {
  set_has_uncertainty();
  if (uncertainty_ == NULL) {
    uncertainty_ = new ::atd::localization::Uncertainty;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationMapMatchEstimate.uncertainty)
  return uncertainty_;
}
::atd::localization::Uncertainty* LocalizationMapMatchEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationMapMatchEstimate.uncertainty)
  clear_has_uncertainty();
  ::atd::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
void LocalizationMapMatchEstimate::set_allocated_uncertainty(::atd::localization::Uncertainty* uncertainty) {
  delete uncertainty_;
  uncertainty_ = uncertainty;
  if (uncertainty) {
    set_has_uncertainty();
  } else {
    clear_has_uncertainty();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationMapMatchEstimate.uncertainty)
}

// optional .atd.localization.Particles histraj = 5;
bool LocalizationMapMatchEstimate::has_histraj() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalizationMapMatchEstimate::set_has_histraj() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalizationMapMatchEstimate::clear_has_histraj() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalizationMapMatchEstimate::clear_histraj() {
  if (histraj_ != NULL) histraj_->::atd::localization::Particles::Clear();
  clear_has_histraj();
}
const ::atd::localization::Particles& LocalizationMapMatchEstimate::histraj() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationMapMatchEstimate.histraj)
  return histraj_ != NULL ? *histraj_
                         : *::atd::localization::Particles::internal_default_instance();
}
::atd::localization::Particles* LocalizationMapMatchEstimate::mutable_histraj() {
  set_has_histraj();
  if (histraj_ == NULL) {
    histraj_ = new ::atd::localization::Particles;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationMapMatchEstimate.histraj)
  return histraj_;
}
::atd::localization::Particles* LocalizationMapMatchEstimate::release_histraj() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationMapMatchEstimate.histraj)
  clear_has_histraj();
  ::atd::localization::Particles* temp = histraj_;
  histraj_ = NULL;
  return temp;
}
void LocalizationMapMatchEstimate::set_allocated_histraj(::atd::localization::Particles* histraj) {
  delete histraj_;
  histraj_ = histraj;
  if (histraj) {
    set_has_histraj();
  } else {
    clear_has_histraj();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationMapMatchEstimate.histraj)
}

// optional .atd.localization.Particles grid = 6;
bool LocalizationMapMatchEstimate::has_grid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LocalizationMapMatchEstimate::set_has_grid() {
  _has_bits_[0] |= 0x00000020u;
}
void LocalizationMapMatchEstimate::clear_has_grid() {
  _has_bits_[0] &= ~0x00000020u;
}
void LocalizationMapMatchEstimate::clear_grid() {
  if (grid_ != NULL) grid_->::atd::localization::Particles::Clear();
  clear_has_grid();
}
const ::atd::localization::Particles& LocalizationMapMatchEstimate::grid() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationMapMatchEstimate.grid)
  return grid_ != NULL ? *grid_
                         : *::atd::localization::Particles::internal_default_instance();
}
::atd::localization::Particles* LocalizationMapMatchEstimate::mutable_grid() {
  set_has_grid();
  if (grid_ == NULL) {
    grid_ = new ::atd::localization::Particles;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationMapMatchEstimate.grid)
  return grid_;
}
::atd::localization::Particles* LocalizationMapMatchEstimate::release_grid() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationMapMatchEstimate.grid)
  clear_has_grid();
  ::atd::localization::Particles* temp = grid_;
  grid_ = NULL;
  return temp;
}
void LocalizationMapMatchEstimate::set_allocated_grid(::atd::localization::Particles* grid) {
  delete grid_;
  grid_ = grid;
  if (grid) {
    set_has_grid();
  } else {
    clear_has_grid();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationMapMatchEstimate.grid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocalizationEstimate::kHeaderFieldNumber;
const int LocalizationEstimate::kReservedmsgFieldNumber;
const int LocalizationEstimate::kPoseFieldNumber;
const int LocalizationEstimate::kUncertaintyFieldNumber;
const int LocalizationEstimate::kParticlesFieldNumber;
const int LocalizationEstimate::kTrajectoryPointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocalizationEstimate::LocalizationEstimate()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.localization.LocalizationEstimate)
}
LocalizationEstimate::LocalizationEstimate(const LocalizationEstimate& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      trajectory_point_(from.trajectory_point_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_uncertainty()) {
    uncertainty_ = new ::atd::localization::Uncertainty(*from.uncertainty_);
  } else {
    uncertainty_ = NULL;
  }
  if (from.has_particles()) {
    particles_ = new ::atd::localization::Particles(*from.particles_);
  } else {
    particles_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.localization.LocalizationEstimate)
}

void LocalizationEstimate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&particles_) -
    reinterpret_cast<char*>(&header_) + sizeof(particles_));
}

LocalizationEstimate::~LocalizationEstimate() {
  // @@protoc_insertion_point(destructor:atd.localization.LocalizationEstimate)
  SharedDtor();
}

void LocalizationEstimate::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete uncertainty_;
  }
  if (this != internal_default_instance()) {
    delete particles_;
  }
}

void LocalizationEstimate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocalizationEstimate& LocalizationEstimate::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocalizationEstimate* LocalizationEstimate::New(::google::protobuf::Arena* arena) const {
  LocalizationEstimate* n = new LocalizationEstimate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocalizationEstimate::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.localization.LocalizationEstimate)
  trajectory_point_.Clear();
  if (_has_bits_[0 / 32] & 31u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_uncertainty()) {
      GOOGLE_DCHECK(uncertainty_ != NULL);
      uncertainty_->::atd::localization::Uncertainty::Clear();
    }
    if (has_particles()) {
      GOOGLE_DCHECK(particles_ != NULL);
      particles_->::atd::localization::Particles::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocalizationEstimate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.localization.LocalizationEstimate)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Uncertainty uncertainty = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uncertainty()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Particles particles = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_particles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.TrajectoryPoint trajectory_point = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trajectory_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.localization.LocalizationEstimate)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.localization.LocalizationEstimate)
  return false;
#undef DO_
}

void LocalizationEstimate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.localization.LocalizationEstimate)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // optional .atd.localization.Uncertainty uncertainty = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->uncertainty_, output);
  }

  // optional .atd.localization.Particles particles = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->particles_, output);
  }

  // repeated .atd.common.TrajectoryPoint trajectory_point = 6;
  for (unsigned int i = 0, n = this->trajectory_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->trajectory_point(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.localization.LocalizationEstimate)
}

size_t LocalizationEstimate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.localization.LocalizationEstimate)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.common.TrajectoryPoint trajectory_point = 6;
  {
    unsigned int count = this->trajectory_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->trajectory_point(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.localization.Uncertainty uncertainty = 4;
    if (has_uncertainty()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uncertainty_);
    }

    // optional .atd.localization.Particles particles = 5;
    if (has_particles()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->particles_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocalizationEstimate::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocalizationEstimate*>(&from));
}

void LocalizationEstimate::MergeFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.localization.LocalizationEstimate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trajectory_point_.MergeFrom(from.trajectory_point_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_uncertainty()->::atd::localization::Uncertainty::MergeFrom(from.uncertainty());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_particles()->::atd::localization::Particles::MergeFrom(from.particles());
    }
  }
}

void LocalizationEstimate::CopyFrom(const LocalizationEstimate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.localization.LocalizationEstimate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocalizationEstimate::IsInitialized() const {
  return true;
}

void LocalizationEstimate::Swap(LocalizationEstimate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocalizationEstimate::InternalSwap(LocalizationEstimate* other) {
  trajectory_point_.InternalSwap(&other->trajectory_point_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(uncertainty_, other->uncertainty_);
  std::swap(particles_, other->particles_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LocalizationEstimate::GetTypeName() const {
  return "atd.localization.LocalizationEstimate";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocalizationEstimate

// optional .atd.common.Header header = 1;
bool LocalizationEstimate::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocalizationEstimate::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void LocalizationEstimate::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocalizationEstimate::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& LocalizationEstimate::header() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationEstimate.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* LocalizationEstimate::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationEstimate.header)
  return header_;
}
::atd::common::Header* LocalizationEstimate::release_header() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationEstimate.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationEstimate.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool LocalizationEstimate::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocalizationEstimate::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void LocalizationEstimate::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocalizationEstimate::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& LocalizationEstimate::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationEstimate.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* LocalizationEstimate::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationEstimate.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* LocalizationEstimate::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationEstimate.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationEstimate.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool LocalizationEstimate::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LocalizationEstimate::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void LocalizationEstimate::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void LocalizationEstimate::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& LocalizationEstimate::pose() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationEstimate.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* LocalizationEstimate::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationEstimate.pose)
  return pose_;
}
::atd::localization::Pose* LocalizationEstimate::release_pose() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationEstimate.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationEstimate.pose)
}

// optional .atd.localization.Uncertainty uncertainty = 4;
bool LocalizationEstimate::has_uncertainty() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LocalizationEstimate::set_has_uncertainty() {
  _has_bits_[0] |= 0x00000008u;
}
void LocalizationEstimate::clear_has_uncertainty() {
  _has_bits_[0] &= ~0x00000008u;
}
void LocalizationEstimate::clear_uncertainty() {
  if (uncertainty_ != NULL) uncertainty_->::atd::localization::Uncertainty::Clear();
  clear_has_uncertainty();
}
const ::atd::localization::Uncertainty& LocalizationEstimate::uncertainty() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationEstimate.uncertainty)
  return uncertainty_ != NULL ? *uncertainty_
                         : *::atd::localization::Uncertainty::internal_default_instance();
}
::atd::localization::Uncertainty* LocalizationEstimate::mutable_uncertainty() {
  set_has_uncertainty();
  if (uncertainty_ == NULL) {
    uncertainty_ = new ::atd::localization::Uncertainty;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationEstimate.uncertainty)
  return uncertainty_;
}
::atd::localization::Uncertainty* LocalizationEstimate::release_uncertainty() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationEstimate.uncertainty)
  clear_has_uncertainty();
  ::atd::localization::Uncertainty* temp = uncertainty_;
  uncertainty_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_uncertainty(::atd::localization::Uncertainty* uncertainty) {
  delete uncertainty_;
  uncertainty_ = uncertainty;
  if (uncertainty) {
    set_has_uncertainty();
  } else {
    clear_has_uncertainty();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationEstimate.uncertainty)
}

// optional .atd.localization.Particles particles = 5;
bool LocalizationEstimate::has_particles() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LocalizationEstimate::set_has_particles() {
  _has_bits_[0] |= 0x00000010u;
}
void LocalizationEstimate::clear_has_particles() {
  _has_bits_[0] &= ~0x00000010u;
}
void LocalizationEstimate::clear_particles() {
  if (particles_ != NULL) particles_->::atd::localization::Particles::Clear();
  clear_has_particles();
}
const ::atd::localization::Particles& LocalizationEstimate::particles() const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationEstimate.particles)
  return particles_ != NULL ? *particles_
                         : *::atd::localization::Particles::internal_default_instance();
}
::atd::localization::Particles* LocalizationEstimate::mutable_particles() {
  set_has_particles();
  if (particles_ == NULL) {
    particles_ = new ::atd::localization::Particles;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationEstimate.particles)
  return particles_;
}
::atd::localization::Particles* LocalizationEstimate::release_particles() {
  // @@protoc_insertion_point(field_release:atd.localization.LocalizationEstimate.particles)
  clear_has_particles();
  ::atd::localization::Particles* temp = particles_;
  particles_ = NULL;
  return temp;
}
void LocalizationEstimate::set_allocated_particles(::atd::localization::Particles* particles) {
  delete particles_;
  particles_ = particles;
  if (particles) {
    set_has_particles();
  } else {
    clear_has_particles();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.LocalizationEstimate.particles)
}

// repeated .atd.common.TrajectoryPoint trajectory_point = 6;
int LocalizationEstimate::trajectory_point_size() const {
  return trajectory_point_.size();
}
void LocalizationEstimate::clear_trajectory_point() {
  trajectory_point_.Clear();
}
const ::atd::common::TrajectoryPoint& LocalizationEstimate::trajectory_point(int index) const {
  // @@protoc_insertion_point(field_get:atd.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Get(index);
}
::atd::common::TrajectoryPoint* LocalizationEstimate::mutable_trajectory_point(int index) {
  // @@protoc_insertion_point(field_mutable:atd.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Mutable(index);
}
::atd::common::TrajectoryPoint* LocalizationEstimate::add_trajectory_point() {
  // @@protoc_insertion_point(field_add:atd.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::TrajectoryPoint >*
LocalizationEstimate::mutable_trajectory_point() {
  // @@protoc_insertion_point(field_mutable_list:atd.localization.LocalizationEstimate.trajectory_point)
  return &trajectory_point_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::TrajectoryPoint >&
LocalizationEstimate::trajectory_point() const {
  // @@protoc_insertion_point(field_list:atd.localization.LocalizationEstimate.trajectory_point)
  return trajectory_point_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Particle::kArrowFieldNumber;
const int Particle::kPoseFieldNumber;
const int Particle::kScoreFieldNumber;
const int Particle::kWeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Particle::Particle()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.localization.Particle)
}
Particle::Particle(const Particle& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_arrow()) {
    arrow_ = new ::atd::common::Arrow2D(*from.arrow_);
  } else {
    arrow_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  ::memcpy(&score_, &from.score_,
    reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&score_) + sizeof(weight_));
  // @@protoc_insertion_point(copy_constructor:atd.localization.Particle)
}

void Particle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&arrow_, 0, reinterpret_cast<char*>(&weight_) -
    reinterpret_cast<char*>(&arrow_) + sizeof(weight_));
}

Particle::~Particle() {
  // @@protoc_insertion_point(destructor:atd.localization.Particle)
  SharedDtor();
}

void Particle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete arrow_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
}

void Particle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Particle& Particle::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Particle* Particle::New(::google::protobuf::Arena* arena) const {
  Particle* n = new Particle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Particle::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.localization.Particle)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_arrow()) {
      GOOGLE_DCHECK(arrow_ != NULL);
      arrow_->::atd::common::Arrow2D::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 12u) {
    ::memset(&score_, 0, reinterpret_cast<char*>(&weight_) -
      reinterpret_cast<char*>(&score_) + sizeof(weight_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Particle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.localization.Particle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Arrow2D arrow = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arrow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float weight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.localization.Particle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.localization.Particle)
  return false;
#undef DO_
}

void Particle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.localization.Particle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Arrow2D arrow = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->arrow_, output);
  }

  // optional .atd.localization.Pose pose = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->pose_, output);
  }

  // optional float score = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->score(), output);
  }

  // optional float weight = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->weight(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.localization.Particle)
}

size_t Particle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.localization.Particle)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .atd.common.Arrow2D arrow = 1;
    if (has_arrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->arrow_);
    }

    // optional .atd.localization.Pose pose = 2;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional float score = 3;
    if (has_score()) {
      total_size += 1 + 4;
    }

    // optional float weight = 4;
    if (has_weight()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Particle*>(&from));
}

void Particle::MergeFrom(const Particle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.localization.Particle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_arrow()->::atd::common::Arrow2D::MergeFrom(from.arrow());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000004u) {
      score_ = from.score_;
    }
    if (cached_has_bits & 0x00000008u) {
      weight_ = from.weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Particle::CopyFrom(const Particle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.localization.Particle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particle::IsInitialized() const {
  return true;
}

void Particle::Swap(Particle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Particle::InternalSwap(Particle* other) {
  std::swap(arrow_, other->arrow_);
  std::swap(pose_, other->pose_);
  std::swap(score_, other->score_);
  std::swap(weight_, other->weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Particle::GetTypeName() const {
  return "atd.localization.Particle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Particle

// optional .atd.common.Arrow2D arrow = 1;
bool Particle::has_arrow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Particle::set_has_arrow() {
  _has_bits_[0] |= 0x00000001u;
}
void Particle::clear_has_arrow() {
  _has_bits_[0] &= ~0x00000001u;
}
void Particle::clear_arrow() {
  if (arrow_ != NULL) arrow_->::atd::common::Arrow2D::Clear();
  clear_has_arrow();
}
const ::atd::common::Arrow2D& Particle::arrow() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particle.arrow)
  return arrow_ != NULL ? *arrow_
                         : *::atd::common::Arrow2D::internal_default_instance();
}
::atd::common::Arrow2D* Particle::mutable_arrow() {
  set_has_arrow();
  if (arrow_ == NULL) {
    arrow_ = new ::atd::common::Arrow2D;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Particle.arrow)
  return arrow_;
}
::atd::common::Arrow2D* Particle::release_arrow() {
  // @@protoc_insertion_point(field_release:atd.localization.Particle.arrow)
  clear_has_arrow();
  ::atd::common::Arrow2D* temp = arrow_;
  arrow_ = NULL;
  return temp;
}
void Particle::set_allocated_arrow(::atd::common::Arrow2D* arrow) {
  delete arrow_;
  arrow_ = arrow;
  if (arrow) {
    set_has_arrow();
  } else {
    clear_has_arrow();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Particle.arrow)
}

// optional .atd.localization.Pose pose = 2;
bool Particle::has_pose() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Particle::set_has_pose() {
  _has_bits_[0] |= 0x00000002u;
}
void Particle::clear_has_pose() {
  _has_bits_[0] &= ~0x00000002u;
}
void Particle::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& Particle::pose() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particle.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* Particle::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Particle.pose)
  return pose_;
}
::atd::localization::Pose* Particle::release_pose() {
  // @@protoc_insertion_point(field_release:atd.localization.Particle.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void Particle::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Particle.pose)
}

// optional float score = 3;
bool Particle::has_score() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Particle::set_has_score() {
  _has_bits_[0] |= 0x00000004u;
}
void Particle::clear_has_score() {
  _has_bits_[0] &= ~0x00000004u;
}
void Particle::clear_score() {
  score_ = 0;
  clear_has_score();
}
float Particle::score() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particle.score)
  return score_;
}
void Particle::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particle.score)
}

// optional float weight = 4;
bool Particle::has_weight() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Particle::set_has_weight() {
  _has_bits_[0] |= 0x00000008u;
}
void Particle::clear_has_weight() {
  _has_bits_[0] &= ~0x00000008u;
}
void Particle::clear_weight() {
  weight_ = 0;
  clear_has_weight();
}
float Particle::weight() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particle.weight)
  return weight_;
}
void Particle::set_weight(float value) {
  set_has_weight();
  weight_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particle.weight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Particles::kLayernameFieldNumber;
const int Particles::kMeanscoreFieldNumber;
const int Particles::kBeliefFieldNumber;
const int Particles::kColorRFieldNumber;
const int Particles::kColorGFieldNumber;
const int Particles::kColorBFieldNumber;
const int Particles::kParticleFieldNumber;
const int Particles::kLayerStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Particles::Particles()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.localization.Particles)
}
Particles::Particles(const Particles& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      particle_(from.particle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  layername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_layername()) {
    layername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layername_);
  }
  ::memcpy(&meanscore_, &from.meanscore_,
    reinterpret_cast<char*>(&layerstate_) -
    reinterpret_cast<char*>(&meanscore_) + sizeof(layerstate_));
  // @@protoc_insertion_point(copy_constructor:atd.localization.Particles)
}

void Particles::SharedCtor() {
  _cached_size_ = 0;
  layername_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&meanscore_, 0, reinterpret_cast<char*>(&layerstate_) -
    reinterpret_cast<char*>(&meanscore_) + sizeof(layerstate_));
}

Particles::~Particles() {
  // @@protoc_insertion_point(destructor:atd.localization.Particles)
  SharedDtor();
}

void Particles::SharedDtor() {
  layername_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Particles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Particles& Particles::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Particles* Particles::New(::google::protobuf::Arena* arena) const {
  Particles* n = new Particles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Particles::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.localization.Particles)
  particle_.Clear();
  if (has_layername()) {
    GOOGLE_DCHECK(!layername_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*layername_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 126u) {
    ::memset(&meanscore_, 0, reinterpret_cast<char*>(&layerstate_) -
      reinterpret_cast<char*>(&meanscore_) + sizeof(layerstate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Particles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.localization.Particles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string layername = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_layername()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float meanscore = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_meanscore();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &meanscore_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float belief = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_belief();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &belief_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 colorR = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_colorr();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &colorr_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 colorG = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_colorg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &colorg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional fixed32 colorB = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_colorb();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED32>(
                 input, &colorb_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.localization.Particle particle = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.MeasureState layerState = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::localization::MeasureState_IsValid(value)) {
            set_layerstate(static_cast< ::atd::localization::MeasureState >(value));
          } else {
            unknown_fields_stream.WriteVarint32(72u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.localization.Particles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.localization.Particles)
  return false;
#undef DO_
}

void Particles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.localization.Particles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string layername = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->layername(), output);
  }

  // optional float meanscore = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->meanscore(), output);
  }

  // optional float belief = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->belief(), output);
  }

  // optional fixed32 colorR = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(4, this->colorr(), output);
  }

  // optional fixed32 colorG = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(5, this->colorg(), output);
  }

  // optional fixed32 colorB = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed32(6, this->colorb(), output);
  }

  // repeated .atd.localization.Particle particle = 7;
  for (unsigned int i = 0, n = this->particle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->particle(i), output);
  }

  // optional .atd.localization.MeasureState layerState = 9;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      9, this->layerstate(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.localization.Particles)
}

size_t Particles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.localization.Particles)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.localization.Particle particle = 7;
  {
    unsigned int count = this->particle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particle(i));
    }
  }

  if (_has_bits_[0 / 32] & 127u) {
    // optional string layername = 1;
    if (has_layername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->layername());
    }

    // optional float meanscore = 2;
    if (has_meanscore()) {
      total_size += 1 + 4;
    }

    // optional float belief = 3;
    if (has_belief()) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorR = 4;
    if (has_colorr()) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorG = 5;
    if (has_colorg()) {
      total_size += 1 + 4;
    }

    // optional fixed32 colorB = 6;
    if (has_colorb()) {
      total_size += 1 + 4;
    }

    // optional .atd.localization.MeasureState layerState = 9;
    if (has_layerstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->layerstate());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Particles*>(&from));
}

void Particles::MergeFrom(const Particles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.localization.Particles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  particle_.MergeFrom(from.particle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_layername();
      layername_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.layername_);
    }
    if (cached_has_bits & 0x00000002u) {
      meanscore_ = from.meanscore_;
    }
    if (cached_has_bits & 0x00000004u) {
      belief_ = from.belief_;
    }
    if (cached_has_bits & 0x00000008u) {
      colorr_ = from.colorr_;
    }
    if (cached_has_bits & 0x00000010u) {
      colorg_ = from.colorg_;
    }
    if (cached_has_bits & 0x00000020u) {
      colorb_ = from.colorb_;
    }
    if (cached_has_bits & 0x00000040u) {
      layerstate_ = from.layerstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Particles::CopyFrom(const Particles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.localization.Particles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particles::IsInitialized() const {
  return true;
}

void Particles::Swap(Particles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Particles::InternalSwap(Particles* other) {
  particle_.InternalSwap(&other->particle_);
  layername_.Swap(&other->layername_);
  std::swap(meanscore_, other->meanscore_);
  std::swap(belief_, other->belief_);
  std::swap(colorr_, other->colorr_);
  std::swap(colorg_, other->colorg_);
  std::swap(colorb_, other->colorb_);
  std::swap(layerstate_, other->layerstate_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Particles::GetTypeName() const {
  return "atd.localization.Particles";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Particles

// optional string layername = 1;
bool Particles::has_layername() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Particles::set_has_layername() {
  _has_bits_[0] |= 0x00000001u;
}
void Particles::clear_has_layername() {
  _has_bits_[0] &= ~0x00000001u;
}
void Particles::clear_layername() {
  layername_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_layername();
}
const ::std::string& Particles::layername() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.layername)
  return layername_.GetNoArena();
}
void Particles::set_layername(const ::std::string& value) {
  set_has_layername();
  layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.localization.Particles.layername)
}
#if LANG_CXX11
void Particles::set_layername(::std::string&& value) {
  set_has_layername();
  layername_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.localization.Particles.layername)
}
#endif
void Particles::set_layername(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_layername();
  layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.localization.Particles.layername)
}
void Particles::set_layername(const char* value, size_t size) {
  set_has_layername();
  layername_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.localization.Particles.layername)
}
::std::string* Particles::mutable_layername() {
  set_has_layername();
  // @@protoc_insertion_point(field_mutable:atd.localization.Particles.layername)
  return layername_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Particles::release_layername() {
  // @@protoc_insertion_point(field_release:atd.localization.Particles.layername)
  clear_has_layername();
  return layername_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Particles::set_allocated_layername(::std::string* layername) {
  if (layername != NULL) {
    set_has_layername();
  } else {
    clear_has_layername();
  }
  layername_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), layername);
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Particles.layername)
}

// optional float meanscore = 2;
bool Particles::has_meanscore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Particles::set_has_meanscore() {
  _has_bits_[0] |= 0x00000002u;
}
void Particles::clear_has_meanscore() {
  _has_bits_[0] &= ~0x00000002u;
}
void Particles::clear_meanscore() {
  meanscore_ = 0;
  clear_has_meanscore();
}
float Particles::meanscore() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.meanscore)
  return meanscore_;
}
void Particles::set_meanscore(float value) {
  set_has_meanscore();
  meanscore_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particles.meanscore)
}

// optional float belief = 3;
bool Particles::has_belief() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Particles::set_has_belief() {
  _has_bits_[0] |= 0x00000004u;
}
void Particles::clear_has_belief() {
  _has_bits_[0] &= ~0x00000004u;
}
void Particles::clear_belief() {
  belief_ = 0;
  clear_has_belief();
}
float Particles::belief() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.belief)
  return belief_;
}
void Particles::set_belief(float value) {
  set_has_belief();
  belief_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particles.belief)
}

// optional fixed32 colorR = 4;
bool Particles::has_colorr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Particles::set_has_colorr() {
  _has_bits_[0] |= 0x00000008u;
}
void Particles::clear_has_colorr() {
  _has_bits_[0] &= ~0x00000008u;
}
void Particles::clear_colorr() {
  colorr_ = 0u;
  clear_has_colorr();
}
::google::protobuf::uint32 Particles::colorr() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.colorR)
  return colorr_;
}
void Particles::set_colorr(::google::protobuf::uint32 value) {
  set_has_colorr();
  colorr_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particles.colorR)
}

// optional fixed32 colorG = 5;
bool Particles::has_colorg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Particles::set_has_colorg() {
  _has_bits_[0] |= 0x00000010u;
}
void Particles::clear_has_colorg() {
  _has_bits_[0] &= ~0x00000010u;
}
void Particles::clear_colorg() {
  colorg_ = 0u;
  clear_has_colorg();
}
::google::protobuf::uint32 Particles::colorg() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.colorG)
  return colorg_;
}
void Particles::set_colorg(::google::protobuf::uint32 value) {
  set_has_colorg();
  colorg_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particles.colorG)
}

// optional fixed32 colorB = 6;
bool Particles::has_colorb() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Particles::set_has_colorb() {
  _has_bits_[0] |= 0x00000020u;
}
void Particles::clear_has_colorb() {
  _has_bits_[0] &= ~0x00000020u;
}
void Particles::clear_colorb() {
  colorb_ = 0u;
  clear_has_colorb();
}
::google::protobuf::uint32 Particles::colorb() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.colorB)
  return colorb_;
}
void Particles::set_colorb(::google::protobuf::uint32 value) {
  set_has_colorb();
  colorb_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particles.colorB)
}

// repeated .atd.localization.Particle particle = 7;
int Particles::particle_size() const {
  return particle_.size();
}
void Particles::clear_particle() {
  particle_.Clear();
}
const ::atd::localization::Particle& Particles::particle(int index) const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.particle)
  return particle_.Get(index);
}
::atd::localization::Particle* Particles::mutable_particle(int index) {
  // @@protoc_insertion_point(field_mutable:atd.localization.Particles.particle)
  return particle_.Mutable(index);
}
::atd::localization::Particle* Particles::add_particle() {
  // @@protoc_insertion_point(field_add:atd.localization.Particles.particle)
  return particle_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::localization::Particle >*
Particles::mutable_particle() {
  // @@protoc_insertion_point(field_mutable_list:atd.localization.Particles.particle)
  return &particle_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::localization::Particle >&
Particles::particle() const {
  // @@protoc_insertion_point(field_list:atd.localization.Particles.particle)
  return particle_;
}

// optional .atd.localization.MeasureState layerState = 9;
bool Particles::has_layerstate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Particles::set_has_layerstate() {
  _has_bits_[0] |= 0x00000040u;
}
void Particles::clear_has_layerstate() {
  _has_bits_[0] &= ~0x00000040u;
}
void Particles::clear_layerstate() {
  layerstate_ = 0;
  clear_has_layerstate();
}
::atd::localization::MeasureState Particles::layerstate() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles.layerState)
  return static_cast< ::atd::localization::MeasureState >(layerstate_);
}
void Particles::set_layerstate(::atd::localization::MeasureState value) {
  assert(::atd::localization::MeasureState_IsValid(value));
  set_has_layerstate();
  layerstate_ = value;
  // @@protoc_insertion_point(field_set:atd.localization.Particles.layerState)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Particles_Collection::kHeaderFieldNumber;
const int Particles_Collection::kReservedmsgFieldNumber;
const int Particles_Collection::kParticlesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Particles_Collection::Particles_Collection()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.localization.Particles_Collection)
}
Particles_Collection::Particles_Collection(const Particles_Collection& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      particles_(from.particles_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.localization.Particles_Collection)
}

void Particles_Collection::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reservedmsg_) -
    reinterpret_cast<char*>(&header_) + sizeof(reservedmsg_));
}

Particles_Collection::~Particles_Collection() {
  // @@protoc_insertion_point(destructor:atd.localization.Particles_Collection)
  SharedDtor();
}

void Particles_Collection::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Particles_Collection::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Particles_Collection& Particles_Collection::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2flocalization_2eproto::InitDefaults();
  return *internal_default_instance();
}

Particles_Collection* Particles_Collection::New(::google::protobuf::Arena* arena) const {
  Particles_Collection* n = new Particles_Collection;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Particles_Collection::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.localization.Particles_Collection)
  particles_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Particles_Collection::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.localization.Particles_Collection)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.localization.Particles particles = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_particles()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.localization.Particles_Collection)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.localization.Particles_Collection)
  return false;
#undef DO_
}

void Particles_Collection::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.localization.Particles_Collection)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // repeated .atd.localization.Particles particles = 3;
  for (unsigned int i = 0, n = this->particles_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->particles(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.localization.Particles_Collection)
}

size_t Particles_Collection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.localization.Particles_Collection)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.localization.Particles particles = 3;
  {
    unsigned int count = this->particles_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->particles(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Particles_Collection::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Particles_Collection*>(&from));
}

void Particles_Collection::MergeFrom(const Particles_Collection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.localization.Particles_Collection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  particles_.MergeFrom(from.particles_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
  }
}

void Particles_Collection::CopyFrom(const Particles_Collection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.localization.Particles_Collection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Particles_Collection::IsInitialized() const {
  return true;
}

void Particles_Collection::Swap(Particles_Collection* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Particles_Collection::InternalSwap(Particles_Collection* other) {
  particles_.InternalSwap(&other->particles_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Particles_Collection::GetTypeName() const {
  return "atd.localization.Particles_Collection";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Particles_Collection

// optional .atd.common.Header header = 1;
bool Particles_Collection::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Particles_Collection::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Particles_Collection::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Particles_Collection::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Particles_Collection::header() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles_Collection.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Particles_Collection::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Particles_Collection.header)
  return header_;
}
::atd::common::Header* Particles_Collection::release_header() {
  // @@protoc_insertion_point(field_release:atd.localization.Particles_Collection.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Particles_Collection::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Particles_Collection.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Particles_Collection::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Particles_Collection::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Particles_Collection::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Particles_Collection::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Particles_Collection::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles_Collection.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Particles_Collection::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.localization.Particles_Collection.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Particles_Collection::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.localization.Particles_Collection.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Particles_Collection::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.localization.Particles_Collection.reservedmsg)
}

// repeated .atd.localization.Particles particles = 3;
int Particles_Collection::particles_size() const {
  return particles_.size();
}
void Particles_Collection::clear_particles() {
  particles_.Clear();
}
const ::atd::localization::Particles& Particles_Collection::particles(int index) const {
  // @@protoc_insertion_point(field_get:atd.localization.Particles_Collection.particles)
  return particles_.Get(index);
}
::atd::localization::Particles* Particles_Collection::mutable_particles(int index) {
  // @@protoc_insertion_point(field_mutable:atd.localization.Particles_Collection.particles)
  return particles_.Mutable(index);
}
::atd::localization::Particles* Particles_Collection::add_particles() {
  // @@protoc_insertion_point(field_add:atd.localization.Particles_Collection.particles)
  return particles_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::localization::Particles >*
Particles_Collection::mutable_particles() {
  // @@protoc_insertion_point(field_mutable_list:atd.localization.Particles_Collection.particles)
  return &particles_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::localization::Particles >&
Particles_Collection::particles() const {
  // @@protoc_insertion_point(field_list:atd.localization.Particles_Collection.particles)
  return particles_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace localization
}  // namespace atd

// @@protoc_insertion_point(global_scope)
