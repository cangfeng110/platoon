// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/mobileye.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/drivers/mobileye.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace drivers {
class MOBILEYE_LANE_LINEDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MOBILEYE_LANE_LINE> {
} _MOBILEYE_LANE_LINE_default_instance_;
class MOBI_LANESDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MOBI_LANES> {
} _MOBI_LANES_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmobileye_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _MOBILEYE_LANE_LINE_default_instance_.Shutdown();
  _MOBI_LANES_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _MOBILEYE_LANE_LINE_default_instance_.DefaultConstruct();
  _MOBI_LANES_default_instance_.DefaultConstruct();
  _MOBI_LANES_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _MOBI_LANES_default_instance_.get_mutable()->stleftline_ = const_cast< ::atd::drivers::MOBILEYE_LANE_LINE*>(
      ::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance());
  _MOBI_LANES_default_instance_.get_mutable()->strightline_ = const_cast< ::atd::drivers::MOBILEYE_LANE_LINE*>(
      ::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance());
  _MOBI_LANES_default_instance_.get_mutable()->stnextleftline_ = const_cast< ::atd::drivers::MOBILEYE_LANE_LINE*>(
      ::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance());
  _MOBI_LANES_default_instance_.get_mutable()->stnextrightline_ = const_cast< ::atd::drivers::MOBILEYE_LANE_LINE*>(
      ::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance());
  _MOBI_LANES_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmobileye_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MOBILEYE_LANE_LINE::kNLineTypeFieldNumber;
const int MOBILEYE_LANE_LINE::kNQualityFieldNumber;
const int MOBILEYE_LANE_LINE::kFWidthFieldNumber;
const int MOBILEYE_LANE_LINE::kBLineCrossingFieldNumber;
const int MOBILEYE_LANE_LINE::kNLineColorFieldNumber;
const int MOBILEYE_LANE_LINE::kFTLCFieldNumber;
const int MOBILEYE_LANE_LINE::kAFieldNumber;
const int MOBILEYE_LANE_LINE::kBFieldNumber;
const int MOBILEYE_LANE_LINE::kCFieldNumber;
const int MOBILEYE_LANE_LINE::kDFieldNumber;
const int MOBILEYE_LANE_LINE::kX0FieldNumber;
const int MOBILEYE_LANE_LINE::kX1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MOBILEYE_LANE_LINE::MOBILEYE_LANE_LINE()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.MOBILEYE_LANE_LINE)
}
MOBILEYE_LANE_LINE::MOBILEYE_LANE_LINE(const MOBILEYE_LANE_LINE& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&nlinetype_, &from.nlinetype_,
    reinterpret_cast<char*>(&x1_) -
    reinterpret_cast<char*>(&nlinetype_) + sizeof(x1_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.MOBILEYE_LANE_LINE)
}

void MOBILEYE_LANE_LINE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&nlinetype_, 0, reinterpret_cast<char*>(&x1_) -
    reinterpret_cast<char*>(&nlinetype_) + sizeof(x1_));
}

MOBILEYE_LANE_LINE::~MOBILEYE_LANE_LINE() {
  // @@protoc_insertion_point(destructor:atd.drivers.MOBILEYE_LANE_LINE)
  SharedDtor();
}

void MOBILEYE_LANE_LINE::SharedDtor() {
}

void MOBILEYE_LANE_LINE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MOBILEYE_LANE_LINE& MOBILEYE_LANE_LINE::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

MOBILEYE_LANE_LINE* MOBILEYE_LANE_LINE::New(::google::protobuf::Arena* arena) const {
  MOBILEYE_LANE_LINE* n = new MOBILEYE_LANE_LINE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MOBILEYE_LANE_LINE::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.MOBILEYE_LANE_LINE)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&nlinetype_, 0, reinterpret_cast<char*>(&b_) -
      reinterpret_cast<char*>(&nlinetype_) + sizeof(b_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&c_, 0, reinterpret_cast<char*>(&x1_) -
      reinterpret_cast<char*>(&c_) + sizeof(x1_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MOBILEYE_LANE_LINE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.drivers.MOBILEYE_LANE_LINE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 nLineType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_nlinetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlinetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nQuality = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nquality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nquality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fWidth = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_fwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bLineCrossing = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_blinecrossing();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &blinecrossing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nLineColor = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_nlinecolor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlinecolor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fTLC = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_ftlc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ftlc_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float a = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_a();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &a_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float b = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_b();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &b_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float c = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_c();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &c_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float d = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_d();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &d_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x0 = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_x0();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x0_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x1 = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_x1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.MOBILEYE_LANE_LINE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.MOBILEYE_LANE_LINE)
  return false;
#undef DO_
}

void MOBILEYE_LANE_LINE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.MOBILEYE_LANE_LINE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 nLineType = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->nlinetype(), output);
  }

  // optional int32 nQuality = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nquality(), output);
  }

  // optional float fWidth = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fwidth(), output);
  }

  // optional int32 bLineCrossing = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->blinecrossing(), output);
  }

  // optional int32 nLineColor = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->nlinecolor(), output);
  }

  // optional float fTLC = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ftlc(), output);
  }

  // optional float a = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->a(), output);
  }

  // optional float b = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->b(), output);
  }

  // optional float c = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->c(), output);
  }

  // optional float d = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->d(), output);
  }

  // optional float x0 = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->x0(), output);
  }

  // optional float x1 = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->x1(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.drivers.MOBILEYE_LANE_LINE)
}

size_t MOBILEYE_LANE_LINE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.MOBILEYE_LANE_LINE)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 nLineType = 1;
    if (has_nlinetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlinetype());
    }

    // optional int32 nQuality = 2;
    if (has_nquality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nquality());
    }

    // optional float fWidth = 3;
    if (has_fwidth()) {
      total_size += 1 + 4;
    }

    // optional int32 bLineCrossing = 4;
    if (has_blinecrossing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->blinecrossing());
    }

    // optional int32 nLineColor = 5;
    if (has_nlinecolor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlinecolor());
    }

    // optional float fTLC = 6;
    if (has_ftlc()) {
      total_size += 1 + 4;
    }

    // optional float a = 7;
    if (has_a()) {
      total_size += 1 + 4;
    }

    // optional float b = 8;
    if (has_b()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional float c = 9;
    if (has_c()) {
      total_size += 1 + 4;
    }

    // optional float d = 10;
    if (has_d()) {
      total_size += 1 + 4;
    }

    // optional float x0 = 11;
    if (has_x0()) {
      total_size += 1 + 4;
    }

    // optional float x1 = 12;
    if (has_x1()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MOBILEYE_LANE_LINE::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MOBILEYE_LANE_LINE*>(&from));
}

void MOBILEYE_LANE_LINE::MergeFrom(const MOBILEYE_LANE_LINE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.MOBILEYE_LANE_LINE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      nlinetype_ = from.nlinetype_;
    }
    if (cached_has_bits & 0x00000002u) {
      nquality_ = from.nquality_;
    }
    if (cached_has_bits & 0x00000004u) {
      fwidth_ = from.fwidth_;
    }
    if (cached_has_bits & 0x00000008u) {
      blinecrossing_ = from.blinecrossing_;
    }
    if (cached_has_bits & 0x00000010u) {
      nlinecolor_ = from.nlinecolor_;
    }
    if (cached_has_bits & 0x00000020u) {
      ftlc_ = from.ftlc_;
    }
    if (cached_has_bits & 0x00000040u) {
      a_ = from.a_;
    }
    if (cached_has_bits & 0x00000080u) {
      b_ = from.b_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      c_ = from.c_;
    }
    if (cached_has_bits & 0x00000200u) {
      d_ = from.d_;
    }
    if (cached_has_bits & 0x00000400u) {
      x0_ = from.x0_;
    }
    if (cached_has_bits & 0x00000800u) {
      x1_ = from.x1_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MOBILEYE_LANE_LINE::CopyFrom(const MOBILEYE_LANE_LINE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.MOBILEYE_LANE_LINE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MOBILEYE_LANE_LINE::IsInitialized() const {
  return true;
}

void MOBILEYE_LANE_LINE::Swap(MOBILEYE_LANE_LINE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MOBILEYE_LANE_LINE::InternalSwap(MOBILEYE_LANE_LINE* other) {
  std::swap(nlinetype_, other->nlinetype_);
  std::swap(nquality_, other->nquality_);
  std::swap(fwidth_, other->fwidth_);
  std::swap(blinecrossing_, other->blinecrossing_);
  std::swap(nlinecolor_, other->nlinecolor_);
  std::swap(ftlc_, other->ftlc_);
  std::swap(a_, other->a_);
  std::swap(b_, other->b_);
  std::swap(c_, other->c_);
  std::swap(d_, other->d_);
  std::swap(x0_, other->x0_);
  std::swap(x1_, other->x1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MOBILEYE_LANE_LINE::GetTypeName() const {
  return "atd.drivers.MOBILEYE_LANE_LINE";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MOBILEYE_LANE_LINE

// optional int32 nLineType = 1;
bool MOBILEYE_LANE_LINE::has_nlinetype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_nlinetype() {
  _has_bits_[0] |= 0x00000001u;
}
void MOBILEYE_LANE_LINE::clear_has_nlinetype() {
  _has_bits_[0] &= ~0x00000001u;
}
void MOBILEYE_LANE_LINE::clear_nlinetype() {
  nlinetype_ = 0;
  clear_has_nlinetype();
}
::google::protobuf::int32 MOBILEYE_LANE_LINE::nlinetype() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.nLineType)
  return nlinetype_;
}
void MOBILEYE_LANE_LINE::set_nlinetype(::google::protobuf::int32 value) {
  set_has_nlinetype();
  nlinetype_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.nLineType)
}

// optional int32 nQuality = 2;
bool MOBILEYE_LANE_LINE::has_nquality() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_nquality() {
  _has_bits_[0] |= 0x00000002u;
}
void MOBILEYE_LANE_LINE::clear_has_nquality() {
  _has_bits_[0] &= ~0x00000002u;
}
void MOBILEYE_LANE_LINE::clear_nquality() {
  nquality_ = 0;
  clear_has_nquality();
}
::google::protobuf::int32 MOBILEYE_LANE_LINE::nquality() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.nQuality)
  return nquality_;
}
void MOBILEYE_LANE_LINE::set_nquality(::google::protobuf::int32 value) {
  set_has_nquality();
  nquality_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.nQuality)
}

// optional float fWidth = 3;
bool MOBILEYE_LANE_LINE::has_fwidth() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_fwidth() {
  _has_bits_[0] |= 0x00000004u;
}
void MOBILEYE_LANE_LINE::clear_has_fwidth() {
  _has_bits_[0] &= ~0x00000004u;
}
void MOBILEYE_LANE_LINE::clear_fwidth() {
  fwidth_ = 0;
  clear_has_fwidth();
}
float MOBILEYE_LANE_LINE::fwidth() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.fWidth)
  return fwidth_;
}
void MOBILEYE_LANE_LINE::set_fwidth(float value) {
  set_has_fwidth();
  fwidth_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.fWidth)
}

// optional int32 bLineCrossing = 4;
bool MOBILEYE_LANE_LINE::has_blinecrossing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_blinecrossing() {
  _has_bits_[0] |= 0x00000008u;
}
void MOBILEYE_LANE_LINE::clear_has_blinecrossing() {
  _has_bits_[0] &= ~0x00000008u;
}
void MOBILEYE_LANE_LINE::clear_blinecrossing() {
  blinecrossing_ = 0;
  clear_has_blinecrossing();
}
::google::protobuf::int32 MOBILEYE_LANE_LINE::blinecrossing() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.bLineCrossing)
  return blinecrossing_;
}
void MOBILEYE_LANE_LINE::set_blinecrossing(::google::protobuf::int32 value) {
  set_has_blinecrossing();
  blinecrossing_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.bLineCrossing)
}

// optional int32 nLineColor = 5;
bool MOBILEYE_LANE_LINE::has_nlinecolor() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_nlinecolor() {
  _has_bits_[0] |= 0x00000010u;
}
void MOBILEYE_LANE_LINE::clear_has_nlinecolor() {
  _has_bits_[0] &= ~0x00000010u;
}
void MOBILEYE_LANE_LINE::clear_nlinecolor() {
  nlinecolor_ = 0;
  clear_has_nlinecolor();
}
::google::protobuf::int32 MOBILEYE_LANE_LINE::nlinecolor() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.nLineColor)
  return nlinecolor_;
}
void MOBILEYE_LANE_LINE::set_nlinecolor(::google::protobuf::int32 value) {
  set_has_nlinecolor();
  nlinecolor_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.nLineColor)
}

// optional float fTLC = 6;
bool MOBILEYE_LANE_LINE::has_ftlc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_ftlc() {
  _has_bits_[0] |= 0x00000020u;
}
void MOBILEYE_LANE_LINE::clear_has_ftlc() {
  _has_bits_[0] &= ~0x00000020u;
}
void MOBILEYE_LANE_LINE::clear_ftlc() {
  ftlc_ = 0;
  clear_has_ftlc();
}
float MOBILEYE_LANE_LINE::ftlc() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.fTLC)
  return ftlc_;
}
void MOBILEYE_LANE_LINE::set_ftlc(float value) {
  set_has_ftlc();
  ftlc_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.fTLC)
}

// optional float a = 7;
bool MOBILEYE_LANE_LINE::has_a() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_a() {
  _has_bits_[0] |= 0x00000040u;
}
void MOBILEYE_LANE_LINE::clear_has_a() {
  _has_bits_[0] &= ~0x00000040u;
}
void MOBILEYE_LANE_LINE::clear_a() {
  a_ = 0;
  clear_has_a();
}
float MOBILEYE_LANE_LINE::a() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.a)
  return a_;
}
void MOBILEYE_LANE_LINE::set_a(float value) {
  set_has_a();
  a_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.a)
}

// optional float b = 8;
bool MOBILEYE_LANE_LINE::has_b() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_b() {
  _has_bits_[0] |= 0x00000080u;
}
void MOBILEYE_LANE_LINE::clear_has_b() {
  _has_bits_[0] &= ~0x00000080u;
}
void MOBILEYE_LANE_LINE::clear_b() {
  b_ = 0;
  clear_has_b();
}
float MOBILEYE_LANE_LINE::b() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.b)
  return b_;
}
void MOBILEYE_LANE_LINE::set_b(float value) {
  set_has_b();
  b_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.b)
}

// optional float c = 9;
bool MOBILEYE_LANE_LINE::has_c() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_c() {
  _has_bits_[0] |= 0x00000100u;
}
void MOBILEYE_LANE_LINE::clear_has_c() {
  _has_bits_[0] &= ~0x00000100u;
}
void MOBILEYE_LANE_LINE::clear_c() {
  c_ = 0;
  clear_has_c();
}
float MOBILEYE_LANE_LINE::c() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.c)
  return c_;
}
void MOBILEYE_LANE_LINE::set_c(float value) {
  set_has_c();
  c_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.c)
}

// optional float d = 10;
bool MOBILEYE_LANE_LINE::has_d() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_d() {
  _has_bits_[0] |= 0x00000200u;
}
void MOBILEYE_LANE_LINE::clear_has_d() {
  _has_bits_[0] &= ~0x00000200u;
}
void MOBILEYE_LANE_LINE::clear_d() {
  d_ = 0;
  clear_has_d();
}
float MOBILEYE_LANE_LINE::d() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.d)
  return d_;
}
void MOBILEYE_LANE_LINE::set_d(float value) {
  set_has_d();
  d_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.d)
}

// optional float x0 = 11;
bool MOBILEYE_LANE_LINE::has_x0() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_x0() {
  _has_bits_[0] |= 0x00000400u;
}
void MOBILEYE_LANE_LINE::clear_has_x0() {
  _has_bits_[0] &= ~0x00000400u;
}
void MOBILEYE_LANE_LINE::clear_x0() {
  x0_ = 0;
  clear_has_x0();
}
float MOBILEYE_LANE_LINE::x0() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.x0)
  return x0_;
}
void MOBILEYE_LANE_LINE::set_x0(float value) {
  set_has_x0();
  x0_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.x0)
}

// optional float x1 = 12;
bool MOBILEYE_LANE_LINE::has_x1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MOBILEYE_LANE_LINE::set_has_x1() {
  _has_bits_[0] |= 0x00000800u;
}
void MOBILEYE_LANE_LINE::clear_has_x1() {
  _has_bits_[0] &= ~0x00000800u;
}
void MOBILEYE_LANE_LINE::clear_x1() {
  x1_ = 0;
  clear_has_x1();
}
float MOBILEYE_LANE_LINE::x1() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBILEYE_LANE_LINE.x1)
  return x1_;
}
void MOBILEYE_LANE_LINE::set_x1(float value) {
  set_has_x1();
  x1_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBILEYE_LANE_LINE.x1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MOBI_LANES::kHeaderFieldNumber;
const int MOBI_LANES::kNConstructionFlagFieldNumber;
const int MOBI_LANES::kNRoadTypeFieldNumber;
const int MOBI_LANES::kBHighwayExitRightFieldNumber;
const int MOBI_LANES::kBHighwayExitLeftFieldNumber;
const int MOBI_LANES::kFLeftLaneDrivingSpeedFieldNumber;
const int MOBI_LANES::kFRightLaneDrivingSpeedFieldNumber;
const int MOBI_LANES::kFLeftLaneProbabilityFieldNumber;
const int MOBI_LANES::kFRightLaneProbabilityFieldNumber;
const int MOBI_LANES::kStLeftLineFieldNumber;
const int MOBI_LANES::kStRightLineFieldNumber;
const int MOBI_LANES::kStNextLeftLineFieldNumber;
const int MOBI_LANES::kStNextRightLineFieldNumber;
const int MOBI_LANES::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MOBI_LANES::MOBI_LANES()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmobileye_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.MOBI_LANES)
}
MOBI_LANES::MOBI_LANES(const MOBI_LANES& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_stleftline()) {
    stleftline_ = new ::atd::drivers::MOBILEYE_LANE_LINE(*from.stleftline_);
  } else {
    stleftline_ = NULL;
  }
  if (from.has_strightline()) {
    strightline_ = new ::atd::drivers::MOBILEYE_LANE_LINE(*from.strightline_);
  } else {
    strightline_ = NULL;
  }
  if (from.has_stnextleftline()) {
    stnextleftline_ = new ::atd::drivers::MOBILEYE_LANE_LINE(*from.stnextleftline_);
  } else {
    stnextleftline_ = NULL;
  }
  if (from.has_stnextrightline()) {
    stnextrightline_ = new ::atd::drivers::MOBILEYE_LANE_LINE(*from.stnextrightline_);
  } else {
    stnextrightline_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&nconstructionflag_, &from.nconstructionflag_,
    reinterpret_cast<char*>(&frightlaneprobability_) -
    reinterpret_cast<char*>(&nconstructionflag_) + sizeof(frightlaneprobability_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.MOBI_LANES)
}

void MOBI_LANES::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&frightlaneprobability_) -
    reinterpret_cast<char*>(&header_) + sizeof(frightlaneprobability_));
}

MOBI_LANES::~MOBI_LANES() {
  // @@protoc_insertion_point(destructor:atd.drivers.MOBI_LANES)
  SharedDtor();
}

void MOBI_LANES::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete stleftline_;
  }
  if (this != internal_default_instance()) {
    delete strightline_;
  }
  if (this != internal_default_instance()) {
    delete stnextleftline_;
  }
  if (this != internal_default_instance()) {
    delete stnextrightline_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void MOBI_LANES::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MOBI_LANES& MOBI_LANES::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmobileye_2eproto::InitDefaults();
  return *internal_default_instance();
}

MOBI_LANES* MOBI_LANES::New(::google::protobuf::Arena* arena) const {
  MOBI_LANES* n = new MOBI_LANES;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MOBI_LANES::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.MOBI_LANES)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_stleftline()) {
      GOOGLE_DCHECK(stleftline_ != NULL);
      stleftline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
    }
    if (has_strightline()) {
      GOOGLE_DCHECK(strightline_ != NULL);
      strightline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
    }
    if (has_stnextleftline()) {
      GOOGLE_DCHECK(stnextleftline_ != NULL);
      stnextleftline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
    }
    if (has_stnextrightline()) {
      GOOGLE_DCHECK(stnextrightline_ != NULL);
      stnextrightline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 192u) {
    ::memset(&nconstructionflag_, 0, reinterpret_cast<char*>(&nroadtype_) -
      reinterpret_cast<char*>(&nconstructionflag_) + sizeof(nroadtype_));
  }
  if (_has_bits_[8 / 32] & 16128u) {
    ::memset(&bhighwayexitright_, 0, reinterpret_cast<char*>(&frightlaneprobability_) -
      reinterpret_cast<char*>(&bhighwayexitright_) + sizeof(frightlaneprobability_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MOBI_LANES::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.drivers.MOBI_LANES)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nConstructionFlag = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nconstructionflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nconstructionflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nRoadType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_nroadtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nroadtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bHighwayExitRight = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_bhighwayexitright();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhighwayexitright_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bHighwayExitLeft = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_bhighwayexitleft();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhighwayexitleft_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fLeftLaneDrivingSpeed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_fleftlanedrivingspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fleftlanedrivingspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fRightLaneDrivingSpeed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_frightlanedrivingspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frightlanedrivingspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fLeftLaneProbability = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_fleftlaneprobability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fleftlaneprobability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fRightLaneProbability = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_frightlaneprobability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frightlaneprobability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.drivers.MOBILEYE_LANE_LINE stLeftLine = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stleftline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.drivers.MOBILEYE_LANE_LINE stRightLine = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_strightline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.drivers.MOBILEYE_LANE_LINE stNextLeftLine = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stnextleftline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.drivers.MOBILEYE_LANE_LINE stNextRightLine = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stnextrightline()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.MOBI_LANES)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.MOBI_LANES)
  return false;
#undef DO_
}

void MOBI_LANES::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.MOBI_LANES)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional int32 nConstructionFlag = 2;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nconstructionflag(), output);
  }

  // optional int32 nRoadType = 3;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nroadtype(), output);
  }

  // optional int32 bHighwayExitRight = 4;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->bhighwayexitright(), output);
  }

  // optional int32 bHighwayExitLeft = 5;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bhighwayexitleft(), output);
  }

  // optional float fLeftLaneDrivingSpeed = 6;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->fleftlanedrivingspeed(), output);
  }

  // optional float fRightLaneDrivingSpeed = 7;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->frightlanedrivingspeed(), output);
  }

  // optional float fLeftLaneProbability = 8;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->fleftlaneprobability(), output);
  }

  // optional float fRightLaneProbability = 9;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->frightlaneprobability(), output);
  }

  // optional .atd.drivers.MOBILEYE_LANE_LINE stLeftLine = 10;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, *this->stleftline_, output);
  }

  // optional .atd.drivers.MOBILEYE_LANE_LINE stRightLine = 11;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      11, *this->strightline_, output);
  }

  // optional .atd.drivers.MOBILEYE_LANE_LINE stNextLeftLine = 12;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      12, *this->stnextleftline_, output);
  }

  // optional .atd.drivers.MOBILEYE_LANE_LINE stNextRightLine = 13;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      13, *this->stnextrightline_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 14;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      14, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.drivers.MOBI_LANES)
}

size_t MOBI_LANES::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.MOBI_LANES)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.drivers.MOBILEYE_LANE_LINE stLeftLine = 10;
    if (has_stleftline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stleftline_);
    }

    // optional .atd.drivers.MOBILEYE_LANE_LINE stRightLine = 11;
    if (has_strightline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->strightline_);
    }

    // optional .atd.drivers.MOBILEYE_LANE_LINE stNextLeftLine = 12;
    if (has_stnextleftline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stnextleftline_);
    }

    // optional .atd.drivers.MOBILEYE_LANE_LINE stNextRightLine = 13;
    if (has_stnextrightline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stnextrightline_);
    }

    // optional .atd.common.Reserved reservedmsg = 14;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional int32 nConstructionFlag = 2;
    if (has_nconstructionflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nconstructionflag());
    }

    // optional int32 nRoadType = 3;
    if (has_nroadtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nroadtype());
    }

  }
  if (_has_bits_[8 / 32] & 16128u) {
    // optional int32 bHighwayExitRight = 4;
    if (has_bhighwayexitright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhighwayexitright());
    }

    // optional int32 bHighwayExitLeft = 5;
    if (has_bhighwayexitleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhighwayexitleft());
    }

    // optional float fLeftLaneDrivingSpeed = 6;
    if (has_fleftlanedrivingspeed()) {
      total_size += 1 + 4;
    }

    // optional float fRightLaneDrivingSpeed = 7;
    if (has_frightlanedrivingspeed()) {
      total_size += 1 + 4;
    }

    // optional float fLeftLaneProbability = 8;
    if (has_fleftlaneprobability()) {
      total_size += 1 + 4;
    }

    // optional float fRightLaneProbability = 9;
    if (has_frightlaneprobability()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MOBI_LANES::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MOBI_LANES*>(&from));
}

void MOBI_LANES::MergeFrom(const MOBI_LANES& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.MOBI_LANES)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stleftline()->::atd::drivers::MOBILEYE_LANE_LINE::MergeFrom(from.stleftline());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_strightline()->::atd::drivers::MOBILEYE_LANE_LINE::MergeFrom(from.strightline());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_stnextleftline()->::atd::drivers::MOBILEYE_LANE_LINE::MergeFrom(from.stnextleftline());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_stnextrightline()->::atd::drivers::MOBILEYE_LANE_LINE::MergeFrom(from.stnextrightline());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000040u) {
      nconstructionflag_ = from.nconstructionflag_;
    }
    if (cached_has_bits & 0x00000080u) {
      nroadtype_ = from.nroadtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16128u) {
    if (cached_has_bits & 0x00000100u) {
      bhighwayexitright_ = from.bhighwayexitright_;
    }
    if (cached_has_bits & 0x00000200u) {
      bhighwayexitleft_ = from.bhighwayexitleft_;
    }
    if (cached_has_bits & 0x00000400u) {
      fleftlanedrivingspeed_ = from.fleftlanedrivingspeed_;
    }
    if (cached_has_bits & 0x00000800u) {
      frightlanedrivingspeed_ = from.frightlanedrivingspeed_;
    }
    if (cached_has_bits & 0x00001000u) {
      fleftlaneprobability_ = from.fleftlaneprobability_;
    }
    if (cached_has_bits & 0x00002000u) {
      frightlaneprobability_ = from.frightlaneprobability_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MOBI_LANES::CopyFrom(const MOBI_LANES& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.MOBI_LANES)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MOBI_LANES::IsInitialized() const {
  return true;
}

void MOBI_LANES::Swap(MOBI_LANES* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MOBI_LANES::InternalSwap(MOBI_LANES* other) {
  std::swap(header_, other->header_);
  std::swap(stleftline_, other->stleftline_);
  std::swap(strightline_, other->strightline_);
  std::swap(stnextleftline_, other->stnextleftline_);
  std::swap(stnextrightline_, other->stnextrightline_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(nconstructionflag_, other->nconstructionflag_);
  std::swap(nroadtype_, other->nroadtype_);
  std::swap(bhighwayexitright_, other->bhighwayexitright_);
  std::swap(bhighwayexitleft_, other->bhighwayexitleft_);
  std::swap(fleftlanedrivingspeed_, other->fleftlanedrivingspeed_);
  std::swap(frightlanedrivingspeed_, other->frightlanedrivingspeed_);
  std::swap(fleftlaneprobability_, other->fleftlaneprobability_);
  std::swap(frightlaneprobability_, other->frightlaneprobability_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MOBI_LANES::GetTypeName() const {
  return "atd.drivers.MOBI_LANES";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MOBI_LANES

// optional .atd.common.Header header = 1;
bool MOBI_LANES::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MOBI_LANES::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MOBI_LANES::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MOBI_LANES::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& MOBI_LANES::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* MOBI_LANES::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.MOBI_LANES.header)
  return header_;
}
::atd::common::Header* MOBI_LANES::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.MOBI_LANES.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MOBI_LANES::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.MOBI_LANES.header)
}

// optional int32 nConstructionFlag = 2;
bool MOBI_LANES::has_nconstructionflag() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void MOBI_LANES::set_has_nconstructionflag() {
  _has_bits_[0] |= 0x00000040u;
}
void MOBI_LANES::clear_has_nconstructionflag() {
  _has_bits_[0] &= ~0x00000040u;
}
void MOBI_LANES::clear_nconstructionflag() {
  nconstructionflag_ = 0;
  clear_has_nconstructionflag();
}
::google::protobuf::int32 MOBI_LANES::nconstructionflag() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.nConstructionFlag)
  return nconstructionflag_;
}
void MOBI_LANES::set_nconstructionflag(::google::protobuf::int32 value) {
  set_has_nconstructionflag();
  nconstructionflag_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.nConstructionFlag)
}

// optional int32 nRoadType = 3;
bool MOBI_LANES::has_nroadtype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void MOBI_LANES::set_has_nroadtype() {
  _has_bits_[0] |= 0x00000080u;
}
void MOBI_LANES::clear_has_nroadtype() {
  _has_bits_[0] &= ~0x00000080u;
}
void MOBI_LANES::clear_nroadtype() {
  nroadtype_ = 0;
  clear_has_nroadtype();
}
::google::protobuf::int32 MOBI_LANES::nroadtype() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.nRoadType)
  return nroadtype_;
}
void MOBI_LANES::set_nroadtype(::google::protobuf::int32 value) {
  set_has_nroadtype();
  nroadtype_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.nRoadType)
}

// optional int32 bHighwayExitRight = 4;
bool MOBI_LANES::has_bhighwayexitright() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void MOBI_LANES::set_has_bhighwayexitright() {
  _has_bits_[0] |= 0x00000100u;
}
void MOBI_LANES::clear_has_bhighwayexitright() {
  _has_bits_[0] &= ~0x00000100u;
}
void MOBI_LANES::clear_bhighwayexitright() {
  bhighwayexitright_ = 0;
  clear_has_bhighwayexitright();
}
::google::protobuf::int32 MOBI_LANES::bhighwayexitright() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.bHighwayExitRight)
  return bhighwayexitright_;
}
void MOBI_LANES::set_bhighwayexitright(::google::protobuf::int32 value) {
  set_has_bhighwayexitright();
  bhighwayexitright_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.bHighwayExitRight)
}

// optional int32 bHighwayExitLeft = 5;
bool MOBI_LANES::has_bhighwayexitleft() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void MOBI_LANES::set_has_bhighwayexitleft() {
  _has_bits_[0] |= 0x00000200u;
}
void MOBI_LANES::clear_has_bhighwayexitleft() {
  _has_bits_[0] &= ~0x00000200u;
}
void MOBI_LANES::clear_bhighwayexitleft() {
  bhighwayexitleft_ = 0;
  clear_has_bhighwayexitleft();
}
::google::protobuf::int32 MOBI_LANES::bhighwayexitleft() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.bHighwayExitLeft)
  return bhighwayexitleft_;
}
void MOBI_LANES::set_bhighwayexitleft(::google::protobuf::int32 value) {
  set_has_bhighwayexitleft();
  bhighwayexitleft_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.bHighwayExitLeft)
}

// optional float fLeftLaneDrivingSpeed = 6;
bool MOBI_LANES::has_fleftlanedrivingspeed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void MOBI_LANES::set_has_fleftlanedrivingspeed() {
  _has_bits_[0] |= 0x00000400u;
}
void MOBI_LANES::clear_has_fleftlanedrivingspeed() {
  _has_bits_[0] &= ~0x00000400u;
}
void MOBI_LANES::clear_fleftlanedrivingspeed() {
  fleftlanedrivingspeed_ = 0;
  clear_has_fleftlanedrivingspeed();
}
float MOBI_LANES::fleftlanedrivingspeed() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.fLeftLaneDrivingSpeed)
  return fleftlanedrivingspeed_;
}
void MOBI_LANES::set_fleftlanedrivingspeed(float value) {
  set_has_fleftlanedrivingspeed();
  fleftlanedrivingspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.fLeftLaneDrivingSpeed)
}

// optional float fRightLaneDrivingSpeed = 7;
bool MOBI_LANES::has_frightlanedrivingspeed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void MOBI_LANES::set_has_frightlanedrivingspeed() {
  _has_bits_[0] |= 0x00000800u;
}
void MOBI_LANES::clear_has_frightlanedrivingspeed() {
  _has_bits_[0] &= ~0x00000800u;
}
void MOBI_LANES::clear_frightlanedrivingspeed() {
  frightlanedrivingspeed_ = 0;
  clear_has_frightlanedrivingspeed();
}
float MOBI_LANES::frightlanedrivingspeed() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.fRightLaneDrivingSpeed)
  return frightlanedrivingspeed_;
}
void MOBI_LANES::set_frightlanedrivingspeed(float value) {
  set_has_frightlanedrivingspeed();
  frightlanedrivingspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.fRightLaneDrivingSpeed)
}

// optional float fLeftLaneProbability = 8;
bool MOBI_LANES::has_fleftlaneprobability() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void MOBI_LANES::set_has_fleftlaneprobability() {
  _has_bits_[0] |= 0x00001000u;
}
void MOBI_LANES::clear_has_fleftlaneprobability() {
  _has_bits_[0] &= ~0x00001000u;
}
void MOBI_LANES::clear_fleftlaneprobability() {
  fleftlaneprobability_ = 0;
  clear_has_fleftlaneprobability();
}
float MOBI_LANES::fleftlaneprobability() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.fLeftLaneProbability)
  return fleftlaneprobability_;
}
void MOBI_LANES::set_fleftlaneprobability(float value) {
  set_has_fleftlaneprobability();
  fleftlaneprobability_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.fLeftLaneProbability)
}

// optional float fRightLaneProbability = 9;
bool MOBI_LANES::has_frightlaneprobability() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void MOBI_LANES::set_has_frightlaneprobability() {
  _has_bits_[0] |= 0x00002000u;
}
void MOBI_LANES::clear_has_frightlaneprobability() {
  _has_bits_[0] &= ~0x00002000u;
}
void MOBI_LANES::clear_frightlaneprobability() {
  frightlaneprobability_ = 0;
  clear_has_frightlaneprobability();
}
float MOBI_LANES::frightlaneprobability() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.fRightLaneProbability)
  return frightlaneprobability_;
}
void MOBI_LANES::set_frightlaneprobability(float value) {
  set_has_frightlaneprobability();
  frightlaneprobability_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.MOBI_LANES.fRightLaneProbability)
}

// optional .atd.drivers.MOBILEYE_LANE_LINE stLeftLine = 10;
bool MOBI_LANES::has_stleftline() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MOBI_LANES::set_has_stleftline() {
  _has_bits_[0] |= 0x00000002u;
}
void MOBI_LANES::clear_has_stleftline() {
  _has_bits_[0] &= ~0x00000002u;
}
void MOBI_LANES::clear_stleftline() {
  if (stleftline_ != NULL) stleftline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
  clear_has_stleftline();
}
const ::atd::drivers::MOBILEYE_LANE_LINE& MOBI_LANES::stleftline() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.stLeftLine)
  return stleftline_ != NULL ? *stleftline_
                         : *::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance();
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::mutable_stleftline() {
  set_has_stleftline();
  if (stleftline_ == NULL) {
    stleftline_ = new ::atd::drivers::MOBILEYE_LANE_LINE;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.MOBI_LANES.stLeftLine)
  return stleftline_;
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::release_stleftline() {
  // @@protoc_insertion_point(field_release:atd.drivers.MOBI_LANES.stLeftLine)
  clear_has_stleftline();
  ::atd::drivers::MOBILEYE_LANE_LINE* temp = stleftline_;
  stleftline_ = NULL;
  return temp;
}
void MOBI_LANES::set_allocated_stleftline(::atd::drivers::MOBILEYE_LANE_LINE* stleftline) {
  delete stleftline_;
  stleftline_ = stleftline;
  if (stleftline) {
    set_has_stleftline();
  } else {
    clear_has_stleftline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.MOBI_LANES.stLeftLine)
}

// optional .atd.drivers.MOBILEYE_LANE_LINE stRightLine = 11;
bool MOBI_LANES::has_strightline() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MOBI_LANES::set_has_strightline() {
  _has_bits_[0] |= 0x00000004u;
}
void MOBI_LANES::clear_has_strightline() {
  _has_bits_[0] &= ~0x00000004u;
}
void MOBI_LANES::clear_strightline() {
  if (strightline_ != NULL) strightline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
  clear_has_strightline();
}
const ::atd::drivers::MOBILEYE_LANE_LINE& MOBI_LANES::strightline() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.stRightLine)
  return strightline_ != NULL ? *strightline_
                         : *::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance();
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::mutable_strightline() {
  set_has_strightline();
  if (strightline_ == NULL) {
    strightline_ = new ::atd::drivers::MOBILEYE_LANE_LINE;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.MOBI_LANES.stRightLine)
  return strightline_;
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::release_strightline() {
  // @@protoc_insertion_point(field_release:atd.drivers.MOBI_LANES.stRightLine)
  clear_has_strightline();
  ::atd::drivers::MOBILEYE_LANE_LINE* temp = strightline_;
  strightline_ = NULL;
  return temp;
}
void MOBI_LANES::set_allocated_strightline(::atd::drivers::MOBILEYE_LANE_LINE* strightline) {
  delete strightline_;
  strightline_ = strightline;
  if (strightline) {
    set_has_strightline();
  } else {
    clear_has_strightline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.MOBI_LANES.stRightLine)
}

// optional .atd.drivers.MOBILEYE_LANE_LINE stNextLeftLine = 12;
bool MOBI_LANES::has_stnextleftline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MOBI_LANES::set_has_stnextleftline() {
  _has_bits_[0] |= 0x00000008u;
}
void MOBI_LANES::clear_has_stnextleftline() {
  _has_bits_[0] &= ~0x00000008u;
}
void MOBI_LANES::clear_stnextleftline() {
  if (stnextleftline_ != NULL) stnextleftline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
  clear_has_stnextleftline();
}
const ::atd::drivers::MOBILEYE_LANE_LINE& MOBI_LANES::stnextleftline() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.stNextLeftLine)
  return stnextleftline_ != NULL ? *stnextleftline_
                         : *::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance();
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::mutable_stnextleftline() {
  set_has_stnextleftline();
  if (stnextleftline_ == NULL) {
    stnextleftline_ = new ::atd::drivers::MOBILEYE_LANE_LINE;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.MOBI_LANES.stNextLeftLine)
  return stnextleftline_;
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::release_stnextleftline() {
  // @@protoc_insertion_point(field_release:atd.drivers.MOBI_LANES.stNextLeftLine)
  clear_has_stnextleftline();
  ::atd::drivers::MOBILEYE_LANE_LINE* temp = stnextleftline_;
  stnextleftline_ = NULL;
  return temp;
}
void MOBI_LANES::set_allocated_stnextleftline(::atd::drivers::MOBILEYE_LANE_LINE* stnextleftline) {
  delete stnextleftline_;
  stnextleftline_ = stnextleftline;
  if (stnextleftline) {
    set_has_stnextleftline();
  } else {
    clear_has_stnextleftline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.MOBI_LANES.stNextLeftLine)
}

// optional .atd.drivers.MOBILEYE_LANE_LINE stNextRightLine = 13;
bool MOBI_LANES::has_stnextrightline() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void MOBI_LANES::set_has_stnextrightline() {
  _has_bits_[0] |= 0x00000010u;
}
void MOBI_LANES::clear_has_stnextrightline() {
  _has_bits_[0] &= ~0x00000010u;
}
void MOBI_LANES::clear_stnextrightline() {
  if (stnextrightline_ != NULL) stnextrightline_->::atd::drivers::MOBILEYE_LANE_LINE::Clear();
  clear_has_stnextrightline();
}
const ::atd::drivers::MOBILEYE_LANE_LINE& MOBI_LANES::stnextrightline() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.stNextRightLine)
  return stnextrightline_ != NULL ? *stnextrightline_
                         : *::atd::drivers::MOBILEYE_LANE_LINE::internal_default_instance();
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::mutable_stnextrightline() {
  set_has_stnextrightline();
  if (stnextrightline_ == NULL) {
    stnextrightline_ = new ::atd::drivers::MOBILEYE_LANE_LINE;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.MOBI_LANES.stNextRightLine)
  return stnextrightline_;
}
::atd::drivers::MOBILEYE_LANE_LINE* MOBI_LANES::release_stnextrightline() {
  // @@protoc_insertion_point(field_release:atd.drivers.MOBI_LANES.stNextRightLine)
  clear_has_stnextrightline();
  ::atd::drivers::MOBILEYE_LANE_LINE* temp = stnextrightline_;
  stnextrightline_ = NULL;
  return temp;
}
void MOBI_LANES::set_allocated_stnextrightline(::atd::drivers::MOBILEYE_LANE_LINE* stnextrightline) {
  delete stnextrightline_;
  stnextrightline_ = stnextrightline;
  if (stnextrightline) {
    set_has_stnextrightline();
  } else {
    clear_has_stnextrightline();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.MOBI_LANES.stNextRightLine)
}

// optional .atd.common.Reserved reservedmsg = 14;
bool MOBI_LANES::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void MOBI_LANES::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000020u;
}
void MOBI_LANES::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000020u;
}
void MOBI_LANES::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& MOBI_LANES::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.MOBI_LANES.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* MOBI_LANES::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.MOBI_LANES.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* MOBI_LANES::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.MOBI_LANES.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void MOBI_LANES::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.MOBI_LANES.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)
