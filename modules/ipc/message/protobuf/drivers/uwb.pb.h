// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/uwb.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/geometry.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Arrow2D;
class Arrow2DDefaultTypeInternal;
extern Arrow2DDefaultTypeInternal _Arrow2D_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
}  // namespace common
namespace drivers {
class Uwb;
class UwbDefaultTypeInternal;
extern UwbDefaultTypeInternal _Uwb_default_instance_;
}  // namespace drivers
}  // namespace atd

namespace atd {
namespace drivers {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto

// ===================================================================

class Uwb : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.drivers.Uwb) */ {
 public:
  Uwb();
  virtual ~Uwb();

  Uwb(const Uwb& from);

  inline Uwb& operator=(const Uwb& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Uwb& default_instance();

  static inline const Uwb* internal_default_instance() {
    return reinterpret_cast<const Uwb*>(
               &_Uwb_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Uwb* other);

  // implements Message ----------------------------------------------

  inline Uwb* New() const PROTOBUF_FINAL { return New(NULL); }

  Uwb* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Uwb& from);
  void MergeFrom(const Uwb& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Uwb* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.common.PointLLH uwbpoint = 3;
  bool has_uwbpoint() const;
  void clear_uwbpoint();
  static const int kUwbpointFieldNumber = 3;
  const ::atd::common::PointLLH& uwbpoint() const;
  ::atd::common::PointLLH* mutable_uwbpoint();
  ::atd::common::PointLLH* release_uwbpoint();
  void set_allocated_uwbpoint(::atd::common::PointLLH* uwbpoint);

  // optional double heading = 4;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 4;
  double heading() const;
  void set_heading(double value);

  // optional double uwb_sendtime = 6;
  bool has_uwb_sendtime() const;
  void clear_uwb_sendtime();
  static const int kUwbSendtimeFieldNumber = 6;
  double uwb_sendtime() const;
  void set_uwb_sendtime(double value);

  // optional double longitude_std = 7;
  bool has_longitude_std() const;
  void clear_longitude_std();
  static const int kLongitudeStdFieldNumber = 7;
  double longitude_std() const;
  void set_longitude_std(double value);

  // optional int32 uwb_id = 5;
  bool has_uwb_id() const;
  void clear_uwb_id();
  static const int kUwbIdFieldNumber = 5;
  ::google::protobuf::int32 uwb_id() const;
  void set_uwb_id(::google::protobuf::int32 value);

  // optional int32 nCredit = 10;
  bool has_ncredit() const;
  void clear_ncredit();
  static const int kNCreditFieldNumber = 10;
  ::google::protobuf::int32 ncredit() const;
  void set_ncredit(::google::protobuf::int32 value);

  // optional double latitude_std = 8;
  bool has_latitude_std() const;
  void clear_latitude_std();
  static const int kLatitudeStdFieldNumber = 8;
  double latitude_std() const;
  void set_latitude_std(double value);

  // optional double heading_std = 9;
  bool has_heading_std() const;
  void clear_heading_std();
  static const int kHeadingStdFieldNumber = 9;
  double heading_std() const;
  void set_heading_std(double value);

  // optional int32 paddinggap = 11;
  bool has_paddinggap() const;
  void clear_paddinggap();
  static const int kPaddinggapFieldNumber = 11;
  ::google::protobuf::int32 paddinggap() const;
  void set_paddinggap(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.drivers.Uwb)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_uwbpoint();
  void clear_has_uwbpoint();
  void set_has_heading();
  void clear_has_heading();
  void set_has_uwb_id();
  void clear_has_uwb_id();
  void set_has_uwb_sendtime();
  void clear_has_uwb_sendtime();
  void set_has_longitude_std();
  void clear_has_longitude_std();
  void set_has_latitude_std();
  void clear_has_latitude_std();
  void set_has_heading_std();
  void clear_has_heading_std();
  void set_has_ncredit();
  void clear_has_ncredit();
  void set_has_paddinggap();
  void clear_has_paddinggap();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::common::PointLLH* uwbpoint_;
  double heading_;
  double uwb_sendtime_;
  double longitude_std_;
  ::google::protobuf::int32 uwb_id_;
  ::google::protobuf::int32 ncredit_;
  double latitude_std_;
  double heading_std_;
  ::google::protobuf::int32 paddinggap_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Uwb

// optional .atd.common.Header header = 1;
inline bool Uwb::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Uwb::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Uwb::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Uwb::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Uwb::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Uwb::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Uwb.header)
  return header_;
}
inline ::atd::common::Header* Uwb::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Uwb.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Uwb::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Uwb.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Uwb::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Uwb::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Uwb::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Uwb::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Uwb::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Uwb::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Uwb.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Uwb::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Uwb.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Uwb::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Uwb.reservedmsg)
}

// optional .atd.common.PointLLH uwbpoint = 3;
inline bool Uwb::has_uwbpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Uwb::set_has_uwbpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Uwb::clear_has_uwbpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Uwb::clear_uwbpoint() {
  if (uwbpoint_ != NULL) uwbpoint_->::atd::common::PointLLH::Clear();
  clear_has_uwbpoint();
}
inline const ::atd::common::PointLLH& Uwb::uwbpoint() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.uwbpoint)
  return uwbpoint_ != NULL ? *uwbpoint_
                         : *::atd::common::PointLLH::internal_default_instance();
}
inline ::atd::common::PointLLH* Uwb::mutable_uwbpoint() {
  set_has_uwbpoint();
  if (uwbpoint_ == NULL) {
    uwbpoint_ = new ::atd::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Uwb.uwbpoint)
  return uwbpoint_;
}
inline ::atd::common::PointLLH* Uwb::release_uwbpoint() {
  // @@protoc_insertion_point(field_release:atd.drivers.Uwb.uwbpoint)
  clear_has_uwbpoint();
  ::atd::common::PointLLH* temp = uwbpoint_;
  uwbpoint_ = NULL;
  return temp;
}
inline void Uwb::set_allocated_uwbpoint(::atd::common::PointLLH* uwbpoint) {
  delete uwbpoint_;
  uwbpoint_ = uwbpoint;
  if (uwbpoint) {
    set_has_uwbpoint();
  } else {
    clear_has_uwbpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Uwb.uwbpoint)
}

// optional double heading = 4;
inline bool Uwb::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Uwb::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Uwb::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Uwb::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double Uwb::heading() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.heading)
  return heading_;
}
inline void Uwb::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.heading)
}

// optional int32 uwb_id = 5;
inline bool Uwb::has_uwb_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Uwb::set_has_uwb_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Uwb::clear_has_uwb_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Uwb::clear_uwb_id() {
  uwb_id_ = 0;
  clear_has_uwb_id();
}
inline ::google::protobuf::int32 Uwb::uwb_id() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.uwb_id)
  return uwb_id_;
}
inline void Uwb::set_uwb_id(::google::protobuf::int32 value) {
  set_has_uwb_id();
  uwb_id_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.uwb_id)
}

// optional double uwb_sendtime = 6;
inline bool Uwb::has_uwb_sendtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Uwb::set_has_uwb_sendtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Uwb::clear_has_uwb_sendtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Uwb::clear_uwb_sendtime() {
  uwb_sendtime_ = 0;
  clear_has_uwb_sendtime();
}
inline double Uwb::uwb_sendtime() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.uwb_sendtime)
  return uwb_sendtime_;
}
inline void Uwb::set_uwb_sendtime(double value) {
  set_has_uwb_sendtime();
  uwb_sendtime_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.uwb_sendtime)
}

// optional double longitude_std = 7;
inline bool Uwb::has_longitude_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Uwb::set_has_longitude_std() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Uwb::clear_has_longitude_std() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Uwb::clear_longitude_std() {
  longitude_std_ = 0;
  clear_has_longitude_std();
}
inline double Uwb::longitude_std() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.longitude_std)
  return longitude_std_;
}
inline void Uwb::set_longitude_std(double value) {
  set_has_longitude_std();
  longitude_std_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.longitude_std)
}

// optional double latitude_std = 8;
inline bool Uwb::has_latitude_std() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Uwb::set_has_latitude_std() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Uwb::clear_has_latitude_std() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Uwb::clear_latitude_std() {
  latitude_std_ = 0;
  clear_has_latitude_std();
}
inline double Uwb::latitude_std() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.latitude_std)
  return latitude_std_;
}
inline void Uwb::set_latitude_std(double value) {
  set_has_latitude_std();
  latitude_std_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.latitude_std)
}

// optional double heading_std = 9;
inline bool Uwb::has_heading_std() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Uwb::set_has_heading_std() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Uwb::clear_has_heading_std() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Uwb::clear_heading_std() {
  heading_std_ = 0;
  clear_has_heading_std();
}
inline double Uwb::heading_std() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.heading_std)
  return heading_std_;
}
inline void Uwb::set_heading_std(double value) {
  set_has_heading_std();
  heading_std_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.heading_std)
}

// optional int32 nCredit = 10;
inline bool Uwb::has_ncredit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Uwb::set_has_ncredit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Uwb::clear_has_ncredit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Uwb::clear_ncredit() {
  ncredit_ = 0;
  clear_has_ncredit();
}
inline ::google::protobuf::int32 Uwb::ncredit() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.nCredit)
  return ncredit_;
}
inline void Uwb::set_ncredit(::google::protobuf::int32 value) {
  set_has_ncredit();
  ncredit_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.nCredit)
}

// optional int32 paddinggap = 11;
inline bool Uwb::has_paddinggap() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Uwb::set_has_paddinggap() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Uwb::clear_has_paddinggap() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Uwb::clear_paddinggap() {
  paddinggap_ = 0;
  clear_has_paddinggap();
}
inline ::google::protobuf::int32 Uwb::paddinggap() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.paddinggap)
  return paddinggap_;
}
inline void Uwb::set_paddinggap(::google::protobuf::int32 value) {
  set_has_paddinggap();
  paddinggap_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.paddinggap)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto__INCLUDED
