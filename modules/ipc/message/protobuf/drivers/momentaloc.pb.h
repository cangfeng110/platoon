// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/momentaloc.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
}  // namespace common
namespace drivers {
class Momentaloc;
class MomentalocDefaultTypeInternal;
extern MomentalocDefaultTypeInternal _Momentaloc_default_instance_;
}  // namespace drivers
}  // namespace atd

namespace atd {
namespace drivers {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto

// ===================================================================

class Momentaloc : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.drivers.Momentaloc) */ {
 public:
  Momentaloc();
  virtual ~Momentaloc();

  Momentaloc(const Momentaloc& from);

  inline Momentaloc& operator=(const Momentaloc& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Momentaloc& default_instance();

  static inline const Momentaloc* internal_default_instance() {
    return reinterpret_cast<const Momentaloc*>(
               &_Momentaloc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Momentaloc* other);

  // implements Message ----------------------------------------------

  inline Momentaloc* New() const PROTOBUF_FINAL { return New(NULL); }

  Momentaloc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Momentaloc& from);
  void MergeFrom(const Momentaloc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Momentaloc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated double reseved_float = 13;
  int reseved_float_size() const;
  void clear_reseved_float();
  static const int kResevedFloatFieldNumber = 13;
  double reseved_float(int index) const;
  void set_reseved_float(int index, double value);
  void add_reseved_float(double value);
  const ::google::protobuf::RepeatedField< double >&
      reseved_float() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_reseved_float();

  // repeated int32 reseved_int = 14;
  int reseved_int_size() const;
  void clear_reseved_int();
  static const int kResevedIntFieldNumber = 14;
  ::google::protobuf::int32 reseved_int(int index) const;
  void set_reseved_int(int index, ::google::protobuf::int32 value);
  void add_reseved_int(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      reseved_int() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_reseved_int();

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional double image_time = 3;
  bool has_image_time() const;
  void clear_image_time();
  static const int kImageTimeFieldNumber = 3;
  double image_time() const;
  void set_image_time(double value);

  // optional double send_time = 4;
  bool has_send_time() const;
  void clear_send_time();
  static const int kSendTimeFieldNumber = 4;
  double send_time() const;
  void set_send_time(double value);

  // optional float x = 5;
  bool has_x() const;
  void clear_x();
  static const int kXFieldNumber = 5;
  float x() const;
  void set_x(float value);

  // optional float y = 6;
  bool has_y() const;
  void clear_y();
  static const int kYFieldNumber = 6;
  float y() const;
  void set_y(float value);

  // optional float z = 7;
  bool has_z() const;
  void clear_z();
  static const int kZFieldNumber = 7;
  float z() const;
  void set_z(float value);

  // optional float theta = 8;
  bool has_theta() const;
  void clear_theta();
  static const int kThetaFieldNumber = 8;
  float theta() const;
  void set_theta(float value);

  // optional int32 init_valid = 9;
  bool has_init_valid() const;
  void clear_init_valid();
  static const int kInitValidFieldNumber = 9;
  ::google::protobuf::int32 init_valid() const;
  void set_init_valid(::google::protobuf::int32 value);

  // optional int32 now_valid = 10;
  bool has_now_valid() const;
  void clear_now_valid();
  static const int kNowValidFieldNumber = 10;
  ::google::protobuf::int32 now_valid() const;
  void set_now_valid(::google::protobuf::int32 value);

  // optional float std_pos = 11;
  bool has_std_pos() const;
  void clear_std_pos();
  static const int kStdPosFieldNumber = 11;
  float std_pos() const;
  void set_std_pos(float value);

  // optional float quality = 12;
  bool has_quality() const;
  void clear_quality();
  static const int kQualityFieldNumber = 12;
  float quality() const;
  void set_quality(float value);

  // @@protoc_insertion_point(class_scope:atd.drivers.Momentaloc)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_image_time();
  void clear_has_image_time();
  void set_has_send_time();
  void clear_has_send_time();
  void set_has_x();
  void clear_has_x();
  void set_has_y();
  void clear_has_y();
  void set_has_z();
  void clear_has_z();
  void set_has_theta();
  void clear_has_theta();
  void set_has_init_valid();
  void clear_has_init_valid();
  void set_has_now_valid();
  void clear_has_now_valid();
  void set_has_std_pos();
  void clear_has_std_pos();
  void set_has_quality();
  void clear_has_quality();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< double > reseved_float_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > reseved_int_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  double image_time_;
  double send_time_;
  float x_;
  float y_;
  float z_;
  float theta_;
  ::google::protobuf::int32 init_valid_;
  ::google::protobuf::int32 now_valid_;
  float std_pos_;
  float quality_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Momentaloc

// optional .atd.common.Header header = 1;
inline bool Momentaloc::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Momentaloc::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Momentaloc::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Momentaloc::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Momentaloc::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Momentaloc::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Momentaloc.header)
  return header_;
}
inline ::atd::common::Header* Momentaloc::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Momentaloc.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Momentaloc::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Momentaloc.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool Momentaloc::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Momentaloc::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Momentaloc::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Momentaloc::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Momentaloc::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Momentaloc::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Momentaloc.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Momentaloc::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Momentaloc.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Momentaloc::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Momentaloc.reservedmsg)
}

// optional double image_time = 3;
inline bool Momentaloc::has_image_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Momentaloc::set_has_image_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Momentaloc::clear_has_image_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Momentaloc::clear_image_time() {
  image_time_ = 0;
  clear_has_image_time();
}
inline double Momentaloc::image_time() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.image_time)
  return image_time_;
}
inline void Momentaloc::set_image_time(double value) {
  set_has_image_time();
  image_time_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.image_time)
}

// optional double send_time = 4;
inline bool Momentaloc::has_send_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Momentaloc::set_has_send_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Momentaloc::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Momentaloc::clear_send_time() {
  send_time_ = 0;
  clear_has_send_time();
}
inline double Momentaloc::send_time() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.send_time)
  return send_time_;
}
inline void Momentaloc::set_send_time(double value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.send_time)
}

// optional float x = 5;
inline bool Momentaloc::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Momentaloc::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Momentaloc::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Momentaloc::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float Momentaloc::x() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.x)
  return x_;
}
inline void Momentaloc::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.x)
}

// optional float y = 6;
inline bool Momentaloc::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Momentaloc::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Momentaloc::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Momentaloc::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float Momentaloc::y() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.y)
  return y_;
}
inline void Momentaloc::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.y)
}

// optional float z = 7;
inline bool Momentaloc::has_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Momentaloc::set_has_z() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Momentaloc::clear_has_z() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Momentaloc::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float Momentaloc::z() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.z)
  return z_;
}
inline void Momentaloc::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.z)
}

// optional float theta = 8;
inline bool Momentaloc::has_theta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Momentaloc::set_has_theta() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Momentaloc::clear_has_theta() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Momentaloc::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
inline float Momentaloc::theta() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.theta)
  return theta_;
}
inline void Momentaloc::set_theta(float value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.theta)
}

// optional int32 init_valid = 9;
inline bool Momentaloc::has_init_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Momentaloc::set_has_init_valid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Momentaloc::clear_has_init_valid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Momentaloc::clear_init_valid() {
  init_valid_ = 0;
  clear_has_init_valid();
}
inline ::google::protobuf::int32 Momentaloc::init_valid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.init_valid)
  return init_valid_;
}
inline void Momentaloc::set_init_valid(::google::protobuf::int32 value) {
  set_has_init_valid();
  init_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.init_valid)
}

// optional int32 now_valid = 10;
inline bool Momentaloc::has_now_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Momentaloc::set_has_now_valid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Momentaloc::clear_has_now_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Momentaloc::clear_now_valid() {
  now_valid_ = 0;
  clear_has_now_valid();
}
inline ::google::protobuf::int32 Momentaloc::now_valid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.now_valid)
  return now_valid_;
}
inline void Momentaloc::set_now_valid(::google::protobuf::int32 value) {
  set_has_now_valid();
  now_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.now_valid)
}

// optional float std_pos = 11;
inline bool Momentaloc::has_std_pos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Momentaloc::set_has_std_pos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Momentaloc::clear_has_std_pos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Momentaloc::clear_std_pos() {
  std_pos_ = 0;
  clear_has_std_pos();
}
inline float Momentaloc::std_pos() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.std_pos)
  return std_pos_;
}
inline void Momentaloc::set_std_pos(float value) {
  set_has_std_pos();
  std_pos_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.std_pos)
}

// optional float quality = 12;
inline bool Momentaloc::has_quality() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Momentaloc::set_has_quality() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Momentaloc::clear_has_quality() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Momentaloc::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
inline float Momentaloc::quality() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.quality)
  return quality_;
}
inline void Momentaloc::set_quality(float value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.quality)
}

// repeated double reseved_float = 13;
inline int Momentaloc::reseved_float_size() const {
  return reseved_float_.size();
}
inline void Momentaloc::clear_reseved_float() {
  reseved_float_.Clear();
}
inline double Momentaloc::reseved_float(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.reseved_float)
  return reseved_float_.Get(index);
}
inline void Momentaloc::set_reseved_float(int index, double value) {
  reseved_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.reseved_float)
}
inline void Momentaloc::add_reseved_float(double value) {
  reseved_float_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Momentaloc.reseved_float)
}
inline const ::google::protobuf::RepeatedField< double >&
Momentaloc::reseved_float() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Momentaloc.reseved_float)
  return reseved_float_;
}
inline ::google::protobuf::RepeatedField< double >*
Momentaloc::mutable_reseved_float() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Momentaloc.reseved_float)
  return &reseved_float_;
}

// repeated int32 reseved_int = 14;
inline int Momentaloc::reseved_int_size() const {
  return reseved_int_.size();
}
inline void Momentaloc::clear_reseved_int() {
  reseved_int_.Clear();
}
inline ::google::protobuf::int32 Momentaloc::reseved_int(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.reseved_int)
  return reseved_int_.Get(index);
}
inline void Momentaloc::set_reseved_int(int index, ::google::protobuf::int32 value) {
  reseved_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.reseved_int)
}
inline void Momentaloc::add_reseved_int(::google::protobuf::int32 value) {
  reseved_int_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Momentaloc.reseved_int)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Momentaloc::reseved_int() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Momentaloc.reseved_int)
  return reseved_int_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Momentaloc::mutable_reseved_int() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Momentaloc.reseved_int)
  return &reseved_int_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto__INCLUDED
