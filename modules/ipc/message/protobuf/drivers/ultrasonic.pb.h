// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/ultrasonic.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
}  // namespace common
namespace drivers {
class Perception_ULTRASONIC;
class Perception_ULTRASONICDefaultTypeInternal;
extern Perception_ULTRASONICDefaultTypeInternal _Perception_ULTRASONIC_default_instance_;
class ULTRASONIC_DIS;
class ULTRASONIC_DISDefaultTypeInternal;
extern ULTRASONIC_DISDefaultTypeInternal _ULTRASONIC_DIS_default_instance_;
}  // namespace drivers
}  // namespace atd

namespace atd {
namespace drivers {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto

// ===================================================================

class ULTRASONIC_DIS : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.drivers.ULTRASONIC_DIS) */ {
 public:
  ULTRASONIC_DIS();
  virtual ~ULTRASONIC_DIS();

  ULTRASONIC_DIS(const ULTRASONIC_DIS& from);

  inline ULTRASONIC_DIS& operator=(const ULTRASONIC_DIS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ULTRASONIC_DIS& default_instance();

  static inline const ULTRASONIC_DIS* internal_default_instance() {
    return reinterpret_cast<const ULTRASONIC_DIS*>(
               &_ULTRASONIC_DIS_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ULTRASONIC_DIS* other);

  // implements Message ----------------------------------------------

  inline ULTRASONIC_DIS* New() const PROTOBUF_FINAL { return New(NULL); }

  ULTRASONIC_DIS* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ULTRASONIC_DIS& from);
  void MergeFrom(const ULTRASONIC_DIS& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ULTRASONIC_DIS* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float ExParam = 1;
  int exparam_size() const;
  void clear_exparam();
  static const int kExParamFieldNumber = 1;
  float exparam(int index) const;
  void set_exparam(int index, float value);
  void add_exparam(float value);
  const ::google::protobuf::RepeatedField< float >&
      exparam() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_exparam();

  // optional int32 bOutRange = 2;
  bool has_boutrange() const;
  void clear_boutrange();
  static const int kBOutRangeFieldNumber = 2;
  ::google::protobuf::int32 boutrange() const;
  void set_boutrange(::google::protobuf::int32 value);

  // optional float fDist = 3;
  bool has_fdist() const;
  void clear_fdist();
  static const int kFDistFieldNumber = 3;
  float fdist() const;
  void set_fdist(float value);

  // @@protoc_insertion_point(class_scope:atd.drivers.ULTRASONIC_DIS)
 private:
  void set_has_boutrange();
  void clear_has_boutrange();
  void set_has_fdist();
  void clear_has_fdist();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > exparam_;
  ::google::protobuf::int32 boutrange_;
  float fdist_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Perception_ULTRASONIC : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.drivers.Perception_ULTRASONIC) */ {
 public:
  Perception_ULTRASONIC();
  virtual ~Perception_ULTRASONIC();

  Perception_ULTRASONIC(const Perception_ULTRASONIC& from);

  inline Perception_ULTRASONIC& operator=(const Perception_ULTRASONIC& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Perception_ULTRASONIC& default_instance();

  static inline const Perception_ULTRASONIC* internal_default_instance() {
    return reinterpret_cast<const Perception_ULTRASONIC*>(
               &_Perception_ULTRASONIC_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Perception_ULTRASONIC* other);

  // implements Message ----------------------------------------------

  inline Perception_ULTRASONIC* New() const PROTOBUF_FINAL { return New(NULL); }

  Perception_ULTRASONIC* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Perception_ULTRASONIC& from);
  void MergeFrom(const Perception_ULTRASONIC& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Perception_ULTRASONIC* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.drivers.ULTRASONIC_DIS gstProbes = 2;
  int gstprobes_size() const;
  void clear_gstprobes();
  static const int kGstProbesFieldNumber = 2;
  const ::atd::drivers::ULTRASONIC_DIS& gstprobes(int index) const;
  ::atd::drivers::ULTRASONIC_DIS* mutable_gstprobes(int index);
  ::atd::drivers::ULTRASONIC_DIS* add_gstprobes();
  ::google::protobuf::RepeatedPtrField< ::atd::drivers::ULTRASONIC_DIS >*
      mutable_gstprobes();
  const ::google::protobuf::RepeatedPtrField< ::atd::drivers::ULTRASONIC_DIS >&
      gstprobes() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 3;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 3;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // @@protoc_insertion_point(class_scope:atd.drivers.Perception_ULTRASONIC)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::drivers::ULTRASONIC_DIS > gstprobes_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// ULTRASONIC_DIS

// repeated float ExParam = 1;
inline int ULTRASONIC_DIS::exparam_size() const {
  return exparam_.size();
}
inline void ULTRASONIC_DIS::clear_exparam() {
  exparam_.Clear();
}
inline float ULTRASONIC_DIS::exparam(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.ULTRASONIC_DIS.ExParam)
  return exparam_.Get(index);
}
inline void ULTRASONIC_DIS::set_exparam(int index, float value) {
  exparam_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.ULTRASONIC_DIS.ExParam)
}
inline void ULTRASONIC_DIS::add_exparam(float value) {
  exparam_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.ULTRASONIC_DIS.ExParam)
}
inline const ::google::protobuf::RepeatedField< float >&
ULTRASONIC_DIS::exparam() const {
  // @@protoc_insertion_point(field_list:atd.drivers.ULTRASONIC_DIS.ExParam)
  return exparam_;
}
inline ::google::protobuf::RepeatedField< float >*
ULTRASONIC_DIS::mutable_exparam() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.ULTRASONIC_DIS.ExParam)
  return &exparam_;
}

// optional int32 bOutRange = 2;
inline bool ULTRASONIC_DIS::has_boutrange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ULTRASONIC_DIS::set_has_boutrange() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ULTRASONIC_DIS::clear_has_boutrange() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ULTRASONIC_DIS::clear_boutrange() {
  boutrange_ = 0;
  clear_has_boutrange();
}
inline ::google::protobuf::int32 ULTRASONIC_DIS::boutrange() const {
  // @@protoc_insertion_point(field_get:atd.drivers.ULTRASONIC_DIS.bOutRange)
  return boutrange_;
}
inline void ULTRASONIC_DIS::set_boutrange(::google::protobuf::int32 value) {
  set_has_boutrange();
  boutrange_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.ULTRASONIC_DIS.bOutRange)
}

// optional float fDist = 3;
inline bool ULTRASONIC_DIS::has_fdist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ULTRASONIC_DIS::set_has_fdist() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ULTRASONIC_DIS::clear_has_fdist() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ULTRASONIC_DIS::clear_fdist() {
  fdist_ = 0;
  clear_has_fdist();
}
inline float ULTRASONIC_DIS::fdist() const {
  // @@protoc_insertion_point(field_get:atd.drivers.ULTRASONIC_DIS.fDist)
  return fdist_;
}
inline void ULTRASONIC_DIS::set_fdist(float value) {
  set_has_fdist();
  fdist_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.ULTRASONIC_DIS.fDist)
}

// -------------------------------------------------------------------

// Perception_ULTRASONIC

// optional .atd.common.Header header = 1;
inline bool Perception_ULTRASONIC::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Perception_ULTRASONIC::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Perception_ULTRASONIC::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Perception_ULTRASONIC::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Perception_ULTRASONIC::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Perception_ULTRASONIC.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Perception_ULTRASONIC::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Perception_ULTRASONIC.header)
  return header_;
}
inline ::atd::common::Header* Perception_ULTRASONIC::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Perception_ULTRASONIC.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Perception_ULTRASONIC::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Perception_ULTRASONIC.header)
}

// repeated .atd.drivers.ULTRASONIC_DIS gstProbes = 2;
inline int Perception_ULTRASONIC::gstprobes_size() const {
  return gstprobes_.size();
}
inline void Perception_ULTRASONIC::clear_gstprobes() {
  gstprobes_.Clear();
}
inline const ::atd::drivers::ULTRASONIC_DIS& Perception_ULTRASONIC::gstprobes(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_.Get(index);
}
inline ::atd::drivers::ULTRASONIC_DIS* Perception_ULTRASONIC::mutable_gstprobes(int index) {
  // @@protoc_insertion_point(field_mutable:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_.Mutable(index);
}
inline ::atd::drivers::ULTRASONIC_DIS* Perception_ULTRASONIC::add_gstprobes() {
  // @@protoc_insertion_point(field_add:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::drivers::ULTRASONIC_DIS >*
Perception_ULTRASONIC::mutable_gstprobes() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return &gstprobes_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::drivers::ULTRASONIC_DIS >&
Perception_ULTRASONIC::gstprobes() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_;
}

// optional .atd.common.Reserved reservedmsg = 3;
inline bool Perception_ULTRASONIC::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Perception_ULTRASONIC::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Perception_ULTRASONIC::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Perception_ULTRASONIC::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Perception_ULTRASONIC::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Perception_ULTRASONIC.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Perception_ULTRASONIC::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Perception_ULTRASONIC.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Perception_ULTRASONIC::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Perception_ULTRASONIC.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Perception_ULTRASONIC::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Perception_ULTRASONIC.reservedmsg)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto__INCLUDED
