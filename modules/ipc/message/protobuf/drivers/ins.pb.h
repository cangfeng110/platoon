// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/ins.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fins_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fins_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/geometry.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Arrow2D;
class Arrow2DDefaultTypeInternal;
extern Arrow2DDefaultTypeInternal _Arrow2D_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
}  // namespace common
namespace drivers {
class Ins;
class InsDefaultTypeInternal;
extern InsDefaultTypeInternal _Ins_default_instance_;
class InsStat;
class InsStatDefaultTypeInternal;
extern InsStatDefaultTypeInternal _InsStat_default_instance_;
}  // namespace drivers
}  // namespace atd

namespace atd {
namespace drivers {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fins_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fins_2eproto

enum Ins_Type {
  Ins_Type_INVALID = 0,
  Ins_Type_CONVERGING = 1,
  Ins_Type_GOOD = 2
};
bool Ins_Type_IsValid(int value);
const Ins_Type Ins_Type_Type_MIN = Ins_Type_INVALID;
const Ins_Type Ins_Type_Type_MAX = Ins_Type_GOOD;
const int Ins_Type_Type_ARRAYSIZE = Ins_Type_Type_MAX + 1;

// ===================================================================

class InsStat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.drivers.InsStat) */ {
 public:
  InsStat();
  virtual ~InsStat();

  InsStat(const InsStat& from);

  inline InsStat& operator=(const InsStat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const InsStat& default_instance();

  static inline const InsStat* internal_default_instance() {
    return reinterpret_cast<const InsStat*>(
               &_InsStat_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(InsStat* other);

  // implements Message ----------------------------------------------

  inline InsStat* New() const PROTOBUF_FINAL { return New(NULL); }

  InsStat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const InsStat& from);
  void MergeFrom(const InsStat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(InsStat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional uint32 ins_status = 2;
  bool has_ins_status() const;
  void clear_ins_status();
  static const int kInsStatusFieldNumber = 2;
  ::google::protobuf::uint32 ins_status() const;
  void set_ins_status(::google::protobuf::uint32 value);

  // optional uint32 pos_type = 3;
  bool has_pos_type() const;
  void clear_pos_type();
  static const int kPosTypeFieldNumber = 3;
  ::google::protobuf::uint32 pos_type() const;
  void set_pos_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:atd.drivers.InsStat)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_ins_status();
  void clear_has_ins_status();
  void set_has_pos_type();
  void clear_has_pos_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::atd::common::Header* header_;
  ::google::protobuf::uint32 ins_status_;
  ::google::protobuf::uint32 pos_type_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fins_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Ins : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.drivers.Ins) */ {
 public:
  Ins();
  virtual ~Ins();

  Ins(const Ins& from);

  inline Ins& operator=(const Ins& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Ins& default_instance();

  static inline const Ins* internal_default_instance() {
    return reinterpret_cast<const Ins*>(
               &_Ins_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Ins* other);

  // implements Message ----------------------------------------------

  inline Ins* New() const PROTOBUF_FINAL { return New(NULL); }

  Ins* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Ins& from);
  void MergeFrom(const Ins& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Ins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Ins_Type Type;
  static const Type INVALID =
    Ins_Type_INVALID;
  static const Type CONVERGING =
    Ins_Type_CONVERGING;
  static const Type GOOD =
    Ins_Type_GOOD;
  static inline bool Type_IsValid(int value) {
    return Ins_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Ins_Type_Type_MIN;
  static const Type Type_MAX =
    Ins_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Ins_Type_Type_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated float position_covariance = 9 [packed = true];
  int position_covariance_size() const;
  void clear_position_covariance();
  static const int kPositionCovarianceFieldNumber = 9;
  float position_covariance(int index) const;
  void set_position_covariance(int index, float value);
  void add_position_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      position_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_position_covariance();

  // repeated float euler_angles_covariance = 10 [packed = true];
  int euler_angles_covariance_size() const;
  void clear_euler_angles_covariance();
  static const int kEulerAnglesCovarianceFieldNumber = 10;
  float euler_angles_covariance(int index) const;
  void set_euler_angles_covariance(int index, float value);
  void add_euler_angles_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      euler_angles_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_euler_angles_covariance();

  // repeated float linear_velocity_covariance = 11 [packed = true];
  int linear_velocity_covariance_size() const;
  void clear_linear_velocity_covariance();
  static const int kLinearVelocityCovarianceFieldNumber = 11;
  float linear_velocity_covariance(int index) const;
  void set_linear_velocity_covariance(int index, float value);
  void add_linear_velocity_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      linear_velocity_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_linear_velocity_covariance();

  // repeated float angular_velocity_covariance = 12 [packed = true];
  int angular_velocity_covariance_size() const;
  void clear_angular_velocity_covariance();
  static const int kAngularVelocityCovarianceFieldNumber = 12;
  float angular_velocity_covariance(int index) const;
  void set_angular_velocity_covariance(int index, float value);
  void add_angular_velocity_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      angular_velocity_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_angular_velocity_covariance();

  // repeated float linear_acceleration_covariance = 13 [packed = true];
  int linear_acceleration_covariance_size() const;
  void clear_linear_acceleration_covariance();
  static const int kLinearAccelerationCovarianceFieldNumber = 13;
  float linear_acceleration_covariance(int index) const;
  void set_linear_acceleration_covariance(int index, float value);
  void add_linear_acceleration_covariance(float value);
  const ::google::protobuf::RepeatedField< float >&
      linear_acceleration_covariance() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_linear_acceleration_covariance();

  // repeated double stdstd = 21;
  int stdstd_size() const;
  void clear_stdstd();
  static const int kStdstdFieldNumber = 21;
  double stdstd(int index) const;
  void set_stdstd(int index, double value);
  void add_stdstd(double value);
  const ::google::protobuf::RepeatedField< double >&
      stdstd() const;
  ::google::protobuf::RepeatedField< double >*
      mutable_stdstd();

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.PointLLH position = 4;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 4;
  const ::atd::common::PointLLH& position() const;
  ::atd::common::PointLLH* mutable_position();
  ::atd::common::PointLLH* release_position();
  void set_allocated_position(::atd::common::PointLLH* position);

  // optional .atd.common.Point3D euler_angles = 5;
  bool has_euler_angles() const;
  void clear_euler_angles();
  static const int kEulerAnglesFieldNumber = 5;
  const ::atd::common::Point3D& euler_angles() const;
  ::atd::common::Point3D* mutable_euler_angles();
  ::atd::common::Point3D* release_euler_angles();
  void set_allocated_euler_angles(::atd::common::Point3D* euler_angles);

  // optional .atd.common.Point3D linear_velocity = 6;
  bool has_linear_velocity() const;
  void clear_linear_velocity();
  static const int kLinearVelocityFieldNumber = 6;
  const ::atd::common::Point3D& linear_velocity() const;
  ::atd::common::Point3D* mutable_linear_velocity();
  ::atd::common::Point3D* release_linear_velocity();
  void set_allocated_linear_velocity(::atd::common::Point3D* linear_velocity);

  // optional .atd.common.Point3D angular_velocity = 7;
  bool has_angular_velocity() const;
  void clear_angular_velocity();
  static const int kAngularVelocityFieldNumber = 7;
  const ::atd::common::Point3D& angular_velocity() const;
  ::atd::common::Point3D* mutable_angular_velocity();
  ::atd::common::Point3D* release_angular_velocity();
  void set_allocated_angular_velocity(::atd::common::Point3D* angular_velocity);

  // optional .atd.common.Point3D linear_acceleration = 8;
  bool has_linear_acceleration() const;
  void clear_linear_acceleration();
  static const int kLinearAccelerationFieldNumber = 8;
  const ::atd::common::Point3D& linear_acceleration() const;
  ::atd::common::Point3D* mutable_linear_acceleration();
  ::atd::common::Point3D* release_linear_acceleration();
  void set_allocated_linear_acceleration(::atd::common::Point3D* linear_acceleration);

  // optional .atd.common.Reserved reservedmsg = 14;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 14;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional double measurement_time = 2;
  bool has_measurement_time() const;
  void clear_measurement_time();
  static const int kMeasurementTimeFieldNumber = 2;
  double measurement_time() const;
  void set_measurement_time(double value);

  // optional .atd.drivers.Ins.Type type = 3;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::atd::drivers::Ins_Type type() const;
  void set_type(::atd::drivers::Ins_Type value);

  // optional int32 nNavStatus = 15;
  bool has_nnavstatus() const;
  void clear_nnavstatus();
  static const int kNNavStatusFieldNumber = 15;
  ::google::protobuf::int32 nnavstatus() const;
  void set_nnavstatus(::google::protobuf::int32 value);

  // optional int32 bInitStatusPosition = 16;
  bool has_binitstatusposition() const;
  void clear_binitstatusposition();
  static const int kBInitStatusPositionFieldNumber = 16;
  ::google::protobuf::int32 binitstatusposition() const;
  void set_binitstatusposition(::google::protobuf::int32 value);

  // optional int32 bInitStatusVel = 17;
  bool has_binitstatusvel() const;
  void clear_binitstatusvel();
  static const int kBInitStatusVelFieldNumber = 17;
  ::google::protobuf::int32 binitstatusvel() const;
  void set_binitstatusvel(::google::protobuf::int32 value);

  // optional int32 bInitStatusRP = 18;
  bool has_binitstatusrp() const;
  void clear_binitstatusrp();
  static const int kBInitStatusRPFieldNumber = 18;
  ::google::protobuf::int32 binitstatusrp() const;
  void set_binitstatusrp(::google::protobuf::int32 value);

  // optional int32 bInitStatusH = 19;
  bool has_binitstatush() const;
  void clear_binitstatush();
  static const int kBInitStatusHFieldNumber = 19;
  ::google::protobuf::int32 binitstatush() const;
  void set_binitstatush(::google::protobuf::int32 value);

  // optional double dGPSTime = 20;
  bool has_dgpstime() const;
  void clear_dgpstime();
  static const int kDGPSTimeFieldNumber = 20;
  double dgpstime() const;
  void set_dgpstime(double value);

  // optional int32 iGPSPositionMode = 22;
  bool has_igpspositionmode() const;
  void clear_igpspositionmode();
  static const int kIGPSPositionModeFieldNumber = 22;
  ::google::protobuf::int32 igpspositionmode() const;
  void set_igpspositionmode(::google::protobuf::int32 value);

  // optional int32 iGPSVelMode = 23;
  bool has_igpsvelmode() const;
  void clear_igpsvelmode();
  static const int kIGPSVelModeFieldNumber = 23;
  ::google::protobuf::int32 igpsvelmode() const;
  void set_igpsvelmode(::google::protobuf::int32 value);

  // optional int32 iDaulAntennaOrientationMode = 24;
  bool has_idaulantennaorientationmode() const;
  void clear_idaulantennaorientationmode();
  static const int kIDaulAntennaOrientationModeFieldNumber = 24;
  ::google::protobuf::int32 idaulantennaorientationmode() const;
  void set_idaulantennaorientationmode(::google::protobuf::int32 value);

  // optional int32 iSINSMode = 25;
  bool has_isinsmode() const;
  void clear_isinsmode();
  static const int kISINSModeFieldNumber = 25;
  ::google::protobuf::int32 isinsmode() const;
  void set_isinsmode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.drivers.Ins)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_measurement_time();
  void clear_has_measurement_time();
  void set_has_type();
  void clear_has_type();
  void set_has_position();
  void clear_has_position();
  void set_has_euler_angles();
  void clear_has_euler_angles();
  void set_has_linear_velocity();
  void clear_has_linear_velocity();
  void set_has_angular_velocity();
  void clear_has_angular_velocity();
  void set_has_linear_acceleration();
  void clear_has_linear_acceleration();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_nnavstatus();
  void clear_has_nnavstatus();
  void set_has_binitstatusposition();
  void clear_has_binitstatusposition();
  void set_has_binitstatusvel();
  void clear_has_binitstatusvel();
  void set_has_binitstatusrp();
  void clear_has_binitstatusrp();
  void set_has_binitstatush();
  void clear_has_binitstatush();
  void set_has_dgpstime();
  void clear_has_dgpstime();
  void set_has_igpspositionmode();
  void clear_has_igpspositionmode();
  void set_has_igpsvelmode();
  void clear_has_igpsvelmode();
  void set_has_idaulantennaorientationmode();
  void clear_has_idaulantennaorientationmode();
  void set_has_isinsmode();
  void clear_has_isinsmode();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< float > position_covariance_;
  mutable int _position_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > euler_angles_covariance_;
  mutable int _euler_angles_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > linear_velocity_covariance_;
  mutable int _linear_velocity_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > angular_velocity_covariance_;
  mutable int _angular_velocity_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< float > linear_acceleration_covariance_;
  mutable int _linear_acceleration_covariance_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > stdstd_;
  ::atd::common::Header* header_;
  ::atd::common::PointLLH* position_;
  ::atd::common::Point3D* euler_angles_;
  ::atd::common::Point3D* linear_velocity_;
  ::atd::common::Point3D* angular_velocity_;
  ::atd::common::Point3D* linear_acceleration_;
  ::atd::common::Reserved* reservedmsg_;
  double measurement_time_;
  int type_;
  ::google::protobuf::int32 nnavstatus_;
  ::google::protobuf::int32 binitstatusposition_;
  ::google::protobuf::int32 binitstatusvel_;
  ::google::protobuf::int32 binitstatusrp_;
  ::google::protobuf::int32 binitstatush_;
  double dgpstime_;
  ::google::protobuf::int32 igpspositionmode_;
  ::google::protobuf::int32 igpsvelmode_;
  ::google::protobuf::int32 idaulantennaorientationmode_;
  ::google::protobuf::int32 isinsmode_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fins_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// InsStat

// optional .atd.common.Header header = 1;
inline bool InsStat::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsStat::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsStat::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsStat::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& InsStat::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.InsStat.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* InsStat::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.InsStat.header)
  return header_;
}
inline ::atd::common::Header* InsStat::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.InsStat.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void InsStat::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.InsStat.header)
}

// optional uint32 ins_status = 2;
inline bool InsStat::has_ins_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsStat::set_has_ins_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsStat::clear_has_ins_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsStat::clear_ins_status() {
  ins_status_ = 0u;
  clear_has_ins_status();
}
inline ::google::protobuf::uint32 InsStat::ins_status() const {
  // @@protoc_insertion_point(field_get:atd.drivers.InsStat.ins_status)
  return ins_status_;
}
inline void InsStat::set_ins_status(::google::protobuf::uint32 value) {
  set_has_ins_status();
  ins_status_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.InsStat.ins_status)
}

// optional uint32 pos_type = 3;
inline bool InsStat::has_pos_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InsStat::set_has_pos_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InsStat::clear_has_pos_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InsStat::clear_pos_type() {
  pos_type_ = 0u;
  clear_has_pos_type();
}
inline ::google::protobuf::uint32 InsStat::pos_type() const {
  // @@protoc_insertion_point(field_get:atd.drivers.InsStat.pos_type)
  return pos_type_;
}
inline void InsStat::set_pos_type(::google::protobuf::uint32 value) {
  set_has_pos_type();
  pos_type_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.InsStat.pos_type)
}

// -------------------------------------------------------------------

// Ins

// optional .atd.common.Header header = 1;
inline bool Ins::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ins::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ins::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ins::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& Ins::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* Ins::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Ins.header)
  return header_;
}
inline ::atd::common::Header* Ins::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Ins.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void Ins::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Ins.header)
}

// optional double measurement_time = 2;
inline bool Ins::has_measurement_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Ins::set_has_measurement_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Ins::clear_has_measurement_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Ins::clear_measurement_time() {
  measurement_time_ = 0;
  clear_has_measurement_time();
}
inline double Ins::measurement_time() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.measurement_time)
  return measurement_time_;
}
inline void Ins::set_measurement_time(double value) {
  set_has_measurement_time();
  measurement_time_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.measurement_time)
}

// optional .atd.drivers.Ins.Type type = 3;
inline bool Ins::has_type() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Ins::set_has_type() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Ins::clear_has_type() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Ins::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::atd::drivers::Ins_Type Ins::type() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.type)
  return static_cast< ::atd::drivers::Ins_Type >(type_);
}
inline void Ins::set_type(::atd::drivers::Ins_Type value) {
  assert(::atd::drivers::Ins_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.type)
}

// optional .atd.common.PointLLH position = 4;
inline bool Ins::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ins::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ins::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ins::clear_position() {
  if (position_ != NULL) position_->::atd::common::PointLLH::Clear();
  clear_has_position();
}
inline const ::atd::common::PointLLH& Ins::position() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.position)
  return position_ != NULL ? *position_
                         : *::atd::common::PointLLH::internal_default_instance();
}
inline ::atd::common::PointLLH* Ins::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::atd::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Ins.position)
  return position_;
}
inline ::atd::common::PointLLH* Ins::release_position() {
  // @@protoc_insertion_point(field_release:atd.drivers.Ins.position)
  clear_has_position();
  ::atd::common::PointLLH* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Ins::set_allocated_position(::atd::common::PointLLH* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Ins.position)
}

// optional .atd.common.Point3D euler_angles = 5;
inline bool Ins::has_euler_angles() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ins::set_has_euler_angles() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ins::clear_has_euler_angles() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ins::clear_euler_angles() {
  if (euler_angles_ != NULL) euler_angles_->::atd::common::Point3D::Clear();
  clear_has_euler_angles();
}
inline const ::atd::common::Point3D& Ins::euler_angles() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.euler_angles)
  return euler_angles_ != NULL ? *euler_angles_
                         : *::atd::common::Point3D::internal_default_instance();
}
inline ::atd::common::Point3D* Ins::mutable_euler_angles() {
  set_has_euler_angles();
  if (euler_angles_ == NULL) {
    euler_angles_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Ins.euler_angles)
  return euler_angles_;
}
inline ::atd::common::Point3D* Ins::release_euler_angles() {
  // @@protoc_insertion_point(field_release:atd.drivers.Ins.euler_angles)
  clear_has_euler_angles();
  ::atd::common::Point3D* temp = euler_angles_;
  euler_angles_ = NULL;
  return temp;
}
inline void Ins::set_allocated_euler_angles(::atd::common::Point3D* euler_angles) {
  delete euler_angles_;
  euler_angles_ = euler_angles;
  if (euler_angles) {
    set_has_euler_angles();
  } else {
    clear_has_euler_angles();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Ins.euler_angles)
}

// optional .atd.common.Point3D linear_velocity = 6;
inline bool Ins::has_linear_velocity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ins::set_has_linear_velocity() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ins::clear_has_linear_velocity() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ins::clear_linear_velocity() {
  if (linear_velocity_ != NULL) linear_velocity_->::atd::common::Point3D::Clear();
  clear_has_linear_velocity();
}
inline const ::atd::common::Point3D& Ins::linear_velocity() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.linear_velocity)
  return linear_velocity_ != NULL ? *linear_velocity_
                         : *::atd::common::Point3D::internal_default_instance();
}
inline ::atd::common::Point3D* Ins::mutable_linear_velocity() {
  set_has_linear_velocity();
  if (linear_velocity_ == NULL) {
    linear_velocity_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Ins.linear_velocity)
  return linear_velocity_;
}
inline ::atd::common::Point3D* Ins::release_linear_velocity() {
  // @@protoc_insertion_point(field_release:atd.drivers.Ins.linear_velocity)
  clear_has_linear_velocity();
  ::atd::common::Point3D* temp = linear_velocity_;
  linear_velocity_ = NULL;
  return temp;
}
inline void Ins::set_allocated_linear_velocity(::atd::common::Point3D* linear_velocity) {
  delete linear_velocity_;
  linear_velocity_ = linear_velocity;
  if (linear_velocity) {
    set_has_linear_velocity();
  } else {
    clear_has_linear_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Ins.linear_velocity)
}

// optional .atd.common.Point3D angular_velocity = 7;
inline bool Ins::has_angular_velocity() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ins::set_has_angular_velocity() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ins::clear_has_angular_velocity() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ins::clear_angular_velocity() {
  if (angular_velocity_ != NULL) angular_velocity_->::atd::common::Point3D::Clear();
  clear_has_angular_velocity();
}
inline const ::atd::common::Point3D& Ins::angular_velocity() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.angular_velocity)
  return angular_velocity_ != NULL ? *angular_velocity_
                         : *::atd::common::Point3D::internal_default_instance();
}
inline ::atd::common::Point3D* Ins::mutable_angular_velocity() {
  set_has_angular_velocity();
  if (angular_velocity_ == NULL) {
    angular_velocity_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Ins.angular_velocity)
  return angular_velocity_;
}
inline ::atd::common::Point3D* Ins::release_angular_velocity() {
  // @@protoc_insertion_point(field_release:atd.drivers.Ins.angular_velocity)
  clear_has_angular_velocity();
  ::atd::common::Point3D* temp = angular_velocity_;
  angular_velocity_ = NULL;
  return temp;
}
inline void Ins::set_allocated_angular_velocity(::atd::common::Point3D* angular_velocity) {
  delete angular_velocity_;
  angular_velocity_ = angular_velocity;
  if (angular_velocity) {
    set_has_angular_velocity();
  } else {
    clear_has_angular_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Ins.angular_velocity)
}

// optional .atd.common.Point3D linear_acceleration = 8;
inline bool Ins::has_linear_acceleration() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Ins::set_has_linear_acceleration() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Ins::clear_has_linear_acceleration() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Ins::clear_linear_acceleration() {
  if (linear_acceleration_ != NULL) linear_acceleration_->::atd::common::Point3D::Clear();
  clear_has_linear_acceleration();
}
inline const ::atd::common::Point3D& Ins::linear_acceleration() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.linear_acceleration)
  return linear_acceleration_ != NULL ? *linear_acceleration_
                         : *::atd::common::Point3D::internal_default_instance();
}
inline ::atd::common::Point3D* Ins::mutable_linear_acceleration() {
  set_has_linear_acceleration();
  if (linear_acceleration_ == NULL) {
    linear_acceleration_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Ins.linear_acceleration)
  return linear_acceleration_;
}
inline ::atd::common::Point3D* Ins::release_linear_acceleration() {
  // @@protoc_insertion_point(field_release:atd.drivers.Ins.linear_acceleration)
  clear_has_linear_acceleration();
  ::atd::common::Point3D* temp = linear_acceleration_;
  linear_acceleration_ = NULL;
  return temp;
}
inline void Ins::set_allocated_linear_acceleration(::atd::common::Point3D* linear_acceleration) {
  delete linear_acceleration_;
  linear_acceleration_ = linear_acceleration;
  if (linear_acceleration) {
    set_has_linear_acceleration();
  } else {
    clear_has_linear_acceleration();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Ins.linear_acceleration)
}

// repeated float position_covariance = 9 [packed = true];
inline int Ins::position_covariance_size() const {
  return position_covariance_.size();
}
inline void Ins::clear_position_covariance() {
  position_covariance_.Clear();
}
inline float Ins::position_covariance(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.position_covariance)
  return position_covariance_.Get(index);
}
inline void Ins::set_position_covariance(int index, float value) {
  position_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.position_covariance)
}
inline void Ins::add_position_covariance(float value) {
  position_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Ins.position_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::position_covariance() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Ins.position_covariance)
  return position_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_position_covariance() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Ins.position_covariance)
  return &position_covariance_;
}

// repeated float euler_angles_covariance = 10 [packed = true];
inline int Ins::euler_angles_covariance_size() const {
  return euler_angles_covariance_.size();
}
inline void Ins::clear_euler_angles_covariance() {
  euler_angles_covariance_.Clear();
}
inline float Ins::euler_angles_covariance(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.euler_angles_covariance)
  return euler_angles_covariance_.Get(index);
}
inline void Ins::set_euler_angles_covariance(int index, float value) {
  euler_angles_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.euler_angles_covariance)
}
inline void Ins::add_euler_angles_covariance(float value) {
  euler_angles_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Ins.euler_angles_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::euler_angles_covariance() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Ins.euler_angles_covariance)
  return euler_angles_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_euler_angles_covariance() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Ins.euler_angles_covariance)
  return &euler_angles_covariance_;
}

// repeated float linear_velocity_covariance = 11 [packed = true];
inline int Ins::linear_velocity_covariance_size() const {
  return linear_velocity_covariance_.size();
}
inline void Ins::clear_linear_velocity_covariance() {
  linear_velocity_covariance_.Clear();
}
inline float Ins::linear_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.linear_velocity_covariance)
  return linear_velocity_covariance_.Get(index);
}
inline void Ins::set_linear_velocity_covariance(int index, float value) {
  linear_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.linear_velocity_covariance)
}
inline void Ins::add_linear_velocity_covariance(float value) {
  linear_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Ins.linear_velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::linear_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Ins.linear_velocity_covariance)
  return linear_velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_linear_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Ins.linear_velocity_covariance)
  return &linear_velocity_covariance_;
}

// repeated float angular_velocity_covariance = 12 [packed = true];
inline int Ins::angular_velocity_covariance_size() const {
  return angular_velocity_covariance_.size();
}
inline void Ins::clear_angular_velocity_covariance() {
  angular_velocity_covariance_.Clear();
}
inline float Ins::angular_velocity_covariance(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.angular_velocity_covariance)
  return angular_velocity_covariance_.Get(index);
}
inline void Ins::set_angular_velocity_covariance(int index, float value) {
  angular_velocity_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.angular_velocity_covariance)
}
inline void Ins::add_angular_velocity_covariance(float value) {
  angular_velocity_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Ins.angular_velocity_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::angular_velocity_covariance() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Ins.angular_velocity_covariance)
  return angular_velocity_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_angular_velocity_covariance() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Ins.angular_velocity_covariance)
  return &angular_velocity_covariance_;
}

// repeated float linear_acceleration_covariance = 13 [packed = true];
inline int Ins::linear_acceleration_covariance_size() const {
  return linear_acceleration_covariance_.size();
}
inline void Ins::clear_linear_acceleration_covariance() {
  linear_acceleration_covariance_.Clear();
}
inline float Ins::linear_acceleration_covariance(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.linear_acceleration_covariance)
  return linear_acceleration_covariance_.Get(index);
}
inline void Ins::set_linear_acceleration_covariance(int index, float value) {
  linear_acceleration_covariance_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.linear_acceleration_covariance)
}
inline void Ins::add_linear_acceleration_covariance(float value) {
  linear_acceleration_covariance_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Ins.linear_acceleration_covariance)
}
inline const ::google::protobuf::RepeatedField< float >&
Ins::linear_acceleration_covariance() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Ins.linear_acceleration_covariance)
  return linear_acceleration_covariance_;
}
inline ::google::protobuf::RepeatedField< float >*
Ins::mutable_linear_acceleration_covariance() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Ins.linear_acceleration_covariance)
  return &linear_acceleration_covariance_;
}

// optional .atd.common.Reserved reservedmsg = 14;
inline bool Ins::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Ins::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Ins::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Ins::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& Ins::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* Ins::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Ins.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* Ins::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Ins.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void Ins::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Ins.reservedmsg)
}

// optional int32 nNavStatus = 15;
inline bool Ins::has_nnavstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Ins::set_has_nnavstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Ins::clear_has_nnavstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Ins::clear_nnavstatus() {
  nnavstatus_ = 0;
  clear_has_nnavstatus();
}
inline ::google::protobuf::int32 Ins::nnavstatus() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.nNavStatus)
  return nnavstatus_;
}
inline void Ins::set_nnavstatus(::google::protobuf::int32 value) {
  set_has_nnavstatus();
  nnavstatus_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.nNavStatus)
}

// optional int32 bInitStatusPosition = 16;
inline bool Ins::has_binitstatusposition() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Ins::set_has_binitstatusposition() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Ins::clear_has_binitstatusposition() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Ins::clear_binitstatusposition() {
  binitstatusposition_ = 0;
  clear_has_binitstatusposition();
}
inline ::google::protobuf::int32 Ins::binitstatusposition() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.bInitStatusPosition)
  return binitstatusposition_;
}
inline void Ins::set_binitstatusposition(::google::protobuf::int32 value) {
  set_has_binitstatusposition();
  binitstatusposition_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.bInitStatusPosition)
}

// optional int32 bInitStatusVel = 17;
inline bool Ins::has_binitstatusvel() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Ins::set_has_binitstatusvel() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Ins::clear_has_binitstatusvel() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Ins::clear_binitstatusvel() {
  binitstatusvel_ = 0;
  clear_has_binitstatusvel();
}
inline ::google::protobuf::int32 Ins::binitstatusvel() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.bInitStatusVel)
  return binitstatusvel_;
}
inline void Ins::set_binitstatusvel(::google::protobuf::int32 value) {
  set_has_binitstatusvel();
  binitstatusvel_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.bInitStatusVel)
}

// optional int32 bInitStatusRP = 18;
inline bool Ins::has_binitstatusrp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Ins::set_has_binitstatusrp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Ins::clear_has_binitstatusrp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Ins::clear_binitstatusrp() {
  binitstatusrp_ = 0;
  clear_has_binitstatusrp();
}
inline ::google::protobuf::int32 Ins::binitstatusrp() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.bInitStatusRP)
  return binitstatusrp_;
}
inline void Ins::set_binitstatusrp(::google::protobuf::int32 value) {
  set_has_binitstatusrp();
  binitstatusrp_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.bInitStatusRP)
}

// optional int32 bInitStatusH = 19;
inline bool Ins::has_binitstatush() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Ins::set_has_binitstatush() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Ins::clear_has_binitstatush() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Ins::clear_binitstatush() {
  binitstatush_ = 0;
  clear_has_binitstatush();
}
inline ::google::protobuf::int32 Ins::binitstatush() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.bInitStatusH)
  return binitstatush_;
}
inline void Ins::set_binitstatush(::google::protobuf::int32 value) {
  set_has_binitstatush();
  binitstatush_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.bInitStatusH)
}

// optional double dGPSTime = 20;
inline bool Ins::has_dgpstime() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void Ins::set_has_dgpstime() {
  _has_bits_[0] |= 0x00004000u;
}
inline void Ins::clear_has_dgpstime() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void Ins::clear_dgpstime() {
  dgpstime_ = 0;
  clear_has_dgpstime();
}
inline double Ins::dgpstime() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.dGPSTime)
  return dgpstime_;
}
inline void Ins::set_dgpstime(double value) {
  set_has_dgpstime();
  dgpstime_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.dGPSTime)
}

// repeated double stdstd = 21;
inline int Ins::stdstd_size() const {
  return stdstd_.size();
}
inline void Ins::clear_stdstd() {
  stdstd_.Clear();
}
inline double Ins::stdstd(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.stdstd)
  return stdstd_.Get(index);
}
inline void Ins::set_stdstd(int index, double value) {
  stdstd_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.stdstd)
}
inline void Ins::add_stdstd(double value) {
  stdstd_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Ins.stdstd)
}
inline const ::google::protobuf::RepeatedField< double >&
Ins::stdstd() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Ins.stdstd)
  return stdstd_;
}
inline ::google::protobuf::RepeatedField< double >*
Ins::mutable_stdstd() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Ins.stdstd)
  return &stdstd_;
}

// optional int32 iGPSPositionMode = 22;
inline bool Ins::has_igpspositionmode() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void Ins::set_has_igpspositionmode() {
  _has_bits_[0] |= 0x00008000u;
}
inline void Ins::clear_has_igpspositionmode() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void Ins::clear_igpspositionmode() {
  igpspositionmode_ = 0;
  clear_has_igpspositionmode();
}
inline ::google::protobuf::int32 Ins::igpspositionmode() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.iGPSPositionMode)
  return igpspositionmode_;
}
inline void Ins::set_igpspositionmode(::google::protobuf::int32 value) {
  set_has_igpspositionmode();
  igpspositionmode_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.iGPSPositionMode)
}

// optional int32 iGPSVelMode = 23;
inline bool Ins::has_igpsvelmode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void Ins::set_has_igpsvelmode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void Ins::clear_has_igpsvelmode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void Ins::clear_igpsvelmode() {
  igpsvelmode_ = 0;
  clear_has_igpsvelmode();
}
inline ::google::protobuf::int32 Ins::igpsvelmode() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.iGPSVelMode)
  return igpsvelmode_;
}
inline void Ins::set_igpsvelmode(::google::protobuf::int32 value) {
  set_has_igpsvelmode();
  igpsvelmode_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.iGPSVelMode)
}

// optional int32 iDaulAntennaOrientationMode = 24;
inline bool Ins::has_idaulantennaorientationmode() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void Ins::set_has_idaulantennaorientationmode() {
  _has_bits_[0] |= 0x00020000u;
}
inline void Ins::clear_has_idaulantennaorientationmode() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void Ins::clear_idaulantennaorientationmode() {
  idaulantennaorientationmode_ = 0;
  clear_has_idaulantennaorientationmode();
}
inline ::google::protobuf::int32 Ins::idaulantennaorientationmode() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.iDaulAntennaOrientationMode)
  return idaulantennaorientationmode_;
}
inline void Ins::set_idaulantennaorientationmode(::google::protobuf::int32 value) {
  set_has_idaulantennaorientationmode();
  idaulantennaorientationmode_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.iDaulAntennaOrientationMode)
}

// optional int32 iSINSMode = 25;
inline bool Ins::has_isinsmode() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void Ins::set_has_isinsmode() {
  _has_bits_[0] |= 0x00040000u;
}
inline void Ins::clear_has_isinsmode() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void Ins::clear_isinsmode() {
  isinsmode_ = 0;
  clear_has_isinsmode();
}
inline ::google::protobuf::int32 Ins::isinsmode() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Ins.iSINSMode)
  return isinsmode_;
}
inline void Ins::set_isinsmode(::google::protobuf::int32 value) {
  set_has_isinsmode();
  isinsmode_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Ins.iSINSMode)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace drivers
}  // namespace atd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::atd::drivers::Ins_Type> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fins_2eproto__INCLUDED
