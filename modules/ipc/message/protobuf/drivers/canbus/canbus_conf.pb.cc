// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/canbus/canbus_conf.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/drivers/canbus/canbus_conf.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace canbus {
class CanbusConfDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CanbusConf> {
} _CanbusConf_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcanbus_5fconf_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _CanbusConf_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::canbus::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fvehicle_5fparameter_2eproto::InitDefaults();
  _CanbusConf_default_instance_.DefaultConstruct();
  _CanbusConf_default_instance_.get_mutable()->vehicle_parameter_ = const_cast< ::atd::canbus::VehicleParameter*>(
      ::atd::canbus::VehicleParameter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::canbus::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fvehicle_5fparameter_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcanbus_5fconf_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CanbusConf::kVehicleParameterFieldNumber;
const int CanbusConf::kEnableDebugModeFieldNumber;
const int CanbusConf::kEnableReceiverLogFieldNumber;
const int CanbusConf::kEnableSenderLogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CanbusConf::CanbusConf()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcanbus_5fconf_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.canbus.CanbusConf)
}
CanbusConf::CanbusConf(const CanbusConf& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_parameter()) {
    vehicle_parameter_ = new ::atd::canbus::VehicleParameter(*from.vehicle_parameter_);
  } else {
    vehicle_parameter_ = NULL;
  }
  ::memcpy(&enable_debug_mode_, &from.enable_debug_mode_,
    reinterpret_cast<char*>(&enable_sender_log_) -
    reinterpret_cast<char*>(&enable_debug_mode_) + sizeof(enable_sender_log_));
  // @@protoc_insertion_point(copy_constructor:atd.canbus.CanbusConf)
}

void CanbusConf::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&vehicle_parameter_, 0, reinterpret_cast<char*>(&enable_sender_log_) -
    reinterpret_cast<char*>(&vehicle_parameter_) + sizeof(enable_sender_log_));
}

CanbusConf::~CanbusConf() {
  // @@protoc_insertion_point(destructor:atd.canbus.CanbusConf)
  SharedDtor();
}

void CanbusConf::SharedDtor() {
  if (this != internal_default_instance()) {
    delete vehicle_parameter_;
  }
}

void CanbusConf::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CanbusConf& CanbusConf::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcanbus_5fconf_2eproto::InitDefaults();
  return *internal_default_instance();
}

CanbusConf* CanbusConf::New(::google::protobuf::Arena* arena) const {
  CanbusConf* n = new CanbusConf;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CanbusConf::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.canbus.CanbusConf)
  if (has_vehicle_parameter()) {
    GOOGLE_DCHECK(vehicle_parameter_ != NULL);
    vehicle_parameter_->::atd::canbus::VehicleParameter::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&enable_debug_mode_, 0, reinterpret_cast<char*>(&enable_sender_log_) -
      reinterpret_cast<char*>(&enable_debug_mode_) + sizeof(enable_sender_log_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CanbusConf::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.canbus.CanbusConf)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.canbus.VehicleParameter vehicle_parameter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_debug_mode = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_enable_debug_mode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_debug_mode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_receiver_log = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_enable_receiver_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_receiver_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool enable_sender_log = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_enable_sender_log();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_sender_log_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.canbus.CanbusConf)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.canbus.CanbusConf)
  return false;
#undef DO_
}

void CanbusConf::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.canbus.CanbusConf)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.canbus.VehicleParameter vehicle_parameter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->vehicle_parameter_, output);
  }

  // optional bool enable_debug_mode = 3 [default = false];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable_debug_mode(), output);
  }

  // optional bool enable_receiver_log = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->enable_receiver_log(), output);
  }

  // optional bool enable_sender_log = 5 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->enable_sender_log(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.canbus.CanbusConf)
}

size_t CanbusConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.canbus.CanbusConf)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional .atd.canbus.VehicleParameter vehicle_parameter = 1;
    if (has_vehicle_parameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_parameter_);
    }

    // optional bool enable_debug_mode = 3 [default = false];
    if (has_enable_debug_mode()) {
      total_size += 1 + 1;
    }

    // optional bool enable_receiver_log = 4 [default = false];
    if (has_enable_receiver_log()) {
      total_size += 1 + 1;
    }

    // optional bool enable_sender_log = 5 [default = false];
    if (has_enable_sender_log()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CanbusConf::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CanbusConf*>(&from));
}

void CanbusConf::MergeFrom(const CanbusConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.canbus.CanbusConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vehicle_parameter()->::atd::canbus::VehicleParameter::MergeFrom(from.vehicle_parameter());
    }
    if (cached_has_bits & 0x00000002u) {
      enable_debug_mode_ = from.enable_debug_mode_;
    }
    if (cached_has_bits & 0x00000004u) {
      enable_receiver_log_ = from.enable_receiver_log_;
    }
    if (cached_has_bits & 0x00000008u) {
      enable_sender_log_ = from.enable_sender_log_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CanbusConf::CopyFrom(const CanbusConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.canbus.CanbusConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CanbusConf::IsInitialized() const {
  return true;
}

void CanbusConf::Swap(CanbusConf* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CanbusConf::InternalSwap(CanbusConf* other) {
  std::swap(vehicle_parameter_, other->vehicle_parameter_);
  std::swap(enable_debug_mode_, other->enable_debug_mode_);
  std::swap(enable_receiver_log_, other->enable_receiver_log_);
  std::swap(enable_sender_log_, other->enable_sender_log_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CanbusConf::GetTypeName() const {
  return "atd.canbus.CanbusConf";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CanbusConf

// optional .atd.canbus.VehicleParameter vehicle_parameter = 1;
bool CanbusConf::has_vehicle_parameter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CanbusConf::set_has_vehicle_parameter() {
  _has_bits_[0] |= 0x00000001u;
}
void CanbusConf::clear_has_vehicle_parameter() {
  _has_bits_[0] &= ~0x00000001u;
}
void CanbusConf::clear_vehicle_parameter() {
  if (vehicle_parameter_ != NULL) vehicle_parameter_->::atd::canbus::VehicleParameter::Clear();
  clear_has_vehicle_parameter();
}
const ::atd::canbus::VehicleParameter& CanbusConf::vehicle_parameter() const {
  // @@protoc_insertion_point(field_get:atd.canbus.CanbusConf.vehicle_parameter)
  return vehicle_parameter_ != NULL ? *vehicle_parameter_
                         : *::atd::canbus::VehicleParameter::internal_default_instance();
}
::atd::canbus::VehicleParameter* CanbusConf::mutable_vehicle_parameter() {
  set_has_vehicle_parameter();
  if (vehicle_parameter_ == NULL) {
    vehicle_parameter_ = new ::atd::canbus::VehicleParameter;
  }
  // @@protoc_insertion_point(field_mutable:atd.canbus.CanbusConf.vehicle_parameter)
  return vehicle_parameter_;
}
::atd::canbus::VehicleParameter* CanbusConf::release_vehicle_parameter() {
  // @@protoc_insertion_point(field_release:atd.canbus.CanbusConf.vehicle_parameter)
  clear_has_vehicle_parameter();
  ::atd::canbus::VehicleParameter* temp = vehicle_parameter_;
  vehicle_parameter_ = NULL;
  return temp;
}
void CanbusConf::set_allocated_vehicle_parameter(::atd::canbus::VehicleParameter* vehicle_parameter) {
  delete vehicle_parameter_;
  vehicle_parameter_ = vehicle_parameter;
  if (vehicle_parameter) {
    set_has_vehicle_parameter();
  } else {
    clear_has_vehicle_parameter();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.canbus.CanbusConf.vehicle_parameter)
}

// optional bool enable_debug_mode = 3 [default = false];
bool CanbusConf::has_enable_debug_mode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CanbusConf::set_has_enable_debug_mode() {
  _has_bits_[0] |= 0x00000002u;
}
void CanbusConf::clear_has_enable_debug_mode() {
  _has_bits_[0] &= ~0x00000002u;
}
void CanbusConf::clear_enable_debug_mode() {
  enable_debug_mode_ = false;
  clear_has_enable_debug_mode();
}
bool CanbusConf::enable_debug_mode() const {
  // @@protoc_insertion_point(field_get:atd.canbus.CanbusConf.enable_debug_mode)
  return enable_debug_mode_;
}
void CanbusConf::set_enable_debug_mode(bool value) {
  set_has_enable_debug_mode();
  enable_debug_mode_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.CanbusConf.enable_debug_mode)
}

// optional bool enable_receiver_log = 4 [default = false];
bool CanbusConf::has_enable_receiver_log() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CanbusConf::set_has_enable_receiver_log() {
  _has_bits_[0] |= 0x00000004u;
}
void CanbusConf::clear_has_enable_receiver_log() {
  _has_bits_[0] &= ~0x00000004u;
}
void CanbusConf::clear_enable_receiver_log() {
  enable_receiver_log_ = false;
  clear_has_enable_receiver_log();
}
bool CanbusConf::enable_receiver_log() const {
  // @@protoc_insertion_point(field_get:atd.canbus.CanbusConf.enable_receiver_log)
  return enable_receiver_log_;
}
void CanbusConf::set_enable_receiver_log(bool value) {
  set_has_enable_receiver_log();
  enable_receiver_log_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.CanbusConf.enable_receiver_log)
}

// optional bool enable_sender_log = 5 [default = false];
bool CanbusConf::has_enable_sender_log() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CanbusConf::set_has_enable_sender_log() {
  _has_bits_[0] |= 0x00000008u;
}
void CanbusConf::clear_has_enable_sender_log() {
  _has_bits_[0] &= ~0x00000008u;
}
void CanbusConf::clear_enable_sender_log() {
  enable_sender_log_ = false;
  clear_has_enable_sender_log();
}
bool CanbusConf::enable_sender_log() const {
  // @@protoc_insertion_point(field_get:atd.canbus.CanbusConf.enable_sender_log)
  return enable_sender_log_;
}
void CanbusConf::set_enable_sender_log(bool value) {
  set_has_enable_sender_log();
  enable_sender_log_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.CanbusConf.enable_sender_log)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace atd

// @@protoc_insertion_point(global_scope)
