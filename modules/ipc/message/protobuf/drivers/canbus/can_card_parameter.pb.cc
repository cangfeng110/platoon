// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/canbus/can_card_parameter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/drivers/canbus/can_card_parameter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace drivers {
namespace canbus {
class CANCardParameterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CANCardParameter> {
} _CANCardParameter_default_instance_;
class MiniCanCardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MiniCanCard> {
} _MiniCanCard_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[2];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, brand_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, channel_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, minican_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, address_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, portnum_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, protocol_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CANCardParameter, parameters_),
  4,
  5,
  6,
  3,
  0,
  7,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCanCard, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCanCard, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCanCard, baurate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCanCard, ncancardid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MiniCanCard, ncardchannelid_),
  0,
  1,
  2,
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, 13, sizeof(CANCardParameter)},
  { 21, 29, sizeof(MiniCanCard)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_CANCardParameter_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MiniCanCard_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "modules/ipc/message/protobuf/drivers/canbus/can_card_parameter.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 2);
}

}  // namespace

void TableStruct::Shutdown() {
  _CANCardParameter_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _MiniCanCard_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _CANCardParameter_default_instance_.DefaultConstruct();
  _MiniCanCard_default_instance_.DefaultConstruct();
  _CANCardParameter_default_instance_.get_mutable()->minican_ = const_cast< ::atd::drivers::canbus::MiniCanCard*>(
      ::atd::drivers::canbus::MiniCanCard::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\nDmodules/ipc/message/protobuf/drivers/c"
      "anbus/can_card_parameter.proto\022\022atd.driv"
      "ers.canbus\"\314\004\n\020CANCardParameter\022@\n\005brand"
      "\030\001 \001(\01621.atd.drivers.canbus.CANCardParam"
      "eter.CANCardBrand\022>\n\004type\030\002 \001(\01620.atd.dr"
      "ivers.canbus.CANCardParameter.CANCardTyp"
      "e\022E\n\nchannel_id\030\003 \001(\01621.atd.drivers.canb"
      "us.CANCardParameter.CANChannelId\0220\n\007mini"
      "Can\030\004 \001(\0132\037.atd.drivers.canbus.MiniCanCa"
      "rd\022\017\n\007address\030\005 \001(\014\022\017\n\007portNum\030\006 \001(\005\022\020\n\010"
      "protocol\030\007 \001(\t\022\022\n\nparameters\030\010 \001(\t\"g\n\014CA"
      "NCardBrand\022\014\n\010FAKE_CAN\020\000\022\013\n\007ESD_CAN\020\001\022\022\n"
      "\016SOCKET_CAN_RAW\020\002\022\016\n\nCANNET_CAN\020\003\022\014\n\010LIK"
      "E_CAN\020\004\022\n\n\006DW_CAN\020\005\")\n\013CANCardType\022\014\n\010PC"
      "I_CARD\020\000\022\014\n\010USB_CARD\020\001\"a\n\014CANChannelId\022\023"
      "\n\017CHANNEL_ID_ZERO\020\000\022\022\n\016CHANNEL_ID_ONE\020\001\022"
      "\022\n\016CHANNEL_ID_TWO\020\002\022\024\n\020CHANNEL_ID_THREE\020"
      "\003\"\244\002\n\013MiniCanCard\022C\n\007baurate\030\001 \001(\0162(.atd"
      ".drivers.canbus.MiniCanCard.BaudRate:\010b0"
      "014_1M\022\022\n\nnCanCardID\030\002 \002(\r\022\026\n\016nCardChann"
      "elID\030\003 \002(\r\"\243\001\n\010BaudRate\022\014\n\010b0014_1M\020\000\022\016\n"
      "\nb0016_800K\020\001\022\016\n\nb001C_500K\020\002\022\016\n\nb011C_2"
      "50K\020\003\022\016\n\nb031C_125K\020\004\022\016\n\nb041C_100K\020\005\022\r\n"
      "\tb091C_50K\020\006\022\r\n\tb181C_20K\020\007\022\r\n\tb311C_10K"
      "\020\010\022\014\n\010bBFFF_5K\020\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 976);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "modules/ipc/message/protobuf/drivers/canbus/can_card_parameter.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto

const ::google::protobuf::EnumDescriptor* CANCardParameter_CANCardBrand_descriptor() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_enum_descriptors[0];
}
bool CANCardParameter_CANCardBrand_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CANCardParameter_CANCardBrand CANCardParameter::FAKE_CAN;
const CANCardParameter_CANCardBrand CANCardParameter::ESD_CAN;
const CANCardParameter_CANCardBrand CANCardParameter::SOCKET_CAN_RAW;
const CANCardParameter_CANCardBrand CANCardParameter::CANNET_CAN;
const CANCardParameter_CANCardBrand CANCardParameter::LIKE_CAN;
const CANCardParameter_CANCardBrand CANCardParameter::DW_CAN;
const CANCardParameter_CANCardBrand CANCardParameter::CANCardBrand_MIN;
const CANCardParameter_CANCardBrand CANCardParameter::CANCardBrand_MAX;
const int CANCardParameter::CANCardBrand_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CANCardParameter_CANCardType_descriptor() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_enum_descriptors[1];
}
bool CANCardParameter_CANCardType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CANCardParameter_CANCardType CANCardParameter::PCI_CARD;
const CANCardParameter_CANCardType CANCardParameter::USB_CARD;
const CANCardParameter_CANCardType CANCardParameter::CANCardType_MIN;
const CANCardParameter_CANCardType CANCardParameter::CANCardType_MAX;
const int CANCardParameter::CANCardType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* CANCardParameter_CANChannelId_descriptor() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_enum_descriptors[2];
}
bool CANCardParameter_CANChannelId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_ZERO;
const CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_ONE;
const CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_TWO;
const CANCardParameter_CANChannelId CANCardParameter::CHANNEL_ID_THREE;
const CANCardParameter_CANChannelId CANCardParameter::CANChannelId_MIN;
const CANCardParameter_CANChannelId CANCardParameter::CANChannelId_MAX;
const int CANCardParameter::CANChannelId_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
const ::google::protobuf::EnumDescriptor* MiniCanCard_BaudRate_descriptor() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_enum_descriptors[3];
}
bool MiniCanCard_BaudRate_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MiniCanCard_BaudRate MiniCanCard::b0014_1M;
const MiniCanCard_BaudRate MiniCanCard::b0016_800K;
const MiniCanCard_BaudRate MiniCanCard::b001C_500K;
const MiniCanCard_BaudRate MiniCanCard::b011C_250K;
const MiniCanCard_BaudRate MiniCanCard::b031C_125K;
const MiniCanCard_BaudRate MiniCanCard::b041C_100K;
const MiniCanCard_BaudRate MiniCanCard::b091C_50K;
const MiniCanCard_BaudRate MiniCanCard::b181C_20K;
const MiniCanCard_BaudRate MiniCanCard::b311C_10K;
const MiniCanCard_BaudRate MiniCanCard::bBFFF_5K;
const MiniCanCard_BaudRate MiniCanCard::BaudRate_MIN;
const MiniCanCard_BaudRate MiniCanCard::BaudRate_MAX;
const int MiniCanCard::BaudRate_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CANCardParameter::kBrandFieldNumber;
const int CANCardParameter::kTypeFieldNumber;
const int CANCardParameter::kChannelIdFieldNumber;
const int CANCardParameter::kMiniCanFieldNumber;
const int CANCardParameter::kAddressFieldNumber;
const int CANCardParameter::kPortNumFieldNumber;
const int CANCardParameter::kProtocolFieldNumber;
const int CANCardParameter::kParametersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CANCardParameter::CANCardParameter()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.canbus.CANCardParameter)
}
CANCardParameter::CANCardParameter(const CANCardParameter& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_address()) {
    address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
  }
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_protocol()) {
    protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
  }
  parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_parameters()) {
    parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_);
  }
  if (from.has_minican()) {
    minican_ = new ::atd::drivers::canbus::MiniCanCard(*from.minican_);
  } else {
    minican_ = NULL;
  }
  ::memcpy(&brand_, &from.brand_,
    reinterpret_cast<char*>(&portnum_) -
    reinterpret_cast<char*>(&brand_) + sizeof(portnum_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.canbus.CANCardParameter)
}

void CANCardParameter::SharedCtor() {
  _cached_size_ = 0;
  address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameters_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&minican_, 0, reinterpret_cast<char*>(&portnum_) -
    reinterpret_cast<char*>(&minican_) + sizeof(portnum_));
}

CANCardParameter::~CANCardParameter() {
  // @@protoc_insertion_point(destructor:atd.drivers.canbus.CANCardParameter)
  SharedDtor();
}

void CANCardParameter::SharedDtor() {
  address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  protocol_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  parameters_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete minican_;
  }
}

void CANCardParameter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CANCardParameter::descriptor() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CANCardParameter& CANCardParameter::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::InitDefaults();
  return *internal_default_instance();
}

CANCardParameter* CANCardParameter::New(::google::protobuf::Arena* arena) const {
  CANCardParameter* n = new CANCardParameter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CANCardParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.canbus.CANCardParameter)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_address()) {
      GOOGLE_DCHECK(!address_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*address_.UnsafeRawStringPointer())->clear();
    }
    if (has_protocol()) {
      GOOGLE_DCHECK(!protocol_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*protocol_.UnsafeRawStringPointer())->clear();
    }
    if (has_parameters()) {
      GOOGLE_DCHECK(!parameters_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*parameters_.UnsafeRawStringPointer())->clear();
    }
    if (has_minican()) {
      GOOGLE_DCHECK(minican_ != NULL);
      minican_->::atd::drivers::canbus::MiniCanCard::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&brand_, 0, reinterpret_cast<char*>(&portnum_) -
      reinterpret_cast<char*>(&brand_) + sizeof(portnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CANCardParameter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atd.drivers.canbus.CANCardParameter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::drivers::canbus::CANCardParameter_CANCardBrand_IsValid(value)) {
            set_brand(static_cast< ::atd::drivers::canbus::CANCardParameter_CANCardBrand >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.drivers.canbus.CANCardParameter.CANCardType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::drivers::canbus::CANCardParameter_CANCardType_IsValid(value)) {
            set_type(static_cast< ::atd::drivers::canbus::CANCardParameter_CANCardType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::drivers::canbus::CANCardParameter_CANChannelId_IsValid(value)) {
            set_channel_id(static_cast< ::atd::drivers::canbus::CANCardParameter_CANChannelId >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.drivers.canbus.MiniCanCard miniCan = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_minican()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes address = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_address()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 portNum = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_portnum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &portnum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string protocol = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_protocol()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->protocol().data(), this->protocol().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "atd.drivers.canbus.CANCardParameter.protocol");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string parameters = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameters()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->parameters().data(), this->parameters().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "atd.drivers.canbus.CANCardParameter.parameters");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.canbus.CANCardParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.canbus.CANCardParameter)
  return false;
#undef DO_
}

void CANCardParameter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.canbus.CANCardParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->brand(), output);
  }

  // optional .atd.drivers.canbus.CANCardParameter.CANCardType type = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional .atd.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->channel_id(), output);
  }

  // optional .atd.drivers.canbus.MiniCanCard miniCan = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->minican_, output);
  }

  // optional bytes address = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->address(), output);
  }

  // optional int32 portNum = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->portnum(), output);
  }

  // optional string protocol = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atd.drivers.canbus.CANCardParameter.protocol");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->protocol(), output);
  }

  // optional string parameters = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters().data(), this->parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atd.drivers.canbus.CANCardParameter.parameters");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->parameters(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:atd.drivers.canbus.CANCardParameter)
}

::google::protobuf::uint8* CANCardParameter::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atd.drivers.canbus.CANCardParameter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->brand(), target);
  }

  // optional .atd.drivers.canbus.CANCardParameter.CANCardType type = 2;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional .atd.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->channel_id(), target);
  }

  // optional .atd.drivers.canbus.MiniCanCard miniCan = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->minican_, deterministic, target);
  }

  // optional bytes address = 5;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->address(), target);
  }

  // optional int32 portNum = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->portnum(), target);
  }

  // optional string protocol = 7;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->protocol().data(), this->protocol().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atd.drivers.canbus.CANCardParameter.protocol");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->protocol(), target);
  }

  // optional string parameters = 8;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->parameters().data(), this->parameters().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "atd.drivers.canbus.CANCardParameter.parameters");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->parameters(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atd.drivers.canbus.CANCardParameter)
  return target;
}

size_t CANCardParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.canbus.CANCardParameter)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional bytes address = 5;
    if (has_address()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->address());
    }

    // optional string protocol = 7;
    if (has_protocol()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->protocol());
    }

    // optional string parameters = 8;
    if (has_parameters()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameters());
    }

    // optional .atd.drivers.canbus.MiniCanCard miniCan = 4;
    if (has_minican()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->minican_);
    }

    // optional .atd.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
    if (has_brand()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->brand());
    }

    // optional .atd.drivers.canbus.CANCardParameter.CANCardType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .atd.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
    if (has_channel_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->channel_id());
    }

    // optional int32 portNum = 6;
    if (has_portnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->portnum());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CANCardParameter::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atd.drivers.canbus.CANCardParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const CANCardParameter* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CANCardParameter>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atd.drivers.canbus.CANCardParameter)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atd.drivers.canbus.CANCardParameter)
    MergeFrom(*source);
  }
}

void CANCardParameter::MergeFrom(const CANCardParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.canbus.CANCardParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_address();
      address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.address_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_protocol();
      protocol_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.protocol_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_parameters();
      parameters_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.parameters_);
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_minican()->::atd::drivers::canbus::MiniCanCard::MergeFrom(from.minican());
    }
    if (cached_has_bits & 0x00000010u) {
      brand_ = from.brand_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      channel_id_ = from.channel_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      portnum_ = from.portnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CANCardParameter::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atd.drivers.canbus.CANCardParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CANCardParameter::CopyFrom(const CANCardParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.canbus.CANCardParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CANCardParameter::IsInitialized() const {
  if (has_minican()) {
    if (!this->minican_->IsInitialized()) return false;
  }
  return true;
}

void CANCardParameter::Swap(CANCardParameter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CANCardParameter::InternalSwap(CANCardParameter* other) {
  address_.Swap(&other->address_);
  protocol_.Swap(&other->protocol_);
  parameters_.Swap(&other->parameters_);
  std::swap(minican_, other->minican_);
  std::swap(brand_, other->brand_);
  std::swap(type_, other->type_);
  std::swap(channel_id_, other->channel_id_);
  std::swap(portnum_, other->portnum_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CANCardParameter::GetMetadata() const {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CANCardParameter

// optional .atd.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
bool CANCardParameter::has_brand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void CANCardParameter::set_has_brand() {
  _has_bits_[0] |= 0x00000010u;
}
void CANCardParameter::clear_has_brand() {
  _has_bits_[0] &= ~0x00000010u;
}
void CANCardParameter::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
::atd::drivers::canbus::CANCardParameter_CANCardBrand CANCardParameter::brand() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.brand)
  return static_cast< ::atd::drivers::canbus::CANCardParameter_CANCardBrand >(brand_);
}
void CANCardParameter::set_brand(::atd::drivers::canbus::CANCardParameter_CANCardBrand value) {
  assert(::atd::drivers::canbus::CANCardParameter_CANCardBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.brand)
}

// optional .atd.drivers.canbus.CANCardParameter.CANCardType type = 2;
bool CANCardParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void CANCardParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void CANCardParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void CANCardParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
::atd::drivers::canbus::CANCardParameter_CANCardType CANCardParameter::type() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.type)
  return static_cast< ::atd::drivers::canbus::CANCardParameter_CANCardType >(type_);
}
void CANCardParameter::set_type(::atd::drivers::canbus::CANCardParameter_CANCardType value) {
  assert(::atd::drivers::canbus::CANCardParameter_CANCardType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.type)
}

// optional .atd.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
bool CANCardParameter::has_channel_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void CANCardParameter::set_has_channel_id() {
  _has_bits_[0] |= 0x00000040u;
}
void CANCardParameter::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void CANCardParameter::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
::atd::drivers::canbus::CANCardParameter_CANChannelId CANCardParameter::channel_id() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.channel_id)
  return static_cast< ::atd::drivers::canbus::CANCardParameter_CANChannelId >(channel_id_);
}
void CANCardParameter::set_channel_id(::atd::drivers::canbus::CANCardParameter_CANChannelId value) {
  assert(::atd::drivers::canbus::CANCardParameter_CANChannelId_IsValid(value));
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.channel_id)
}

// optional .atd.drivers.canbus.MiniCanCard miniCan = 4;
bool CANCardParameter::has_minican() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CANCardParameter::set_has_minican() {
  _has_bits_[0] |= 0x00000008u;
}
void CANCardParameter::clear_has_minican() {
  _has_bits_[0] &= ~0x00000008u;
}
void CANCardParameter::clear_minican() {
  if (minican_ != NULL) minican_->::atd::drivers::canbus::MiniCanCard::Clear();
  clear_has_minican();
}
const ::atd::drivers::canbus::MiniCanCard& CANCardParameter::minican() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.miniCan)
  return minican_ != NULL ? *minican_
                         : *::atd::drivers::canbus::MiniCanCard::internal_default_instance();
}
::atd::drivers::canbus::MiniCanCard* CANCardParameter::mutable_minican() {
  set_has_minican();
  if (minican_ == NULL) {
    minican_ = new ::atd::drivers::canbus::MiniCanCard;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.miniCan)
  return minican_;
}
::atd::drivers::canbus::MiniCanCard* CANCardParameter::release_minican() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.miniCan)
  clear_has_minican();
  ::atd::drivers::canbus::MiniCanCard* temp = minican_;
  minican_ = NULL;
  return temp;
}
void CANCardParameter::set_allocated_minican(::atd::drivers::canbus::MiniCanCard* minican) {
  delete minican_;
  minican_ = minican;
  if (minican) {
    set_has_minican();
  } else {
    clear_has_minican();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.miniCan)
}

// optional bytes address = 5;
bool CANCardParameter::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CANCardParameter::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
void CANCardParameter::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
void CANCardParameter::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
const ::std::string& CANCardParameter::address() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.address)
  return address_.GetNoArena();
}
void CANCardParameter::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.address)
}
#if LANG_CXX11
void CANCardParameter::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.drivers.canbus.CANCardParameter.address)
}
#endif
void CANCardParameter::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.drivers.canbus.CANCardParameter.address)
}
void CANCardParameter::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.drivers.canbus.CANCardParameter.address)
}
::std::string* CANCardParameter::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CANCardParameter::release_address() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CANCardParameter::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.address)
}

// optional int32 portNum = 6;
bool CANCardParameter::has_portnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void CANCardParameter::set_has_portnum() {
  _has_bits_[0] |= 0x00000080u;
}
void CANCardParameter::clear_has_portnum() {
  _has_bits_[0] &= ~0x00000080u;
}
void CANCardParameter::clear_portnum() {
  portnum_ = 0;
  clear_has_portnum();
}
::google::protobuf::int32 CANCardParameter::portnum() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.portNum)
  return portnum_;
}
void CANCardParameter::set_portnum(::google::protobuf::int32 value) {
  set_has_portnum();
  portnum_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.portNum)
}

// optional string protocol = 7;
bool CANCardParameter::has_protocol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CANCardParameter::set_has_protocol() {
  _has_bits_[0] |= 0x00000002u;
}
void CANCardParameter::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000002u;
}
void CANCardParameter::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol();
}
const ::std::string& CANCardParameter::protocol() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.protocol)
  return protocol_.GetNoArena();
}
void CANCardParameter::set_protocol(const ::std::string& value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.protocol)
}
#if LANG_CXX11
void CANCardParameter::set_protocol(::std::string&& value) {
  set_has_protocol();
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.drivers.canbus.CANCardParameter.protocol)
}
#endif
void CANCardParameter::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.drivers.canbus.CANCardParameter.protocol)
}
void CANCardParameter::set_protocol(const char* value, size_t size) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.drivers.canbus.CANCardParameter.protocol)
}
::std::string* CANCardParameter::mutable_protocol() {
  set_has_protocol();
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CANCardParameter::release_protocol() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.protocol)
  clear_has_protocol();
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CANCardParameter::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.protocol)
}

// optional string parameters = 8;
bool CANCardParameter::has_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CANCardParameter::set_has_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
void CANCardParameter::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
void CANCardParameter::clear_parameters() {
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameters();
}
const ::std::string& CANCardParameter::parameters() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.parameters)
  return parameters_.GetNoArena();
}
void CANCardParameter::set_parameters(const ::std::string& value) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.parameters)
}
#if LANG_CXX11
void CANCardParameter::set_parameters(::std::string&& value) {
  set_has_parameters();
  parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.drivers.canbus.CANCardParameter.parameters)
}
#endif
void CANCardParameter::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.drivers.canbus.CANCardParameter.parameters)
}
void CANCardParameter::set_parameters(const char* value, size_t size) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.drivers.canbus.CANCardParameter.parameters)
}
::std::string* CANCardParameter::mutable_parameters() {
  set_has_parameters();
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.parameters)
  return parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CANCardParameter::release_parameters() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.parameters)
  clear_has_parameters();
  return parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CANCardParameter::set_allocated_parameters(::std::string* parameters) {
  if (parameters != NULL) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters);
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.parameters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MiniCanCard::kBaurateFieldNumber;
const int MiniCanCard::kNCanCardIDFieldNumber;
const int MiniCanCard::kNCardChannelIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MiniCanCard::MiniCanCard()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.canbus.MiniCanCard)
}
MiniCanCard::MiniCanCard(const MiniCanCard& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&baurate_, &from.baurate_,
    reinterpret_cast<char*>(&ncardchannelid_) -
    reinterpret_cast<char*>(&baurate_) + sizeof(ncardchannelid_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.canbus.MiniCanCard)
}

void MiniCanCard::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&baurate_, 0, reinterpret_cast<char*>(&ncardchannelid_) -
    reinterpret_cast<char*>(&baurate_) + sizeof(ncardchannelid_));
}

MiniCanCard::~MiniCanCard() {
  // @@protoc_insertion_point(destructor:atd.drivers.canbus.MiniCanCard)
  SharedDtor();
}

void MiniCanCard::SharedDtor() {
}

void MiniCanCard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MiniCanCard::descriptor() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MiniCanCard& MiniCanCard::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::InitDefaults();
  return *internal_default_instance();
}

MiniCanCard* MiniCanCard::New(::google::protobuf::Arena* arena) const {
  MiniCanCard* n = new MiniCanCard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MiniCanCard::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.canbus.MiniCanCard)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&baurate_, 0, reinterpret_cast<char*>(&ncardchannelid_) -
      reinterpret_cast<char*>(&baurate_) + sizeof(ncardchannelid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MiniCanCard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:atd.drivers.canbus.MiniCanCard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.drivers.canbus.MiniCanCard.BaudRate baurate = 1 [default = b0014_1M];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::drivers::canbus::MiniCanCard_BaudRate_IsValid(value)) {
            set_baurate(static_cast< ::atd::drivers::canbus::MiniCanCard_BaudRate >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nCanCardID = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_ncancardid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncancardid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required uint32 nCardChannelID = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_ncardchannelid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ncardchannelid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.canbus.MiniCanCard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.canbus.MiniCanCard)
  return false;
#undef DO_
}

void MiniCanCard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.canbus.MiniCanCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.drivers.canbus.MiniCanCard.BaudRate baurate = 1 [default = b0014_1M];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->baurate(), output);
  }

  // required uint32 nCanCardID = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ncancardid(), output);
  }

  // required uint32 nCardChannelID = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->ncardchannelid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:atd.drivers.canbus.MiniCanCard)
}

::google::protobuf::uint8* MiniCanCard::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:atd.drivers.canbus.MiniCanCard)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.drivers.canbus.MiniCanCard.BaudRate baurate = 1 [default = b0014_1M];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->baurate(), target);
  }

  // required uint32 nCanCardID = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ncancardid(), target);
  }

  // required uint32 nCardChannelID = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->ncardchannelid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:atd.drivers.canbus.MiniCanCard)
  return target;
}

size_t MiniCanCard::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atd.drivers.canbus.MiniCanCard)
  size_t total_size = 0;

  if (has_ncancardid()) {
    // required uint32 nCanCardID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncancardid());
  }

  if (has_ncardchannelid()) {
    // required uint32 nCardChannelID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncardchannelid());
  }

  return total_size;
}
size_t MiniCanCard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.canbus.MiniCanCard)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 nCanCardID = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncancardid());

    // required uint32 nCardChannelID = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->ncardchannelid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional .atd.drivers.canbus.MiniCanCard.BaudRate baurate = 1 [default = b0014_1M];
  if (has_baurate()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->baurate());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MiniCanCard::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:atd.drivers.canbus.MiniCanCard)
  GOOGLE_DCHECK_NE(&from, this);
  const MiniCanCard* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MiniCanCard>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:atd.drivers.canbus.MiniCanCard)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:atd.drivers.canbus.MiniCanCard)
    MergeFrom(*source);
  }
}

void MiniCanCard::MergeFrom(const MiniCanCard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.canbus.MiniCanCard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      baurate_ = from.baurate_;
    }
    if (cached_has_bits & 0x00000002u) {
      ncancardid_ = from.ncancardid_;
    }
    if (cached_has_bits & 0x00000004u) {
      ncardchannelid_ = from.ncardchannelid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MiniCanCard::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:atd.drivers.canbus.MiniCanCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MiniCanCard::CopyFrom(const MiniCanCard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.canbus.MiniCanCard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MiniCanCard::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000006) != 0x00000006) return false;
  return true;
}

void MiniCanCard::Swap(MiniCanCard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MiniCanCard::InternalSwap(MiniCanCard* other) {
  std::swap(baurate_, other->baurate_);
  std::swap(ncancardid_, other->ncancardid_);
  std::swap(ncardchannelid_, other->ncardchannelid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MiniCanCard::GetMetadata() const {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MiniCanCard

// optional .atd.drivers.canbus.MiniCanCard.BaudRate baurate = 1 [default = b0014_1M];
bool MiniCanCard::has_baurate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MiniCanCard::set_has_baurate() {
  _has_bits_[0] |= 0x00000001u;
}
void MiniCanCard::clear_has_baurate() {
  _has_bits_[0] &= ~0x00000001u;
}
void MiniCanCard::clear_baurate() {
  baurate_ = 0;
  clear_has_baurate();
}
::atd::drivers::canbus::MiniCanCard_BaudRate MiniCanCard::baurate() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.MiniCanCard.baurate)
  return static_cast< ::atd::drivers::canbus::MiniCanCard_BaudRate >(baurate_);
}
void MiniCanCard::set_baurate(::atd::drivers::canbus::MiniCanCard_BaudRate value) {
  assert(::atd::drivers::canbus::MiniCanCard_BaudRate_IsValid(value));
  set_has_baurate();
  baurate_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.MiniCanCard.baurate)
}

// required uint32 nCanCardID = 2;
bool MiniCanCard::has_ncancardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MiniCanCard::set_has_ncancardid() {
  _has_bits_[0] |= 0x00000002u;
}
void MiniCanCard::clear_has_ncancardid() {
  _has_bits_[0] &= ~0x00000002u;
}
void MiniCanCard::clear_ncancardid() {
  ncancardid_ = 0u;
  clear_has_ncancardid();
}
::google::protobuf::uint32 MiniCanCard::ncancardid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.MiniCanCard.nCanCardID)
  return ncancardid_;
}
void MiniCanCard::set_ncancardid(::google::protobuf::uint32 value) {
  set_has_ncancardid();
  ncancardid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.MiniCanCard.nCanCardID)
}

// required uint32 nCardChannelID = 3;
bool MiniCanCard::has_ncardchannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MiniCanCard::set_has_ncardchannelid() {
  _has_bits_[0] |= 0x00000004u;
}
void MiniCanCard::clear_has_ncardchannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
void MiniCanCard::clear_ncardchannelid() {
  ncardchannelid_ = 0u;
  clear_has_ncardchannelid();
}
::google::protobuf::uint32 MiniCanCard::ncardchannelid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.MiniCanCard.nCardChannelID)
  return ncardchannelid_;
}
void MiniCanCard::set_ncardchannelid(::google::protobuf::uint32 value) {
  set_has_ncardchannelid();
  ncardchannelid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.MiniCanCard.nCardChannelID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)
