// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/canbus/can_card_parameter.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace atd {
namespace drivers {
namespace canbus {
class CANCardParameter;
class CANCardParameterDefaultTypeInternal;
extern CANCardParameterDefaultTypeInternal _CANCardParameter_default_instance_;
class MiniCanCard;
class MiniCanCardDefaultTypeInternal;
extern MiniCanCardDefaultTypeInternal _MiniCanCard_default_instance_;
}  // namespace canbus
}  // namespace drivers
}  // namespace atd

namespace atd {
namespace drivers {
namespace canbus {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto

enum CANCardParameter_CANCardBrand {
  CANCardParameter_CANCardBrand_FAKE_CAN = 0,
  CANCardParameter_CANCardBrand_ESD_CAN = 1,
  CANCardParameter_CANCardBrand_SOCKET_CAN_RAW = 2,
  CANCardParameter_CANCardBrand_CANNET_CAN = 3,
  CANCardParameter_CANCardBrand_LIKE_CAN = 4,
  CANCardParameter_CANCardBrand_DW_CAN = 5
};
bool CANCardParameter_CANCardBrand_IsValid(int value);
const CANCardParameter_CANCardBrand CANCardParameter_CANCardBrand_CANCardBrand_MIN = CANCardParameter_CANCardBrand_FAKE_CAN;
const CANCardParameter_CANCardBrand CANCardParameter_CANCardBrand_CANCardBrand_MAX = CANCardParameter_CANCardBrand_DW_CAN;
const int CANCardParameter_CANCardBrand_CANCardBrand_ARRAYSIZE = CANCardParameter_CANCardBrand_CANCardBrand_MAX + 1;

const ::google::protobuf::EnumDescriptor* CANCardParameter_CANCardBrand_descriptor();
inline const ::std::string& CANCardParameter_CANCardBrand_Name(CANCardParameter_CANCardBrand value) {
  return ::google::protobuf::internal::NameOfEnum(
    CANCardParameter_CANCardBrand_descriptor(), value);
}
inline bool CANCardParameter_CANCardBrand_Parse(
    const ::std::string& name, CANCardParameter_CANCardBrand* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CANCardParameter_CANCardBrand>(
    CANCardParameter_CANCardBrand_descriptor(), name, value);
}
enum CANCardParameter_CANCardType {
  CANCardParameter_CANCardType_PCI_CARD = 0,
  CANCardParameter_CANCardType_USB_CARD = 1
};
bool CANCardParameter_CANCardType_IsValid(int value);
const CANCardParameter_CANCardType CANCardParameter_CANCardType_CANCardType_MIN = CANCardParameter_CANCardType_PCI_CARD;
const CANCardParameter_CANCardType CANCardParameter_CANCardType_CANCardType_MAX = CANCardParameter_CANCardType_USB_CARD;
const int CANCardParameter_CANCardType_CANCardType_ARRAYSIZE = CANCardParameter_CANCardType_CANCardType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CANCardParameter_CANCardType_descriptor();
inline const ::std::string& CANCardParameter_CANCardType_Name(CANCardParameter_CANCardType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CANCardParameter_CANCardType_descriptor(), value);
}
inline bool CANCardParameter_CANCardType_Parse(
    const ::std::string& name, CANCardParameter_CANCardType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CANCardParameter_CANCardType>(
    CANCardParameter_CANCardType_descriptor(), name, value);
}
enum CANCardParameter_CANChannelId {
  CANCardParameter_CANChannelId_CHANNEL_ID_ZERO = 0,
  CANCardParameter_CANChannelId_CHANNEL_ID_ONE = 1,
  CANCardParameter_CANChannelId_CHANNEL_ID_TWO = 2,
  CANCardParameter_CANChannelId_CHANNEL_ID_THREE = 3
};
bool CANCardParameter_CANChannelId_IsValid(int value);
const CANCardParameter_CANChannelId CANCardParameter_CANChannelId_CANChannelId_MIN = CANCardParameter_CANChannelId_CHANNEL_ID_ZERO;
const CANCardParameter_CANChannelId CANCardParameter_CANChannelId_CANChannelId_MAX = CANCardParameter_CANChannelId_CHANNEL_ID_THREE;
const int CANCardParameter_CANChannelId_CANChannelId_ARRAYSIZE = CANCardParameter_CANChannelId_CANChannelId_MAX + 1;

const ::google::protobuf::EnumDescriptor* CANCardParameter_CANChannelId_descriptor();
inline const ::std::string& CANCardParameter_CANChannelId_Name(CANCardParameter_CANChannelId value) {
  return ::google::protobuf::internal::NameOfEnum(
    CANCardParameter_CANChannelId_descriptor(), value);
}
inline bool CANCardParameter_CANChannelId_Parse(
    const ::std::string& name, CANCardParameter_CANChannelId* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CANCardParameter_CANChannelId>(
    CANCardParameter_CANChannelId_descriptor(), name, value);
}
enum MiniCanCard_BaudRate {
  MiniCanCard_BaudRate_b0014_1M = 0,
  MiniCanCard_BaudRate_b0016_800K = 1,
  MiniCanCard_BaudRate_b001C_500K = 2,
  MiniCanCard_BaudRate_b011C_250K = 3,
  MiniCanCard_BaudRate_b031C_125K = 4,
  MiniCanCard_BaudRate_b041C_100K = 5,
  MiniCanCard_BaudRate_b091C_50K = 6,
  MiniCanCard_BaudRate_b181C_20K = 7,
  MiniCanCard_BaudRate_b311C_10K = 8,
  MiniCanCard_BaudRate_bBFFF_5K = 9
};
bool MiniCanCard_BaudRate_IsValid(int value);
const MiniCanCard_BaudRate MiniCanCard_BaudRate_BaudRate_MIN = MiniCanCard_BaudRate_b0014_1M;
const MiniCanCard_BaudRate MiniCanCard_BaudRate_BaudRate_MAX = MiniCanCard_BaudRate_bBFFF_5K;
const int MiniCanCard_BaudRate_BaudRate_ARRAYSIZE = MiniCanCard_BaudRate_BaudRate_MAX + 1;

const ::google::protobuf::EnumDescriptor* MiniCanCard_BaudRate_descriptor();
inline const ::std::string& MiniCanCard_BaudRate_Name(MiniCanCard_BaudRate value) {
  return ::google::protobuf::internal::NameOfEnum(
    MiniCanCard_BaudRate_descriptor(), value);
}
inline bool MiniCanCard_BaudRate_Parse(
    const ::std::string& name, MiniCanCard_BaudRate* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MiniCanCard_BaudRate>(
    MiniCanCard_BaudRate_descriptor(), name, value);
}
// ===================================================================

class CANCardParameter : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:atd.drivers.canbus.CANCardParameter) */ {
 public:
  CANCardParameter();
  virtual ~CANCardParameter();

  CANCardParameter(const CANCardParameter& from);

  inline CANCardParameter& operator=(const CANCardParameter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CANCardParameter& default_instance();

  static inline const CANCardParameter* internal_default_instance() {
    return reinterpret_cast<const CANCardParameter*>(
               &_CANCardParameter_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(CANCardParameter* other);

  // implements Message ----------------------------------------------

  inline CANCardParameter* New() const PROTOBUF_FINAL { return New(NULL); }

  CANCardParameter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const CANCardParameter& from);
  void MergeFrom(const CANCardParameter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(CANCardParameter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CANCardParameter_CANCardBrand CANCardBrand;
  static const CANCardBrand FAKE_CAN =
    CANCardParameter_CANCardBrand_FAKE_CAN;
  static const CANCardBrand ESD_CAN =
    CANCardParameter_CANCardBrand_ESD_CAN;
  static const CANCardBrand SOCKET_CAN_RAW =
    CANCardParameter_CANCardBrand_SOCKET_CAN_RAW;
  static const CANCardBrand CANNET_CAN =
    CANCardParameter_CANCardBrand_CANNET_CAN;
  static const CANCardBrand LIKE_CAN =
    CANCardParameter_CANCardBrand_LIKE_CAN;
  static const CANCardBrand DW_CAN =
    CANCardParameter_CANCardBrand_DW_CAN;
  static inline bool CANCardBrand_IsValid(int value) {
    return CANCardParameter_CANCardBrand_IsValid(value);
  }
  static const CANCardBrand CANCardBrand_MIN =
    CANCardParameter_CANCardBrand_CANCardBrand_MIN;
  static const CANCardBrand CANCardBrand_MAX =
    CANCardParameter_CANCardBrand_CANCardBrand_MAX;
  static const int CANCardBrand_ARRAYSIZE =
    CANCardParameter_CANCardBrand_CANCardBrand_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CANCardBrand_descriptor() {
    return CANCardParameter_CANCardBrand_descriptor();
  }
  static inline const ::std::string& CANCardBrand_Name(CANCardBrand value) {
    return CANCardParameter_CANCardBrand_Name(value);
  }
  static inline bool CANCardBrand_Parse(const ::std::string& name,
      CANCardBrand* value) {
    return CANCardParameter_CANCardBrand_Parse(name, value);
  }

  typedef CANCardParameter_CANCardType CANCardType;
  static const CANCardType PCI_CARD =
    CANCardParameter_CANCardType_PCI_CARD;
  static const CANCardType USB_CARD =
    CANCardParameter_CANCardType_USB_CARD;
  static inline bool CANCardType_IsValid(int value) {
    return CANCardParameter_CANCardType_IsValid(value);
  }
  static const CANCardType CANCardType_MIN =
    CANCardParameter_CANCardType_CANCardType_MIN;
  static const CANCardType CANCardType_MAX =
    CANCardParameter_CANCardType_CANCardType_MAX;
  static const int CANCardType_ARRAYSIZE =
    CANCardParameter_CANCardType_CANCardType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CANCardType_descriptor() {
    return CANCardParameter_CANCardType_descriptor();
  }
  static inline const ::std::string& CANCardType_Name(CANCardType value) {
    return CANCardParameter_CANCardType_Name(value);
  }
  static inline bool CANCardType_Parse(const ::std::string& name,
      CANCardType* value) {
    return CANCardParameter_CANCardType_Parse(name, value);
  }

  typedef CANCardParameter_CANChannelId CANChannelId;
  static const CANChannelId CHANNEL_ID_ZERO =
    CANCardParameter_CANChannelId_CHANNEL_ID_ZERO;
  static const CANChannelId CHANNEL_ID_ONE =
    CANCardParameter_CANChannelId_CHANNEL_ID_ONE;
  static const CANChannelId CHANNEL_ID_TWO =
    CANCardParameter_CANChannelId_CHANNEL_ID_TWO;
  static const CANChannelId CHANNEL_ID_THREE =
    CANCardParameter_CANChannelId_CHANNEL_ID_THREE;
  static inline bool CANChannelId_IsValid(int value) {
    return CANCardParameter_CANChannelId_IsValid(value);
  }
  static const CANChannelId CANChannelId_MIN =
    CANCardParameter_CANChannelId_CANChannelId_MIN;
  static const CANChannelId CANChannelId_MAX =
    CANCardParameter_CANChannelId_CANChannelId_MAX;
  static const int CANChannelId_ARRAYSIZE =
    CANCardParameter_CANChannelId_CANChannelId_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CANChannelId_descriptor() {
    return CANCardParameter_CANChannelId_descriptor();
  }
  static inline const ::std::string& CANChannelId_Name(CANChannelId value) {
    return CANCardParameter_CANChannelId_Name(value);
  }
  static inline bool CANChannelId_Parse(const ::std::string& name,
      CANChannelId* value) {
    return CANCardParameter_CANChannelId_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bytes address = 5;
  bool has_address() const;
  void clear_address();
  static const int kAddressFieldNumber = 5;
  const ::std::string& address() const;
  void set_address(const ::std::string& value);
  #if LANG_CXX11
  void set_address(::std::string&& value);
  #endif
  void set_address(const char* value);
  void set_address(const void* value, size_t size);
  ::std::string* mutable_address();
  ::std::string* release_address();
  void set_allocated_address(::std::string* address);

  // optional string protocol = 7;
  bool has_protocol() const;
  void clear_protocol();
  static const int kProtocolFieldNumber = 7;
  const ::std::string& protocol() const;
  void set_protocol(const ::std::string& value);
  #if LANG_CXX11
  void set_protocol(::std::string&& value);
  #endif
  void set_protocol(const char* value);
  void set_protocol(const char* value, size_t size);
  ::std::string* mutable_protocol();
  ::std::string* release_protocol();
  void set_allocated_protocol(::std::string* protocol);

  // optional string parameters = 8;
  bool has_parameters() const;
  void clear_parameters();
  static const int kParametersFieldNumber = 8;
  const ::std::string& parameters() const;
  void set_parameters(const ::std::string& value);
  #if LANG_CXX11
  void set_parameters(::std::string&& value);
  #endif
  void set_parameters(const char* value);
  void set_parameters(const char* value, size_t size);
  ::std::string* mutable_parameters();
  ::std::string* release_parameters();
  void set_allocated_parameters(::std::string* parameters);

  // optional .atd.drivers.canbus.MiniCanCard miniCan = 4;
  bool has_minican() const;
  void clear_minican();
  static const int kMiniCanFieldNumber = 4;
  const ::atd::drivers::canbus::MiniCanCard& minican() const;
  ::atd::drivers::canbus::MiniCanCard* mutable_minican();
  ::atd::drivers::canbus::MiniCanCard* release_minican();
  void set_allocated_minican(::atd::drivers::canbus::MiniCanCard* minican);

  // optional .atd.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
  bool has_brand() const;
  void clear_brand();
  static const int kBrandFieldNumber = 1;
  ::atd::drivers::canbus::CANCardParameter_CANCardBrand brand() const;
  void set_brand(::atd::drivers::canbus::CANCardParameter_CANCardBrand value);

  // optional .atd.drivers.canbus.CANCardParameter.CANCardType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::atd::drivers::canbus::CANCardParameter_CANCardType type() const;
  void set_type(::atd::drivers::canbus::CANCardParameter_CANCardType value);

  // optional .atd.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
  bool has_channel_id() const;
  void clear_channel_id();
  static const int kChannelIdFieldNumber = 3;
  ::atd::drivers::canbus::CANCardParameter_CANChannelId channel_id() const;
  void set_channel_id(::atd::drivers::canbus::CANCardParameter_CANChannelId value);

  // optional int32 portNum = 6;
  bool has_portnum() const;
  void clear_portnum();
  static const int kPortNumFieldNumber = 6;
  ::google::protobuf::int32 portnum() const;
  void set_portnum(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.drivers.canbus.CANCardParameter)
 private:
  void set_has_brand();
  void clear_has_brand();
  void set_has_type();
  void clear_has_type();
  void set_has_channel_id();
  void clear_has_channel_id();
  void set_has_minican();
  void clear_has_minican();
  void set_has_address();
  void clear_has_address();
  void set_has_portnum();
  void clear_has_portnum();
  void set_has_protocol();
  void clear_has_protocol();
  void set_has_parameters();
  void clear_has_parameters();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr address_;
  ::google::protobuf::internal::ArenaStringPtr protocol_;
  ::google::protobuf::internal::ArenaStringPtr parameters_;
  ::atd::drivers::canbus::MiniCanCard* minican_;
  int brand_;
  int type_;
  int channel_id_;
  ::google::protobuf::int32 portnum_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MiniCanCard : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:atd.drivers.canbus.MiniCanCard) */ {
 public:
  MiniCanCard();
  virtual ~MiniCanCard();

  MiniCanCard(const MiniCanCard& from);

  inline MiniCanCard& operator=(const MiniCanCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MiniCanCard& default_instance();

  static inline const MiniCanCard* internal_default_instance() {
    return reinterpret_cast<const MiniCanCard*>(
               &_MiniCanCard_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MiniCanCard* other);

  // implements Message ----------------------------------------------

  inline MiniCanCard* New() const PROTOBUF_FINAL { return New(NULL); }

  MiniCanCard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MiniCanCard& from);
  void MergeFrom(const MiniCanCard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MiniCanCard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MiniCanCard_BaudRate BaudRate;
  static const BaudRate b0014_1M =
    MiniCanCard_BaudRate_b0014_1M;
  static const BaudRate b0016_800K =
    MiniCanCard_BaudRate_b0016_800K;
  static const BaudRate b001C_500K =
    MiniCanCard_BaudRate_b001C_500K;
  static const BaudRate b011C_250K =
    MiniCanCard_BaudRate_b011C_250K;
  static const BaudRate b031C_125K =
    MiniCanCard_BaudRate_b031C_125K;
  static const BaudRate b041C_100K =
    MiniCanCard_BaudRate_b041C_100K;
  static const BaudRate b091C_50K =
    MiniCanCard_BaudRate_b091C_50K;
  static const BaudRate b181C_20K =
    MiniCanCard_BaudRate_b181C_20K;
  static const BaudRate b311C_10K =
    MiniCanCard_BaudRate_b311C_10K;
  static const BaudRate bBFFF_5K =
    MiniCanCard_BaudRate_bBFFF_5K;
  static inline bool BaudRate_IsValid(int value) {
    return MiniCanCard_BaudRate_IsValid(value);
  }
  static const BaudRate BaudRate_MIN =
    MiniCanCard_BaudRate_BaudRate_MIN;
  static const BaudRate BaudRate_MAX =
    MiniCanCard_BaudRate_BaudRate_MAX;
  static const int BaudRate_ARRAYSIZE =
    MiniCanCard_BaudRate_BaudRate_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BaudRate_descriptor() {
    return MiniCanCard_BaudRate_descriptor();
  }
  static inline const ::std::string& BaudRate_Name(BaudRate value) {
    return MiniCanCard_BaudRate_Name(value);
  }
  static inline bool BaudRate_Parse(const ::std::string& name,
      BaudRate* value) {
    return MiniCanCard_BaudRate_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .atd.drivers.canbus.MiniCanCard.BaudRate baurate = 1 [default = b0014_1M];
  bool has_baurate() const;
  void clear_baurate();
  static const int kBaurateFieldNumber = 1;
  ::atd::drivers::canbus::MiniCanCard_BaudRate baurate() const;
  void set_baurate(::atd::drivers::canbus::MiniCanCard_BaudRate value);

  // required uint32 nCanCardID = 2;
  bool has_ncancardid() const;
  void clear_ncancardid();
  static const int kNCanCardIDFieldNumber = 2;
  ::google::protobuf::uint32 ncancardid() const;
  void set_ncancardid(::google::protobuf::uint32 value);

  // required uint32 nCardChannelID = 3;
  bool has_ncardchannelid() const;
  void clear_ncardchannelid();
  static const int kNCardChannelIDFieldNumber = 3;
  ::google::protobuf::uint32 ncardchannelid() const;
  void set_ncardchannelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:atd.drivers.canbus.MiniCanCard)
 private:
  void set_has_baurate();
  void clear_has_baurate();
  void set_has_ncancardid();
  void clear_has_ncancardid();
  void set_has_ncardchannelid();
  void clear_has_ncardchannelid();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  int baurate_;
  ::google::protobuf::uint32 ncancardid_;
  ::google::protobuf::uint32 ncardchannelid_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// CANCardParameter

// optional .atd.drivers.canbus.CANCardParameter.CANCardBrand brand = 1;
inline bool CANCardParameter::has_brand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CANCardParameter::set_has_brand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CANCardParameter::clear_has_brand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CANCardParameter::clear_brand() {
  brand_ = 0;
  clear_has_brand();
}
inline ::atd::drivers::canbus::CANCardParameter_CANCardBrand CANCardParameter::brand() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.brand)
  return static_cast< ::atd::drivers::canbus::CANCardParameter_CANCardBrand >(brand_);
}
inline void CANCardParameter::set_brand(::atd::drivers::canbus::CANCardParameter_CANCardBrand value) {
  assert(::atd::drivers::canbus::CANCardParameter_CANCardBrand_IsValid(value));
  set_has_brand();
  brand_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.brand)
}

// optional .atd.drivers.canbus.CANCardParameter.CANCardType type = 2;
inline bool CANCardParameter::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CANCardParameter::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CANCardParameter::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CANCardParameter::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::atd::drivers::canbus::CANCardParameter_CANCardType CANCardParameter::type() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.type)
  return static_cast< ::atd::drivers::canbus::CANCardParameter_CANCardType >(type_);
}
inline void CANCardParameter::set_type(::atd::drivers::canbus::CANCardParameter_CANCardType value) {
  assert(::atd::drivers::canbus::CANCardParameter_CANCardType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.type)
}

// optional .atd.drivers.canbus.CANCardParameter.CANChannelId channel_id = 3;
inline bool CANCardParameter::has_channel_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CANCardParameter::set_has_channel_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CANCardParameter::clear_has_channel_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CANCardParameter::clear_channel_id() {
  channel_id_ = 0;
  clear_has_channel_id();
}
inline ::atd::drivers::canbus::CANCardParameter_CANChannelId CANCardParameter::channel_id() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.channel_id)
  return static_cast< ::atd::drivers::canbus::CANCardParameter_CANChannelId >(channel_id_);
}
inline void CANCardParameter::set_channel_id(::atd::drivers::canbus::CANCardParameter_CANChannelId value) {
  assert(::atd::drivers::canbus::CANCardParameter_CANChannelId_IsValid(value));
  set_has_channel_id();
  channel_id_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.channel_id)
}

// optional .atd.drivers.canbus.MiniCanCard miniCan = 4;
inline bool CANCardParameter::has_minican() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CANCardParameter::set_has_minican() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CANCardParameter::clear_has_minican() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CANCardParameter::clear_minican() {
  if (minican_ != NULL) minican_->::atd::drivers::canbus::MiniCanCard::Clear();
  clear_has_minican();
}
inline const ::atd::drivers::canbus::MiniCanCard& CANCardParameter::minican() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.miniCan)
  return minican_ != NULL ? *minican_
                         : *::atd::drivers::canbus::MiniCanCard::internal_default_instance();
}
inline ::atd::drivers::canbus::MiniCanCard* CANCardParameter::mutable_minican() {
  set_has_minican();
  if (minican_ == NULL) {
    minican_ = new ::atd::drivers::canbus::MiniCanCard;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.miniCan)
  return minican_;
}
inline ::atd::drivers::canbus::MiniCanCard* CANCardParameter::release_minican() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.miniCan)
  clear_has_minican();
  ::atd::drivers::canbus::MiniCanCard* temp = minican_;
  minican_ = NULL;
  return temp;
}
inline void CANCardParameter::set_allocated_minican(::atd::drivers::canbus::MiniCanCard* minican) {
  delete minican_;
  minican_ = minican;
  if (minican) {
    set_has_minican();
  } else {
    clear_has_minican();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.miniCan)
}

// optional bytes address = 5;
inline bool CANCardParameter::has_address() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CANCardParameter::set_has_address() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CANCardParameter::clear_has_address() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CANCardParameter::clear_address() {
  address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_address();
}
inline const ::std::string& CANCardParameter::address() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.address)
  return address_.GetNoArena();
}
inline void CANCardParameter::set_address(const ::std::string& value) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.address)
}
#if LANG_CXX11
inline void CANCardParameter::set_address(::std::string&& value) {
  set_has_address();
  address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.drivers.canbus.CANCardParameter.address)
}
#endif
inline void CANCardParameter::set_address(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.drivers.canbus.CANCardParameter.address)
}
inline void CANCardParameter::set_address(const void* value, size_t size) {
  set_has_address();
  address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.drivers.canbus.CANCardParameter.address)
}
inline ::std::string* CANCardParameter::mutable_address() {
  set_has_address();
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.address)
  return address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CANCardParameter::release_address() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.address)
  clear_has_address();
  return address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CANCardParameter::set_allocated_address(::std::string* address) {
  if (address != NULL) {
    set_has_address();
  } else {
    clear_has_address();
  }
  address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), address);
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.address)
}

// optional int32 portNum = 6;
inline bool CANCardParameter::has_portnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CANCardParameter::set_has_portnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CANCardParameter::clear_has_portnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CANCardParameter::clear_portnum() {
  portnum_ = 0;
  clear_has_portnum();
}
inline ::google::protobuf::int32 CANCardParameter::portnum() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.portNum)
  return portnum_;
}
inline void CANCardParameter::set_portnum(::google::protobuf::int32 value) {
  set_has_portnum();
  portnum_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.portNum)
}

// optional string protocol = 7;
inline bool CANCardParameter::has_protocol() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CANCardParameter::set_has_protocol() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CANCardParameter::clear_has_protocol() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CANCardParameter::clear_protocol() {
  protocol_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_protocol();
}
inline const ::std::string& CANCardParameter::protocol() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.protocol)
  return protocol_.GetNoArena();
}
inline void CANCardParameter::set_protocol(const ::std::string& value) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.protocol)
}
#if LANG_CXX11
inline void CANCardParameter::set_protocol(::std::string&& value) {
  set_has_protocol();
  protocol_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.drivers.canbus.CANCardParameter.protocol)
}
#endif
inline void CANCardParameter::set_protocol(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.drivers.canbus.CANCardParameter.protocol)
}
inline void CANCardParameter::set_protocol(const char* value, size_t size) {
  set_has_protocol();
  protocol_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.drivers.canbus.CANCardParameter.protocol)
}
inline ::std::string* CANCardParameter::mutable_protocol() {
  set_has_protocol();
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.protocol)
  return protocol_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CANCardParameter::release_protocol() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.protocol)
  clear_has_protocol();
  return protocol_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CANCardParameter::set_allocated_protocol(::std::string* protocol) {
  if (protocol != NULL) {
    set_has_protocol();
  } else {
    clear_has_protocol();
  }
  protocol_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), protocol);
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.protocol)
}

// optional string parameters = 8;
inline bool CANCardParameter::has_parameters() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CANCardParameter::set_has_parameters() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CANCardParameter::clear_has_parameters() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CANCardParameter::clear_parameters() {
  parameters_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameters();
}
inline const ::std::string& CANCardParameter::parameters() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.CANCardParameter.parameters)
  return parameters_.GetNoArena();
}
inline void CANCardParameter::set_parameters(const ::std::string& value) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.CANCardParameter.parameters)
}
#if LANG_CXX11
inline void CANCardParameter::set_parameters(::std::string&& value) {
  set_has_parameters();
  parameters_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.drivers.canbus.CANCardParameter.parameters)
}
#endif
inline void CANCardParameter::set_parameters(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.drivers.canbus.CANCardParameter.parameters)
}
inline void CANCardParameter::set_parameters(const char* value, size_t size) {
  set_has_parameters();
  parameters_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.drivers.canbus.CANCardParameter.parameters)
}
inline ::std::string* CANCardParameter::mutable_parameters() {
  set_has_parameters();
  // @@protoc_insertion_point(field_mutable:atd.drivers.canbus.CANCardParameter.parameters)
  return parameters_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CANCardParameter::release_parameters() {
  // @@protoc_insertion_point(field_release:atd.drivers.canbus.CANCardParameter.parameters)
  clear_has_parameters();
  return parameters_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CANCardParameter::set_allocated_parameters(::std::string* parameters) {
  if (parameters != NULL) {
    set_has_parameters();
  } else {
    clear_has_parameters();
  }
  parameters_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameters);
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.canbus.CANCardParameter.parameters)
}

// -------------------------------------------------------------------

// MiniCanCard

// optional .atd.drivers.canbus.MiniCanCard.BaudRate baurate = 1 [default = b0014_1M];
inline bool MiniCanCard::has_baurate() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MiniCanCard::set_has_baurate() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MiniCanCard::clear_has_baurate() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MiniCanCard::clear_baurate() {
  baurate_ = 0;
  clear_has_baurate();
}
inline ::atd::drivers::canbus::MiniCanCard_BaudRate MiniCanCard::baurate() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.MiniCanCard.baurate)
  return static_cast< ::atd::drivers::canbus::MiniCanCard_BaudRate >(baurate_);
}
inline void MiniCanCard::set_baurate(::atd::drivers::canbus::MiniCanCard_BaudRate value) {
  assert(::atd::drivers::canbus::MiniCanCard_BaudRate_IsValid(value));
  set_has_baurate();
  baurate_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.MiniCanCard.baurate)
}

// required uint32 nCanCardID = 2;
inline bool MiniCanCard::has_ncancardid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MiniCanCard::set_has_ncancardid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MiniCanCard::clear_has_ncancardid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MiniCanCard::clear_ncancardid() {
  ncancardid_ = 0u;
  clear_has_ncancardid();
}
inline ::google::protobuf::uint32 MiniCanCard::ncancardid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.MiniCanCard.nCanCardID)
  return ncancardid_;
}
inline void MiniCanCard::set_ncancardid(::google::protobuf::uint32 value) {
  set_has_ncancardid();
  ncancardid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.MiniCanCard.nCanCardID)
}

// required uint32 nCardChannelID = 3;
inline bool MiniCanCard::has_ncardchannelid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MiniCanCard::set_has_ncardchannelid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MiniCanCard::clear_has_ncardchannelid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MiniCanCard::clear_ncardchannelid() {
  ncardchannelid_ = 0u;
  clear_has_ncardchannelid();
}
inline ::google::protobuf::uint32 MiniCanCard::ncardchannelid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.canbus.MiniCanCard.nCardChannelID)
  return ncardchannelid_;
}
inline void MiniCanCard::set_ncardchannelid(::google::protobuf::uint32 value) {
  set_has_ncardchannelid();
  ncardchannelid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.canbus.MiniCanCard.nCardChannelID)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace canbus
}  // namespace drivers
}  // namespace atd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::atd::drivers::canbus::CANCardParameter_CANCardBrand> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atd::drivers::canbus::CANCardParameter_CANCardBrand>() {
  return ::atd::drivers::canbus::CANCardParameter_CANCardBrand_descriptor();
}
template <> struct is_proto_enum< ::atd::drivers::canbus::CANCardParameter_CANCardType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atd::drivers::canbus::CANCardParameter_CANCardType>() {
  return ::atd::drivers::canbus::CANCardParameter_CANCardType_descriptor();
}
template <> struct is_proto_enum< ::atd::drivers::canbus::CANCardParameter_CANChannelId> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atd::drivers::canbus::CANCardParameter_CANChannelId>() {
  return ::atd::drivers::canbus::CANCardParameter_CANChannelId_descriptor();
}
template <> struct is_proto_enum< ::atd::drivers::canbus::MiniCanCard_BaudRate> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::atd::drivers::canbus::MiniCanCard_BaudRate>() {
  return ::atd::drivers::canbus::MiniCanCard_BaudRate_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fcanbus_2fcan_5fcard_5fparameter_2eproto__INCLUDED
