// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/vcu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/drivers/vcu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace drivers {
class VcuDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Vcu> {
} _Vcu_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fvcu_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Vcu_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _Vcu_default_instance_.DefaultConstruct();
  _Vcu_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Vcu_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fvcu_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vcu::kHeaderFieldNumber;
const int Vcu::kReservedmsgFieldNumber;
const int Vcu::kFSteeringAngleFieldNumber;
const int Vcu::kFSpeedFieldNumber;
const int Vcu::kFYawRateFieldNumber;
const int Vcu::kFFrontLeftWheelSpeedFieldNumber;
const int Vcu::kFFrontRightWheelSpeedFieldNumber;
const int Vcu::kFRearLeftWheelSpeedFieldNumber;
const int Vcu::kFRearRightWheelSpeedFieldNumber;
const int Vcu::kNShifterPositionFieldNumber;
const int Vcu::kNLeftDirectionLampFieldNumber;
const int Vcu::kNRightDirectionLampFieldNumber;
const int Vcu::kNMainBeamLampFieldNumber;
const int Vcu::kNDippedBeamLampFieldNumber;
const int Vcu::kNWiperStateFieldNumber;
const int Vcu::kFLateralAccelFieldNumber;
const int Vcu::kFLongituAccelFieldNumber;
const int Vcu::kNLeftDrivenWheelPulseCountersFieldNumber;
const int Vcu::kNRightDrivenWheelPulseCountersFieldNumber;
const int Vcu::kNLeftNonDrivenWheelPulseCountersFieldNumber;
const int Vcu::kNRightNonDrivenWheelPulseCountersFieldNumber;
const int Vcu::kNDriveModeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vcu::Vcu()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fvcu_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.Vcu)
}
Vcu::Vcu(const Vcu& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&fsteeringangle_, &from.fsteeringangle_,
    reinterpret_cast<char*>(&ndrivemode_) -
    reinterpret_cast<char*>(&fsteeringangle_) + sizeof(ndrivemode_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.Vcu)
}

void Vcu::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&ndrivemode_) -
    reinterpret_cast<char*>(&header_) + sizeof(ndrivemode_));
}

Vcu::~Vcu() {
  // @@protoc_insertion_point(destructor:atd.drivers.Vcu)
  SharedDtor();
}

void Vcu::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Vcu::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Vcu& Vcu::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fvcu_2eproto::InitDefaults();
  return *internal_default_instance();
}

Vcu* Vcu::New(::google::protobuf::Arena* arena) const {
  Vcu* n = new Vcu;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vcu::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.Vcu)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&fsteeringangle_, 0, reinterpret_cast<char*>(&frearleftwheelspeed_) -
      reinterpret_cast<char*>(&fsteeringangle_) + sizeof(frearleftwheelspeed_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&frearrightwheelspeed_, 0, reinterpret_cast<char*>(&flateralaccel_) -
      reinterpret_cast<char*>(&frearrightwheelspeed_) + sizeof(flateralaccel_));
  }
  if (_has_bits_[16 / 32] & 4128768u) {
    ::memset(&flongituaccel_, 0, reinterpret_cast<char*>(&ndrivemode_) -
      reinterpret_cast<char*>(&flongituaccel_) + sizeof(ndrivemode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Vcu::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.drivers.Vcu)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fSteeringAngle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_fsteeringangle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fsteeringangle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fSpeed = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_fspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fYawRate = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_fyawrate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fyawrate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fFrontLeftWheelSpeed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_ffrontleftwheelspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ffrontleftwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fFrontRightWheelSpeed = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_ffrontrightwheelspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ffrontrightwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fRearLeftWheelSpeed = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_frearleftwheelspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frearleftwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fRearRightWheelSpeed = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_frearrightwheelspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &frearrightwheelspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nShifterPosition = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_nshifterposition();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nshifterposition_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nLeftDirectionLamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_nleftdirectionlamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nleftdirectionlamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nRightDirectionLamp = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_nrightdirectionlamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrightdirectionlamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nMainBeamLamp = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_nmainbeamlamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nmainbeamlamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nDippedBeamLamp = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_ndippedbeamlamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndippedbeamlamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nWiperState = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_nwiperstate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nwiperstate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fLateralAccel = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(133u)) {
          set_has_flateralaccel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flateralaccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fLongituAccel = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(141u)) {
          set_has_flongituaccel();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &flongituaccel_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nLeftDrivenWheelPulseCounters = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_nleftdrivenwheelpulsecounters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nleftdrivenwheelpulsecounters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nRightDrivenWheelPulseCounters = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_nrightdrivenwheelpulsecounters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrightdrivenwheelpulsecounters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nLeftNonDrivenWheelPulseCounters = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_nleftnondrivenwheelpulsecounters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nleftnondrivenwheelpulsecounters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nRightNonDrivenWheelPulseCounters = 21;
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          set_has_nrightnondrivenwheelpulsecounters();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nrightnondrivenwheelpulsecounters_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nDriveMode = 22;
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          set_has_ndrivemode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ndrivemode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.Vcu)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.Vcu)
  return false;
#undef DO_
}

void Vcu::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.Vcu)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional float fSteeringAngle = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fsteeringangle(), output);
  }

  // optional float fSpeed = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->fspeed(), output);
  }

  // optional float fYawRate = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->fyawrate(), output);
  }

  // optional float fFrontLeftWheelSpeed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->ffrontleftwheelspeed(), output);
  }

  // optional float fFrontRightWheelSpeed = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->ffrontrightwheelspeed(), output);
  }

  // optional float fRearLeftWheelSpeed = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->frearleftwheelspeed(), output);
  }

  // optional float fRearRightWheelSpeed = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->frearrightwheelspeed(), output);
  }

  // optional int32 nShifterPosition = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->nshifterposition(), output);
  }

  // optional int32 nLeftDirectionLamp = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->nleftdirectionlamp(), output);
  }

  // optional int32 nRightDirectionLamp = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->nrightdirectionlamp(), output);
  }

  // optional int32 nMainBeamLamp = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->nmainbeamlamp(), output);
  }

  // optional int32 nDippedBeamLamp = 14;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->ndippedbeamlamp(), output);
  }

  // optional int32 nWiperState = 15;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->nwiperstate(), output);
  }

  // optional float fLateralAccel = 16;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->flateralaccel(), output);
  }

  // optional float fLongituAccel = 17;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->flongituaccel(), output);
  }

  // optional int32 nLeftDrivenWheelPulseCounters = 18;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->nleftdrivenwheelpulsecounters(), output);
  }

  // optional int32 nRightDrivenWheelPulseCounters = 19;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->nrightdrivenwheelpulsecounters(), output);
  }

  // optional int32 nLeftNonDrivenWheelPulseCounters = 20;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->nleftnondrivenwheelpulsecounters(), output);
  }

  // optional int32 nRightNonDrivenWheelPulseCounters = 21;
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->nrightnondrivenwheelpulsecounters(), output);
  }

  // optional int32 nDriveMode = 22;
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->ndrivemode(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.drivers.Vcu)
}

size_t Vcu::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.Vcu)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional float fSteeringAngle = 3;
    if (has_fsteeringangle()) {
      total_size += 1 + 4;
    }

    // optional float fSpeed = 4;
    if (has_fspeed()) {
      total_size += 1 + 4;
    }

    // optional float fYawRate = 5;
    if (has_fyawrate()) {
      total_size += 1 + 4;
    }

    // optional float fFrontLeftWheelSpeed = 6;
    if (has_ffrontleftwheelspeed()) {
      total_size += 1 + 4;
    }

    // optional float fFrontRightWheelSpeed = 7;
    if (has_ffrontrightwheelspeed()) {
      total_size += 1 + 4;
    }

    // optional float fRearLeftWheelSpeed = 8;
    if (has_frearleftwheelspeed()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional float fRearRightWheelSpeed = 9;
    if (has_frearrightwheelspeed()) {
      total_size += 1 + 4;
    }

    // optional int32 nShifterPosition = 10;
    if (has_nshifterposition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nshifterposition());
    }

    // optional int32 nLeftDirectionLamp = 11;
    if (has_nleftdirectionlamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nleftdirectionlamp());
    }

    // optional int32 nRightDirectionLamp = 12;
    if (has_nrightdirectionlamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrightdirectionlamp());
    }

    // optional int32 nMainBeamLamp = 13;
    if (has_nmainbeamlamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nmainbeamlamp());
    }

    // optional int32 nDippedBeamLamp = 14;
    if (has_ndippedbeamlamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndippedbeamlamp());
    }

    // optional int32 nWiperState = 15;
    if (has_nwiperstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nwiperstate());
    }

    // optional float fLateralAccel = 16;
    if (has_flateralaccel()) {
      total_size += 2 + 4;
    }

  }
  if (_has_bits_[16 / 32] & 4128768u) {
    // optional float fLongituAccel = 17;
    if (has_flongituaccel()) {
      total_size += 2 + 4;
    }

    // optional int32 nLeftDrivenWheelPulseCounters = 18;
    if (has_nleftdrivenwheelpulsecounters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nleftdrivenwheelpulsecounters());
    }

    // optional int32 nRightDrivenWheelPulseCounters = 19;
    if (has_nrightdrivenwheelpulsecounters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrightdrivenwheelpulsecounters());
    }

    // optional int32 nLeftNonDrivenWheelPulseCounters = 20;
    if (has_nleftnondrivenwheelpulsecounters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nleftnondrivenwheelpulsecounters());
    }

    // optional int32 nRightNonDrivenWheelPulseCounters = 21;
    if (has_nrightnondrivenwheelpulsecounters()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nrightnondrivenwheelpulsecounters());
    }

    // optional int32 nDriveMode = 22;
    if (has_ndrivemode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ndrivemode());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vcu::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Vcu*>(&from));
}

void Vcu::MergeFrom(const Vcu& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.Vcu)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      fsteeringangle_ = from.fsteeringangle_;
    }
    if (cached_has_bits & 0x00000008u) {
      fspeed_ = from.fspeed_;
    }
    if (cached_has_bits & 0x00000010u) {
      fyawrate_ = from.fyawrate_;
    }
    if (cached_has_bits & 0x00000020u) {
      ffrontleftwheelspeed_ = from.ffrontleftwheelspeed_;
    }
    if (cached_has_bits & 0x00000040u) {
      ffrontrightwheelspeed_ = from.ffrontrightwheelspeed_;
    }
    if (cached_has_bits & 0x00000080u) {
      frearleftwheelspeed_ = from.frearleftwheelspeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      frearrightwheelspeed_ = from.frearrightwheelspeed_;
    }
    if (cached_has_bits & 0x00000200u) {
      nshifterposition_ = from.nshifterposition_;
    }
    if (cached_has_bits & 0x00000400u) {
      nleftdirectionlamp_ = from.nleftdirectionlamp_;
    }
    if (cached_has_bits & 0x00000800u) {
      nrightdirectionlamp_ = from.nrightdirectionlamp_;
    }
    if (cached_has_bits & 0x00001000u) {
      nmainbeamlamp_ = from.nmainbeamlamp_;
    }
    if (cached_has_bits & 0x00002000u) {
      ndippedbeamlamp_ = from.ndippedbeamlamp_;
    }
    if (cached_has_bits & 0x00004000u) {
      nwiperstate_ = from.nwiperstate_;
    }
    if (cached_has_bits & 0x00008000u) {
      flateralaccel_ = from.flateralaccel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 4128768u) {
    if (cached_has_bits & 0x00010000u) {
      flongituaccel_ = from.flongituaccel_;
    }
    if (cached_has_bits & 0x00020000u) {
      nleftdrivenwheelpulsecounters_ = from.nleftdrivenwheelpulsecounters_;
    }
    if (cached_has_bits & 0x00040000u) {
      nrightdrivenwheelpulsecounters_ = from.nrightdrivenwheelpulsecounters_;
    }
    if (cached_has_bits & 0x00080000u) {
      nleftnondrivenwheelpulsecounters_ = from.nleftnondrivenwheelpulsecounters_;
    }
    if (cached_has_bits & 0x00100000u) {
      nrightnondrivenwheelpulsecounters_ = from.nrightnondrivenwheelpulsecounters_;
    }
    if (cached_has_bits & 0x00200000u) {
      ndrivemode_ = from.ndrivemode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Vcu::CopyFrom(const Vcu& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.Vcu)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vcu::IsInitialized() const {
  return true;
}

void Vcu::Swap(Vcu* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vcu::InternalSwap(Vcu* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(fsteeringangle_, other->fsteeringangle_);
  std::swap(fspeed_, other->fspeed_);
  std::swap(fyawrate_, other->fyawrate_);
  std::swap(ffrontleftwheelspeed_, other->ffrontleftwheelspeed_);
  std::swap(ffrontrightwheelspeed_, other->ffrontrightwheelspeed_);
  std::swap(frearleftwheelspeed_, other->frearleftwheelspeed_);
  std::swap(frearrightwheelspeed_, other->frearrightwheelspeed_);
  std::swap(nshifterposition_, other->nshifterposition_);
  std::swap(nleftdirectionlamp_, other->nleftdirectionlamp_);
  std::swap(nrightdirectionlamp_, other->nrightdirectionlamp_);
  std::swap(nmainbeamlamp_, other->nmainbeamlamp_);
  std::swap(ndippedbeamlamp_, other->ndippedbeamlamp_);
  std::swap(nwiperstate_, other->nwiperstate_);
  std::swap(flateralaccel_, other->flateralaccel_);
  std::swap(flongituaccel_, other->flongituaccel_);
  std::swap(nleftdrivenwheelpulsecounters_, other->nleftdrivenwheelpulsecounters_);
  std::swap(nrightdrivenwheelpulsecounters_, other->nrightdrivenwheelpulsecounters_);
  std::swap(nleftnondrivenwheelpulsecounters_, other->nleftnondrivenwheelpulsecounters_);
  std::swap(nrightnondrivenwheelpulsecounters_, other->nrightnondrivenwheelpulsecounters_);
  std::swap(ndrivemode_, other->ndrivemode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Vcu::GetTypeName() const {
  return "atd.drivers.Vcu";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vcu

// optional .atd.common.Header header = 1;
bool Vcu::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vcu::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Vcu::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vcu::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Vcu::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Vcu::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Vcu.header)
  return header_;
}
::atd::common::Header* Vcu::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Vcu.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Vcu::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Vcu.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Vcu::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vcu::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Vcu::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vcu::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Vcu::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Vcu::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Vcu.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Vcu::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Vcu.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Vcu::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Vcu.reservedmsg)
}

// optional float fSteeringAngle = 3;
bool Vcu::has_fsteeringangle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vcu::set_has_fsteeringangle() {
  _has_bits_[0] |= 0x00000004u;
}
void Vcu::clear_has_fsteeringangle() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vcu::clear_fsteeringangle() {
  fsteeringangle_ = 0;
  clear_has_fsteeringangle();
}
float Vcu::fsteeringangle() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fSteeringAngle)
  return fsteeringangle_;
}
void Vcu::set_fsteeringangle(float value) {
  set_has_fsteeringangle();
  fsteeringangle_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fSteeringAngle)
}

// optional float fSpeed = 4;
bool Vcu::has_fspeed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Vcu::set_has_fspeed() {
  _has_bits_[0] |= 0x00000008u;
}
void Vcu::clear_has_fspeed() {
  _has_bits_[0] &= ~0x00000008u;
}
void Vcu::clear_fspeed() {
  fspeed_ = 0;
  clear_has_fspeed();
}
float Vcu::fspeed() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fSpeed)
  return fspeed_;
}
void Vcu::set_fspeed(float value) {
  set_has_fspeed();
  fspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fSpeed)
}

// optional float fYawRate = 5;
bool Vcu::has_fyawrate() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Vcu::set_has_fyawrate() {
  _has_bits_[0] |= 0x00000010u;
}
void Vcu::clear_has_fyawrate() {
  _has_bits_[0] &= ~0x00000010u;
}
void Vcu::clear_fyawrate() {
  fyawrate_ = 0;
  clear_has_fyawrate();
}
float Vcu::fyawrate() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fYawRate)
  return fyawrate_;
}
void Vcu::set_fyawrate(float value) {
  set_has_fyawrate();
  fyawrate_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fYawRate)
}

// optional float fFrontLeftWheelSpeed = 6;
bool Vcu::has_ffrontleftwheelspeed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Vcu::set_has_ffrontleftwheelspeed() {
  _has_bits_[0] |= 0x00000020u;
}
void Vcu::clear_has_ffrontleftwheelspeed() {
  _has_bits_[0] &= ~0x00000020u;
}
void Vcu::clear_ffrontleftwheelspeed() {
  ffrontleftwheelspeed_ = 0;
  clear_has_ffrontleftwheelspeed();
}
float Vcu::ffrontleftwheelspeed() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fFrontLeftWheelSpeed)
  return ffrontleftwheelspeed_;
}
void Vcu::set_ffrontleftwheelspeed(float value) {
  set_has_ffrontleftwheelspeed();
  ffrontleftwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fFrontLeftWheelSpeed)
}

// optional float fFrontRightWheelSpeed = 7;
bool Vcu::has_ffrontrightwheelspeed() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Vcu::set_has_ffrontrightwheelspeed() {
  _has_bits_[0] |= 0x00000040u;
}
void Vcu::clear_has_ffrontrightwheelspeed() {
  _has_bits_[0] &= ~0x00000040u;
}
void Vcu::clear_ffrontrightwheelspeed() {
  ffrontrightwheelspeed_ = 0;
  clear_has_ffrontrightwheelspeed();
}
float Vcu::ffrontrightwheelspeed() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fFrontRightWheelSpeed)
  return ffrontrightwheelspeed_;
}
void Vcu::set_ffrontrightwheelspeed(float value) {
  set_has_ffrontrightwheelspeed();
  ffrontrightwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fFrontRightWheelSpeed)
}

// optional float fRearLeftWheelSpeed = 8;
bool Vcu::has_frearleftwheelspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Vcu::set_has_frearleftwheelspeed() {
  _has_bits_[0] |= 0x00000080u;
}
void Vcu::clear_has_frearleftwheelspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
void Vcu::clear_frearleftwheelspeed() {
  frearleftwheelspeed_ = 0;
  clear_has_frearleftwheelspeed();
}
float Vcu::frearleftwheelspeed() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fRearLeftWheelSpeed)
  return frearleftwheelspeed_;
}
void Vcu::set_frearleftwheelspeed(float value) {
  set_has_frearleftwheelspeed();
  frearleftwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fRearLeftWheelSpeed)
}

// optional float fRearRightWheelSpeed = 9;
bool Vcu::has_frearrightwheelspeed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Vcu::set_has_frearrightwheelspeed() {
  _has_bits_[0] |= 0x00000100u;
}
void Vcu::clear_has_frearrightwheelspeed() {
  _has_bits_[0] &= ~0x00000100u;
}
void Vcu::clear_frearrightwheelspeed() {
  frearrightwheelspeed_ = 0;
  clear_has_frearrightwheelspeed();
}
float Vcu::frearrightwheelspeed() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fRearRightWheelSpeed)
  return frearrightwheelspeed_;
}
void Vcu::set_frearrightwheelspeed(float value) {
  set_has_frearrightwheelspeed();
  frearrightwheelspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fRearRightWheelSpeed)
}

// optional int32 nShifterPosition = 10;
bool Vcu::has_nshifterposition() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Vcu::set_has_nshifterposition() {
  _has_bits_[0] |= 0x00000200u;
}
void Vcu::clear_has_nshifterposition() {
  _has_bits_[0] &= ~0x00000200u;
}
void Vcu::clear_nshifterposition() {
  nshifterposition_ = 0;
  clear_has_nshifterposition();
}
::google::protobuf::int32 Vcu::nshifterposition() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nShifterPosition)
  return nshifterposition_;
}
void Vcu::set_nshifterposition(::google::protobuf::int32 value) {
  set_has_nshifterposition();
  nshifterposition_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nShifterPosition)
}

// optional int32 nLeftDirectionLamp = 11;
bool Vcu::has_nleftdirectionlamp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Vcu::set_has_nleftdirectionlamp() {
  _has_bits_[0] |= 0x00000400u;
}
void Vcu::clear_has_nleftdirectionlamp() {
  _has_bits_[0] &= ~0x00000400u;
}
void Vcu::clear_nleftdirectionlamp() {
  nleftdirectionlamp_ = 0;
  clear_has_nleftdirectionlamp();
}
::google::protobuf::int32 Vcu::nleftdirectionlamp() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nLeftDirectionLamp)
  return nleftdirectionlamp_;
}
void Vcu::set_nleftdirectionlamp(::google::protobuf::int32 value) {
  set_has_nleftdirectionlamp();
  nleftdirectionlamp_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nLeftDirectionLamp)
}

// optional int32 nRightDirectionLamp = 12;
bool Vcu::has_nrightdirectionlamp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Vcu::set_has_nrightdirectionlamp() {
  _has_bits_[0] |= 0x00000800u;
}
void Vcu::clear_has_nrightdirectionlamp() {
  _has_bits_[0] &= ~0x00000800u;
}
void Vcu::clear_nrightdirectionlamp() {
  nrightdirectionlamp_ = 0;
  clear_has_nrightdirectionlamp();
}
::google::protobuf::int32 Vcu::nrightdirectionlamp() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nRightDirectionLamp)
  return nrightdirectionlamp_;
}
void Vcu::set_nrightdirectionlamp(::google::protobuf::int32 value) {
  set_has_nrightdirectionlamp();
  nrightdirectionlamp_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nRightDirectionLamp)
}

// optional int32 nMainBeamLamp = 13;
bool Vcu::has_nmainbeamlamp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Vcu::set_has_nmainbeamlamp() {
  _has_bits_[0] |= 0x00001000u;
}
void Vcu::clear_has_nmainbeamlamp() {
  _has_bits_[0] &= ~0x00001000u;
}
void Vcu::clear_nmainbeamlamp() {
  nmainbeamlamp_ = 0;
  clear_has_nmainbeamlamp();
}
::google::protobuf::int32 Vcu::nmainbeamlamp() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nMainBeamLamp)
  return nmainbeamlamp_;
}
void Vcu::set_nmainbeamlamp(::google::protobuf::int32 value) {
  set_has_nmainbeamlamp();
  nmainbeamlamp_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nMainBeamLamp)
}

// optional int32 nDippedBeamLamp = 14;
bool Vcu::has_ndippedbeamlamp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Vcu::set_has_ndippedbeamlamp() {
  _has_bits_[0] |= 0x00002000u;
}
void Vcu::clear_has_ndippedbeamlamp() {
  _has_bits_[0] &= ~0x00002000u;
}
void Vcu::clear_ndippedbeamlamp() {
  ndippedbeamlamp_ = 0;
  clear_has_ndippedbeamlamp();
}
::google::protobuf::int32 Vcu::ndippedbeamlamp() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nDippedBeamLamp)
  return ndippedbeamlamp_;
}
void Vcu::set_ndippedbeamlamp(::google::protobuf::int32 value) {
  set_has_ndippedbeamlamp();
  ndippedbeamlamp_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nDippedBeamLamp)
}

// optional int32 nWiperState = 15;
bool Vcu::has_nwiperstate() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Vcu::set_has_nwiperstate() {
  _has_bits_[0] |= 0x00004000u;
}
void Vcu::clear_has_nwiperstate() {
  _has_bits_[0] &= ~0x00004000u;
}
void Vcu::clear_nwiperstate() {
  nwiperstate_ = 0;
  clear_has_nwiperstate();
}
::google::protobuf::int32 Vcu::nwiperstate() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nWiperState)
  return nwiperstate_;
}
void Vcu::set_nwiperstate(::google::protobuf::int32 value) {
  set_has_nwiperstate();
  nwiperstate_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nWiperState)
}

// optional float fLateralAccel = 16;
bool Vcu::has_flateralaccel() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Vcu::set_has_flateralaccel() {
  _has_bits_[0] |= 0x00008000u;
}
void Vcu::clear_has_flateralaccel() {
  _has_bits_[0] &= ~0x00008000u;
}
void Vcu::clear_flateralaccel() {
  flateralaccel_ = 0;
  clear_has_flateralaccel();
}
float Vcu::flateralaccel() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fLateralAccel)
  return flateralaccel_;
}
void Vcu::set_flateralaccel(float value) {
  set_has_flateralaccel();
  flateralaccel_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fLateralAccel)
}

// optional float fLongituAccel = 17;
bool Vcu::has_flongituaccel() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Vcu::set_has_flongituaccel() {
  _has_bits_[0] |= 0x00010000u;
}
void Vcu::clear_has_flongituaccel() {
  _has_bits_[0] &= ~0x00010000u;
}
void Vcu::clear_flongituaccel() {
  flongituaccel_ = 0;
  clear_has_flongituaccel();
}
float Vcu::flongituaccel() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.fLongituAccel)
  return flongituaccel_;
}
void Vcu::set_flongituaccel(float value) {
  set_has_flongituaccel();
  flongituaccel_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.fLongituAccel)
}

// optional int32 nLeftDrivenWheelPulseCounters = 18;
bool Vcu::has_nleftdrivenwheelpulsecounters() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Vcu::set_has_nleftdrivenwheelpulsecounters() {
  _has_bits_[0] |= 0x00020000u;
}
void Vcu::clear_has_nleftdrivenwheelpulsecounters() {
  _has_bits_[0] &= ~0x00020000u;
}
void Vcu::clear_nleftdrivenwheelpulsecounters() {
  nleftdrivenwheelpulsecounters_ = 0;
  clear_has_nleftdrivenwheelpulsecounters();
}
::google::protobuf::int32 Vcu::nleftdrivenwheelpulsecounters() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nLeftDrivenWheelPulseCounters)
  return nleftdrivenwheelpulsecounters_;
}
void Vcu::set_nleftdrivenwheelpulsecounters(::google::protobuf::int32 value) {
  set_has_nleftdrivenwheelpulsecounters();
  nleftdrivenwheelpulsecounters_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nLeftDrivenWheelPulseCounters)
}

// optional int32 nRightDrivenWheelPulseCounters = 19;
bool Vcu::has_nrightdrivenwheelpulsecounters() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Vcu::set_has_nrightdrivenwheelpulsecounters() {
  _has_bits_[0] |= 0x00040000u;
}
void Vcu::clear_has_nrightdrivenwheelpulsecounters() {
  _has_bits_[0] &= ~0x00040000u;
}
void Vcu::clear_nrightdrivenwheelpulsecounters() {
  nrightdrivenwheelpulsecounters_ = 0;
  clear_has_nrightdrivenwheelpulsecounters();
}
::google::protobuf::int32 Vcu::nrightdrivenwheelpulsecounters() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nRightDrivenWheelPulseCounters)
  return nrightdrivenwheelpulsecounters_;
}
void Vcu::set_nrightdrivenwheelpulsecounters(::google::protobuf::int32 value) {
  set_has_nrightdrivenwheelpulsecounters();
  nrightdrivenwheelpulsecounters_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nRightDrivenWheelPulseCounters)
}

// optional int32 nLeftNonDrivenWheelPulseCounters = 20;
bool Vcu::has_nleftnondrivenwheelpulsecounters() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Vcu::set_has_nleftnondrivenwheelpulsecounters() {
  _has_bits_[0] |= 0x00080000u;
}
void Vcu::clear_has_nleftnondrivenwheelpulsecounters() {
  _has_bits_[0] &= ~0x00080000u;
}
void Vcu::clear_nleftnondrivenwheelpulsecounters() {
  nleftnondrivenwheelpulsecounters_ = 0;
  clear_has_nleftnondrivenwheelpulsecounters();
}
::google::protobuf::int32 Vcu::nleftnondrivenwheelpulsecounters() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nLeftNonDrivenWheelPulseCounters)
  return nleftnondrivenwheelpulsecounters_;
}
void Vcu::set_nleftnondrivenwheelpulsecounters(::google::protobuf::int32 value) {
  set_has_nleftnondrivenwheelpulsecounters();
  nleftnondrivenwheelpulsecounters_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nLeftNonDrivenWheelPulseCounters)
}

// optional int32 nRightNonDrivenWheelPulseCounters = 21;
bool Vcu::has_nrightnondrivenwheelpulsecounters() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Vcu::set_has_nrightnondrivenwheelpulsecounters() {
  _has_bits_[0] |= 0x00100000u;
}
void Vcu::clear_has_nrightnondrivenwheelpulsecounters() {
  _has_bits_[0] &= ~0x00100000u;
}
void Vcu::clear_nrightnondrivenwheelpulsecounters() {
  nrightnondrivenwheelpulsecounters_ = 0;
  clear_has_nrightnondrivenwheelpulsecounters();
}
::google::protobuf::int32 Vcu::nrightnondrivenwheelpulsecounters() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nRightNonDrivenWheelPulseCounters)
  return nrightnondrivenwheelpulsecounters_;
}
void Vcu::set_nrightnondrivenwheelpulsecounters(::google::protobuf::int32 value) {
  set_has_nrightnondrivenwheelpulsecounters();
  nrightnondrivenwheelpulsecounters_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nRightNonDrivenWheelPulseCounters)
}

// optional int32 nDriveMode = 22;
bool Vcu::has_ndrivemode() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Vcu::set_has_ndrivemode() {
  _has_bits_[0] |= 0x00200000u;
}
void Vcu::clear_has_ndrivemode() {
  _has_bits_[0] &= ~0x00200000u;
}
void Vcu::clear_ndrivemode() {
  ndrivemode_ = 0;
  clear_has_ndrivemode();
}
::google::protobuf::int32 Vcu::ndrivemode() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Vcu.nDriveMode)
  return ndrivemode_;
}
void Vcu::set_ndrivemode(::google::protobuf::int32 value) {
  set_has_ndrivemode();
  ndrivemode_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Vcu.nDriveMode)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)
