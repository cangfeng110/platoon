// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/momentaloc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/drivers/momentaloc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace drivers {
class MomentalocDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Momentaloc> {
} _Momentaloc_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Momentaloc_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _Momentaloc_default_instance_.DefaultConstruct();
  _Momentaloc_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Momentaloc_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Momentaloc::kHeaderFieldNumber;
const int Momentaloc::kReservedmsgFieldNumber;
const int Momentaloc::kImageTimeFieldNumber;
const int Momentaloc::kSendTimeFieldNumber;
const int Momentaloc::kXFieldNumber;
const int Momentaloc::kYFieldNumber;
const int Momentaloc::kZFieldNumber;
const int Momentaloc::kThetaFieldNumber;
const int Momentaloc::kInitValidFieldNumber;
const int Momentaloc::kNowValidFieldNumber;
const int Momentaloc::kStdPosFieldNumber;
const int Momentaloc::kQualityFieldNumber;
const int Momentaloc::kResevedFloatFieldNumber;
const int Momentaloc::kResevedIntFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Momentaloc::Momentaloc()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.Momentaloc)
}
Momentaloc::Momentaloc(const Momentaloc& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      reseved_float_(from.reseved_float_),
      reseved_int_(from.reseved_int_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  ::memcpy(&image_time_, &from.image_time_,
    reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&image_time_) + sizeof(quality_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.Momentaloc)
}

void Momentaloc::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&quality_) -
    reinterpret_cast<char*>(&header_) + sizeof(quality_));
}

Momentaloc::~Momentaloc() {
  // @@protoc_insertion_point(destructor:atd.drivers.Momentaloc)
  SharedDtor();
}

void Momentaloc::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Momentaloc::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Momentaloc& Momentaloc::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fmomentaloc_2eproto::InitDefaults();
  return *internal_default_instance();
}

Momentaloc* Momentaloc::New(::google::protobuf::Arena* arena) const {
  Momentaloc* n = new Momentaloc;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Momentaloc::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.Momentaloc)
  reseved_float_.Clear();
  reseved_int_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&image_time_, 0, reinterpret_cast<char*>(&theta_) -
      reinterpret_cast<char*>(&image_time_) + sizeof(theta_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&init_valid_, 0, reinterpret_cast<char*>(&quality_) -
      reinterpret_cast<char*>(&init_valid_) + sizeof(quality_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Momentaloc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.drivers.Momentaloc)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double image_time = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_image_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &image_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double send_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_send_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &send_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float x = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float y = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float z = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float theta = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 init_valid = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_init_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &init_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 now_valid = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_now_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &now_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float std_pos = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_std_pos();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &std_pos_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float quality = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_quality();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &quality_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double reseved_float = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 105u, input, this->mutable_reseved_float())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(106u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_reseved_float())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 reseved_int = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 112u, input, this->mutable_reseved_int())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(114u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reseved_int())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.Momentaloc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.Momentaloc)
  return false;
#undef DO_
}

void Momentaloc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.Momentaloc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional double image_time = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->image_time(), output);
  }

  // optional double send_time = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->send_time(), output);
  }

  // optional float x = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->x(), output);
  }

  // optional float y = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->y(), output);
  }

  // optional float z = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->z(), output);
  }

  // optional float theta = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->theta(), output);
  }

  // optional int32 init_valid = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->init_valid(), output);
  }

  // optional int32 now_valid = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->now_valid(), output);
  }

  // optional float std_pos = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->std_pos(), output);
  }

  // optional float quality = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->quality(), output);
  }

  // repeated double reseved_float = 13;
  for (int i = 0, n = this->reseved_float_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      13, this->reseved_float(i), output);
  }

  // repeated int32 reseved_int = 14;
  for (int i = 0, n = this->reseved_int_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      14, this->reseved_int(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.drivers.Momentaloc)
}

size_t Momentaloc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.Momentaloc)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated double reseved_float = 13;
  {
    unsigned int count = this->reseved_float_size();
    size_t data_size = 8UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reseved_float_size());
    total_size += data_size;
  }

  // repeated int32 reseved_int = 14;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->reseved_int_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->reseved_int_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional double image_time = 3;
    if (has_image_time()) {
      total_size += 1 + 8;
    }

    // optional double send_time = 4;
    if (has_send_time()) {
      total_size += 1 + 8;
    }

    // optional float x = 5;
    if (has_x()) {
      total_size += 1 + 4;
    }

    // optional float y = 6;
    if (has_y()) {
      total_size += 1 + 4;
    }

    // optional float z = 7;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // optional float theta = 8;
    if (has_theta()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional int32 init_valid = 9;
    if (has_init_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->init_valid());
    }

    // optional int32 now_valid = 10;
    if (has_now_valid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->now_valid());
    }

    // optional float std_pos = 11;
    if (has_std_pos()) {
      total_size += 1 + 4;
    }

    // optional float quality = 12;
    if (has_quality()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Momentaloc::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Momentaloc*>(&from));
}

void Momentaloc::MergeFrom(const Momentaloc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.Momentaloc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  reseved_float_.MergeFrom(from.reseved_float_);
  reseved_int_.MergeFrom(from.reseved_int_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      image_time_ = from.image_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      send_time_ = from.send_time_;
    }
    if (cached_has_bits & 0x00000010u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000020u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000040u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000080u) {
      theta_ = from.theta_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      init_valid_ = from.init_valid_;
    }
    if (cached_has_bits & 0x00000200u) {
      now_valid_ = from.now_valid_;
    }
    if (cached_has_bits & 0x00000400u) {
      std_pos_ = from.std_pos_;
    }
    if (cached_has_bits & 0x00000800u) {
      quality_ = from.quality_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Momentaloc::CopyFrom(const Momentaloc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.Momentaloc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Momentaloc::IsInitialized() const {
  return true;
}

void Momentaloc::Swap(Momentaloc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Momentaloc::InternalSwap(Momentaloc* other) {
  reseved_float_.InternalSwap(&other->reseved_float_);
  reseved_int_.InternalSwap(&other->reseved_int_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(image_time_, other->image_time_);
  std::swap(send_time_, other->send_time_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(theta_, other->theta_);
  std::swap(init_valid_, other->init_valid_);
  std::swap(now_valid_, other->now_valid_);
  std::swap(std_pos_, other->std_pos_);
  std::swap(quality_, other->quality_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Momentaloc::GetTypeName() const {
  return "atd.drivers.Momentaloc";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Momentaloc

// optional .atd.common.Header header = 1;
bool Momentaloc::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Momentaloc::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Momentaloc::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Momentaloc::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Momentaloc::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Momentaloc::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Momentaloc.header)
  return header_;
}
::atd::common::Header* Momentaloc::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Momentaloc.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Momentaloc::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Momentaloc.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Momentaloc::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Momentaloc::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Momentaloc::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Momentaloc::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Momentaloc::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Momentaloc::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Momentaloc.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Momentaloc::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Momentaloc.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Momentaloc::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Momentaloc.reservedmsg)
}

// optional double image_time = 3;
bool Momentaloc::has_image_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Momentaloc::set_has_image_time() {
  _has_bits_[0] |= 0x00000004u;
}
void Momentaloc::clear_has_image_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void Momentaloc::clear_image_time() {
  image_time_ = 0;
  clear_has_image_time();
}
double Momentaloc::image_time() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.image_time)
  return image_time_;
}
void Momentaloc::set_image_time(double value) {
  set_has_image_time();
  image_time_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.image_time)
}

// optional double send_time = 4;
bool Momentaloc::has_send_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Momentaloc::set_has_send_time() {
  _has_bits_[0] |= 0x00000008u;
}
void Momentaloc::clear_has_send_time() {
  _has_bits_[0] &= ~0x00000008u;
}
void Momentaloc::clear_send_time() {
  send_time_ = 0;
  clear_has_send_time();
}
double Momentaloc::send_time() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.send_time)
  return send_time_;
}
void Momentaloc::set_send_time(double value) {
  set_has_send_time();
  send_time_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.send_time)
}

// optional float x = 5;
bool Momentaloc::has_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Momentaloc::set_has_x() {
  _has_bits_[0] |= 0x00000010u;
}
void Momentaloc::clear_has_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void Momentaloc::clear_x() {
  x_ = 0;
  clear_has_x();
}
float Momentaloc::x() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.x)
  return x_;
}
void Momentaloc::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.x)
}

// optional float y = 6;
bool Momentaloc::has_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Momentaloc::set_has_y() {
  _has_bits_[0] |= 0x00000020u;
}
void Momentaloc::clear_has_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void Momentaloc::clear_y() {
  y_ = 0;
  clear_has_y();
}
float Momentaloc::y() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.y)
  return y_;
}
void Momentaloc::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.y)
}

// optional float z = 7;
bool Momentaloc::has_z() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Momentaloc::set_has_z() {
  _has_bits_[0] |= 0x00000040u;
}
void Momentaloc::clear_has_z() {
  _has_bits_[0] &= ~0x00000040u;
}
void Momentaloc::clear_z() {
  z_ = 0;
  clear_has_z();
}
float Momentaloc::z() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.z)
  return z_;
}
void Momentaloc::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.z)
}

// optional float theta = 8;
bool Momentaloc::has_theta() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Momentaloc::set_has_theta() {
  _has_bits_[0] |= 0x00000080u;
}
void Momentaloc::clear_has_theta() {
  _has_bits_[0] &= ~0x00000080u;
}
void Momentaloc::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
float Momentaloc::theta() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.theta)
  return theta_;
}
void Momentaloc::set_theta(float value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.theta)
}

// optional int32 init_valid = 9;
bool Momentaloc::has_init_valid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Momentaloc::set_has_init_valid() {
  _has_bits_[0] |= 0x00000100u;
}
void Momentaloc::clear_has_init_valid() {
  _has_bits_[0] &= ~0x00000100u;
}
void Momentaloc::clear_init_valid() {
  init_valid_ = 0;
  clear_has_init_valid();
}
::google::protobuf::int32 Momentaloc::init_valid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.init_valid)
  return init_valid_;
}
void Momentaloc::set_init_valid(::google::protobuf::int32 value) {
  set_has_init_valid();
  init_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.init_valid)
}

// optional int32 now_valid = 10;
bool Momentaloc::has_now_valid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Momentaloc::set_has_now_valid() {
  _has_bits_[0] |= 0x00000200u;
}
void Momentaloc::clear_has_now_valid() {
  _has_bits_[0] &= ~0x00000200u;
}
void Momentaloc::clear_now_valid() {
  now_valid_ = 0;
  clear_has_now_valid();
}
::google::protobuf::int32 Momentaloc::now_valid() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.now_valid)
  return now_valid_;
}
void Momentaloc::set_now_valid(::google::protobuf::int32 value) {
  set_has_now_valid();
  now_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.now_valid)
}

// optional float std_pos = 11;
bool Momentaloc::has_std_pos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Momentaloc::set_has_std_pos() {
  _has_bits_[0] |= 0x00000400u;
}
void Momentaloc::clear_has_std_pos() {
  _has_bits_[0] &= ~0x00000400u;
}
void Momentaloc::clear_std_pos() {
  std_pos_ = 0;
  clear_has_std_pos();
}
float Momentaloc::std_pos() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.std_pos)
  return std_pos_;
}
void Momentaloc::set_std_pos(float value) {
  set_has_std_pos();
  std_pos_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.std_pos)
}

// optional float quality = 12;
bool Momentaloc::has_quality() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Momentaloc::set_has_quality() {
  _has_bits_[0] |= 0x00000800u;
}
void Momentaloc::clear_has_quality() {
  _has_bits_[0] &= ~0x00000800u;
}
void Momentaloc::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
float Momentaloc::quality() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.quality)
  return quality_;
}
void Momentaloc::set_quality(float value) {
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.quality)
}

// repeated double reseved_float = 13;
int Momentaloc::reseved_float_size() const {
  return reseved_float_.size();
}
void Momentaloc::clear_reseved_float() {
  reseved_float_.Clear();
}
double Momentaloc::reseved_float(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.reseved_float)
  return reseved_float_.Get(index);
}
void Momentaloc::set_reseved_float(int index, double value) {
  reseved_float_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.reseved_float)
}
void Momentaloc::add_reseved_float(double value) {
  reseved_float_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Momentaloc.reseved_float)
}
const ::google::protobuf::RepeatedField< double >&
Momentaloc::reseved_float() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Momentaloc.reseved_float)
  return reseved_float_;
}
::google::protobuf::RepeatedField< double >*
Momentaloc::mutable_reseved_float() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Momentaloc.reseved_float)
  return &reseved_float_;
}

// repeated int32 reseved_int = 14;
int Momentaloc::reseved_int_size() const {
  return reseved_int_.size();
}
void Momentaloc::clear_reseved_int() {
  reseved_int_.Clear();
}
::google::protobuf::int32 Momentaloc::reseved_int(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Momentaloc.reseved_int)
  return reseved_int_.Get(index);
}
void Momentaloc::set_reseved_int(int index, ::google::protobuf::int32 value) {
  reseved_int_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.Momentaloc.reseved_int)
}
void Momentaloc::add_reseved_int(::google::protobuf::int32 value) {
  reseved_int_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.Momentaloc.reseved_int)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Momentaloc::reseved_int() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Momentaloc.reseved_int)
  return reseved_int_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Momentaloc::mutable_reseved_int() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Momentaloc.reseved_int)
  return &reseved_int_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)
