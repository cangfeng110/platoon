// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/uwb.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/drivers/uwb.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace drivers {
class UwbDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Uwb> {
} _Uwb_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Uwb_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _Uwb_default_instance_.DefaultConstruct();
  _Uwb_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Uwb_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _Uwb_default_instance_.get_mutable()->uwbpoint_ = const_cast< ::atd::common::PointLLH*>(
      ::atd::common::PointLLH::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Uwb::kHeaderFieldNumber;
const int Uwb::kReservedmsgFieldNumber;
const int Uwb::kUwbpointFieldNumber;
const int Uwb::kHeadingFieldNumber;
const int Uwb::kUwbIdFieldNumber;
const int Uwb::kUwbSendtimeFieldNumber;
const int Uwb::kLongitudeStdFieldNumber;
const int Uwb::kLatitudeStdFieldNumber;
const int Uwb::kHeadingStdFieldNumber;
const int Uwb::kNCreditFieldNumber;
const int Uwb::kPaddinggapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Uwb::Uwb()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.Uwb)
}
Uwb::Uwb(const Uwb& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_uwbpoint()) {
    uwbpoint_ = new ::atd::common::PointLLH(*from.uwbpoint_);
  } else {
    uwbpoint_ = NULL;
  }
  ::memcpy(&heading_, &from.heading_,
    reinterpret_cast<char*>(&paddinggap_) -
    reinterpret_cast<char*>(&heading_) + sizeof(paddinggap_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.Uwb)
}

void Uwb::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&paddinggap_) -
    reinterpret_cast<char*>(&header_) + sizeof(paddinggap_));
}

Uwb::~Uwb() {
  // @@protoc_insertion_point(destructor:atd.drivers.Uwb)
  SharedDtor();
}

void Uwb::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete uwbpoint_;
  }
}

void Uwb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Uwb& Uwb::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fuwb_2eproto::InitDefaults();
  return *internal_default_instance();
}

Uwb* Uwb::New(::google::protobuf::Arena* arena) const {
  Uwb* n = new Uwb;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Uwb::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.Uwb)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_uwbpoint()) {
      GOOGLE_DCHECK(uwbpoint_ != NULL);
      uwbpoint_->::atd::common::PointLLH::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&heading_, 0, reinterpret_cast<char*>(&ncredit_) -
      reinterpret_cast<char*>(&heading_) + sizeof(ncredit_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&latitude_std_, 0, reinterpret_cast<char*>(&paddinggap_) -
      reinterpret_cast<char*>(&latitude_std_) + sizeof(paddinggap_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Uwb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.drivers.Uwb)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.PointLLH uwbpoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_uwbpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 uwb_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_uwb_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &uwb_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double uwb_sendtime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_uwb_sendtime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &uwb_sendtime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude_std = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_longitude_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latitude_std = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(65u)) {
          set_has_latitude_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading_std = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_heading_std();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_std_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nCredit = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_ncredit();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ncredit_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 paddinggap = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_paddinggap();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paddinggap_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.Uwb)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.Uwb)
  return false;
#undef DO_
}

void Uwb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.Uwb)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.common.PointLLH uwbpoint = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->uwbpoint_, output);
  }

  // optional double heading = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading(), output);
  }

  // optional int32 uwb_id = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->uwb_id(), output);
  }

  // optional double uwb_sendtime = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->uwb_sendtime(), output);
  }

  // optional double longitude_std = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->longitude_std(), output);
  }

  // optional double latitude_std = 8;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->latitude_std(), output);
  }

  // optional double heading_std = 9;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->heading_std(), output);
  }

  // optional int32 nCredit = 10;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->ncredit(), output);
  }

  // optional int32 paddinggap = 11;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->paddinggap(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.drivers.Uwb)
}

size_t Uwb::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.Uwb)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.common.PointLLH uwbpoint = 3;
    if (has_uwbpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->uwbpoint_);
    }

    // optional double heading = 4;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // optional double uwb_sendtime = 6;
    if (has_uwb_sendtime()) {
      total_size += 1 + 8;
    }

    // optional double longitude_std = 7;
    if (has_longitude_std()) {
      total_size += 1 + 8;
    }

    // optional int32 uwb_id = 5;
    if (has_uwb_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->uwb_id());
    }

    // optional int32 nCredit = 10;
    if (has_ncredit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ncredit());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional double latitude_std = 8;
    if (has_latitude_std()) {
      total_size += 1 + 8;
    }

    // optional double heading_std = 9;
    if (has_heading_std()) {
      total_size += 1 + 8;
    }

    // optional int32 paddinggap = 11;
    if (has_paddinggap()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paddinggap());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Uwb::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Uwb*>(&from));
}

void Uwb::MergeFrom(const Uwb& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.Uwb)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_uwbpoint()->::atd::common::PointLLH::MergeFrom(from.uwbpoint());
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      uwb_sendtime_ = from.uwb_sendtime_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_std_ = from.longitude_std_;
    }
    if (cached_has_bits & 0x00000040u) {
      uwb_id_ = from.uwb_id_;
    }
    if (cached_has_bits & 0x00000080u) {
      ncredit_ = from.ncredit_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      latitude_std_ = from.latitude_std_;
    }
    if (cached_has_bits & 0x00000200u) {
      heading_std_ = from.heading_std_;
    }
    if (cached_has_bits & 0x00000400u) {
      paddinggap_ = from.paddinggap_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Uwb::CopyFrom(const Uwb& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.Uwb)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Uwb::IsInitialized() const {
  return true;
}

void Uwb::Swap(Uwb* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Uwb::InternalSwap(Uwb* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(uwbpoint_, other->uwbpoint_);
  std::swap(heading_, other->heading_);
  std::swap(uwb_sendtime_, other->uwb_sendtime_);
  std::swap(longitude_std_, other->longitude_std_);
  std::swap(uwb_id_, other->uwb_id_);
  std::swap(ncredit_, other->ncredit_);
  std::swap(latitude_std_, other->latitude_std_);
  std::swap(heading_std_, other->heading_std_);
  std::swap(paddinggap_, other->paddinggap_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Uwb::GetTypeName() const {
  return "atd.drivers.Uwb";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Uwb

// optional .atd.common.Header header = 1;
bool Uwb::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Uwb::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Uwb::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Uwb::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Uwb::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Uwb::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Uwb.header)
  return header_;
}
::atd::common::Header* Uwb::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Uwb.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Uwb::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Uwb.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool Uwb::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Uwb::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Uwb::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Uwb::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Uwb::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Uwb::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Uwb.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Uwb::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Uwb.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Uwb::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Uwb.reservedmsg)
}

// optional .atd.common.PointLLH uwbpoint = 3;
bool Uwb::has_uwbpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Uwb::set_has_uwbpoint() {
  _has_bits_[0] |= 0x00000004u;
}
void Uwb::clear_has_uwbpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
void Uwb::clear_uwbpoint() {
  if (uwbpoint_ != NULL) uwbpoint_->::atd::common::PointLLH::Clear();
  clear_has_uwbpoint();
}
const ::atd::common::PointLLH& Uwb::uwbpoint() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.uwbpoint)
  return uwbpoint_ != NULL ? *uwbpoint_
                         : *::atd::common::PointLLH::internal_default_instance();
}
::atd::common::PointLLH* Uwb::mutable_uwbpoint() {
  set_has_uwbpoint();
  if (uwbpoint_ == NULL) {
    uwbpoint_ = new ::atd::common::PointLLH;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Uwb.uwbpoint)
  return uwbpoint_;
}
::atd::common::PointLLH* Uwb::release_uwbpoint() {
  // @@protoc_insertion_point(field_release:atd.drivers.Uwb.uwbpoint)
  clear_has_uwbpoint();
  ::atd::common::PointLLH* temp = uwbpoint_;
  uwbpoint_ = NULL;
  return temp;
}
void Uwb::set_allocated_uwbpoint(::atd::common::PointLLH* uwbpoint) {
  delete uwbpoint_;
  uwbpoint_ = uwbpoint;
  if (uwbpoint) {
    set_has_uwbpoint();
  } else {
    clear_has_uwbpoint();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Uwb.uwbpoint)
}

// optional double heading = 4;
bool Uwb::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Uwb::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
void Uwb::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
void Uwb::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double Uwb::heading() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.heading)
  return heading_;
}
void Uwb::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.heading)
}

// optional int32 uwb_id = 5;
bool Uwb::has_uwb_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Uwb::set_has_uwb_id() {
  _has_bits_[0] |= 0x00000040u;
}
void Uwb::clear_has_uwb_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void Uwb::clear_uwb_id() {
  uwb_id_ = 0;
  clear_has_uwb_id();
}
::google::protobuf::int32 Uwb::uwb_id() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.uwb_id)
  return uwb_id_;
}
void Uwb::set_uwb_id(::google::protobuf::int32 value) {
  set_has_uwb_id();
  uwb_id_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.uwb_id)
}

// optional double uwb_sendtime = 6;
bool Uwb::has_uwb_sendtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Uwb::set_has_uwb_sendtime() {
  _has_bits_[0] |= 0x00000010u;
}
void Uwb::clear_has_uwb_sendtime() {
  _has_bits_[0] &= ~0x00000010u;
}
void Uwb::clear_uwb_sendtime() {
  uwb_sendtime_ = 0;
  clear_has_uwb_sendtime();
}
double Uwb::uwb_sendtime() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.uwb_sendtime)
  return uwb_sendtime_;
}
void Uwb::set_uwb_sendtime(double value) {
  set_has_uwb_sendtime();
  uwb_sendtime_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.uwb_sendtime)
}

// optional double longitude_std = 7;
bool Uwb::has_longitude_std() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Uwb::set_has_longitude_std() {
  _has_bits_[0] |= 0x00000020u;
}
void Uwb::clear_has_longitude_std() {
  _has_bits_[0] &= ~0x00000020u;
}
void Uwb::clear_longitude_std() {
  longitude_std_ = 0;
  clear_has_longitude_std();
}
double Uwb::longitude_std() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.longitude_std)
  return longitude_std_;
}
void Uwb::set_longitude_std(double value) {
  set_has_longitude_std();
  longitude_std_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.longitude_std)
}

// optional double latitude_std = 8;
bool Uwb::has_latitude_std() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Uwb::set_has_latitude_std() {
  _has_bits_[0] |= 0x00000100u;
}
void Uwb::clear_has_latitude_std() {
  _has_bits_[0] &= ~0x00000100u;
}
void Uwb::clear_latitude_std() {
  latitude_std_ = 0;
  clear_has_latitude_std();
}
double Uwb::latitude_std() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.latitude_std)
  return latitude_std_;
}
void Uwb::set_latitude_std(double value) {
  set_has_latitude_std();
  latitude_std_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.latitude_std)
}

// optional double heading_std = 9;
bool Uwb::has_heading_std() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Uwb::set_has_heading_std() {
  _has_bits_[0] |= 0x00000200u;
}
void Uwb::clear_has_heading_std() {
  _has_bits_[0] &= ~0x00000200u;
}
void Uwb::clear_heading_std() {
  heading_std_ = 0;
  clear_has_heading_std();
}
double Uwb::heading_std() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.heading_std)
  return heading_std_;
}
void Uwb::set_heading_std(double value) {
  set_has_heading_std();
  heading_std_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.heading_std)
}

// optional int32 nCredit = 10;
bool Uwb::has_ncredit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Uwb::set_has_ncredit() {
  _has_bits_[0] |= 0x00000080u;
}
void Uwb::clear_has_ncredit() {
  _has_bits_[0] &= ~0x00000080u;
}
void Uwb::clear_ncredit() {
  ncredit_ = 0;
  clear_has_ncredit();
}
::google::protobuf::int32 Uwb::ncredit() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.nCredit)
  return ncredit_;
}
void Uwb::set_ncredit(::google::protobuf::int32 value) {
  set_has_ncredit();
  ncredit_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.nCredit)
}

// optional int32 paddinggap = 11;
bool Uwb::has_paddinggap() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Uwb::set_has_paddinggap() {
  _has_bits_[0] |= 0x00000400u;
}
void Uwb::clear_has_paddinggap() {
  _has_bits_[0] &= ~0x00000400u;
}
void Uwb::clear_paddinggap() {
  paddinggap_ = 0;
  clear_has_paddinggap();
}
::google::protobuf::int32 Uwb::paddinggap() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Uwb.paddinggap)
  return paddinggap_;
}
void Uwb::set_paddinggap(::google::protobuf::int32 value) {
  set_has_paddinggap();
  paddinggap_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.Uwb.paddinggap)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)
