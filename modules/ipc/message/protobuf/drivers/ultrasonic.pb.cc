// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/drivers/ultrasonic.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/drivers/ultrasonic.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace drivers {
class ULTRASONIC_DISDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ULTRASONIC_DIS> {
} _ULTRASONIC_DIS_default_instance_;
class Perception_ULTRASONICDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Perception_ULTRASONIC> {
} _Perception_ULTRASONIC_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _ULTRASONIC_DIS_default_instance_.Shutdown();
  _Perception_ULTRASONIC_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _ULTRASONIC_DIS_default_instance_.DefaultConstruct();
  _Perception_ULTRASONIC_default_instance_.DefaultConstruct();
  _Perception_ULTRASONIC_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Perception_ULTRASONIC_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ULTRASONIC_DIS::kExParamFieldNumber;
const int ULTRASONIC_DIS::kBOutRangeFieldNumber;
const int ULTRASONIC_DIS::kFDistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ULTRASONIC_DIS::ULTRASONIC_DIS()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.ULTRASONIC_DIS)
}
ULTRASONIC_DIS::ULTRASONIC_DIS(const ULTRASONIC_DIS& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      exparam_(from.exparam_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&boutrange_, &from.boutrange_,
    reinterpret_cast<char*>(&fdist_) -
    reinterpret_cast<char*>(&boutrange_) + sizeof(fdist_));
  // @@protoc_insertion_point(copy_constructor:atd.drivers.ULTRASONIC_DIS)
}

void ULTRASONIC_DIS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&boutrange_, 0, reinterpret_cast<char*>(&fdist_) -
    reinterpret_cast<char*>(&boutrange_) + sizeof(fdist_));
}

ULTRASONIC_DIS::~ULTRASONIC_DIS() {
  // @@protoc_insertion_point(destructor:atd.drivers.ULTRASONIC_DIS)
  SharedDtor();
}

void ULTRASONIC_DIS::SharedDtor() {
}

void ULTRASONIC_DIS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ULTRASONIC_DIS& ULTRASONIC_DIS::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto::InitDefaults();
  return *internal_default_instance();
}

ULTRASONIC_DIS* ULTRASONIC_DIS::New(::google::protobuf::Arena* arena) const {
  ULTRASONIC_DIS* n = new ULTRASONIC_DIS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ULTRASONIC_DIS::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.ULTRASONIC_DIS)
  exparam_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&boutrange_, 0, reinterpret_cast<char*>(&fdist_) -
      reinterpret_cast<char*>(&boutrange_) + sizeof(fdist_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ULTRASONIC_DIS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.drivers.ULTRASONIC_DIS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated float ExParam = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 13u, input, this->mutable_exparam())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(10u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_exparam())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 bOutRange = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_boutrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boutrange_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float fDist = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_fdist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &fdist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.ULTRASONIC_DIS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.ULTRASONIC_DIS)
  return false;
#undef DO_
}

void ULTRASONIC_DIS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.ULTRASONIC_DIS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated float ExParam = 1;
  for (int i = 0, n = this->exparam_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      1, this->exparam(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 bOutRange = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->boutrange(), output);
  }

  // optional float fDist = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->fdist(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.drivers.ULTRASONIC_DIS)
}

size_t ULTRASONIC_DIS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.ULTRASONIC_DIS)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated float ExParam = 1;
  {
    unsigned int count = this->exparam_size();
    size_t data_size = 4UL * count;
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->exparam_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 bOutRange = 2;
    if (has_boutrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boutrange());
    }

    // optional float fDist = 3;
    if (has_fdist()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ULTRASONIC_DIS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ULTRASONIC_DIS*>(&from));
}

void ULTRASONIC_DIS::MergeFrom(const ULTRASONIC_DIS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.ULTRASONIC_DIS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  exparam_.MergeFrom(from.exparam_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      boutrange_ = from.boutrange_;
    }
    if (cached_has_bits & 0x00000002u) {
      fdist_ = from.fdist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ULTRASONIC_DIS::CopyFrom(const ULTRASONIC_DIS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.ULTRASONIC_DIS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ULTRASONIC_DIS::IsInitialized() const {
  return true;
}

void ULTRASONIC_DIS::Swap(ULTRASONIC_DIS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ULTRASONIC_DIS::InternalSwap(ULTRASONIC_DIS* other) {
  exparam_.InternalSwap(&other->exparam_);
  std::swap(boutrange_, other->boutrange_);
  std::swap(fdist_, other->fdist_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ULTRASONIC_DIS::GetTypeName() const {
  return "atd.drivers.ULTRASONIC_DIS";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ULTRASONIC_DIS

// repeated float ExParam = 1;
int ULTRASONIC_DIS::exparam_size() const {
  return exparam_.size();
}
void ULTRASONIC_DIS::clear_exparam() {
  exparam_.Clear();
}
float ULTRASONIC_DIS::exparam(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.ULTRASONIC_DIS.ExParam)
  return exparam_.Get(index);
}
void ULTRASONIC_DIS::set_exparam(int index, float value) {
  exparam_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.drivers.ULTRASONIC_DIS.ExParam)
}
void ULTRASONIC_DIS::add_exparam(float value) {
  exparam_.Add(value);
  // @@protoc_insertion_point(field_add:atd.drivers.ULTRASONIC_DIS.ExParam)
}
const ::google::protobuf::RepeatedField< float >&
ULTRASONIC_DIS::exparam() const {
  // @@protoc_insertion_point(field_list:atd.drivers.ULTRASONIC_DIS.ExParam)
  return exparam_;
}
::google::protobuf::RepeatedField< float >*
ULTRASONIC_DIS::mutable_exparam() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.ULTRASONIC_DIS.ExParam)
  return &exparam_;
}

// optional int32 bOutRange = 2;
bool ULTRASONIC_DIS::has_boutrange() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ULTRASONIC_DIS::set_has_boutrange() {
  _has_bits_[0] |= 0x00000001u;
}
void ULTRASONIC_DIS::clear_has_boutrange() {
  _has_bits_[0] &= ~0x00000001u;
}
void ULTRASONIC_DIS::clear_boutrange() {
  boutrange_ = 0;
  clear_has_boutrange();
}
::google::protobuf::int32 ULTRASONIC_DIS::boutrange() const {
  // @@protoc_insertion_point(field_get:atd.drivers.ULTRASONIC_DIS.bOutRange)
  return boutrange_;
}
void ULTRASONIC_DIS::set_boutrange(::google::protobuf::int32 value) {
  set_has_boutrange();
  boutrange_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.ULTRASONIC_DIS.bOutRange)
}

// optional float fDist = 3;
bool ULTRASONIC_DIS::has_fdist() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ULTRASONIC_DIS::set_has_fdist() {
  _has_bits_[0] |= 0x00000002u;
}
void ULTRASONIC_DIS::clear_has_fdist() {
  _has_bits_[0] &= ~0x00000002u;
}
void ULTRASONIC_DIS::clear_fdist() {
  fdist_ = 0;
  clear_has_fdist();
}
float ULTRASONIC_DIS::fdist() const {
  // @@protoc_insertion_point(field_get:atd.drivers.ULTRASONIC_DIS.fDist)
  return fdist_;
}
void ULTRASONIC_DIS::set_fdist(float value) {
  set_has_fdist();
  fdist_ = value;
  // @@protoc_insertion_point(field_set:atd.drivers.ULTRASONIC_DIS.fDist)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Perception_ULTRASONIC::kHeaderFieldNumber;
const int Perception_ULTRASONIC::kGstProbesFieldNumber;
const int Perception_ULTRASONIC::kReservedmsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Perception_ULTRASONIC::Perception_ULTRASONIC()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.drivers.Perception_ULTRASONIC)
}
Perception_ULTRASONIC::Perception_ULTRASONIC(const Perception_ULTRASONIC& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      gstprobes_(from.gstprobes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.drivers.Perception_ULTRASONIC)
}

void Perception_ULTRASONIC::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reservedmsg_) -
    reinterpret_cast<char*>(&header_) + sizeof(reservedmsg_));
}

Perception_ULTRASONIC::~Perception_ULTRASONIC() {
  // @@protoc_insertion_point(destructor:atd.drivers.Perception_ULTRASONIC)
  SharedDtor();
}

void Perception_ULTRASONIC::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void Perception_ULTRASONIC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Perception_ULTRASONIC& Perception_ULTRASONIC::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdrivers_2fultrasonic_2eproto::InitDefaults();
  return *internal_default_instance();
}

Perception_ULTRASONIC* Perception_ULTRASONIC::New(::google::protobuf::Arena* arena) const {
  Perception_ULTRASONIC* n = new Perception_ULTRASONIC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Perception_ULTRASONIC::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.drivers.Perception_ULTRASONIC)
  gstprobes_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Perception_ULTRASONIC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.drivers.Perception_ULTRASONIC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.drivers.ULTRASONIC_DIS gstProbes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gstprobes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.drivers.Perception_ULTRASONIC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.drivers.Perception_ULTRASONIC)
  return false;
#undef DO_
}

void Perception_ULTRASONIC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.drivers.Perception_ULTRASONIC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // repeated .atd.drivers.ULTRASONIC_DIS gstProbes = 2;
  for (unsigned int i = 0, n = this->gstprobes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->gstprobes(i), output);
  }

  // optional .atd.common.Reserved reservedmsg = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->reservedmsg_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.drivers.Perception_ULTRASONIC)
}

size_t Perception_ULTRASONIC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.drivers.Perception_ULTRASONIC)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.drivers.ULTRASONIC_DIS gstProbes = 2;
  {
    unsigned int count = this->gstprobes_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gstprobes(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 3;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Perception_ULTRASONIC::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Perception_ULTRASONIC*>(&from));
}

void Perception_ULTRASONIC::MergeFrom(const Perception_ULTRASONIC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.drivers.Perception_ULTRASONIC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  gstprobes_.MergeFrom(from.gstprobes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
  }
}

void Perception_ULTRASONIC::CopyFrom(const Perception_ULTRASONIC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.drivers.Perception_ULTRASONIC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Perception_ULTRASONIC::IsInitialized() const {
  return true;
}

void Perception_ULTRASONIC::Swap(Perception_ULTRASONIC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Perception_ULTRASONIC::InternalSwap(Perception_ULTRASONIC* other) {
  gstprobes_.InternalSwap(&other->gstprobes_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Perception_ULTRASONIC::GetTypeName() const {
  return "atd.drivers.Perception_ULTRASONIC";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Perception_ULTRASONIC

// optional .atd.common.Header header = 1;
bool Perception_ULTRASONIC::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Perception_ULTRASONIC::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Perception_ULTRASONIC::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Perception_ULTRASONIC::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Perception_ULTRASONIC::header() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Perception_ULTRASONIC.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Perception_ULTRASONIC::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Perception_ULTRASONIC.header)
  return header_;
}
::atd::common::Header* Perception_ULTRASONIC::release_header() {
  // @@protoc_insertion_point(field_release:atd.drivers.Perception_ULTRASONIC.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Perception_ULTRASONIC::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Perception_ULTRASONIC.header)
}

// repeated .atd.drivers.ULTRASONIC_DIS gstProbes = 2;
int Perception_ULTRASONIC::gstprobes_size() const {
  return gstprobes_.size();
}
void Perception_ULTRASONIC::clear_gstprobes() {
  gstprobes_.Clear();
}
const ::atd::drivers::ULTRASONIC_DIS& Perception_ULTRASONIC::gstprobes(int index) const {
  // @@protoc_insertion_point(field_get:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_.Get(index);
}
::atd::drivers::ULTRASONIC_DIS* Perception_ULTRASONIC::mutable_gstprobes(int index) {
  // @@protoc_insertion_point(field_mutable:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_.Mutable(index);
}
::atd::drivers::ULTRASONIC_DIS* Perception_ULTRASONIC::add_gstprobes() {
  // @@protoc_insertion_point(field_add:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::drivers::ULTRASONIC_DIS >*
Perception_ULTRASONIC::mutable_gstprobes() {
  // @@protoc_insertion_point(field_mutable_list:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return &gstprobes_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::drivers::ULTRASONIC_DIS >&
Perception_ULTRASONIC::gstprobes() const {
  // @@protoc_insertion_point(field_list:atd.drivers.Perception_ULTRASONIC.gstProbes)
  return gstprobes_;
}

// optional .atd.common.Reserved reservedmsg = 3;
bool Perception_ULTRASONIC::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Perception_ULTRASONIC::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void Perception_ULTRASONIC::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void Perception_ULTRASONIC::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& Perception_ULTRASONIC::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.drivers.Perception_ULTRASONIC.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* Perception_ULTRASONIC::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.drivers.Perception_ULTRASONIC.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* Perception_ULTRASONIC::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.drivers.Perception_ULTRASONIC.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void Perception_ULTRASONIC::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.drivers.Perception_ULTRASONIC.reservedmsg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace drivers
}  // namespace atd

// @@protoc_insertion_point(global_scope)
