// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/hdmap/enginelocmap.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
#include "modules/ipc/message/protobuf/localization/pose.pb.h"
#include "modules/ipc/message/protobuf/common/geometry.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Arrow2D;
class Arrow2DDefaultTypeInternal;
extern Arrow2DDefaultTypeInternal _Arrow2D_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Point2D;
class Point2DDefaultTypeInternal;
extern Point2DDefaultTypeInternal _Point2D_default_instance_;
class Point3D;
class Point3DDefaultTypeInternal;
extern Point3DDefaultTypeInternal _Point3D_default_instance_;
class PointENU;
class PointENUDefaultTypeInternal;
extern PointENUDefaultTypeInternal _PointENU_default_instance_;
class PointLLH;
class PointLLHDefaultTypeInternal;
extern PointLLHDefaultTypeInternal _PointLLH_default_instance_;
class Quaternion;
class QuaternionDefaultTypeInternal;
extern QuaternionDefaultTypeInternal _Quaternion_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
}  // namespace common
namespace localization {
class Pose;
class PoseDefaultTypeInternal;
extern PoseDefaultTypeInternal _Pose_default_instance_;
}  // namespace localization
namespace map {
class EngineLocMap;
class EngineLocMapDefaultTypeInternal;
extern EngineLocMapDefaultTypeInternal _EngineLocMap_default_instance_;
class LocElement;
class LocElementDefaultTypeInternal;
extern LocElementDefaultTypeInternal _LocElement_default_instance_;
class LocElements;
class LocElementsDefaultTypeInternal;
extern LocElementsDefaultTypeInternal _LocElements_default_instance_;
}  // namespace map
}  // namespace atd

namespace atd {
namespace map {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto

// ===================================================================

class LocElement : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.map.LocElement) */ {
 public:
  LocElement();
  virtual ~LocElement();

  LocElement(const LocElement& from);

  inline LocElement& operator=(const LocElement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LocElement& default_instance();

  static inline const LocElement* internal_default_instance() {
    return reinterpret_cast<const LocElement*>(
               &_LocElement_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(LocElement* other);

  // implements Message ----------------------------------------------

  inline LocElement* New() const PROTOBUF_FINAL { return New(NULL); }

  LocElement* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LocElement& from);
  void MergeFrom(const LocElement& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocElement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.common.Point2D onepoint = 3;
  int onepoint_size() const;
  void clear_onepoint();
  static const int kOnepointFieldNumber = 3;
  const ::atd::common::Point2D& onepoint(int index) const;
  ::atd::common::Point2D* mutable_onepoint(int index);
  ::atd::common::Point2D* add_onepoint();
  ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
      mutable_onepoint();
  const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
      onepoint() const;

  // optional int32 majortype = 1;
  bool has_majortype() const;
  void clear_majortype();
  static const int kMajortypeFieldNumber = 1;
  ::google::protobuf::int32 majortype() const;
  void set_majortype(::google::protobuf::int32 value);

  // optional int32 minortype = 2;
  bool has_minortype() const;
  void clear_minortype();
  static const int kMinortypeFieldNumber = 2;
  ::google::protobuf::int32 minortype() const;
  void set_minortype(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.map.LocElement)
 private:
  void set_has_majortype();
  void clear_has_majortype();
  void set_has_minortype();
  void clear_has_minortype();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D > onepoint_;
  ::google::protobuf::int32 majortype_;
  ::google::protobuf::int32 minortype_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LocElements : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.map.LocElements) */ {
 public:
  LocElements();
  virtual ~LocElements();

  LocElements(const LocElements& from);

  inline LocElements& operator=(const LocElements& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const LocElements& default_instance();

  static inline const LocElements* internal_default_instance() {
    return reinterpret_cast<const LocElements*>(
               &_LocElements_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(LocElements* other);

  // implements Message ----------------------------------------------

  inline LocElements* New() const PROTOBUF_FINAL { return New(NULL); }

  LocElements* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LocElements& from);
  void MergeFrom(const LocElements& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LocElements* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.map.LocElement oneelement = 2;
  int oneelement_size() const;
  void clear_oneelement();
  static const int kOneelementFieldNumber = 2;
  const ::atd::map::LocElement& oneelement(int index) const;
  ::atd::map::LocElement* mutable_oneelement(int index);
  ::atd::map::LocElement* add_oneelement();
  ::google::protobuf::RepeatedPtrField< ::atd::map::LocElement >*
      mutable_oneelement();
  const ::google::protobuf::RepeatedPtrField< ::atd::map::LocElement >&
      oneelement() const;

  // optional int32 subcode = 1;
  bool has_subcode() const;
  void clear_subcode();
  static const int kSubcodeFieldNumber = 1;
  ::google::protobuf::int32 subcode() const;
  void set_subcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:atd.map.LocElements)
 private:
  void set_has_subcode();
  void clear_has_subcode();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::map::LocElement > oneelement_;
  ::google::protobuf::int32 subcode_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EngineLocMap : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.map.EngineLocMap) */ {
 public:
  EngineLocMap();
  virtual ~EngineLocMap();

  EngineLocMap(const EngineLocMap& from);

  inline EngineLocMap& operator=(const EngineLocMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const EngineLocMap& default_instance();

  static inline const EngineLocMap* internal_default_instance() {
    return reinterpret_cast<const EngineLocMap*>(
               &_EngineLocMap_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(EngineLocMap* other);

  // implements Message ----------------------------------------------

  inline EngineLocMap* New() const PROTOBUF_FINAL { return New(NULL); }

  EngineLocMap* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const EngineLocMap& from);
  void MergeFrom(const EngineLocMap& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(EngineLocMap* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.map.LocElements elements = 4;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 4;
  const ::atd::map::LocElements& elements(int index) const;
  ::atd::map::LocElements* mutable_elements(int index);
  ::atd::map::LocElements* add_elements();
  ::google::protobuf::RepeatedPtrField< ::atd::map::LocElements >*
      mutable_elements();
  const ::google::protobuf::RepeatedPtrField< ::atd::map::LocElements >&
      elements() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.localization.Pose pose = 3;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 3;
  const ::atd::localization::Pose& pose() const;
  ::atd::localization::Pose* mutable_pose();
  ::atd::localization::Pose* release_pose();
  void set_allocated_pose(::atd::localization::Pose* pose);

  // optional .atd.localization.Pose map = 6;
  bool has_map() const;
  void clear_map();
  static const int kMapFieldNumber = 6;
  const ::atd::localization::Pose& map() const;
  ::atd::localization::Pose* mutable_map();
  ::atd::localization::Pose* release_map();
  void set_allocated_map(::atd::localization::Pose* map);

  // optional double map_weight = 5;
  bool has_map_weight() const;
  void clear_map_weight();
  static const int kMapWeightFieldNumber = 5;
  double map_weight() const;
  void set_map_weight(double value);

  // @@protoc_insertion_point(class_scope:atd.map.EngineLocMap)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_pose();
  void clear_has_pose();
  void set_has_map_weight();
  void clear_has_map_weight();
  void set_has_map();
  void clear_has_map();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::map::LocElements > elements_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::localization::Pose* pose_;
  ::atd::localization::Pose* map_;
  double map_weight_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LocElement

// optional int32 majortype = 1;
inline bool LocElement::has_majortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocElement::set_has_majortype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocElement::clear_has_majortype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocElement::clear_majortype() {
  majortype_ = 0;
  clear_has_majortype();
}
inline ::google::protobuf::int32 LocElement::majortype() const {
  // @@protoc_insertion_point(field_get:atd.map.LocElement.majortype)
  return majortype_;
}
inline void LocElement::set_majortype(::google::protobuf::int32 value) {
  set_has_majortype();
  majortype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LocElement.majortype)
}

// optional int32 minortype = 2;
inline bool LocElement::has_minortype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LocElement::set_has_minortype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LocElement::clear_has_minortype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LocElement::clear_minortype() {
  minortype_ = 0;
  clear_has_minortype();
}
inline ::google::protobuf::int32 LocElement::minortype() const {
  // @@protoc_insertion_point(field_get:atd.map.LocElement.minortype)
  return minortype_;
}
inline void LocElement::set_minortype(::google::protobuf::int32 value) {
  set_has_minortype();
  minortype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LocElement.minortype)
}

// repeated .atd.common.Point2D onepoint = 3;
inline int LocElement::onepoint_size() const {
  return onepoint_.size();
}
inline void LocElement::clear_onepoint() {
  onepoint_.Clear();
}
inline const ::atd::common::Point2D& LocElement::onepoint(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.LocElement.onepoint)
  return onepoint_.Get(index);
}
inline ::atd::common::Point2D* LocElement::mutable_onepoint(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.LocElement.onepoint)
  return onepoint_.Mutable(index);
}
inline ::atd::common::Point2D* LocElement::add_onepoint() {
  // @@protoc_insertion_point(field_add:atd.map.LocElement.onepoint)
  return onepoint_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
LocElement::mutable_onepoint() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.LocElement.onepoint)
  return &onepoint_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
LocElement::onepoint() const {
  // @@protoc_insertion_point(field_list:atd.map.LocElement.onepoint)
  return onepoint_;
}

// -------------------------------------------------------------------

// LocElements

// optional int32 subcode = 1;
inline bool LocElements::has_subcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LocElements::set_has_subcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LocElements::clear_has_subcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LocElements::clear_subcode() {
  subcode_ = 0;
  clear_has_subcode();
}
inline ::google::protobuf::int32 LocElements::subcode() const {
  // @@protoc_insertion_point(field_get:atd.map.LocElements.subcode)
  return subcode_;
}
inline void LocElements::set_subcode(::google::protobuf::int32 value) {
  set_has_subcode();
  subcode_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LocElements.subcode)
}

// repeated .atd.map.LocElement oneelement = 2;
inline int LocElements::oneelement_size() const {
  return oneelement_.size();
}
inline void LocElements::clear_oneelement() {
  oneelement_.Clear();
}
inline const ::atd::map::LocElement& LocElements::oneelement(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.LocElements.oneelement)
  return oneelement_.Get(index);
}
inline ::atd::map::LocElement* LocElements::mutable_oneelement(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.LocElements.oneelement)
  return oneelement_.Mutable(index);
}
inline ::atd::map::LocElement* LocElements::add_oneelement() {
  // @@protoc_insertion_point(field_add:atd.map.LocElements.oneelement)
  return oneelement_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::map::LocElement >*
LocElements::mutable_oneelement() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.LocElements.oneelement)
  return &oneelement_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::map::LocElement >&
LocElements::oneelement() const {
  // @@protoc_insertion_point(field_list:atd.map.LocElements.oneelement)
  return oneelement_;
}

// -------------------------------------------------------------------

// EngineLocMap

// optional .atd.common.Header header = 1;
inline bool EngineLocMap::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EngineLocMap::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EngineLocMap::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EngineLocMap::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& EngineLocMap::header() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* EngineLocMap::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.header)
  return header_;
}
inline ::atd::common::Header* EngineLocMap::release_header() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void EngineLocMap::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool EngineLocMap::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EngineLocMap::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EngineLocMap::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EngineLocMap::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& EngineLocMap::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* EngineLocMap::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* EngineLocMap::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void EngineLocMap::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
inline bool EngineLocMap::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EngineLocMap::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EngineLocMap::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EngineLocMap::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
inline const ::atd::localization::Pose& EngineLocMap::pose() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
inline ::atd::localization::Pose* EngineLocMap::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.pose)
  return pose_;
}
inline ::atd::localization::Pose* EngineLocMap::release_pose() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline void EngineLocMap::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.pose)
}

// repeated .atd.map.LocElements elements = 4;
inline int EngineLocMap::elements_size() const {
  return elements_.size();
}
inline void EngineLocMap::clear_elements() {
  elements_.Clear();
}
inline const ::atd::map::LocElements& EngineLocMap::elements(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.elements)
  return elements_.Get(index);
}
inline ::atd::map::LocElements* EngineLocMap::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.elements)
  return elements_.Mutable(index);
}
inline ::atd::map::LocElements* EngineLocMap::add_elements() {
  // @@protoc_insertion_point(field_add:atd.map.EngineLocMap.elements)
  return elements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::map::LocElements >*
EngineLocMap::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.EngineLocMap.elements)
  return &elements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::map::LocElements >&
EngineLocMap::elements() const {
  // @@protoc_insertion_point(field_list:atd.map.EngineLocMap.elements)
  return elements_;
}

// optional double map_weight = 5;
inline bool EngineLocMap::has_map_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void EngineLocMap::set_has_map_weight() {
  _has_bits_[0] |= 0x00000010u;
}
inline void EngineLocMap::clear_has_map_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void EngineLocMap::clear_map_weight() {
  map_weight_ = 0;
  clear_has_map_weight();
}
inline double EngineLocMap::map_weight() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.map_weight)
  return map_weight_;
}
inline void EngineLocMap::set_map_weight(double value) {
  set_has_map_weight();
  map_weight_ = value;
  // @@protoc_insertion_point(field_set:atd.map.EngineLocMap.map_weight)
}

// optional .atd.localization.Pose map = 6;
inline bool EngineLocMap::has_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void EngineLocMap::set_has_map() {
  _has_bits_[0] |= 0x00000008u;
}
inline void EngineLocMap::clear_has_map() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void EngineLocMap::clear_map() {
  if (map_ != NULL) map_->::atd::localization::Pose::Clear();
  clear_has_map();
}
inline const ::atd::localization::Pose& EngineLocMap::map() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.map)
  return map_ != NULL ? *map_
                         : *::atd::localization::Pose::internal_default_instance();
}
inline ::atd::localization::Pose* EngineLocMap::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    map_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.map)
  return map_;
}
inline ::atd::localization::Pose* EngineLocMap::release_map() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.map)
  clear_has_map();
  ::atd::localization::Pose* temp = map_;
  map_ = NULL;
  return temp;
}
inline void EngineLocMap::set_allocated_map(::atd::localization::Pose* map) {
  delete map_;
  map_ = map;
  if (map) {
    set_has_map();
  } else {
    clear_has_map();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.map)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace map
}  // namespace atd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto__INCLUDED
