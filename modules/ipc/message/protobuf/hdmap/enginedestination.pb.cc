// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/hdmap/enginedestination.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/hdmap/enginedestination.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace map {
class DesParkingKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesParkingKey> {
} _DesParkingKey_default_instance_;
class DesPointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesPoint> {
} _DesPoint_default_instance_;
class DesPointListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesPointList> {
} _DesPointList_default_instance_;
class DesTaskIDDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesTaskID> {
} _DesTaskID_default_instance_;
class EngineDestinationDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EngineDestination> {
} _EngineDestination_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DesParkingKey_default_instance_.Shutdown();
  _DesPoint_default_instance_.Shutdown();
  _DesPointList_default_instance_.Shutdown();
  _DesTaskID_default_instance_.Shutdown();
  _EngineDestination_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _DesParkingKey_default_instance_.DefaultConstruct();
  _DesPoint_default_instance_.DefaultConstruct();
  _DesPointList_default_instance_.DefaultConstruct();
  _DesTaskID_default_instance_.DefaultConstruct();
  _EngineDestination_default_instance_.DefaultConstruct();
  _EngineDestination_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _EngineDestination_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _EngineDestination_default_instance_.get_mutable()->des_parkingkey_ = const_cast< ::atd::map::DesParkingKey*>(
      ::atd::map::DesParkingKey::internal_default_instance());
  _EngineDestination_default_instance_.get_mutable()->des_pointlist_ = const_cast< ::atd::map::DesPointList*>(
      ::atd::map::DesPointList::internal_default_instance());
  _EngineDestination_default_instance_.get_mutable()->des_taskid_ = const_cast< ::atd::map::DesTaskID*>(
      ::atd::map::DesTaskID::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto

bool EngineDestination_NaviSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EngineDestination_NaviSource EngineDestination::UNKNOWN;
const EngineDestination_NaviSource EngineDestination::DEBUG;
const EngineDestination_NaviSource EngineDestination::APP;
const EngineDestination_NaviSource EngineDestination::FICM;
const EngineDestination_NaviSource EngineDestination::DRIVERSYS;
const EngineDestination_NaviSource EngineDestination::NaviSource_MIN;
const EngineDestination_NaviSource EngineDestination::NaviSource_MAX;
const int EngineDestination::NaviSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesParkingKey::kGaragekeyFieldNumber;
const int DesParkingKey::kFloorkeyFieldNumber;
const int DesParkingKey::kAreakeyFieldNumber;
const int DesParkingKey::kLotkeyFieldNumber;
const int DesParkingKey::kGaragestrFieldNumber;
const int DesParkingKey::kFloorstrFieldNumber;
const int DesParkingKey::kAreastrFieldNumber;
const int DesParkingKey::kLotstrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesParkingKey::DesParkingKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.DesParkingKey)
}
DesParkingKey::DesParkingKey(const DesParkingKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  garagestr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_garagestr()) {
    garagestr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.garagestr_);
  }
  floorstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_floorstr()) {
    floorstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floorstr_);
  }
  areastr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_areastr()) {
    areastr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.areastr_);
  }
  lotstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_lotstr()) {
    lotstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lotstr_);
  }
  ::memcpy(&garagekey_, &from.garagekey_,
    reinterpret_cast<char*>(&lotkey_) -
    reinterpret_cast<char*>(&garagekey_) + sizeof(lotkey_));
  // @@protoc_insertion_point(copy_constructor:atd.map.DesParkingKey)
}

void DesParkingKey::SharedCtor() {
  _cached_size_ = 0;
  garagestr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floorstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  areastr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lotstr_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&garagekey_, 0, reinterpret_cast<char*>(&lotkey_) -
    reinterpret_cast<char*>(&garagekey_) + sizeof(lotkey_));
}

DesParkingKey::~DesParkingKey() {
  // @@protoc_insertion_point(destructor:atd.map.DesParkingKey)
  SharedDtor();
}

void DesParkingKey::SharedDtor() {
  garagestr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  floorstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  areastr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lotstr_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DesParkingKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesParkingKey& DesParkingKey::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesParkingKey* DesParkingKey::New(::google::protobuf::Arena* arena) const {
  DesParkingKey* n = new DesParkingKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesParkingKey::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.DesParkingKey)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_garagestr()) {
      GOOGLE_DCHECK(!garagestr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*garagestr_.UnsafeRawStringPointer())->clear();
    }
    if (has_floorstr()) {
      GOOGLE_DCHECK(!floorstr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*floorstr_.UnsafeRawStringPointer())->clear();
    }
    if (has_areastr()) {
      GOOGLE_DCHECK(!areastr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*areastr_.UnsafeRawStringPointer())->clear();
    }
    if (has_lotstr()) {
      GOOGLE_DCHECK(!lotstr_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*lotstr_.UnsafeRawStringPointer())->clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&garagekey_, 0, reinterpret_cast<char*>(&lotkey_) -
      reinterpret_cast<char*>(&garagekey_) + sizeof(lotkey_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DesParkingKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.DesParkingKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 garagekey = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_garagekey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &garagekey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 floorkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_floorkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &floorkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 areakey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_areakey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &areakey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lotkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_lotkey();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lotkey_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string garagestr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_garagestr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string floorstr = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_floorstr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string areastr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_areastr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string lotstr = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lotstr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.DesParkingKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.DesParkingKey)
  return false;
#undef DO_
}

void DesParkingKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.DesParkingKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 garagekey = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->garagekey(), output);
  }

  // optional int32 floorkey = 2;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->floorkey(), output);
  }

  // optional int32 areakey = 3;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->areakey(), output);
  }

  // optional int32 lotkey = 4;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lotkey(), output);
  }

  // optional string garagestr = 5;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->garagestr(), output);
  }

  // optional string floorstr = 6;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->floorstr(), output);
  }

  // optional string areastr = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->areastr(), output);
  }

  // optional string lotstr = 8;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->lotstr(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.DesParkingKey)
}

size_t DesParkingKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.DesParkingKey)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional string garagestr = 5;
    if (has_garagestr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->garagestr());
    }

    // optional string floorstr = 6;
    if (has_floorstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->floorstr());
    }

    // optional string areastr = 7;
    if (has_areastr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->areastr());
    }

    // optional string lotstr = 8;
    if (has_lotstr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lotstr());
    }

    // optional int32 garagekey = 1;
    if (has_garagekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->garagekey());
    }

    // optional int32 floorkey = 2;
    if (has_floorkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->floorkey());
    }

    // optional int32 areakey = 3;
    if (has_areakey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->areakey());
    }

    // optional int32 lotkey = 4;
    if (has_lotkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lotkey());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesParkingKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesParkingKey*>(&from));
}

void DesParkingKey::MergeFrom(const DesParkingKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.DesParkingKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_garagestr();
      garagestr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.garagestr_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_floorstr();
      floorstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.floorstr_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_areastr();
      areastr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.areastr_);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_lotstr();
      lotstr_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.lotstr_);
    }
    if (cached_has_bits & 0x00000010u) {
      garagekey_ = from.garagekey_;
    }
    if (cached_has_bits & 0x00000020u) {
      floorkey_ = from.floorkey_;
    }
    if (cached_has_bits & 0x00000040u) {
      areakey_ = from.areakey_;
    }
    if (cached_has_bits & 0x00000080u) {
      lotkey_ = from.lotkey_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DesParkingKey::CopyFrom(const DesParkingKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.DesParkingKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesParkingKey::IsInitialized() const {
  return true;
}

void DesParkingKey::Swap(DesParkingKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesParkingKey::InternalSwap(DesParkingKey* other) {
  garagestr_.Swap(&other->garagestr_);
  floorstr_.Swap(&other->floorstr_);
  areastr_.Swap(&other->areastr_);
  lotstr_.Swap(&other->lotstr_);
  std::swap(garagekey_, other->garagekey_);
  std::swap(floorkey_, other->floorkey_);
  std::swap(areakey_, other->areakey_);
  std::swap(lotkey_, other->lotkey_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesParkingKey::GetTypeName() const {
  return "atd.map.DesParkingKey";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesParkingKey

// optional int32 garagekey = 1;
bool DesParkingKey::has_garagekey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DesParkingKey::set_has_garagekey() {
  _has_bits_[0] |= 0x00000010u;
}
void DesParkingKey::clear_has_garagekey() {
  _has_bits_[0] &= ~0x00000010u;
}
void DesParkingKey::clear_garagekey() {
  garagekey_ = 0;
  clear_has_garagekey();
}
::google::protobuf::int32 DesParkingKey::garagekey() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.garagekey)
  return garagekey_;
}
void DesParkingKey::set_garagekey(::google::protobuf::int32 value) {
  set_has_garagekey();
  garagekey_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.garagekey)
}

// optional int32 floorkey = 2;
bool DesParkingKey::has_floorkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DesParkingKey::set_has_floorkey() {
  _has_bits_[0] |= 0x00000020u;
}
void DesParkingKey::clear_has_floorkey() {
  _has_bits_[0] &= ~0x00000020u;
}
void DesParkingKey::clear_floorkey() {
  floorkey_ = 0;
  clear_has_floorkey();
}
::google::protobuf::int32 DesParkingKey::floorkey() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.floorkey)
  return floorkey_;
}
void DesParkingKey::set_floorkey(::google::protobuf::int32 value) {
  set_has_floorkey();
  floorkey_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.floorkey)
}

// optional int32 areakey = 3;
bool DesParkingKey::has_areakey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DesParkingKey::set_has_areakey() {
  _has_bits_[0] |= 0x00000040u;
}
void DesParkingKey::clear_has_areakey() {
  _has_bits_[0] &= ~0x00000040u;
}
void DesParkingKey::clear_areakey() {
  areakey_ = 0;
  clear_has_areakey();
}
::google::protobuf::int32 DesParkingKey::areakey() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.areakey)
  return areakey_;
}
void DesParkingKey::set_areakey(::google::protobuf::int32 value) {
  set_has_areakey();
  areakey_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.areakey)
}

// optional int32 lotkey = 4;
bool DesParkingKey::has_lotkey() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DesParkingKey::set_has_lotkey() {
  _has_bits_[0] |= 0x00000080u;
}
void DesParkingKey::clear_has_lotkey() {
  _has_bits_[0] &= ~0x00000080u;
}
void DesParkingKey::clear_lotkey() {
  lotkey_ = 0;
  clear_has_lotkey();
}
::google::protobuf::int32 DesParkingKey::lotkey() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.lotkey)
  return lotkey_;
}
void DesParkingKey::set_lotkey(::google::protobuf::int32 value) {
  set_has_lotkey();
  lotkey_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.lotkey)
}

// optional string garagestr = 5;
bool DesParkingKey::has_garagestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DesParkingKey::set_has_garagestr() {
  _has_bits_[0] |= 0x00000001u;
}
void DesParkingKey::clear_has_garagestr() {
  _has_bits_[0] &= ~0x00000001u;
}
void DesParkingKey::clear_garagestr() {
  garagestr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_garagestr();
}
const ::std::string& DesParkingKey::garagestr() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.garagestr)
  return garagestr_.GetNoArena();
}
void DesParkingKey::set_garagestr(const ::std::string& value) {
  set_has_garagestr();
  garagestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.garagestr)
}
#if LANG_CXX11
void DesParkingKey::set_garagestr(::std::string&& value) {
  set_has_garagestr();
  garagestr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.map.DesParkingKey.garagestr)
}
#endif
void DesParkingKey::set_garagestr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_garagestr();
  garagestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.map.DesParkingKey.garagestr)
}
void DesParkingKey::set_garagestr(const char* value, size_t size) {
  set_has_garagestr();
  garagestr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.map.DesParkingKey.garagestr)
}
::std::string* DesParkingKey::mutable_garagestr() {
  set_has_garagestr();
  // @@protoc_insertion_point(field_mutable:atd.map.DesParkingKey.garagestr)
  return garagestr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DesParkingKey::release_garagestr() {
  // @@protoc_insertion_point(field_release:atd.map.DesParkingKey.garagestr)
  clear_has_garagestr();
  return garagestr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DesParkingKey::set_allocated_garagestr(::std::string* garagestr) {
  if (garagestr != NULL) {
    set_has_garagestr();
  } else {
    clear_has_garagestr();
  }
  garagestr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), garagestr);
  // @@protoc_insertion_point(field_set_allocated:atd.map.DesParkingKey.garagestr)
}

// optional string floorstr = 6;
bool DesParkingKey::has_floorstr() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DesParkingKey::set_has_floorstr() {
  _has_bits_[0] |= 0x00000002u;
}
void DesParkingKey::clear_has_floorstr() {
  _has_bits_[0] &= ~0x00000002u;
}
void DesParkingKey::clear_floorstr() {
  floorstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_floorstr();
}
const ::std::string& DesParkingKey::floorstr() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.floorstr)
  return floorstr_.GetNoArena();
}
void DesParkingKey::set_floorstr(const ::std::string& value) {
  set_has_floorstr();
  floorstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.floorstr)
}
#if LANG_CXX11
void DesParkingKey::set_floorstr(::std::string&& value) {
  set_has_floorstr();
  floorstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.map.DesParkingKey.floorstr)
}
#endif
void DesParkingKey::set_floorstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_floorstr();
  floorstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.map.DesParkingKey.floorstr)
}
void DesParkingKey::set_floorstr(const char* value, size_t size) {
  set_has_floorstr();
  floorstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.map.DesParkingKey.floorstr)
}
::std::string* DesParkingKey::mutable_floorstr() {
  set_has_floorstr();
  // @@protoc_insertion_point(field_mutable:atd.map.DesParkingKey.floorstr)
  return floorstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DesParkingKey::release_floorstr() {
  // @@protoc_insertion_point(field_release:atd.map.DesParkingKey.floorstr)
  clear_has_floorstr();
  return floorstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DesParkingKey::set_allocated_floorstr(::std::string* floorstr) {
  if (floorstr != NULL) {
    set_has_floorstr();
  } else {
    clear_has_floorstr();
  }
  floorstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), floorstr);
  // @@protoc_insertion_point(field_set_allocated:atd.map.DesParkingKey.floorstr)
}

// optional string areastr = 7;
bool DesParkingKey::has_areastr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DesParkingKey::set_has_areastr() {
  _has_bits_[0] |= 0x00000004u;
}
void DesParkingKey::clear_has_areastr() {
  _has_bits_[0] &= ~0x00000004u;
}
void DesParkingKey::clear_areastr() {
  areastr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_areastr();
}
const ::std::string& DesParkingKey::areastr() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.areastr)
  return areastr_.GetNoArena();
}
void DesParkingKey::set_areastr(const ::std::string& value) {
  set_has_areastr();
  areastr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.areastr)
}
#if LANG_CXX11
void DesParkingKey::set_areastr(::std::string&& value) {
  set_has_areastr();
  areastr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.map.DesParkingKey.areastr)
}
#endif
void DesParkingKey::set_areastr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_areastr();
  areastr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.map.DesParkingKey.areastr)
}
void DesParkingKey::set_areastr(const char* value, size_t size) {
  set_has_areastr();
  areastr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.map.DesParkingKey.areastr)
}
::std::string* DesParkingKey::mutable_areastr() {
  set_has_areastr();
  // @@protoc_insertion_point(field_mutable:atd.map.DesParkingKey.areastr)
  return areastr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DesParkingKey::release_areastr() {
  // @@protoc_insertion_point(field_release:atd.map.DesParkingKey.areastr)
  clear_has_areastr();
  return areastr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DesParkingKey::set_allocated_areastr(::std::string* areastr) {
  if (areastr != NULL) {
    set_has_areastr();
  } else {
    clear_has_areastr();
  }
  areastr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), areastr);
  // @@protoc_insertion_point(field_set_allocated:atd.map.DesParkingKey.areastr)
}

// optional string lotstr = 8;
bool DesParkingKey::has_lotstr() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DesParkingKey::set_has_lotstr() {
  _has_bits_[0] |= 0x00000008u;
}
void DesParkingKey::clear_has_lotstr() {
  _has_bits_[0] &= ~0x00000008u;
}
void DesParkingKey::clear_lotstr() {
  lotstr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_lotstr();
}
const ::std::string& DesParkingKey::lotstr() const {
  // @@protoc_insertion_point(field_get:atd.map.DesParkingKey.lotstr)
  return lotstr_.GetNoArena();
}
void DesParkingKey::set_lotstr(const ::std::string& value) {
  set_has_lotstr();
  lotstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.map.DesParkingKey.lotstr)
}
#if LANG_CXX11
void DesParkingKey::set_lotstr(::std::string&& value) {
  set_has_lotstr();
  lotstr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.map.DesParkingKey.lotstr)
}
#endif
void DesParkingKey::set_lotstr(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_lotstr();
  lotstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.map.DesParkingKey.lotstr)
}
void DesParkingKey::set_lotstr(const char* value, size_t size) {
  set_has_lotstr();
  lotstr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.map.DesParkingKey.lotstr)
}
::std::string* DesParkingKey::mutable_lotstr() {
  set_has_lotstr();
  // @@protoc_insertion_point(field_mutable:atd.map.DesParkingKey.lotstr)
  return lotstr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DesParkingKey::release_lotstr() {
  // @@protoc_insertion_point(field_release:atd.map.DesParkingKey.lotstr)
  clear_has_lotstr();
  return lotstr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DesParkingKey::set_allocated_lotstr(::std::string* lotstr) {
  if (lotstr != NULL) {
    set_has_lotstr();
  } else {
    clear_has_lotstr();
  }
  lotstr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), lotstr);
  // @@protoc_insertion_point(field_set_allocated:atd.map.DesParkingKey.lotstr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesPoint::kLongiFieldNumber;
const int DesPoint::kLatiFieldNumber;
const int DesPoint::kLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesPoint::DesPoint()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.DesPoint)
}
DesPoint::DesPoint(const DesPoint& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&longi_, &from.longi_,
    reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&longi_) + sizeof(level_));
  // @@protoc_insertion_point(copy_constructor:atd.map.DesPoint)
}

void DesPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&longi_, 0, reinterpret_cast<char*>(&level_) -
    reinterpret_cast<char*>(&longi_) + sizeof(level_));
}

DesPoint::~DesPoint() {
  // @@protoc_insertion_point(destructor:atd.map.DesPoint)
  SharedDtor();
}

void DesPoint::SharedDtor() {
}

void DesPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesPoint& DesPoint::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesPoint* DesPoint::New(::google::protobuf::Arena* arena) const {
  DesPoint* n = new DesPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.DesPoint)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&longi_, 0, reinterpret_cast<char*>(&level_) -
      reinterpret_cast<char*>(&longi_) + sizeof(level_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DesPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.DesPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 longi = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_longi();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &longi_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 lati = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_lati();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lati_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.DesPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.DesPoint)
  return false;
#undef DO_
}

void DesPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.DesPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 longi = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->longi(), output);
  }

  // optional int32 lati = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lati(), output);
  }

  // optional int32 level = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.DesPoint)
}

size_t DesPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.DesPoint)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 longi = 1;
    if (has_longi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->longi());
    }

    // optional int32 lati = 2;
    if (has_lati()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lati());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesPoint::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesPoint*>(&from));
}

void DesPoint::MergeFrom(const DesPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.DesPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      longi_ = from.longi_;
    }
    if (cached_has_bits & 0x00000002u) {
      lati_ = from.lati_;
    }
    if (cached_has_bits & 0x00000004u) {
      level_ = from.level_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DesPoint::CopyFrom(const DesPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.DesPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesPoint::IsInitialized() const {
  return true;
}

void DesPoint::Swap(DesPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesPoint::InternalSwap(DesPoint* other) {
  std::swap(longi_, other->longi_);
  std::swap(lati_, other->lati_);
  std::swap(level_, other->level_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesPoint::GetTypeName() const {
  return "atd.map.DesPoint";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesPoint

// optional int32 longi = 1;
bool DesPoint::has_longi() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DesPoint::set_has_longi() {
  _has_bits_[0] |= 0x00000001u;
}
void DesPoint::clear_has_longi() {
  _has_bits_[0] &= ~0x00000001u;
}
void DesPoint::clear_longi() {
  longi_ = 0;
  clear_has_longi();
}
::google::protobuf::int32 DesPoint::longi() const {
  // @@protoc_insertion_point(field_get:atd.map.DesPoint.longi)
  return longi_;
}
void DesPoint::set_longi(::google::protobuf::int32 value) {
  set_has_longi();
  longi_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesPoint.longi)
}

// optional int32 lati = 2;
bool DesPoint::has_lati() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DesPoint::set_has_lati() {
  _has_bits_[0] |= 0x00000002u;
}
void DesPoint::clear_has_lati() {
  _has_bits_[0] &= ~0x00000002u;
}
void DesPoint::clear_lati() {
  lati_ = 0;
  clear_has_lati();
}
::google::protobuf::int32 DesPoint::lati() const {
  // @@protoc_insertion_point(field_get:atd.map.DesPoint.lati)
  return lati_;
}
void DesPoint::set_lati(::google::protobuf::int32 value) {
  set_has_lati();
  lati_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesPoint.lati)
}

// optional int32 level = 3;
bool DesPoint::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DesPoint::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
void DesPoint::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
void DesPoint::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 DesPoint::level() const {
  // @@protoc_insertion_point(field_get:atd.map.DesPoint.level)
  return level_;
}
void DesPoint::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesPoint.level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesPointList::kDestpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesPointList::DesPointList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.DesPointList)
}
DesPointList::DesPointList(const DesPointList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      destpoint_(from.destpoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:atd.map.DesPointList)
}

void DesPointList::SharedCtor() {
  _cached_size_ = 0;
}

DesPointList::~DesPointList() {
  // @@protoc_insertion_point(destructor:atd.map.DesPointList)
  SharedDtor();
}

void DesPointList::SharedDtor() {
}

void DesPointList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesPointList& DesPointList::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesPointList* DesPointList::New(::google::protobuf::Arena* arena) const {
  DesPointList* n = new DesPointList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesPointList::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.DesPointList)
  destpoint_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DesPointList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.DesPointList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .atd.map.DesPoint destpoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_destpoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.DesPointList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.DesPointList)
  return false;
#undef DO_
}

void DesPointList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.DesPointList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atd.map.DesPoint destpoint = 1;
  for (unsigned int i = 0, n = this->destpoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->destpoint(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.DesPointList)
}

size_t DesPointList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.DesPointList)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.map.DesPoint destpoint = 1;
  {
    unsigned int count = this->destpoint_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destpoint(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesPointList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesPointList*>(&from));
}

void DesPointList::MergeFrom(const DesPointList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.DesPointList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  destpoint_.MergeFrom(from.destpoint_);
}

void DesPointList::CopyFrom(const DesPointList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.DesPointList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesPointList::IsInitialized() const {
  return true;
}

void DesPointList::Swap(DesPointList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesPointList::InternalSwap(DesPointList* other) {
  destpoint_.InternalSwap(&other->destpoint_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesPointList::GetTypeName() const {
  return "atd.map.DesPointList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesPointList

// repeated .atd.map.DesPoint destpoint = 1;
int DesPointList::destpoint_size() const {
  return destpoint_.size();
}
void DesPointList::clear_destpoint() {
  destpoint_.Clear();
}
const ::atd::map::DesPoint& DesPointList::destpoint(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.DesPointList.destpoint)
  return destpoint_.Get(index);
}
::atd::map::DesPoint* DesPointList::mutable_destpoint(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.DesPointList.destpoint)
  return destpoint_.Mutable(index);
}
::atd::map::DesPoint* DesPointList::add_destpoint() {
  // @@protoc_insertion_point(field_add:atd.map.DesPointList.destpoint)
  return destpoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::DesPoint >*
DesPointList::mutable_destpoint() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.DesPointList.destpoint)
  return &destpoint_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::DesPoint >&
DesPointList::destpoint() const {
  // @@protoc_insertion_point(field_list:atd.map.DesPointList.destpoint)
  return destpoint_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesTaskID::kCommandFieldNumber;
const int DesTaskID::kValueFieldNumber;
const int DesTaskID::kCarrierIdFieldNumber;
const int DesTaskID::kParkinglotIdFieldNumber;
const int DesTaskID::kAreaIdFieldNumber;
const int DesTaskID::kLayerIdFieldNumber;
const int DesTaskID::kParkingspaceIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesTaskID::DesTaskID()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.DesTaskID)
}
DesTaskID::DesTaskID(const DesTaskID& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&command_, &from.command_,
    reinterpret_cast<char*>(&parkingspace_id_) -
    reinterpret_cast<char*>(&command_) + sizeof(parkingspace_id_));
  // @@protoc_insertion_point(copy_constructor:atd.map.DesTaskID)
}

void DesTaskID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&command_, 0, reinterpret_cast<char*>(&parkingspace_id_) -
    reinterpret_cast<char*>(&command_) + sizeof(parkingspace_id_));
}

DesTaskID::~DesTaskID() {
  // @@protoc_insertion_point(destructor:atd.map.DesTaskID)
  SharedDtor();
}

void DesTaskID::SharedDtor() {
}

void DesTaskID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesTaskID& DesTaskID::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesTaskID* DesTaskID::New(::google::protobuf::Arena* arena) const {
  DesTaskID* n = new DesTaskID;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesTaskID::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.DesTaskID)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&command_, 0, reinterpret_cast<char*>(&parkingspace_id_) -
      reinterpret_cast<char*>(&command_) + sizeof(parkingspace_id_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DesTaskID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.DesTaskID)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 command = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_command();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &command_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_value();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 carrier_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_carrier_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &carrier_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parkinglot_id = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_parkinglot_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parkinglot_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 area_id = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_area_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &area_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 layer_id = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_layer_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 parkingspace_id = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_parkingspace_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &parkingspace_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.DesTaskID)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.DesTaskID)
  return false;
#undef DO_
}

void DesTaskID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.DesTaskID)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 command = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->command(), output);
  }

  // optional uint32 value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->value(), output);
  }

  // optional uint32 carrier_id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->carrier_id(), output);
  }

  // optional uint32 parkinglot_id = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->parkinglot_id(), output);
  }

  // optional uint32 area_id = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->area_id(), output);
  }

  // optional int32 layer_id = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->layer_id(), output);
  }

  // optional uint32 parkingspace_id = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->parkingspace_id(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.DesTaskID)
}

size_t DesTaskID::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.DesTaskID)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional uint32 command = 1;
    if (has_command()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->command());
    }

    // optional uint32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

    // optional uint32 carrier_id = 3;
    if (has_carrier_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->carrier_id());
    }

    // optional uint32 parkinglot_id = 4;
    if (has_parkinglot_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parkinglot_id());
    }

    // optional uint32 area_id = 5;
    if (has_area_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->area_id());
    }

    // optional int32 layer_id = 6;
    if (has_layer_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer_id());
    }

    // optional uint32 parkingspace_id = 7;
    if (has_parkingspace_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->parkingspace_id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesTaskID::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesTaskID*>(&from));
}

void DesTaskID::MergeFrom(const DesTaskID& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.DesTaskID)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      command_ = from.command_;
    }
    if (cached_has_bits & 0x00000002u) {
      value_ = from.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      carrier_id_ = from.carrier_id_;
    }
    if (cached_has_bits & 0x00000008u) {
      parkinglot_id_ = from.parkinglot_id_;
    }
    if (cached_has_bits & 0x00000010u) {
      area_id_ = from.area_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      layer_id_ = from.layer_id_;
    }
    if (cached_has_bits & 0x00000040u) {
      parkingspace_id_ = from.parkingspace_id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DesTaskID::CopyFrom(const DesTaskID& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.DesTaskID)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesTaskID::IsInitialized() const {
  return true;
}

void DesTaskID::Swap(DesTaskID* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesTaskID::InternalSwap(DesTaskID* other) {
  std::swap(command_, other->command_);
  std::swap(value_, other->value_);
  std::swap(carrier_id_, other->carrier_id_);
  std::swap(parkinglot_id_, other->parkinglot_id_);
  std::swap(area_id_, other->area_id_);
  std::swap(layer_id_, other->layer_id_);
  std::swap(parkingspace_id_, other->parkingspace_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesTaskID::GetTypeName() const {
  return "atd.map.DesTaskID";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesTaskID

// optional uint32 command = 1;
bool DesTaskID::has_command() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DesTaskID::set_has_command() {
  _has_bits_[0] |= 0x00000001u;
}
void DesTaskID::clear_has_command() {
  _has_bits_[0] &= ~0x00000001u;
}
void DesTaskID::clear_command() {
  command_ = 0u;
  clear_has_command();
}
::google::protobuf::uint32 DesTaskID::command() const {
  // @@protoc_insertion_point(field_get:atd.map.DesTaskID.command)
  return command_;
}
void DesTaskID::set_command(::google::protobuf::uint32 value) {
  set_has_command();
  command_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesTaskID.command)
}

// optional uint32 value = 2;
bool DesTaskID::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DesTaskID::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void DesTaskID::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void DesTaskID::clear_value() {
  value_ = 0u;
  clear_has_value();
}
::google::protobuf::uint32 DesTaskID::value() const {
  // @@protoc_insertion_point(field_get:atd.map.DesTaskID.value)
  return value_;
}
void DesTaskID::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesTaskID.value)
}

// optional uint32 carrier_id = 3;
bool DesTaskID::has_carrier_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DesTaskID::set_has_carrier_id() {
  _has_bits_[0] |= 0x00000004u;
}
void DesTaskID::clear_has_carrier_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void DesTaskID::clear_carrier_id() {
  carrier_id_ = 0u;
  clear_has_carrier_id();
}
::google::protobuf::uint32 DesTaskID::carrier_id() const {
  // @@protoc_insertion_point(field_get:atd.map.DesTaskID.carrier_id)
  return carrier_id_;
}
void DesTaskID::set_carrier_id(::google::protobuf::uint32 value) {
  set_has_carrier_id();
  carrier_id_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesTaskID.carrier_id)
}

// optional uint32 parkinglot_id = 4;
bool DesTaskID::has_parkinglot_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DesTaskID::set_has_parkinglot_id() {
  _has_bits_[0] |= 0x00000008u;
}
void DesTaskID::clear_has_parkinglot_id() {
  _has_bits_[0] &= ~0x00000008u;
}
void DesTaskID::clear_parkinglot_id() {
  parkinglot_id_ = 0u;
  clear_has_parkinglot_id();
}
::google::protobuf::uint32 DesTaskID::parkinglot_id() const {
  // @@protoc_insertion_point(field_get:atd.map.DesTaskID.parkinglot_id)
  return parkinglot_id_;
}
void DesTaskID::set_parkinglot_id(::google::protobuf::uint32 value) {
  set_has_parkinglot_id();
  parkinglot_id_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesTaskID.parkinglot_id)
}

// optional uint32 area_id = 5;
bool DesTaskID::has_area_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DesTaskID::set_has_area_id() {
  _has_bits_[0] |= 0x00000010u;
}
void DesTaskID::clear_has_area_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void DesTaskID::clear_area_id() {
  area_id_ = 0u;
  clear_has_area_id();
}
::google::protobuf::uint32 DesTaskID::area_id() const {
  // @@protoc_insertion_point(field_get:atd.map.DesTaskID.area_id)
  return area_id_;
}
void DesTaskID::set_area_id(::google::protobuf::uint32 value) {
  set_has_area_id();
  area_id_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesTaskID.area_id)
}

// optional int32 layer_id = 6;
bool DesTaskID::has_layer_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DesTaskID::set_has_layer_id() {
  _has_bits_[0] |= 0x00000020u;
}
void DesTaskID::clear_has_layer_id() {
  _has_bits_[0] &= ~0x00000020u;
}
void DesTaskID::clear_layer_id() {
  layer_id_ = 0;
  clear_has_layer_id();
}
::google::protobuf::int32 DesTaskID::layer_id() const {
  // @@protoc_insertion_point(field_get:atd.map.DesTaskID.layer_id)
  return layer_id_;
}
void DesTaskID::set_layer_id(::google::protobuf::int32 value) {
  set_has_layer_id();
  layer_id_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesTaskID.layer_id)
}

// optional uint32 parkingspace_id = 7;
bool DesTaskID::has_parkingspace_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DesTaskID::set_has_parkingspace_id() {
  _has_bits_[0] |= 0x00000040u;
}
void DesTaskID::clear_has_parkingspace_id() {
  _has_bits_[0] &= ~0x00000040u;
}
void DesTaskID::clear_parkingspace_id() {
  parkingspace_id_ = 0u;
  clear_has_parkingspace_id();
}
::google::protobuf::uint32 DesTaskID::parkingspace_id() const {
  // @@protoc_insertion_point(field_get:atd.map.DesTaskID.parkingspace_id)
  return parkingspace_id_;
}
void DesTaskID::set_parkingspace_id(::google::protobuf::uint32 value) {
  set_has_parkingspace_id();
  parkingspace_id_ = value;
  // @@protoc_insertion_point(field_set:atd.map.DesTaskID.parkingspace_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngineDestination::kHeaderFieldNumber;
const int EngineDestination::kReservedmsgFieldNumber;
const int EngineDestination::kSourceFieldNumber;
const int EngineDestination::kDesParkingkeyFieldNumber;
const int EngineDestination::kDesPointlistFieldNumber;
const int EngineDestination::kDesTaskidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngineDestination::EngineDestination()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.EngineDestination)
}
EngineDestination::EngineDestination(const EngineDestination& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_des_parkingkey()) {
    des_parkingkey_ = new ::atd::map::DesParkingKey(*from.des_parkingkey_);
  } else {
    des_parkingkey_ = NULL;
  }
  if (from.has_des_pointlist()) {
    des_pointlist_ = new ::atd::map::DesPointList(*from.des_pointlist_);
  } else {
    des_pointlist_ = NULL;
  }
  if (from.has_des_taskid()) {
    des_taskid_ = new ::atd::map::DesTaskID(*from.des_taskid_);
  } else {
    des_taskid_ = NULL;
  }
  source_ = from.source_;
  // @@protoc_insertion_point(copy_constructor:atd.map.EngineDestination)
}

void EngineDestination::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&des_taskid_) -
    reinterpret_cast<char*>(&header_) + sizeof(des_taskid_));
  source_ = 1;
}

EngineDestination::~EngineDestination() {
  // @@protoc_insertion_point(destructor:atd.map.EngineDestination)
  SharedDtor();
}

void EngineDestination::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete des_parkingkey_;
  }
  if (this != internal_default_instance()) {
    delete des_pointlist_;
  }
  if (this != internal_default_instance()) {
    delete des_taskid_;
  }
}

void EngineDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EngineDestination& EngineDestination::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginedestination_2eproto::InitDefaults();
  return *internal_default_instance();
}

EngineDestination* EngineDestination::New(::google::protobuf::Arena* arena) const {
  EngineDestination* n = new EngineDestination;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EngineDestination::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.EngineDestination)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_des_parkingkey()) {
      GOOGLE_DCHECK(des_parkingkey_ != NULL);
      des_parkingkey_->::atd::map::DesParkingKey::Clear();
    }
    if (has_des_pointlist()) {
      GOOGLE_DCHECK(des_pointlist_ != NULL);
      des_pointlist_->::atd::map::DesPointList::Clear();
    }
    if (has_des_taskid()) {
      GOOGLE_DCHECK(des_taskid_ != NULL);
      des_taskid_->::atd::map::DesTaskID::Clear();
    }
    source_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EngineDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.EngineDestination)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.EngineDestination.NaviSource source = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::map::EngineDestination_NaviSource_IsValid(value)) {
            set_source(static_cast< ::atd::map::EngineDestination_NaviSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.DesParkingKey des_parkingkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_des_parkingkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.DesPointList des_pointlist = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_des_pointlist()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.DesTaskID des_taskid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_des_taskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.EngineDestination)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.EngineDestination)
  return false;
#undef DO_
}

void EngineDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.EngineDestination)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.map.EngineDestination.NaviSource source = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->source(), output);
  }

  // optional .atd.map.DesParkingKey des_parkingkey = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->des_parkingkey_, output);
  }

  // optional .atd.map.DesPointList des_pointlist = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->des_pointlist_, output);
  }

  // optional .atd.map.DesTaskID des_taskid = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->des_taskid_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.EngineDestination)
}

size_t EngineDestination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.EngineDestination)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.map.DesParkingKey des_parkingkey = 4;
    if (has_des_parkingkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->des_parkingkey_);
    }

    // optional .atd.map.DesPointList des_pointlist = 5;
    if (has_des_pointlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->des_pointlist_);
    }

    // optional .atd.map.DesTaskID des_taskid = 6;
    if (has_des_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->des_taskid_);
    }

    // optional .atd.map.EngineDestination.NaviSource source = 3;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EngineDestination::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EngineDestination*>(&from));
}

void EngineDestination::MergeFrom(const EngineDestination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.EngineDestination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_des_parkingkey()->::atd::map::DesParkingKey::MergeFrom(from.des_parkingkey());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_des_pointlist()->::atd::map::DesPointList::MergeFrom(from.des_pointlist());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_des_taskid()->::atd::map::DesTaskID::MergeFrom(from.des_taskid());
    }
    if (cached_has_bits & 0x00000020u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EngineDestination::CopyFrom(const EngineDestination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.EngineDestination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineDestination::IsInitialized() const {
  return true;
}

void EngineDestination::Swap(EngineDestination* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EngineDestination::InternalSwap(EngineDestination* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(des_parkingkey_, other->des_parkingkey_);
  std::swap(des_pointlist_, other->des_pointlist_);
  std::swap(des_taskid_, other->des_taskid_);
  std::swap(source_, other->source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EngineDestination::GetTypeName() const {
  return "atd.map.EngineDestination";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EngineDestination

// optional .atd.common.Header header = 1;
bool EngineDestination::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EngineDestination::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void EngineDestination::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void EngineDestination::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& EngineDestination::header() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineDestination.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* EngineDestination::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineDestination.header)
  return header_;
}
::atd::common::Header* EngineDestination::release_header() {
  // @@protoc_insertion_point(field_release:atd.map.EngineDestination.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void EngineDestination::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineDestination.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool EngineDestination::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EngineDestination::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void EngineDestination::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void EngineDestination::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& EngineDestination::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineDestination.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* EngineDestination::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineDestination.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* EngineDestination::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.map.EngineDestination.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void EngineDestination::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineDestination.reservedmsg)
}

// optional .atd.map.EngineDestination.NaviSource source = 3;
bool EngineDestination::has_source() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EngineDestination::set_has_source() {
  _has_bits_[0] |= 0x00000020u;
}
void EngineDestination::clear_has_source() {
  _has_bits_[0] &= ~0x00000020u;
}
void EngineDestination::clear_source() {
  source_ = 1;
  clear_has_source();
}
::atd::map::EngineDestination_NaviSource EngineDestination::source() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineDestination.source)
  return static_cast< ::atd::map::EngineDestination_NaviSource >(source_);
}
void EngineDestination::set_source(::atd::map::EngineDestination_NaviSource value) {
  assert(::atd::map::EngineDestination_NaviSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:atd.map.EngineDestination.source)
}

// optional .atd.map.DesParkingKey des_parkingkey = 4;
bool EngineDestination::has_des_parkingkey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EngineDestination::set_has_des_parkingkey() {
  _has_bits_[0] |= 0x00000004u;
}
void EngineDestination::clear_has_des_parkingkey() {
  _has_bits_[0] &= ~0x00000004u;
}
void EngineDestination::clear_des_parkingkey() {
  if (des_parkingkey_ != NULL) des_parkingkey_->::atd::map::DesParkingKey::Clear();
  clear_has_des_parkingkey();
}
const ::atd::map::DesParkingKey& EngineDestination::des_parkingkey() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineDestination.des_parkingkey)
  return des_parkingkey_ != NULL ? *des_parkingkey_
                         : *::atd::map::DesParkingKey::internal_default_instance();
}
::atd::map::DesParkingKey* EngineDestination::mutable_des_parkingkey() {
  set_has_des_parkingkey();
  if (des_parkingkey_ == NULL) {
    des_parkingkey_ = new ::atd::map::DesParkingKey;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineDestination.des_parkingkey)
  return des_parkingkey_;
}
::atd::map::DesParkingKey* EngineDestination::release_des_parkingkey() {
  // @@protoc_insertion_point(field_release:atd.map.EngineDestination.des_parkingkey)
  clear_has_des_parkingkey();
  ::atd::map::DesParkingKey* temp = des_parkingkey_;
  des_parkingkey_ = NULL;
  return temp;
}
void EngineDestination::set_allocated_des_parkingkey(::atd::map::DesParkingKey* des_parkingkey) {
  delete des_parkingkey_;
  des_parkingkey_ = des_parkingkey;
  if (des_parkingkey) {
    set_has_des_parkingkey();
  } else {
    clear_has_des_parkingkey();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineDestination.des_parkingkey)
}

// optional .atd.map.DesPointList des_pointlist = 5;
bool EngineDestination::has_des_pointlist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EngineDestination::set_has_des_pointlist() {
  _has_bits_[0] |= 0x00000008u;
}
void EngineDestination::clear_has_des_pointlist() {
  _has_bits_[0] &= ~0x00000008u;
}
void EngineDestination::clear_des_pointlist() {
  if (des_pointlist_ != NULL) des_pointlist_->::atd::map::DesPointList::Clear();
  clear_has_des_pointlist();
}
const ::atd::map::DesPointList& EngineDestination::des_pointlist() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineDestination.des_pointlist)
  return des_pointlist_ != NULL ? *des_pointlist_
                         : *::atd::map::DesPointList::internal_default_instance();
}
::atd::map::DesPointList* EngineDestination::mutable_des_pointlist() {
  set_has_des_pointlist();
  if (des_pointlist_ == NULL) {
    des_pointlist_ = new ::atd::map::DesPointList;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineDestination.des_pointlist)
  return des_pointlist_;
}
::atd::map::DesPointList* EngineDestination::release_des_pointlist() {
  // @@protoc_insertion_point(field_release:atd.map.EngineDestination.des_pointlist)
  clear_has_des_pointlist();
  ::atd::map::DesPointList* temp = des_pointlist_;
  des_pointlist_ = NULL;
  return temp;
}
void EngineDestination::set_allocated_des_pointlist(::atd::map::DesPointList* des_pointlist) {
  delete des_pointlist_;
  des_pointlist_ = des_pointlist;
  if (des_pointlist) {
    set_has_des_pointlist();
  } else {
    clear_has_des_pointlist();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineDestination.des_pointlist)
}

// optional .atd.map.DesTaskID des_taskid = 6;
bool EngineDestination::has_des_taskid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EngineDestination::set_has_des_taskid() {
  _has_bits_[0] |= 0x00000010u;
}
void EngineDestination::clear_has_des_taskid() {
  _has_bits_[0] &= ~0x00000010u;
}
void EngineDestination::clear_des_taskid() {
  if (des_taskid_ != NULL) des_taskid_->::atd::map::DesTaskID::Clear();
  clear_has_des_taskid();
}
const ::atd::map::DesTaskID& EngineDestination::des_taskid() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineDestination.des_taskid)
  return des_taskid_ != NULL ? *des_taskid_
                         : *::atd::map::DesTaskID::internal_default_instance();
}
::atd::map::DesTaskID* EngineDestination::mutable_des_taskid() {
  set_has_des_taskid();
  if (des_taskid_ == NULL) {
    des_taskid_ = new ::atd::map::DesTaskID;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineDestination.des_taskid)
  return des_taskid_;
}
::atd::map::DesTaskID* EngineDestination::release_des_taskid() {
  // @@protoc_insertion_point(field_release:atd.map.EngineDestination.des_taskid)
  clear_has_des_taskid();
  ::atd::map::DesTaskID* temp = des_taskid_;
  des_taskid_ = NULL;
  return temp;
}
void EngineDestination::set_allocated_des_taskid(::atd::map::DesTaskID* des_taskid) {
  delete des_taskid_;
  des_taskid_ = des_taskid;
  if (des_taskid) {
    set_has_des_taskid();
  } else {
    clear_has_des_taskid();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineDestination.des_taskid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace atd

// @@protoc_insertion_point(global_scope)
