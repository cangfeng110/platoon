// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/hdmap/enginetargetlanes.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/hdmap/enginetargetlanes.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace map {
class LaneChangeDecisionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LaneChangeDecision> {
} _LaneChangeDecision_default_instance_;
class TargetLaneDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TargetLane> {
} _TargetLane_default_instance_;
class EyeQLaneCenterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EyeQLaneCenter> {
} _EyeQLaneCenter_default_instance_;
class TargetArrowDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TargetArrow> {
} _TargetArrow_default_instance_;
class EngineTargetLanesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EngineTargetLanes> {
} _EngineTargetLanes_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _LaneChangeDecision_default_instance_.Shutdown();
  _TargetLane_default_instance_.Shutdown();
  _EyeQLaneCenter_default_instance_.Shutdown();
  _TargetArrow_default_instance_.Shutdown();
  _EngineTargetLanes_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  ::atd::map::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::InitDefaults();
  ::atd::meprocess::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::InitDefaults();
  _LaneChangeDecision_default_instance_.DefaultConstruct();
  _TargetLane_default_instance_.DefaultConstruct();
  _EyeQLaneCenter_default_instance_.DefaultConstruct();
  _TargetArrow_default_instance_.DefaultConstruct();
  _EngineTargetLanes_default_instance_.DefaultConstruct();
  _EyeQLaneCenter_default_instance_.get_mutable()->centerlaneparam_ = const_cast< ::atd::meprocess::LineParam*>(
      ::atd::meprocess::LineParam::internal_default_instance());
  _EyeQLaneCenter_default_instance_.get_mutable()->leftlaneparam_ = const_cast< ::atd::meprocess::LineParam*>(
      ::atd::meprocess::LineParam::internal_default_instance());
  _EyeQLaneCenter_default_instance_.get_mutable()->rightlaneparam_ = const_cast< ::atd::meprocess::LineParam*>(
      ::atd::meprocess::LineParam::internal_default_instance());
  _TargetArrow_default_instance_.get_mutable()->targetarrow_ = const_cast< ::atd::common::Arrow2D*>(
      ::atd::common::Arrow2D::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->leftleftlane_ = const_cast< ::atd::map::TargetLane*>(
      ::atd::map::TargetLane::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->leftlane_ = const_cast< ::atd::map::TargetLane*>(
      ::atd::map::TargetLane::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->rightlane_ = const_cast< ::atd::map::TargetLane*>(
      ::atd::map::TargetLane::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->rightrightlane_ = const_cast< ::atd::map::TargetLane*>(
      ::atd::map::TargetLane::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->lanechange_ = const_cast< ::atd::map::LaneChangeDecision*>(
      ::atd::map::LaneChangeDecision::internal_default_instance());
  _EngineTargetLanes_default_instance_.get_mutable()->eyeqlaneparam_ = const_cast< ::atd::map::EyeQLaneCenter*>(
      ::atd::map::EyeQLaneCenter::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::atd::map::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::AddDescriptors();
  ::atd::meprocess::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMeProcess_2fmobileyeq4_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LaneChangeDecision::kLeftBGFieldNumber;
const int LaneChangeDecision::kCenterBGFieldNumber;
const int LaneChangeDecision::kRightBGFieldNumber;
const int LaneChangeDecision::kRemainLengthFieldNumber;
const int LaneChangeDecision::kLeftTurnAreaLengthFieldNumber;
const int LaneChangeDecision::kRightTurnAreaLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LaneChangeDecision::LaneChangeDecision()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.LaneChangeDecision)
}
LaneChangeDecision::LaneChangeDecision(const LaneChangeDecision& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&leftbg_, &from.leftbg_,
    reinterpret_cast<char*>(&rightturnarealength_) -
    reinterpret_cast<char*>(&leftbg_) + sizeof(rightturnarealength_));
  // @@protoc_insertion_point(copy_constructor:atd.map.LaneChangeDecision)
}

void LaneChangeDecision::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&leftbg_, 0, reinterpret_cast<char*>(&rightturnarealength_) -
    reinterpret_cast<char*>(&leftbg_) + sizeof(rightturnarealength_));
}

LaneChangeDecision::~LaneChangeDecision() {
  // @@protoc_insertion_point(destructor:atd.map.LaneChangeDecision)
  SharedDtor();
}

void LaneChangeDecision::SharedDtor() {
}

void LaneChangeDecision::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LaneChangeDecision& LaneChangeDecision::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  return *internal_default_instance();
}

LaneChangeDecision* LaneChangeDecision::New(::google::protobuf::Arena* arena) const {
  LaneChangeDecision* n = new LaneChangeDecision;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LaneChangeDecision::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.LaneChangeDecision)
  if (_has_bits_[0 / 32] & 63u) {
    ::memset(&leftbg_, 0, reinterpret_cast<char*>(&rightturnarealength_) -
      reinterpret_cast<char*>(&leftbg_) + sizeof(rightturnarealength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LaneChangeDecision::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.LaneChangeDecision)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 leftBG = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_leftbg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &leftbg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 centerBG = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_centerbg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &centerbg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 rightBG = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_rightbg();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightbg_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float RemainLength = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_remainlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &remainlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float leftTurnAreaLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_leftturnarealength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &leftturnarealength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float rightTurnAreaLength = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_rightturnarealength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rightturnarealength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.LaneChangeDecision)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.LaneChangeDecision)
  return false;
#undef DO_
}

void LaneChangeDecision::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.LaneChangeDecision)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 leftBG = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->leftbg(), output);
  }

  // optional int32 centerBG = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->centerbg(), output);
  }

  // optional int32 rightBG = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rightbg(), output);
  }

  // optional float RemainLength = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->remainlength(), output);
  }

  // optional float leftTurnAreaLength = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->leftturnarealength(), output);
  }

  // optional float rightTurnAreaLength = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->rightturnarealength(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.LaneChangeDecision)
}

size_t LaneChangeDecision::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.LaneChangeDecision)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional int32 leftBG = 1;
    if (has_leftbg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->leftbg());
    }

    // optional int32 centerBG = 2;
    if (has_centerbg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->centerbg());
    }

    // optional int32 rightBG = 3;
    if (has_rightbg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightbg());
    }

    // optional float RemainLength = 4;
    if (has_remainlength()) {
      total_size += 1 + 4;
    }

    // optional float leftTurnAreaLength = 5;
    if (has_leftturnarealength()) {
      total_size += 1 + 4;
    }

    // optional float rightTurnAreaLength = 6;
    if (has_rightturnarealength()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LaneChangeDecision::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LaneChangeDecision*>(&from));
}

void LaneChangeDecision::MergeFrom(const LaneChangeDecision& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.LaneChangeDecision)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      leftbg_ = from.leftbg_;
    }
    if (cached_has_bits & 0x00000002u) {
      centerbg_ = from.centerbg_;
    }
    if (cached_has_bits & 0x00000004u) {
      rightbg_ = from.rightbg_;
    }
    if (cached_has_bits & 0x00000008u) {
      remainlength_ = from.remainlength_;
    }
    if (cached_has_bits & 0x00000010u) {
      leftturnarealength_ = from.leftturnarealength_;
    }
    if (cached_has_bits & 0x00000020u) {
      rightturnarealength_ = from.rightturnarealength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LaneChangeDecision::CopyFrom(const LaneChangeDecision& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.LaneChangeDecision)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LaneChangeDecision::IsInitialized() const {
  return true;
}

void LaneChangeDecision::Swap(LaneChangeDecision* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LaneChangeDecision::InternalSwap(LaneChangeDecision* other) {
  std::swap(leftbg_, other->leftbg_);
  std::swap(centerbg_, other->centerbg_);
  std::swap(rightbg_, other->rightbg_);
  std::swap(remainlength_, other->remainlength_);
  std::swap(leftturnarealength_, other->leftturnarealength_);
  std::swap(rightturnarealength_, other->rightturnarealength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LaneChangeDecision::GetTypeName() const {
  return "atd.map.LaneChangeDecision";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LaneChangeDecision

// optional int32 leftBG = 1;
bool LaneChangeDecision::has_leftbg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LaneChangeDecision::set_has_leftbg() {
  _has_bits_[0] |= 0x00000001u;
}
void LaneChangeDecision::clear_has_leftbg() {
  _has_bits_[0] &= ~0x00000001u;
}
void LaneChangeDecision::clear_leftbg() {
  leftbg_ = 0;
  clear_has_leftbg();
}
::google::protobuf::int32 LaneChangeDecision::leftbg() const {
  // @@protoc_insertion_point(field_get:atd.map.LaneChangeDecision.leftBG)
  return leftbg_;
}
void LaneChangeDecision::set_leftbg(::google::protobuf::int32 value) {
  set_has_leftbg();
  leftbg_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LaneChangeDecision.leftBG)
}

// optional int32 centerBG = 2;
bool LaneChangeDecision::has_centerbg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LaneChangeDecision::set_has_centerbg() {
  _has_bits_[0] |= 0x00000002u;
}
void LaneChangeDecision::clear_has_centerbg() {
  _has_bits_[0] &= ~0x00000002u;
}
void LaneChangeDecision::clear_centerbg() {
  centerbg_ = 0;
  clear_has_centerbg();
}
::google::protobuf::int32 LaneChangeDecision::centerbg() const {
  // @@protoc_insertion_point(field_get:atd.map.LaneChangeDecision.centerBG)
  return centerbg_;
}
void LaneChangeDecision::set_centerbg(::google::protobuf::int32 value) {
  set_has_centerbg();
  centerbg_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LaneChangeDecision.centerBG)
}

// optional int32 rightBG = 3;
bool LaneChangeDecision::has_rightbg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LaneChangeDecision::set_has_rightbg() {
  _has_bits_[0] |= 0x00000004u;
}
void LaneChangeDecision::clear_has_rightbg() {
  _has_bits_[0] &= ~0x00000004u;
}
void LaneChangeDecision::clear_rightbg() {
  rightbg_ = 0;
  clear_has_rightbg();
}
::google::protobuf::int32 LaneChangeDecision::rightbg() const {
  // @@protoc_insertion_point(field_get:atd.map.LaneChangeDecision.rightBG)
  return rightbg_;
}
void LaneChangeDecision::set_rightbg(::google::protobuf::int32 value) {
  set_has_rightbg();
  rightbg_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LaneChangeDecision.rightBG)
}

// optional float RemainLength = 4;
bool LaneChangeDecision::has_remainlength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LaneChangeDecision::set_has_remainlength() {
  _has_bits_[0] |= 0x00000008u;
}
void LaneChangeDecision::clear_has_remainlength() {
  _has_bits_[0] &= ~0x00000008u;
}
void LaneChangeDecision::clear_remainlength() {
  remainlength_ = 0;
  clear_has_remainlength();
}
float LaneChangeDecision::remainlength() const {
  // @@protoc_insertion_point(field_get:atd.map.LaneChangeDecision.RemainLength)
  return remainlength_;
}
void LaneChangeDecision::set_remainlength(float value) {
  set_has_remainlength();
  remainlength_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LaneChangeDecision.RemainLength)
}

// optional float leftTurnAreaLength = 5;
bool LaneChangeDecision::has_leftturnarealength() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void LaneChangeDecision::set_has_leftturnarealength() {
  _has_bits_[0] |= 0x00000010u;
}
void LaneChangeDecision::clear_has_leftturnarealength() {
  _has_bits_[0] &= ~0x00000010u;
}
void LaneChangeDecision::clear_leftturnarealength() {
  leftturnarealength_ = 0;
  clear_has_leftturnarealength();
}
float LaneChangeDecision::leftturnarealength() const {
  // @@protoc_insertion_point(field_get:atd.map.LaneChangeDecision.leftTurnAreaLength)
  return leftturnarealength_;
}
void LaneChangeDecision::set_leftturnarealength(float value) {
  set_has_leftturnarealength();
  leftturnarealength_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LaneChangeDecision.leftTurnAreaLength)
}

// optional float rightTurnAreaLength = 6;
bool LaneChangeDecision::has_rightturnarealength() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void LaneChangeDecision::set_has_rightturnarealength() {
  _has_bits_[0] |= 0x00000020u;
}
void LaneChangeDecision::clear_has_rightturnarealength() {
  _has_bits_[0] &= ~0x00000020u;
}
void LaneChangeDecision::clear_rightturnarealength() {
  rightturnarealength_ = 0;
  clear_has_rightturnarealength();
}
float LaneChangeDecision::rightturnarealength() const {
  // @@protoc_insertion_point(field_get:atd.map.LaneChangeDecision.rightTurnAreaLength)
  return rightturnarealength_;
}
void LaneChangeDecision::set_rightturnarealength(float value) {
  set_has_rightturnarealength();
  rightturnarealength_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LaneChangeDecision.rightTurnAreaLength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetLane::kBLineFieldNumber;
const int TargetLane::kNLineTypeFieldNumber;
const int TargetLane::kNArrayLengthFieldNumber;
const int TargetLane::kPointFieldNumber;
const int TargetLane::kPointECFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetLane::TargetLane()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.TargetLane)
}
TargetLane::TargetLane(const TargetLane& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      point_(from.point_),
      point_ec_(from.point_ec_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bline_, &from.bline_,
    reinterpret_cast<char*>(&narraylength_) -
    reinterpret_cast<char*>(&bline_) + sizeof(narraylength_));
  // @@protoc_insertion_point(copy_constructor:atd.map.TargetLane)
}

void TargetLane::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bline_, 0, reinterpret_cast<char*>(&narraylength_) -
    reinterpret_cast<char*>(&bline_) + sizeof(narraylength_));
}

TargetLane::~TargetLane() {
  // @@protoc_insertion_point(destructor:atd.map.TargetLane)
  SharedDtor();
}

void TargetLane::SharedDtor() {
}

void TargetLane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TargetLane& TargetLane::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetLane* TargetLane::New(::google::protobuf::Arena* arena) const {
  TargetLane* n = new TargetLane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetLane::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.TargetLane)
  point_.Clear();
  point_ec_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&bline_, 0, reinterpret_cast<char*>(&narraylength_) -
      reinterpret_cast<char*>(&bline_) + sizeof(narraylength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TargetLane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.TargetLane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool bLine = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_bline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &bline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nLineType = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_nlinetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlinetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 nArrayLength = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_narraylength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &narraylength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Point2D point = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Point2D point_EC = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_point_ec()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.TargetLane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.TargetLane)
  return false;
#undef DO_
}

void TargetLane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.TargetLane)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool bLine = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->bline(), output);
  }

  // optional int32 nLineType = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nlinetype(), output);
  }

  // optional int32 nArrayLength = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->narraylength(), output);
  }

  // repeated .atd.common.Point2D point = 4;
  for (unsigned int i = 0, n = this->point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->point(i), output);
  }

  // repeated .atd.common.Point2D point_EC = 5;
  for (unsigned int i = 0, n = this->point_ec_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->point_ec(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.TargetLane)
}

size_t TargetLane::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.TargetLane)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.common.Point2D point = 4;
  {
    unsigned int count = this->point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point(i));
    }
  }

  // repeated .atd.common.Point2D point_EC = 5;
  {
    unsigned int count = this->point_ec_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->point_ec(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional bool bLine = 1;
    if (has_bline()) {
      total_size += 1 + 1;
    }

    // optional int32 nLineType = 2;
    if (has_nlinetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlinetype());
    }

    // optional int32 nArrayLength = 3;
    if (has_narraylength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->narraylength());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetLane::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TargetLane*>(&from));
}

void TargetLane::MergeFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.TargetLane)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  point_.MergeFrom(from.point_);
  point_ec_.MergeFrom(from.point_ec_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      bline_ = from.bline_;
    }
    if (cached_has_bits & 0x00000002u) {
      nlinetype_ = from.nlinetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      narraylength_ = from.narraylength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetLane::CopyFrom(const TargetLane& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.TargetLane)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetLane::IsInitialized() const {
  return true;
}

void TargetLane::Swap(TargetLane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetLane::InternalSwap(TargetLane* other) {
  point_.InternalSwap(&other->point_);
  point_ec_.InternalSwap(&other->point_ec_);
  std::swap(bline_, other->bline_);
  std::swap(nlinetype_, other->nlinetype_);
  std::swap(narraylength_, other->narraylength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TargetLane::GetTypeName() const {
  return "atd.map.TargetLane";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetLane

// optional bool bLine = 1;
bool TargetLane::has_bline() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TargetLane::set_has_bline() {
  _has_bits_[0] |= 0x00000001u;
}
void TargetLane::clear_has_bline() {
  _has_bits_[0] &= ~0x00000001u;
}
void TargetLane::clear_bline() {
  bline_ = false;
  clear_has_bline();
}
bool TargetLane::bline() const {
  // @@protoc_insertion_point(field_get:atd.map.TargetLane.bLine)
  return bline_;
}
void TargetLane::set_bline(bool value) {
  set_has_bline();
  bline_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TargetLane.bLine)
}

// optional int32 nLineType = 2;
bool TargetLane::has_nlinetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TargetLane::set_has_nlinetype() {
  _has_bits_[0] |= 0x00000002u;
}
void TargetLane::clear_has_nlinetype() {
  _has_bits_[0] &= ~0x00000002u;
}
void TargetLane::clear_nlinetype() {
  nlinetype_ = 0;
  clear_has_nlinetype();
}
::google::protobuf::int32 TargetLane::nlinetype() const {
  // @@protoc_insertion_point(field_get:atd.map.TargetLane.nLineType)
  return nlinetype_;
}
void TargetLane::set_nlinetype(::google::protobuf::int32 value) {
  set_has_nlinetype();
  nlinetype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TargetLane.nLineType)
}

// optional int32 nArrayLength = 3;
bool TargetLane::has_narraylength() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TargetLane::set_has_narraylength() {
  _has_bits_[0] |= 0x00000004u;
}
void TargetLane::clear_has_narraylength() {
  _has_bits_[0] &= ~0x00000004u;
}
void TargetLane::clear_narraylength() {
  narraylength_ = 0;
  clear_has_narraylength();
}
::google::protobuf::int32 TargetLane::narraylength() const {
  // @@protoc_insertion_point(field_get:atd.map.TargetLane.nArrayLength)
  return narraylength_;
}
void TargetLane::set_narraylength(::google::protobuf::int32 value) {
  set_has_narraylength();
  narraylength_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TargetLane.nArrayLength)
}

// repeated .atd.common.Point2D point = 4;
int TargetLane::point_size() const {
  return point_.size();
}
void TargetLane::clear_point() {
  point_.Clear();
}
const ::atd::common::Point2D& TargetLane::point(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.TargetLane.point)
  return point_.Get(index);
}
::atd::common::Point2D* TargetLane::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.TargetLane.point)
  return point_.Mutable(index);
}
::atd::common::Point2D* TargetLane::add_point() {
  // @@protoc_insertion_point(field_add:atd.map.TargetLane.point)
  return point_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
TargetLane::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.TargetLane.point)
  return &point_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
TargetLane::point() const {
  // @@protoc_insertion_point(field_list:atd.map.TargetLane.point)
  return point_;
}

// repeated .atd.common.Point2D point_EC = 5;
int TargetLane::point_ec_size() const {
  return point_ec_.size();
}
void TargetLane::clear_point_ec() {
  point_ec_.Clear();
}
const ::atd::common::Point2D& TargetLane::point_ec(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.TargetLane.point_EC)
  return point_ec_.Get(index);
}
::atd::common::Point2D* TargetLane::mutable_point_ec(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.TargetLane.point_EC)
  return point_ec_.Mutable(index);
}
::atd::common::Point2D* TargetLane::add_point_ec() {
  // @@protoc_insertion_point(field_add:atd.map.TargetLane.point_EC)
  return point_ec_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
TargetLane::mutable_point_ec() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.TargetLane.point_EC)
  return &point_ec_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
TargetLane::point_ec() const {
  // @@protoc_insertion_point(field_list:atd.map.TargetLane.point_EC)
  return point_ec_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EyeQLaneCenter::kCenterlaneParamFieldNumber;
const int EyeQLaneCenter::kLeftlaneParamFieldNumber;
const int EyeQLaneCenter::kRightlaneParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EyeQLaneCenter::EyeQLaneCenter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.EyeQLaneCenter)
}
EyeQLaneCenter::EyeQLaneCenter(const EyeQLaneCenter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_centerlaneparam()) {
    centerlaneparam_ = new ::atd::meprocess::LineParam(*from.centerlaneparam_);
  } else {
    centerlaneparam_ = NULL;
  }
  if (from.has_leftlaneparam()) {
    leftlaneparam_ = new ::atd::meprocess::LineParam(*from.leftlaneparam_);
  } else {
    leftlaneparam_ = NULL;
  }
  if (from.has_rightlaneparam()) {
    rightlaneparam_ = new ::atd::meprocess::LineParam(*from.rightlaneparam_);
  } else {
    rightlaneparam_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.map.EyeQLaneCenter)
}

void EyeQLaneCenter::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&centerlaneparam_, 0, reinterpret_cast<char*>(&rightlaneparam_) -
    reinterpret_cast<char*>(&centerlaneparam_) + sizeof(rightlaneparam_));
}

EyeQLaneCenter::~EyeQLaneCenter() {
  // @@protoc_insertion_point(destructor:atd.map.EyeQLaneCenter)
  SharedDtor();
}

void EyeQLaneCenter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete centerlaneparam_;
  }
  if (this != internal_default_instance()) {
    delete leftlaneparam_;
  }
  if (this != internal_default_instance()) {
    delete rightlaneparam_;
  }
}

void EyeQLaneCenter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EyeQLaneCenter& EyeQLaneCenter::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  return *internal_default_instance();
}

EyeQLaneCenter* EyeQLaneCenter::New(::google::protobuf::Arena* arena) const {
  EyeQLaneCenter* n = new EyeQLaneCenter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EyeQLaneCenter::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.EyeQLaneCenter)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_centerlaneparam()) {
      GOOGLE_DCHECK(centerlaneparam_ != NULL);
      centerlaneparam_->::atd::meprocess::LineParam::Clear();
    }
    if (has_leftlaneparam()) {
      GOOGLE_DCHECK(leftlaneparam_ != NULL);
      leftlaneparam_->::atd::meprocess::LineParam::Clear();
    }
    if (has_rightlaneparam()) {
      GOOGLE_DCHECK(rightlaneparam_ != NULL);
      rightlaneparam_->::atd::meprocess::LineParam::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EyeQLaneCenter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.EyeQLaneCenter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .atd.meprocess.LineParam centerlaneParam = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_centerlaneparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LineParam leftlaneParam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leftlaneparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.meprocess.LineParam rightlaneParam = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightlaneparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.EyeQLaneCenter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.EyeQLaneCenter)
  return false;
#undef DO_
}

void EyeQLaneCenter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.EyeQLaneCenter)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .atd.meprocess.LineParam centerlaneParam = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->centerlaneparam_, output);
  }

  // optional .atd.meprocess.LineParam leftlaneParam = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->leftlaneparam_, output);
  }

  // optional .atd.meprocess.LineParam rightlaneParam = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->rightlaneparam_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.EyeQLaneCenter)
}

size_t EyeQLaneCenter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.EyeQLaneCenter)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // required .atd.meprocess.LineParam centerlaneParam = 1;
  if (has_centerlaneparam()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->centerlaneparam_);
  }
  if (_has_bits_[0 / 32] & 6u) {
    // optional .atd.meprocess.LineParam leftlaneParam = 2;
    if (has_leftlaneparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leftlaneparam_);
    }

    // optional .atd.meprocess.LineParam rightlaneParam = 3;
    if (has_rightlaneparam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rightlaneparam_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EyeQLaneCenter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EyeQLaneCenter*>(&from));
}

void EyeQLaneCenter::MergeFrom(const EyeQLaneCenter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.EyeQLaneCenter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_centerlaneparam()->::atd::meprocess::LineParam::MergeFrom(from.centerlaneparam());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_leftlaneparam()->::atd::meprocess::LineParam::MergeFrom(from.leftlaneparam());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_rightlaneparam()->::atd::meprocess::LineParam::MergeFrom(from.rightlaneparam());
    }
  }
}

void EyeQLaneCenter::CopyFrom(const EyeQLaneCenter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.EyeQLaneCenter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EyeQLaneCenter::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void EyeQLaneCenter::Swap(EyeQLaneCenter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EyeQLaneCenter::InternalSwap(EyeQLaneCenter* other) {
  std::swap(centerlaneparam_, other->centerlaneparam_);
  std::swap(leftlaneparam_, other->leftlaneparam_);
  std::swap(rightlaneparam_, other->rightlaneparam_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EyeQLaneCenter::GetTypeName() const {
  return "atd.map.EyeQLaneCenter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EyeQLaneCenter

// required .atd.meprocess.LineParam centerlaneParam = 1;
bool EyeQLaneCenter::has_centerlaneparam() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EyeQLaneCenter::set_has_centerlaneparam() {
  _has_bits_[0] |= 0x00000001u;
}
void EyeQLaneCenter::clear_has_centerlaneparam() {
  _has_bits_[0] &= ~0x00000001u;
}
void EyeQLaneCenter::clear_centerlaneparam() {
  if (centerlaneparam_ != NULL) centerlaneparam_->::atd::meprocess::LineParam::Clear();
  clear_has_centerlaneparam();
}
const ::atd::meprocess::LineParam& EyeQLaneCenter::centerlaneparam() const {
  // @@protoc_insertion_point(field_get:atd.map.EyeQLaneCenter.centerlaneParam)
  return centerlaneparam_ != NULL ? *centerlaneparam_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
::atd::meprocess::LineParam* EyeQLaneCenter::mutable_centerlaneparam() {
  set_has_centerlaneparam();
  if (centerlaneparam_ == NULL) {
    centerlaneparam_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EyeQLaneCenter.centerlaneParam)
  return centerlaneparam_;
}
::atd::meprocess::LineParam* EyeQLaneCenter::release_centerlaneparam() {
  // @@protoc_insertion_point(field_release:atd.map.EyeQLaneCenter.centerlaneParam)
  clear_has_centerlaneparam();
  ::atd::meprocess::LineParam* temp = centerlaneparam_;
  centerlaneparam_ = NULL;
  return temp;
}
void EyeQLaneCenter::set_allocated_centerlaneparam(::atd::meprocess::LineParam* centerlaneparam) {
  delete centerlaneparam_;
  centerlaneparam_ = centerlaneparam;
  if (centerlaneparam) {
    set_has_centerlaneparam();
  } else {
    clear_has_centerlaneparam();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EyeQLaneCenter.centerlaneParam)
}

// optional .atd.meprocess.LineParam leftlaneParam = 2;
bool EyeQLaneCenter::has_leftlaneparam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EyeQLaneCenter::set_has_leftlaneparam() {
  _has_bits_[0] |= 0x00000002u;
}
void EyeQLaneCenter::clear_has_leftlaneparam() {
  _has_bits_[0] &= ~0x00000002u;
}
void EyeQLaneCenter::clear_leftlaneparam() {
  if (leftlaneparam_ != NULL) leftlaneparam_->::atd::meprocess::LineParam::Clear();
  clear_has_leftlaneparam();
}
const ::atd::meprocess::LineParam& EyeQLaneCenter::leftlaneparam() const {
  // @@protoc_insertion_point(field_get:atd.map.EyeQLaneCenter.leftlaneParam)
  return leftlaneparam_ != NULL ? *leftlaneparam_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
::atd::meprocess::LineParam* EyeQLaneCenter::mutable_leftlaneparam() {
  set_has_leftlaneparam();
  if (leftlaneparam_ == NULL) {
    leftlaneparam_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EyeQLaneCenter.leftlaneParam)
  return leftlaneparam_;
}
::atd::meprocess::LineParam* EyeQLaneCenter::release_leftlaneparam() {
  // @@protoc_insertion_point(field_release:atd.map.EyeQLaneCenter.leftlaneParam)
  clear_has_leftlaneparam();
  ::atd::meprocess::LineParam* temp = leftlaneparam_;
  leftlaneparam_ = NULL;
  return temp;
}
void EyeQLaneCenter::set_allocated_leftlaneparam(::atd::meprocess::LineParam* leftlaneparam) {
  delete leftlaneparam_;
  leftlaneparam_ = leftlaneparam;
  if (leftlaneparam) {
    set_has_leftlaneparam();
  } else {
    clear_has_leftlaneparam();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EyeQLaneCenter.leftlaneParam)
}

// optional .atd.meprocess.LineParam rightlaneParam = 3;
bool EyeQLaneCenter::has_rightlaneparam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EyeQLaneCenter::set_has_rightlaneparam() {
  _has_bits_[0] |= 0x00000004u;
}
void EyeQLaneCenter::clear_has_rightlaneparam() {
  _has_bits_[0] &= ~0x00000004u;
}
void EyeQLaneCenter::clear_rightlaneparam() {
  if (rightlaneparam_ != NULL) rightlaneparam_->::atd::meprocess::LineParam::Clear();
  clear_has_rightlaneparam();
}
const ::atd::meprocess::LineParam& EyeQLaneCenter::rightlaneparam() const {
  // @@protoc_insertion_point(field_get:atd.map.EyeQLaneCenter.rightlaneParam)
  return rightlaneparam_ != NULL ? *rightlaneparam_
                         : *::atd::meprocess::LineParam::internal_default_instance();
}
::atd::meprocess::LineParam* EyeQLaneCenter::mutable_rightlaneparam() {
  set_has_rightlaneparam();
  if (rightlaneparam_ == NULL) {
    rightlaneparam_ = new ::atd::meprocess::LineParam;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EyeQLaneCenter.rightlaneParam)
  return rightlaneparam_;
}
::atd::meprocess::LineParam* EyeQLaneCenter::release_rightlaneparam() {
  // @@protoc_insertion_point(field_release:atd.map.EyeQLaneCenter.rightlaneParam)
  clear_has_rightlaneparam();
  ::atd::meprocess::LineParam* temp = rightlaneparam_;
  rightlaneparam_ = NULL;
  return temp;
}
void EyeQLaneCenter::set_allocated_rightlaneparam(::atd::meprocess::LineParam* rightlaneparam) {
  delete rightlaneparam_;
  rightlaneparam_ = rightlaneparam;
  if (rightlaneparam) {
    set_has_rightlaneparam();
  } else {
    clear_has_rightlaneparam();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EyeQLaneCenter.rightlaneParam)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TargetArrow::kLevelFieldNumber;
const int TargetArrow::kGuideInfoFieldNumber;
const int TargetArrow::kTargetarrowFieldNumber;
const int TargetArrow::kTargetDiffFieldNumber;
const int TargetArrow::kCenterlaneFieldNumber;
const int TargetArrow::kLeftlaneFieldNumber;
const int TargetArrow::kRightlaneFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TargetArrow::TargetArrow()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.TargetArrow)
}
TargetArrow::TargetArrow(const TargetArrow& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      centerlane_(from.centerlane_),
      leftlane_(from.leftlane_),
      rightlane_(from.rightlane_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_targetarrow()) {
    targetarrow_ = new ::atd::common::Arrow2D(*from.targetarrow_);
  } else {
    targetarrow_ = NULL;
  }
  ::memcpy(&level_, &from.level_,
    reinterpret_cast<char*>(&target_diff_) -
    reinterpret_cast<char*>(&level_) + sizeof(target_diff_));
  // @@protoc_insertion_point(copy_constructor:atd.map.TargetArrow)
}

void TargetArrow::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&targetarrow_, 0, reinterpret_cast<char*>(&target_diff_) -
    reinterpret_cast<char*>(&targetarrow_) + sizeof(target_diff_));
}

TargetArrow::~TargetArrow() {
  // @@protoc_insertion_point(destructor:atd.map.TargetArrow)
  SharedDtor();
}

void TargetArrow::SharedDtor() {
  if (this != internal_default_instance()) {
    delete targetarrow_;
  }
}

void TargetArrow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TargetArrow& TargetArrow::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  return *internal_default_instance();
}

TargetArrow* TargetArrow::New(::google::protobuf::Arena* arena) const {
  TargetArrow* n = new TargetArrow;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TargetArrow::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.TargetArrow)
  centerlane_.Clear();
  leftlane_.Clear();
  rightlane_.Clear();
  if (has_targetarrow()) {
    GOOGLE_DCHECK(targetarrow_ != NULL);
    targetarrow_->::atd::common::Arrow2D::Clear();
  }
  if (_has_bits_[0 / 32] & 14u) {
    ::memset(&level_, 0, reinterpret_cast<char*>(&target_diff_) -
      reinterpret_cast<char*>(&level_) + sizeof(target_diff_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TargetArrow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.TargetArrow)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 level = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_level();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 guide_info = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_guide_info();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guide_info_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Arrow2D targetarrow = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_targetarrow()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double target_diff = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_target_diff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &target_diff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Arrow2D centerlane = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_centerlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Point2D leftlane = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leftlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Point2D rightlane = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rightlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.TargetArrow)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.TargetArrow)
  return false;
#undef DO_
}

void TargetArrow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.TargetArrow)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 level = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  // optional int32 guide_info = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->guide_info(), output);
  }

  // optional .atd.common.Arrow2D targetarrow = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->targetarrow_, output);
  }

  // optional double target_diff = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->target_diff(), output);
  }

  // repeated .atd.common.Arrow2D centerlane = 6;
  for (unsigned int i = 0, n = this->centerlane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->centerlane(i), output);
  }

  // repeated .atd.common.Point2D leftlane = 7;
  for (unsigned int i = 0, n = this->leftlane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->leftlane(i), output);
  }

  // repeated .atd.common.Point2D rightlane = 8;
  for (unsigned int i = 0, n = this->rightlane_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->rightlane(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.TargetArrow)
}

size_t TargetArrow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.TargetArrow)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.common.Arrow2D centerlane = 6;
  {
    unsigned int count = this->centerlane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->centerlane(i));
    }
  }

  // repeated .atd.common.Point2D leftlane = 7;
  {
    unsigned int count = this->leftlane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leftlane(i));
    }
  }

  // repeated .atd.common.Point2D rightlane = 8;
  {
    unsigned int count = this->rightlane_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rightlane(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .atd.common.Arrow2D targetarrow = 3;
    if (has_targetarrow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->targetarrow_);
    }

    // optional int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 guide_info = 2;
    if (has_guide_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guide_info());
    }

    // optional double target_diff = 5;
    if (has_target_diff()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TargetArrow::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TargetArrow*>(&from));
}

void TargetArrow::MergeFrom(const TargetArrow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.TargetArrow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  centerlane_.MergeFrom(from.centerlane_);
  leftlane_.MergeFrom(from.leftlane_);
  rightlane_.MergeFrom(from.rightlane_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_targetarrow()->::atd::common::Arrow2D::MergeFrom(from.targetarrow());
    }
    if (cached_has_bits & 0x00000002u) {
      level_ = from.level_;
    }
    if (cached_has_bits & 0x00000004u) {
      guide_info_ = from.guide_info_;
    }
    if (cached_has_bits & 0x00000008u) {
      target_diff_ = from.target_diff_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TargetArrow::CopyFrom(const TargetArrow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.TargetArrow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TargetArrow::IsInitialized() const {
  return true;
}

void TargetArrow::Swap(TargetArrow* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TargetArrow::InternalSwap(TargetArrow* other) {
  centerlane_.InternalSwap(&other->centerlane_);
  leftlane_.InternalSwap(&other->leftlane_);
  rightlane_.InternalSwap(&other->rightlane_);
  std::swap(targetarrow_, other->targetarrow_);
  std::swap(level_, other->level_);
  std::swap(guide_info_, other->guide_info_);
  std::swap(target_diff_, other->target_diff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TargetArrow::GetTypeName() const {
  return "atd.map.TargetArrow";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TargetArrow

// optional int32 level = 1;
bool TargetArrow::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TargetArrow::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
void TargetArrow::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void TargetArrow::clear_level() {
  level_ = 0;
  clear_has_level();
}
::google::protobuf::int32 TargetArrow::level() const {
  // @@protoc_insertion_point(field_get:atd.map.TargetArrow.level)
  return level_;
}
void TargetArrow::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TargetArrow.level)
}

// optional int32 guide_info = 2;
bool TargetArrow::has_guide_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TargetArrow::set_has_guide_info() {
  _has_bits_[0] |= 0x00000004u;
}
void TargetArrow::clear_has_guide_info() {
  _has_bits_[0] &= ~0x00000004u;
}
void TargetArrow::clear_guide_info() {
  guide_info_ = 0;
  clear_has_guide_info();
}
::google::protobuf::int32 TargetArrow::guide_info() const {
  // @@protoc_insertion_point(field_get:atd.map.TargetArrow.guide_info)
  return guide_info_;
}
void TargetArrow::set_guide_info(::google::protobuf::int32 value) {
  set_has_guide_info();
  guide_info_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TargetArrow.guide_info)
}

// optional .atd.common.Arrow2D targetarrow = 3;
bool TargetArrow::has_targetarrow() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TargetArrow::set_has_targetarrow() {
  _has_bits_[0] |= 0x00000001u;
}
void TargetArrow::clear_has_targetarrow() {
  _has_bits_[0] &= ~0x00000001u;
}
void TargetArrow::clear_targetarrow() {
  if (targetarrow_ != NULL) targetarrow_->::atd::common::Arrow2D::Clear();
  clear_has_targetarrow();
}
const ::atd::common::Arrow2D& TargetArrow::targetarrow() const {
  // @@protoc_insertion_point(field_get:atd.map.TargetArrow.targetarrow)
  return targetarrow_ != NULL ? *targetarrow_
                         : *::atd::common::Arrow2D::internal_default_instance();
}
::atd::common::Arrow2D* TargetArrow::mutable_targetarrow() {
  set_has_targetarrow();
  if (targetarrow_ == NULL) {
    targetarrow_ = new ::atd::common::Arrow2D;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.TargetArrow.targetarrow)
  return targetarrow_;
}
::atd::common::Arrow2D* TargetArrow::release_targetarrow() {
  // @@protoc_insertion_point(field_release:atd.map.TargetArrow.targetarrow)
  clear_has_targetarrow();
  ::atd::common::Arrow2D* temp = targetarrow_;
  targetarrow_ = NULL;
  return temp;
}
void TargetArrow::set_allocated_targetarrow(::atd::common::Arrow2D* targetarrow) {
  delete targetarrow_;
  targetarrow_ = targetarrow;
  if (targetarrow) {
    set_has_targetarrow();
  } else {
    clear_has_targetarrow();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.TargetArrow.targetarrow)
}

// optional double target_diff = 5;
bool TargetArrow::has_target_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TargetArrow::set_has_target_diff() {
  _has_bits_[0] |= 0x00000008u;
}
void TargetArrow::clear_has_target_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
void TargetArrow::clear_target_diff() {
  target_diff_ = 0;
  clear_has_target_diff();
}
double TargetArrow::target_diff() const {
  // @@protoc_insertion_point(field_get:atd.map.TargetArrow.target_diff)
  return target_diff_;
}
void TargetArrow::set_target_diff(double value) {
  set_has_target_diff();
  target_diff_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TargetArrow.target_diff)
}

// repeated .atd.common.Arrow2D centerlane = 6;
int TargetArrow::centerlane_size() const {
  return centerlane_.size();
}
void TargetArrow::clear_centerlane() {
  centerlane_.Clear();
}
const ::atd::common::Arrow2D& TargetArrow::centerlane(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.TargetArrow.centerlane)
  return centerlane_.Get(index);
}
::atd::common::Arrow2D* TargetArrow::mutable_centerlane(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.TargetArrow.centerlane)
  return centerlane_.Mutable(index);
}
::atd::common::Arrow2D* TargetArrow::add_centerlane() {
  // @@protoc_insertion_point(field_add:atd.map.TargetArrow.centerlane)
  return centerlane_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Arrow2D >*
TargetArrow::mutable_centerlane() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.TargetArrow.centerlane)
  return &centerlane_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Arrow2D >&
TargetArrow::centerlane() const {
  // @@protoc_insertion_point(field_list:atd.map.TargetArrow.centerlane)
  return centerlane_;
}

// repeated .atd.common.Point2D leftlane = 7;
int TargetArrow::leftlane_size() const {
  return leftlane_.size();
}
void TargetArrow::clear_leftlane() {
  leftlane_.Clear();
}
const ::atd::common::Point2D& TargetArrow::leftlane(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.TargetArrow.leftlane)
  return leftlane_.Get(index);
}
::atd::common::Point2D* TargetArrow::mutable_leftlane(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.TargetArrow.leftlane)
  return leftlane_.Mutable(index);
}
::atd::common::Point2D* TargetArrow::add_leftlane() {
  // @@protoc_insertion_point(field_add:atd.map.TargetArrow.leftlane)
  return leftlane_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
TargetArrow::mutable_leftlane() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.TargetArrow.leftlane)
  return &leftlane_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
TargetArrow::leftlane() const {
  // @@protoc_insertion_point(field_list:atd.map.TargetArrow.leftlane)
  return leftlane_;
}

// repeated .atd.common.Point2D rightlane = 8;
int TargetArrow::rightlane_size() const {
  return rightlane_.size();
}
void TargetArrow::clear_rightlane() {
  rightlane_.Clear();
}
const ::atd::common::Point2D& TargetArrow::rightlane(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.TargetArrow.rightlane)
  return rightlane_.Get(index);
}
::atd::common::Point2D* TargetArrow::mutable_rightlane(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.TargetArrow.rightlane)
  return rightlane_.Mutable(index);
}
::atd::common::Point2D* TargetArrow::add_rightlane() {
  // @@protoc_insertion_point(field_add:atd.map.TargetArrow.rightlane)
  return rightlane_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
TargetArrow::mutable_rightlane() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.TargetArrow.rightlane)
  return &rightlane_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
TargetArrow::rightlane() const {
  // @@protoc_insertion_point(field_list:atd.map.TargetArrow.rightlane)
  return rightlane_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngineTargetLanes::kHeaderFieldNumber;
const int EngineTargetLanes::kReservedmsgFieldNumber;
const int EngineTargetLanes::kPoseFieldNumber;
const int EngineTargetLanes::kLeftleftlaneFieldNumber;
const int EngineTargetLanes::kLeftlaneFieldNumber;
const int EngineTargetLanes::kRightlaneFieldNumber;
const int EngineTargetLanes::kRightrightlaneFieldNumber;
const int EngineTargetLanes::kLanechangeFieldNumber;
const int EngineTargetLanes::kTargetFieldNumber;
const int EngineTargetLanes::kElementsFieldNumber;
const int EngineTargetLanes::kEyeQLaneParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngineTargetLanes::EngineTargetLanes()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.EngineTargetLanes)
}
EngineTargetLanes::EngineTargetLanes(const EngineTargetLanes& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      target_(from.target_),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_leftleftlane()) {
    leftleftlane_ = new ::atd::map::TargetLane(*from.leftleftlane_);
  } else {
    leftleftlane_ = NULL;
  }
  if (from.has_leftlane()) {
    leftlane_ = new ::atd::map::TargetLane(*from.leftlane_);
  } else {
    leftlane_ = NULL;
  }
  if (from.has_rightlane()) {
    rightlane_ = new ::atd::map::TargetLane(*from.rightlane_);
  } else {
    rightlane_ = NULL;
  }
  if (from.has_rightrightlane()) {
    rightrightlane_ = new ::atd::map::TargetLane(*from.rightrightlane_);
  } else {
    rightrightlane_ = NULL;
  }
  if (from.has_lanechange()) {
    lanechange_ = new ::atd::map::LaneChangeDecision(*from.lanechange_);
  } else {
    lanechange_ = NULL;
  }
  if (from.has_eyeqlaneparam()) {
    eyeqlaneparam_ = new ::atd::map::EyeQLaneCenter(*from.eyeqlaneparam_);
  } else {
    eyeqlaneparam_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.map.EngineTargetLanes)
}

void EngineTargetLanes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&eyeqlaneparam_) -
    reinterpret_cast<char*>(&header_) + sizeof(eyeqlaneparam_));
}

EngineTargetLanes::~EngineTargetLanes() {
  // @@protoc_insertion_point(destructor:atd.map.EngineTargetLanes)
  SharedDtor();
}

void EngineTargetLanes::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete leftleftlane_;
  }
  if (this != internal_default_instance()) {
    delete leftlane_;
  }
  if (this != internal_default_instance()) {
    delete rightlane_;
  }
  if (this != internal_default_instance()) {
    delete rightrightlane_;
  }
  if (this != internal_default_instance()) {
    delete lanechange_;
  }
  if (this != internal_default_instance()) {
    delete eyeqlaneparam_;
  }
}

void EngineTargetLanes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EngineTargetLanes& EngineTargetLanes::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginetargetlanes_2eproto::InitDefaults();
  return *internal_default_instance();
}

EngineTargetLanes* EngineTargetLanes::New(::google::protobuf::Arena* arena) const {
  EngineTargetLanes* n = new EngineTargetLanes;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EngineTargetLanes::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.EngineTargetLanes)
  target_.Clear();
  elements_.Clear();
  if (_has_bits_[0 / 32] & 255u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_leftleftlane()) {
      GOOGLE_DCHECK(leftleftlane_ != NULL);
      leftleftlane_->::atd::map::TargetLane::Clear();
    }
    if (has_leftlane()) {
      GOOGLE_DCHECK(leftlane_ != NULL);
      leftlane_->::atd::map::TargetLane::Clear();
    }
    if (has_rightlane()) {
      GOOGLE_DCHECK(rightlane_ != NULL);
      rightlane_->::atd::map::TargetLane::Clear();
    }
    if (has_rightrightlane()) {
      GOOGLE_DCHECK(rightrightlane_ != NULL);
      rightrightlane_->::atd::map::TargetLane::Clear();
    }
    if (has_lanechange()) {
      GOOGLE_DCHECK(lanechange_ != NULL);
      lanechange_->::atd::map::LaneChangeDecision::Clear();
    }
  }
  if (has_eyeqlaneparam()) {
    GOOGLE_DCHECK(eyeqlaneparam_ != NULL);
    eyeqlaneparam_->::atd::map::EyeQLaneCenter::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EngineTargetLanes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.EngineTargetLanes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.TargetLane leftleftlane = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leftleftlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.TargetLane leftlane = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leftlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.TargetLane rightlane = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.TargetLane rightrightlane = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rightrightlane()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.LaneChangeDecision lanechange = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lanechange()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.map.TargetArrow target = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_target()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.map.SurElements elements = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.EyeQLaneCenter eyeQLaneParam = 110;
      case 110: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(882u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eyeqlaneparam()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.EngineTargetLanes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.EngineTargetLanes)
  return false;
#undef DO_
}

void EngineTargetLanes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.EngineTargetLanes)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // optional .atd.map.TargetLane leftleftlane = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->leftleftlane_, output);
  }

  // optional .atd.map.TargetLane leftlane = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->leftlane_, output);
  }

  // optional .atd.map.TargetLane rightlane = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->rightlane_, output);
  }

  // optional .atd.map.TargetLane rightrightlane = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->rightrightlane_, output);
  }

  // optional .atd.map.LaneChangeDecision lanechange = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->lanechange_, output);
  }

  // repeated .atd.map.TargetArrow target = 9;
  for (unsigned int i = 0, n = this->target_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, this->target(i), output);
  }

  // repeated .atd.map.SurElements elements = 10;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      10, this->elements(i), output);
  }

  // optional .atd.map.EyeQLaneCenter eyeQLaneParam = 110;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      110, *this->eyeqlaneparam_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.EngineTargetLanes)
}

size_t EngineTargetLanes::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.EngineTargetLanes)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.map.TargetArrow target = 9;
  {
    unsigned int count = this->target_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->target(i));
    }
  }

  // repeated .atd.map.SurElements elements = 10;
  {
    unsigned int count = this->elements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elements(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.map.TargetLane leftleftlane = 4;
    if (has_leftleftlane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leftleftlane_);
    }

    // optional .atd.map.TargetLane leftlane = 5;
    if (has_leftlane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->leftlane_);
    }

    // optional .atd.map.TargetLane rightlane = 6;
    if (has_rightlane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rightlane_);
    }

    // optional .atd.map.TargetLane rightrightlane = 7;
    if (has_rightrightlane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->rightrightlane_);
    }

    // optional .atd.map.LaneChangeDecision lanechange = 8;
    if (has_lanechange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->lanechange_);
    }

  }
  // optional .atd.map.EyeQLaneCenter eyeQLaneParam = 110;
  if (has_eyeqlaneparam()) {
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->eyeqlaneparam_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EngineTargetLanes::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EngineTargetLanes*>(&from));
}

void EngineTargetLanes::MergeFrom(const EngineTargetLanes& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.EngineTargetLanes)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  target_.MergeFrom(from.target_);
  elements_.MergeFrom(from.elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_leftleftlane()->::atd::map::TargetLane::MergeFrom(from.leftleftlane());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_leftlane()->::atd::map::TargetLane::MergeFrom(from.leftlane());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_rightlane()->::atd::map::TargetLane::MergeFrom(from.rightlane());
    }
    if (cached_has_bits & 0x00000040u) {
      mutable_rightrightlane()->::atd::map::TargetLane::MergeFrom(from.rightrightlane());
    }
    if (cached_has_bits & 0x00000080u) {
      mutable_lanechange()->::atd::map::LaneChangeDecision::MergeFrom(from.lanechange());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    mutable_eyeqlaneparam()->::atd::map::EyeQLaneCenter::MergeFrom(from.eyeqlaneparam());
  }
}

void EngineTargetLanes::CopyFrom(const EngineTargetLanes& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.EngineTargetLanes)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineTargetLanes::IsInitialized() const {
  if (has_eyeqlaneparam()) {
    if (!this->eyeqlaneparam_->IsInitialized()) return false;
  }
  return true;
}

void EngineTargetLanes::Swap(EngineTargetLanes* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EngineTargetLanes::InternalSwap(EngineTargetLanes* other) {
  target_.InternalSwap(&other->target_);
  elements_.InternalSwap(&other->elements_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(leftleftlane_, other->leftleftlane_);
  std::swap(leftlane_, other->leftlane_);
  std::swap(rightlane_, other->rightlane_);
  std::swap(rightrightlane_, other->rightrightlane_);
  std::swap(lanechange_, other->lanechange_);
  std::swap(eyeqlaneparam_, other->eyeqlaneparam_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EngineTargetLanes::GetTypeName() const {
  return "atd.map.EngineTargetLanes";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EngineTargetLanes

// optional .atd.common.Header header = 1;
bool EngineTargetLanes::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EngineTargetLanes::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void EngineTargetLanes::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void EngineTargetLanes::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& EngineTargetLanes::header() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* EngineTargetLanes::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.header)
  return header_;
}
::atd::common::Header* EngineTargetLanes::release_header() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool EngineTargetLanes::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EngineTargetLanes::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void EngineTargetLanes::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void EngineTargetLanes::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& EngineTargetLanes::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* EngineTargetLanes::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* EngineTargetLanes::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool EngineTargetLanes::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EngineTargetLanes::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void EngineTargetLanes::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void EngineTargetLanes::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& EngineTargetLanes::pose() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* EngineTargetLanes::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.pose)
  return pose_;
}
::atd::localization::Pose* EngineTargetLanes::release_pose() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.pose)
}

// optional .atd.map.TargetLane leftleftlane = 4;
bool EngineTargetLanes::has_leftleftlane() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EngineTargetLanes::set_has_leftleftlane() {
  _has_bits_[0] |= 0x00000008u;
}
void EngineTargetLanes::clear_has_leftleftlane() {
  _has_bits_[0] &= ~0x00000008u;
}
void EngineTargetLanes::clear_leftleftlane() {
  if (leftleftlane_ != NULL) leftleftlane_->::atd::map::TargetLane::Clear();
  clear_has_leftleftlane();
}
const ::atd::map::TargetLane& EngineTargetLanes::leftleftlane() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.leftleftlane)
  return leftleftlane_ != NULL ? *leftleftlane_
                         : *::atd::map::TargetLane::internal_default_instance();
}
::atd::map::TargetLane* EngineTargetLanes::mutable_leftleftlane() {
  set_has_leftleftlane();
  if (leftleftlane_ == NULL) {
    leftleftlane_ = new ::atd::map::TargetLane;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.leftleftlane)
  return leftleftlane_;
}
::atd::map::TargetLane* EngineTargetLanes::release_leftleftlane() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.leftleftlane)
  clear_has_leftleftlane();
  ::atd::map::TargetLane* temp = leftleftlane_;
  leftleftlane_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_leftleftlane(::atd::map::TargetLane* leftleftlane) {
  delete leftleftlane_;
  leftleftlane_ = leftleftlane;
  if (leftleftlane) {
    set_has_leftleftlane();
  } else {
    clear_has_leftleftlane();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.leftleftlane)
}

// optional .atd.map.TargetLane leftlane = 5;
bool EngineTargetLanes::has_leftlane() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EngineTargetLanes::set_has_leftlane() {
  _has_bits_[0] |= 0x00000010u;
}
void EngineTargetLanes::clear_has_leftlane() {
  _has_bits_[0] &= ~0x00000010u;
}
void EngineTargetLanes::clear_leftlane() {
  if (leftlane_ != NULL) leftlane_->::atd::map::TargetLane::Clear();
  clear_has_leftlane();
}
const ::atd::map::TargetLane& EngineTargetLanes::leftlane() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.leftlane)
  return leftlane_ != NULL ? *leftlane_
                         : *::atd::map::TargetLane::internal_default_instance();
}
::atd::map::TargetLane* EngineTargetLanes::mutable_leftlane() {
  set_has_leftlane();
  if (leftlane_ == NULL) {
    leftlane_ = new ::atd::map::TargetLane;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.leftlane)
  return leftlane_;
}
::atd::map::TargetLane* EngineTargetLanes::release_leftlane() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.leftlane)
  clear_has_leftlane();
  ::atd::map::TargetLane* temp = leftlane_;
  leftlane_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_leftlane(::atd::map::TargetLane* leftlane) {
  delete leftlane_;
  leftlane_ = leftlane;
  if (leftlane) {
    set_has_leftlane();
  } else {
    clear_has_leftlane();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.leftlane)
}

// optional .atd.map.TargetLane rightlane = 6;
bool EngineTargetLanes::has_rightlane() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EngineTargetLanes::set_has_rightlane() {
  _has_bits_[0] |= 0x00000020u;
}
void EngineTargetLanes::clear_has_rightlane() {
  _has_bits_[0] &= ~0x00000020u;
}
void EngineTargetLanes::clear_rightlane() {
  if (rightlane_ != NULL) rightlane_->::atd::map::TargetLane::Clear();
  clear_has_rightlane();
}
const ::atd::map::TargetLane& EngineTargetLanes::rightlane() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.rightlane)
  return rightlane_ != NULL ? *rightlane_
                         : *::atd::map::TargetLane::internal_default_instance();
}
::atd::map::TargetLane* EngineTargetLanes::mutable_rightlane() {
  set_has_rightlane();
  if (rightlane_ == NULL) {
    rightlane_ = new ::atd::map::TargetLane;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.rightlane)
  return rightlane_;
}
::atd::map::TargetLane* EngineTargetLanes::release_rightlane() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.rightlane)
  clear_has_rightlane();
  ::atd::map::TargetLane* temp = rightlane_;
  rightlane_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_rightlane(::atd::map::TargetLane* rightlane) {
  delete rightlane_;
  rightlane_ = rightlane;
  if (rightlane) {
    set_has_rightlane();
  } else {
    clear_has_rightlane();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.rightlane)
}

// optional .atd.map.TargetLane rightrightlane = 7;
bool EngineTargetLanes::has_rightrightlane() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void EngineTargetLanes::set_has_rightrightlane() {
  _has_bits_[0] |= 0x00000040u;
}
void EngineTargetLanes::clear_has_rightrightlane() {
  _has_bits_[0] &= ~0x00000040u;
}
void EngineTargetLanes::clear_rightrightlane() {
  if (rightrightlane_ != NULL) rightrightlane_->::atd::map::TargetLane::Clear();
  clear_has_rightrightlane();
}
const ::atd::map::TargetLane& EngineTargetLanes::rightrightlane() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.rightrightlane)
  return rightrightlane_ != NULL ? *rightrightlane_
                         : *::atd::map::TargetLane::internal_default_instance();
}
::atd::map::TargetLane* EngineTargetLanes::mutable_rightrightlane() {
  set_has_rightrightlane();
  if (rightrightlane_ == NULL) {
    rightrightlane_ = new ::atd::map::TargetLane;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.rightrightlane)
  return rightrightlane_;
}
::atd::map::TargetLane* EngineTargetLanes::release_rightrightlane() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.rightrightlane)
  clear_has_rightrightlane();
  ::atd::map::TargetLane* temp = rightrightlane_;
  rightrightlane_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_rightrightlane(::atd::map::TargetLane* rightrightlane) {
  delete rightrightlane_;
  rightrightlane_ = rightrightlane;
  if (rightrightlane) {
    set_has_rightrightlane();
  } else {
    clear_has_rightrightlane();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.rightrightlane)
}

// optional .atd.map.LaneChangeDecision lanechange = 8;
bool EngineTargetLanes::has_lanechange() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void EngineTargetLanes::set_has_lanechange() {
  _has_bits_[0] |= 0x00000080u;
}
void EngineTargetLanes::clear_has_lanechange() {
  _has_bits_[0] &= ~0x00000080u;
}
void EngineTargetLanes::clear_lanechange() {
  if (lanechange_ != NULL) lanechange_->::atd::map::LaneChangeDecision::Clear();
  clear_has_lanechange();
}
const ::atd::map::LaneChangeDecision& EngineTargetLanes::lanechange() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.lanechange)
  return lanechange_ != NULL ? *lanechange_
                         : *::atd::map::LaneChangeDecision::internal_default_instance();
}
::atd::map::LaneChangeDecision* EngineTargetLanes::mutable_lanechange() {
  set_has_lanechange();
  if (lanechange_ == NULL) {
    lanechange_ = new ::atd::map::LaneChangeDecision;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.lanechange)
  return lanechange_;
}
::atd::map::LaneChangeDecision* EngineTargetLanes::release_lanechange() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.lanechange)
  clear_has_lanechange();
  ::atd::map::LaneChangeDecision* temp = lanechange_;
  lanechange_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_lanechange(::atd::map::LaneChangeDecision* lanechange) {
  delete lanechange_;
  lanechange_ = lanechange;
  if (lanechange) {
    set_has_lanechange();
  } else {
    clear_has_lanechange();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.lanechange)
}

// repeated .atd.map.TargetArrow target = 9;
int EngineTargetLanes::target_size() const {
  return target_.size();
}
void EngineTargetLanes::clear_target() {
  target_.Clear();
}
const ::atd::map::TargetArrow& EngineTargetLanes::target(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.target)
  return target_.Get(index);
}
::atd::map::TargetArrow* EngineTargetLanes::mutable_target(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.target)
  return target_.Mutable(index);
}
::atd::map::TargetArrow* EngineTargetLanes::add_target() {
  // @@protoc_insertion_point(field_add:atd.map.EngineTargetLanes.target)
  return target_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::TargetArrow >*
EngineTargetLanes::mutable_target() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.EngineTargetLanes.target)
  return &target_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::TargetArrow >&
EngineTargetLanes::target() const {
  // @@protoc_insertion_point(field_list:atd.map.EngineTargetLanes.target)
  return target_;
}

// repeated .atd.map.SurElements elements = 10;
int EngineTargetLanes::elements_size() const {
  return elements_.size();
}
void EngineTargetLanes::clear_elements() {
  elements_.Clear();
}
const ::atd::map::SurElements& EngineTargetLanes::elements(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.elements)
  return elements_.Get(index);
}
::atd::map::SurElements* EngineTargetLanes::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.elements)
  return elements_.Mutable(index);
}
::atd::map::SurElements* EngineTargetLanes::add_elements() {
  // @@protoc_insertion_point(field_add:atd.map.EngineTargetLanes.elements)
  return elements_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::SurElements >*
EngineTargetLanes::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.EngineTargetLanes.elements)
  return &elements_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::SurElements >&
EngineTargetLanes::elements() const {
  // @@protoc_insertion_point(field_list:atd.map.EngineTargetLanes.elements)
  return elements_;
}

// optional .atd.map.EyeQLaneCenter eyeQLaneParam = 110;
bool EngineTargetLanes::has_eyeqlaneparam() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void EngineTargetLanes::set_has_eyeqlaneparam() {
  _has_bits_[0] |= 0x00000100u;
}
void EngineTargetLanes::clear_has_eyeqlaneparam() {
  _has_bits_[0] &= ~0x00000100u;
}
void EngineTargetLanes::clear_eyeqlaneparam() {
  if (eyeqlaneparam_ != NULL) eyeqlaneparam_->::atd::map::EyeQLaneCenter::Clear();
  clear_has_eyeqlaneparam();
}
const ::atd::map::EyeQLaneCenter& EngineTargetLanes::eyeqlaneparam() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineTargetLanes.eyeQLaneParam)
  return eyeqlaneparam_ != NULL ? *eyeqlaneparam_
                         : *::atd::map::EyeQLaneCenter::internal_default_instance();
}
::atd::map::EyeQLaneCenter* EngineTargetLanes::mutable_eyeqlaneparam() {
  set_has_eyeqlaneparam();
  if (eyeqlaneparam_ == NULL) {
    eyeqlaneparam_ = new ::atd::map::EyeQLaneCenter;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineTargetLanes.eyeQLaneParam)
  return eyeqlaneparam_;
}
::atd::map::EyeQLaneCenter* EngineTargetLanes::release_eyeqlaneparam() {
  // @@protoc_insertion_point(field_release:atd.map.EngineTargetLanes.eyeQLaneParam)
  clear_has_eyeqlaneparam();
  ::atd::map::EyeQLaneCenter* temp = eyeqlaneparam_;
  eyeqlaneparam_ = NULL;
  return temp;
}
void EngineTargetLanes::set_allocated_eyeqlaneparam(::atd::map::EyeQLaneCenter* eyeqlaneparam) {
  delete eyeqlaneparam_;
  eyeqlaneparam_ = eyeqlaneparam;
  if (eyeqlaneparam) {
    set_has_eyeqlaneparam();
  } else {
    clear_has_eyeqlaneparam();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineTargetLanes.eyeQLaneParam)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace atd

// @@protoc_insertion_point(global_scope)
