// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/hdmap/engineremaindistance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/hdmap/engineremaindistance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace map {
class LANE_LINK_KEYDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LANE_LINK_KEY> {
} _LANE_LINK_KEY_default_instance_;
class SPEED_LIMITDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SPEED_LIMIT> {
} _SPEED_LIMIT_default_instance_;
class TSR_DISTANCEDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<TSR_DISTANCE> {
} _TSR_DISTANCE_default_instance_;
class ONE_PARKING_SITEDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ONE_PARKING_SITE> {
} _ONE_PARKING_SITE_default_instance_;
class EngineRemainDistanceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EngineRemainDistance> {
} _EngineRemainDistance_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _LANE_LINK_KEY_default_instance_.Shutdown();
  _SPEED_LIMIT_default_instance_.Shutdown();
  _TSR_DISTANCE_default_instance_.Shutdown();
  _ONE_PARKING_SITE_default_instance_.Shutdown();
  _EngineRemainDistance_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  _LANE_LINK_KEY_default_instance_.DefaultConstruct();
  _SPEED_LIMIT_default_instance_.DefaultConstruct();
  _TSR_DISTANCE_default_instance_.DefaultConstruct();
  _ONE_PARKING_SITE_default_instance_.DefaultConstruct();
  _EngineRemainDistance_default_instance_.DefaultConstruct();
  _TSR_DISTANCE_default_instance_.get_mutable()->stcurrentspeedlimit_ = const_cast< ::atd::map::SPEED_LIMIT*>(
      ::atd::map::SPEED_LIMIT::internal_default_instance());
  _TSR_DISTANCE_default_instance_.get_mutable()->stnextspeedlimit_ = const_cast< ::atd::map::SPEED_LIMIT*>(
      ::atd::map::SPEED_LIMIT::internal_default_instance());
  _TSR_DISTANCE_default_instance_.get_mutable()->stcurrentlanekey_ = const_cast< ::atd::map::LANE_LINK_KEY*>(
      ::atd::map::LANE_LINK_KEY::internal_default_instance());
  _ONE_PARKING_SITE_default_instance_.get_mutable()->stpoint2vehiclecor_ = const_cast< ::atd::common::Point3D*>(
      ::atd::common::Point3D::internal_default_instance());
  _EngineRemainDistance_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _EngineRemainDistance_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _EngineRemainDistance_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _EngineRemainDistance_default_instance_.get_mutable()->tsrdistance_ = const_cast< ::atd::map::TSR_DISTANCE*>(
      ::atd::map::TSR_DISTANCE::internal_default_instance());
  _EngineRemainDistance_default_instance_.get_mutable()->oneparkingsite_ = const_cast< ::atd::map::ONE_PARKING_SITE*>(
      ::atd::map::ONE_PARKING_SITE::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LANE_LINK_KEY::kMIRoadIdFieldNumber;
const int LANE_LINK_KEY::kMISectionSeqFieldNumber;
const int LANE_LINK_KEY::kMILaneNumFieldNumber;
const int LANE_LINK_KEY::kMIBranchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LANE_LINK_KEY::LANE_LINK_KEY()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.LANE_LINK_KEY)
}
LANE_LINK_KEY::LANE_LINK_KEY(const LANE_LINK_KEY& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_iroadid_, &from.m_iroadid_,
    reinterpret_cast<char*>(&m_ibranch_) -
    reinterpret_cast<char*>(&m_iroadid_) + sizeof(m_ibranch_));
  // @@protoc_insertion_point(copy_constructor:atd.map.LANE_LINK_KEY)
}

void LANE_LINK_KEY::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&m_iroadid_, 0, reinterpret_cast<char*>(&m_ibranch_) -
    reinterpret_cast<char*>(&m_iroadid_) + sizeof(m_ibranch_));
}

LANE_LINK_KEY::~LANE_LINK_KEY() {
  // @@protoc_insertion_point(destructor:atd.map.LANE_LINK_KEY)
  SharedDtor();
}

void LANE_LINK_KEY::SharedDtor() {
}

void LANE_LINK_KEY::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LANE_LINK_KEY& LANE_LINK_KEY::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  return *internal_default_instance();
}

LANE_LINK_KEY* LANE_LINK_KEY::New(::google::protobuf::Arena* arena) const {
  LANE_LINK_KEY* n = new LANE_LINK_KEY;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LANE_LINK_KEY::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.LANE_LINK_KEY)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&m_iroadid_, 0, reinterpret_cast<char*>(&m_ibranch_) -
      reinterpret_cast<char*>(&m_iroadid_) + sizeof(m_ibranch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LANE_LINK_KEY::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.LANE_LINK_KEY)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_iRoadId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_m_iroadid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_iroadid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iSectionSeq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_m_isectionseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isectionseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iLaneNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_m_ilanenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ilanenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iBranch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_m_ibranch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ibranch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.LANE_LINK_KEY)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.LANE_LINK_KEY)
  return false;
#undef DO_
}

void LANE_LINK_KEY::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.LANE_LINK_KEY)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 m_iRoadId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_iroadid(), output);
  }

  // optional int32 m_iSectionSeq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_isectionseq(), output);
  }

  // optional int32 m_iLaneNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ilanenum(), output);
  }

  // optional int32 m_iBranch = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ibranch(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.LANE_LINK_KEY)
}

size_t LANE_LINK_KEY::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.LANE_LINK_KEY)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 m_iRoadId = 1;
    if (has_m_iroadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_iroadid());
    }

    // optional int32 m_iSectionSeq = 2;
    if (has_m_isectionseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isectionseq());
    }

    // optional int32 m_iLaneNum = 3;
    if (has_m_ilanenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ilanenum());
    }

    // optional int32 m_iBranch = 4;
    if (has_m_ibranch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ibranch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LANE_LINK_KEY::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LANE_LINK_KEY*>(&from));
}

void LANE_LINK_KEY::MergeFrom(const LANE_LINK_KEY& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.LANE_LINK_KEY)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      m_iroadid_ = from.m_iroadid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_isectionseq_ = from.m_isectionseq_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_ilanenum_ = from.m_ilanenum_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_ibranch_ = from.m_ibranch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LANE_LINK_KEY::CopyFrom(const LANE_LINK_KEY& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.LANE_LINK_KEY)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LANE_LINK_KEY::IsInitialized() const {
  return true;
}

void LANE_LINK_KEY::Swap(LANE_LINK_KEY* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LANE_LINK_KEY::InternalSwap(LANE_LINK_KEY* other) {
  std::swap(m_iroadid_, other->m_iroadid_);
  std::swap(m_isectionseq_, other->m_isectionseq_);
  std::swap(m_ilanenum_, other->m_ilanenum_);
  std::swap(m_ibranch_, other->m_ibranch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LANE_LINK_KEY::GetTypeName() const {
  return "atd.map.LANE_LINK_KEY";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LANE_LINK_KEY

// optional int64 m_iRoadId = 1;
bool LANE_LINK_KEY::has_m_iroadid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LANE_LINK_KEY::set_has_m_iroadid() {
  _has_bits_[0] |= 0x00000001u;
}
void LANE_LINK_KEY::clear_has_m_iroadid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LANE_LINK_KEY::clear_m_iroadid() {
  m_iroadid_ = GOOGLE_LONGLONG(0);
  clear_has_m_iroadid();
}
::google::protobuf::int64 LANE_LINK_KEY::m_iroadid() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY.m_iRoadId)
  return m_iroadid_;
}
void LANE_LINK_KEY::set_m_iroadid(::google::protobuf::int64 value) {
  set_has_m_iroadid();
  m_iroadid_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY.m_iRoadId)
}

// optional int32 m_iSectionSeq = 2;
bool LANE_LINK_KEY::has_m_isectionseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LANE_LINK_KEY::set_has_m_isectionseq() {
  _has_bits_[0] |= 0x00000002u;
}
void LANE_LINK_KEY::clear_has_m_isectionseq() {
  _has_bits_[0] &= ~0x00000002u;
}
void LANE_LINK_KEY::clear_m_isectionseq() {
  m_isectionseq_ = 0;
  clear_has_m_isectionseq();
}
::google::protobuf::int32 LANE_LINK_KEY::m_isectionseq() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY.m_iSectionSeq)
  return m_isectionseq_;
}
void LANE_LINK_KEY::set_m_isectionseq(::google::protobuf::int32 value) {
  set_has_m_isectionseq();
  m_isectionseq_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY.m_iSectionSeq)
}

// optional int32 m_iLaneNum = 3;
bool LANE_LINK_KEY::has_m_ilanenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LANE_LINK_KEY::set_has_m_ilanenum() {
  _has_bits_[0] |= 0x00000004u;
}
void LANE_LINK_KEY::clear_has_m_ilanenum() {
  _has_bits_[0] &= ~0x00000004u;
}
void LANE_LINK_KEY::clear_m_ilanenum() {
  m_ilanenum_ = 0;
  clear_has_m_ilanenum();
}
::google::protobuf::int32 LANE_LINK_KEY::m_ilanenum() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY.m_iLaneNum)
  return m_ilanenum_;
}
void LANE_LINK_KEY::set_m_ilanenum(::google::protobuf::int32 value) {
  set_has_m_ilanenum();
  m_ilanenum_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY.m_iLaneNum)
}

// optional int32 m_iBranch = 4;
bool LANE_LINK_KEY::has_m_ibranch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LANE_LINK_KEY::set_has_m_ibranch() {
  _has_bits_[0] |= 0x00000008u;
}
void LANE_LINK_KEY::clear_has_m_ibranch() {
  _has_bits_[0] &= ~0x00000008u;
}
void LANE_LINK_KEY::clear_m_ibranch() {
  m_ibranch_ = 0;
  clear_has_m_ibranch();
}
::google::protobuf::int32 LANE_LINK_KEY::m_ibranch() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY.m_iBranch)
  return m_ibranch_;
}
void LANE_LINK_KEY::set_m_ibranch(::google::protobuf::int32 value) {
  set_has_m_ibranch();
  m_ibranch_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY.m_iBranch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SPEED_LIMIT::kMIMaxSpeedFieldNumber;
const int SPEED_LIMIT::kMIMinSpeedFieldNumber;
const int SPEED_LIMIT::kMIRecommentSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SPEED_LIMIT::SPEED_LIMIT()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.SPEED_LIMIT)
}
SPEED_LIMIT::SPEED_LIMIT(const SPEED_LIMIT& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_imaxspeed_, &from.m_imaxspeed_,
    reinterpret_cast<char*>(&m_irecommentspeed_) -
    reinterpret_cast<char*>(&m_imaxspeed_) + sizeof(m_irecommentspeed_));
  // @@protoc_insertion_point(copy_constructor:atd.map.SPEED_LIMIT)
}

void SPEED_LIMIT::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&m_imaxspeed_, 0, reinterpret_cast<char*>(&m_irecommentspeed_) -
    reinterpret_cast<char*>(&m_imaxspeed_) + sizeof(m_irecommentspeed_));
}

SPEED_LIMIT::~SPEED_LIMIT() {
  // @@protoc_insertion_point(destructor:atd.map.SPEED_LIMIT)
  SharedDtor();
}

void SPEED_LIMIT::SharedDtor() {
}

void SPEED_LIMIT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SPEED_LIMIT& SPEED_LIMIT::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  return *internal_default_instance();
}

SPEED_LIMIT* SPEED_LIMIT::New(::google::protobuf::Arena* arena) const {
  SPEED_LIMIT* n = new SPEED_LIMIT;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SPEED_LIMIT::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.SPEED_LIMIT)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&m_imaxspeed_, 0, reinterpret_cast<char*>(&m_irecommentspeed_) -
      reinterpret_cast<char*>(&m_imaxspeed_) + sizeof(m_irecommentspeed_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SPEED_LIMIT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.SPEED_LIMIT)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 m_iMaxSpeed = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_m_imaxspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_imaxspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iMinSpeed = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_m_iminspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_iminspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iRecommentSpeed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_m_irecommentspeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_irecommentspeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.SPEED_LIMIT)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.SPEED_LIMIT)
  return false;
#undef DO_
}

void SPEED_LIMIT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.SPEED_LIMIT)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 m_iMaxSpeed = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->m_imaxspeed(), output);
  }

  // optional int32 m_iMinSpeed = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_iminspeed(), output);
  }

  // optional int32 m_iRecommentSpeed = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_irecommentspeed(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.SPEED_LIMIT)
}

size_t SPEED_LIMIT::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.SPEED_LIMIT)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 m_iMaxSpeed = 1;
    if (has_m_imaxspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_imaxspeed());
    }

    // optional int32 m_iMinSpeed = 2;
    if (has_m_iminspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_iminspeed());
    }

    // optional int32 m_iRecommentSpeed = 3;
    if (has_m_irecommentspeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_irecommentspeed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SPEED_LIMIT::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SPEED_LIMIT*>(&from));
}

void SPEED_LIMIT::MergeFrom(const SPEED_LIMIT& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.SPEED_LIMIT)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      m_imaxspeed_ = from.m_imaxspeed_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_iminspeed_ = from.m_iminspeed_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_irecommentspeed_ = from.m_irecommentspeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SPEED_LIMIT::CopyFrom(const SPEED_LIMIT& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.SPEED_LIMIT)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SPEED_LIMIT::IsInitialized() const {
  return true;
}

void SPEED_LIMIT::Swap(SPEED_LIMIT* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SPEED_LIMIT::InternalSwap(SPEED_LIMIT* other) {
  std::swap(m_imaxspeed_, other->m_imaxspeed_);
  std::swap(m_iminspeed_, other->m_iminspeed_);
  std::swap(m_irecommentspeed_, other->m_irecommentspeed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SPEED_LIMIT::GetTypeName() const {
  return "atd.map.SPEED_LIMIT";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SPEED_LIMIT

// optional int32 m_iMaxSpeed = 1;
bool SPEED_LIMIT::has_m_imaxspeed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SPEED_LIMIT::set_has_m_imaxspeed() {
  _has_bits_[0] |= 0x00000001u;
}
void SPEED_LIMIT::clear_has_m_imaxspeed() {
  _has_bits_[0] &= ~0x00000001u;
}
void SPEED_LIMIT::clear_m_imaxspeed() {
  m_imaxspeed_ = 0;
  clear_has_m_imaxspeed();
}
::google::protobuf::int32 SPEED_LIMIT::m_imaxspeed() const {
  // @@protoc_insertion_point(field_get:atd.map.SPEED_LIMIT.m_iMaxSpeed)
  return m_imaxspeed_;
}
void SPEED_LIMIT::set_m_imaxspeed(::google::protobuf::int32 value) {
  set_has_m_imaxspeed();
  m_imaxspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.map.SPEED_LIMIT.m_iMaxSpeed)
}

// optional int32 m_iMinSpeed = 2;
bool SPEED_LIMIT::has_m_iminspeed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SPEED_LIMIT::set_has_m_iminspeed() {
  _has_bits_[0] |= 0x00000002u;
}
void SPEED_LIMIT::clear_has_m_iminspeed() {
  _has_bits_[0] &= ~0x00000002u;
}
void SPEED_LIMIT::clear_m_iminspeed() {
  m_iminspeed_ = 0;
  clear_has_m_iminspeed();
}
::google::protobuf::int32 SPEED_LIMIT::m_iminspeed() const {
  // @@protoc_insertion_point(field_get:atd.map.SPEED_LIMIT.m_iMinSpeed)
  return m_iminspeed_;
}
void SPEED_LIMIT::set_m_iminspeed(::google::protobuf::int32 value) {
  set_has_m_iminspeed();
  m_iminspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.map.SPEED_LIMIT.m_iMinSpeed)
}

// optional int32 m_iRecommentSpeed = 3;
bool SPEED_LIMIT::has_m_irecommentspeed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SPEED_LIMIT::set_has_m_irecommentspeed() {
  _has_bits_[0] |= 0x00000004u;
}
void SPEED_LIMIT::clear_has_m_irecommentspeed() {
  _has_bits_[0] &= ~0x00000004u;
}
void SPEED_LIMIT::clear_m_irecommentspeed() {
  m_irecommentspeed_ = 0;
  clear_has_m_irecommentspeed();
}
::google::protobuf::int32 SPEED_LIMIT::m_irecommentspeed() const {
  // @@protoc_insertion_point(field_get:atd.map.SPEED_LIMIT.m_iRecommentSpeed)
  return m_irecommentspeed_;
}
void SPEED_LIMIT::set_m_irecommentspeed(::google::protobuf::int32 value) {
  set_has_m_irecommentspeed();
  m_irecommentspeed_ = value;
  // @@protoc_insertion_point(field_set:atd.map.SPEED_LIMIT.m_iRecommentSpeed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TSR_DISTANCE::kStCurrentSpeedLimitFieldNumber;
const int TSR_DISTANCE::kStNextSpeedLimitFieldNumber;
const int TSR_DISTANCE::kStCurrentLaneKeyFieldNumber;
const int TSR_DISTANCE::kICurrentLaneKeyIDFieldNumber;
const int TSR_DISTANCE::kITotleLaneKeyIDFieldNumber;
const int TSR_DISTANCE::kITurnFlagFieldNumber;
const int TSR_DISTANCE::kITurnStatusFieldNumber;
const int TSR_DISTANCE::kIsCalculatedLaneFieldNumber;
const int TSR_DISTANCE::kIsDummyRoadFieldNumber;
const int TSR_DISTANCE::kITotleStoplineNumFieldNumber;
const int TSR_DISTANCE::kIRemainStoplineNumFieldNumber;
const int TSR_DISTANCE::kIsLeftTurnZoneFieldNumber;
const int TSR_DISTANCE::kIParkingStatusFieldNumber;
const int TSR_DISTANCE::kDDistance2StoplineFieldNumber;
const int TSR_DISTANCE::kDDistance2DestinationFieldNumber;
const int TSR_DISTANCE::kDWholeRouteLengthFieldNumber;
const int TSR_DISTANCE::kDDistance2ParkingFieldNumber;
const int TSR_DISTANCE::kDDistance2LaneEndFieldNumber;
const int TSR_DISTANCE::kDWholeParkingLengthFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TSR_DISTANCE::TSR_DISTANCE()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.TSR_DISTANCE)
}
TSR_DISTANCE::TSR_DISTANCE(const TSR_DISTANCE& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stcurrentspeedlimit()) {
    stcurrentspeedlimit_ = new ::atd::map::SPEED_LIMIT(*from.stcurrentspeedlimit_);
  } else {
    stcurrentspeedlimit_ = NULL;
  }
  if (from.has_stnextspeedlimit()) {
    stnextspeedlimit_ = new ::atd::map::SPEED_LIMIT(*from.stnextspeedlimit_);
  } else {
    stnextspeedlimit_ = NULL;
  }
  if (from.has_stcurrentlanekey()) {
    stcurrentlanekey_ = new ::atd::map::LANE_LINK_KEY(*from.stcurrentlanekey_);
  } else {
    stcurrentlanekey_ = NULL;
  }
  ::memcpy(&icurrentlanekeyid_, &from.icurrentlanekeyid_,
    reinterpret_cast<char*>(&dwholeparkinglength_) -
    reinterpret_cast<char*>(&icurrentlanekeyid_) + sizeof(dwholeparkinglength_));
  // @@protoc_insertion_point(copy_constructor:atd.map.TSR_DISTANCE)
}

void TSR_DISTANCE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stcurrentspeedlimit_, 0, reinterpret_cast<char*>(&dwholeparkinglength_) -
    reinterpret_cast<char*>(&stcurrentspeedlimit_) + sizeof(dwholeparkinglength_));
}

TSR_DISTANCE::~TSR_DISTANCE() {
  // @@protoc_insertion_point(destructor:atd.map.TSR_DISTANCE)
  SharedDtor();
}

void TSR_DISTANCE::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stcurrentspeedlimit_;
  }
  if (this != internal_default_instance()) {
    delete stnextspeedlimit_;
  }
  if (this != internal_default_instance()) {
    delete stcurrentlanekey_;
  }
}

void TSR_DISTANCE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const TSR_DISTANCE& TSR_DISTANCE::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  return *internal_default_instance();
}

TSR_DISTANCE* TSR_DISTANCE::New(::google::protobuf::Arena* arena) const {
  TSR_DISTANCE* n = new TSR_DISTANCE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TSR_DISTANCE::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.TSR_DISTANCE)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_stcurrentspeedlimit()) {
      GOOGLE_DCHECK(stcurrentspeedlimit_ != NULL);
      stcurrentspeedlimit_->::atd::map::SPEED_LIMIT::Clear();
    }
    if (has_stnextspeedlimit()) {
      GOOGLE_DCHECK(stnextspeedlimit_ != NULL);
      stnextspeedlimit_->::atd::map::SPEED_LIMIT::Clear();
    }
    if (has_stcurrentlanekey()) {
      GOOGLE_DCHECK(stcurrentlanekey_ != NULL);
      stcurrentlanekey_->::atd::map::LANE_LINK_KEY::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 248u) {
    ::memset(&icurrentlanekeyid_, 0, reinterpret_cast<char*>(&iscalculatedlane_) -
      reinterpret_cast<char*>(&icurrentlanekeyid_) + sizeof(iscalculatedlane_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&isdummyroad_, 0, reinterpret_cast<char*>(&dwholeroutelength_) -
      reinterpret_cast<char*>(&isdummyroad_) + sizeof(dwholeroutelength_));
  }
  if (_has_bits_[16 / 32] & 458752u) {
    ::memset(&ddistance2parking_, 0, reinterpret_cast<char*>(&dwholeparkinglength_) -
      reinterpret_cast<char*>(&ddistance2parking_) + sizeof(dwholeparkinglength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TSR_DISTANCE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.TSR_DISTANCE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.map.SPEED_LIMIT stCurrentSpeedLimit = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stcurrentspeedlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.SPEED_LIMIT stNextSpeedLimit = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stnextspeedlimit()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.LANE_LINK_KEY stCurrentLaneKey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stcurrentlanekey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iCurrentLaneKeyID = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_icurrentlanekeyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icurrentlanekeyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iTotleLaneKeyID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_itotlelanekeyid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itotlelanekeyid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iTurnFlag = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_iturnflag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iturnflag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iTurnStatus = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_iturnstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iturnstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 isCalculatedLane = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_iscalculatedlane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscalculatedlane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 isDummyRoad = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_isdummyroad();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isdummyroad_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iTotleStoplineNum = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_itotlestoplinenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itotlestoplinenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iRemainStoplineNum = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_iremainstoplinenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iremainstoplinenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 isLeftTurnZone = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_isleftturnzone();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isleftturnzone_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iParkingStatus = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_iparkingstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iparkingstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dDistance2Stopline = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_ddistance2stopline();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddistance2stopline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dDistance2Destination = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_ddistance2destination();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddistance2destination_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dWholeRouteLength = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_dwholeroutelength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwholeroutelength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dDistance2Parking = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(145u)) {
          set_has_ddistance2parking();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddistance2parking_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dDistance2LaneEnd = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(153u)) {
          set_has_ddistance2laneend();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddistance2laneend_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double dWholeParkingLength = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_dwholeparkinglength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dwholeparkinglength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.TSR_DISTANCE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.TSR_DISTANCE)
  return false;
#undef DO_
}

void TSR_DISTANCE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.TSR_DISTANCE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.map.SPEED_LIMIT stCurrentSpeedLimit = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->stcurrentspeedlimit_, output);
  }

  // optional .atd.map.SPEED_LIMIT stNextSpeedLimit = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stnextspeedlimit_, output);
  }

  // optional .atd.map.LANE_LINK_KEY stCurrentLaneKey = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->stcurrentlanekey_, output);
  }

  // optional int32 iCurrentLaneKeyID = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->icurrentlanekeyid(), output);
  }

  // optional int32 iTotleLaneKeyID = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->itotlelanekeyid(), output);
  }

  // optional int32 iTurnFlag = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->iturnflag(), output);
  }

  // optional int32 iTurnStatus = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iturnstatus(), output);
  }

  // optional int32 isCalculatedLane = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->iscalculatedlane(), output);
  }

  // optional int32 isDummyRoad = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->isdummyroad(), output);
  }

  // optional int32 iTotleStoplineNum = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->itotlestoplinenum(), output);
  }

  // optional int32 iRemainStoplineNum = 12;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->iremainstoplinenum(), output);
  }

  // optional int32 isLeftTurnZone = 13;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->isleftturnzone(), output);
  }

  // optional int32 iParkingStatus = 14;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->iparkingstatus(), output);
  }

  // optional double dDistance2Stopline = 15;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->ddistance2stopline(), output);
  }

  // optional double dDistance2Destination = 16;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->ddistance2destination(), output);
  }

  // optional double dWholeRouteLength = 17;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->dwholeroutelength(), output);
  }

  // optional double dDistance2Parking = 18;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->ddistance2parking(), output);
  }

  // optional double dDistance2LaneEnd = 19;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->ddistance2laneend(), output);
  }

  // optional double dWholeParkingLength = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->dwholeparkinglength(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.TSR_DISTANCE)
}

size_t TSR_DISTANCE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.TSR_DISTANCE)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.map.SPEED_LIMIT stCurrentSpeedLimit = 2;
    if (has_stcurrentspeedlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stcurrentspeedlimit_);
    }

    // optional .atd.map.SPEED_LIMIT stNextSpeedLimit = 3;
    if (has_stnextspeedlimit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stnextspeedlimit_);
    }

    // optional .atd.map.LANE_LINK_KEY stCurrentLaneKey = 4;
    if (has_stcurrentlanekey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stcurrentlanekey_);
    }

    // optional int32 iCurrentLaneKeyID = 5;
    if (has_icurrentlanekeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icurrentlanekeyid());
    }

    // optional int32 iTotleLaneKeyID = 6;
    if (has_itotlelanekeyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itotlelanekeyid());
    }

    // optional int32 iTurnFlag = 7;
    if (has_iturnflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iturnflag());
    }

    // optional int32 iTurnStatus = 8;
    if (has_iturnstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iturnstatus());
    }

    // optional int32 isCalculatedLane = 9;
    if (has_iscalculatedlane()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscalculatedlane());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional int32 isDummyRoad = 10;
    if (has_isdummyroad()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isdummyroad());
    }

    // optional int32 iTotleStoplineNum = 11;
    if (has_itotlestoplinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itotlestoplinenum());
    }

    // optional int32 iRemainStoplineNum = 12;
    if (has_iremainstoplinenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iremainstoplinenum());
    }

    // optional int32 isLeftTurnZone = 13;
    if (has_isleftturnzone()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isleftturnzone());
    }

    // optional int32 iParkingStatus = 14;
    if (has_iparkingstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iparkingstatus());
    }

    // optional double dDistance2Stopline = 15;
    if (has_ddistance2stopline()) {
      total_size += 1 + 8;
    }

    // optional double dDistance2Destination = 16;
    if (has_ddistance2destination()) {
      total_size += 2 + 8;
    }

    // optional double dWholeRouteLength = 17;
    if (has_dwholeroutelength()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 458752u) {
    // optional double dDistance2Parking = 18;
    if (has_ddistance2parking()) {
      total_size += 2 + 8;
    }

    // optional double dDistance2LaneEnd = 19;
    if (has_ddistance2laneend()) {
      total_size += 2 + 8;
    }

    // optional double dWholeParkingLength = 20;
    if (has_dwholeparkinglength()) {
      total_size += 2 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TSR_DISTANCE::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const TSR_DISTANCE*>(&from));
}

void TSR_DISTANCE::MergeFrom(const TSR_DISTANCE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.TSR_DISTANCE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stcurrentspeedlimit()->::atd::map::SPEED_LIMIT::MergeFrom(from.stcurrentspeedlimit());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_stnextspeedlimit()->::atd::map::SPEED_LIMIT::MergeFrom(from.stnextspeedlimit());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_stcurrentlanekey()->::atd::map::LANE_LINK_KEY::MergeFrom(from.stcurrentlanekey());
    }
    if (cached_has_bits & 0x00000008u) {
      icurrentlanekeyid_ = from.icurrentlanekeyid_;
    }
    if (cached_has_bits & 0x00000010u) {
      itotlelanekeyid_ = from.itotlelanekeyid_;
    }
    if (cached_has_bits & 0x00000020u) {
      iturnflag_ = from.iturnflag_;
    }
    if (cached_has_bits & 0x00000040u) {
      iturnstatus_ = from.iturnstatus_;
    }
    if (cached_has_bits & 0x00000080u) {
      iscalculatedlane_ = from.iscalculatedlane_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      isdummyroad_ = from.isdummyroad_;
    }
    if (cached_has_bits & 0x00000200u) {
      itotlestoplinenum_ = from.itotlestoplinenum_;
    }
    if (cached_has_bits & 0x00000400u) {
      iremainstoplinenum_ = from.iremainstoplinenum_;
    }
    if (cached_has_bits & 0x00000800u) {
      isleftturnzone_ = from.isleftturnzone_;
    }
    if (cached_has_bits & 0x00001000u) {
      iparkingstatus_ = from.iparkingstatus_;
    }
    if (cached_has_bits & 0x00002000u) {
      ddistance2stopline_ = from.ddistance2stopline_;
    }
    if (cached_has_bits & 0x00004000u) {
      ddistance2destination_ = from.ddistance2destination_;
    }
    if (cached_has_bits & 0x00008000u) {
      dwholeroutelength_ = from.dwholeroutelength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 458752u) {
    if (cached_has_bits & 0x00010000u) {
      ddistance2parking_ = from.ddistance2parking_;
    }
    if (cached_has_bits & 0x00020000u) {
      ddistance2laneend_ = from.ddistance2laneend_;
    }
    if (cached_has_bits & 0x00040000u) {
      dwholeparkinglength_ = from.dwholeparkinglength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TSR_DISTANCE::CopyFrom(const TSR_DISTANCE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.TSR_DISTANCE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TSR_DISTANCE::IsInitialized() const {
  return true;
}

void TSR_DISTANCE::Swap(TSR_DISTANCE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TSR_DISTANCE::InternalSwap(TSR_DISTANCE* other) {
  std::swap(stcurrentspeedlimit_, other->stcurrentspeedlimit_);
  std::swap(stnextspeedlimit_, other->stnextspeedlimit_);
  std::swap(stcurrentlanekey_, other->stcurrentlanekey_);
  std::swap(icurrentlanekeyid_, other->icurrentlanekeyid_);
  std::swap(itotlelanekeyid_, other->itotlelanekeyid_);
  std::swap(iturnflag_, other->iturnflag_);
  std::swap(iturnstatus_, other->iturnstatus_);
  std::swap(iscalculatedlane_, other->iscalculatedlane_);
  std::swap(isdummyroad_, other->isdummyroad_);
  std::swap(itotlestoplinenum_, other->itotlestoplinenum_);
  std::swap(iremainstoplinenum_, other->iremainstoplinenum_);
  std::swap(isleftturnzone_, other->isleftturnzone_);
  std::swap(iparkingstatus_, other->iparkingstatus_);
  std::swap(ddistance2stopline_, other->ddistance2stopline_);
  std::swap(ddistance2destination_, other->ddistance2destination_);
  std::swap(dwholeroutelength_, other->dwholeroutelength_);
  std::swap(ddistance2parking_, other->ddistance2parking_);
  std::swap(ddistance2laneend_, other->ddistance2laneend_);
  std::swap(dwholeparkinglength_, other->dwholeparkinglength_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string TSR_DISTANCE::GetTypeName() const {
  return "atd.map.TSR_DISTANCE";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TSR_DISTANCE

// optional .atd.map.SPEED_LIMIT stCurrentSpeedLimit = 2;
bool TSR_DISTANCE::has_stcurrentspeedlimit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TSR_DISTANCE::set_has_stcurrentspeedlimit() {
  _has_bits_[0] |= 0x00000001u;
}
void TSR_DISTANCE::clear_has_stcurrentspeedlimit() {
  _has_bits_[0] &= ~0x00000001u;
}
void TSR_DISTANCE::clear_stcurrentspeedlimit() {
  if (stcurrentspeedlimit_ != NULL) stcurrentspeedlimit_->::atd::map::SPEED_LIMIT::Clear();
  clear_has_stcurrentspeedlimit();
}
const ::atd::map::SPEED_LIMIT& TSR_DISTANCE::stcurrentspeedlimit() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.stCurrentSpeedLimit)
  return stcurrentspeedlimit_ != NULL ? *stcurrentspeedlimit_
                         : *::atd::map::SPEED_LIMIT::internal_default_instance();
}
::atd::map::SPEED_LIMIT* TSR_DISTANCE::mutable_stcurrentspeedlimit() {
  set_has_stcurrentspeedlimit();
  if (stcurrentspeedlimit_ == NULL) {
    stcurrentspeedlimit_ = new ::atd::map::SPEED_LIMIT;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.TSR_DISTANCE.stCurrentSpeedLimit)
  return stcurrentspeedlimit_;
}
::atd::map::SPEED_LIMIT* TSR_DISTANCE::release_stcurrentspeedlimit() {
  // @@protoc_insertion_point(field_release:atd.map.TSR_DISTANCE.stCurrentSpeedLimit)
  clear_has_stcurrentspeedlimit();
  ::atd::map::SPEED_LIMIT* temp = stcurrentspeedlimit_;
  stcurrentspeedlimit_ = NULL;
  return temp;
}
void TSR_DISTANCE::set_allocated_stcurrentspeedlimit(::atd::map::SPEED_LIMIT* stcurrentspeedlimit) {
  delete stcurrentspeedlimit_;
  stcurrentspeedlimit_ = stcurrentspeedlimit;
  if (stcurrentspeedlimit) {
    set_has_stcurrentspeedlimit();
  } else {
    clear_has_stcurrentspeedlimit();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.TSR_DISTANCE.stCurrentSpeedLimit)
}

// optional .atd.map.SPEED_LIMIT stNextSpeedLimit = 3;
bool TSR_DISTANCE::has_stnextspeedlimit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TSR_DISTANCE::set_has_stnextspeedlimit() {
  _has_bits_[0] |= 0x00000002u;
}
void TSR_DISTANCE::clear_has_stnextspeedlimit() {
  _has_bits_[0] &= ~0x00000002u;
}
void TSR_DISTANCE::clear_stnextspeedlimit() {
  if (stnextspeedlimit_ != NULL) stnextspeedlimit_->::atd::map::SPEED_LIMIT::Clear();
  clear_has_stnextspeedlimit();
}
const ::atd::map::SPEED_LIMIT& TSR_DISTANCE::stnextspeedlimit() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.stNextSpeedLimit)
  return stnextspeedlimit_ != NULL ? *stnextspeedlimit_
                         : *::atd::map::SPEED_LIMIT::internal_default_instance();
}
::atd::map::SPEED_LIMIT* TSR_DISTANCE::mutable_stnextspeedlimit() {
  set_has_stnextspeedlimit();
  if (stnextspeedlimit_ == NULL) {
    stnextspeedlimit_ = new ::atd::map::SPEED_LIMIT;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.TSR_DISTANCE.stNextSpeedLimit)
  return stnextspeedlimit_;
}
::atd::map::SPEED_LIMIT* TSR_DISTANCE::release_stnextspeedlimit() {
  // @@protoc_insertion_point(field_release:atd.map.TSR_DISTANCE.stNextSpeedLimit)
  clear_has_stnextspeedlimit();
  ::atd::map::SPEED_LIMIT* temp = stnextspeedlimit_;
  stnextspeedlimit_ = NULL;
  return temp;
}
void TSR_DISTANCE::set_allocated_stnextspeedlimit(::atd::map::SPEED_LIMIT* stnextspeedlimit) {
  delete stnextspeedlimit_;
  stnextspeedlimit_ = stnextspeedlimit;
  if (stnextspeedlimit) {
    set_has_stnextspeedlimit();
  } else {
    clear_has_stnextspeedlimit();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.TSR_DISTANCE.stNextSpeedLimit)
}

// optional .atd.map.LANE_LINK_KEY stCurrentLaneKey = 4;
bool TSR_DISTANCE::has_stcurrentlanekey() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TSR_DISTANCE::set_has_stcurrentlanekey() {
  _has_bits_[0] |= 0x00000004u;
}
void TSR_DISTANCE::clear_has_stcurrentlanekey() {
  _has_bits_[0] &= ~0x00000004u;
}
void TSR_DISTANCE::clear_stcurrentlanekey() {
  if (stcurrentlanekey_ != NULL) stcurrentlanekey_->::atd::map::LANE_LINK_KEY::Clear();
  clear_has_stcurrentlanekey();
}
const ::atd::map::LANE_LINK_KEY& TSR_DISTANCE::stcurrentlanekey() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.stCurrentLaneKey)
  return stcurrentlanekey_ != NULL ? *stcurrentlanekey_
                         : *::atd::map::LANE_LINK_KEY::internal_default_instance();
}
::atd::map::LANE_LINK_KEY* TSR_DISTANCE::mutable_stcurrentlanekey() {
  set_has_stcurrentlanekey();
  if (stcurrentlanekey_ == NULL) {
    stcurrentlanekey_ = new ::atd::map::LANE_LINK_KEY;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.TSR_DISTANCE.stCurrentLaneKey)
  return stcurrentlanekey_;
}
::atd::map::LANE_LINK_KEY* TSR_DISTANCE::release_stcurrentlanekey() {
  // @@protoc_insertion_point(field_release:atd.map.TSR_DISTANCE.stCurrentLaneKey)
  clear_has_stcurrentlanekey();
  ::atd::map::LANE_LINK_KEY* temp = stcurrentlanekey_;
  stcurrentlanekey_ = NULL;
  return temp;
}
void TSR_DISTANCE::set_allocated_stcurrentlanekey(::atd::map::LANE_LINK_KEY* stcurrentlanekey) {
  delete stcurrentlanekey_;
  stcurrentlanekey_ = stcurrentlanekey;
  if (stcurrentlanekey) {
    set_has_stcurrentlanekey();
  } else {
    clear_has_stcurrentlanekey();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.TSR_DISTANCE.stCurrentLaneKey)
}

// optional int32 iCurrentLaneKeyID = 5;
bool TSR_DISTANCE::has_icurrentlanekeyid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TSR_DISTANCE::set_has_icurrentlanekeyid() {
  _has_bits_[0] |= 0x00000008u;
}
void TSR_DISTANCE::clear_has_icurrentlanekeyid() {
  _has_bits_[0] &= ~0x00000008u;
}
void TSR_DISTANCE::clear_icurrentlanekeyid() {
  icurrentlanekeyid_ = 0;
  clear_has_icurrentlanekeyid();
}
::google::protobuf::int32 TSR_DISTANCE::icurrentlanekeyid() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.iCurrentLaneKeyID)
  return icurrentlanekeyid_;
}
void TSR_DISTANCE::set_icurrentlanekeyid(::google::protobuf::int32 value) {
  set_has_icurrentlanekeyid();
  icurrentlanekeyid_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.iCurrentLaneKeyID)
}

// optional int32 iTotleLaneKeyID = 6;
bool TSR_DISTANCE::has_itotlelanekeyid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TSR_DISTANCE::set_has_itotlelanekeyid() {
  _has_bits_[0] |= 0x00000010u;
}
void TSR_DISTANCE::clear_has_itotlelanekeyid() {
  _has_bits_[0] &= ~0x00000010u;
}
void TSR_DISTANCE::clear_itotlelanekeyid() {
  itotlelanekeyid_ = 0;
  clear_has_itotlelanekeyid();
}
::google::protobuf::int32 TSR_DISTANCE::itotlelanekeyid() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.iTotleLaneKeyID)
  return itotlelanekeyid_;
}
void TSR_DISTANCE::set_itotlelanekeyid(::google::protobuf::int32 value) {
  set_has_itotlelanekeyid();
  itotlelanekeyid_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.iTotleLaneKeyID)
}

// optional int32 iTurnFlag = 7;
bool TSR_DISTANCE::has_iturnflag() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TSR_DISTANCE::set_has_iturnflag() {
  _has_bits_[0] |= 0x00000020u;
}
void TSR_DISTANCE::clear_has_iturnflag() {
  _has_bits_[0] &= ~0x00000020u;
}
void TSR_DISTANCE::clear_iturnflag() {
  iturnflag_ = 0;
  clear_has_iturnflag();
}
::google::protobuf::int32 TSR_DISTANCE::iturnflag() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.iTurnFlag)
  return iturnflag_;
}
void TSR_DISTANCE::set_iturnflag(::google::protobuf::int32 value) {
  set_has_iturnflag();
  iturnflag_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.iTurnFlag)
}

// optional int32 iTurnStatus = 8;
bool TSR_DISTANCE::has_iturnstatus() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TSR_DISTANCE::set_has_iturnstatus() {
  _has_bits_[0] |= 0x00000040u;
}
void TSR_DISTANCE::clear_has_iturnstatus() {
  _has_bits_[0] &= ~0x00000040u;
}
void TSR_DISTANCE::clear_iturnstatus() {
  iturnstatus_ = 0;
  clear_has_iturnstatus();
}
::google::protobuf::int32 TSR_DISTANCE::iturnstatus() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.iTurnStatus)
  return iturnstatus_;
}
void TSR_DISTANCE::set_iturnstatus(::google::protobuf::int32 value) {
  set_has_iturnstatus();
  iturnstatus_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.iTurnStatus)
}

// optional int32 isCalculatedLane = 9;
bool TSR_DISTANCE::has_iscalculatedlane() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TSR_DISTANCE::set_has_iscalculatedlane() {
  _has_bits_[0] |= 0x00000080u;
}
void TSR_DISTANCE::clear_has_iscalculatedlane() {
  _has_bits_[0] &= ~0x00000080u;
}
void TSR_DISTANCE::clear_iscalculatedlane() {
  iscalculatedlane_ = 0;
  clear_has_iscalculatedlane();
}
::google::protobuf::int32 TSR_DISTANCE::iscalculatedlane() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.isCalculatedLane)
  return iscalculatedlane_;
}
void TSR_DISTANCE::set_iscalculatedlane(::google::protobuf::int32 value) {
  set_has_iscalculatedlane();
  iscalculatedlane_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.isCalculatedLane)
}

// optional int32 isDummyRoad = 10;
bool TSR_DISTANCE::has_isdummyroad() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TSR_DISTANCE::set_has_isdummyroad() {
  _has_bits_[0] |= 0x00000100u;
}
void TSR_DISTANCE::clear_has_isdummyroad() {
  _has_bits_[0] &= ~0x00000100u;
}
void TSR_DISTANCE::clear_isdummyroad() {
  isdummyroad_ = 0;
  clear_has_isdummyroad();
}
::google::protobuf::int32 TSR_DISTANCE::isdummyroad() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.isDummyRoad)
  return isdummyroad_;
}
void TSR_DISTANCE::set_isdummyroad(::google::protobuf::int32 value) {
  set_has_isdummyroad();
  isdummyroad_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.isDummyRoad)
}

// optional int32 iTotleStoplineNum = 11;
bool TSR_DISTANCE::has_itotlestoplinenum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TSR_DISTANCE::set_has_itotlestoplinenum() {
  _has_bits_[0] |= 0x00000200u;
}
void TSR_DISTANCE::clear_has_itotlestoplinenum() {
  _has_bits_[0] &= ~0x00000200u;
}
void TSR_DISTANCE::clear_itotlestoplinenum() {
  itotlestoplinenum_ = 0;
  clear_has_itotlestoplinenum();
}
::google::protobuf::int32 TSR_DISTANCE::itotlestoplinenum() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.iTotleStoplineNum)
  return itotlestoplinenum_;
}
void TSR_DISTANCE::set_itotlestoplinenum(::google::protobuf::int32 value) {
  set_has_itotlestoplinenum();
  itotlestoplinenum_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.iTotleStoplineNum)
}

// optional int32 iRemainStoplineNum = 12;
bool TSR_DISTANCE::has_iremainstoplinenum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TSR_DISTANCE::set_has_iremainstoplinenum() {
  _has_bits_[0] |= 0x00000400u;
}
void TSR_DISTANCE::clear_has_iremainstoplinenum() {
  _has_bits_[0] &= ~0x00000400u;
}
void TSR_DISTANCE::clear_iremainstoplinenum() {
  iremainstoplinenum_ = 0;
  clear_has_iremainstoplinenum();
}
::google::protobuf::int32 TSR_DISTANCE::iremainstoplinenum() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.iRemainStoplineNum)
  return iremainstoplinenum_;
}
void TSR_DISTANCE::set_iremainstoplinenum(::google::protobuf::int32 value) {
  set_has_iremainstoplinenum();
  iremainstoplinenum_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.iRemainStoplineNum)
}

// optional int32 isLeftTurnZone = 13;
bool TSR_DISTANCE::has_isleftturnzone() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TSR_DISTANCE::set_has_isleftturnzone() {
  _has_bits_[0] |= 0x00000800u;
}
void TSR_DISTANCE::clear_has_isleftturnzone() {
  _has_bits_[0] &= ~0x00000800u;
}
void TSR_DISTANCE::clear_isleftturnzone() {
  isleftturnzone_ = 0;
  clear_has_isleftturnzone();
}
::google::protobuf::int32 TSR_DISTANCE::isleftturnzone() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.isLeftTurnZone)
  return isleftturnzone_;
}
void TSR_DISTANCE::set_isleftturnzone(::google::protobuf::int32 value) {
  set_has_isleftturnzone();
  isleftturnzone_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.isLeftTurnZone)
}

// optional int32 iParkingStatus = 14;
bool TSR_DISTANCE::has_iparkingstatus() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TSR_DISTANCE::set_has_iparkingstatus() {
  _has_bits_[0] |= 0x00001000u;
}
void TSR_DISTANCE::clear_has_iparkingstatus() {
  _has_bits_[0] &= ~0x00001000u;
}
void TSR_DISTANCE::clear_iparkingstatus() {
  iparkingstatus_ = 0;
  clear_has_iparkingstatus();
}
::google::protobuf::int32 TSR_DISTANCE::iparkingstatus() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.iParkingStatus)
  return iparkingstatus_;
}
void TSR_DISTANCE::set_iparkingstatus(::google::protobuf::int32 value) {
  set_has_iparkingstatus();
  iparkingstatus_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.iParkingStatus)
}

// optional double dDistance2Stopline = 15;
bool TSR_DISTANCE::has_ddistance2stopline() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TSR_DISTANCE::set_has_ddistance2stopline() {
  _has_bits_[0] |= 0x00002000u;
}
void TSR_DISTANCE::clear_has_ddistance2stopline() {
  _has_bits_[0] &= ~0x00002000u;
}
void TSR_DISTANCE::clear_ddistance2stopline() {
  ddistance2stopline_ = 0;
  clear_has_ddistance2stopline();
}
double TSR_DISTANCE::ddistance2stopline() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.dDistance2Stopline)
  return ddistance2stopline_;
}
void TSR_DISTANCE::set_ddistance2stopline(double value) {
  set_has_ddistance2stopline();
  ddistance2stopline_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.dDistance2Stopline)
}

// optional double dDistance2Destination = 16;
bool TSR_DISTANCE::has_ddistance2destination() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TSR_DISTANCE::set_has_ddistance2destination() {
  _has_bits_[0] |= 0x00004000u;
}
void TSR_DISTANCE::clear_has_ddistance2destination() {
  _has_bits_[0] &= ~0x00004000u;
}
void TSR_DISTANCE::clear_ddistance2destination() {
  ddistance2destination_ = 0;
  clear_has_ddistance2destination();
}
double TSR_DISTANCE::ddistance2destination() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.dDistance2Destination)
  return ddistance2destination_;
}
void TSR_DISTANCE::set_ddistance2destination(double value) {
  set_has_ddistance2destination();
  ddistance2destination_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.dDistance2Destination)
}

// optional double dWholeRouteLength = 17;
bool TSR_DISTANCE::has_dwholeroutelength() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TSR_DISTANCE::set_has_dwholeroutelength() {
  _has_bits_[0] |= 0x00008000u;
}
void TSR_DISTANCE::clear_has_dwholeroutelength() {
  _has_bits_[0] &= ~0x00008000u;
}
void TSR_DISTANCE::clear_dwholeroutelength() {
  dwholeroutelength_ = 0;
  clear_has_dwholeroutelength();
}
double TSR_DISTANCE::dwholeroutelength() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.dWholeRouteLength)
  return dwholeroutelength_;
}
void TSR_DISTANCE::set_dwholeroutelength(double value) {
  set_has_dwholeroutelength();
  dwholeroutelength_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.dWholeRouteLength)
}

// optional double dDistance2Parking = 18;
bool TSR_DISTANCE::has_ddistance2parking() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TSR_DISTANCE::set_has_ddistance2parking() {
  _has_bits_[0] |= 0x00010000u;
}
void TSR_DISTANCE::clear_has_ddistance2parking() {
  _has_bits_[0] &= ~0x00010000u;
}
void TSR_DISTANCE::clear_ddistance2parking() {
  ddistance2parking_ = 0;
  clear_has_ddistance2parking();
}
double TSR_DISTANCE::ddistance2parking() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.dDistance2Parking)
  return ddistance2parking_;
}
void TSR_DISTANCE::set_ddistance2parking(double value) {
  set_has_ddistance2parking();
  ddistance2parking_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.dDistance2Parking)
}

// optional double dDistance2LaneEnd = 19;
bool TSR_DISTANCE::has_ddistance2laneend() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TSR_DISTANCE::set_has_ddistance2laneend() {
  _has_bits_[0] |= 0x00020000u;
}
void TSR_DISTANCE::clear_has_ddistance2laneend() {
  _has_bits_[0] &= ~0x00020000u;
}
void TSR_DISTANCE::clear_ddistance2laneend() {
  ddistance2laneend_ = 0;
  clear_has_ddistance2laneend();
}
double TSR_DISTANCE::ddistance2laneend() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.dDistance2LaneEnd)
  return ddistance2laneend_;
}
void TSR_DISTANCE::set_ddistance2laneend(double value) {
  set_has_ddistance2laneend();
  ddistance2laneend_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.dDistance2LaneEnd)
}

// optional double dWholeParkingLength = 20;
bool TSR_DISTANCE::has_dwholeparkinglength() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TSR_DISTANCE::set_has_dwholeparkinglength() {
  _has_bits_[0] |= 0x00040000u;
}
void TSR_DISTANCE::clear_has_dwholeparkinglength() {
  _has_bits_[0] &= ~0x00040000u;
}
void TSR_DISTANCE::clear_dwholeparkinglength() {
  dwholeparkinglength_ = 0;
  clear_has_dwholeparkinglength();
}
double TSR_DISTANCE::dwholeparkinglength() const {
  // @@protoc_insertion_point(field_get:atd.map.TSR_DISTANCE.dWholeParkingLength)
  return dwholeparkinglength_;
}
void TSR_DISTANCE::set_dwholeparkinglength(double value) {
  set_has_dwholeparkinglength();
  dwholeparkinglength_ = value;
  // @@protoc_insertion_point(field_set:atd.map.TSR_DISTANCE.dWholeParkingLength)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ONE_PARKING_SITE::kStAttachedRoadFieldNumber;
const int ONE_PARKING_SITE::kStPoint2VehicleCorFieldNumber;
const int ONE_PARKING_SITE::kStShapePoint2VehicleCorFieldNumber;
const int ONE_PARKING_SITE::kIAttachedRoadCountFieldNumber;
const int ONE_PARKING_SITE::kISIDFieldNumber;
const int ONE_PARKING_SITE::kILengthFieldNumber;
const int ONE_PARKING_SITE::kIWidthFieldNumber;
const int ONE_PARKING_SITE::kIAttributeFieldNumber;
const int ONE_PARKING_SITE::kIStyleFieldNumber;
const int ONE_PARKING_SITE::kIShapeTypeFieldNumber;
const int ONE_PARKING_SITE::kIShapeNumFieldNumber;
const int ONE_PARKING_SITE::kIAppStatusFieldNumber;
const int ONE_PARKING_SITE::kIAddFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ONE_PARKING_SITE::ONE_PARKING_SITE()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.ONE_PARKING_SITE)
}
ONE_PARKING_SITE::ONE_PARKING_SITE(const ONE_PARKING_SITE& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      stattachedroad_(from.stattachedroad_),
      stshapepoint2vehiclecor_(from.stshapepoint2vehiclecor_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_stpoint2vehiclecor()) {
    stpoint2vehiclecor_ = new ::atd::common::Point3D(*from.stpoint2vehiclecor_);
  } else {
    stpoint2vehiclecor_ = NULL;
  }
  ::memcpy(&iattachedroadcount_, &from.iattachedroadcount_,
    reinterpret_cast<char*>(&iadd_) -
    reinterpret_cast<char*>(&iattachedroadcount_) + sizeof(iadd_));
  // @@protoc_insertion_point(copy_constructor:atd.map.ONE_PARKING_SITE)
}

void ONE_PARKING_SITE::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&stpoint2vehiclecor_, 0, reinterpret_cast<char*>(&iadd_) -
    reinterpret_cast<char*>(&stpoint2vehiclecor_) + sizeof(iadd_));
}

ONE_PARKING_SITE::~ONE_PARKING_SITE() {
  // @@protoc_insertion_point(destructor:atd.map.ONE_PARKING_SITE)
  SharedDtor();
}

void ONE_PARKING_SITE::SharedDtor() {
  if (this != internal_default_instance()) {
    delete stpoint2vehiclecor_;
  }
}

void ONE_PARKING_SITE::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ONE_PARKING_SITE& ONE_PARKING_SITE::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  return *internal_default_instance();
}

ONE_PARKING_SITE* ONE_PARKING_SITE::New(::google::protobuf::Arena* arena) const {
  ONE_PARKING_SITE* n = new ONE_PARKING_SITE;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ONE_PARKING_SITE::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.ONE_PARKING_SITE)
  stattachedroad_.Clear();
  stshapepoint2vehiclecor_.Clear();
  if (has_stpoint2vehiclecor()) {
    GOOGLE_DCHECK(stpoint2vehiclecor_ != NULL);
    stpoint2vehiclecor_->::atd::common::Point3D::Clear();
  }
  if (_has_bits_[0 / 32] & 254u) {
    ::memset(&iattachedroadcount_, 0, reinterpret_cast<char*>(&ishapetype_) -
      reinterpret_cast<char*>(&iattachedroadcount_) + sizeof(ishapetype_));
  }
  if (_has_bits_[8 / 32] & 1792u) {
    ::memset(&ishapenum_, 0, reinterpret_cast<char*>(&iadd_) -
      reinterpret_cast<char*>(&ishapenum_) + sizeof(iadd_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ONE_PARKING_SITE::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.ONE_PARKING_SITE)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .atd.map.LANE_LINK_KEY stAttachedRoad = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stattachedroad()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Point3D stPoint2VehicleCor = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stpoint2vehiclecor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Point3D stShapePoint2VehicleCor = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stshapepoint2vehiclecor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iAttachedRoadCount = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_iattachedroadcount();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattachedroadcount_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iSID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_isid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iLength = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_ilength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ilength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iWidth = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_iwidth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iwidth_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iAttribute = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_iattribute();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iattribute_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iStyle = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          set_has_istyle();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &istyle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iShapeType = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(88u)) {
          set_has_ishapetype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishapetype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iShapeNum = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_ishapenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ishapenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iAppStatus = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_iappstatus();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iappstatus_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 iAdd = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_iadd();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iadd_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.ONE_PARKING_SITE)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.ONE_PARKING_SITE)
  return false;
#undef DO_
}

void ONE_PARKING_SITE::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.ONE_PARKING_SITE)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atd.map.LANE_LINK_KEY stAttachedRoad = 2;
  for (unsigned int i = 0, n = this->stattachedroad_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->stattachedroad(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Point3D stPoint2VehicleCor = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->stpoint2vehiclecor_, output);
  }

  // repeated .atd.common.Point3D stShapePoint2VehicleCor = 4;
  for (unsigned int i = 0, n = this->stshapepoint2vehiclecor_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->stshapepoint2vehiclecor(i), output);
  }

  // optional int32 iAttachedRoadCount = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->iattachedroadcount(), output);
  }

  // optional int32 iSID = 6;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->isid(), output);
  }

  // optional int32 iLength = 7;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ilength(), output);
  }

  // optional int32 iWidth = 8;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iwidth(), output);
  }

  // optional int32 iAttribute = 9;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->iattribute(), output);
  }

  // optional int32 iStyle = 10;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->istyle(), output);
  }

  // optional int32 iShapeType = 11;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ishapetype(), output);
  }

  // optional int32 iShapeNum = 12;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ishapenum(), output);
  }

  // optional int32 iAppStatus = 13;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->iappstatus(), output);
  }

  // optional int32 iAdd = 14;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->iadd(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.ONE_PARKING_SITE)
}

size_t ONE_PARKING_SITE::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.ONE_PARKING_SITE)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.map.LANE_LINK_KEY stAttachedRoad = 2;
  {
    unsigned int count = this->stattachedroad_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stattachedroad(i));
    }
  }

  // repeated .atd.common.Point3D stShapePoint2VehicleCor = 4;
  {
    unsigned int count = this->stshapepoint2vehiclecor_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stshapepoint2vehiclecor(i));
    }
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Point3D stPoint2VehicleCor = 3;
    if (has_stpoint2vehiclecor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->stpoint2vehiclecor_);
    }

    // optional int32 iAttachedRoadCount = 5;
    if (has_iattachedroadcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattachedroadcount());
    }

    // optional int32 iSID = 6;
    if (has_isid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isid());
    }

    // optional int32 iLength = 7;
    if (has_ilength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ilength());
    }

    // optional int32 iWidth = 8;
    if (has_iwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iwidth());
    }

    // optional int32 iAttribute = 9;
    if (has_iattribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iattribute());
    }

    // optional int32 iStyle = 10;
    if (has_istyle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->istyle());
    }

    // optional int32 iShapeType = 11;
    if (has_ishapetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishapetype());
    }

  }
  if (_has_bits_[8 / 32] & 1792u) {
    // optional int32 iShapeNum = 12;
    if (has_ishapenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ishapenum());
    }

    // optional int32 iAppStatus = 13;
    if (has_iappstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iappstatus());
    }

    // optional int32 iAdd = 14;
    if (has_iadd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iadd());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ONE_PARKING_SITE::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ONE_PARKING_SITE*>(&from));
}

void ONE_PARKING_SITE::MergeFrom(const ONE_PARKING_SITE& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.ONE_PARKING_SITE)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  stattachedroad_.MergeFrom(from.stattachedroad_);
  stshapepoint2vehiclecor_.MergeFrom(from.stshapepoint2vehiclecor_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_stpoint2vehiclecor()->::atd::common::Point3D::MergeFrom(from.stpoint2vehiclecor());
    }
    if (cached_has_bits & 0x00000002u) {
      iattachedroadcount_ = from.iattachedroadcount_;
    }
    if (cached_has_bits & 0x00000004u) {
      isid_ = from.isid_;
    }
    if (cached_has_bits & 0x00000008u) {
      ilength_ = from.ilength_;
    }
    if (cached_has_bits & 0x00000010u) {
      iwidth_ = from.iwidth_;
    }
    if (cached_has_bits & 0x00000020u) {
      iattribute_ = from.iattribute_;
    }
    if (cached_has_bits & 0x00000040u) {
      istyle_ = from.istyle_;
    }
    if (cached_has_bits & 0x00000080u) {
      ishapetype_ = from.ishapetype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 1792u) {
    if (cached_has_bits & 0x00000100u) {
      ishapenum_ = from.ishapenum_;
    }
    if (cached_has_bits & 0x00000200u) {
      iappstatus_ = from.iappstatus_;
    }
    if (cached_has_bits & 0x00000400u) {
      iadd_ = from.iadd_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ONE_PARKING_SITE::CopyFrom(const ONE_PARKING_SITE& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.ONE_PARKING_SITE)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ONE_PARKING_SITE::IsInitialized() const {
  return true;
}

void ONE_PARKING_SITE::Swap(ONE_PARKING_SITE* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ONE_PARKING_SITE::InternalSwap(ONE_PARKING_SITE* other) {
  stattachedroad_.InternalSwap(&other->stattachedroad_);
  stshapepoint2vehiclecor_.InternalSwap(&other->stshapepoint2vehiclecor_);
  std::swap(stpoint2vehiclecor_, other->stpoint2vehiclecor_);
  std::swap(iattachedroadcount_, other->iattachedroadcount_);
  std::swap(isid_, other->isid_);
  std::swap(ilength_, other->ilength_);
  std::swap(iwidth_, other->iwidth_);
  std::swap(iattribute_, other->iattribute_);
  std::swap(istyle_, other->istyle_);
  std::swap(ishapetype_, other->ishapetype_);
  std::swap(ishapenum_, other->ishapenum_);
  std::swap(iappstatus_, other->iappstatus_);
  std::swap(iadd_, other->iadd_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ONE_PARKING_SITE::GetTypeName() const {
  return "atd.map.ONE_PARKING_SITE";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ONE_PARKING_SITE

// repeated .atd.map.LANE_LINK_KEY stAttachedRoad = 2;
int ONE_PARKING_SITE::stattachedroad_size() const {
  return stattachedroad_.size();
}
void ONE_PARKING_SITE::clear_stattachedroad() {
  stattachedroad_.Clear();
}
const ::atd::map::LANE_LINK_KEY& ONE_PARKING_SITE::stattachedroad(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.stAttachedRoad)
  return stattachedroad_.Get(index);
}
::atd::map::LANE_LINK_KEY* ONE_PARKING_SITE::mutable_stattachedroad(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.ONE_PARKING_SITE.stAttachedRoad)
  return stattachedroad_.Mutable(index);
}
::atd::map::LANE_LINK_KEY* ONE_PARKING_SITE::add_stattachedroad() {
  // @@protoc_insertion_point(field_add:atd.map.ONE_PARKING_SITE.stAttachedRoad)
  return stattachedroad_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::LANE_LINK_KEY >*
ONE_PARKING_SITE::mutable_stattachedroad() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.ONE_PARKING_SITE.stAttachedRoad)
  return &stattachedroad_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::LANE_LINK_KEY >&
ONE_PARKING_SITE::stattachedroad() const {
  // @@protoc_insertion_point(field_list:atd.map.ONE_PARKING_SITE.stAttachedRoad)
  return stattachedroad_;
}

// optional .atd.common.Point3D stPoint2VehicleCor = 3;
bool ONE_PARKING_SITE::has_stpoint2vehiclecor() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ONE_PARKING_SITE::set_has_stpoint2vehiclecor() {
  _has_bits_[0] |= 0x00000001u;
}
void ONE_PARKING_SITE::clear_has_stpoint2vehiclecor() {
  _has_bits_[0] &= ~0x00000001u;
}
void ONE_PARKING_SITE::clear_stpoint2vehiclecor() {
  if (stpoint2vehiclecor_ != NULL) stpoint2vehiclecor_->::atd::common::Point3D::Clear();
  clear_has_stpoint2vehiclecor();
}
const ::atd::common::Point3D& ONE_PARKING_SITE::stpoint2vehiclecor() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.stPoint2VehicleCor)
  return stpoint2vehiclecor_ != NULL ? *stpoint2vehiclecor_
                         : *::atd::common::Point3D::internal_default_instance();
}
::atd::common::Point3D* ONE_PARKING_SITE::mutable_stpoint2vehiclecor() {
  set_has_stpoint2vehiclecor();
  if (stpoint2vehiclecor_ == NULL) {
    stpoint2vehiclecor_ = new ::atd::common::Point3D;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.ONE_PARKING_SITE.stPoint2VehicleCor)
  return stpoint2vehiclecor_;
}
::atd::common::Point3D* ONE_PARKING_SITE::release_stpoint2vehiclecor() {
  // @@protoc_insertion_point(field_release:atd.map.ONE_PARKING_SITE.stPoint2VehicleCor)
  clear_has_stpoint2vehiclecor();
  ::atd::common::Point3D* temp = stpoint2vehiclecor_;
  stpoint2vehiclecor_ = NULL;
  return temp;
}
void ONE_PARKING_SITE::set_allocated_stpoint2vehiclecor(::atd::common::Point3D* stpoint2vehiclecor) {
  delete stpoint2vehiclecor_;
  stpoint2vehiclecor_ = stpoint2vehiclecor;
  if (stpoint2vehiclecor) {
    set_has_stpoint2vehiclecor();
  } else {
    clear_has_stpoint2vehiclecor();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.ONE_PARKING_SITE.stPoint2VehicleCor)
}

// repeated .atd.common.Point3D stShapePoint2VehicleCor = 4;
int ONE_PARKING_SITE::stshapepoint2vehiclecor_size() const {
  return stshapepoint2vehiclecor_.size();
}
void ONE_PARKING_SITE::clear_stshapepoint2vehiclecor() {
  stshapepoint2vehiclecor_.Clear();
}
const ::atd::common::Point3D& ONE_PARKING_SITE::stshapepoint2vehiclecor(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.stShapePoint2VehicleCor)
  return stshapepoint2vehiclecor_.Get(index);
}
::atd::common::Point3D* ONE_PARKING_SITE::mutable_stshapepoint2vehiclecor(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.ONE_PARKING_SITE.stShapePoint2VehicleCor)
  return stshapepoint2vehiclecor_.Mutable(index);
}
::atd::common::Point3D* ONE_PARKING_SITE::add_stshapepoint2vehiclecor() {
  // @@protoc_insertion_point(field_add:atd.map.ONE_PARKING_SITE.stShapePoint2VehicleCor)
  return stshapepoint2vehiclecor_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Point3D >*
ONE_PARKING_SITE::mutable_stshapepoint2vehiclecor() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.ONE_PARKING_SITE.stShapePoint2VehicleCor)
  return &stshapepoint2vehiclecor_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Point3D >&
ONE_PARKING_SITE::stshapepoint2vehiclecor() const {
  // @@protoc_insertion_point(field_list:atd.map.ONE_PARKING_SITE.stShapePoint2VehicleCor)
  return stshapepoint2vehiclecor_;
}

// optional int32 iAttachedRoadCount = 5;
bool ONE_PARKING_SITE::has_iattachedroadcount() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ONE_PARKING_SITE::set_has_iattachedroadcount() {
  _has_bits_[0] |= 0x00000002u;
}
void ONE_PARKING_SITE::clear_has_iattachedroadcount() {
  _has_bits_[0] &= ~0x00000002u;
}
void ONE_PARKING_SITE::clear_iattachedroadcount() {
  iattachedroadcount_ = 0;
  clear_has_iattachedroadcount();
}
::google::protobuf::int32 ONE_PARKING_SITE::iattachedroadcount() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iAttachedRoadCount)
  return iattachedroadcount_;
}
void ONE_PARKING_SITE::set_iattachedroadcount(::google::protobuf::int32 value) {
  set_has_iattachedroadcount();
  iattachedroadcount_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iAttachedRoadCount)
}

// optional int32 iSID = 6;
bool ONE_PARKING_SITE::has_isid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ONE_PARKING_SITE::set_has_isid() {
  _has_bits_[0] |= 0x00000004u;
}
void ONE_PARKING_SITE::clear_has_isid() {
  _has_bits_[0] &= ~0x00000004u;
}
void ONE_PARKING_SITE::clear_isid() {
  isid_ = 0;
  clear_has_isid();
}
::google::protobuf::int32 ONE_PARKING_SITE::isid() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iSID)
  return isid_;
}
void ONE_PARKING_SITE::set_isid(::google::protobuf::int32 value) {
  set_has_isid();
  isid_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iSID)
}

// optional int32 iLength = 7;
bool ONE_PARKING_SITE::has_ilength() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ONE_PARKING_SITE::set_has_ilength() {
  _has_bits_[0] |= 0x00000008u;
}
void ONE_PARKING_SITE::clear_has_ilength() {
  _has_bits_[0] &= ~0x00000008u;
}
void ONE_PARKING_SITE::clear_ilength() {
  ilength_ = 0;
  clear_has_ilength();
}
::google::protobuf::int32 ONE_PARKING_SITE::ilength() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iLength)
  return ilength_;
}
void ONE_PARKING_SITE::set_ilength(::google::protobuf::int32 value) {
  set_has_ilength();
  ilength_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iLength)
}

// optional int32 iWidth = 8;
bool ONE_PARKING_SITE::has_iwidth() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ONE_PARKING_SITE::set_has_iwidth() {
  _has_bits_[0] |= 0x00000010u;
}
void ONE_PARKING_SITE::clear_has_iwidth() {
  _has_bits_[0] &= ~0x00000010u;
}
void ONE_PARKING_SITE::clear_iwidth() {
  iwidth_ = 0;
  clear_has_iwidth();
}
::google::protobuf::int32 ONE_PARKING_SITE::iwidth() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iWidth)
  return iwidth_;
}
void ONE_PARKING_SITE::set_iwidth(::google::protobuf::int32 value) {
  set_has_iwidth();
  iwidth_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iWidth)
}

// optional int32 iAttribute = 9;
bool ONE_PARKING_SITE::has_iattribute() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ONE_PARKING_SITE::set_has_iattribute() {
  _has_bits_[0] |= 0x00000020u;
}
void ONE_PARKING_SITE::clear_has_iattribute() {
  _has_bits_[0] &= ~0x00000020u;
}
void ONE_PARKING_SITE::clear_iattribute() {
  iattribute_ = 0;
  clear_has_iattribute();
}
::google::protobuf::int32 ONE_PARKING_SITE::iattribute() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iAttribute)
  return iattribute_;
}
void ONE_PARKING_SITE::set_iattribute(::google::protobuf::int32 value) {
  set_has_iattribute();
  iattribute_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iAttribute)
}

// optional int32 iStyle = 10;
bool ONE_PARKING_SITE::has_istyle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ONE_PARKING_SITE::set_has_istyle() {
  _has_bits_[0] |= 0x00000040u;
}
void ONE_PARKING_SITE::clear_has_istyle() {
  _has_bits_[0] &= ~0x00000040u;
}
void ONE_PARKING_SITE::clear_istyle() {
  istyle_ = 0;
  clear_has_istyle();
}
::google::protobuf::int32 ONE_PARKING_SITE::istyle() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iStyle)
  return istyle_;
}
void ONE_PARKING_SITE::set_istyle(::google::protobuf::int32 value) {
  set_has_istyle();
  istyle_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iStyle)
}

// optional int32 iShapeType = 11;
bool ONE_PARKING_SITE::has_ishapetype() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ONE_PARKING_SITE::set_has_ishapetype() {
  _has_bits_[0] |= 0x00000080u;
}
void ONE_PARKING_SITE::clear_has_ishapetype() {
  _has_bits_[0] &= ~0x00000080u;
}
void ONE_PARKING_SITE::clear_ishapetype() {
  ishapetype_ = 0;
  clear_has_ishapetype();
}
::google::protobuf::int32 ONE_PARKING_SITE::ishapetype() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iShapeType)
  return ishapetype_;
}
void ONE_PARKING_SITE::set_ishapetype(::google::protobuf::int32 value) {
  set_has_ishapetype();
  ishapetype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iShapeType)
}

// optional int32 iShapeNum = 12;
bool ONE_PARKING_SITE::has_ishapenum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ONE_PARKING_SITE::set_has_ishapenum() {
  _has_bits_[0] |= 0x00000100u;
}
void ONE_PARKING_SITE::clear_has_ishapenum() {
  _has_bits_[0] &= ~0x00000100u;
}
void ONE_PARKING_SITE::clear_ishapenum() {
  ishapenum_ = 0;
  clear_has_ishapenum();
}
::google::protobuf::int32 ONE_PARKING_SITE::ishapenum() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iShapeNum)
  return ishapenum_;
}
void ONE_PARKING_SITE::set_ishapenum(::google::protobuf::int32 value) {
  set_has_ishapenum();
  ishapenum_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iShapeNum)
}

// optional int32 iAppStatus = 13;
bool ONE_PARKING_SITE::has_iappstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ONE_PARKING_SITE::set_has_iappstatus() {
  _has_bits_[0] |= 0x00000200u;
}
void ONE_PARKING_SITE::clear_has_iappstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
void ONE_PARKING_SITE::clear_iappstatus() {
  iappstatus_ = 0;
  clear_has_iappstatus();
}
::google::protobuf::int32 ONE_PARKING_SITE::iappstatus() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iAppStatus)
  return iappstatus_;
}
void ONE_PARKING_SITE::set_iappstatus(::google::protobuf::int32 value) {
  set_has_iappstatus();
  iappstatus_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iAppStatus)
}

// optional int32 iAdd = 14;
bool ONE_PARKING_SITE::has_iadd() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ONE_PARKING_SITE::set_has_iadd() {
  _has_bits_[0] |= 0x00000400u;
}
void ONE_PARKING_SITE::clear_has_iadd() {
  _has_bits_[0] &= ~0x00000400u;
}
void ONE_PARKING_SITE::clear_iadd() {
  iadd_ = 0;
  clear_has_iadd();
}
::google::protobuf::int32 ONE_PARKING_SITE::iadd() const {
  // @@protoc_insertion_point(field_get:atd.map.ONE_PARKING_SITE.iAdd)
  return iadd_;
}
void ONE_PARKING_SITE::set_iadd(::google::protobuf::int32 value) {
  set_has_iadd();
  iadd_ = value;
  // @@protoc_insertion_point(field_set:atd.map.ONE_PARKING_SITE.iAdd)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngineRemainDistance::kHeaderFieldNumber;
const int EngineRemainDistance::kReservedmsgFieldNumber;
const int EngineRemainDistance::kPoseFieldNumber;
const int EngineRemainDistance::kTsrdistanceFieldNumber;
const int EngineRemainDistance::kOneparkingsiteFieldNumber;
const int EngineRemainDistance::kSTaskIDFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngineRemainDistance::EngineRemainDistance()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.EngineRemainDistance)
}
EngineRemainDistance::EngineRemainDistance(const EngineRemainDistance& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  staskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_staskid()) {
    staskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.staskid_);
  }
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_tsrdistance()) {
    tsrdistance_ = new ::atd::map::TSR_DISTANCE(*from.tsrdistance_);
  } else {
    tsrdistance_ = NULL;
  }
  if (from.has_oneparkingsite()) {
    oneparkingsite_ = new ::atd::map::ONE_PARKING_SITE(*from.oneparkingsite_);
  } else {
    oneparkingsite_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.map.EngineRemainDistance)
}

void EngineRemainDistance::SharedCtor() {
  _cached_size_ = 0;
  staskid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&header_, 0, reinterpret_cast<char*>(&oneparkingsite_) -
    reinterpret_cast<char*>(&header_) + sizeof(oneparkingsite_));
}

EngineRemainDistance::~EngineRemainDistance() {
  // @@protoc_insertion_point(destructor:atd.map.EngineRemainDistance)
  SharedDtor();
}

void EngineRemainDistance::SharedDtor() {
  staskid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete tsrdistance_;
  }
  if (this != internal_default_instance()) {
    delete oneparkingsite_;
  }
}

void EngineRemainDistance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EngineRemainDistance& EngineRemainDistance::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  return *internal_default_instance();
}

EngineRemainDistance* EngineRemainDistance::New(::google::protobuf::Arena* arena) const {
  EngineRemainDistance* n = new EngineRemainDistance;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EngineRemainDistance::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.EngineRemainDistance)
  if (_has_bits_[0 / 32] & 63u) {
    if (has_staskid()) {
      GOOGLE_DCHECK(!staskid_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*staskid_.UnsafeRawStringPointer())->clear();
    }
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_tsrdistance()) {
      GOOGLE_DCHECK(tsrdistance_ != NULL);
      tsrdistance_->::atd::map::TSR_DISTANCE::Clear();
    }
    if (has_oneparkingsite()) {
      GOOGLE_DCHECK(oneparkingsite_ != NULL);
      oneparkingsite_->::atd::map::ONE_PARKING_SITE::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EngineRemainDistance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.EngineRemainDistance)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.TSR_DISTANCE tsrdistance = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tsrdistance()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oneparkingsite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sTaskID = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_staskid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.EngineRemainDistance)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.EngineRemainDistance)
  return false;
#undef DO_
}

void EngineRemainDistance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.EngineRemainDistance)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // optional .atd.map.TSR_DISTANCE tsrdistance = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->tsrdistance_, output);
  }

  // optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->oneparkingsite_, output);
  }

  // optional string sTaskID = 6;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->staskid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.EngineRemainDistance)
}

size_t EngineRemainDistance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.EngineRemainDistance)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 63u) {
    // optional string sTaskID = 6;
    if (has_staskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->staskid());
    }

    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.map.TSR_DISTANCE tsrdistance = 4;
    if (has_tsrdistance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->tsrdistance_);
    }

    // optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
    if (has_oneparkingsite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->oneparkingsite_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EngineRemainDistance::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EngineRemainDistance*>(&from));
}

void EngineRemainDistance::MergeFrom(const EngineRemainDistance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.EngineRemainDistance)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 63u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_staskid();
      staskid_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.staskid_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000010u) {
      mutable_tsrdistance()->::atd::map::TSR_DISTANCE::MergeFrom(from.tsrdistance());
    }
    if (cached_has_bits & 0x00000020u) {
      mutable_oneparkingsite()->::atd::map::ONE_PARKING_SITE::MergeFrom(from.oneparkingsite());
    }
  }
}

void EngineRemainDistance::CopyFrom(const EngineRemainDistance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.EngineRemainDistance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineRemainDistance::IsInitialized() const {
  return true;
}

void EngineRemainDistance::Swap(EngineRemainDistance* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EngineRemainDistance::InternalSwap(EngineRemainDistance* other) {
  staskid_.Swap(&other->staskid_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(tsrdistance_, other->tsrdistance_);
  std::swap(oneparkingsite_, other->oneparkingsite_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EngineRemainDistance::GetTypeName() const {
  return "atd.map.EngineRemainDistance";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EngineRemainDistance

// optional .atd.common.Header header = 1;
bool EngineRemainDistance::has_header() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EngineRemainDistance::set_has_header() {
  _has_bits_[0] |= 0x00000002u;
}
void EngineRemainDistance::clear_has_header() {
  _has_bits_[0] &= ~0x00000002u;
}
void EngineRemainDistance::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& EngineRemainDistance::header() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineRemainDistance.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* EngineRemainDistance::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineRemainDistance.header)
  return header_;
}
::atd::common::Header* EngineRemainDistance::release_header() {
  // @@protoc_insertion_point(field_release:atd.map.EngineRemainDistance.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void EngineRemainDistance::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineRemainDistance.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool EngineRemainDistance::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EngineRemainDistance::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000004u;
}
void EngineRemainDistance::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
void EngineRemainDistance::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& EngineRemainDistance::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineRemainDistance.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* EngineRemainDistance::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineRemainDistance.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* EngineRemainDistance::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.map.EngineRemainDistance.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void EngineRemainDistance::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineRemainDistance.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool EngineRemainDistance::has_pose() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EngineRemainDistance::set_has_pose() {
  _has_bits_[0] |= 0x00000008u;
}
void EngineRemainDistance::clear_has_pose() {
  _has_bits_[0] &= ~0x00000008u;
}
void EngineRemainDistance::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& EngineRemainDistance::pose() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineRemainDistance.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* EngineRemainDistance::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineRemainDistance.pose)
  return pose_;
}
::atd::localization::Pose* EngineRemainDistance::release_pose() {
  // @@protoc_insertion_point(field_release:atd.map.EngineRemainDistance.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void EngineRemainDistance::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineRemainDistance.pose)
}

// optional .atd.map.TSR_DISTANCE tsrdistance = 4;
bool EngineRemainDistance::has_tsrdistance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EngineRemainDistance::set_has_tsrdistance() {
  _has_bits_[0] |= 0x00000010u;
}
void EngineRemainDistance::clear_has_tsrdistance() {
  _has_bits_[0] &= ~0x00000010u;
}
void EngineRemainDistance::clear_tsrdistance() {
  if (tsrdistance_ != NULL) tsrdistance_->::atd::map::TSR_DISTANCE::Clear();
  clear_has_tsrdistance();
}
const ::atd::map::TSR_DISTANCE& EngineRemainDistance::tsrdistance() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineRemainDistance.tsrdistance)
  return tsrdistance_ != NULL ? *tsrdistance_
                         : *::atd::map::TSR_DISTANCE::internal_default_instance();
}
::atd::map::TSR_DISTANCE* EngineRemainDistance::mutable_tsrdistance() {
  set_has_tsrdistance();
  if (tsrdistance_ == NULL) {
    tsrdistance_ = new ::atd::map::TSR_DISTANCE;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineRemainDistance.tsrdistance)
  return tsrdistance_;
}
::atd::map::TSR_DISTANCE* EngineRemainDistance::release_tsrdistance() {
  // @@protoc_insertion_point(field_release:atd.map.EngineRemainDistance.tsrdistance)
  clear_has_tsrdistance();
  ::atd::map::TSR_DISTANCE* temp = tsrdistance_;
  tsrdistance_ = NULL;
  return temp;
}
void EngineRemainDistance::set_allocated_tsrdistance(::atd::map::TSR_DISTANCE* tsrdistance) {
  delete tsrdistance_;
  tsrdistance_ = tsrdistance;
  if (tsrdistance) {
    set_has_tsrdistance();
  } else {
    clear_has_tsrdistance();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineRemainDistance.tsrdistance)
}

// optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
bool EngineRemainDistance::has_oneparkingsite() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void EngineRemainDistance::set_has_oneparkingsite() {
  _has_bits_[0] |= 0x00000020u;
}
void EngineRemainDistance::clear_has_oneparkingsite() {
  _has_bits_[0] &= ~0x00000020u;
}
void EngineRemainDistance::clear_oneparkingsite() {
  if (oneparkingsite_ != NULL) oneparkingsite_->::atd::map::ONE_PARKING_SITE::Clear();
  clear_has_oneparkingsite();
}
const ::atd::map::ONE_PARKING_SITE& EngineRemainDistance::oneparkingsite() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineRemainDistance.oneparkingsite)
  return oneparkingsite_ != NULL ? *oneparkingsite_
                         : *::atd::map::ONE_PARKING_SITE::internal_default_instance();
}
::atd::map::ONE_PARKING_SITE* EngineRemainDistance::mutable_oneparkingsite() {
  set_has_oneparkingsite();
  if (oneparkingsite_ == NULL) {
    oneparkingsite_ = new ::atd::map::ONE_PARKING_SITE;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineRemainDistance.oneparkingsite)
  return oneparkingsite_;
}
::atd::map::ONE_PARKING_SITE* EngineRemainDistance::release_oneparkingsite() {
  // @@protoc_insertion_point(field_release:atd.map.EngineRemainDistance.oneparkingsite)
  clear_has_oneparkingsite();
  ::atd::map::ONE_PARKING_SITE* temp = oneparkingsite_;
  oneparkingsite_ = NULL;
  return temp;
}
void EngineRemainDistance::set_allocated_oneparkingsite(::atd::map::ONE_PARKING_SITE* oneparkingsite) {
  delete oneparkingsite_;
  oneparkingsite_ = oneparkingsite;
  if (oneparkingsite) {
    set_has_oneparkingsite();
  } else {
    clear_has_oneparkingsite();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineRemainDistance.oneparkingsite)
}

// optional string sTaskID = 6;
bool EngineRemainDistance::has_staskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EngineRemainDistance::set_has_staskid() {
  _has_bits_[0] |= 0x00000001u;
}
void EngineRemainDistance::clear_has_staskid() {
  _has_bits_[0] &= ~0x00000001u;
}
void EngineRemainDistance::clear_staskid() {
  staskid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_staskid();
}
const ::std::string& EngineRemainDistance::staskid() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineRemainDistance.sTaskID)
  return staskid_.GetNoArena();
}
void EngineRemainDistance::set_staskid(const ::std::string& value) {
  set_has_staskid();
  staskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.map.EngineRemainDistance.sTaskID)
}
#if LANG_CXX11
void EngineRemainDistance::set_staskid(::std::string&& value) {
  set_has_staskid();
  staskid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.map.EngineRemainDistance.sTaskID)
}
#endif
void EngineRemainDistance::set_staskid(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_staskid();
  staskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.map.EngineRemainDistance.sTaskID)
}
void EngineRemainDistance::set_staskid(const char* value, size_t size) {
  set_has_staskid();
  staskid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.map.EngineRemainDistance.sTaskID)
}
::std::string* EngineRemainDistance::mutable_staskid() {
  set_has_staskid();
  // @@protoc_insertion_point(field_mutable:atd.map.EngineRemainDistance.sTaskID)
  return staskid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EngineRemainDistance::release_staskid() {
  // @@protoc_insertion_point(field_release:atd.map.EngineRemainDistance.sTaskID)
  clear_has_staskid();
  return staskid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EngineRemainDistance::set_allocated_staskid(::std::string* staskid) {
  if (staskid != NULL) {
    set_has_staskid();
  } else {
    clear_has_staskid();
  }
  staskid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), staskid);
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineRemainDistance.sTaskID)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace atd

// @@protoc_insertion_point(global_scope)
