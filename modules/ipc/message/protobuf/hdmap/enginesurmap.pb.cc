// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/hdmap/enginesurmap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/hdmap/enginesurmap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace map {
class SurElementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SurElement> {
} _SurElement_default_instance_;
class SurElementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SurElements> {
} _SurElements_default_instance_;
class EngineSurMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EngineSurMap> {
} _EngineSurMap_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _SurElement_default_instance_.Shutdown();
  _SurElements_default_instance_.Shutdown();
  _EngineSurMap_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  ::atd::map::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::InitDefaults();
  _SurElement_default_instance_.DefaultConstruct();
  _SurElements_default_instance_.DefaultConstruct();
  _EngineSurMap_default_instance_.DefaultConstruct();
  _EngineSurMap_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _EngineSurMap_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _EngineSurMap_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _EngineSurMap_default_instance_.get_mutable()->oneparkingsite_ = const_cast< ::atd::map::ONE_PARKING_SITE*>(
      ::atd::map::ONE_PARKING_SITE::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::atd::map::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fengineremaindistance_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurElement::kMajortypeFieldNumber;
const int SurElement::kMinortypeFieldNumber;
const int SurElement::kOnepointFieldNumber;
const int SurElement::kElementidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurElement::SurElement()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.SurElement)
}
SurElement::SurElement(const SurElement& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onepoint_(from.onepoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&majortype_, &from.majortype_,
    reinterpret_cast<char*>(&elementid_) -
    reinterpret_cast<char*>(&majortype_) + sizeof(elementid_));
  // @@protoc_insertion_point(copy_constructor:atd.map.SurElement)
}

void SurElement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&majortype_, 0, reinterpret_cast<char*>(&elementid_) -
    reinterpret_cast<char*>(&majortype_) + sizeof(elementid_));
}

SurElement::~SurElement() {
  // @@protoc_insertion_point(destructor:atd.map.SurElement)
  SharedDtor();
}

void SurElement::SharedDtor() {
}

void SurElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurElement& SurElement::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

SurElement* SurElement::New(::google::protobuf::Arena* arena) const {
  SurElement* n = new SurElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SurElement::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.SurElement)
  onepoint_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&majortype_, 0, reinterpret_cast<char*>(&elementid_) -
      reinterpret_cast<char*>(&majortype_) + sizeof(elementid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SurElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.SurElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 majortype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_majortype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majortype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minortype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_minortype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minortype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Point2D onepoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 elementid = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_elementid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elementid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.SurElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.SurElement)
  return false;
#undef DO_
}

void SurElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.SurElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 majortype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->majortype(), output);
  }

  // optional int32 minortype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minortype(), output);
  }

  // repeated .atd.common.Point2D onepoint = 3;
  for (unsigned int i = 0, n = this->onepoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->onepoint(i), output);
  }

  // optional int32 elementid = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->elementid(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.SurElement)
}

size_t SurElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.SurElement)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.common.Point2D onepoint = 3;
  {
    unsigned int count = this->onepoint_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onepoint(i));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional int32 majortype = 1;
    if (has_majortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majortype());
    }

    // optional int32 minortype = 2;
    if (has_minortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minortype());
    }

    // optional int32 elementid = 4;
    if (has_elementid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elementid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurElement*>(&from));
}

void SurElement::MergeFrom(const SurElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.SurElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onepoint_.MergeFrom(from.onepoint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      majortype_ = from.majortype_;
    }
    if (cached_has_bits & 0x00000002u) {
      minortype_ = from.minortype_;
    }
    if (cached_has_bits & 0x00000004u) {
      elementid_ = from.elementid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void SurElement::CopyFrom(const SurElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.SurElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurElement::IsInitialized() const {
  return true;
}

void SurElement::Swap(SurElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SurElement::InternalSwap(SurElement* other) {
  onepoint_.InternalSwap(&other->onepoint_);
  std::swap(majortype_, other->majortype_);
  std::swap(minortype_, other->minortype_);
  std::swap(elementid_, other->elementid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SurElement::GetTypeName() const {
  return "atd.map.SurElement";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SurElement

// optional int32 majortype = 1;
bool SurElement::has_majortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SurElement::set_has_majortype() {
  _has_bits_[0] |= 0x00000001u;
}
void SurElement::clear_has_majortype() {
  _has_bits_[0] &= ~0x00000001u;
}
void SurElement::clear_majortype() {
  majortype_ = 0;
  clear_has_majortype();
}
::google::protobuf::int32 SurElement::majortype() const {
  // @@protoc_insertion_point(field_get:atd.map.SurElement.majortype)
  return majortype_;
}
void SurElement::set_majortype(::google::protobuf::int32 value) {
  set_has_majortype();
  majortype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.SurElement.majortype)
}

// optional int32 minortype = 2;
bool SurElement::has_minortype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SurElement::set_has_minortype() {
  _has_bits_[0] |= 0x00000002u;
}
void SurElement::clear_has_minortype() {
  _has_bits_[0] &= ~0x00000002u;
}
void SurElement::clear_minortype() {
  minortype_ = 0;
  clear_has_minortype();
}
::google::protobuf::int32 SurElement::minortype() const {
  // @@protoc_insertion_point(field_get:atd.map.SurElement.minortype)
  return minortype_;
}
void SurElement::set_minortype(::google::protobuf::int32 value) {
  set_has_minortype();
  minortype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.SurElement.minortype)
}

// repeated .atd.common.Point2D onepoint = 3;
int SurElement::onepoint_size() const {
  return onepoint_.size();
}
void SurElement::clear_onepoint() {
  onepoint_.Clear();
}
const ::atd::common::Point2D& SurElement::onepoint(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.SurElement.onepoint)
  return onepoint_.Get(index);
}
::atd::common::Point2D* SurElement::mutable_onepoint(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.SurElement.onepoint)
  return onepoint_.Mutable(index);
}
::atd::common::Point2D* SurElement::add_onepoint() {
  // @@protoc_insertion_point(field_add:atd.map.SurElement.onepoint)
  return onepoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
SurElement::mutable_onepoint() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.SurElement.onepoint)
  return &onepoint_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
SurElement::onepoint() const {
  // @@protoc_insertion_point(field_list:atd.map.SurElement.onepoint)
  return onepoint_;
}

// optional int32 elementid = 4;
bool SurElement::has_elementid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void SurElement::set_has_elementid() {
  _has_bits_[0] |= 0x00000004u;
}
void SurElement::clear_has_elementid() {
  _has_bits_[0] &= ~0x00000004u;
}
void SurElement::clear_elementid() {
  elementid_ = 0;
  clear_has_elementid();
}
::google::protobuf::int32 SurElement::elementid() const {
  // @@protoc_insertion_point(field_get:atd.map.SurElement.elementid)
  return elementid_;
}
void SurElement::set_elementid(::google::protobuf::int32 value) {
  set_has_elementid();
  elementid_ = value;
  // @@protoc_insertion_point(field_set:atd.map.SurElement.elementid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SurElements::kSubcodeFieldNumber;
const int SurElements::kOneelementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SurElements::SurElements()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.SurElements)
}
SurElements::SurElements(const SurElements& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      oneelement_(from.oneelement_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subcode_ = from.subcode_;
  // @@protoc_insertion_point(copy_constructor:atd.map.SurElements)
}

void SurElements::SharedCtor() {
  _cached_size_ = 0;
  subcode_ = 0;
}

SurElements::~SurElements() {
  // @@protoc_insertion_point(destructor:atd.map.SurElements)
  SharedDtor();
}

void SurElements::SharedDtor() {
}

void SurElements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SurElements& SurElements::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

SurElements* SurElements::New(::google::protobuf::Arena* arena) const {
  SurElements* n = new SurElements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SurElements::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.SurElements)
  oneelement_.Clear();
  subcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SurElements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.SurElements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 subcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_subcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.map.SurElement oneelement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oneelement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.SurElements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.SurElements)
  return false;
#undef DO_
}

void SurElements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.SurElements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 subcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->subcode(), output);
  }

  // repeated .atd.map.SurElement oneelement = 2;
  for (unsigned int i = 0, n = this->oneelement_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->oneelement(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.SurElements)
}

size_t SurElements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.SurElements)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.map.SurElement oneelement = 2;
  {
    unsigned int count = this->oneelement_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oneelement(i));
    }
  }

  // optional int32 subcode = 1;
  if (has_subcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SurElements::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SurElements*>(&from));
}

void SurElements::MergeFrom(const SurElements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.SurElements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oneelement_.MergeFrom(from.oneelement_);
  if (from.has_subcode()) {
    set_subcode(from.subcode());
  }
}

void SurElements::CopyFrom(const SurElements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.SurElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurElements::IsInitialized() const {
  return true;
}

void SurElements::Swap(SurElements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SurElements::InternalSwap(SurElements* other) {
  oneelement_.InternalSwap(&other->oneelement_);
  std::swap(subcode_, other->subcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SurElements::GetTypeName() const {
  return "atd.map.SurElements";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SurElements

// optional int32 subcode = 1;
bool SurElements::has_subcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SurElements::set_has_subcode() {
  _has_bits_[0] |= 0x00000001u;
}
void SurElements::clear_has_subcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void SurElements::clear_subcode() {
  subcode_ = 0;
  clear_has_subcode();
}
::google::protobuf::int32 SurElements::subcode() const {
  // @@protoc_insertion_point(field_get:atd.map.SurElements.subcode)
  return subcode_;
}
void SurElements::set_subcode(::google::protobuf::int32 value) {
  set_has_subcode();
  subcode_ = value;
  // @@protoc_insertion_point(field_set:atd.map.SurElements.subcode)
}

// repeated .atd.map.SurElement oneelement = 2;
int SurElements::oneelement_size() const {
  return oneelement_.size();
}
void SurElements::clear_oneelement() {
  oneelement_.Clear();
}
const ::atd::map::SurElement& SurElements::oneelement(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.SurElements.oneelement)
  return oneelement_.Get(index);
}
::atd::map::SurElement* SurElements::mutable_oneelement(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.SurElements.oneelement)
  return oneelement_.Mutable(index);
}
::atd::map::SurElement* SurElements::add_oneelement() {
  // @@protoc_insertion_point(field_add:atd.map.SurElements.oneelement)
  return oneelement_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::SurElement >*
SurElements::mutable_oneelement() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.SurElements.oneelement)
  return &oneelement_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::SurElement >&
SurElements::oneelement() const {
  // @@protoc_insertion_point(field_list:atd.map.SurElements.oneelement)
  return oneelement_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngineSurMap::kHeaderFieldNumber;
const int EngineSurMap::kReservedmsgFieldNumber;
const int EngineSurMap::kPoseFieldNumber;
const int EngineSurMap::kElementsFieldNumber;
const int EngineSurMap::kOneparkingsiteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngineSurMap::EngineSurMap()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.EngineSurMap)
}
EngineSurMap::EngineSurMap(const EngineSurMap& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_oneparkingsite()) {
    oneparkingsite_ = new ::atd::map::ONE_PARKING_SITE(*from.oneparkingsite_);
  } else {
    oneparkingsite_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.map.EngineSurMap)
}

void EngineSurMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&oneparkingsite_) -
    reinterpret_cast<char*>(&header_) + sizeof(oneparkingsite_));
}

EngineSurMap::~EngineSurMap() {
  // @@protoc_insertion_point(destructor:atd.map.EngineSurMap)
  SharedDtor();
}

void EngineSurMap::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete oneparkingsite_;
  }
}

void EngineSurMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EngineSurMap& EngineSurMap::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginesurmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

EngineSurMap* EngineSurMap::New(::google::protobuf::Arena* arena) const {
  EngineSurMap* n = new EngineSurMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EngineSurMap::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.EngineSurMap)
  elements_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_oneparkingsite()) {
      GOOGLE_DCHECK(oneparkingsite_ != NULL);
      oneparkingsite_->::atd::map::ONE_PARKING_SITE::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EngineSurMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.EngineSurMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.map.SurElements elements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oneparkingsite()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.EngineSurMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.EngineSurMap)
  return false;
#undef DO_
}

void EngineSurMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.EngineSurMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // repeated .atd.map.SurElements elements = 4;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->elements(i), output);
  }

  // optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->oneparkingsite_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.EngineSurMap)
}

size_t EngineSurMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.EngineSurMap)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.map.SurElements elements = 4;
  {
    unsigned int count = this->elements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elements(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
    if (has_oneparkingsite()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->oneparkingsite_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EngineSurMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EngineSurMap*>(&from));
}

void EngineSurMap::MergeFrom(const EngineSurMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.EngineSurMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_oneparkingsite()->::atd::map::ONE_PARKING_SITE::MergeFrom(from.oneparkingsite());
    }
  }
}

void EngineSurMap::CopyFrom(const EngineSurMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.EngineSurMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineSurMap::IsInitialized() const {
  return true;
}

void EngineSurMap::Swap(EngineSurMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EngineSurMap::InternalSwap(EngineSurMap* other) {
  elements_.InternalSwap(&other->elements_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(oneparkingsite_, other->oneparkingsite_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EngineSurMap::GetTypeName() const {
  return "atd.map.EngineSurMap";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EngineSurMap

// optional .atd.common.Header header = 1;
bool EngineSurMap::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EngineSurMap::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void EngineSurMap::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void EngineSurMap::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& EngineSurMap::header() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineSurMap.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* EngineSurMap::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineSurMap.header)
  return header_;
}
::atd::common::Header* EngineSurMap::release_header() {
  // @@protoc_insertion_point(field_release:atd.map.EngineSurMap.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void EngineSurMap::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineSurMap.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool EngineSurMap::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EngineSurMap::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void EngineSurMap::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void EngineSurMap::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& EngineSurMap::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineSurMap.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* EngineSurMap::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineSurMap.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* EngineSurMap::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.map.EngineSurMap.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void EngineSurMap::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineSurMap.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool EngineSurMap::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EngineSurMap::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void EngineSurMap::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void EngineSurMap::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& EngineSurMap::pose() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineSurMap.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* EngineSurMap::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineSurMap.pose)
  return pose_;
}
::atd::localization::Pose* EngineSurMap::release_pose() {
  // @@protoc_insertion_point(field_release:atd.map.EngineSurMap.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void EngineSurMap::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineSurMap.pose)
}

// repeated .atd.map.SurElements elements = 4;
int EngineSurMap::elements_size() const {
  return elements_.size();
}
void EngineSurMap::clear_elements() {
  elements_.Clear();
}
const ::atd::map::SurElements& EngineSurMap::elements(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.EngineSurMap.elements)
  return elements_.Get(index);
}
::atd::map::SurElements* EngineSurMap::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.EngineSurMap.elements)
  return elements_.Mutable(index);
}
::atd::map::SurElements* EngineSurMap::add_elements() {
  // @@protoc_insertion_point(field_add:atd.map.EngineSurMap.elements)
  return elements_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::SurElements >*
EngineSurMap::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.EngineSurMap.elements)
  return &elements_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::SurElements >&
EngineSurMap::elements() const {
  // @@protoc_insertion_point(field_list:atd.map.EngineSurMap.elements)
  return elements_;
}

// optional .atd.map.ONE_PARKING_SITE oneparkingsite = 5;
bool EngineSurMap::has_oneparkingsite() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EngineSurMap::set_has_oneparkingsite() {
  _has_bits_[0] |= 0x00000008u;
}
void EngineSurMap::clear_has_oneparkingsite() {
  _has_bits_[0] &= ~0x00000008u;
}
void EngineSurMap::clear_oneparkingsite() {
  if (oneparkingsite_ != NULL) oneparkingsite_->::atd::map::ONE_PARKING_SITE::Clear();
  clear_has_oneparkingsite();
}
const ::atd::map::ONE_PARKING_SITE& EngineSurMap::oneparkingsite() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineSurMap.oneparkingsite)
  return oneparkingsite_ != NULL ? *oneparkingsite_
                         : *::atd::map::ONE_PARKING_SITE::internal_default_instance();
}
::atd::map::ONE_PARKING_SITE* EngineSurMap::mutable_oneparkingsite() {
  set_has_oneparkingsite();
  if (oneparkingsite_ == NULL) {
    oneparkingsite_ = new ::atd::map::ONE_PARKING_SITE;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineSurMap.oneparkingsite)
  return oneparkingsite_;
}
::atd::map::ONE_PARKING_SITE* EngineSurMap::release_oneparkingsite() {
  // @@protoc_insertion_point(field_release:atd.map.EngineSurMap.oneparkingsite)
  clear_has_oneparkingsite();
  ::atd::map::ONE_PARKING_SITE* temp = oneparkingsite_;
  oneparkingsite_ = NULL;
  return temp;
}
void EngineSurMap::set_allocated_oneparkingsite(::atd::map::ONE_PARKING_SITE* oneparkingsite) {
  delete oneparkingsite_;
  oneparkingsite_ = oneparkingsite;
  if (oneparkingsite) {
    set_has_oneparkingsite();
  } else {
    clear_has_oneparkingsite();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineSurMap.oneparkingsite)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace atd

// @@protoc_insertion_point(global_scope)
