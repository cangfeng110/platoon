// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/hdmap/gridlog.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/hdmap/gridlog.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace map {
class LANE_LINK_KEY_GridLogDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LANE_LINK_KEY_GridLog> {
} _LANE_LINK_KEY_GridLog_default_instance_;
class GridLogInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GridLogInfo> {
} _GridLogInfo_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fgridlog_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _LANE_LINK_KEY_GridLog_default_instance_.Shutdown();
  _GridLogInfo_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  _LANE_LINK_KEY_GridLog_default_instance_.DefaultConstruct();
  _GridLogInfo_default_instance_.DefaultConstruct();
  _GridLogInfo_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _GridLogInfo_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _GridLogInfo_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _GridLogInfo_default_instance_.get_mutable()->currentlaneinfo_ = const_cast< ::atd::map::LANE_LINK_KEY_GridLog*>(
      ::atd::map::LANE_LINK_KEY_GridLog::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fgridlog_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LANE_LINK_KEY_GridLog::kMIRoadIdFieldNumber;
const int LANE_LINK_KEY_GridLog::kMISectionSeqFieldNumber;
const int LANE_LINK_KEY_GridLog::kMILaneNumFieldNumber;
const int LANE_LINK_KEY_GridLog::kMIBranchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LANE_LINK_KEY_GridLog::LANE_LINK_KEY_GridLog()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fgridlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.LANE_LINK_KEY_GridLog)
}
LANE_LINK_KEY_GridLog::LANE_LINK_KEY_GridLog(const LANE_LINK_KEY_GridLog& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&m_iroadid_, &from.m_iroadid_,
    reinterpret_cast<char*>(&m_ibranch_) -
    reinterpret_cast<char*>(&m_iroadid_) + sizeof(m_ibranch_));
  // @@protoc_insertion_point(copy_constructor:atd.map.LANE_LINK_KEY_GridLog)
}

void LANE_LINK_KEY_GridLog::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&m_iroadid_, 0, reinterpret_cast<char*>(&m_ibranch_) -
    reinterpret_cast<char*>(&m_iroadid_) + sizeof(m_ibranch_));
}

LANE_LINK_KEY_GridLog::~LANE_LINK_KEY_GridLog() {
  // @@protoc_insertion_point(destructor:atd.map.LANE_LINK_KEY_GridLog)
  SharedDtor();
}

void LANE_LINK_KEY_GridLog::SharedDtor() {
}

void LANE_LINK_KEY_GridLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LANE_LINK_KEY_GridLog& LANE_LINK_KEY_GridLog::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fgridlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

LANE_LINK_KEY_GridLog* LANE_LINK_KEY_GridLog::New(::google::protobuf::Arena* arena) const {
  LANE_LINK_KEY_GridLog* n = new LANE_LINK_KEY_GridLog;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LANE_LINK_KEY_GridLog::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.LANE_LINK_KEY_GridLog)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&m_iroadid_, 0, reinterpret_cast<char*>(&m_ibranch_) -
      reinterpret_cast<char*>(&m_iroadid_) + sizeof(m_ibranch_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LANE_LINK_KEY_GridLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.LANE_LINK_KEY_GridLog)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 m_iRoadId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_m_iroadid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_iroadid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iSectionSeq = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_m_isectionseq();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_isectionseq_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iLaneNum = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_m_ilanenum();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ilanenum_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 m_iBranch = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_m_ibranch();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_ibranch_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.LANE_LINK_KEY_GridLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.LANE_LINK_KEY_GridLog)
  return false;
#undef DO_
}

void LANE_LINK_KEY_GridLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.LANE_LINK_KEY_GridLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 m_iRoadId = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->m_iroadid(), output);
  }

  // optional int32 m_iSectionSeq = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->m_isectionseq(), output);
  }

  // optional int32 m_iLaneNum = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_ilanenum(), output);
  }

  // optional int32 m_iBranch = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_ibranch(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.LANE_LINK_KEY_GridLog)
}

size_t LANE_LINK_KEY_GridLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.LANE_LINK_KEY_GridLog)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int64 m_iRoadId = 1;
    if (has_m_iroadid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_iroadid());
    }

    // optional int32 m_iSectionSeq = 2;
    if (has_m_isectionseq()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_isectionseq());
    }

    // optional int32 m_iLaneNum = 3;
    if (has_m_ilanenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ilanenum());
    }

    // optional int32 m_iBranch = 4;
    if (has_m_ibranch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_ibranch());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LANE_LINK_KEY_GridLog::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LANE_LINK_KEY_GridLog*>(&from));
}

void LANE_LINK_KEY_GridLog::MergeFrom(const LANE_LINK_KEY_GridLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.LANE_LINK_KEY_GridLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      m_iroadid_ = from.m_iroadid_;
    }
    if (cached_has_bits & 0x00000002u) {
      m_isectionseq_ = from.m_isectionseq_;
    }
    if (cached_has_bits & 0x00000004u) {
      m_ilanenum_ = from.m_ilanenum_;
    }
    if (cached_has_bits & 0x00000008u) {
      m_ibranch_ = from.m_ibranch_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LANE_LINK_KEY_GridLog::CopyFrom(const LANE_LINK_KEY_GridLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.LANE_LINK_KEY_GridLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LANE_LINK_KEY_GridLog::IsInitialized() const {
  return true;
}

void LANE_LINK_KEY_GridLog::Swap(LANE_LINK_KEY_GridLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LANE_LINK_KEY_GridLog::InternalSwap(LANE_LINK_KEY_GridLog* other) {
  std::swap(m_iroadid_, other->m_iroadid_);
  std::swap(m_isectionseq_, other->m_isectionseq_);
  std::swap(m_ilanenum_, other->m_ilanenum_);
  std::swap(m_ibranch_, other->m_ibranch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LANE_LINK_KEY_GridLog::GetTypeName() const {
  return "atd.map.LANE_LINK_KEY_GridLog";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LANE_LINK_KEY_GridLog

// optional int64 m_iRoadId = 1;
bool LANE_LINK_KEY_GridLog::has_m_iroadid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LANE_LINK_KEY_GridLog::set_has_m_iroadid() {
  _has_bits_[0] |= 0x00000001u;
}
void LANE_LINK_KEY_GridLog::clear_has_m_iroadid() {
  _has_bits_[0] &= ~0x00000001u;
}
void LANE_LINK_KEY_GridLog::clear_m_iroadid() {
  m_iroadid_ = GOOGLE_LONGLONG(0);
  clear_has_m_iroadid();
}
::google::protobuf::int64 LANE_LINK_KEY_GridLog::m_iroadid() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY_GridLog.m_iRoadId)
  return m_iroadid_;
}
void LANE_LINK_KEY_GridLog::set_m_iroadid(::google::protobuf::int64 value) {
  set_has_m_iroadid();
  m_iroadid_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY_GridLog.m_iRoadId)
}

// optional int32 m_iSectionSeq = 2;
bool LANE_LINK_KEY_GridLog::has_m_isectionseq() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LANE_LINK_KEY_GridLog::set_has_m_isectionseq() {
  _has_bits_[0] |= 0x00000002u;
}
void LANE_LINK_KEY_GridLog::clear_has_m_isectionseq() {
  _has_bits_[0] &= ~0x00000002u;
}
void LANE_LINK_KEY_GridLog::clear_m_isectionseq() {
  m_isectionseq_ = 0;
  clear_has_m_isectionseq();
}
::google::protobuf::int32 LANE_LINK_KEY_GridLog::m_isectionseq() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY_GridLog.m_iSectionSeq)
  return m_isectionseq_;
}
void LANE_LINK_KEY_GridLog::set_m_isectionseq(::google::protobuf::int32 value) {
  set_has_m_isectionseq();
  m_isectionseq_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY_GridLog.m_iSectionSeq)
}

// optional int32 m_iLaneNum = 3;
bool LANE_LINK_KEY_GridLog::has_m_ilanenum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LANE_LINK_KEY_GridLog::set_has_m_ilanenum() {
  _has_bits_[0] |= 0x00000004u;
}
void LANE_LINK_KEY_GridLog::clear_has_m_ilanenum() {
  _has_bits_[0] &= ~0x00000004u;
}
void LANE_LINK_KEY_GridLog::clear_m_ilanenum() {
  m_ilanenum_ = 0;
  clear_has_m_ilanenum();
}
::google::protobuf::int32 LANE_LINK_KEY_GridLog::m_ilanenum() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY_GridLog.m_iLaneNum)
  return m_ilanenum_;
}
void LANE_LINK_KEY_GridLog::set_m_ilanenum(::google::protobuf::int32 value) {
  set_has_m_ilanenum();
  m_ilanenum_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY_GridLog.m_iLaneNum)
}

// optional int32 m_iBranch = 4;
bool LANE_LINK_KEY_GridLog::has_m_ibranch() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void LANE_LINK_KEY_GridLog::set_has_m_ibranch() {
  _has_bits_[0] |= 0x00000008u;
}
void LANE_LINK_KEY_GridLog::clear_has_m_ibranch() {
  _has_bits_[0] &= ~0x00000008u;
}
void LANE_LINK_KEY_GridLog::clear_m_ibranch() {
  m_ibranch_ = 0;
  clear_has_m_ibranch();
}
::google::protobuf::int32 LANE_LINK_KEY_GridLog::m_ibranch() const {
  // @@protoc_insertion_point(field_get:atd.map.LANE_LINK_KEY_GridLog.m_iBranch)
  return m_ibranch_;
}
void LANE_LINK_KEY_GridLog::set_m_ibranch(::google::protobuf::int32 value) {
  set_has_m_ibranch();
  m_ibranch_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LANE_LINK_KEY_GridLog.m_iBranch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridLogInfo::kHeaderFieldNumber;
const int GridLogInfo::kReservedmsgFieldNumber;
const int GridLogInfo::kPoseFieldNumber;
const int GridLogInfo::kCurrentlaneinfoFieldNumber;
const int GridLogInfo::kMISpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridLogInfo::GridLogInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fgridlog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.GridLogInfo)
}
GridLogInfo::GridLogInfo(const GridLogInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_currentlaneinfo()) {
    currentlaneinfo_ = new ::atd::map::LANE_LINK_KEY_GridLog(*from.currentlaneinfo_);
  } else {
    currentlaneinfo_ = NULL;
  }
  m_ispeed_ = from.m_ispeed_;
  // @@protoc_insertion_point(copy_constructor:atd.map.GridLogInfo)
}

void GridLogInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&m_ispeed_) -
    reinterpret_cast<char*>(&header_) + sizeof(m_ispeed_));
}

GridLogInfo::~GridLogInfo() {
  // @@protoc_insertion_point(destructor:atd.map.GridLogInfo)
  SharedDtor();
}

void GridLogInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete currentlaneinfo_;
  }
}

void GridLogInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GridLogInfo& GridLogInfo::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fgridlog_2eproto::InitDefaults();
  return *internal_default_instance();
}

GridLogInfo* GridLogInfo::New(::google::protobuf::Arena* arena) const {
  GridLogInfo* n = new GridLogInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridLogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.GridLogInfo)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_currentlaneinfo()) {
      GOOGLE_DCHECK(currentlaneinfo_ != NULL);
      currentlaneinfo_->::atd::map::LANE_LINK_KEY_GridLog::Clear();
    }
  }
  m_ispeed_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GridLogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.GridLogInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.map.LANE_LINK_KEY_GridLog currentlaneinfo = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_currentlaneinfo()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int64 m_iSpeed = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_m_ispeed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_ispeed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.GridLogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.GridLogInfo)
  return false;
#undef DO_
}

void GridLogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.GridLogInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // optional .atd.map.LANE_LINK_KEY_GridLog currentlaneinfo = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->currentlaneinfo_, output);
  }

  // optional int64 m_iSpeed = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_ispeed(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.GridLogInfo)
}

size_t GridLogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.GridLogInfo)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.map.LANE_LINK_KEY_GridLog currentlaneinfo = 4;
    if (has_currentlaneinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->currentlaneinfo_);
    }

    // optional int64 m_iSpeed = 5;
    if (has_m_ispeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_ispeed());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridLogInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GridLogInfo*>(&from));
}

void GridLogInfo::MergeFrom(const GridLogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.GridLogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_currentlaneinfo()->::atd::map::LANE_LINK_KEY_GridLog::MergeFrom(from.currentlaneinfo());
    }
    if (cached_has_bits & 0x00000010u) {
      m_ispeed_ = from.m_ispeed_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GridLogInfo::CopyFrom(const GridLogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.GridLogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridLogInfo::IsInitialized() const {
  return true;
}

void GridLogInfo::Swap(GridLogInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridLogInfo::InternalSwap(GridLogInfo* other) {
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(currentlaneinfo_, other->currentlaneinfo_);
  std::swap(m_ispeed_, other->m_ispeed_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GridLogInfo::GetTypeName() const {
  return "atd.map.GridLogInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GridLogInfo

// optional .atd.common.Header header = 1;
bool GridLogInfo::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GridLogInfo::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void GridLogInfo::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void GridLogInfo::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& GridLogInfo::header() const {
  // @@protoc_insertion_point(field_get:atd.map.GridLogInfo.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* GridLogInfo::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.GridLogInfo.header)
  return header_;
}
::atd::common::Header* GridLogInfo::release_header() {
  // @@protoc_insertion_point(field_release:atd.map.GridLogInfo.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void GridLogInfo::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.GridLogInfo.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool GridLogInfo::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GridLogInfo::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void GridLogInfo::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void GridLogInfo::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& GridLogInfo::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.map.GridLogInfo.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* GridLogInfo::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.GridLogInfo.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* GridLogInfo::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.map.GridLogInfo.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void GridLogInfo::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.GridLogInfo.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool GridLogInfo::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GridLogInfo::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void GridLogInfo::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void GridLogInfo::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& GridLogInfo::pose() const {
  // @@protoc_insertion_point(field_get:atd.map.GridLogInfo.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* GridLogInfo::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.GridLogInfo.pose)
  return pose_;
}
::atd::localization::Pose* GridLogInfo::release_pose() {
  // @@protoc_insertion_point(field_release:atd.map.GridLogInfo.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void GridLogInfo::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.GridLogInfo.pose)
}

// optional .atd.map.LANE_LINK_KEY_GridLog currentlaneinfo = 4;
bool GridLogInfo::has_currentlaneinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void GridLogInfo::set_has_currentlaneinfo() {
  _has_bits_[0] |= 0x00000008u;
}
void GridLogInfo::clear_has_currentlaneinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
void GridLogInfo::clear_currentlaneinfo() {
  if (currentlaneinfo_ != NULL) currentlaneinfo_->::atd::map::LANE_LINK_KEY_GridLog::Clear();
  clear_has_currentlaneinfo();
}
const ::atd::map::LANE_LINK_KEY_GridLog& GridLogInfo::currentlaneinfo() const {
  // @@protoc_insertion_point(field_get:atd.map.GridLogInfo.currentlaneinfo)
  return currentlaneinfo_ != NULL ? *currentlaneinfo_
                         : *::atd::map::LANE_LINK_KEY_GridLog::internal_default_instance();
}
::atd::map::LANE_LINK_KEY_GridLog* GridLogInfo::mutable_currentlaneinfo() {
  set_has_currentlaneinfo();
  if (currentlaneinfo_ == NULL) {
    currentlaneinfo_ = new ::atd::map::LANE_LINK_KEY_GridLog;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.GridLogInfo.currentlaneinfo)
  return currentlaneinfo_;
}
::atd::map::LANE_LINK_KEY_GridLog* GridLogInfo::release_currentlaneinfo() {
  // @@protoc_insertion_point(field_release:atd.map.GridLogInfo.currentlaneinfo)
  clear_has_currentlaneinfo();
  ::atd::map::LANE_LINK_KEY_GridLog* temp = currentlaneinfo_;
  currentlaneinfo_ = NULL;
  return temp;
}
void GridLogInfo::set_allocated_currentlaneinfo(::atd::map::LANE_LINK_KEY_GridLog* currentlaneinfo) {
  delete currentlaneinfo_;
  currentlaneinfo_ = currentlaneinfo;
  if (currentlaneinfo) {
    set_has_currentlaneinfo();
  } else {
    clear_has_currentlaneinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.GridLogInfo.currentlaneinfo)
}

// optional int64 m_iSpeed = 5;
bool GridLogInfo::has_m_ispeed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void GridLogInfo::set_has_m_ispeed() {
  _has_bits_[0] |= 0x00000010u;
}
void GridLogInfo::clear_has_m_ispeed() {
  _has_bits_[0] &= ~0x00000010u;
}
void GridLogInfo::clear_m_ispeed() {
  m_ispeed_ = GOOGLE_LONGLONG(0);
  clear_has_m_ispeed();
}
::google::protobuf::int64 GridLogInfo::m_ispeed() const {
  // @@protoc_insertion_point(field_get:atd.map.GridLogInfo.m_iSpeed)
  return m_ispeed_;
}
void GridLogInfo::set_m_ispeed(::google::protobuf::int64 value) {
  set_has_m_ispeed();
  m_ispeed_ = value;
  // @@protoc_insertion_point(field_set:atd.map.GridLogInfo.m_iSpeed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace atd

// @@protoc_insertion_point(global_scope)
