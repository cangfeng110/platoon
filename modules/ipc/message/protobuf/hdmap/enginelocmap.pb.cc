// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/hdmap/enginelocmap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/hdmap/enginelocmap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace map {
class LocElementDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocElement> {
} _LocElement_default_instance_;
class LocElementsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LocElements> {
} _LocElements_default_instance_;
class EngineLocMapDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EngineLocMap> {
} _EngineLocMap_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _LocElement_default_instance_.Shutdown();
  _LocElements_default_instance_.Shutdown();
  _EngineLocMap_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  _LocElement_default_instance_.DefaultConstruct();
  _LocElements_default_instance_.DefaultConstruct();
  _EngineLocMap_default_instance_.DefaultConstruct();
  _EngineLocMap_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _EngineLocMap_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _EngineLocMap_default_instance_.get_mutable()->pose_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
  _EngineLocMap_default_instance_.get_mutable()->map_ = const_cast< ::atd::localization::Pose*>(
      ::atd::localization::Pose::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocElement::kMajortypeFieldNumber;
const int LocElement::kMinortypeFieldNumber;
const int LocElement::kOnepointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocElement::LocElement()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.LocElement)
}
LocElement::LocElement(const LocElement& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onepoint_(from.onepoint_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&majortype_, &from.majortype_,
    reinterpret_cast<char*>(&minortype_) -
    reinterpret_cast<char*>(&majortype_) + sizeof(minortype_));
  // @@protoc_insertion_point(copy_constructor:atd.map.LocElement)
}

void LocElement::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&majortype_, 0, reinterpret_cast<char*>(&minortype_) -
    reinterpret_cast<char*>(&majortype_) + sizeof(minortype_));
}

LocElement::~LocElement() {
  // @@protoc_insertion_point(destructor:atd.map.LocElement)
  SharedDtor();
}

void LocElement::SharedDtor() {
}

void LocElement::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocElement& LocElement::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocElement* LocElement::New(::google::protobuf::Arena* arena) const {
  LocElement* n = new LocElement;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocElement::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.LocElement)
  onepoint_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    ::memset(&majortype_, 0, reinterpret_cast<char*>(&minortype_) -
      reinterpret_cast<char*>(&majortype_) + sizeof(minortype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocElement::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.LocElement)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 majortype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_majortype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &majortype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minortype = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_minortype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minortype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.common.Point2D onepoint = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onepoint()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.LocElement)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.LocElement)
  return false;
#undef DO_
}

void LocElement::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.LocElement)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 majortype = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->majortype(), output);
  }

  // optional int32 minortype = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->minortype(), output);
  }

  // repeated .atd.common.Point2D onepoint = 3;
  for (unsigned int i = 0, n = this->onepoint_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->onepoint(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.LocElement)
}

size_t LocElement::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.LocElement)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.common.Point2D onepoint = 3;
  {
    unsigned int count = this->onepoint_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onepoint(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 majortype = 1;
    if (has_majortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->majortype());
    }

    // optional int32 minortype = 2;
    if (has_minortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minortype());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocElement::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocElement*>(&from));
}

void LocElement::MergeFrom(const LocElement& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.LocElement)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onepoint_.MergeFrom(from.onepoint_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      majortype_ = from.majortype_;
    }
    if (cached_has_bits & 0x00000002u) {
      minortype_ = from.minortype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void LocElement::CopyFrom(const LocElement& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.LocElement)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocElement::IsInitialized() const {
  return true;
}

void LocElement::Swap(LocElement* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocElement::InternalSwap(LocElement* other) {
  onepoint_.InternalSwap(&other->onepoint_);
  std::swap(majortype_, other->majortype_);
  std::swap(minortype_, other->minortype_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LocElement::GetTypeName() const {
  return "atd.map.LocElement";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocElement

// optional int32 majortype = 1;
bool LocElement::has_majortype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocElement::set_has_majortype() {
  _has_bits_[0] |= 0x00000001u;
}
void LocElement::clear_has_majortype() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocElement::clear_majortype() {
  majortype_ = 0;
  clear_has_majortype();
}
::google::protobuf::int32 LocElement::majortype() const {
  // @@protoc_insertion_point(field_get:atd.map.LocElement.majortype)
  return majortype_;
}
void LocElement::set_majortype(::google::protobuf::int32 value) {
  set_has_majortype();
  majortype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LocElement.majortype)
}

// optional int32 minortype = 2;
bool LocElement::has_minortype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LocElement::set_has_minortype() {
  _has_bits_[0] |= 0x00000002u;
}
void LocElement::clear_has_minortype() {
  _has_bits_[0] &= ~0x00000002u;
}
void LocElement::clear_minortype() {
  minortype_ = 0;
  clear_has_minortype();
}
::google::protobuf::int32 LocElement::minortype() const {
  // @@protoc_insertion_point(field_get:atd.map.LocElement.minortype)
  return minortype_;
}
void LocElement::set_minortype(::google::protobuf::int32 value) {
  set_has_minortype();
  minortype_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LocElement.minortype)
}

// repeated .atd.common.Point2D onepoint = 3;
int LocElement::onepoint_size() const {
  return onepoint_.size();
}
void LocElement::clear_onepoint() {
  onepoint_.Clear();
}
const ::atd::common::Point2D& LocElement::onepoint(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.LocElement.onepoint)
  return onepoint_.Get(index);
}
::atd::common::Point2D* LocElement::mutable_onepoint(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.LocElement.onepoint)
  return onepoint_.Mutable(index);
}
::atd::common::Point2D* LocElement::add_onepoint() {
  // @@protoc_insertion_point(field_add:atd.map.LocElement.onepoint)
  return onepoint_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >*
LocElement::mutable_onepoint() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.LocElement.onepoint)
  return &onepoint_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::common::Point2D >&
LocElement::onepoint() const {
  // @@protoc_insertion_point(field_list:atd.map.LocElement.onepoint)
  return onepoint_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LocElements::kSubcodeFieldNumber;
const int LocElements::kOneelementFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LocElements::LocElements()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.LocElements)
}
LocElements::LocElements(const LocElements& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      oneelement_(from.oneelement_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  subcode_ = from.subcode_;
  // @@protoc_insertion_point(copy_constructor:atd.map.LocElements)
}

void LocElements::SharedCtor() {
  _cached_size_ = 0;
  subcode_ = 0;
}

LocElements::~LocElements() {
  // @@protoc_insertion_point(destructor:atd.map.LocElements)
  SharedDtor();
}

void LocElements::SharedDtor() {
}

void LocElements::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LocElements& LocElements::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

LocElements* LocElements::New(::google::protobuf::Arena* arena) const {
  LocElements* n = new LocElements;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LocElements::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.LocElements)
  oneelement_.Clear();
  subcode_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LocElements::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.LocElements)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 subcode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_subcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &subcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.map.LocElement oneelement = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_oneelement()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.LocElements)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.LocElements)
  return false;
#undef DO_
}

void LocElements::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.LocElements)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 subcode = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->subcode(), output);
  }

  // repeated .atd.map.LocElement oneelement = 2;
  for (unsigned int i = 0, n = this->oneelement_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->oneelement(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.LocElements)
}

size_t LocElements::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.LocElements)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.map.LocElement oneelement = 2;
  {
    unsigned int count = this->oneelement_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oneelement(i));
    }
  }

  // optional int32 subcode = 1;
  if (has_subcode()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->subcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LocElements::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LocElements*>(&from));
}

void LocElements::MergeFrom(const LocElements& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.LocElements)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  oneelement_.MergeFrom(from.oneelement_);
  if (from.has_subcode()) {
    set_subcode(from.subcode());
  }
}

void LocElements::CopyFrom(const LocElements& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.LocElements)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LocElements::IsInitialized() const {
  return true;
}

void LocElements::Swap(LocElements* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LocElements::InternalSwap(LocElements* other) {
  oneelement_.InternalSwap(&other->oneelement_);
  std::swap(subcode_, other->subcode_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LocElements::GetTypeName() const {
  return "atd.map.LocElements";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LocElements

// optional int32 subcode = 1;
bool LocElements::has_subcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LocElements::set_has_subcode() {
  _has_bits_[0] |= 0x00000001u;
}
void LocElements::clear_has_subcode() {
  _has_bits_[0] &= ~0x00000001u;
}
void LocElements::clear_subcode() {
  subcode_ = 0;
  clear_has_subcode();
}
::google::protobuf::int32 LocElements::subcode() const {
  // @@protoc_insertion_point(field_get:atd.map.LocElements.subcode)
  return subcode_;
}
void LocElements::set_subcode(::google::protobuf::int32 value) {
  set_has_subcode();
  subcode_ = value;
  // @@protoc_insertion_point(field_set:atd.map.LocElements.subcode)
}

// repeated .atd.map.LocElement oneelement = 2;
int LocElements::oneelement_size() const {
  return oneelement_.size();
}
void LocElements::clear_oneelement() {
  oneelement_.Clear();
}
const ::atd::map::LocElement& LocElements::oneelement(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.LocElements.oneelement)
  return oneelement_.Get(index);
}
::atd::map::LocElement* LocElements::mutable_oneelement(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.LocElements.oneelement)
  return oneelement_.Mutable(index);
}
::atd::map::LocElement* LocElements::add_oneelement() {
  // @@protoc_insertion_point(field_add:atd.map.LocElements.oneelement)
  return oneelement_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::LocElement >*
LocElements::mutable_oneelement() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.LocElements.oneelement)
  return &oneelement_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::LocElement >&
LocElements::oneelement() const {
  // @@protoc_insertion_point(field_list:atd.map.LocElements.oneelement)
  return oneelement_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngineLocMap::kHeaderFieldNumber;
const int EngineLocMap::kReservedmsgFieldNumber;
const int EngineLocMap::kPoseFieldNumber;
const int EngineLocMap::kElementsFieldNumber;
const int EngineLocMap::kMapWeightFieldNumber;
const int EngineLocMap::kMapFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngineLocMap::EngineLocMap()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.map.EngineLocMap)
}
EngineLocMap::EngineLocMap(const EngineLocMap& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_pose()) {
    pose_ = new ::atd::localization::Pose(*from.pose_);
  } else {
    pose_ = NULL;
  }
  if (from.has_map()) {
    map_ = new ::atd::localization::Pose(*from.map_);
  } else {
    map_ = NULL;
  }
  map_weight_ = from.map_weight_;
  // @@protoc_insertion_point(copy_constructor:atd.map.EngineLocMap)
}

void EngineLocMap::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&map_weight_) -
    reinterpret_cast<char*>(&header_) + sizeof(map_weight_));
}

EngineLocMap::~EngineLocMap() {
  // @@protoc_insertion_point(destructor:atd.map.EngineLocMap)
  SharedDtor();
}

void EngineLocMap::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete pose_;
  }
  if (this != internal_default_instance()) {
    delete map_;
  }
}

void EngineLocMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EngineLocMap& EngineLocMap::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fhdmap_2fenginelocmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

EngineLocMap* EngineLocMap::New(::google::protobuf::Arena* arena) const {
  EngineLocMap* n = new EngineLocMap;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EngineLocMap::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.map.EngineLocMap)
  elements_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_pose()) {
      GOOGLE_DCHECK(pose_ != NULL);
      pose_->::atd::localization::Pose::Clear();
    }
    if (has_map()) {
      GOOGLE_DCHECK(map_ != NULL);
      map_->::atd::localization::Pose::Clear();
    }
  }
  map_weight_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EngineLocMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.map.EngineLocMap)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose pose = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.map.LocElements elements = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double map_weight = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_map_weight();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &map_weight_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.localization.Pose map = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.map.EngineLocMap)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.map.EngineLocMap)
  return false;
#undef DO_
}

void EngineLocMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.map.EngineLocMap)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional .atd.localization.Pose pose = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->pose_, output);
  }

  // repeated .atd.map.LocElements elements = 4;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->elements(i), output);
  }

  // optional double map_weight = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->map_weight(), output);
  }

  // optional .atd.localization.Pose map = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->map_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.map.EngineLocMap)
}

size_t EngineLocMap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.map.EngineLocMap)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.map.LocElements elements = 4;
  {
    unsigned int count = this->elements_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->elements(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.localization.Pose pose = 3;
    if (has_pose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->pose_);
    }

    // optional .atd.localization.Pose map = 6;
    if (has_map()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->map_);
    }

    // optional double map_weight = 5;
    if (has_map_weight()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EngineLocMap::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EngineLocMap*>(&from));
}

void EngineLocMap::MergeFrom(const EngineLocMap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.map.EngineLocMap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_pose()->::atd::localization::Pose::MergeFrom(from.pose());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_map()->::atd::localization::Pose::MergeFrom(from.map());
    }
    if (cached_has_bits & 0x00000010u) {
      map_weight_ = from.map_weight_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EngineLocMap::CopyFrom(const EngineLocMap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.map.EngineLocMap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngineLocMap::IsInitialized() const {
  return true;
}

void EngineLocMap::Swap(EngineLocMap* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EngineLocMap::InternalSwap(EngineLocMap* other) {
  elements_.InternalSwap(&other->elements_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(pose_, other->pose_);
  std::swap(map_, other->map_);
  std::swap(map_weight_, other->map_weight_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EngineLocMap::GetTypeName() const {
  return "atd.map.EngineLocMap";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EngineLocMap

// optional .atd.common.Header header = 1;
bool EngineLocMap::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EngineLocMap::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void EngineLocMap::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void EngineLocMap::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& EngineLocMap::header() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* EngineLocMap::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.header)
  return header_;
}
::atd::common::Header* EngineLocMap::release_header() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void EngineLocMap::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool EngineLocMap::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EngineLocMap::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void EngineLocMap::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void EngineLocMap::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& EngineLocMap::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* EngineLocMap::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* EngineLocMap::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void EngineLocMap::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.reservedmsg)
}

// optional .atd.localization.Pose pose = 3;
bool EngineLocMap::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EngineLocMap::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
void EngineLocMap::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
void EngineLocMap::clear_pose() {
  if (pose_ != NULL) pose_->::atd::localization::Pose::Clear();
  clear_has_pose();
}
const ::atd::localization::Pose& EngineLocMap::pose() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.pose)
  return pose_ != NULL ? *pose_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* EngineLocMap::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) {
    pose_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.pose)
  return pose_;
}
::atd::localization::Pose* EngineLocMap::release_pose() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.pose)
  clear_has_pose();
  ::atd::localization::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
void EngineLocMap::set_allocated_pose(::atd::localization::Pose* pose) {
  delete pose_;
  pose_ = pose;
  if (pose) {
    set_has_pose();
  } else {
    clear_has_pose();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.pose)
}

// repeated .atd.map.LocElements elements = 4;
int EngineLocMap::elements_size() const {
  return elements_.size();
}
void EngineLocMap::clear_elements() {
  elements_.Clear();
}
const ::atd::map::LocElements& EngineLocMap::elements(int index) const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.elements)
  return elements_.Get(index);
}
::atd::map::LocElements* EngineLocMap::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.elements)
  return elements_.Mutable(index);
}
::atd::map::LocElements* EngineLocMap::add_elements() {
  // @@protoc_insertion_point(field_add:atd.map.EngineLocMap.elements)
  return elements_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::map::LocElements >*
EngineLocMap::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:atd.map.EngineLocMap.elements)
  return &elements_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::map::LocElements >&
EngineLocMap::elements() const {
  // @@protoc_insertion_point(field_list:atd.map.EngineLocMap.elements)
  return elements_;
}

// optional double map_weight = 5;
bool EngineLocMap::has_map_weight() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void EngineLocMap::set_has_map_weight() {
  _has_bits_[0] |= 0x00000010u;
}
void EngineLocMap::clear_has_map_weight() {
  _has_bits_[0] &= ~0x00000010u;
}
void EngineLocMap::clear_map_weight() {
  map_weight_ = 0;
  clear_has_map_weight();
}
double EngineLocMap::map_weight() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.map_weight)
  return map_weight_;
}
void EngineLocMap::set_map_weight(double value) {
  set_has_map_weight();
  map_weight_ = value;
  // @@protoc_insertion_point(field_set:atd.map.EngineLocMap.map_weight)
}

// optional .atd.localization.Pose map = 6;
bool EngineLocMap::has_map() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void EngineLocMap::set_has_map() {
  _has_bits_[0] |= 0x00000008u;
}
void EngineLocMap::clear_has_map() {
  _has_bits_[0] &= ~0x00000008u;
}
void EngineLocMap::clear_map() {
  if (map_ != NULL) map_->::atd::localization::Pose::Clear();
  clear_has_map();
}
const ::atd::localization::Pose& EngineLocMap::map() const {
  // @@protoc_insertion_point(field_get:atd.map.EngineLocMap.map)
  return map_ != NULL ? *map_
                         : *::atd::localization::Pose::internal_default_instance();
}
::atd::localization::Pose* EngineLocMap::mutable_map() {
  set_has_map();
  if (map_ == NULL) {
    map_ = new ::atd::localization::Pose;
  }
  // @@protoc_insertion_point(field_mutable:atd.map.EngineLocMap.map)
  return map_;
}
::atd::localization::Pose* EngineLocMap::release_map() {
  // @@protoc_insertion_point(field_release:atd.map.EngineLocMap.map)
  clear_has_map();
  ::atd::localization::Pose* temp = map_;
  map_ = NULL;
  return temp;
}
void EngineLocMap::set_allocated_map(::atd::localization::Pose* map) {
  delete map_;
  map_ = map;
  if (map) {
    set_has_map();
  } else {
    clear_has_map();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.map.EngineLocMap.map)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace map
}  // namespace atd

// @@protoc_insertion_point(global_scope)
