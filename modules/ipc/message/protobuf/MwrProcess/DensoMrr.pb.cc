// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/MwrProcess/DensoMrr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/MwrProcess/DensoMrr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace mwrprocess {
class Dt_Rrecord_MRRP0ObjDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Rrecord_MRRP0Obj> {
} _Dt_Rrecord_MRRP0Obj_default_instance_;
class Dt_Rrecord_MRRP1ObjDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Rrecord_MRRP1Obj> {
} _Dt_Rrecord_MRRP1Obj_default_instance_;
class Dt_Rrecord_MRRP2ObjDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Rrecord_MRRP2Obj> {
} _Dt_Rrecord_MRRP2Obj_default_instance_;
class Dt_Rrecord_MRRP3ObjDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Dt_Rrecord_MRRP3Obj> {
} _Dt_Rrecord_MRRP3Obj_default_instance_;
class MidRangeObjDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MidRangeObj> {
} _MidRangeObj_default_instance_;
class LongRangeObjDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LongRangeObj> {
} _LongRangeObj_default_instance_;
class FrontDensoMRRObjsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FrontDensoMRRObjs> {
} _FrontDensoMRRObjs_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Dt_Rrecord_MRRP0Obj_default_instance_.Shutdown();
  _Dt_Rrecord_MRRP1Obj_default_instance_.Shutdown();
  _Dt_Rrecord_MRRP2Obj_default_instance_.Shutdown();
  _Dt_Rrecord_MRRP3Obj_default_instance_.Shutdown();
  _MidRangeObj_default_instance_.Shutdown();
  _LongRangeObj_default_instance_.Shutdown();
  _FrontDensoMRRObjs_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::InitDefaults();
  _Dt_Rrecord_MRRP0Obj_default_instance_.DefaultConstruct();
  _Dt_Rrecord_MRRP1Obj_default_instance_.DefaultConstruct();
  _Dt_Rrecord_MRRP2Obj_default_instance_.DefaultConstruct();
  _Dt_Rrecord_MRRP3Obj_default_instance_.DefaultConstruct();
  _MidRangeObj_default_instance_.DefaultConstruct();
  _LongRangeObj_default_instance_.DefaultConstruct();
  _FrontDensoMRRObjs_default_instance_.DefaultConstruct();
  _MidRangeObj_default_instance_.get_mutable()->part0_ = const_cast< ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj*>(
      ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::internal_default_instance());
  _MidRangeObj_default_instance_.get_mutable()->part1_ = const_cast< ::atd::mwrprocess::Dt_Rrecord_MRRP1Obj*>(
      ::atd::mwrprocess::Dt_Rrecord_MRRP1Obj::internal_default_instance());
  _LongRangeObj_default_instance_.get_mutable()->part0_ = const_cast< ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj*>(
      ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::internal_default_instance());
  _LongRangeObj_default_instance_.get_mutable()->part2_ = const_cast< ::atd::mwrprocess::Dt_Rrecord_MRRP2Obj*>(
      ::atd::mwrprocess::Dt_Rrecord_MRRP2Obj::internal_default_instance());
  _LongRangeObj_default_instance_.get_mutable()->part3_ = const_cast< ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj*>(
      ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj::internal_default_instance());
  _FrontDensoMRRObjs_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _FrontDensoMRRObjs_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::atd::localization::protobuf_modules_2fipc_2fmessage_2fprotobuf_2flocalization_2fpose_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto

bool Dt_Rrecord_MRRP0Obj_Status_FLag_1_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Rrecord_MRRP0Obj_Status_FLag_1 Dt_Rrecord_MRRP0Obj::null;
const Dt_Rrecord_MRRP0Obj_Status_FLag_1 Dt_Rrecord_MRRP0Obj::TemporaryFlat;
const Dt_Rrecord_MRRP0Obj_Status_FLag_1 Dt_Rrecord_MRRP0Obj::TrackingTargetIsMoving;
const Dt_Rrecord_MRRP0Obj_Status_FLag_1 Dt_Rrecord_MRRP0Obj::TrackingTargetIsMovable;
const Dt_Rrecord_MRRP0Obj_Status_FLag_1 Dt_Rrecord_MRRP0Obj::TargetIsNew;
const Dt_Rrecord_MRRP0Obj_Status_FLag_1 Dt_Rrecord_MRRP0Obj::Status_FLag_1_MIN;
const Dt_Rrecord_MRRP0Obj_Status_FLag_1 Dt_Rrecord_MRRP0Obj::Status_FLag_1_MAX;
const int Dt_Rrecord_MRRP0Obj::Status_FLag_1_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Rrecord_MRRP0Obj_Status_FLag_2_IsValid(int value) {
  switch (value) {
    case 1:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Rrecord_MRRP0Obj_Status_FLag_2 Dt_Rrecord_MRRP0Obj::NormalThresholdflat;
const Dt_Rrecord_MRRP0Obj_Status_FLag_2 Dt_Rrecord_MRRP0Obj::TargetIsExtrapolated;
const Dt_Rrecord_MRRP0Obj_Status_FLag_2 Dt_Rrecord_MRRP0Obj::Status_FLag_2_MIN;
const Dt_Rrecord_MRRP0Obj_Status_FLag_2 Dt_Rrecord_MRRP0Obj::Status_FLag_2_MAX;
const int Dt_Rrecord_MRRP0Obj::Status_FLag_2_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Rrecord_MRRP1Obj_Status_Flag_5_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Rrecord_MRRP1Obj_Status_Flag_5 Dt_Rrecord_MRRP1Obj::Low_threshold_flag;
const Dt_Rrecord_MRRP1Obj_Status_Flag_5 Dt_Rrecord_MRRP1Obj::Status_Flag_5_MIN;
const Dt_Rrecord_MRRP1Obj_Status_Flag_5 Dt_Rrecord_MRRP1Obj::Status_Flag_5_MAX;
const int Dt_Rrecord_MRRP1Obj::Status_Flag_5_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Rrecord_MRRP3Obj_Status_Flag_3_IsValid(int value) {
  switch (value) {
    case 2:
    case 4:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Rrecord_MRRP3Obj_Status_Flag_3 Dt_Rrecord_MRRP3Obj::lowThreshExtrapolation;
const Dt_Rrecord_MRRP3Obj_Status_Flag_3 Dt_Rrecord_MRRP3Obj::lowThreshholdFlag;
const Dt_Rrecord_MRRP3Obj_Status_Flag_3 Dt_Rrecord_MRRP3Obj::SignboardFlag;
const Dt_Rrecord_MRRP3Obj_Status_Flag_3 Dt_Rrecord_MRRP3Obj::ManholeFlag;
const Dt_Rrecord_MRRP3Obj_Status_Flag_3 Dt_Rrecord_MRRP3Obj::Status_Flag_3_MIN;
const Dt_Rrecord_MRRP3Obj_Status_Flag_3 Dt_Rrecord_MRRP3Obj::Status_Flag_3_MAX;
const int Dt_Rrecord_MRRP3Obj::Status_Flag_3_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Dt_Rrecord_MRRP3Obj_Radar_Fusion_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Dt_Rrecord_MRRP3Obj_Radar_Fusion Dt_Rrecord_MRRP3Obj::There_is_no_Obj;
const Dt_Rrecord_MRRP3Obj_Radar_Fusion Dt_Rrecord_MRRP3Obj::Long_MidFusion;
const Dt_Rrecord_MRRP3Obj_Radar_Fusion Dt_Rrecord_MRRP3Obj::Long;
const Dt_Rrecord_MRRP3Obj_Radar_Fusion Dt_Rrecord_MRRP3Obj::Mid;
const Dt_Rrecord_MRRP3Obj_Radar_Fusion Dt_Rrecord_MRRP3Obj::Radar_Fusion_MIN;
const Dt_Rrecord_MRRP3Obj_Radar_Fusion Dt_Rrecord_MRRP3Obj::Radar_Fusion_MAX;
const int Dt_Rrecord_MRRP3Obj::Radar_Fusion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Rrecord_MRRP0Obj::kSynchronizeCounterFieldNumber;
const int Dt_Rrecord_MRRP0Obj::kDistanceFieldNumber;
const int Dt_Rrecord_MRRP0Obj::kStatusFlag1FieldNumber;
const int Dt_Rrecord_MRRP0Obj::kLateralLocationFieldNumber;
const int Dt_Rrecord_MRRP0Obj::kStatusFlag2FieldNumber;
const int Dt_Rrecord_MRRP0Obj::kRelativeSpeedFieldNumber;
const int Dt_Rrecord_MRRP0Obj::kIsUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Rrecord_MRRP0Obj::Dt_Rrecord_MRRP0Obj()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
}
Dt_Rrecord_MRRP0Obj::Dt_Rrecord_MRRP0Obj(const Dt_Rrecord_MRRP0Obj& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&synchronize_counter_, &from.synchronize_counter_,
    reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
  // @@protoc_insertion_point(copy_constructor:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
}

void Dt_Rrecord_MRRP0Obj::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
}

Dt_Rrecord_MRRP0Obj::~Dt_Rrecord_MRRP0Obj() {
  // @@protoc_insertion_point(destructor:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  SharedDtor();
}

void Dt_Rrecord_MRRP0Obj::SharedDtor() {
}

void Dt_Rrecord_MRRP0Obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Rrecord_MRRP0Obj& Dt_Rrecord_MRRP0Obj::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Rrecord_MRRP0Obj* Dt_Rrecord_MRRP0Obj::New(::google::protobuf::Arena* arena) const {
  Dt_Rrecord_MRRP0Obj* n = new Dt_Rrecord_MRRP0Obj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Rrecord_MRRP0Obj::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&isupdated_) -
      reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Rrecord_MRRP0Obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 synchronize_counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_synchronize_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synchronize_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_flag_1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_status_flag_1();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_flag_1_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lateral_location = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_lateral_location();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateral_location_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_flag_2 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_status_flag_2();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_flag_2_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float relative_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_relative_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isUpdated = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_isupdated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isupdated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  return false;
#undef DO_
}

void Dt_Rrecord_MRRP0Obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 synchronize_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->synchronize_counter(), output);
  }

  // optional float distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->distance(), output);
  }

  // optional int32 status_flag_1 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status_flag_1(), output);
  }

  // optional float lateral_location = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->lateral_location(), output);
  }

  // optional int32 status_flag_2 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status_flag_2(), output);
  }

  // optional float relative_speed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->relative_speed(), output);
  }

  // optional bool isUpdated = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isupdated(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
}

size_t Dt_Rrecord_MRRP0Obj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 synchronize_counter = 1;
    if (has_synchronize_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->synchronize_counter());
    }

    // optional float distance = 2;
    if (has_distance()) {
      total_size += 1 + 4;
    }

    // optional int32 status_flag_1 = 3;
    if (has_status_flag_1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_flag_1());
    }

    // optional float lateral_location = 4;
    if (has_lateral_location()) {
      total_size += 1 + 4;
    }

    // optional int32 status_flag_2 = 5;
    if (has_status_flag_2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_flag_2());
    }

    // optional float relative_speed = 6;
    if (has_relative_speed()) {
      total_size += 1 + 4;
    }

    // optional bool isUpdated = 7;
    if (has_isupdated()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Rrecord_MRRP0Obj::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Rrecord_MRRP0Obj*>(&from));
}

void Dt_Rrecord_MRRP0Obj::MergeFrom(const Dt_Rrecord_MRRP0Obj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      synchronize_counter_ = from.synchronize_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      distance_ = from.distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_flag_1_ = from.status_flag_1_;
    }
    if (cached_has_bits & 0x00000008u) {
      lateral_location_ = from.lateral_location_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_flag_2_ = from.status_flag_2_;
    }
    if (cached_has_bits & 0x00000020u) {
      relative_speed_ = from.relative_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      isupdated_ = from.isupdated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dt_Rrecord_MRRP0Obj::CopyFrom(const Dt_Rrecord_MRRP0Obj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.mwrprocess.Dt_Rrecord_MRRP0Obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Rrecord_MRRP0Obj::IsInitialized() const {
  return true;
}

void Dt_Rrecord_MRRP0Obj::Swap(Dt_Rrecord_MRRP0Obj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Rrecord_MRRP0Obj::InternalSwap(Dt_Rrecord_MRRP0Obj* other) {
  std::swap(synchronize_counter_, other->synchronize_counter_);
  std::swap(distance_, other->distance_);
  std::swap(status_flag_1_, other->status_flag_1_);
  std::swap(lateral_location_, other->lateral_location_);
  std::swap(status_flag_2_, other->status_flag_2_);
  std::swap(relative_speed_, other->relative_speed_);
  std::swap(isupdated_, other->isupdated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Rrecord_MRRP0Obj::GetTypeName() const {
  return "atd.mwrprocess.Dt_Rrecord_MRRP0Obj";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Rrecord_MRRP0Obj

// optional int32 synchronize_counter = 1;
bool Dt_Rrecord_MRRP0Obj::has_synchronize_counter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Rrecord_MRRP0Obj::set_has_synchronize_counter() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Rrecord_MRRP0Obj::clear_has_synchronize_counter() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Rrecord_MRRP0Obj::clear_synchronize_counter() {
  synchronize_counter_ = 0;
  clear_has_synchronize_counter();
}
::google::protobuf::int32 Dt_Rrecord_MRRP0Obj::synchronize_counter() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.synchronize_counter)
  return synchronize_counter_;
}
void Dt_Rrecord_MRRP0Obj::set_synchronize_counter(::google::protobuf::int32 value) {
  set_has_synchronize_counter();
  synchronize_counter_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.synchronize_counter)
}

// optional float distance = 2;
bool Dt_Rrecord_MRRP0Obj::has_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Rrecord_MRRP0Obj::set_has_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Rrecord_MRRP0Obj::clear_has_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Rrecord_MRRP0Obj::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
float Dt_Rrecord_MRRP0Obj::distance() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.distance)
  return distance_;
}
void Dt_Rrecord_MRRP0Obj::set_distance(float value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.distance)
}

// optional int32 status_flag_1 = 3;
bool Dt_Rrecord_MRRP0Obj::has_status_flag_1() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Rrecord_MRRP0Obj::set_has_status_flag_1() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Rrecord_MRRP0Obj::clear_has_status_flag_1() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Rrecord_MRRP0Obj::clear_status_flag_1() {
  status_flag_1_ = 0;
  clear_has_status_flag_1();
}
::google::protobuf::int32 Dt_Rrecord_MRRP0Obj::status_flag_1() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.status_flag_1)
  return status_flag_1_;
}
void Dt_Rrecord_MRRP0Obj::set_status_flag_1(::google::protobuf::int32 value) {
  set_has_status_flag_1();
  status_flag_1_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.status_flag_1)
}

// optional float lateral_location = 4;
bool Dt_Rrecord_MRRP0Obj::has_lateral_location() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Rrecord_MRRP0Obj::set_has_lateral_location() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Rrecord_MRRP0Obj::clear_has_lateral_location() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Rrecord_MRRP0Obj::clear_lateral_location() {
  lateral_location_ = 0;
  clear_has_lateral_location();
}
float Dt_Rrecord_MRRP0Obj::lateral_location() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.lateral_location)
  return lateral_location_;
}
void Dt_Rrecord_MRRP0Obj::set_lateral_location(float value) {
  set_has_lateral_location();
  lateral_location_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.lateral_location)
}

// optional int32 status_flag_2 = 5;
bool Dt_Rrecord_MRRP0Obj::has_status_flag_2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Rrecord_MRRP0Obj::set_has_status_flag_2() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Rrecord_MRRP0Obj::clear_has_status_flag_2() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Rrecord_MRRP0Obj::clear_status_flag_2() {
  status_flag_2_ = 0;
  clear_has_status_flag_2();
}
::google::protobuf::int32 Dt_Rrecord_MRRP0Obj::status_flag_2() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.status_flag_2)
  return status_flag_2_;
}
void Dt_Rrecord_MRRP0Obj::set_status_flag_2(::google::protobuf::int32 value) {
  set_has_status_flag_2();
  status_flag_2_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.status_flag_2)
}

// optional float relative_speed = 6;
bool Dt_Rrecord_MRRP0Obj::has_relative_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Rrecord_MRRP0Obj::set_has_relative_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Rrecord_MRRP0Obj::clear_has_relative_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Rrecord_MRRP0Obj::clear_relative_speed() {
  relative_speed_ = 0;
  clear_has_relative_speed();
}
float Dt_Rrecord_MRRP0Obj::relative_speed() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.relative_speed)
  return relative_speed_;
}
void Dt_Rrecord_MRRP0Obj::set_relative_speed(float value) {
  set_has_relative_speed();
  relative_speed_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.relative_speed)
}

// optional bool isUpdated = 7;
bool Dt_Rrecord_MRRP0Obj::has_isupdated() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Rrecord_MRRP0Obj::set_has_isupdated() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Rrecord_MRRP0Obj::clear_has_isupdated() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Rrecord_MRRP0Obj::clear_isupdated() {
  isupdated_ = false;
  clear_has_isupdated();
}
bool Dt_Rrecord_MRRP0Obj::isupdated() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.isUpdated)
  return isupdated_;
}
void Dt_Rrecord_MRRP0Obj::set_isupdated(bool value) {
  set_has_isupdated();
  isupdated_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP0Obj.isUpdated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Rrecord_MRRP1Obj::kSynchronizeCounterFieldNumber;
const int Dt_Rrecord_MRRP1Obj::kRelativeAccelerationFieldNumber;
const int Dt_Rrecord_MRRP1Obj::kTargetProbabilityFieldNumber;
const int Dt_Rrecord_MRRP1Obj::kStatusFlag5FieldNumber;
const int Dt_Rrecord_MRRP1Obj::kPedestrianLikelihoodFieldNumber;
const int Dt_Rrecord_MRRP1Obj::kLateralSpeedFieldNumber;
const int Dt_Rrecord_MRRP1Obj::kIsUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Rrecord_MRRP1Obj::Dt_Rrecord_MRRP1Obj()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
}
Dt_Rrecord_MRRP1Obj::Dt_Rrecord_MRRP1Obj(const Dt_Rrecord_MRRP1Obj& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&synchronize_counter_, &from.synchronize_counter_,
    reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
  // @@protoc_insertion_point(copy_constructor:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
}

void Dt_Rrecord_MRRP1Obj::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
}

Dt_Rrecord_MRRP1Obj::~Dt_Rrecord_MRRP1Obj() {
  // @@protoc_insertion_point(destructor:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  SharedDtor();
}

void Dt_Rrecord_MRRP1Obj::SharedDtor() {
}

void Dt_Rrecord_MRRP1Obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Rrecord_MRRP1Obj& Dt_Rrecord_MRRP1Obj::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Rrecord_MRRP1Obj* Dt_Rrecord_MRRP1Obj::New(::google::protobuf::Arena* arena) const {
  Dt_Rrecord_MRRP1Obj* n = new Dt_Rrecord_MRRP1Obj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Rrecord_MRRP1Obj::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  if (_has_bits_[0 / 32] & 127u) {
    ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&isupdated_) -
      reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Rrecord_MRRP1Obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 synchronize_counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_synchronize_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synchronize_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float relative_acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_relative_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_flag_5 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status_flag_5();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_flag_5_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 pedestrian_likelihood = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_pedestrian_likelihood();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pedestrian_likelihood_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float lateral_speed = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_lateral_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &lateral_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isUpdated = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_isupdated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isupdated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  return false;
#undef DO_
}

void Dt_Rrecord_MRRP1Obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 synchronize_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->synchronize_counter(), output);
  }

  // optional float relative_acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relative_acceleration(), output);
  }

  // optional int32 target_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_probability(), output);
  }

  // optional int32 status_flag_5 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status_flag_5(), output);
  }

  // optional int32 pedestrian_likelihood = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pedestrian_likelihood(), output);
  }

  // optional float lateral_speed = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->lateral_speed(), output);
  }

  // optional bool isUpdated = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->isupdated(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
}

size_t Dt_Rrecord_MRRP1Obj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 127u) {
    // optional int32 synchronize_counter = 1;
    if (has_synchronize_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->synchronize_counter());
    }

    // optional float relative_acceleration = 2;
    if (has_relative_acceleration()) {
      total_size += 1 + 4;
    }

    // optional int32 target_probability = 3;
    if (has_target_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_probability());
    }

    // optional int32 status_flag_5 = 4;
    if (has_status_flag_5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_flag_5());
    }

    // optional int32 pedestrian_likelihood = 5;
    if (has_pedestrian_likelihood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pedestrian_likelihood());
    }

    // optional float lateral_speed = 6;
    if (has_lateral_speed()) {
      total_size += 1 + 4;
    }

    // optional bool isUpdated = 7;
    if (has_isupdated()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Rrecord_MRRP1Obj::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Rrecord_MRRP1Obj*>(&from));
}

void Dt_Rrecord_MRRP1Obj::MergeFrom(const Dt_Rrecord_MRRP1Obj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      synchronize_counter_ = from.synchronize_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      relative_acceleration_ = from.relative_acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_probability_ = from.target_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_flag_5_ = from.status_flag_5_;
    }
    if (cached_has_bits & 0x00000010u) {
      pedestrian_likelihood_ = from.pedestrian_likelihood_;
    }
    if (cached_has_bits & 0x00000020u) {
      lateral_speed_ = from.lateral_speed_;
    }
    if (cached_has_bits & 0x00000040u) {
      isupdated_ = from.isupdated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dt_Rrecord_MRRP1Obj::CopyFrom(const Dt_Rrecord_MRRP1Obj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.mwrprocess.Dt_Rrecord_MRRP1Obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Rrecord_MRRP1Obj::IsInitialized() const {
  return true;
}

void Dt_Rrecord_MRRP1Obj::Swap(Dt_Rrecord_MRRP1Obj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Rrecord_MRRP1Obj::InternalSwap(Dt_Rrecord_MRRP1Obj* other) {
  std::swap(synchronize_counter_, other->synchronize_counter_);
  std::swap(relative_acceleration_, other->relative_acceleration_);
  std::swap(target_probability_, other->target_probability_);
  std::swap(status_flag_5_, other->status_flag_5_);
  std::swap(pedestrian_likelihood_, other->pedestrian_likelihood_);
  std::swap(lateral_speed_, other->lateral_speed_);
  std::swap(isupdated_, other->isupdated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Rrecord_MRRP1Obj::GetTypeName() const {
  return "atd.mwrprocess.Dt_Rrecord_MRRP1Obj";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Rrecord_MRRP1Obj

// optional int32 synchronize_counter = 1;
bool Dt_Rrecord_MRRP1Obj::has_synchronize_counter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Rrecord_MRRP1Obj::set_has_synchronize_counter() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Rrecord_MRRP1Obj::clear_has_synchronize_counter() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Rrecord_MRRP1Obj::clear_synchronize_counter() {
  synchronize_counter_ = 0;
  clear_has_synchronize_counter();
}
::google::protobuf::int32 Dt_Rrecord_MRRP1Obj::synchronize_counter() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.synchronize_counter)
  return synchronize_counter_;
}
void Dt_Rrecord_MRRP1Obj::set_synchronize_counter(::google::protobuf::int32 value) {
  set_has_synchronize_counter();
  synchronize_counter_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.synchronize_counter)
}

// optional float relative_acceleration = 2;
bool Dt_Rrecord_MRRP1Obj::has_relative_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Rrecord_MRRP1Obj::set_has_relative_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Rrecord_MRRP1Obj::clear_has_relative_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Rrecord_MRRP1Obj::clear_relative_acceleration() {
  relative_acceleration_ = 0;
  clear_has_relative_acceleration();
}
float Dt_Rrecord_MRRP1Obj::relative_acceleration() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.relative_acceleration)
  return relative_acceleration_;
}
void Dt_Rrecord_MRRP1Obj::set_relative_acceleration(float value) {
  set_has_relative_acceleration();
  relative_acceleration_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.relative_acceleration)
}

// optional int32 target_probability = 3;
bool Dt_Rrecord_MRRP1Obj::has_target_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Rrecord_MRRP1Obj::set_has_target_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Rrecord_MRRP1Obj::clear_has_target_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Rrecord_MRRP1Obj::clear_target_probability() {
  target_probability_ = 0;
  clear_has_target_probability();
}
::google::protobuf::int32 Dt_Rrecord_MRRP1Obj::target_probability() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.target_probability)
  return target_probability_;
}
void Dt_Rrecord_MRRP1Obj::set_target_probability(::google::protobuf::int32 value) {
  set_has_target_probability();
  target_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.target_probability)
}

// optional int32 status_flag_5 = 4;
bool Dt_Rrecord_MRRP1Obj::has_status_flag_5() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Rrecord_MRRP1Obj::set_has_status_flag_5() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Rrecord_MRRP1Obj::clear_has_status_flag_5() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Rrecord_MRRP1Obj::clear_status_flag_5() {
  status_flag_5_ = 0;
  clear_has_status_flag_5();
}
::google::protobuf::int32 Dt_Rrecord_MRRP1Obj::status_flag_5() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.status_flag_5)
  return status_flag_5_;
}
void Dt_Rrecord_MRRP1Obj::set_status_flag_5(::google::protobuf::int32 value) {
  set_has_status_flag_5();
  status_flag_5_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.status_flag_5)
}

// optional int32 pedestrian_likelihood = 5;
bool Dt_Rrecord_MRRP1Obj::has_pedestrian_likelihood() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Rrecord_MRRP1Obj::set_has_pedestrian_likelihood() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Rrecord_MRRP1Obj::clear_has_pedestrian_likelihood() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Rrecord_MRRP1Obj::clear_pedestrian_likelihood() {
  pedestrian_likelihood_ = 0;
  clear_has_pedestrian_likelihood();
}
::google::protobuf::int32 Dt_Rrecord_MRRP1Obj::pedestrian_likelihood() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.pedestrian_likelihood)
  return pedestrian_likelihood_;
}
void Dt_Rrecord_MRRP1Obj::set_pedestrian_likelihood(::google::protobuf::int32 value) {
  set_has_pedestrian_likelihood();
  pedestrian_likelihood_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.pedestrian_likelihood)
}

// optional float lateral_speed = 6;
bool Dt_Rrecord_MRRP1Obj::has_lateral_speed() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Rrecord_MRRP1Obj::set_has_lateral_speed() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Rrecord_MRRP1Obj::clear_has_lateral_speed() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Rrecord_MRRP1Obj::clear_lateral_speed() {
  lateral_speed_ = 0;
  clear_has_lateral_speed();
}
float Dt_Rrecord_MRRP1Obj::lateral_speed() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.lateral_speed)
  return lateral_speed_;
}
void Dt_Rrecord_MRRP1Obj::set_lateral_speed(float value) {
  set_has_lateral_speed();
  lateral_speed_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.lateral_speed)
}

// optional bool isUpdated = 7;
bool Dt_Rrecord_MRRP1Obj::has_isupdated() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Rrecord_MRRP1Obj::set_has_isupdated() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Rrecord_MRRP1Obj::clear_has_isupdated() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Rrecord_MRRP1Obj::clear_isupdated() {
  isupdated_ = false;
  clear_has_isupdated();
}
bool Dt_Rrecord_MRRP1Obj::isupdated() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.isUpdated)
  return isupdated_;
}
void Dt_Rrecord_MRRP1Obj::set_isupdated(bool value) {
  set_has_isupdated();
  isupdated_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP1Obj.isUpdated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Rrecord_MRRP2Obj::kSynchronizeCounterFieldNumber;
const int Dt_Rrecord_MRRP2Obj::kImmediateDistanceFieldNumber;
const int Dt_Rrecord_MRRP2Obj::kImmediateLateralLoFieldNumber;
const int Dt_Rrecord_MRRP2Obj::kIsUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Rrecord_MRRP2Obj::Dt_Rrecord_MRRP2Obj()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
}
Dt_Rrecord_MRRP2Obj::Dt_Rrecord_MRRP2Obj(const Dt_Rrecord_MRRP2Obj& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&synchronize_counter_, &from.synchronize_counter_,
    reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
  // @@protoc_insertion_point(copy_constructor:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
}

void Dt_Rrecord_MRRP2Obj::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
}

Dt_Rrecord_MRRP2Obj::~Dt_Rrecord_MRRP2Obj() {
  // @@protoc_insertion_point(destructor:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  SharedDtor();
}

void Dt_Rrecord_MRRP2Obj::SharedDtor() {
}

void Dt_Rrecord_MRRP2Obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Rrecord_MRRP2Obj& Dt_Rrecord_MRRP2Obj::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Rrecord_MRRP2Obj* Dt_Rrecord_MRRP2Obj::New(::google::protobuf::Arena* arena) const {
  Dt_Rrecord_MRRP2Obj* n = new Dt_Rrecord_MRRP2Obj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Rrecord_MRRP2Obj::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&isupdated_) -
      reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Rrecord_MRRP2Obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 synchronize_counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_synchronize_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synchronize_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float immediate_distance = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_immediate_distance();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &immediate_distance_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float immediate_lateral_lo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_immediate_lateral_lo();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &immediate_lateral_lo_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isUpdated = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_isupdated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isupdated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  return false;
#undef DO_
}

void Dt_Rrecord_MRRP2Obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 synchronize_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->synchronize_counter(), output);
  }

  // optional float immediate_distance = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->immediate_distance(), output);
  }

  // optional float immediate_lateral_lo = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->immediate_lateral_lo(), output);
  }

  // optional bool isUpdated = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isupdated(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
}

size_t Dt_Rrecord_MRRP2Obj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional int32 synchronize_counter = 1;
    if (has_synchronize_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->synchronize_counter());
    }

    // optional float immediate_distance = 2;
    if (has_immediate_distance()) {
      total_size += 1 + 4;
    }

    // optional float immediate_lateral_lo = 3;
    if (has_immediate_lateral_lo()) {
      total_size += 1 + 4;
    }

    // optional bool isUpdated = 4;
    if (has_isupdated()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Rrecord_MRRP2Obj::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Rrecord_MRRP2Obj*>(&from));
}

void Dt_Rrecord_MRRP2Obj::MergeFrom(const Dt_Rrecord_MRRP2Obj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      synchronize_counter_ = from.synchronize_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      immediate_distance_ = from.immediate_distance_;
    }
    if (cached_has_bits & 0x00000004u) {
      immediate_lateral_lo_ = from.immediate_lateral_lo_;
    }
    if (cached_has_bits & 0x00000008u) {
      isupdated_ = from.isupdated_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Dt_Rrecord_MRRP2Obj::CopyFrom(const Dt_Rrecord_MRRP2Obj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.mwrprocess.Dt_Rrecord_MRRP2Obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Rrecord_MRRP2Obj::IsInitialized() const {
  return true;
}

void Dt_Rrecord_MRRP2Obj::Swap(Dt_Rrecord_MRRP2Obj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Rrecord_MRRP2Obj::InternalSwap(Dt_Rrecord_MRRP2Obj* other) {
  std::swap(synchronize_counter_, other->synchronize_counter_);
  std::swap(immediate_distance_, other->immediate_distance_);
  std::swap(immediate_lateral_lo_, other->immediate_lateral_lo_);
  std::swap(isupdated_, other->isupdated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Rrecord_MRRP2Obj::GetTypeName() const {
  return "atd.mwrprocess.Dt_Rrecord_MRRP2Obj";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Rrecord_MRRP2Obj

// optional int32 synchronize_counter = 1;
bool Dt_Rrecord_MRRP2Obj::has_synchronize_counter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Rrecord_MRRP2Obj::set_has_synchronize_counter() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Rrecord_MRRP2Obj::clear_has_synchronize_counter() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Rrecord_MRRP2Obj::clear_synchronize_counter() {
  synchronize_counter_ = 0;
  clear_has_synchronize_counter();
}
::google::protobuf::int32 Dt_Rrecord_MRRP2Obj::synchronize_counter() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.synchronize_counter)
  return synchronize_counter_;
}
void Dt_Rrecord_MRRP2Obj::set_synchronize_counter(::google::protobuf::int32 value) {
  set_has_synchronize_counter();
  synchronize_counter_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.synchronize_counter)
}

// optional float immediate_distance = 2;
bool Dt_Rrecord_MRRP2Obj::has_immediate_distance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Rrecord_MRRP2Obj::set_has_immediate_distance() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Rrecord_MRRP2Obj::clear_has_immediate_distance() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Rrecord_MRRP2Obj::clear_immediate_distance() {
  immediate_distance_ = 0;
  clear_has_immediate_distance();
}
float Dt_Rrecord_MRRP2Obj::immediate_distance() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.immediate_distance)
  return immediate_distance_;
}
void Dt_Rrecord_MRRP2Obj::set_immediate_distance(float value) {
  set_has_immediate_distance();
  immediate_distance_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.immediate_distance)
}

// optional float immediate_lateral_lo = 3;
bool Dt_Rrecord_MRRP2Obj::has_immediate_lateral_lo() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Rrecord_MRRP2Obj::set_has_immediate_lateral_lo() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Rrecord_MRRP2Obj::clear_has_immediate_lateral_lo() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Rrecord_MRRP2Obj::clear_immediate_lateral_lo() {
  immediate_lateral_lo_ = 0;
  clear_has_immediate_lateral_lo();
}
float Dt_Rrecord_MRRP2Obj::immediate_lateral_lo() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.immediate_lateral_lo)
  return immediate_lateral_lo_;
}
void Dt_Rrecord_MRRP2Obj::set_immediate_lateral_lo(float value) {
  set_has_immediate_lateral_lo();
  immediate_lateral_lo_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.immediate_lateral_lo)
}

// optional bool isUpdated = 4;
bool Dt_Rrecord_MRRP2Obj::has_isupdated() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Rrecord_MRRP2Obj::set_has_isupdated() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Rrecord_MRRP2Obj::clear_has_isupdated() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Rrecord_MRRP2Obj::clear_isupdated() {
  isupdated_ = false;
  clear_has_isupdated();
}
bool Dt_Rrecord_MRRP2Obj::isupdated() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.isUpdated)
  return isupdated_;
}
void Dt_Rrecord_MRRP2Obj::set_isupdated(bool value) {
  set_has_isupdated();
  isupdated_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP2Obj.isUpdated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Dt_Rrecord_MRRP3Obj::kSynchronizeCounterFieldNumber;
const int Dt_Rrecord_MRRP3Obj::kRelativeAccelerationFieldNumber;
const int Dt_Rrecord_MRRP3Obj::kTargetProbabilityFieldNumber;
const int Dt_Rrecord_MRRP3Obj::kVehicleLikelihoodFieldNumber;
const int Dt_Rrecord_MRRP3Obj::kLowthresholdManholeFieldNumber;
const int Dt_Rrecord_MRRP3Obj::kRadarFusionStatusFieldNumber;
const int Dt_Rrecord_MRRP3Obj::kStatusFlag3FieldNumber;
const int Dt_Rrecord_MRRP3Obj::kStatusFlag4FieldNumber;
const int Dt_Rrecord_MRRP3Obj::kIsUpdatedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Dt_Rrecord_MRRP3Obj::Dt_Rrecord_MRRP3Obj()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
}
Dt_Rrecord_MRRP3Obj::Dt_Rrecord_MRRP3Obj(const Dt_Rrecord_MRRP3Obj& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&synchronize_counter_, &from.synchronize_counter_,
    reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
  // @@protoc_insertion_point(copy_constructor:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
}

void Dt_Rrecord_MRRP3Obj::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&isupdated_) -
    reinterpret_cast<char*>(&synchronize_counter_) + sizeof(isupdated_));
}

Dt_Rrecord_MRRP3Obj::~Dt_Rrecord_MRRP3Obj() {
  // @@protoc_insertion_point(destructor:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  SharedDtor();
}

void Dt_Rrecord_MRRP3Obj::SharedDtor() {
}

void Dt_Rrecord_MRRP3Obj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Dt_Rrecord_MRRP3Obj& Dt_Rrecord_MRRP3Obj::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Dt_Rrecord_MRRP3Obj* Dt_Rrecord_MRRP3Obj::New(::google::protobuf::Arena* arena) const {
  Dt_Rrecord_MRRP3Obj* n = new Dt_Rrecord_MRRP3Obj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Dt_Rrecord_MRRP3Obj::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&synchronize_counter_, 0, reinterpret_cast<char*>(&lowthreshold_manhole_) -
      reinterpret_cast<char*>(&synchronize_counter_) + sizeof(lowthreshold_manhole_));
  }
  isupdated_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Dt_Rrecord_MRRP3Obj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 synchronize_counter = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_synchronize_counter();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &synchronize_counter_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float relative_acceleration = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_relative_acceleration();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &relative_acceleration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 target_probability = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_target_probability();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_probability_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_flag_3 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_status_flag_3();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_flag_3_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 status_flag_4 = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_status_flag_4();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_flag_4_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 Vehicle_Likelihood = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_vehicle_likelihood();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vehicle_likelihood_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool Lowthreshold_manhole = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_lowthreshold_manhole();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lowthreshold_manhole_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Radar_Fusion radar_fusion_status = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::mwrprocess::Dt_Rrecord_MRRP3Obj_Radar_Fusion_IsValid(value)) {
            set_radar_fusion_status(static_cast< ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj_Radar_Fusion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(64u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool isUpdated = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_isupdated();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isupdated_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  return false;
#undef DO_
}

void Dt_Rrecord_MRRP3Obj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 synchronize_counter = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->synchronize_counter(), output);
  }

  // optional float relative_acceleration = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->relative_acceleration(), output);
  }

  // optional int32 target_probability = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target_probability(), output);
  }

  // optional int32 status_flag_3 = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->status_flag_3(), output);
  }

  // optional int32 status_flag_4 = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status_flag_4(), output);
  }

  // optional int32 Vehicle_Likelihood = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vehicle_likelihood(), output);
  }

  // optional bool Lowthreshold_manhole = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->lowthreshold_manhole(), output);
  }

  // optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Radar_Fusion radar_fusion_status = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->radar_fusion_status(), output);
  }

  // optional bool isUpdated = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isupdated(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
}

size_t Dt_Rrecord_MRRP3Obj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional int32 synchronize_counter = 1;
    if (has_synchronize_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->synchronize_counter());
    }

    // optional float relative_acceleration = 2;
    if (has_relative_acceleration()) {
      total_size += 1 + 4;
    }

    // optional int32 target_probability = 3;
    if (has_target_probability()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target_probability());
    }

    // optional int32 status_flag_3 = 4;
    if (has_status_flag_3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_flag_3());
    }

    // optional int32 status_flag_4 = 5;
    if (has_status_flag_4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status_flag_4());
    }

    // optional int32 Vehicle_Likelihood = 6;
    if (has_vehicle_likelihood()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vehicle_likelihood());
    }

    // optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Radar_Fusion radar_fusion_status = 8;
    if (has_radar_fusion_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->radar_fusion_status());
    }

    // optional bool Lowthreshold_manhole = 7;
    if (has_lowthreshold_manhole()) {
      total_size += 1 + 1;
    }

  }
  // optional bool isUpdated = 9;
  if (has_isupdated()) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Dt_Rrecord_MRRP3Obj::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Dt_Rrecord_MRRP3Obj*>(&from));
}

void Dt_Rrecord_MRRP3Obj::MergeFrom(const Dt_Rrecord_MRRP3Obj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      synchronize_counter_ = from.synchronize_counter_;
    }
    if (cached_has_bits & 0x00000002u) {
      relative_acceleration_ = from.relative_acceleration_;
    }
    if (cached_has_bits & 0x00000004u) {
      target_probability_ = from.target_probability_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_flag_3_ = from.status_flag_3_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_flag_4_ = from.status_flag_4_;
    }
    if (cached_has_bits & 0x00000020u) {
      vehicle_likelihood_ = from.vehicle_likelihood_;
    }
    if (cached_has_bits & 0x00000040u) {
      radar_fusion_status_ = from.radar_fusion_status_;
    }
    if (cached_has_bits & 0x00000080u) {
      lowthreshold_manhole_ = from.lowthreshold_manhole_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    set_isupdated(from.isupdated());
  }
}

void Dt_Rrecord_MRRP3Obj::CopyFrom(const Dt_Rrecord_MRRP3Obj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.mwrprocess.Dt_Rrecord_MRRP3Obj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dt_Rrecord_MRRP3Obj::IsInitialized() const {
  return true;
}

void Dt_Rrecord_MRRP3Obj::Swap(Dt_Rrecord_MRRP3Obj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Dt_Rrecord_MRRP3Obj::InternalSwap(Dt_Rrecord_MRRP3Obj* other) {
  std::swap(synchronize_counter_, other->synchronize_counter_);
  std::swap(relative_acceleration_, other->relative_acceleration_);
  std::swap(target_probability_, other->target_probability_);
  std::swap(status_flag_3_, other->status_flag_3_);
  std::swap(status_flag_4_, other->status_flag_4_);
  std::swap(vehicle_likelihood_, other->vehicle_likelihood_);
  std::swap(radar_fusion_status_, other->radar_fusion_status_);
  std::swap(lowthreshold_manhole_, other->lowthreshold_manhole_);
  std::swap(isupdated_, other->isupdated_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Dt_Rrecord_MRRP3Obj::GetTypeName() const {
  return "atd.mwrprocess.Dt_Rrecord_MRRP3Obj";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Dt_Rrecord_MRRP3Obj

// optional int32 synchronize_counter = 1;
bool Dt_Rrecord_MRRP3Obj::has_synchronize_counter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_synchronize_counter() {
  _has_bits_[0] |= 0x00000001u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_synchronize_counter() {
  _has_bits_[0] &= ~0x00000001u;
}
void Dt_Rrecord_MRRP3Obj::clear_synchronize_counter() {
  synchronize_counter_ = 0;
  clear_has_synchronize_counter();
}
::google::protobuf::int32 Dt_Rrecord_MRRP3Obj::synchronize_counter() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.synchronize_counter)
  return synchronize_counter_;
}
void Dt_Rrecord_MRRP3Obj::set_synchronize_counter(::google::protobuf::int32 value) {
  set_has_synchronize_counter();
  synchronize_counter_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.synchronize_counter)
}

// optional float relative_acceleration = 2;
bool Dt_Rrecord_MRRP3Obj::has_relative_acceleration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_relative_acceleration() {
  _has_bits_[0] |= 0x00000002u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_relative_acceleration() {
  _has_bits_[0] &= ~0x00000002u;
}
void Dt_Rrecord_MRRP3Obj::clear_relative_acceleration() {
  relative_acceleration_ = 0;
  clear_has_relative_acceleration();
}
float Dt_Rrecord_MRRP3Obj::relative_acceleration() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.relative_acceleration)
  return relative_acceleration_;
}
void Dt_Rrecord_MRRP3Obj::set_relative_acceleration(float value) {
  set_has_relative_acceleration();
  relative_acceleration_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.relative_acceleration)
}

// optional int32 target_probability = 3;
bool Dt_Rrecord_MRRP3Obj::has_target_probability() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_target_probability() {
  _has_bits_[0] |= 0x00000004u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_target_probability() {
  _has_bits_[0] &= ~0x00000004u;
}
void Dt_Rrecord_MRRP3Obj::clear_target_probability() {
  target_probability_ = 0;
  clear_has_target_probability();
}
::google::protobuf::int32 Dt_Rrecord_MRRP3Obj::target_probability() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.target_probability)
  return target_probability_;
}
void Dt_Rrecord_MRRP3Obj::set_target_probability(::google::protobuf::int32 value) {
  set_has_target_probability();
  target_probability_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.target_probability)
}

// optional int32 Vehicle_Likelihood = 6;
bool Dt_Rrecord_MRRP3Obj::has_vehicle_likelihood() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_vehicle_likelihood() {
  _has_bits_[0] |= 0x00000020u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_vehicle_likelihood() {
  _has_bits_[0] &= ~0x00000020u;
}
void Dt_Rrecord_MRRP3Obj::clear_vehicle_likelihood() {
  vehicle_likelihood_ = 0;
  clear_has_vehicle_likelihood();
}
::google::protobuf::int32 Dt_Rrecord_MRRP3Obj::vehicle_likelihood() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Vehicle_Likelihood)
  return vehicle_likelihood_;
}
void Dt_Rrecord_MRRP3Obj::set_vehicle_likelihood(::google::protobuf::int32 value) {
  set_has_vehicle_likelihood();
  vehicle_likelihood_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Vehicle_Likelihood)
}

// optional bool Lowthreshold_manhole = 7;
bool Dt_Rrecord_MRRP3Obj::has_lowthreshold_manhole() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_lowthreshold_manhole() {
  _has_bits_[0] |= 0x00000080u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_lowthreshold_manhole() {
  _has_bits_[0] &= ~0x00000080u;
}
void Dt_Rrecord_MRRP3Obj::clear_lowthreshold_manhole() {
  lowthreshold_manhole_ = false;
  clear_has_lowthreshold_manhole();
}
bool Dt_Rrecord_MRRP3Obj::lowthreshold_manhole() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Lowthreshold_manhole)
  return lowthreshold_manhole_;
}
void Dt_Rrecord_MRRP3Obj::set_lowthreshold_manhole(bool value) {
  set_has_lowthreshold_manhole();
  lowthreshold_manhole_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Lowthreshold_manhole)
}

// optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj.Radar_Fusion radar_fusion_status = 8;
bool Dt_Rrecord_MRRP3Obj::has_radar_fusion_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_radar_fusion_status() {
  _has_bits_[0] |= 0x00000040u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_radar_fusion_status() {
  _has_bits_[0] &= ~0x00000040u;
}
void Dt_Rrecord_MRRP3Obj::clear_radar_fusion_status() {
  radar_fusion_status_ = 0;
  clear_has_radar_fusion_status();
}
::atd::mwrprocess::Dt_Rrecord_MRRP3Obj_Radar_Fusion Dt_Rrecord_MRRP3Obj::radar_fusion_status() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.radar_fusion_status)
  return static_cast< ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj_Radar_Fusion >(radar_fusion_status_);
}
void Dt_Rrecord_MRRP3Obj::set_radar_fusion_status(::atd::mwrprocess::Dt_Rrecord_MRRP3Obj_Radar_Fusion value) {
  assert(::atd::mwrprocess::Dt_Rrecord_MRRP3Obj_Radar_Fusion_IsValid(value));
  set_has_radar_fusion_status();
  radar_fusion_status_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.radar_fusion_status)
}

// optional int32 status_flag_3 = 4;
bool Dt_Rrecord_MRRP3Obj::has_status_flag_3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_status_flag_3() {
  _has_bits_[0] |= 0x00000008u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_status_flag_3() {
  _has_bits_[0] &= ~0x00000008u;
}
void Dt_Rrecord_MRRP3Obj::clear_status_flag_3() {
  status_flag_3_ = 0;
  clear_has_status_flag_3();
}
::google::protobuf::int32 Dt_Rrecord_MRRP3Obj::status_flag_3() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.status_flag_3)
  return status_flag_3_;
}
void Dt_Rrecord_MRRP3Obj::set_status_flag_3(::google::protobuf::int32 value) {
  set_has_status_flag_3();
  status_flag_3_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.status_flag_3)
}

// optional int32 status_flag_4 = 5;
bool Dt_Rrecord_MRRP3Obj::has_status_flag_4() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_status_flag_4() {
  _has_bits_[0] |= 0x00000010u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_status_flag_4() {
  _has_bits_[0] &= ~0x00000010u;
}
void Dt_Rrecord_MRRP3Obj::clear_status_flag_4() {
  status_flag_4_ = 0;
  clear_has_status_flag_4();
}
::google::protobuf::int32 Dt_Rrecord_MRRP3Obj::status_flag_4() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.status_flag_4)
  return status_flag_4_;
}
void Dt_Rrecord_MRRP3Obj::set_status_flag_4(::google::protobuf::int32 value) {
  set_has_status_flag_4();
  status_flag_4_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.status_flag_4)
}

// optional bool isUpdated = 9;
bool Dt_Rrecord_MRRP3Obj::has_isupdated() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Dt_Rrecord_MRRP3Obj::set_has_isupdated() {
  _has_bits_[0] |= 0x00000100u;
}
void Dt_Rrecord_MRRP3Obj::clear_has_isupdated() {
  _has_bits_[0] &= ~0x00000100u;
}
void Dt_Rrecord_MRRP3Obj::clear_isupdated() {
  isupdated_ = false;
  clear_has_isupdated();
}
bool Dt_Rrecord_MRRP3Obj::isupdated() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.isUpdated)
  return isupdated_;
}
void Dt_Rrecord_MRRP3Obj::set_isupdated(bool value) {
  set_has_isupdated();
  isupdated_ = value;
  // @@protoc_insertion_point(field_set:atd.mwrprocess.Dt_Rrecord_MRRP3Obj.isUpdated)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MidRangeObj::kPart0FieldNumber;
const int MidRangeObj::kPart1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MidRangeObj::MidRangeObj()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.mwrprocess.MidRangeObj)
}
MidRangeObj::MidRangeObj(const MidRangeObj& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_part0()) {
    part0_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj(*from.part0_);
  } else {
    part0_ = NULL;
  }
  if (from.has_part1()) {
    part1_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP1Obj(*from.part1_);
  } else {
    part1_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.mwrprocess.MidRangeObj)
}

void MidRangeObj::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&part0_, 0, reinterpret_cast<char*>(&part1_) -
    reinterpret_cast<char*>(&part0_) + sizeof(part1_));
}

MidRangeObj::~MidRangeObj() {
  // @@protoc_insertion_point(destructor:atd.mwrprocess.MidRangeObj)
  SharedDtor();
}

void MidRangeObj::SharedDtor() {
  if (this != internal_default_instance()) {
    delete part0_;
  }
  if (this != internal_default_instance()) {
    delete part1_;
  }
}

void MidRangeObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MidRangeObj& MidRangeObj::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  return *internal_default_instance();
}

MidRangeObj* MidRangeObj::New(::google::protobuf::Arena* arena) const {
  MidRangeObj* n = new MidRangeObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MidRangeObj::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.mwrprocess.MidRangeObj)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_part0()) {
      GOOGLE_DCHECK(part0_ != NULL);
      part0_->::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::Clear();
    }
    if (has_part1()) {
      GOOGLE_DCHECK(part1_ != NULL);
      part1_->::atd::mwrprocess::Dt_Rrecord_MRRP1Obj::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MidRangeObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.mwrprocess.MidRangeObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.mwrprocess.Dt_Rrecord_MRRP1Obj Part1 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part1()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.mwrprocess.MidRangeObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.mwrprocess.MidRangeObj)
  return false;
#undef DO_
}

void MidRangeObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.mwrprocess.MidRangeObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->part0_, output);
  }

  // optional .atd.mwrprocess.Dt_Rrecord_MRRP1Obj Part1 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->part1_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.mwrprocess.MidRangeObj)
}

size_t MidRangeObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.mwrprocess.MidRangeObj)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
    if (has_part0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->part0_);
    }

    // optional .atd.mwrprocess.Dt_Rrecord_MRRP1Obj Part1 = 2;
    if (has_part1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->part1_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MidRangeObj::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MidRangeObj*>(&from));
}

void MidRangeObj::MergeFrom(const MidRangeObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.mwrprocess.MidRangeObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_part0()->::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::MergeFrom(from.part0());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_part1()->::atd::mwrprocess::Dt_Rrecord_MRRP1Obj::MergeFrom(from.part1());
    }
  }
}

void MidRangeObj::CopyFrom(const MidRangeObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.mwrprocess.MidRangeObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MidRangeObj::IsInitialized() const {
  return true;
}

void MidRangeObj::Swap(MidRangeObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MidRangeObj::InternalSwap(MidRangeObj* other) {
  std::swap(part0_, other->part0_);
  std::swap(part1_, other->part1_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MidRangeObj::GetTypeName() const {
  return "atd.mwrprocess.MidRangeObj";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MidRangeObj

// optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
bool MidRangeObj::has_part0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MidRangeObj::set_has_part0() {
  _has_bits_[0] |= 0x00000001u;
}
void MidRangeObj::clear_has_part0() {
  _has_bits_[0] &= ~0x00000001u;
}
void MidRangeObj::clear_part0() {
  if (part0_ != NULL) part0_->::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::Clear();
  clear_has_part0();
}
const ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj& MidRangeObj::part0() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.MidRangeObj.Part0)
  return part0_ != NULL ? *part0_
                         : *::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::internal_default_instance();
}
::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* MidRangeObj::mutable_part0() {
  set_has_part0();
  if (part0_ == NULL) {
    part0_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj;
  }
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.MidRangeObj.Part0)
  return part0_;
}
::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* MidRangeObj::release_part0() {
  // @@protoc_insertion_point(field_release:atd.mwrprocess.MidRangeObj.Part0)
  clear_has_part0();
  ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* temp = part0_;
  part0_ = NULL;
  return temp;
}
void MidRangeObj::set_allocated_part0(::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* part0) {
  delete part0_;
  part0_ = part0;
  if (part0) {
    set_has_part0();
  } else {
    clear_has_part0();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.mwrprocess.MidRangeObj.Part0)
}

// optional .atd.mwrprocess.Dt_Rrecord_MRRP1Obj Part1 = 2;
bool MidRangeObj::has_part1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MidRangeObj::set_has_part1() {
  _has_bits_[0] |= 0x00000002u;
}
void MidRangeObj::clear_has_part1() {
  _has_bits_[0] &= ~0x00000002u;
}
void MidRangeObj::clear_part1() {
  if (part1_ != NULL) part1_->::atd::mwrprocess::Dt_Rrecord_MRRP1Obj::Clear();
  clear_has_part1();
}
const ::atd::mwrprocess::Dt_Rrecord_MRRP1Obj& MidRangeObj::part1() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.MidRangeObj.Part1)
  return part1_ != NULL ? *part1_
                         : *::atd::mwrprocess::Dt_Rrecord_MRRP1Obj::internal_default_instance();
}
::atd::mwrprocess::Dt_Rrecord_MRRP1Obj* MidRangeObj::mutable_part1() {
  set_has_part1();
  if (part1_ == NULL) {
    part1_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP1Obj;
  }
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.MidRangeObj.Part1)
  return part1_;
}
::atd::mwrprocess::Dt_Rrecord_MRRP1Obj* MidRangeObj::release_part1() {
  // @@protoc_insertion_point(field_release:atd.mwrprocess.MidRangeObj.Part1)
  clear_has_part1();
  ::atd::mwrprocess::Dt_Rrecord_MRRP1Obj* temp = part1_;
  part1_ = NULL;
  return temp;
}
void MidRangeObj::set_allocated_part1(::atd::mwrprocess::Dt_Rrecord_MRRP1Obj* part1) {
  delete part1_;
  part1_ = part1;
  if (part1) {
    set_has_part1();
  } else {
    clear_has_part1();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.mwrprocess.MidRangeObj.Part1)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LongRangeObj::kPart0FieldNumber;
const int LongRangeObj::kPart2FieldNumber;
const int LongRangeObj::kPart3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LongRangeObj::LongRangeObj()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.mwrprocess.LongRangeObj)
}
LongRangeObj::LongRangeObj(const LongRangeObj& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_part0()) {
    part0_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj(*from.part0_);
  } else {
    part0_ = NULL;
  }
  if (from.has_part2()) {
    part2_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP2Obj(*from.part2_);
  } else {
    part2_ = NULL;
  }
  if (from.has_part3()) {
    part3_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj(*from.part3_);
  } else {
    part3_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.mwrprocess.LongRangeObj)
}

void LongRangeObj::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&part0_, 0, reinterpret_cast<char*>(&part3_) -
    reinterpret_cast<char*>(&part0_) + sizeof(part3_));
}

LongRangeObj::~LongRangeObj() {
  // @@protoc_insertion_point(destructor:atd.mwrprocess.LongRangeObj)
  SharedDtor();
}

void LongRangeObj::SharedDtor() {
  if (this != internal_default_instance()) {
    delete part0_;
  }
  if (this != internal_default_instance()) {
    delete part2_;
  }
  if (this != internal_default_instance()) {
    delete part3_;
  }
}

void LongRangeObj::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LongRangeObj& LongRangeObj::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  return *internal_default_instance();
}

LongRangeObj* LongRangeObj::New(::google::protobuf::Arena* arena) const {
  LongRangeObj* n = new LongRangeObj;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LongRangeObj::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.mwrprocess.LongRangeObj)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_part0()) {
      GOOGLE_DCHECK(part0_ != NULL);
      part0_->::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::Clear();
    }
    if (has_part2()) {
      GOOGLE_DCHECK(part2_ != NULL);
      part2_->::atd::mwrprocess::Dt_Rrecord_MRRP2Obj::Clear();
    }
    if (has_part3()) {
      GOOGLE_DCHECK(part3_ != NULL);
      part3_->::atd::mwrprocess::Dt_Rrecord_MRRP3Obj::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool LongRangeObj::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.mwrprocess.LongRangeObj)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part0()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.mwrprocess.Dt_Rrecord_MRRP2Obj Part2 = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part2()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj Part3 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_part3()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.mwrprocess.LongRangeObj)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.mwrprocess.LongRangeObj)
  return false;
#undef DO_
}

void LongRangeObj::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.mwrprocess.LongRangeObj)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->part0_, output);
  }

  // optional .atd.mwrprocess.Dt_Rrecord_MRRP2Obj Part2 = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->part2_, output);
  }

  // optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj Part3 = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->part3_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.mwrprocess.LongRangeObj)
}

size_t LongRangeObj::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.mwrprocess.LongRangeObj)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
    if (has_part0()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->part0_);
    }

    // optional .atd.mwrprocess.Dt_Rrecord_MRRP2Obj Part2 = 2;
    if (has_part2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->part2_);
    }

    // optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj Part3 = 3;
    if (has_part3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->part3_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LongRangeObj::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LongRangeObj*>(&from));
}

void LongRangeObj::MergeFrom(const LongRangeObj& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.mwrprocess.LongRangeObj)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_part0()->::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::MergeFrom(from.part0());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_part2()->::atd::mwrprocess::Dt_Rrecord_MRRP2Obj::MergeFrom(from.part2());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_part3()->::atd::mwrprocess::Dt_Rrecord_MRRP3Obj::MergeFrom(from.part3());
    }
  }
}

void LongRangeObj::CopyFrom(const LongRangeObj& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.mwrprocess.LongRangeObj)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LongRangeObj::IsInitialized() const {
  return true;
}

void LongRangeObj::Swap(LongRangeObj* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LongRangeObj::InternalSwap(LongRangeObj* other) {
  std::swap(part0_, other->part0_);
  std::swap(part2_, other->part2_);
  std::swap(part3_, other->part3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LongRangeObj::GetTypeName() const {
  return "atd.mwrprocess.LongRangeObj";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LongRangeObj

// optional .atd.mwrprocess.Dt_Rrecord_MRRP0Obj Part0 = 1;
bool LongRangeObj::has_part0() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void LongRangeObj::set_has_part0() {
  _has_bits_[0] |= 0x00000001u;
}
void LongRangeObj::clear_has_part0() {
  _has_bits_[0] &= ~0x00000001u;
}
void LongRangeObj::clear_part0() {
  if (part0_ != NULL) part0_->::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::Clear();
  clear_has_part0();
}
const ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj& LongRangeObj::part0() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.LongRangeObj.Part0)
  return part0_ != NULL ? *part0_
                         : *::atd::mwrprocess::Dt_Rrecord_MRRP0Obj::internal_default_instance();
}
::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* LongRangeObj::mutable_part0() {
  set_has_part0();
  if (part0_ == NULL) {
    part0_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj;
  }
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.LongRangeObj.Part0)
  return part0_;
}
::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* LongRangeObj::release_part0() {
  // @@protoc_insertion_point(field_release:atd.mwrprocess.LongRangeObj.Part0)
  clear_has_part0();
  ::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* temp = part0_;
  part0_ = NULL;
  return temp;
}
void LongRangeObj::set_allocated_part0(::atd::mwrprocess::Dt_Rrecord_MRRP0Obj* part0) {
  delete part0_;
  part0_ = part0;
  if (part0) {
    set_has_part0();
  } else {
    clear_has_part0();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.mwrprocess.LongRangeObj.Part0)
}

// optional .atd.mwrprocess.Dt_Rrecord_MRRP2Obj Part2 = 2;
bool LongRangeObj::has_part2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void LongRangeObj::set_has_part2() {
  _has_bits_[0] |= 0x00000002u;
}
void LongRangeObj::clear_has_part2() {
  _has_bits_[0] &= ~0x00000002u;
}
void LongRangeObj::clear_part2() {
  if (part2_ != NULL) part2_->::atd::mwrprocess::Dt_Rrecord_MRRP2Obj::Clear();
  clear_has_part2();
}
const ::atd::mwrprocess::Dt_Rrecord_MRRP2Obj& LongRangeObj::part2() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.LongRangeObj.Part2)
  return part2_ != NULL ? *part2_
                         : *::atd::mwrprocess::Dt_Rrecord_MRRP2Obj::internal_default_instance();
}
::atd::mwrprocess::Dt_Rrecord_MRRP2Obj* LongRangeObj::mutable_part2() {
  set_has_part2();
  if (part2_ == NULL) {
    part2_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP2Obj;
  }
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.LongRangeObj.Part2)
  return part2_;
}
::atd::mwrprocess::Dt_Rrecord_MRRP2Obj* LongRangeObj::release_part2() {
  // @@protoc_insertion_point(field_release:atd.mwrprocess.LongRangeObj.Part2)
  clear_has_part2();
  ::atd::mwrprocess::Dt_Rrecord_MRRP2Obj* temp = part2_;
  part2_ = NULL;
  return temp;
}
void LongRangeObj::set_allocated_part2(::atd::mwrprocess::Dt_Rrecord_MRRP2Obj* part2) {
  delete part2_;
  part2_ = part2;
  if (part2) {
    set_has_part2();
  } else {
    clear_has_part2();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.mwrprocess.LongRangeObj.Part2)
}

// optional .atd.mwrprocess.Dt_Rrecord_MRRP3Obj Part3 = 3;
bool LongRangeObj::has_part3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void LongRangeObj::set_has_part3() {
  _has_bits_[0] |= 0x00000004u;
}
void LongRangeObj::clear_has_part3() {
  _has_bits_[0] &= ~0x00000004u;
}
void LongRangeObj::clear_part3() {
  if (part3_ != NULL) part3_->::atd::mwrprocess::Dt_Rrecord_MRRP3Obj::Clear();
  clear_has_part3();
}
const ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj& LongRangeObj::part3() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.LongRangeObj.Part3)
  return part3_ != NULL ? *part3_
                         : *::atd::mwrprocess::Dt_Rrecord_MRRP3Obj::internal_default_instance();
}
::atd::mwrprocess::Dt_Rrecord_MRRP3Obj* LongRangeObj::mutable_part3() {
  set_has_part3();
  if (part3_ == NULL) {
    part3_ = new ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj;
  }
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.LongRangeObj.Part3)
  return part3_;
}
::atd::mwrprocess::Dt_Rrecord_MRRP3Obj* LongRangeObj::release_part3() {
  // @@protoc_insertion_point(field_release:atd.mwrprocess.LongRangeObj.Part3)
  clear_has_part3();
  ::atd::mwrprocess::Dt_Rrecord_MRRP3Obj* temp = part3_;
  part3_ = NULL;
  return temp;
}
void LongRangeObj::set_allocated_part3(::atd::mwrprocess::Dt_Rrecord_MRRP3Obj* part3) {
  delete part3_;
  part3_ = part3;
  if (part3) {
    set_has_part3();
  } else {
    clear_has_part3();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.mwrprocess.LongRangeObj.Part3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FrontDensoMRRObjs::kHeaderFieldNumber;
const int FrontDensoMRRObjs::kReservedmsgFieldNumber;
const int FrontDensoMRRObjs::kLongRangeObj07FieldNumber;
const int FrontDensoMRRObjs::kMidRangeObj815FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FrontDensoMRRObjs::FrontDensoMRRObjs()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.mwrprocess.FrontDensoMRRObjs)
}
FrontDensoMRRObjs::FrontDensoMRRObjs(const FrontDensoMRRObjs& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      longrangeobj_0_7_(from.longrangeobj_0_7_),
      midrangeobj_8_15_(from.midrangeobj_8_15_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.mwrprocess.FrontDensoMRRObjs)
}

void FrontDensoMRRObjs::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reservedmsg_) -
    reinterpret_cast<char*>(&header_) + sizeof(reservedmsg_));
}

FrontDensoMRRObjs::~FrontDensoMRRObjs() {
  // @@protoc_insertion_point(destructor:atd.mwrprocess.FrontDensoMRRObjs)
  SharedDtor();
}

void FrontDensoMRRObjs::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void FrontDensoMRRObjs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FrontDensoMRRObjs& FrontDensoMRRObjs::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fMwrProcess_2fDensoMrr_2eproto::InitDefaults();
  return *internal_default_instance();
}

FrontDensoMRRObjs* FrontDensoMRRObjs::New(::google::protobuf::Arena* arena) const {
  FrontDensoMRRObjs* n = new FrontDensoMRRObjs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FrontDensoMRRObjs::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.mwrprocess.FrontDensoMRRObjs)
  longrangeobj_0_7_.Clear();
  midrangeobj_8_15_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool FrontDensoMRRObjs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.mwrprocess.FrontDensoMRRObjs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.mwrprocess.LongRangeObj LongRangeObj_0_7 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_longrangeobj_0_7()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.mwrprocess.MidRangeObj MidRangeObj_8_15 = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_midrangeobj_8_15()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.mwrprocess.FrontDensoMRRObjs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.mwrprocess.FrontDensoMRRObjs)
  return false;
#undef DO_
}

void FrontDensoMRRObjs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.mwrprocess.FrontDensoMRRObjs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // repeated .atd.mwrprocess.LongRangeObj LongRangeObj_0_7 = 3;
  for (unsigned int i = 0, n = this->longrangeobj_0_7_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->longrangeobj_0_7(i), output);
  }

  // repeated .atd.mwrprocess.MidRangeObj MidRangeObj_8_15 = 4;
  for (unsigned int i = 0, n = this->midrangeobj_8_15_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, this->midrangeobj_8_15(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.mwrprocess.FrontDensoMRRObjs)
}

size_t FrontDensoMRRObjs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.mwrprocess.FrontDensoMRRObjs)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.mwrprocess.LongRangeObj LongRangeObj_0_7 = 3;
  {
    unsigned int count = this->longrangeobj_0_7_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->longrangeobj_0_7(i));
    }
  }

  // repeated .atd.mwrprocess.MidRangeObj MidRangeObj_8_15 = 4;
  {
    unsigned int count = this->midrangeobj_8_15_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->midrangeobj_8_15(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FrontDensoMRRObjs::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FrontDensoMRRObjs*>(&from));
}

void FrontDensoMRRObjs::MergeFrom(const FrontDensoMRRObjs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.mwrprocess.FrontDensoMRRObjs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  longrangeobj_0_7_.MergeFrom(from.longrangeobj_0_7_);
  midrangeobj_8_15_.MergeFrom(from.midrangeobj_8_15_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
  }
}

void FrontDensoMRRObjs::CopyFrom(const FrontDensoMRRObjs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.mwrprocess.FrontDensoMRRObjs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FrontDensoMRRObjs::IsInitialized() const {
  return true;
}

void FrontDensoMRRObjs::Swap(FrontDensoMRRObjs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FrontDensoMRRObjs::InternalSwap(FrontDensoMRRObjs* other) {
  longrangeobj_0_7_.InternalSwap(&other->longrangeobj_0_7_);
  midrangeobj_8_15_.InternalSwap(&other->midrangeobj_8_15_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FrontDensoMRRObjs::GetTypeName() const {
  return "atd.mwrprocess.FrontDensoMRRObjs";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FrontDensoMRRObjs

// optional .atd.common.Header header = 1;
bool FrontDensoMRRObjs::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void FrontDensoMRRObjs::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void FrontDensoMRRObjs::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void FrontDensoMRRObjs::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& FrontDensoMRRObjs::header() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.FrontDensoMRRObjs.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* FrontDensoMRRObjs::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.FrontDensoMRRObjs.header)
  return header_;
}
::atd::common::Header* FrontDensoMRRObjs::release_header() {
  // @@protoc_insertion_point(field_release:atd.mwrprocess.FrontDensoMRRObjs.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void FrontDensoMRRObjs::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.mwrprocess.FrontDensoMRRObjs.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool FrontDensoMRRObjs::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FrontDensoMRRObjs::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void FrontDensoMRRObjs::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void FrontDensoMRRObjs::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& FrontDensoMRRObjs::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.FrontDensoMRRObjs.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* FrontDensoMRRObjs::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.FrontDensoMRRObjs.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* FrontDensoMRRObjs::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.mwrprocess.FrontDensoMRRObjs.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void FrontDensoMRRObjs::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.mwrprocess.FrontDensoMRRObjs.reservedmsg)
}

// repeated .atd.mwrprocess.LongRangeObj LongRangeObj_0_7 = 3;
int FrontDensoMRRObjs::longrangeobj_0_7_size() const {
  return longrangeobj_0_7_.size();
}
void FrontDensoMRRObjs::clear_longrangeobj_0_7() {
  longrangeobj_0_7_.Clear();
}
const ::atd::mwrprocess::LongRangeObj& FrontDensoMRRObjs::longrangeobj_0_7(int index) const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.FrontDensoMRRObjs.LongRangeObj_0_7)
  return longrangeobj_0_7_.Get(index);
}
::atd::mwrprocess::LongRangeObj* FrontDensoMRRObjs::mutable_longrangeobj_0_7(int index) {
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.FrontDensoMRRObjs.LongRangeObj_0_7)
  return longrangeobj_0_7_.Mutable(index);
}
::atd::mwrprocess::LongRangeObj* FrontDensoMRRObjs::add_longrangeobj_0_7() {
  // @@protoc_insertion_point(field_add:atd.mwrprocess.FrontDensoMRRObjs.LongRangeObj_0_7)
  return longrangeobj_0_7_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::mwrprocess::LongRangeObj >*
FrontDensoMRRObjs::mutable_longrangeobj_0_7() {
  // @@protoc_insertion_point(field_mutable_list:atd.mwrprocess.FrontDensoMRRObjs.LongRangeObj_0_7)
  return &longrangeobj_0_7_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::mwrprocess::LongRangeObj >&
FrontDensoMRRObjs::longrangeobj_0_7() const {
  // @@protoc_insertion_point(field_list:atd.mwrprocess.FrontDensoMRRObjs.LongRangeObj_0_7)
  return longrangeobj_0_7_;
}

// repeated .atd.mwrprocess.MidRangeObj MidRangeObj_8_15 = 4;
int FrontDensoMRRObjs::midrangeobj_8_15_size() const {
  return midrangeobj_8_15_.size();
}
void FrontDensoMRRObjs::clear_midrangeobj_8_15() {
  midrangeobj_8_15_.Clear();
}
const ::atd::mwrprocess::MidRangeObj& FrontDensoMRRObjs::midrangeobj_8_15(int index) const {
  // @@protoc_insertion_point(field_get:atd.mwrprocess.FrontDensoMRRObjs.MidRangeObj_8_15)
  return midrangeobj_8_15_.Get(index);
}
::atd::mwrprocess::MidRangeObj* FrontDensoMRRObjs::mutable_midrangeobj_8_15(int index) {
  // @@protoc_insertion_point(field_mutable:atd.mwrprocess.FrontDensoMRRObjs.MidRangeObj_8_15)
  return midrangeobj_8_15_.Mutable(index);
}
::atd::mwrprocess::MidRangeObj* FrontDensoMRRObjs::add_midrangeobj_8_15() {
  // @@protoc_insertion_point(field_add:atd.mwrprocess.FrontDensoMRRObjs.MidRangeObj_8_15)
  return midrangeobj_8_15_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::mwrprocess::MidRangeObj >*
FrontDensoMRRObjs::mutable_midrangeobj_8_15() {
  // @@protoc_insertion_point(field_mutable_list:atd.mwrprocess.FrontDensoMRRObjs.MidRangeObj_8_15)
  return &midrangeobj_8_15_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::mwrprocess::MidRangeObj >&
FrontDensoMRRObjs::midrangeobj_8_15() const {
  // @@protoc_insertion_point(field_list:atd.mwrprocess.FrontDensoMRRObjs.MidRangeObj_8_15)
  return midrangeobj_8_15_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace mwrprocess
}  // namespace atd

// @@protoc_insertion_point(global_scope)
