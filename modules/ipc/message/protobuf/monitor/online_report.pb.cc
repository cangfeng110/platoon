// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/monitor/online_report.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/monitor/online_report.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace monitor {
class VehicleStateReportDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleStateReport> {
} _VehicleStateReport_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fonline_5freport_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _VehicleStateReport_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fstate_2eproto::InitDefaults();
  ::atd::data::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdata_2fstatic_5finfo_2eproto::InitDefaults();
  _VehicleStateReport_default_instance_.DefaultConstruct();
  _VehicleStateReport_default_instance_.get_mutable()->vehicle_info_ = const_cast< ::atd::data::VehicleInfo*>(
      ::atd::data::VehicleInfo::internal_default_instance());
  _VehicleStateReport_default_instance_.get_mutable()->vehicle_state_ = const_cast< ::atd::common::VehicleState*>(
      ::atd::common::VehicleState::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fstate_2eproto::AddDescriptors();
  ::atd::data::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdata_2fstatic_5finfo_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fonline_5freport_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleStateReport::kVehicleInfoFieldNumber;
const int VehicleStateReport::kVehicleStateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleStateReport::VehicleStateReport()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fonline_5freport_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.monitor.VehicleStateReport)
}
VehicleStateReport::VehicleStateReport(const VehicleStateReport& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_vehicle_info()) {
    vehicle_info_ = new ::atd::data::VehicleInfo(*from.vehicle_info_);
  } else {
    vehicle_info_ = NULL;
  }
  if (from.has_vehicle_state()) {
    vehicle_state_ = new ::atd::common::VehicleState(*from.vehicle_state_);
  } else {
    vehicle_state_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.monitor.VehicleStateReport)
}

void VehicleStateReport::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&vehicle_info_, 0, reinterpret_cast<char*>(&vehicle_state_) -
    reinterpret_cast<char*>(&vehicle_info_) + sizeof(vehicle_state_));
}

VehicleStateReport::~VehicleStateReport() {
  // @@protoc_insertion_point(destructor:atd.monitor.VehicleStateReport)
  SharedDtor();
}

void VehicleStateReport::SharedDtor() {
  if (this != internal_default_instance()) {
    delete vehicle_info_;
  }
  if (this != internal_default_instance()) {
    delete vehicle_state_;
  }
}

void VehicleStateReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehicleStateReport& VehicleStateReport::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fonline_5freport_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleStateReport* VehicleStateReport::New(::google::protobuf::Arena* arena) const {
  VehicleStateReport* n = new VehicleStateReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleStateReport::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.monitor.VehicleStateReport)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_vehicle_info()) {
      GOOGLE_DCHECK(vehicle_info_ != NULL);
      vehicle_info_->::atd::data::VehicleInfo::Clear();
    }
    if (has_vehicle_state()) {
      GOOGLE_DCHECK(vehicle_state_ != NULL);
      vehicle_state_->::atd::common::VehicleState::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleStateReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.monitor.VehicleStateReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.data.VehicleInfo vehicle_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.VehicleState vehicle_state = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vehicle_state()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.monitor.VehicleStateReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.monitor.VehicleStateReport)
  return false;
#undef DO_
}

void VehicleStateReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.monitor.VehicleStateReport)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.data.VehicleInfo vehicle_info = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->vehicle_info_, output);
  }

  // optional .atd.common.VehicleState vehicle_state = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->vehicle_state_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.monitor.VehicleStateReport)
}

size_t VehicleStateReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.monitor.VehicleStateReport)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.data.VehicleInfo vehicle_info = 1;
    if (has_vehicle_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_info_);
    }

    // optional .atd.common.VehicleState vehicle_state = 2;
    if (has_vehicle_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->vehicle_state_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleStateReport::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehicleStateReport*>(&from));
}

void VehicleStateReport::MergeFrom(const VehicleStateReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.monitor.VehicleStateReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_vehicle_info()->::atd::data::VehicleInfo::MergeFrom(from.vehicle_info());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_vehicle_state()->::atd::common::VehicleState::MergeFrom(from.vehicle_state());
    }
  }
}

void VehicleStateReport::CopyFrom(const VehicleStateReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.monitor.VehicleStateReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleStateReport::IsInitialized() const {
  return true;
}

void VehicleStateReport::Swap(VehicleStateReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleStateReport::InternalSwap(VehicleStateReport* other) {
  std::swap(vehicle_info_, other->vehicle_info_);
  std::swap(vehicle_state_, other->vehicle_state_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VehicleStateReport::GetTypeName() const {
  return "atd.monitor.VehicleStateReport";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleStateReport

// optional .atd.data.VehicleInfo vehicle_info = 1;
bool VehicleStateReport::has_vehicle_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleStateReport::set_has_vehicle_info() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleStateReport::clear_has_vehicle_info() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleStateReport::clear_vehicle_info() {
  if (vehicle_info_ != NULL) vehicle_info_->::atd::data::VehicleInfo::Clear();
  clear_has_vehicle_info();
}
const ::atd::data::VehicleInfo& VehicleStateReport::vehicle_info() const {
  // @@protoc_insertion_point(field_get:atd.monitor.VehicleStateReport.vehicle_info)
  return vehicle_info_ != NULL ? *vehicle_info_
                         : *::atd::data::VehicleInfo::internal_default_instance();
}
::atd::data::VehicleInfo* VehicleStateReport::mutable_vehicle_info() {
  set_has_vehicle_info();
  if (vehicle_info_ == NULL) {
    vehicle_info_ = new ::atd::data::VehicleInfo;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.VehicleStateReport.vehicle_info)
  return vehicle_info_;
}
::atd::data::VehicleInfo* VehicleStateReport::release_vehicle_info() {
  // @@protoc_insertion_point(field_release:atd.monitor.VehicleStateReport.vehicle_info)
  clear_has_vehicle_info();
  ::atd::data::VehicleInfo* temp = vehicle_info_;
  vehicle_info_ = NULL;
  return temp;
}
void VehicleStateReport::set_allocated_vehicle_info(::atd::data::VehicleInfo* vehicle_info) {
  delete vehicle_info_;
  vehicle_info_ = vehicle_info;
  if (vehicle_info) {
    set_has_vehicle_info();
  } else {
    clear_has_vehicle_info();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.VehicleStateReport.vehicle_info)
}

// optional .atd.common.VehicleState vehicle_state = 2;
bool VehicleStateReport::has_vehicle_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleStateReport::set_has_vehicle_state() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleStateReport::clear_has_vehicle_state() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleStateReport::clear_vehicle_state() {
  if (vehicle_state_ != NULL) vehicle_state_->::atd::common::VehicleState::Clear();
  clear_has_vehicle_state();
}
const ::atd::common::VehicleState& VehicleStateReport::vehicle_state() const {
  // @@protoc_insertion_point(field_get:atd.monitor.VehicleStateReport.vehicle_state)
  return vehicle_state_ != NULL ? *vehicle_state_
                         : *::atd::common::VehicleState::internal_default_instance();
}
::atd::common::VehicleState* VehicleStateReport::mutable_vehicle_state() {
  set_has_vehicle_state();
  if (vehicle_state_ == NULL) {
    vehicle_state_ = new ::atd::common::VehicleState;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.VehicleStateReport.vehicle_state)
  return vehicle_state_;
}
::atd::common::VehicleState* VehicleStateReport::release_vehicle_state() {
  // @@protoc_insertion_point(field_release:atd.monitor.VehicleStateReport.vehicle_state)
  clear_has_vehicle_state();
  ::atd::common::VehicleState* temp = vehicle_state_;
  vehicle_state_ = NULL;
  return temp;
}
void VehicleStateReport::set_allocated_vehicle_state(::atd::common::VehicleState* vehicle_state) {
  delete vehicle_state_;
  vehicle_state_ = vehicle_state;
  if (vehicle_state) {
    set_has_vehicle_state();
  } else {
    clear_has_vehicle_state();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.VehicleStateReport.vehicle_state)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace atd

// @@protoc_insertion_point(global_scope)
