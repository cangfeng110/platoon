// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/monitor/monitor_log/monitor_log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/monitor/monitor_log/monitor_log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace ipc {
namespace monitor {
class MonitorMessageItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MonitorMessageItem> {
} _MonitorMessageItem_default_instance_;
class MonitorMessageDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MonitorMessage> {
} _MonitorMessage_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5flog_2fmonitor_5flog_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _MonitorMessageItem_default_instance_.Shutdown();
  _MonitorMessage_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _MonitorMessageItem_default_instance_.DefaultConstruct();
  _MonitorMessage_default_instance_.DefaultConstruct();
  _MonitorMessage_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _MonitorMessage_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5flog_2fmonitor_5flog_2eproto

bool MonitorMessageItem_MessageSource_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MonitorMessageItem_MessageSource MonitorMessageItem::UNKNOWN;
const MonitorMessageItem_MessageSource MonitorMessageItem::CANBUS;
const MonitorMessageItem_MessageSource MonitorMessageItem::CONTROL;
const MonitorMessageItem_MessageSource MonitorMessageItem::DECISION;
const MonitorMessageItem_MessageSource MonitorMessageItem::LOCALIZATION;
const MonitorMessageItem_MessageSource MonitorMessageItem::PLANNING;
const MonitorMessageItem_MessageSource MonitorMessageItem::PREDICTION;
const MonitorMessageItem_MessageSource MonitorMessageItem::SIMULATOR;
const MonitorMessageItem_MessageSource MonitorMessageItem::HWSYS;
const MonitorMessageItem_MessageSource MonitorMessageItem::ROUTING;
const MonitorMessageItem_MessageSource MonitorMessageItem::MONITOR;
const MonitorMessageItem_MessageSource MonitorMessageItem::HMI;
const MonitorMessageItem_MessageSource MonitorMessageItem::DR;
const MonitorMessageItem_MessageSource MonitorMessageItem::PERCEPTION;
const MonitorMessageItem_MessageSource MonitorMessageItem::MAP;
const MonitorMessageItem_MessageSource MonitorMessageItem::MAPBUFFER;
const MonitorMessageItem_MessageSource MonitorMessageItem::MATCH;
const MonitorMessageItem_MessageSource MonitorMessageItem::LOCALIZATIONABS;
const MonitorMessageItem_MessageSource MonitorMessageItem::TEST_ON_PC;
const MonitorMessageItem_MessageSource MonitorMessageItem::FMS_TCP;
const MonitorMessageItem_MessageSource MonitorMessageItem::MessageSource_MIN;
const MonitorMessageItem_MessageSource MonitorMessageItem::MessageSource_MAX;
const int MonitorMessageItem::MessageSource_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MonitorMessageItem_LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MonitorMessageItem_LogLevel MonitorMessageItem::INFO;
const MonitorMessageItem_LogLevel MonitorMessageItem::WARN;
const MonitorMessageItem_LogLevel MonitorMessageItem::ERROR;
const MonitorMessageItem_LogLevel MonitorMessageItem::FATAL;
const MonitorMessageItem_LogLevel MonitorMessageItem::DEBUG1;
const MonitorMessageItem_LogLevel MonitorMessageItem::DEBUG2;
const MonitorMessageItem_LogLevel MonitorMessageItem::DEBUG3;
const MonitorMessageItem_LogLevel MonitorMessageItem::LogLevel_MIN;
const MonitorMessageItem_LogLevel MonitorMessageItem::LogLevel_MAX;
const int MonitorMessageItem::LogLevel_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorMessageItem::kSourceFieldNumber;
const int MonitorMessageItem::kMsgFieldNumber;
const int MonitorMessageItem::kLogLevelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorMessageItem::MonitorMessageItem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5flog_2fmonitor_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.ipc.monitor.MonitorMessageItem)
}
MonitorMessageItem::MonitorMessageItem(const MonitorMessageItem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&log_level_, &from.log_level_,
    reinterpret_cast<char*>(&source_) -
    reinterpret_cast<char*>(&log_level_) + sizeof(source_));
  // @@protoc_insertion_point(copy_constructor:atd.ipc.monitor.MonitorMessageItem)
}

void MonitorMessageItem::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  log_level_ = 0;
  source_ = 1;
}

MonitorMessageItem::~MonitorMessageItem() {
  // @@protoc_insertion_point(destructor:atd.ipc.monitor.MonitorMessageItem)
  SharedDtor();
}

void MonitorMessageItem::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MonitorMessageItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonitorMessageItem& MonitorMessageItem::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5flog_2fmonitor_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

MonitorMessageItem* MonitorMessageItem::New(::google::protobuf::Arena* arena) const {
  MonitorMessageItem* n = new MonitorMessageItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonitorMessageItem::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.ipc.monitor.MonitorMessageItem)
  if (has_msg()) {
    GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*msg_.UnsafeRawStringPointer())->clear();
  }
  if (_has_bits_[0 / 32] & 6u) {
    log_level_ = 0;
    source_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MonitorMessageItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.ipc.monitor.MonitorMessageItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.ipc.monitor.MonitorMessageItem.MessageSource source = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::ipc::monitor::MonitorMessageItem_MessageSource_IsValid(value)) {
            set_source(static_cast< ::atd::ipc::monitor::MonitorMessageItem_MessageSource >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.ipc.monitor.MonitorMessageItem.LogLevel log_level = 3 [default = INFO];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::ipc::monitor::MonitorMessageItem_LogLevel_IsValid(value)) {
            set_log_level(static_cast< ::atd::ipc::monitor::MonitorMessageItem_LogLevel >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.ipc.monitor.MonitorMessageItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.ipc.monitor.MonitorMessageItem)
  return false;
#undef DO_
}

void MonitorMessageItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.ipc.monitor.MonitorMessageItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.ipc.monitor.MonitorMessageItem.MessageSource source = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->source(), output);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional .atd.ipc.monitor.MonitorMessageItem.LogLevel log_level = 3 [default = INFO];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->log_level(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.ipc.monitor.MonitorMessageItem)
}

size_t MonitorMessageItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.ipc.monitor.MonitorMessageItem)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .atd.ipc.monitor.MonitorMessageItem.LogLevel log_level = 3 [default = INFO];
    if (has_log_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->log_level());
    }

    // optional .atd.ipc.monitor.MonitorMessageItem.MessageSource source = 1 [default = UNKNOWN];
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->source());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorMessageItem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonitorMessageItem*>(&from));
}

void MonitorMessageItem::MergeFrom(const MonitorMessageItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.ipc.monitor.MonitorMessageItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      log_level_ = from.log_level_;
    }
    if (cached_has_bits & 0x00000004u) {
      source_ = from.source_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void MonitorMessageItem::CopyFrom(const MonitorMessageItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.ipc.monitor.MonitorMessageItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorMessageItem::IsInitialized() const {
  return true;
}

void MonitorMessageItem::Swap(MonitorMessageItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorMessageItem::InternalSwap(MonitorMessageItem* other) {
  msg_.Swap(&other->msg_);
  std::swap(log_level_, other->log_level_);
  std::swap(source_, other->source_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MonitorMessageItem::GetTypeName() const {
  return "atd.ipc.monitor.MonitorMessageItem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MonitorMessageItem

// optional .atd.ipc.monitor.MonitorMessageItem.MessageSource source = 1 [default = UNKNOWN];
bool MonitorMessageItem::has_source() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MonitorMessageItem::set_has_source() {
  _has_bits_[0] |= 0x00000004u;
}
void MonitorMessageItem::clear_has_source() {
  _has_bits_[0] &= ~0x00000004u;
}
void MonitorMessageItem::clear_source() {
  source_ = 1;
  clear_has_source();
}
::atd::ipc::monitor::MonitorMessageItem_MessageSource MonitorMessageItem::source() const {
  // @@protoc_insertion_point(field_get:atd.ipc.monitor.MonitorMessageItem.source)
  return static_cast< ::atd::ipc::monitor::MonitorMessageItem_MessageSource >(source_);
}
void MonitorMessageItem::set_source(::atd::ipc::monitor::MonitorMessageItem_MessageSource value) {
  assert(::atd::ipc::monitor::MonitorMessageItem_MessageSource_IsValid(value));
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.monitor.MonitorMessageItem.source)
}

// optional string msg = 2;
bool MonitorMessageItem::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MonitorMessageItem::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void MonitorMessageItem::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void MonitorMessageItem::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& MonitorMessageItem::msg() const {
  // @@protoc_insertion_point(field_get:atd.ipc.monitor.MonitorMessageItem.msg)
  return msg_.GetNoArena();
}
void MonitorMessageItem::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.ipc.monitor.MonitorMessageItem.msg)
}
#if LANG_CXX11
void MonitorMessageItem::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.ipc.monitor.MonitorMessageItem.msg)
}
#endif
void MonitorMessageItem::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.ipc.monitor.MonitorMessageItem.msg)
}
void MonitorMessageItem::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.ipc.monitor.MonitorMessageItem.msg)
}
::std::string* MonitorMessageItem::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:atd.ipc.monitor.MonitorMessageItem.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MonitorMessageItem::release_msg() {
  // @@protoc_insertion_point(field_release:atd.ipc.monitor.MonitorMessageItem.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MonitorMessageItem::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:atd.ipc.monitor.MonitorMessageItem.msg)
}

// optional .atd.ipc.monitor.MonitorMessageItem.LogLevel log_level = 3 [default = INFO];
bool MonitorMessageItem::has_log_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MonitorMessageItem::set_has_log_level() {
  _has_bits_[0] |= 0x00000002u;
}
void MonitorMessageItem::clear_has_log_level() {
  _has_bits_[0] &= ~0x00000002u;
}
void MonitorMessageItem::clear_log_level() {
  log_level_ = 0;
  clear_has_log_level();
}
::atd::ipc::monitor::MonitorMessageItem_LogLevel MonitorMessageItem::log_level() const {
  // @@protoc_insertion_point(field_get:atd.ipc.monitor.MonitorMessageItem.log_level)
  return static_cast< ::atd::ipc::monitor::MonitorMessageItem_LogLevel >(log_level_);
}
void MonitorMessageItem::set_log_level(::atd::ipc::monitor::MonitorMessageItem_LogLevel value) {
  assert(::atd::ipc::monitor::MonitorMessageItem_LogLevel_IsValid(value));
  set_has_log_level();
  log_level_ = value;
  // @@protoc_insertion_point(field_set:atd.ipc.monitor.MonitorMessageItem.log_level)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MonitorMessage::kHeaderFieldNumber;
const int MonitorMessage::kReservedmsgFieldNumber;
const int MonitorMessage::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MonitorMessage::MonitorMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5flog_2fmonitor_5flog_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.ipc.monitor.MonitorMessage)
}
MonitorMessage::MonitorMessage(const MonitorMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      item_(from.item_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.ipc.monitor.MonitorMessage)
}

void MonitorMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reservedmsg_) -
    reinterpret_cast<char*>(&header_) + sizeof(reservedmsg_));
}

MonitorMessage::~MonitorMessage() {
  // @@protoc_insertion_point(destructor:atd.ipc.monitor.MonitorMessage)
  SharedDtor();
}

void MonitorMessage::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void MonitorMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MonitorMessage& MonitorMessage::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5flog_2fmonitor_5flog_2eproto::InitDefaults();
  return *internal_default_instance();
}

MonitorMessage* MonitorMessage::New(::google::protobuf::Arena* arena) const {
  MonitorMessage* n = new MonitorMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MonitorMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.ipc.monitor.MonitorMessage)
  item_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MonitorMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.ipc.monitor.MonitorMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.ipc.monitor.MonitorMessageItem item = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.ipc.monitor.MonitorMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.ipc.monitor.MonitorMessage)
  return false;
#undef DO_
}

void MonitorMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.ipc.monitor.MonitorMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // repeated .atd.ipc.monitor.MonitorMessageItem item = 3;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->item(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.ipc.monitor.MonitorMessage)
}

size_t MonitorMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.ipc.monitor.MonitorMessage)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.ipc.monitor.MonitorMessageItem item = 3;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MonitorMessage*>(&from));
}

void MonitorMessage::MergeFrom(const MonitorMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.ipc.monitor.MonitorMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  item_.MergeFrom(from.item_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
  }
}

void MonitorMessage::CopyFrom(const MonitorMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.ipc.monitor.MonitorMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorMessage::IsInitialized() const {
  return true;
}

void MonitorMessage::Swap(MonitorMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MonitorMessage::InternalSwap(MonitorMessage* other) {
  item_.InternalSwap(&other->item_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MonitorMessage::GetTypeName() const {
  return "atd.ipc.monitor.MonitorMessage";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MonitorMessage

// optional .atd.common.Header header = 1;
bool MonitorMessage::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MonitorMessage::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MonitorMessage::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MonitorMessage::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& MonitorMessage::header() const {
  // @@protoc_insertion_point(field_get:atd.ipc.monitor.MonitorMessage.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* MonitorMessage::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.ipc.monitor.MonitorMessage.header)
  return header_;
}
::atd::common::Header* MonitorMessage::release_header() {
  // @@protoc_insertion_point(field_release:atd.ipc.monitor.MonitorMessage.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MonitorMessage::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.ipc.monitor.MonitorMessage.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool MonitorMessage::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MonitorMessage::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void MonitorMessage::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void MonitorMessage::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& MonitorMessage::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.ipc.monitor.MonitorMessage.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* MonitorMessage::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.ipc.monitor.MonitorMessage.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* MonitorMessage::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.ipc.monitor.MonitorMessage.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void MonitorMessage::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.ipc.monitor.MonitorMessage.reservedmsg)
}

// repeated .atd.ipc.monitor.MonitorMessageItem item = 3;
int MonitorMessage::item_size() const {
  return item_.size();
}
void MonitorMessage::clear_item() {
  item_.Clear();
}
const ::atd::ipc::monitor::MonitorMessageItem& MonitorMessage::item(int index) const {
  // @@protoc_insertion_point(field_get:atd.ipc.monitor.MonitorMessage.item)
  return item_.Get(index);
}
::atd::ipc::monitor::MonitorMessageItem* MonitorMessage::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:atd.ipc.monitor.MonitorMessage.item)
  return item_.Mutable(index);
}
::atd::ipc::monitor::MonitorMessageItem* MonitorMessage::add_item() {
  // @@protoc_insertion_point(field_add:atd.ipc.monitor.MonitorMessage.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::ipc::monitor::MonitorMessageItem >*
MonitorMessage::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:atd.ipc.monitor.MonitorMessage.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::ipc::monitor::MonitorMessageItem >&
MonitorMessage::item() const {
  // @@protoc_insertion_point(field_list:atd.ipc.monitor.MonitorMessage.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace ipc
}  // namespace atd

// @@protoc_insertion_point(global_scope)
