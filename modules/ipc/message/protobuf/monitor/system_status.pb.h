// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/monitor/system_status.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_field_lite.h>
#include <google/protobuf/generated_enum_util.h>
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/monitor/monitor_conf.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
}  // namespace common
namespace monitor {
class HardwareStatus;
class HardwareStatusDefaultTypeInternal;
extern HardwareStatusDefaultTypeInternal _HardwareStatus_default_instance_;
class ModuleStatus;
class ModuleStatusDefaultTypeInternal;
extern ModuleStatusDefaultTypeInternal _ModuleStatus_default_instance_;
class MonitorConf;
class MonitorConfDefaultTypeInternal;
extern MonitorConfDefaultTypeInternal _MonitorConf_default_instance_;
class MonitorConf_HardwareConf;
class MonitorConf_HardwareConfDefaultTypeInternal;
extern MonitorConf_HardwareConfDefaultTypeInternal _MonitorConf_HardwareConf_default_instance_;
class MonitorConf_ModuleConf;
class MonitorConf_ModuleConfDefaultTypeInternal;
extern MonitorConf_ModuleConfDefaultTypeInternal _MonitorConf_ModuleConf_default_instance_;
class ProcessConf;
class ProcessConfDefaultTypeInternal;
extern ProcessConfDefaultTypeInternal _ProcessConf_default_instance_;
class ProcessStatus;
class ProcessStatusDefaultTypeInternal;
extern ProcessStatusDefaultTypeInternal _ProcessStatus_default_instance_;
class SystemStatus;
class SystemStatusDefaultTypeInternal;
extern SystemStatusDefaultTypeInternal _SystemStatus_default_instance_;
class SystemStatus_HardwareEntry;
class SystemStatus_HardwareEntryDefaultTypeInternal;
extern SystemStatus_HardwareEntryDefaultTypeInternal _SystemStatus_HardwareEntry_default_instance_;
class SystemStatus_ModulesEntry;
class SystemStatus_ModulesEntryDefaultTypeInternal;
extern SystemStatus_ModulesEntryDefaultTypeInternal _SystemStatus_ModulesEntry_default_instance_;
class TopicConf;
class TopicConfDefaultTypeInternal;
extern TopicConfDefaultTypeInternal _TopicConf_default_instance_;
class TopicStatus;
class TopicStatusDefaultTypeInternal;
extern TopicStatusDefaultTypeInternal _TopicStatus_default_instance_;
}  // namespace monitor
}  // namespace atd

namespace atd {
namespace monitor {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto

enum HardwareStatus_Status {
  HardwareStatus_Status_OK = 0,
  HardwareStatus_Status_NOT_READY = 1,
  HardwareStatus_Status_NOT_PRESENT = 2,
  HardwareStatus_Status_ERR = 3,
  HardwareStatus_Status_GPS_UNSTABLE_WARNING = 4,
  HardwareStatus_Status_GPS_UNSTABLE_ERROR = 5,
  HardwareStatus_Status_UNDEF = -1
};
bool HardwareStatus_Status_IsValid(int value);
const HardwareStatus_Status HardwareStatus_Status_Status_MIN = HardwareStatus_Status_UNDEF;
const HardwareStatus_Status HardwareStatus_Status_Status_MAX = HardwareStatus_Status_GPS_UNSTABLE_ERROR;
const int HardwareStatus_Status_Status_ARRAYSIZE = HardwareStatus_Status_Status_MAX + 1;

enum Summary {
  UNKNOWN = 0,
  OK = 1,
  WARN = 2,
  ERROR = 3,
  FATAL = 4
};
bool Summary_IsValid(int value);
const Summary Summary_MIN = UNKNOWN;
const Summary Summary_MAX = FATAL;
const int Summary_ARRAYSIZE = Summary_MAX + 1;

// ===================================================================

class HardwareStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.monitor.HardwareStatus) */ {
 public:
  HardwareStatus();
  virtual ~HardwareStatus();

  HardwareStatus(const HardwareStatus& from);

  inline HardwareStatus& operator=(const HardwareStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const HardwareStatus& default_instance();

  static inline const HardwareStatus* internal_default_instance() {
    return reinterpret_cast<const HardwareStatus*>(
               &_HardwareStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(HardwareStatus* other);

  // implements Message ----------------------------------------------

  inline HardwareStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  HardwareStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HardwareStatus& from);
  void MergeFrom(const HardwareStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HardwareStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef HardwareStatus_Status Status;
  static const Status OK =
    HardwareStatus_Status_OK;
  static const Status NOT_READY =
    HardwareStatus_Status_NOT_READY;
  static const Status NOT_PRESENT =
    HardwareStatus_Status_NOT_PRESENT;
  static const Status ERR =
    HardwareStatus_Status_ERR;
  static const Status GPS_UNSTABLE_WARNING =
    HardwareStatus_Status_GPS_UNSTABLE_WARNING;
  static const Status GPS_UNSTABLE_ERROR =
    HardwareStatus_Status_GPS_UNSTABLE_ERROR;
  static const Status UNDEF =
    HardwareStatus_Status_UNDEF;
  static inline bool Status_IsValid(int value) {
    return HardwareStatus_Status_IsValid(value);
  }
  static const Status Status_MIN =
    HardwareStatus_Status_Status_MIN;
  static const Status Status_MAX =
    HardwareStatus_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    HardwareStatus_Status_Status_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .atd.monitor.TopicStatus topic_status = 5;
  bool has_topic_status() const;
  void clear_topic_status();
  static const int kTopicStatusFieldNumber = 5;
  const ::atd::monitor::TopicStatus& topic_status() const;
  ::atd::monitor::TopicStatus* mutable_topic_status();
  ::atd::monitor::TopicStatus* release_topic_status();
  void set_allocated_topic_status(::atd::monitor::TopicStatus* topic_status);

  // optional double gps_unstable_start_time = 4;
  bool has_gps_unstable_start_time() const;
  void clear_gps_unstable_start_time();
  static const int kGpsUnstableStartTimeFieldNumber = 4;
  double gps_unstable_start_time() const;
  void set_gps_unstable_start_time(double value);

  // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 1;
  ::atd::monitor::Summary summary() const;
  void set_summary(::atd::monitor::Summary value);

  // optional .atd.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::atd::monitor::HardwareStatus_Status status() const;
  void set_status(::atd::monitor::HardwareStatus_Status value);

  // @@protoc_insertion_point(class_scope:atd.monitor.HardwareStatus)
 private:
  void set_has_summary();
  void clear_has_summary();
  void set_has_msg();
  void clear_has_msg();
  void set_has_status();
  void clear_has_status();
  void set_has_gps_unstable_start_time();
  void clear_has_gps_unstable_start_time();
  void set_has_topic_status();
  void clear_has_topic_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::atd::monitor::TopicStatus* topic_status_;
  double gps_unstable_start_time_;
  int summary_;
  int status_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ModuleStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.monitor.ModuleStatus) */ {
 public:
  ModuleStatus();
  virtual ~ModuleStatus();

  ModuleStatus(const ModuleStatus& from);

  inline ModuleStatus& operator=(const ModuleStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ModuleStatus& default_instance();

  static inline const ModuleStatus* internal_default_instance() {
    return reinterpret_cast<const ModuleStatus*>(
               &_ModuleStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(ModuleStatus* other);

  // implements Message ----------------------------------------------

  inline ModuleStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  ModuleStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ModuleStatus& from);
  void MergeFrom(const ModuleStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ModuleStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .atd.monitor.ProcessStatus process_status = 3;
  bool has_process_status() const;
  void clear_process_status();
  static const int kProcessStatusFieldNumber = 3;
  const ::atd::monitor::ProcessStatus& process_status() const;
  ::atd::monitor::ProcessStatus* mutable_process_status();
  ::atd::monitor::ProcessStatus* release_process_status();
  void set_allocated_process_status(::atd::monitor::ProcessStatus* process_status);

  // optional .atd.monitor.TopicStatus topic_status = 4;
  bool has_topic_status() const;
  void clear_topic_status();
  static const int kTopicStatusFieldNumber = 4;
  const ::atd::monitor::TopicStatus& topic_status() const;
  ::atd::monitor::TopicStatus* mutable_topic_status();
  ::atd::monitor::TopicStatus* release_topic_status();
  void set_allocated_topic_status(::atd::monitor::TopicStatus* topic_status);

  // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
  bool has_summary() const;
  void clear_summary();
  static const int kSummaryFieldNumber = 1;
  ::atd::monitor::Summary summary() const;
  void set_summary(::atd::monitor::Summary value);

  // @@protoc_insertion_point(class_scope:atd.monitor.ModuleStatus)
 private:
  void set_has_summary();
  void clear_has_summary();
  void set_has_msg();
  void clear_has_msg();
  void set_has_process_status();
  void clear_has_process_status();
  void set_has_topic_status();
  void clear_has_topic_status();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::atd::monitor::ProcessStatus* process_status_;
  ::atd::monitor::TopicStatus* topic_status_;
  int summary_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class SystemStatus : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.monitor.SystemStatus) */ {
 public:
  SystemStatus();
  virtual ~SystemStatus();

  SystemStatus(const SystemStatus& from);

  inline SystemStatus& operator=(const SystemStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const SystemStatus& default_instance();

  static inline const SystemStatus* internal_default_instance() {
    return reinterpret_cast<const SystemStatus*>(
               &_SystemStatus_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(SystemStatus* other);

  // implements Message ----------------------------------------------

  inline SystemStatus* New() const PROTOBUF_FINAL { return New(NULL); }

  SystemStatus* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const SystemStatus& from);
  void MergeFrom(const SystemStatus& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SystemStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .atd.monitor.ModuleStatus> modules = 2;
  int modules_size() const;
  void clear_modules();
  static const int kModulesFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >&
      modules() const;
  ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >*
      mutable_modules();

  // map<string, .atd.monitor.HardwareStatus> hardware = 3;
  int hardware_size() const;
  void clear_hardware();
  static const int kHardwareFieldNumber = 3;
  const ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >&
      hardware() const;
  ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >*
      mutable_hardware();

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // @@protoc_insertion_point(class_scope:atd.monitor.SystemStatus)
 private:
  void set_has_header();
  void clear_has_header();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  public:
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::atd::monitor::ModuleStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SystemStatus_ModulesEntry;
  ::google::protobuf::internal::MapFieldLite<
      SystemStatus_ModulesEntry,
      ::std::string, ::atd::monitor::ModuleStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > modules_;
  private:
  public:
  typedef ::google::protobuf::internal::MapEntryLite<
      ::std::string, ::atd::monitor::HardwareStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 >
      SystemStatus_HardwareEntry;
  ::google::protobuf::internal::MapFieldLite<
      SystemStatus_HardwareEntry,
      ::std::string, ::atd::monitor::HardwareStatus,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > hardware_;
  private:
  ::atd::common::Header* header_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// HardwareStatus

// optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
inline bool HardwareStatus::has_summary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void HardwareStatus::set_has_summary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void HardwareStatus::clear_has_summary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void HardwareStatus::clear_summary() {
  summary_ = 0;
  clear_has_summary();
}
inline ::atd::monitor::Summary HardwareStatus::summary() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.summary)
  return static_cast< ::atd::monitor::Summary >(summary_);
}
inline void HardwareStatus::set_summary(::atd::monitor::Summary value) {
  assert(::atd::monitor::Summary_IsValid(value));
  set_has_summary();
  summary_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.summary)
}

// optional string msg = 2;
inline bool HardwareStatus::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HardwareStatus::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HardwareStatus::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HardwareStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& HardwareStatus::msg() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.msg)
  return msg_.GetNoArena();
}
inline void HardwareStatus::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.msg)
}
#if LANG_CXX11
inline void HardwareStatus::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.monitor.HardwareStatus.msg)
}
#endif
inline void HardwareStatus::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.monitor.HardwareStatus.msg)
}
inline void HardwareStatus::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.monitor.HardwareStatus.msg)
}
inline ::std::string* HardwareStatus::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:atd.monitor.HardwareStatus.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* HardwareStatus::release_msg() {
  // @@protoc_insertion_point(field_release:atd.monitor.HardwareStatus.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void HardwareStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.HardwareStatus.msg)
}

// optional .atd.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
inline bool HardwareStatus::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void HardwareStatus::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void HardwareStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void HardwareStatus::clear_status() {
  status_ = -1;
  clear_has_status();
}
inline ::atd::monitor::HardwareStatus_Status HardwareStatus::status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.status)
  return static_cast< ::atd::monitor::HardwareStatus_Status >(status_);
}
inline void HardwareStatus::set_status(::atd::monitor::HardwareStatus_Status value) {
  assert(::atd::monitor::HardwareStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.status)
}

// optional double gps_unstable_start_time = 4;
inline bool HardwareStatus::has_gps_unstable_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HardwareStatus::set_has_gps_unstable_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HardwareStatus::clear_has_gps_unstable_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HardwareStatus::clear_gps_unstable_start_time() {
  gps_unstable_start_time_ = 0;
  clear_has_gps_unstable_start_time();
}
inline double HardwareStatus::gps_unstable_start_time() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.gps_unstable_start_time)
  return gps_unstable_start_time_;
}
inline void HardwareStatus::set_gps_unstable_start_time(double value) {
  set_has_gps_unstable_start_time();
  gps_unstable_start_time_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.gps_unstable_start_time)
}

// optional .atd.monitor.TopicStatus topic_status = 5;
inline bool HardwareStatus::has_topic_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HardwareStatus::set_has_topic_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HardwareStatus::clear_has_topic_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HardwareStatus::clear_topic_status() {
  if (topic_status_ != NULL) topic_status_->::atd::monitor::TopicStatus::Clear();
  clear_has_topic_status();
}
inline const ::atd::monitor::TopicStatus& HardwareStatus::topic_status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.topic_status)
  return topic_status_ != NULL ? *topic_status_
                         : *::atd::monitor::TopicStatus::internal_default_instance();
}
inline ::atd::monitor::TopicStatus* HardwareStatus::mutable_topic_status() {
  set_has_topic_status();
  if (topic_status_ == NULL) {
    topic_status_ = new ::atd::monitor::TopicStatus;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.HardwareStatus.topic_status)
  return topic_status_;
}
inline ::atd::monitor::TopicStatus* HardwareStatus::release_topic_status() {
  // @@protoc_insertion_point(field_release:atd.monitor.HardwareStatus.topic_status)
  clear_has_topic_status();
  ::atd::monitor::TopicStatus* temp = topic_status_;
  topic_status_ = NULL;
  return temp;
}
inline void HardwareStatus::set_allocated_topic_status(::atd::monitor::TopicStatus* topic_status) {
  delete topic_status_;
  topic_status_ = topic_status;
  if (topic_status) {
    set_has_topic_status();
  } else {
    clear_has_topic_status();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.HardwareStatus.topic_status)
}

// -------------------------------------------------------------------

// ModuleStatus

// optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
inline bool ModuleStatus::has_summary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ModuleStatus::set_has_summary() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ModuleStatus::clear_has_summary() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ModuleStatus::clear_summary() {
  summary_ = 0;
  clear_has_summary();
}
inline ::atd::monitor::Summary ModuleStatus::summary() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.summary)
  return static_cast< ::atd::monitor::Summary >(summary_);
}
inline void ModuleStatus::set_summary(::atd::monitor::Summary value) {
  assert(::atd::monitor::Summary_IsValid(value));
  set_has_summary();
  summary_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.ModuleStatus.summary)
}

// optional string msg = 2;
inline bool ModuleStatus::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ModuleStatus::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ModuleStatus::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ModuleStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ModuleStatus::msg() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.msg)
  return msg_.GetNoArena();
}
inline void ModuleStatus::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.monitor.ModuleStatus.msg)
}
#if LANG_CXX11
inline void ModuleStatus::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.monitor.ModuleStatus.msg)
}
#endif
inline void ModuleStatus::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.monitor.ModuleStatus.msg)
}
inline void ModuleStatus::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.monitor.ModuleStatus.msg)
}
inline ::std::string* ModuleStatus::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:atd.monitor.ModuleStatus.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ModuleStatus::release_msg() {
  // @@protoc_insertion_point(field_release:atd.monitor.ModuleStatus.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.ModuleStatus.msg)
}

// optional .atd.monitor.ProcessStatus process_status = 3;
inline bool ModuleStatus::has_process_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ModuleStatus::set_has_process_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ModuleStatus::clear_has_process_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ModuleStatus::clear_process_status() {
  if (process_status_ != NULL) process_status_->::atd::monitor::ProcessStatus::Clear();
  clear_has_process_status();
}
inline const ::atd::monitor::ProcessStatus& ModuleStatus::process_status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.process_status)
  return process_status_ != NULL ? *process_status_
                         : *::atd::monitor::ProcessStatus::internal_default_instance();
}
inline ::atd::monitor::ProcessStatus* ModuleStatus::mutable_process_status() {
  set_has_process_status();
  if (process_status_ == NULL) {
    process_status_ = new ::atd::monitor::ProcessStatus;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.ModuleStatus.process_status)
  return process_status_;
}
inline ::atd::monitor::ProcessStatus* ModuleStatus::release_process_status() {
  // @@protoc_insertion_point(field_release:atd.monitor.ModuleStatus.process_status)
  clear_has_process_status();
  ::atd::monitor::ProcessStatus* temp = process_status_;
  process_status_ = NULL;
  return temp;
}
inline void ModuleStatus::set_allocated_process_status(::atd::monitor::ProcessStatus* process_status) {
  delete process_status_;
  process_status_ = process_status;
  if (process_status) {
    set_has_process_status();
  } else {
    clear_has_process_status();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.ModuleStatus.process_status)
}

// optional .atd.monitor.TopicStatus topic_status = 4;
inline bool ModuleStatus::has_topic_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ModuleStatus::set_has_topic_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ModuleStatus::clear_has_topic_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ModuleStatus::clear_topic_status() {
  if (topic_status_ != NULL) topic_status_->::atd::monitor::TopicStatus::Clear();
  clear_has_topic_status();
}
inline const ::atd::monitor::TopicStatus& ModuleStatus::topic_status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.topic_status)
  return topic_status_ != NULL ? *topic_status_
                         : *::atd::monitor::TopicStatus::internal_default_instance();
}
inline ::atd::monitor::TopicStatus* ModuleStatus::mutable_topic_status() {
  set_has_topic_status();
  if (topic_status_ == NULL) {
    topic_status_ = new ::atd::monitor::TopicStatus;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.ModuleStatus.topic_status)
  return topic_status_;
}
inline ::atd::monitor::TopicStatus* ModuleStatus::release_topic_status() {
  // @@protoc_insertion_point(field_release:atd.monitor.ModuleStatus.topic_status)
  clear_has_topic_status();
  ::atd::monitor::TopicStatus* temp = topic_status_;
  topic_status_ = NULL;
  return temp;
}
inline void ModuleStatus::set_allocated_topic_status(::atd::monitor::TopicStatus* topic_status) {
  delete topic_status_;
  topic_status_ = topic_status;
  if (topic_status) {
    set_has_topic_status();
  } else {
    clear_has_topic_status();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.ModuleStatus.topic_status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SystemStatus

// optional .atd.common.Header header = 1;
inline bool SystemStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemStatus::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& SystemStatus::header() const {
  // @@protoc_insertion_point(field_get:atd.monitor.SystemStatus.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* SystemStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.SystemStatus.header)
  return header_;
}
inline ::atd::common::Header* SystemStatus::release_header() {
  // @@protoc_insertion_point(field_release:atd.monitor.SystemStatus.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void SystemStatus::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.SystemStatus.header)
}

// map<string, .atd.monitor.ModuleStatus> modules = 2;
inline int SystemStatus::modules_size() const {
  return modules_.size();
}
inline void SystemStatus::clear_modules() {
  modules_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >&
SystemStatus::modules() const {
  // @@protoc_insertion_point(field_map:atd.monitor.SystemStatus.modules)
  return modules_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >*
SystemStatus::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:atd.monitor.SystemStatus.modules)
  return modules_.MutableMap();
}

// map<string, .atd.monitor.HardwareStatus> hardware = 3;
inline int SystemStatus::hardware_size() const {
  return hardware_.size();
}
inline void SystemStatus::clear_hardware() {
  hardware_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >&
SystemStatus::hardware() const {
  // @@protoc_insertion_point(field_map:atd.monitor.SystemStatus.hardware)
  return hardware_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >*
SystemStatus::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_map:atd.monitor.SystemStatus.hardware)
  return hardware_.MutableMap();
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace monitor
}  // namespace atd

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::atd::monitor::HardwareStatus_Status> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::atd::monitor::Summary> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto__INCLUDED
