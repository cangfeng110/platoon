// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/monitor/system_status.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/monitor/system_status.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace monitor {
class HardwareStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HardwareStatus> {
} _HardwareStatus_default_instance_;
class ModuleStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ModuleStatus> {
} _ModuleStatus_default_instance_;
class SystemStatus_ModulesEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemStatus::SystemStatus_ModulesEntry> {
} _SystemStatus_ModulesEntry_default_instance_;
class SystemStatus_HardwareEntryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemStatus::SystemStatus_HardwareEntry> {
} _SystemStatus_HardwareEntry_default_instance_;
class SystemStatusDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemStatus> {
} _SystemStatus_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _HardwareStatus_default_instance_.Shutdown();
  _ModuleStatus_default_instance_.Shutdown();
  _SystemStatus_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::monitor::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5fconf_2eproto::InitDefaults();
  _HardwareStatus_default_instance_.DefaultConstruct();
  _ModuleStatus_default_instance_.DefaultConstruct();
  _SystemStatus_ModulesEntry_default_instance_.DefaultConstruct();
  _SystemStatus_HardwareEntry_default_instance_.DefaultConstruct();
  _SystemStatus_default_instance_.DefaultConstruct();
  _HardwareStatus_default_instance_.get_mutable()->topic_status_ = const_cast< ::atd::monitor::TopicStatus*>(
      ::atd::monitor::TopicStatus::internal_default_instance());
  _ModuleStatus_default_instance_.get_mutable()->process_status_ = const_cast< ::atd::monitor::ProcessStatus*>(
      ::atd::monitor::ProcessStatus::internal_default_instance());
  _ModuleStatus_default_instance_.get_mutable()->topic_status_ = const_cast< ::atd::monitor::TopicStatus*>(
      ::atd::monitor::TopicStatus::internal_default_instance());
  _SystemStatus_ModulesEntry_default_instance_.get_mutable()->set_default_instance(_SystemStatus_ModulesEntry_default_instance_.get_mutable());
  _SystemStatus_ModulesEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _SystemStatus_HardwareEntry_default_instance_.get_mutable()->set_default_instance(_SystemStatus_HardwareEntry_default_instance_.get_mutable());
  _SystemStatus_HardwareEntry_default_instance_.get_mutable()->InitAsDefaultInstance();
  _SystemStatus_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::monitor::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fmonitor_5fconf_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto

bool HardwareStatus_Status_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HardwareStatus_Status HardwareStatus::OK;
const HardwareStatus_Status HardwareStatus::NOT_READY;
const HardwareStatus_Status HardwareStatus::NOT_PRESENT;
const HardwareStatus_Status HardwareStatus::ERR;
const HardwareStatus_Status HardwareStatus::GPS_UNSTABLE_WARNING;
const HardwareStatus_Status HardwareStatus::GPS_UNSTABLE_ERROR;
const HardwareStatus_Status HardwareStatus::UNDEF;
const HardwareStatus_Status HardwareStatus::Status_MIN;
const HardwareStatus_Status HardwareStatus::Status_MAX;
const int HardwareStatus::Status_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Summary_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HardwareStatus::kSummaryFieldNumber;
const int HardwareStatus::kMsgFieldNumber;
const int HardwareStatus::kStatusFieldNumber;
const int HardwareStatus::kGpsUnstableStartTimeFieldNumber;
const int HardwareStatus::kTopicStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HardwareStatus::HardwareStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.monitor.HardwareStatus)
}
HardwareStatus::HardwareStatus(const HardwareStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_topic_status()) {
    topic_status_ = new ::atd::monitor::TopicStatus(*from.topic_status_);
  } else {
    topic_status_ = NULL;
  }
  ::memcpy(&gps_unstable_start_time_, &from.gps_unstable_start_time_,
    reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&gps_unstable_start_time_) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:atd.monitor.HardwareStatus)
}

void HardwareStatus::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&topic_status_, 0, reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&topic_status_) + sizeof(summary_));
  status_ = -1;
}

HardwareStatus::~HardwareStatus() {
  // @@protoc_insertion_point(destructor:atd.monitor.HardwareStatus)
  SharedDtor();
}

void HardwareStatus::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete topic_status_;
  }
}

void HardwareStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HardwareStatus& HardwareStatus::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

HardwareStatus* HardwareStatus::New(::google::protobuf::Arena* arena) const {
  HardwareStatus* n = new HardwareStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HardwareStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.monitor.HardwareStatus)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_msg()) {
      GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_topic_status()) {
      GOOGLE_DCHECK(topic_status_ != NULL);
      topic_status_->::atd::monitor::TopicStatus::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 28u) {
    ::memset(&gps_unstable_start_time_, 0, reinterpret_cast<char*>(&summary_) -
      reinterpret_cast<char*>(&gps_unstable_start_time_) + sizeof(summary_));
    status_ = -1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool HardwareStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.monitor.HardwareStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::monitor::Summary_IsValid(value)) {
            set_summary(static_cast< ::atd::monitor::Summary >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::monitor::HardwareStatus_Status_IsValid(value)) {
            set_status(static_cast< ::atd::monitor::HardwareStatus_Status >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_unstable_start_time = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_gps_unstable_start_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_unstable_start_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.monitor.TopicStatus topic_status = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.monitor.HardwareStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.monitor.HardwareStatus)
  return false;
#undef DO_
}

void HardwareStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.monitor.HardwareStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->summary(), output);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional .atd.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->status(), output);
  }

  // optional double gps_unstable_start_time = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->gps_unstable_start_time(), output);
  }

  // optional .atd.monitor.TopicStatus topic_status = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->topic_status_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.monitor.HardwareStatus)
}

size_t HardwareStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.monitor.HardwareStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .atd.monitor.TopicStatus topic_status = 5;
    if (has_topic_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->topic_status_);
    }

    // optional double gps_unstable_start_time = 4;
    if (has_gps_unstable_start_time()) {
      total_size += 1 + 8;
    }

    // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->summary());
    }

    // optional .atd.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HardwareStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HardwareStatus*>(&from));
}

void HardwareStatus::MergeFrom(const HardwareStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.monitor.HardwareStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_topic_status()->::atd::monitor::TopicStatus::MergeFrom(from.topic_status());
    }
    if (cached_has_bits & 0x00000004u) {
      gps_unstable_start_time_ = from.gps_unstable_start_time_;
    }
    if (cached_has_bits & 0x00000008u) {
      summary_ = from.summary_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HardwareStatus::CopyFrom(const HardwareStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.monitor.HardwareStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HardwareStatus::IsInitialized() const {
  return true;
}

void HardwareStatus::Swap(HardwareStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HardwareStatus::InternalSwap(HardwareStatus* other) {
  msg_.Swap(&other->msg_);
  std::swap(topic_status_, other->topic_status_);
  std::swap(gps_unstable_start_time_, other->gps_unstable_start_time_);
  std::swap(summary_, other->summary_);
  std::swap(status_, other->status_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HardwareStatus::GetTypeName() const {
  return "atd.monitor.HardwareStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HardwareStatus

// optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
bool HardwareStatus::has_summary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HardwareStatus::set_has_summary() {
  _has_bits_[0] |= 0x00000008u;
}
void HardwareStatus::clear_has_summary() {
  _has_bits_[0] &= ~0x00000008u;
}
void HardwareStatus::clear_summary() {
  summary_ = 0;
  clear_has_summary();
}
::atd::monitor::Summary HardwareStatus::summary() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.summary)
  return static_cast< ::atd::monitor::Summary >(summary_);
}
void HardwareStatus::set_summary(::atd::monitor::Summary value) {
  assert(::atd::monitor::Summary_IsValid(value));
  set_has_summary();
  summary_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.summary)
}

// optional string msg = 2;
bool HardwareStatus::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HardwareStatus::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void HardwareStatus::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void HardwareStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& HardwareStatus::msg() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.msg)
  return msg_.GetNoArena();
}
void HardwareStatus::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.msg)
}
#if LANG_CXX11
void HardwareStatus::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.monitor.HardwareStatus.msg)
}
#endif
void HardwareStatus::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.monitor.HardwareStatus.msg)
}
void HardwareStatus::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.monitor.HardwareStatus.msg)
}
::std::string* HardwareStatus::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:atd.monitor.HardwareStatus.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HardwareStatus::release_msg() {
  // @@protoc_insertion_point(field_release:atd.monitor.HardwareStatus.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HardwareStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.HardwareStatus.msg)
}

// optional .atd.monitor.HardwareStatus.Status status = 3 [default = UNDEF];
bool HardwareStatus::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void HardwareStatus::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
void HardwareStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
void HardwareStatus::clear_status() {
  status_ = -1;
  clear_has_status();
}
::atd::monitor::HardwareStatus_Status HardwareStatus::status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.status)
  return static_cast< ::atd::monitor::HardwareStatus_Status >(status_);
}
void HardwareStatus::set_status(::atd::monitor::HardwareStatus_Status value) {
  assert(::atd::monitor::HardwareStatus_Status_IsValid(value));
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.status)
}

// optional double gps_unstable_start_time = 4;
bool HardwareStatus::has_gps_unstable_start_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HardwareStatus::set_has_gps_unstable_start_time() {
  _has_bits_[0] |= 0x00000004u;
}
void HardwareStatus::clear_has_gps_unstable_start_time() {
  _has_bits_[0] &= ~0x00000004u;
}
void HardwareStatus::clear_gps_unstable_start_time() {
  gps_unstable_start_time_ = 0;
  clear_has_gps_unstable_start_time();
}
double HardwareStatus::gps_unstable_start_time() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.gps_unstable_start_time)
  return gps_unstable_start_time_;
}
void HardwareStatus::set_gps_unstable_start_time(double value) {
  set_has_gps_unstable_start_time();
  gps_unstable_start_time_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.HardwareStatus.gps_unstable_start_time)
}

// optional .atd.monitor.TopicStatus topic_status = 5;
bool HardwareStatus::has_topic_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HardwareStatus::set_has_topic_status() {
  _has_bits_[0] |= 0x00000002u;
}
void HardwareStatus::clear_has_topic_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void HardwareStatus::clear_topic_status() {
  if (topic_status_ != NULL) topic_status_->::atd::monitor::TopicStatus::Clear();
  clear_has_topic_status();
}
const ::atd::monitor::TopicStatus& HardwareStatus::topic_status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.HardwareStatus.topic_status)
  return topic_status_ != NULL ? *topic_status_
                         : *::atd::monitor::TopicStatus::internal_default_instance();
}
::atd::monitor::TopicStatus* HardwareStatus::mutable_topic_status() {
  set_has_topic_status();
  if (topic_status_ == NULL) {
    topic_status_ = new ::atd::monitor::TopicStatus;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.HardwareStatus.topic_status)
  return topic_status_;
}
::atd::monitor::TopicStatus* HardwareStatus::release_topic_status() {
  // @@protoc_insertion_point(field_release:atd.monitor.HardwareStatus.topic_status)
  clear_has_topic_status();
  ::atd::monitor::TopicStatus* temp = topic_status_;
  topic_status_ = NULL;
  return temp;
}
void HardwareStatus::set_allocated_topic_status(::atd::monitor::TopicStatus* topic_status) {
  delete topic_status_;
  topic_status_ = topic_status;
  if (topic_status) {
    set_has_topic_status();
  } else {
    clear_has_topic_status();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.HardwareStatus.topic_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ModuleStatus::kSummaryFieldNumber;
const int ModuleStatus::kMsgFieldNumber;
const int ModuleStatus::kProcessStatusFieldNumber;
const int ModuleStatus::kTopicStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ModuleStatus::ModuleStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.monitor.ModuleStatus)
}
ModuleStatus::ModuleStatus(const ModuleStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_msg()) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.has_process_status()) {
    process_status_ = new ::atd::monitor::ProcessStatus(*from.process_status_);
  } else {
    process_status_ = NULL;
  }
  if (from.has_topic_status()) {
    topic_status_ = new ::atd::monitor::TopicStatus(*from.topic_status_);
  } else {
    topic_status_ = NULL;
  }
  summary_ = from.summary_;
  // @@protoc_insertion_point(copy_constructor:atd.monitor.ModuleStatus)
}

void ModuleStatus::SharedCtor() {
  _cached_size_ = 0;
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&process_status_, 0, reinterpret_cast<char*>(&summary_) -
    reinterpret_cast<char*>(&process_status_) + sizeof(summary_));
}

ModuleStatus::~ModuleStatus() {
  // @@protoc_insertion_point(destructor:atd.monitor.ModuleStatus)
  SharedDtor();
}

void ModuleStatus::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete process_status_;
  }
  if (this != internal_default_instance()) {
    delete topic_status_;
  }
}

void ModuleStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ModuleStatus& ModuleStatus::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

ModuleStatus* ModuleStatus::New(::google::protobuf::Arena* arena) const {
  ModuleStatus* n = new ModuleStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ModuleStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.monitor.ModuleStatus)
  if (_has_bits_[0 / 32] & 7u) {
    if (has_msg()) {
      GOOGLE_DCHECK(!msg_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*msg_.UnsafeRawStringPointer())->clear();
    }
    if (has_process_status()) {
      GOOGLE_DCHECK(process_status_ != NULL);
      process_status_->::atd::monitor::ProcessStatus::Clear();
    }
    if (has_topic_status()) {
      GOOGLE_DCHECK(topic_status_ != NULL);
      topic_status_->::atd::monitor::TopicStatus::Clear();
    }
  }
  summary_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ModuleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.monitor.ModuleStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::monitor::Summary_IsValid(value)) {
            set_summary(static_cast< ::atd::monitor::Summary >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string msg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.monitor.ProcessStatus process_status = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_process_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.monitor.TopicStatus topic_status = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.monitor.ModuleStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.monitor.ModuleStatus)
  return false;
#undef DO_
}

void ModuleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.monitor.ModuleStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->summary(), output);
  }

  // optional string msg = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional .atd.monitor.ProcessStatus process_status = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->process_status_, output);
  }

  // optional .atd.monitor.TopicStatus topic_status = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->topic_status_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.monitor.ModuleStatus)
}

size_t ModuleStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.monitor.ModuleStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional .atd.monitor.ProcessStatus process_status = 3;
    if (has_process_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->process_status_);
    }

    // optional .atd.monitor.TopicStatus topic_status = 4;
    if (has_topic_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->topic_status_);
    }

    // optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
    if (has_summary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->summary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModuleStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ModuleStatus*>(&from));
}

void ModuleStatus::MergeFrom(const ModuleStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.monitor.ModuleStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_msg();
      msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_process_status()->::atd::monitor::ProcessStatus::MergeFrom(from.process_status());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_topic_status()->::atd::monitor::TopicStatus::MergeFrom(from.topic_status());
    }
    if (cached_has_bits & 0x00000008u) {
      summary_ = from.summary_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ModuleStatus::CopyFrom(const ModuleStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.monitor.ModuleStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModuleStatus::IsInitialized() const {
  return true;
}

void ModuleStatus::Swap(ModuleStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ModuleStatus::InternalSwap(ModuleStatus* other) {
  msg_.Swap(&other->msg_);
  std::swap(process_status_, other->process_status_);
  std::swap(topic_status_, other->topic_status_);
  std::swap(summary_, other->summary_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ModuleStatus::GetTypeName() const {
  return "atd.monitor.ModuleStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ModuleStatus

// optional .atd.monitor.Summary summary = 1 [default = UNKNOWN];
bool ModuleStatus::has_summary() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ModuleStatus::set_has_summary() {
  _has_bits_[0] |= 0x00000008u;
}
void ModuleStatus::clear_has_summary() {
  _has_bits_[0] &= ~0x00000008u;
}
void ModuleStatus::clear_summary() {
  summary_ = 0;
  clear_has_summary();
}
::atd::monitor::Summary ModuleStatus::summary() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.summary)
  return static_cast< ::atd::monitor::Summary >(summary_);
}
void ModuleStatus::set_summary(::atd::monitor::Summary value) {
  assert(::atd::monitor::Summary_IsValid(value));
  set_has_summary();
  summary_ = value;
  // @@protoc_insertion_point(field_set:atd.monitor.ModuleStatus.summary)
}

// optional string msg = 2;
bool ModuleStatus::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ModuleStatus::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
void ModuleStatus::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
void ModuleStatus::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
const ::std::string& ModuleStatus::msg() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.msg)
  return msg_.GetNoArena();
}
void ModuleStatus::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.monitor.ModuleStatus.msg)
}
#if LANG_CXX11
void ModuleStatus::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.monitor.ModuleStatus.msg)
}
#endif
void ModuleStatus::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.monitor.ModuleStatus.msg)
}
void ModuleStatus::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.monitor.ModuleStatus.msg)
}
::std::string* ModuleStatus::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:atd.monitor.ModuleStatus.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ModuleStatus::release_msg() {
  // @@protoc_insertion_point(field_release:atd.monitor.ModuleStatus.msg)
  clear_has_msg();
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ModuleStatus::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.ModuleStatus.msg)
}

// optional .atd.monitor.ProcessStatus process_status = 3;
bool ModuleStatus::has_process_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ModuleStatus::set_has_process_status() {
  _has_bits_[0] |= 0x00000002u;
}
void ModuleStatus::clear_has_process_status() {
  _has_bits_[0] &= ~0x00000002u;
}
void ModuleStatus::clear_process_status() {
  if (process_status_ != NULL) process_status_->::atd::monitor::ProcessStatus::Clear();
  clear_has_process_status();
}
const ::atd::monitor::ProcessStatus& ModuleStatus::process_status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.process_status)
  return process_status_ != NULL ? *process_status_
                         : *::atd::monitor::ProcessStatus::internal_default_instance();
}
::atd::monitor::ProcessStatus* ModuleStatus::mutable_process_status() {
  set_has_process_status();
  if (process_status_ == NULL) {
    process_status_ = new ::atd::monitor::ProcessStatus;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.ModuleStatus.process_status)
  return process_status_;
}
::atd::monitor::ProcessStatus* ModuleStatus::release_process_status() {
  // @@protoc_insertion_point(field_release:atd.monitor.ModuleStatus.process_status)
  clear_has_process_status();
  ::atd::monitor::ProcessStatus* temp = process_status_;
  process_status_ = NULL;
  return temp;
}
void ModuleStatus::set_allocated_process_status(::atd::monitor::ProcessStatus* process_status) {
  delete process_status_;
  process_status_ = process_status;
  if (process_status) {
    set_has_process_status();
  } else {
    clear_has_process_status();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.ModuleStatus.process_status)
}

// optional .atd.monitor.TopicStatus topic_status = 4;
bool ModuleStatus::has_topic_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ModuleStatus::set_has_topic_status() {
  _has_bits_[0] |= 0x00000004u;
}
void ModuleStatus::clear_has_topic_status() {
  _has_bits_[0] &= ~0x00000004u;
}
void ModuleStatus::clear_topic_status() {
  if (topic_status_ != NULL) topic_status_->::atd::monitor::TopicStatus::Clear();
  clear_has_topic_status();
}
const ::atd::monitor::TopicStatus& ModuleStatus::topic_status() const {
  // @@protoc_insertion_point(field_get:atd.monitor.ModuleStatus.topic_status)
  return topic_status_ != NULL ? *topic_status_
                         : *::atd::monitor::TopicStatus::internal_default_instance();
}
::atd::monitor::TopicStatus* ModuleStatus::mutable_topic_status() {
  set_has_topic_status();
  if (topic_status_ == NULL) {
    topic_status_ = new ::atd::monitor::TopicStatus;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.ModuleStatus.topic_status)
  return topic_status_;
}
::atd::monitor::TopicStatus* ModuleStatus::release_topic_status() {
  // @@protoc_insertion_point(field_release:atd.monitor.ModuleStatus.topic_status)
  clear_has_topic_status();
  ::atd::monitor::TopicStatus* temp = topic_status_;
  topic_status_ = NULL;
  return temp;
}
void ModuleStatus::set_allocated_topic_status(::atd::monitor::TopicStatus* topic_status) {
  delete topic_status_;
  topic_status_ = topic_status;
  if (topic_status) {
    set_has_topic_status();
  } else {
    clear_has_topic_status();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.ModuleStatus.topic_status)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemStatus::kHeaderFieldNumber;
const int SystemStatus::kModulesFieldNumber;
const int SystemStatus::kHardwareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemStatus::SystemStatus()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.monitor.SystemStatus)
}
SystemStatus::SystemStatus(const SystemStatus& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  modules_.MergeFrom(from.modules_);
  hardware_.MergeFrom(from.hardware_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.monitor.SystemStatus)
}

void SystemStatus::SharedCtor() {
  _cached_size_ = 0;
  header_ = NULL;
}

SystemStatus::~SystemStatus() {
  // @@protoc_insertion_point(destructor:atd.monitor.SystemStatus)
  SharedDtor();
}

void SystemStatus::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void SystemStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemStatus& SystemStatus::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fmonitor_2fsystem_5fstatus_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemStatus* SystemStatus::New(::google::protobuf::Arena* arena) const {
  SystemStatus* n = new SystemStatus;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.monitor.SystemStatus)
  modules_.Clear();
  hardware_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::atd::common::Header::Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool SystemStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.monitor.SystemStatus)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .atd.monitor.ModuleStatus> modules = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          SystemStatus_ModulesEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              SystemStatus_ModulesEntry,
              ::std::string, ::atd::monitor::ModuleStatus,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus > > parser(&modules_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .atd.monitor.HardwareStatus> hardware = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          SystemStatus_HardwareEntry::Parser< ::google::protobuf::internal::MapFieldLite<
              SystemStatus_HardwareEntry,
              ::std::string, ::atd::monitor::HardwareStatus,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus > > parser(&hardware_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.monitor.SystemStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.monitor.SystemStatus)
  return false;
#undef DO_
}

void SystemStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.monitor.SystemStatus)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // map<string, .atd.monitor.ModuleStatus> modules = 2;
  if (!this->modules().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->modules().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->modules().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SystemStatus_ModulesEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(modules_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SystemStatus_ModulesEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >::const_iterator
          it = this->modules().begin();
          it != this->modules().end(); ++it) {
        entry.reset(modules_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            2, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<string, .atd.monitor.HardwareStatus> hardware = 3;
  if (!this->hardware().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->hardware().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->hardware().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it, ++n) {
        items[n] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[n], Less());
      ::google::protobuf::scoped_ptr<SystemStatus_HardwareEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(hardware_.NewEntryWrapper(
            items[i]->first, items[i]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(items[i]);
      }
    } else {
      ::google::protobuf::scoped_ptr<SystemStatus_HardwareEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >::const_iterator
          it = this->hardware().begin();
          it != this->hardware().end(); ++it) {
        entry.reset(hardware_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessage(
            3, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.monitor.SystemStatus)
}

size_t SystemStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.monitor.SystemStatus)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // map<string, .atd.monitor.ModuleStatus> modules = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->modules_size());
  {
    ::google::protobuf::scoped_ptr<SystemStatus_ModulesEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >::const_iterator
        it = this->modules().begin();
        it != this->modules().end(); ++it) {
      entry.reset(modules_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<string, .atd.monitor.HardwareStatus> hardware = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->hardware_size());
  {
    ::google::protobuf::scoped_ptr<SystemStatus_HardwareEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >::const_iterator
        it = this->hardware().begin();
        it != this->hardware().end(); ++it) {
      entry.reset(hardware_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // optional .atd.common.Header header = 1;
  if (has_header()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->header_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemStatus::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemStatus*>(&from));
}

void SystemStatus::MergeFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.monitor.SystemStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  modules_.MergeFrom(from.modules_);
  hardware_.MergeFrom(from.hardware_);
  if (from.has_header()) {
    mutable_header()->::atd::common::Header::MergeFrom(from.header());
  }
}

void SystemStatus::CopyFrom(const SystemStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.monitor.SystemStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemStatus::IsInitialized() const {
  return true;
}

void SystemStatus::Swap(SystemStatus* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemStatus::InternalSwap(SystemStatus* other) {
  modules_.Swap(&other->modules_);
  hardware_.Swap(&other->hardware_);
  std::swap(header_, other->header_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemStatus::GetTypeName() const {
  return "atd.monitor.SystemStatus";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemStatus

// optional .atd.common.Header header = 1;
bool SystemStatus::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SystemStatus::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void SystemStatus::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void SystemStatus::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& SystemStatus::header() const {
  // @@protoc_insertion_point(field_get:atd.monitor.SystemStatus.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* SystemStatus::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.monitor.SystemStatus.header)
  return header_;
}
::atd::common::Header* SystemStatus::release_header() {
  // @@protoc_insertion_point(field_release:atd.monitor.SystemStatus.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void SystemStatus::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.monitor.SystemStatus.header)
}

// map<string, .atd.monitor.ModuleStatus> modules = 2;
int SystemStatus::modules_size() const {
  return modules_.size();
}
void SystemStatus::clear_modules() {
  modules_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >&
SystemStatus::modules() const {
  // @@protoc_insertion_point(field_map:atd.monitor.SystemStatus.modules)
  return modules_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::atd::monitor::ModuleStatus >*
SystemStatus::mutable_modules() {
  // @@protoc_insertion_point(field_mutable_map:atd.monitor.SystemStatus.modules)
  return modules_.MutableMap();
}

// map<string, .atd.monitor.HardwareStatus> hardware = 3;
int SystemStatus::hardware_size() const {
  return hardware_.size();
}
void SystemStatus::clear_hardware() {
  hardware_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >&
SystemStatus::hardware() const {
  // @@protoc_insertion_point(field_map:atd.monitor.SystemStatus.hardware)
  return hardware_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::atd::monitor::HardwareStatus >*
SystemStatus::mutable_hardware() {
  // @@protoc_insertion_point(field_mutable_map:atd.monitor.SystemStatus.hardware)
  return hardware_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace monitor
}  // namespace atd

// @@protoc_insertion_point(global_scope)
