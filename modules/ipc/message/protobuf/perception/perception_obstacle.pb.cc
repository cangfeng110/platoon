// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/perception/perception_obstacle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/perception/perception_obstacle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace perception {
class PointDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point> {
} _Point_default_instance_;
class PerceptionObstacleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacle> {
} _PerceptionObstacle_default_instance_;
class PerceptionObstaclesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PerceptionObstacles> {
} _PerceptionObstacles_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Point_default_instance_.Shutdown();
  _PerceptionObstacle_default_instance_.Shutdown();
  _PerceptionObstacles_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2ferror_5fcode_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  _Point_default_instance_.DefaultConstruct();
  _PerceptionObstacle_default_instance_.DefaultConstruct();
  _PerceptionObstacles_default_instance_.DefaultConstruct();
  _PerceptionObstacle_default_instance_.get_mutable()->position_ = const_cast< ::atd::perception::Point*>(
      ::atd::perception::Point::internal_default_instance());
  _PerceptionObstacle_default_instance_.get_mutable()->velocity_ = const_cast< ::atd::perception::Point*>(
      ::atd::perception::Point::internal_default_instance());
  _PerceptionObstacles_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2ferror_5fcode_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto

bool PerceptionObstacle_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_MOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::UNKNOWN_UNMOVABLE;
const PerceptionObstacle_Type PerceptionObstacle::PEDESTRIAN;
const PerceptionObstacle_Type PerceptionObstacle::BICYCLE;
const PerceptionObstacle_Type PerceptionObstacle::VEHICLE;
const PerceptionObstacle_Type PerceptionObstacle::Type_MIN;
const PerceptionObstacle_Type PerceptionObstacle::Type_MAX;
const int PerceptionObstacle::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool PerceptionObstacle_ConfidenceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_UNKNOWN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_CNN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::CONFIDENCE_RADAR;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MIN;
const PerceptionObstacle_ConfidenceType PerceptionObstacle::ConfidenceType_MAX;
const int PerceptionObstacle::ConfidenceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point::kXFieldNumber;
const int Point::kYFieldNumber;
const int Point::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point::Point()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.Point)
}
Point::Point(const Point& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:atd.perception.Point)
}

void Point::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
}

Point::~Point() {
  // @@protoc_insertion_point(destructor:atd.perception.Point)
  SharedDtor();
}

void Point::SharedDtor() {
}

void Point::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Point& Point::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point* Point::New(::google::protobuf::Arena* arena) const {
  Point* n = new Point;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.Point)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&x_, 0, reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_) + sizeof(z_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.Point)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.Point)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.Point)
  return false;
#undef DO_
}

void Point::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.Point)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.Point)
}

size_t Point::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.Point)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1;
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2;
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3;
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point*>(&from));
}

void Point::MergeFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.Point)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point::CopyFrom(const Point& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.Point)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point::IsInitialized() const {
  return true;
}

void Point::Swap(Point* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point::InternalSwap(Point* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Point::GetTypeName() const {
  return "atd.perception.Point";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point

// optional double x = 1;
bool Point::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point::clear_x() {
  x_ = 0;
  clear_has_x();
}
double Point::x() const {
  // @@protoc_insertion_point(field_get:atd.perception.Point.x)
  return x_;
}
void Point::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Point.x)
}

// optional double y = 2;
bool Point::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point::clear_y() {
  y_ = 0;
  clear_has_y();
}
double Point::y() const {
  // @@protoc_insertion_point(field_get:atd.perception.Point.y)
  return y_;
}
void Point::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Point.y)
}

// optional double z = 3;
bool Point::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point::clear_z() {
  z_ = 0;
  clear_has_z();
}
double Point::z() const {
  // @@protoc_insertion_point(field_get:atd.perception.Point.z)
  return z_;
}
void Point::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Point.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacle::kIdFieldNumber;
const int PerceptionObstacle::kPositionFieldNumber;
const int PerceptionObstacle::kThetaFieldNumber;
const int PerceptionObstacle::kVelocityFieldNumber;
const int PerceptionObstacle::kLengthFieldNumber;
const int PerceptionObstacle::kWidthFieldNumber;
const int PerceptionObstacle::kHeightFieldNumber;
const int PerceptionObstacle::kPolygonPointFieldNumber;
const int PerceptionObstacle::kTrackingTimeFieldNumber;
const int PerceptionObstacle::kTypeFieldNumber;
const int PerceptionObstacle::kTimestampFieldNumber;
const int PerceptionObstacle::kPointCloudFieldNumber;
const int PerceptionObstacle::kConfidenceFieldNumber;
const int PerceptionObstacle::kConfidenceTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacle::PerceptionObstacle()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.PerceptionObstacle)
}
PerceptionObstacle::PerceptionObstacle(const PerceptionObstacle& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      polygon_point_(from.polygon_point_),
      point_cloud_(from.point_cloud_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_position()) {
    position_ = new ::atd::perception::Point(*from.position_);
  } else {
    position_ = NULL;
  }
  if (from.has_velocity()) {
    velocity_ = new ::atd::perception::Point(*from.velocity_);
  } else {
    velocity_ = NULL;
  }
  ::memcpy(&theta_, &from.theta_,
    reinterpret_cast<char*>(&confidence_) -
    reinterpret_cast<char*>(&theta_) + sizeof(confidence_));
  // @@protoc_insertion_point(copy_constructor:atd.perception.PerceptionObstacle)
}

void PerceptionObstacle::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&position_, 0, reinterpret_cast<char*>(&timestamp_) -
    reinterpret_cast<char*>(&position_) + sizeof(timestamp_));
  confidence_type_ = 1;
  confidence_ = 1;
}

PerceptionObstacle::~PerceptionObstacle() {
  // @@protoc_insertion_point(destructor:atd.perception.PerceptionObstacle)
  SharedDtor();
}

void PerceptionObstacle::SharedDtor() {
  if (this != internal_default_instance()) {
    delete position_;
  }
  if (this != internal_default_instance()) {
    delete velocity_;
  }
}

void PerceptionObstacle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerceptionObstacle& PerceptionObstacle::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacle* PerceptionObstacle::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacle* n = new PerceptionObstacle;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacle::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.PerceptionObstacle)
  polygon_point_.Clear();
  point_cloud_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_position()) {
      GOOGLE_DCHECK(position_ != NULL);
      position_->::atd::perception::Point::Clear();
    }
    if (has_velocity()) {
      GOOGLE_DCHECK(velocity_ != NULL);
      velocity_->::atd::perception::Point::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 252u) {
    ::memset(&theta_, 0, reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&theta_) + sizeof(height_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&tracking_time_, 0, reinterpret_cast<char*>(&timestamp_) -
      reinterpret_cast<char*>(&tracking_time_) + sizeof(timestamp_));
    confidence_type_ = 1;
    confidence_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.PerceptionObstacle)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.perception.Point position = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double theta = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_theta();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &theta_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.perception.Point velocity = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double length = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(41u)) {
          set_has_length();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &length_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double width = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(49u)) {
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(57u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.perception.Point polygon_point = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_polygon_point()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double tracking_time = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(73u)) {
          set_has_tracking_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tracking_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.perception.PerceptionObstacle.Type type = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(80u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::perception::PerceptionObstacle_Type_IsValid(value)) {
            set_type(static_cast< ::atd::perception::PerceptionObstacle_Type >(value));
          } else {
            unknown_fields_stream.WriteVarint32(80u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double timestamp = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated double point_cloud = 12 [packed = true];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_point_cloud())));
        } else if (static_cast< ::google::protobuf::uint8>(tag) ==
                   static_cast< ::google::protobuf::uint8>(97u)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 98u, input, this->mutable_point_cloud())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double confidence = 13 [default = 1];
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(105u)) {
          set_has_confidence();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &confidence_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::perception::PerceptionObstacle_ConfidenceType_IsValid(value)) {
            set_confidence_type(static_cast< ::atd::perception::PerceptionObstacle_ConfidenceType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(112u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.PerceptionObstacle)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.PerceptionObstacle)
  return false;
#undef DO_
}

void PerceptionObstacle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.PerceptionObstacle)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional .atd.perception.Point position = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->position_, output);
  }

  // optional double theta = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->theta(), output);
  }

  // optional .atd.perception.Point velocity = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->velocity_, output);
  }

  // optional double length = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->length(), output);
  }

  // optional double width = 6;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->width(), output);
  }

  // optional double height = 7;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->height(), output);
  }

  // repeated .atd.perception.Point polygon_point = 8;
  for (unsigned int i = 0, n = this->polygon_point_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->polygon_point(i), output);
  }

  // optional double tracking_time = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->tracking_time(), output);
  }

  // optional .atd.perception.PerceptionObstacle.Type type = 10;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->type(), output);
  }

  // optional double timestamp = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->timestamp(), output);
  }

  // repeated double point_cloud = 12 [packed = true];
  if (this->point_cloud_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(12, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_point_cloud_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteDoubleArray(
      this->point_cloud().data(), this->point_cloud_size(), output);
  }

  // optional double confidence = 13 [default = 1];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->confidence(), output);
  }

  // optional .atd.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      14, this->confidence_type(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.PerceptionObstacle)
}

size_t PerceptionObstacle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.PerceptionObstacle)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.perception.Point polygon_point = 8;
  {
    unsigned int count = this->polygon_point_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->polygon_point(i));
    }
  }

  // repeated double point_cloud = 12 [packed = true];
  {
    unsigned int count = this->point_cloud_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _point_cloud_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.perception.Point position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->position_);
    }

    // optional .atd.perception.Point velocity = 4;
    if (has_velocity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->velocity_);
    }

    // optional double theta = 3;
    if (has_theta()) {
      total_size += 1 + 8;
    }

    // optional double length = 5;
    if (has_length()) {
      total_size += 1 + 8;
    }

    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional .atd.perception.PerceptionObstacle.Type type = 10;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional double width = 6;
    if (has_width()) {
      total_size += 1 + 8;
    }

    // optional double height = 7;
    if (has_height()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & 3840u) {
    // optional double tracking_time = 9;
    if (has_tracking_time()) {
      total_size += 1 + 8;
    }

    // optional double timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 + 8;
    }

    // optional .atd.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
    if (has_confidence_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->confidence_type());
    }

    // optional double confidence = 13 [default = 1];
    if (has_confidence()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacle::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerceptionObstacle*>(&from));
}

void PerceptionObstacle::MergeFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.PerceptionObstacle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  polygon_point_.MergeFrom(from.polygon_point_);
  point_cloud_.MergeFrom(from.point_cloud_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_position()->::atd::perception::Point::MergeFrom(from.position());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_velocity()->::atd::perception::Point::MergeFrom(from.velocity());
    }
    if (cached_has_bits & 0x00000004u) {
      theta_ = from.theta_;
    }
    if (cached_has_bits & 0x00000008u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000010u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000020u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      tracking_time_ = from.tracking_time_;
    }
    if (cached_has_bits & 0x00000200u) {
      timestamp_ = from.timestamp_;
    }
    if (cached_has_bits & 0x00000400u) {
      confidence_type_ = from.confidence_type_;
    }
    if (cached_has_bits & 0x00000800u) {
      confidence_ = from.confidence_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacle::CopyFrom(const PerceptionObstacle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.PerceptionObstacle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacle::IsInitialized() const {
  return true;
}

void PerceptionObstacle::Swap(PerceptionObstacle* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacle::InternalSwap(PerceptionObstacle* other) {
  polygon_point_.InternalSwap(&other->polygon_point_);
  point_cloud_.InternalSwap(&other->point_cloud_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(theta_, other->theta_);
  std::swap(length_, other->length_);
  std::swap(id_, other->id_);
  std::swap(type_, other->type_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(tracking_time_, other->tracking_time_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(confidence_type_, other->confidence_type_);
  std::swap(confidence_, other->confidence_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerceptionObstacle::GetTypeName() const {
  return "atd.perception.PerceptionObstacle";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacle

// optional int32 id = 1;
bool PerceptionObstacle::has_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void PerceptionObstacle::set_has_id() {
  _has_bits_[0] |= 0x00000010u;
}
void PerceptionObstacle::clear_has_id() {
  _has_bits_[0] &= ~0x00000010u;
}
void PerceptionObstacle::clear_id() {
  id_ = 0;
  clear_has_id();
}
::google::protobuf::int32 PerceptionObstacle::id() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.id)
  return id_;
}
void PerceptionObstacle::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.id)
}

// optional .atd.perception.Point position = 2;
bool PerceptionObstacle::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacle::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacle::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacle::clear_position() {
  if (position_ != NULL) position_->::atd::perception::Point::Clear();
  clear_has_position();
}
const ::atd::perception::Point& PerceptionObstacle::position() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.position)
  return position_ != NULL ? *position_
                         : *::atd::perception::Point::internal_default_instance();
}
::atd::perception::Point* PerceptionObstacle::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::atd::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:atd.perception.PerceptionObstacle.position)
  return position_;
}
::atd::perception::Point* PerceptionObstacle::release_position() {
  // @@protoc_insertion_point(field_release:atd.perception.PerceptionObstacle.position)
  clear_has_position();
  ::atd::perception::Point* temp = position_;
  position_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_position(::atd::perception::Point* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.perception.PerceptionObstacle.position)
}

// optional double theta = 3;
bool PerceptionObstacle::has_theta() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PerceptionObstacle::set_has_theta() {
  _has_bits_[0] |= 0x00000004u;
}
void PerceptionObstacle::clear_has_theta() {
  _has_bits_[0] &= ~0x00000004u;
}
void PerceptionObstacle::clear_theta() {
  theta_ = 0;
  clear_has_theta();
}
double PerceptionObstacle::theta() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.theta)
  return theta_;
}
void PerceptionObstacle::set_theta(double value) {
  set_has_theta();
  theta_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.theta)
}

// optional .atd.perception.Point velocity = 4;
bool PerceptionObstacle::has_velocity() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacle::set_has_velocity() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacle::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacle::clear_velocity() {
  if (velocity_ != NULL) velocity_->::atd::perception::Point::Clear();
  clear_has_velocity();
}
const ::atd::perception::Point& PerceptionObstacle::velocity() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.velocity)
  return velocity_ != NULL ? *velocity_
                         : *::atd::perception::Point::internal_default_instance();
}
::atd::perception::Point* PerceptionObstacle::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::atd::perception::Point;
  }
  // @@protoc_insertion_point(field_mutable:atd.perception.PerceptionObstacle.velocity)
  return velocity_;
}
::atd::perception::Point* PerceptionObstacle::release_velocity() {
  // @@protoc_insertion_point(field_release:atd.perception.PerceptionObstacle.velocity)
  clear_has_velocity();
  ::atd::perception::Point* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void PerceptionObstacle::set_allocated_velocity(::atd::perception::Point* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.perception.PerceptionObstacle.velocity)
}

// optional double length = 5;
bool PerceptionObstacle::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void PerceptionObstacle::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
void PerceptionObstacle::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
void PerceptionObstacle::clear_length() {
  length_ = 0;
  clear_has_length();
}
double PerceptionObstacle::length() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.length)
  return length_;
}
void PerceptionObstacle::set_length(double value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.length)
}

// optional double width = 6;
bool PerceptionObstacle::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void PerceptionObstacle::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void PerceptionObstacle::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void PerceptionObstacle::clear_width() {
  width_ = 0;
  clear_has_width();
}
double PerceptionObstacle::width() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.width)
  return width_;
}
void PerceptionObstacle::set_width(double value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.width)
}

// optional double height = 7;
bool PerceptionObstacle::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void PerceptionObstacle::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void PerceptionObstacle::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void PerceptionObstacle::clear_height() {
  height_ = 0;
  clear_has_height();
}
double PerceptionObstacle::height() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.height)
  return height_;
}
void PerceptionObstacle::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.height)
}

// repeated .atd.perception.Point polygon_point = 8;
int PerceptionObstacle::polygon_point_size() const {
  return polygon_point_.size();
}
void PerceptionObstacle::clear_polygon_point() {
  polygon_point_.Clear();
}
const ::atd::perception::Point& PerceptionObstacle::polygon_point(int index) const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Get(index);
}
::atd::perception::Point* PerceptionObstacle::mutable_polygon_point(int index) {
  // @@protoc_insertion_point(field_mutable:atd.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Mutable(index);
}
::atd::perception::Point* PerceptionObstacle::add_polygon_point() {
  // @@protoc_insertion_point(field_add:atd.perception.PerceptionObstacle.polygon_point)
  return polygon_point_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::perception::Point >*
PerceptionObstacle::mutable_polygon_point() {
  // @@protoc_insertion_point(field_mutable_list:atd.perception.PerceptionObstacle.polygon_point)
  return &polygon_point_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::perception::Point >&
PerceptionObstacle::polygon_point() const {
  // @@protoc_insertion_point(field_list:atd.perception.PerceptionObstacle.polygon_point)
  return polygon_point_;
}

// optional double tracking_time = 9;
bool PerceptionObstacle::has_tracking_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void PerceptionObstacle::set_has_tracking_time() {
  _has_bits_[0] |= 0x00000100u;
}
void PerceptionObstacle::clear_has_tracking_time() {
  _has_bits_[0] &= ~0x00000100u;
}
void PerceptionObstacle::clear_tracking_time() {
  tracking_time_ = 0;
  clear_has_tracking_time();
}
double PerceptionObstacle::tracking_time() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.tracking_time)
  return tracking_time_;
}
void PerceptionObstacle::set_tracking_time(double value) {
  set_has_tracking_time();
  tracking_time_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.tracking_time)
}

// optional .atd.perception.PerceptionObstacle.Type type = 10;
bool PerceptionObstacle::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void PerceptionObstacle::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
void PerceptionObstacle::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
void PerceptionObstacle::clear_type() {
  type_ = 0;
  clear_has_type();
}
::atd::perception::PerceptionObstacle_Type PerceptionObstacle::type() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.type)
  return static_cast< ::atd::perception::PerceptionObstacle_Type >(type_);
}
void PerceptionObstacle::set_type(::atd::perception::PerceptionObstacle_Type value) {
  assert(::atd::perception::PerceptionObstacle_Type_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.type)
}

// optional double timestamp = 11;
bool PerceptionObstacle::has_timestamp() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void PerceptionObstacle::set_has_timestamp() {
  _has_bits_[0] |= 0x00000200u;
}
void PerceptionObstacle::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000200u;
}
void PerceptionObstacle::clear_timestamp() {
  timestamp_ = 0;
  clear_has_timestamp();
}
double PerceptionObstacle::timestamp() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.timestamp)
  return timestamp_;
}
void PerceptionObstacle::set_timestamp(double value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.timestamp)
}

// repeated double point_cloud = 12 [packed = true];
int PerceptionObstacle::point_cloud_size() const {
  return point_cloud_.size();
}
void PerceptionObstacle::clear_point_cloud() {
  point_cloud_.Clear();
}
double PerceptionObstacle::point_cloud(int index) const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.point_cloud)
  return point_cloud_.Get(index);
}
void PerceptionObstacle::set_point_cloud(int index, double value) {
  point_cloud_.Set(index, value);
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.point_cloud)
}
void PerceptionObstacle::add_point_cloud(double value) {
  point_cloud_.Add(value);
  // @@protoc_insertion_point(field_add:atd.perception.PerceptionObstacle.point_cloud)
}
const ::google::protobuf::RepeatedField< double >&
PerceptionObstacle::point_cloud() const {
  // @@protoc_insertion_point(field_list:atd.perception.PerceptionObstacle.point_cloud)
  return point_cloud_;
}
::google::protobuf::RepeatedField< double >*
PerceptionObstacle::mutable_point_cloud() {
  // @@protoc_insertion_point(field_mutable_list:atd.perception.PerceptionObstacle.point_cloud)
  return &point_cloud_;
}

// optional double confidence = 13 [default = 1];
bool PerceptionObstacle::has_confidence() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void PerceptionObstacle::set_has_confidence() {
  _has_bits_[0] |= 0x00000800u;
}
void PerceptionObstacle::clear_has_confidence() {
  _has_bits_[0] &= ~0x00000800u;
}
void PerceptionObstacle::clear_confidence() {
  confidence_ = 1;
  clear_has_confidence();
}
double PerceptionObstacle::confidence() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.confidence)
  return confidence_;
}
void PerceptionObstacle::set_confidence(double value) {
  set_has_confidence();
  confidence_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.confidence)
}

// optional .atd.perception.PerceptionObstacle.ConfidenceType confidence_type = 14 [default = CONFIDENCE_CNN];
bool PerceptionObstacle::has_confidence_type() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void PerceptionObstacle::set_has_confidence_type() {
  _has_bits_[0] |= 0x00000400u;
}
void PerceptionObstacle::clear_has_confidence_type() {
  _has_bits_[0] &= ~0x00000400u;
}
void PerceptionObstacle::clear_confidence_type() {
  confidence_type_ = 1;
  clear_has_confidence_type();
}
::atd::perception::PerceptionObstacle_ConfidenceType PerceptionObstacle::confidence_type() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacle.confidence_type)
  return static_cast< ::atd::perception::PerceptionObstacle_ConfidenceType >(confidence_type_);
}
void PerceptionObstacle::set_confidence_type(::atd::perception::PerceptionObstacle_ConfidenceType value) {
  assert(::atd::perception::PerceptionObstacle_ConfidenceType_IsValid(value));
  set_has_confidence_type();
  confidence_type_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacle.confidence_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PerceptionObstacles::kPerceptionObstacleFieldNumber;
const int PerceptionObstacles::kHeaderFieldNumber;
const int PerceptionObstacles::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PerceptionObstacles::PerceptionObstacles()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.PerceptionObstacles)
}
PerceptionObstacles::PerceptionObstacles(const PerceptionObstacles& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      perception_obstacle_(from.perception_obstacle_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:atd.perception.PerceptionObstacles)
}

void PerceptionObstacles::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&header_) + sizeof(error_code_));
}

PerceptionObstacles::~PerceptionObstacles() {
  // @@protoc_insertion_point(destructor:atd.perception.PerceptionObstacles)
  SharedDtor();
}

void PerceptionObstacles::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
}

void PerceptionObstacles::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PerceptionObstacles& PerceptionObstacles::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fperception_5fobstacle_2eproto::InitDefaults();
  return *internal_default_instance();
}

PerceptionObstacles* PerceptionObstacles::New(::google::protobuf::Arena* arena) const {
  PerceptionObstacles* n = new PerceptionObstacles;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PerceptionObstacles::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.PerceptionObstacles)
  perception_obstacle_.Clear();
  if (has_header()) {
    GOOGLE_DCHECK(header_ != NULL);
    header_->::atd::common::Header::Clear();
  }
  error_code_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PerceptionObstacles::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.PerceptionObstacles)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .atd.perception.PerceptionObstacle perception_obstacle = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_perception_obstacle()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.ErrorCode error_code = 3 [default = OK];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::common::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::atd::common::ErrorCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(24u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.PerceptionObstacles)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.PerceptionObstacles)
  return false;
#undef DO_
}

void PerceptionObstacles::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.PerceptionObstacles)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .atd.perception.PerceptionObstacle perception_obstacle = 1;
  for (unsigned int i = 0, n = this->perception_obstacle_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->perception_obstacle(i), output);
  }

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->header_, output);
  }

  // optional .atd.common.ErrorCode error_code = 3 [default = OK];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->error_code(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.PerceptionObstacles)
}

size_t PerceptionObstacles::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.PerceptionObstacles)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.perception.PerceptionObstacle perception_obstacle = 1;
  {
    unsigned int count = this->perception_obstacle_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->perception_obstacle(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 2;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.ErrorCode error_code = 3 [default = OK];
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PerceptionObstacles::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PerceptionObstacles*>(&from));
}

void PerceptionObstacles::MergeFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.PerceptionObstacles)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  perception_obstacle_.MergeFrom(from.perception_obstacle_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PerceptionObstacles::CopyFrom(const PerceptionObstacles& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.PerceptionObstacles)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PerceptionObstacles::IsInitialized() const {
  return true;
}

void PerceptionObstacles::Swap(PerceptionObstacles* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PerceptionObstacles::InternalSwap(PerceptionObstacles* other) {
  perception_obstacle_.InternalSwap(&other->perception_obstacle_);
  std::swap(header_, other->header_);
  std::swap(error_code_, other->error_code_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PerceptionObstacles::GetTypeName() const {
  return "atd.perception.PerceptionObstacles";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PerceptionObstacles

// repeated .atd.perception.PerceptionObstacle perception_obstacle = 1;
int PerceptionObstacles::perception_obstacle_size() const {
  return perception_obstacle_.size();
}
void PerceptionObstacles::clear_perception_obstacle() {
  perception_obstacle_.Clear();
}
const ::atd::perception::PerceptionObstacle& PerceptionObstacles::perception_obstacle(int index) const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Get(index);
}
::atd::perception::PerceptionObstacle* PerceptionObstacles::mutable_perception_obstacle(int index) {
  // @@protoc_insertion_point(field_mutable:atd.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Mutable(index);
}
::atd::perception::PerceptionObstacle* PerceptionObstacles::add_perception_obstacle() {
  // @@protoc_insertion_point(field_add:atd.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::perception::PerceptionObstacle >*
PerceptionObstacles::mutable_perception_obstacle() {
  // @@protoc_insertion_point(field_mutable_list:atd.perception.PerceptionObstacles.perception_obstacle)
  return &perception_obstacle_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::perception::PerceptionObstacle >&
PerceptionObstacles::perception_obstacle() const {
  // @@protoc_insertion_point(field_list:atd.perception.PerceptionObstacles.perception_obstacle)
  return perception_obstacle_;
}

// optional .atd.common.Header header = 2;
bool PerceptionObstacles::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PerceptionObstacles::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void PerceptionObstacles::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void PerceptionObstacles::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& PerceptionObstacles::header() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacles.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* PerceptionObstacles::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.perception.PerceptionObstacles.header)
  return header_;
}
::atd::common::Header* PerceptionObstacles::release_header() {
  // @@protoc_insertion_point(field_release:atd.perception.PerceptionObstacles.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void PerceptionObstacles::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.perception.PerceptionObstacles.header)
}

// optional .atd.common.ErrorCode error_code = 3 [default = OK];
bool PerceptionObstacles::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PerceptionObstacles::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
void PerceptionObstacles::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
void PerceptionObstacles::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::atd::common::ErrorCode PerceptionObstacles::error_code() const {
  // @@protoc_insertion_point(field_get:atd.perception.PerceptionObstacles.error_code)
  return static_cast< ::atd::common::ErrorCode >(error_code_);
}
void PerceptionObstacles::set_error_code(::atd::common::ErrorCode value) {
  assert(::atd::common::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.PerceptionObstacles.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace atd

// @@protoc_insertion_point(global_scope)
