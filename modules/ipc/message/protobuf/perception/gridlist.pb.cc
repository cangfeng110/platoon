// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/perception/gridlist.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/perception/gridlist.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace perception {
class GridDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Grid> {
} _Grid_default_instance_;
class GridListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GridList> {
} _GridList_default_instance_;
class GridDisplayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<GridDisplay> {
} _GridDisplay_default_instance_;
class OneMatchDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OneMatch> {
} _OneMatch_default_instance_;
class MatchDisplayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MatchDisplay> {
} _MatchDisplay_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Grid_default_instance_.Shutdown();
  _GridList_default_instance_.Shutdown();
  _GridDisplay_default_instance_.Shutdown();
  _OneMatch_default_instance_.Shutdown();
  _MatchDisplay_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _Grid_default_instance_.DefaultConstruct();
  _GridList_default_instance_.DefaultConstruct();
  _GridDisplay_default_instance_.DefaultConstruct();
  _OneMatch_default_instance_.DefaultConstruct();
  _MatchDisplay_default_instance_.DefaultConstruct();
  _GridList_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _GridList_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _MatchDisplay_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _MatchDisplay_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Grid::kRowindexFieldNumber;
const int Grid::kColumnindexFieldNumber;
const int Grid::kBfLocalFieldNumber;
const int Grid::kBfMoveFieldNumber;
const int Grid::kBfFreeFieldNumber;
const int Grid::kBfOccupyFieldNumber;
const int Grid::kBfFreeLaneFieldNumber;
const int Grid::kBfFreeLaneSolidFieldNumber;
const int Grid::kBfFreeLaneDashFieldNumber;
const int Grid::kBfFreeLaneDsolidFieldNumber;
const int Grid::kBfFreeLaneEdgeFieldNumber;
const int Grid::kBfFreeLaneBarrierFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Grid::Grid()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.Grid)
}
Grid::Grid(const Grid& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&bf_local_, &from.bf_local_,
    reinterpret_cast<char*>(&columnindex_) -
    reinterpret_cast<char*>(&bf_local_) + sizeof(columnindex_));
  // @@protoc_insertion_point(copy_constructor:atd.perception.Grid)
}

void Grid::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&bf_local_, 0, reinterpret_cast<char*>(&columnindex_) -
    reinterpret_cast<char*>(&bf_local_) + sizeof(columnindex_));
}

Grid::~Grid() {
  // @@protoc_insertion_point(destructor:atd.perception.Grid)
  SharedDtor();
}

void Grid::SharedDtor() {
}

void Grid::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Grid& Grid::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  return *internal_default_instance();
}

Grid* Grid::New(::google::protobuf::Arena* arena) const {
  Grid* n = new Grid;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Grid::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.Grid)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&bf_local_, 0, reinterpret_cast<char*>(&bf_free_lane_dsolid_) -
      reinterpret_cast<char*>(&bf_local_) + sizeof(bf_free_lane_dsolid_));
  }
  if (_has_bits_[8 / 32] & 3840u) {
    ::memset(&bf_free_lane_edge_, 0, reinterpret_cast<char*>(&columnindex_) -
      reinterpret_cast<char*>(&bf_free_lane_edge_) + sizeof(columnindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Grid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.Grid)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float bf_local = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_bf_local();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_local_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_move = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_bf_move();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_move_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_free = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_bf_free();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_free_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_occupy = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_bf_occupy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_occupy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_free_lane = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_bf_free_lane();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_free_lane_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_free_lane_solid = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_bf_free_lane_solid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_free_lane_solid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_free_lane_dash = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_bf_free_lane_dash();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_free_lane_dash_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_free_lane_dsolid = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_bf_free_lane_dsolid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_free_lane_dsolid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_free_lane_edge = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_bf_free_lane_edge();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_free_lane_edge_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float bf_free_lane_barrier = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(85u)) {
          set_has_bf_free_lane_barrier();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &bf_free_lane_barrier_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rowindex = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(808u)) {
          set_has_rowindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rowindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 columnindex = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(816u)) {
          set_has_columnindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columnindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.Grid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.Grid)
  return false;
#undef DO_
}

void Grid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.Grid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float bf_local = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->bf_local(), output);
  }

  // optional float bf_move = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->bf_move(), output);
  }

  // optional float bf_free = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->bf_free(), output);
  }

  // optional float bf_occupy = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->bf_occupy(), output);
  }

  // optional float bf_free_lane = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->bf_free_lane(), output);
  }

  // optional float bf_free_lane_solid = 6;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->bf_free_lane_solid(), output);
  }

  // optional float bf_free_lane_dash = 7;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->bf_free_lane_dash(), output);
  }

  // optional float bf_free_lane_dsolid = 8;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->bf_free_lane_dsolid(), output);
  }

  // optional float bf_free_lane_edge = 9;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->bf_free_lane_edge(), output);
  }

  // optional float bf_free_lane_barrier = 10;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->bf_free_lane_barrier(), output);
  }

  // required int32 rowindex = 101;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->rowindex(), output);
  }

  // required int32 columnindex = 102;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->columnindex(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.Grid)
}

size_t Grid::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atd.perception.Grid)
  size_t total_size = 0;

  if (has_rowindex()) {
    // required int32 rowindex = 101;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rowindex());
  }

  if (has_columnindex()) {
    // required int32 columnindex = 102;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columnindex());
  }

  return total_size;
}
size_t Grid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.Grid)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000c00) ^ 0x00000c00) == 0) {  // All required fields are present.
    // required int32 rowindex = 101;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rowindex());

    // required int32 columnindex = 102;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columnindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 255u) {
    // optional float bf_local = 1;
    if (has_bf_local()) {
      total_size += 1 + 4;
    }

    // optional float bf_move = 2;
    if (has_bf_move()) {
      total_size += 1 + 4;
    }

    // optional float bf_free = 3;
    if (has_bf_free()) {
      total_size += 1 + 4;
    }

    // optional float bf_occupy = 4;
    if (has_bf_occupy()) {
      total_size += 1 + 4;
    }

    // optional float bf_free_lane = 5;
    if (has_bf_free_lane()) {
      total_size += 1 + 4;
    }

    // optional float bf_free_lane_solid = 6;
    if (has_bf_free_lane_solid()) {
      total_size += 1 + 4;
    }

    // optional float bf_free_lane_dash = 7;
    if (has_bf_free_lane_dash()) {
      total_size += 1 + 4;
    }

    // optional float bf_free_lane_dsolid = 8;
    if (has_bf_free_lane_dsolid()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[8 / 32] & 768u) {
    // optional float bf_free_lane_edge = 9;
    if (has_bf_free_lane_edge()) {
      total_size += 1 + 4;
    }

    // optional float bf_free_lane_barrier = 10;
    if (has_bf_free_lane_barrier()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Grid::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Grid*>(&from));
}

void Grid::MergeFrom(const Grid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.Grid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      bf_local_ = from.bf_local_;
    }
    if (cached_has_bits & 0x00000002u) {
      bf_move_ = from.bf_move_;
    }
    if (cached_has_bits & 0x00000004u) {
      bf_free_ = from.bf_free_;
    }
    if (cached_has_bits & 0x00000008u) {
      bf_occupy_ = from.bf_occupy_;
    }
    if (cached_has_bits & 0x00000010u) {
      bf_free_lane_ = from.bf_free_lane_;
    }
    if (cached_has_bits & 0x00000020u) {
      bf_free_lane_solid_ = from.bf_free_lane_solid_;
    }
    if (cached_has_bits & 0x00000040u) {
      bf_free_lane_dash_ = from.bf_free_lane_dash_;
    }
    if (cached_has_bits & 0x00000080u) {
      bf_free_lane_dsolid_ = from.bf_free_lane_dsolid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 3840u) {
    if (cached_has_bits & 0x00000100u) {
      bf_free_lane_edge_ = from.bf_free_lane_edge_;
    }
    if (cached_has_bits & 0x00000200u) {
      bf_free_lane_barrier_ = from.bf_free_lane_barrier_;
    }
    if (cached_has_bits & 0x00000400u) {
      rowindex_ = from.rowindex_;
    }
    if (cached_has_bits & 0x00000800u) {
      columnindex_ = from.columnindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Grid::CopyFrom(const Grid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.Grid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000c00) != 0x00000c00) return false;
  return true;
}

void Grid::Swap(Grid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Grid::InternalSwap(Grid* other) {
  std::swap(bf_local_, other->bf_local_);
  std::swap(bf_move_, other->bf_move_);
  std::swap(bf_free_, other->bf_free_);
  std::swap(bf_occupy_, other->bf_occupy_);
  std::swap(bf_free_lane_, other->bf_free_lane_);
  std::swap(bf_free_lane_solid_, other->bf_free_lane_solid_);
  std::swap(bf_free_lane_dash_, other->bf_free_lane_dash_);
  std::swap(bf_free_lane_dsolid_, other->bf_free_lane_dsolid_);
  std::swap(bf_free_lane_edge_, other->bf_free_lane_edge_);
  std::swap(bf_free_lane_barrier_, other->bf_free_lane_barrier_);
  std::swap(rowindex_, other->rowindex_);
  std::swap(columnindex_, other->columnindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Grid::GetTypeName() const {
  return "atd.perception.Grid";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Grid

// required int32 rowindex = 101;
bool Grid::has_rowindex() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Grid::set_has_rowindex() {
  _has_bits_[0] |= 0x00000400u;
}
void Grid::clear_has_rowindex() {
  _has_bits_[0] &= ~0x00000400u;
}
void Grid::clear_rowindex() {
  rowindex_ = 0;
  clear_has_rowindex();
}
::google::protobuf::int32 Grid::rowindex() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.rowindex)
  return rowindex_;
}
void Grid::set_rowindex(::google::protobuf::int32 value) {
  set_has_rowindex();
  rowindex_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.rowindex)
}

// required int32 columnindex = 102;
bool Grid::has_columnindex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Grid::set_has_columnindex() {
  _has_bits_[0] |= 0x00000800u;
}
void Grid::clear_has_columnindex() {
  _has_bits_[0] &= ~0x00000800u;
}
void Grid::clear_columnindex() {
  columnindex_ = 0;
  clear_has_columnindex();
}
::google::protobuf::int32 Grid::columnindex() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.columnindex)
  return columnindex_;
}
void Grid::set_columnindex(::google::protobuf::int32 value) {
  set_has_columnindex();
  columnindex_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.columnindex)
}

// optional float bf_local = 1;
bool Grid::has_bf_local() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Grid::set_has_bf_local() {
  _has_bits_[0] |= 0x00000001u;
}
void Grid::clear_has_bf_local() {
  _has_bits_[0] &= ~0x00000001u;
}
void Grid::clear_bf_local() {
  bf_local_ = 0;
  clear_has_bf_local();
}
float Grid::bf_local() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_local)
  return bf_local_;
}
void Grid::set_bf_local(float value) {
  set_has_bf_local();
  bf_local_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_local)
}

// optional float bf_move = 2;
bool Grid::has_bf_move() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Grid::set_has_bf_move() {
  _has_bits_[0] |= 0x00000002u;
}
void Grid::clear_has_bf_move() {
  _has_bits_[0] &= ~0x00000002u;
}
void Grid::clear_bf_move() {
  bf_move_ = 0;
  clear_has_bf_move();
}
float Grid::bf_move() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_move)
  return bf_move_;
}
void Grid::set_bf_move(float value) {
  set_has_bf_move();
  bf_move_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_move)
}

// optional float bf_free = 3;
bool Grid::has_bf_free() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Grid::set_has_bf_free() {
  _has_bits_[0] |= 0x00000004u;
}
void Grid::clear_has_bf_free() {
  _has_bits_[0] &= ~0x00000004u;
}
void Grid::clear_bf_free() {
  bf_free_ = 0;
  clear_has_bf_free();
}
float Grid::bf_free() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_free)
  return bf_free_;
}
void Grid::set_bf_free(float value) {
  set_has_bf_free();
  bf_free_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_free)
}

// optional float bf_occupy = 4;
bool Grid::has_bf_occupy() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Grid::set_has_bf_occupy() {
  _has_bits_[0] |= 0x00000008u;
}
void Grid::clear_has_bf_occupy() {
  _has_bits_[0] &= ~0x00000008u;
}
void Grid::clear_bf_occupy() {
  bf_occupy_ = 0;
  clear_has_bf_occupy();
}
float Grid::bf_occupy() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_occupy)
  return bf_occupy_;
}
void Grid::set_bf_occupy(float value) {
  set_has_bf_occupy();
  bf_occupy_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_occupy)
}

// optional float bf_free_lane = 5;
bool Grid::has_bf_free_lane() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Grid::set_has_bf_free_lane() {
  _has_bits_[0] |= 0x00000010u;
}
void Grid::clear_has_bf_free_lane() {
  _has_bits_[0] &= ~0x00000010u;
}
void Grid::clear_bf_free_lane() {
  bf_free_lane_ = 0;
  clear_has_bf_free_lane();
}
float Grid::bf_free_lane() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_free_lane)
  return bf_free_lane_;
}
void Grid::set_bf_free_lane(float value) {
  set_has_bf_free_lane();
  bf_free_lane_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_free_lane)
}

// optional float bf_free_lane_solid = 6;
bool Grid::has_bf_free_lane_solid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Grid::set_has_bf_free_lane_solid() {
  _has_bits_[0] |= 0x00000020u;
}
void Grid::clear_has_bf_free_lane_solid() {
  _has_bits_[0] &= ~0x00000020u;
}
void Grid::clear_bf_free_lane_solid() {
  bf_free_lane_solid_ = 0;
  clear_has_bf_free_lane_solid();
}
float Grid::bf_free_lane_solid() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_free_lane_solid)
  return bf_free_lane_solid_;
}
void Grid::set_bf_free_lane_solid(float value) {
  set_has_bf_free_lane_solid();
  bf_free_lane_solid_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_free_lane_solid)
}

// optional float bf_free_lane_dash = 7;
bool Grid::has_bf_free_lane_dash() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Grid::set_has_bf_free_lane_dash() {
  _has_bits_[0] |= 0x00000040u;
}
void Grid::clear_has_bf_free_lane_dash() {
  _has_bits_[0] &= ~0x00000040u;
}
void Grid::clear_bf_free_lane_dash() {
  bf_free_lane_dash_ = 0;
  clear_has_bf_free_lane_dash();
}
float Grid::bf_free_lane_dash() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_free_lane_dash)
  return bf_free_lane_dash_;
}
void Grid::set_bf_free_lane_dash(float value) {
  set_has_bf_free_lane_dash();
  bf_free_lane_dash_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_free_lane_dash)
}

// optional float bf_free_lane_dsolid = 8;
bool Grid::has_bf_free_lane_dsolid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Grid::set_has_bf_free_lane_dsolid() {
  _has_bits_[0] |= 0x00000080u;
}
void Grid::clear_has_bf_free_lane_dsolid() {
  _has_bits_[0] &= ~0x00000080u;
}
void Grid::clear_bf_free_lane_dsolid() {
  bf_free_lane_dsolid_ = 0;
  clear_has_bf_free_lane_dsolid();
}
float Grid::bf_free_lane_dsolid() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_free_lane_dsolid)
  return bf_free_lane_dsolid_;
}
void Grid::set_bf_free_lane_dsolid(float value) {
  set_has_bf_free_lane_dsolid();
  bf_free_lane_dsolid_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_free_lane_dsolid)
}

// optional float bf_free_lane_edge = 9;
bool Grid::has_bf_free_lane_edge() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Grid::set_has_bf_free_lane_edge() {
  _has_bits_[0] |= 0x00000100u;
}
void Grid::clear_has_bf_free_lane_edge() {
  _has_bits_[0] &= ~0x00000100u;
}
void Grid::clear_bf_free_lane_edge() {
  bf_free_lane_edge_ = 0;
  clear_has_bf_free_lane_edge();
}
float Grid::bf_free_lane_edge() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_free_lane_edge)
  return bf_free_lane_edge_;
}
void Grid::set_bf_free_lane_edge(float value) {
  set_has_bf_free_lane_edge();
  bf_free_lane_edge_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_free_lane_edge)
}

// optional float bf_free_lane_barrier = 10;
bool Grid::has_bf_free_lane_barrier() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Grid::set_has_bf_free_lane_barrier() {
  _has_bits_[0] |= 0x00000200u;
}
void Grid::clear_has_bf_free_lane_barrier() {
  _has_bits_[0] &= ~0x00000200u;
}
void Grid::clear_bf_free_lane_barrier() {
  bf_free_lane_barrier_ = 0;
  clear_has_bf_free_lane_barrier();
}
float Grid::bf_free_lane_barrier() const {
  // @@protoc_insertion_point(field_get:atd.perception.Grid.bf_free_lane_barrier)
  return bf_free_lane_barrier_;
}
void Grid::set_bf_free_lane_barrier(float value) {
  set_has_bf_free_lane_barrier();
  bf_free_lane_barrier_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.Grid.bf_free_lane_barrier)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridList::kHeaderFieldNumber;
const int GridList::kReservedmsgFieldNumber;
const int GridList::kOnegridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridList::GridList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.GridList)
}
GridList::GridList(const GridList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onegrid_(from.onegrid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.perception.GridList)
}

void GridList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reservedmsg_) -
    reinterpret_cast<char*>(&header_) + sizeof(reservedmsg_));
}

GridList::~GridList() {
  // @@protoc_insertion_point(destructor:atd.perception.GridList)
  SharedDtor();
}

void GridList::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void GridList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GridList& GridList::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  return *internal_default_instance();
}

GridList* GridList::New(::google::protobuf::Arena* arena) const {
  GridList* n = new GridList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridList::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.GridList)
  onegrid_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GridList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.GridList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.perception.Grid onegrid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onegrid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.GridList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.GridList)
  return false;
#undef DO_
}

void GridList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.GridList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // repeated .atd.perception.Grid onegrid = 3;
  for (unsigned int i = 0, n = this->onegrid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->onegrid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.GridList)
}

size_t GridList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.GridList)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.perception.Grid onegrid = 3;
  {
    unsigned int count = this->onegrid_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onegrid(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GridList*>(&from));
}

void GridList::MergeFrom(const GridList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.GridList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onegrid_.MergeFrom(from.onegrid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
  }
}

void GridList::CopyFrom(const GridList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.GridList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridList::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->onegrid())) return false;
  return true;
}

void GridList::Swap(GridList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridList::InternalSwap(GridList* other) {
  onegrid_.InternalSwap(&other->onegrid_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GridList::GetTypeName() const {
  return "atd.perception.GridList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GridList

// optional .atd.common.Header header = 1;
bool GridList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GridList::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void GridList::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void GridList::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& GridList::header() const {
  // @@protoc_insertion_point(field_get:atd.perception.GridList.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* GridList::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.perception.GridList.header)
  return header_;
}
::atd::common::Header* GridList::release_header() {
  // @@protoc_insertion_point(field_release:atd.perception.GridList.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void GridList::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.perception.GridList.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool GridList::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GridList::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void GridList::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void GridList::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& GridList::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.perception.GridList.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* GridList::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.perception.GridList.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* GridList::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.perception.GridList.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void GridList::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.perception.GridList.reservedmsg)
}

// repeated .atd.perception.Grid onegrid = 3;
int GridList::onegrid_size() const {
  return onegrid_.size();
}
void GridList::clear_onegrid() {
  onegrid_.Clear();
}
const ::atd::perception::Grid& GridList::onegrid(int index) const {
  // @@protoc_insertion_point(field_get:atd.perception.GridList.onegrid)
  return onegrid_.Get(index);
}
::atd::perception::Grid* GridList::mutable_onegrid(int index) {
  // @@protoc_insertion_point(field_mutable:atd.perception.GridList.onegrid)
  return onegrid_.Mutable(index);
}
::atd::perception::Grid* GridList::add_onegrid() {
  // @@protoc_insertion_point(field_add:atd.perception.GridList.onegrid)
  return onegrid_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::perception::Grid >*
GridList::mutable_onegrid() {
  // @@protoc_insertion_point(field_mutable_list:atd.perception.GridList.onegrid)
  return &onegrid_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::perception::Grid >&
GridList::onegrid() const {
  // @@protoc_insertion_point(field_list:atd.perception.GridList.onegrid)
  return onegrid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GridDisplay::kRowindexFieldNumber;
const int GridDisplay::kColumnindexFieldNumber;
const int GridDisplay::kMatchtypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GridDisplay::GridDisplay()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.GridDisplay)
}
GridDisplay::GridDisplay(const GridDisplay& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&columnindex_, &from.columnindex_,
    reinterpret_cast<char*>(&rowindex_) -
    reinterpret_cast<char*>(&columnindex_) + sizeof(rowindex_));
  // @@protoc_insertion_point(copy_constructor:atd.perception.GridDisplay)
}

void GridDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&columnindex_, 0, reinterpret_cast<char*>(&rowindex_) -
    reinterpret_cast<char*>(&columnindex_) + sizeof(rowindex_));
}

GridDisplay::~GridDisplay() {
  // @@protoc_insertion_point(destructor:atd.perception.GridDisplay)
  SharedDtor();
}

void GridDisplay::SharedDtor() {
}

void GridDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const GridDisplay& GridDisplay::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  return *internal_default_instance();
}

GridDisplay* GridDisplay::New(::google::protobuf::Arena* arena) const {
  GridDisplay* n = new GridDisplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void GridDisplay::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.GridDisplay)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&columnindex_, 0, reinterpret_cast<char*>(&rowindex_) -
      reinterpret_cast<char*>(&columnindex_) + sizeof(rowindex_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GridDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.GridDisplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 matchtype = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          set_has_matchtype();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &matchtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 rowindex = 101;
      case 101: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(808u)) {
          set_has_rowindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rowindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 columnindex = 102;
      case 102: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(816u)) {
          set_has_columnindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &columnindex_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.GridDisplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.GridDisplay)
  return false;
#undef DO_
}

void GridDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.GridDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 matchtype = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->matchtype(), output);
  }

  // required int32 rowindex = 101;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(101, this->rowindex(), output);
  }

  // required int32 columnindex = 102;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(102, this->columnindex(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.GridDisplay)
}

size_t GridDisplay::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:atd.perception.GridDisplay)
  size_t total_size = 0;

  if (has_columnindex()) {
    // required int32 columnindex = 102;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columnindex());
  }

  if (has_rowindex()) {
    // required int32 rowindex = 101;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rowindex());
  }

  return total_size;
}
size_t GridDisplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.GridDisplay)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (((_has_bits_[0] & 0x00000005) ^ 0x00000005) == 0) {  // All required fields are present.
    // required int32 columnindex = 102;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->columnindex());

    // required int32 rowindex = 101;
    total_size += 2 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rowindex());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional int32 matchtype = 1;
  if (has_matchtype()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->matchtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GridDisplay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const GridDisplay*>(&from));
}

void GridDisplay::MergeFrom(const GridDisplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.GridDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      columnindex_ = from.columnindex_;
    }
    if (cached_has_bits & 0x00000002u) {
      matchtype_ = from.matchtype_;
    }
    if (cached_has_bits & 0x00000004u) {
      rowindex_ = from.rowindex_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GridDisplay::CopyFrom(const GridDisplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.GridDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridDisplay::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;
  return true;
}

void GridDisplay::Swap(GridDisplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GridDisplay::InternalSwap(GridDisplay* other) {
  std::swap(columnindex_, other->columnindex_);
  std::swap(matchtype_, other->matchtype_);
  std::swap(rowindex_, other->rowindex_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string GridDisplay::GetTypeName() const {
  return "atd.perception.GridDisplay";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// GridDisplay

// required int32 rowindex = 101;
bool GridDisplay::has_rowindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void GridDisplay::set_has_rowindex() {
  _has_bits_[0] |= 0x00000004u;
}
void GridDisplay::clear_has_rowindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void GridDisplay::clear_rowindex() {
  rowindex_ = 0;
  clear_has_rowindex();
}
::google::protobuf::int32 GridDisplay::rowindex() const {
  // @@protoc_insertion_point(field_get:atd.perception.GridDisplay.rowindex)
  return rowindex_;
}
void GridDisplay::set_rowindex(::google::protobuf::int32 value) {
  set_has_rowindex();
  rowindex_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.GridDisplay.rowindex)
}

// required int32 columnindex = 102;
bool GridDisplay::has_columnindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void GridDisplay::set_has_columnindex() {
  _has_bits_[0] |= 0x00000001u;
}
void GridDisplay::clear_has_columnindex() {
  _has_bits_[0] &= ~0x00000001u;
}
void GridDisplay::clear_columnindex() {
  columnindex_ = 0;
  clear_has_columnindex();
}
::google::protobuf::int32 GridDisplay::columnindex() const {
  // @@protoc_insertion_point(field_get:atd.perception.GridDisplay.columnindex)
  return columnindex_;
}
void GridDisplay::set_columnindex(::google::protobuf::int32 value) {
  set_has_columnindex();
  columnindex_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.GridDisplay.columnindex)
}

// optional int32 matchtype = 1;
bool GridDisplay::has_matchtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void GridDisplay::set_has_matchtype() {
  _has_bits_[0] |= 0x00000002u;
}
void GridDisplay::clear_has_matchtype() {
  _has_bits_[0] &= ~0x00000002u;
}
void GridDisplay::clear_matchtype() {
  matchtype_ = 0;
  clear_has_matchtype();
}
::google::protobuf::int32 GridDisplay::matchtype() const {
  // @@protoc_insertion_point(field_get:atd.perception.GridDisplay.matchtype)
  return matchtype_;
}
void GridDisplay::set_matchtype(::google::protobuf::int32 value) {
  set_has_matchtype();
  matchtype_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.GridDisplay.matchtype)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OneMatch::kDeltaXFieldNumber;
const int OneMatch::kDeltaYFieldNumber;
const int OneMatch::kDeltaYawFieldNumber;
const int OneMatch::kScoreFieldNumber;
const int OneMatch::kOnegridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OneMatch::OneMatch()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.OneMatch)
}
OneMatch::OneMatch(const OneMatch& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onegrid_(from.onegrid_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&delta_x_, &from.delta_x_,
    reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&delta_x_) + sizeof(score_));
  // @@protoc_insertion_point(copy_constructor:atd.perception.OneMatch)
}

void OneMatch::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&delta_x_, 0, reinterpret_cast<char*>(&score_) -
    reinterpret_cast<char*>(&delta_x_) + sizeof(score_));
}

OneMatch::~OneMatch() {
  // @@protoc_insertion_point(destructor:atd.perception.OneMatch)
  SharedDtor();
}

void OneMatch::SharedDtor() {
}

void OneMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OneMatch& OneMatch::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  return *internal_default_instance();
}

OneMatch* OneMatch::New(::google::protobuf::Arena* arena) const {
  OneMatch* n = new OneMatch;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OneMatch::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.OneMatch)
  onegrid_.Clear();
  if (_has_bits_[0 / 32] & 15u) {
    ::memset(&delta_x_, 0, reinterpret_cast<char*>(&score_) -
      reinterpret_cast<char*>(&delta_x_) + sizeof(score_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool OneMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.OneMatch)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional float delta_x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u)) {
          set_has_delta_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u)) {
          set_has_delta_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_yaw = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_delta_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float score = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_score();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &score_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.perception.GridDisplay onegrid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onegrid()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.OneMatch)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.OneMatch)
  return false;
#undef DO_
}

void OneMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.OneMatch)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional float delta_x = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->delta_x(), output);
  }

  // optional float delta_y = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->delta_y(), output);
  }

  // optional float delta_yaw = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delta_yaw(), output);
  }

  // optional float score = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->score(), output);
  }

  // repeated .atd.perception.GridDisplay onegrid = 5;
  for (unsigned int i = 0, n = this->onegrid_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->onegrid(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.OneMatch)
}

size_t OneMatch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.OneMatch)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.perception.GridDisplay onegrid = 5;
  {
    unsigned int count = this->onegrid_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onegrid(i));
    }
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional float delta_x = 1;
    if (has_delta_x()) {
      total_size += 1 + 4;
    }

    // optional float delta_y = 2;
    if (has_delta_y()) {
      total_size += 1 + 4;
    }

    // optional float delta_yaw = 3;
    if (has_delta_yaw()) {
      total_size += 1 + 4;
    }

    // optional float score = 4;
    if (has_score()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneMatch::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OneMatch*>(&from));
}

void OneMatch::MergeFrom(const OneMatch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.OneMatch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onegrid_.MergeFrom(from.onegrid_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      delta_x_ = from.delta_x_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_y_ = from.delta_y_;
    }
    if (cached_has_bits & 0x00000004u) {
      delta_yaw_ = from.delta_yaw_;
    }
    if (cached_has_bits & 0x00000008u) {
      score_ = from.score_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OneMatch::CopyFrom(const OneMatch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.OneMatch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneMatch::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->onegrid())) return false;
  return true;
}

void OneMatch::Swap(OneMatch* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OneMatch::InternalSwap(OneMatch* other) {
  onegrid_.InternalSwap(&other->onegrid_);
  std::swap(delta_x_, other->delta_x_);
  std::swap(delta_y_, other->delta_y_);
  std::swap(delta_yaw_, other->delta_yaw_);
  std::swap(score_, other->score_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OneMatch::GetTypeName() const {
  return "atd.perception.OneMatch";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OneMatch

// optional float delta_x = 1;
bool OneMatch::has_delta_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void OneMatch::set_has_delta_x() {
  _has_bits_[0] |= 0x00000001u;
}
void OneMatch::clear_has_delta_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void OneMatch::clear_delta_x() {
  delta_x_ = 0;
  clear_has_delta_x();
}
float OneMatch::delta_x() const {
  // @@protoc_insertion_point(field_get:atd.perception.OneMatch.delta_x)
  return delta_x_;
}
void OneMatch::set_delta_x(float value) {
  set_has_delta_x();
  delta_x_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.OneMatch.delta_x)
}

// optional float delta_y = 2;
bool OneMatch::has_delta_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void OneMatch::set_has_delta_y() {
  _has_bits_[0] |= 0x00000002u;
}
void OneMatch::clear_has_delta_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void OneMatch::clear_delta_y() {
  delta_y_ = 0;
  clear_has_delta_y();
}
float OneMatch::delta_y() const {
  // @@protoc_insertion_point(field_get:atd.perception.OneMatch.delta_y)
  return delta_y_;
}
void OneMatch::set_delta_y(float value) {
  set_has_delta_y();
  delta_y_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.OneMatch.delta_y)
}

// optional float delta_yaw = 3;
bool OneMatch::has_delta_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void OneMatch::set_has_delta_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
void OneMatch::clear_has_delta_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
void OneMatch::clear_delta_yaw() {
  delta_yaw_ = 0;
  clear_has_delta_yaw();
}
float OneMatch::delta_yaw() const {
  // @@protoc_insertion_point(field_get:atd.perception.OneMatch.delta_yaw)
  return delta_yaw_;
}
void OneMatch::set_delta_yaw(float value) {
  set_has_delta_yaw();
  delta_yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.OneMatch.delta_yaw)
}

// optional float score = 4;
bool OneMatch::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void OneMatch::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
void OneMatch::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
void OneMatch::clear_score() {
  score_ = 0;
  clear_has_score();
}
float OneMatch::score() const {
  // @@protoc_insertion_point(field_get:atd.perception.OneMatch.score)
  return score_;
}
void OneMatch::set_score(float value) {
  set_has_score();
  score_ = value;
  // @@protoc_insertion_point(field_set:atd.perception.OneMatch.score)
}

// repeated .atd.perception.GridDisplay onegrid = 5;
int OneMatch::onegrid_size() const {
  return onegrid_.size();
}
void OneMatch::clear_onegrid() {
  onegrid_.Clear();
}
const ::atd::perception::GridDisplay& OneMatch::onegrid(int index) const {
  // @@protoc_insertion_point(field_get:atd.perception.OneMatch.onegrid)
  return onegrid_.Get(index);
}
::atd::perception::GridDisplay* OneMatch::mutable_onegrid(int index) {
  // @@protoc_insertion_point(field_mutable:atd.perception.OneMatch.onegrid)
  return onegrid_.Mutable(index);
}
::atd::perception::GridDisplay* OneMatch::add_onegrid() {
  // @@protoc_insertion_point(field_add:atd.perception.OneMatch.onegrid)
  return onegrid_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::perception::GridDisplay >*
OneMatch::mutable_onegrid() {
  // @@protoc_insertion_point(field_mutable_list:atd.perception.OneMatch.onegrid)
  return &onegrid_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::perception::GridDisplay >&
OneMatch::onegrid() const {
  // @@protoc_insertion_point(field_list:atd.perception.OneMatch.onegrid)
  return onegrid_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MatchDisplay::kHeaderFieldNumber;
const int MatchDisplay::kReservedmsgFieldNumber;
const int MatchDisplay::kOnematchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MatchDisplay::MatchDisplay()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.perception.MatchDisplay)
}
MatchDisplay::MatchDisplay(const MatchDisplay& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onematch_(from.onematch_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:atd.perception.MatchDisplay)
}

void MatchDisplay::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&reservedmsg_) -
    reinterpret_cast<char*>(&header_) + sizeof(reservedmsg_));
}

MatchDisplay::~MatchDisplay() {
  // @@protoc_insertion_point(destructor:atd.perception.MatchDisplay)
  SharedDtor();
}

void MatchDisplay::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
}

void MatchDisplay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MatchDisplay& MatchDisplay::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fperception_2fgridlist_2eproto::InitDefaults();
  return *internal_default_instance();
}

MatchDisplay* MatchDisplay::New(::google::protobuf::Arena* arena) const {
  MatchDisplay* n = new MatchDisplay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MatchDisplay::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.perception.MatchDisplay)
  onematch_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MatchDisplay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.perception.MatchDisplay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.perception.OneMatch onematch = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onematch()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.perception.MatchDisplay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.perception.MatchDisplay)
  return false;
#undef DO_
}

void MatchDisplay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.perception.MatchDisplay)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // repeated .atd.perception.OneMatch onematch = 3;
  for (unsigned int i = 0, n = this->onematch_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->onematch(i), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.perception.MatchDisplay)
}

size_t MatchDisplay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.perception.MatchDisplay)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.perception.OneMatch onematch = 3;
  {
    unsigned int count = this->onematch_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onematch(i));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MatchDisplay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MatchDisplay*>(&from));
}

void MatchDisplay::MergeFrom(const MatchDisplay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.perception.MatchDisplay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onematch_.MergeFrom(from.onematch_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
  }
}

void MatchDisplay::CopyFrom(const MatchDisplay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.perception.MatchDisplay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MatchDisplay::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->onematch())) return false;
  return true;
}

void MatchDisplay::Swap(MatchDisplay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MatchDisplay::InternalSwap(MatchDisplay* other) {
  onematch_.InternalSwap(&other->onematch_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MatchDisplay::GetTypeName() const {
  return "atd.perception.MatchDisplay";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MatchDisplay

// optional .atd.common.Header header = 1;
bool MatchDisplay::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MatchDisplay::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void MatchDisplay::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void MatchDisplay::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& MatchDisplay::header() const {
  // @@protoc_insertion_point(field_get:atd.perception.MatchDisplay.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* MatchDisplay::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.perception.MatchDisplay.header)
  return header_;
}
::atd::common::Header* MatchDisplay::release_header() {
  // @@protoc_insertion_point(field_release:atd.perception.MatchDisplay.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void MatchDisplay::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.perception.MatchDisplay.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool MatchDisplay::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MatchDisplay::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void MatchDisplay::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void MatchDisplay::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& MatchDisplay::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.perception.MatchDisplay.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* MatchDisplay::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.perception.MatchDisplay.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* MatchDisplay::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.perception.MatchDisplay.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void MatchDisplay::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.perception.MatchDisplay.reservedmsg)
}

// repeated .atd.perception.OneMatch onematch = 3;
int MatchDisplay::onematch_size() const {
  return onematch_.size();
}
void MatchDisplay::clear_onematch() {
  onematch_.Clear();
}
const ::atd::perception::OneMatch& MatchDisplay::onematch(int index) const {
  // @@protoc_insertion_point(field_get:atd.perception.MatchDisplay.onematch)
  return onematch_.Get(index);
}
::atd::perception::OneMatch* MatchDisplay::mutable_onematch(int index) {
  // @@protoc_insertion_point(field_mutable:atd.perception.MatchDisplay.onematch)
  return onematch_.Mutable(index);
}
::atd::perception::OneMatch* MatchDisplay::add_onematch() {
  // @@protoc_insertion_point(field_add:atd.perception.MatchDisplay.onematch)
  return onematch_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::perception::OneMatch >*
MatchDisplay::mutable_onematch() {
  // @@protoc_insertion_point(field_mutable_list:atd.perception.MatchDisplay.onematch)
  return &onematch_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::perception::OneMatch >&
MatchDisplay::onematch() const {
  // @@protoc_insertion_point(field_list:atd.perception.MatchDisplay.onematch)
  return onematch_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace perception
}  // namespace atd

// @@protoc_insertion_point(global_scope)
