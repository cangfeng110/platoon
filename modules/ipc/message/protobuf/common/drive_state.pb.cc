// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/common/drive_state.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/common/drive_state.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace common {
class EngageAdviceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EngageAdvice> {
} _EngageAdvice_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fdrive_5fstate_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _EngageAdvice_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _EngageAdvice_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fdrive_5fstate_2eproto

bool EngageAdvice_Advice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const EngageAdvice_Advice EngageAdvice::UNKNOWN;
const EngageAdvice_Advice EngageAdvice::DISALLOW_ENGAGE;
const EngageAdvice_Advice EngageAdvice::READY_TO_ENGAGE;
const EngageAdvice_Advice EngageAdvice::KEEP_ENGAGED;
const EngageAdvice_Advice EngageAdvice::PREPARE_DISENGAGE;
const EngageAdvice_Advice EngageAdvice::Advice_MIN;
const EngageAdvice_Advice EngageAdvice::Advice_MAX;
const int EngageAdvice::Advice_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EngageAdvice::kAdviceFieldNumber;
const int EngageAdvice::kReasonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EngageAdvice::EngageAdvice()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fdrive_5fstate_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.EngageAdvice)
}
EngageAdvice::EngageAdvice(const EngageAdvice& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reason()) {
    reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
  }
  advice_ = from.advice_;
  // @@protoc_insertion_point(copy_constructor:atd.common.EngageAdvice)
}

void EngageAdvice::SharedCtor() {
  _cached_size_ = 0;
  reason_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advice_ = 1;
}

EngageAdvice::~EngageAdvice() {
  // @@protoc_insertion_point(destructor:atd.common.EngageAdvice)
  SharedDtor();
}

void EngageAdvice::SharedDtor() {
  reason_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EngageAdvice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const EngageAdvice& EngageAdvice::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fdrive_5fstate_2eproto::InitDefaults();
  return *internal_default_instance();
}

EngageAdvice* EngageAdvice::New(::google::protobuf::Arena* arena) const {
  EngageAdvice* n = new EngageAdvice;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EngageAdvice::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.EngageAdvice)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_reason()) {
      GOOGLE_DCHECK(!reason_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*reason_.UnsafeRawStringPointer())->clear();
    }
    advice_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EngageAdvice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.EngageAdvice)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::common::EngageAdvice_Advice_IsValid(value)) {
            set_advice(static_cast< ::atd::common::EngageAdvice_Advice >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reason = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.EngageAdvice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.EngageAdvice)
  return false;
#undef DO_
}

void EngageAdvice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.EngageAdvice)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->advice(), output);
  }

  // optional string reason = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->reason(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.EngageAdvice)
}

size_t EngageAdvice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.EngageAdvice)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional string reason = 2;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional .atd.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
    if (has_advice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->advice());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EngageAdvice::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const EngageAdvice*>(&from));
}

void EngageAdvice::MergeFrom(const EngageAdvice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.EngageAdvice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reason();
      reason_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reason_);
    }
    if (cached_has_bits & 0x00000002u) {
      advice_ = from.advice_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EngageAdvice::CopyFrom(const EngageAdvice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.EngageAdvice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EngageAdvice::IsInitialized() const {
  return true;
}

void EngageAdvice::Swap(EngageAdvice* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EngageAdvice::InternalSwap(EngageAdvice* other) {
  reason_.Swap(&other->reason_);
  std::swap(advice_, other->advice_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string EngageAdvice::GetTypeName() const {
  return "atd.common.EngageAdvice";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EngageAdvice

// optional .atd.common.EngageAdvice.Advice advice = 1 [default = DISALLOW_ENGAGE];
bool EngageAdvice::has_advice() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EngageAdvice::set_has_advice() {
  _has_bits_[0] |= 0x00000002u;
}
void EngageAdvice::clear_has_advice() {
  _has_bits_[0] &= ~0x00000002u;
}
void EngageAdvice::clear_advice() {
  advice_ = 1;
  clear_has_advice();
}
::atd::common::EngageAdvice_Advice EngageAdvice::advice() const {
  // @@protoc_insertion_point(field_get:atd.common.EngageAdvice.advice)
  return static_cast< ::atd::common::EngageAdvice_Advice >(advice_);
}
void EngageAdvice::set_advice(::atd::common::EngageAdvice_Advice value) {
  assert(::atd::common::EngageAdvice_Advice_IsValid(value));
  set_has_advice();
  advice_ = value;
  // @@protoc_insertion_point(field_set:atd.common.EngageAdvice.advice)
}

// optional string reason = 2;
bool EngageAdvice::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EngageAdvice::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
void EngageAdvice::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
void EngageAdvice::clear_reason() {
  reason_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reason();
}
const ::std::string& EngageAdvice::reason() const {
  // @@protoc_insertion_point(field_get:atd.common.EngageAdvice.reason)
  return reason_.GetNoArena();
}
void EngageAdvice::set_reason(const ::std::string& value) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.common.EngageAdvice.reason)
}
#if LANG_CXX11
void EngageAdvice::set_reason(::std::string&& value) {
  set_has_reason();
  reason_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.common.EngageAdvice.reason)
}
#endif
void EngageAdvice::set_reason(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.common.EngageAdvice.reason)
}
void EngageAdvice::set_reason(const char* value, size_t size) {
  set_has_reason();
  reason_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.common.EngageAdvice.reason)
}
::std::string* EngageAdvice::mutable_reason() {
  set_has_reason();
  // @@protoc_insertion_point(field_mutable:atd.common.EngageAdvice.reason)
  return reason_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EngageAdvice::release_reason() {
  // @@protoc_insertion_point(field_release:atd.common.EngageAdvice.reason)
  clear_has_reason();
  return reason_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EngageAdvice::set_allocated_reason(::std::string* reason) {
  if (reason != NULL) {
    set_has_reason();
  } else {
    clear_has_reason();
  }
  reason_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reason);
  // @@protoc_insertion_point(field_set_allocated:atd.common.EngageAdvice.reason)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace atd

// @@protoc_insertion_point(global_scope)
