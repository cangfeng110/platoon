// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/common/geometry.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/common/geometry.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace common {
class PointENUDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointENU> {
} _PointENU_default_instance_;
class PointLLHDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PointLLH> {
} _PointLLH_default_instance_;
class Point2DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point2D> {
} _Point2D_default_instance_;
class Arrow2DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Arrow2D> {
} _Arrow2D_default_instance_;
class Point3DDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Point3D> {
} _Point3D_default_instance_;
class QuaternionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Quaternion> {
} _Quaternion_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _PointENU_default_instance_.Shutdown();
  _PointLLH_default_instance_.Shutdown();
  _Point2D_default_instance_.Shutdown();
  _Arrow2D_default_instance_.Shutdown();
  _Point3D_default_instance_.Shutdown();
  _Quaternion_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PointENU_default_instance_.DefaultConstruct();
  _PointLLH_default_instance_.DefaultConstruct();
  _Point2D_default_instance_.DefaultConstruct();
  _Arrow2D_default_instance_.DefaultConstruct();
  _Point3D_default_instance_.DefaultConstruct();
  _Quaternion_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointENU::kXFieldNumber;
const int PointENU::kYFieldNumber;
const int PointENU::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointENU::PointENU()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.PointENU)
}
PointENU::PointENU(const PointENU& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&z_, &from.z_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&z_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:atd.common.PointENU)
}

void PointENU::SharedCtor() {
  _cached_size_ = 0;
  z_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
}

PointENU::~PointENU() {
  // @@protoc_insertion_point(destructor:atd.common.PointENU)
  SharedDtor();
}

void PointENU::SharedDtor() {
}

void PointENU::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PointENU& PointENU::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointENU* PointENU::New(::google::protobuf::Arena* arena) const {
  PointENU* n = new PointENU;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointENU::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.PointENU)
  if (_has_bits_[0 / 32] & 7u) {
    z_ = 0;
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointENU::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.PointENU)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.PointENU)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.PointENU)
  return false;
#undef DO_
}

void PointENU::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.PointENU)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.PointENU)
}

size_t PointENU::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.PointENU)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional double z = 3 [default = 0];
    if (has_z()) {
      total_size += 1 + 8;
    }

    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointENU::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PointENU*>(&from));
}

void PointENU::MergeFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.PointENU)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      z_ = from.z_;
    }
    if (cached_has_bits & 0x00000002u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000004u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointENU::CopyFrom(const PointENU& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.PointENU)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointENU::IsInitialized() const {
  return true;
}

void PointENU::Swap(PointENU* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointENU::InternalSwap(PointENU* other) {
  std::swap(z_, other->z_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PointENU::GetTypeName() const {
  return "atd.common.PointENU";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointENU

// optional double x = 1 [default = nan];
bool PointENU::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointENU::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
void PointENU::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointENU::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
double PointENU::x() const {
  // @@protoc_insertion_point(field_get:atd.common.PointENU.x)
  return x_;
}
void PointENU::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:atd.common.PointENU.x)
}

// optional double y = 2 [default = nan];
bool PointENU::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointENU::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
void PointENU::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointENU::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
double PointENU::y() const {
  // @@protoc_insertion_point(field_get:atd.common.PointENU.y)
  return y_;
}
void PointENU::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:atd.common.PointENU.y)
}

// optional double z = 3 [default = 0];
bool PointENU::has_z() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointENU::set_has_z() {
  _has_bits_[0] |= 0x00000001u;
}
void PointENU::clear_has_z() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointENU::clear_z() {
  z_ = 0;
  clear_has_z();
}
double PointENU::z() const {
  // @@protoc_insertion_point(field_get:atd.common.PointENU.z)
  return z_;
}
void PointENU::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:atd.common.PointENU.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PointLLH::kLonFieldNumber;
const int PointLLH::kLatFieldNumber;
const int PointLLH::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PointLLH::PointLLH()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.PointLLH)
}
PointLLH::PointLLH(const PointLLH& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&height_, &from.height_,
    reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&height_) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:atd.common.PointLLH)
}

void PointLLH::SharedCtor() {
  _cached_size_ = 0;
  height_ = 0;
  lon_ = ::google::protobuf::internal::NaN();
  lat_ = ::google::protobuf::internal::NaN();
}

PointLLH::~PointLLH() {
  // @@protoc_insertion_point(destructor:atd.common.PointLLH)
  SharedDtor();
}

void PointLLH::SharedDtor() {
}

void PointLLH::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PointLLH& PointLLH::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

PointLLH* PointLLH::New(::google::protobuf::Arena* arena) const {
  PointLLH* n = new PointLLH;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PointLLH::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.PointLLH)
  if (_has_bits_[0 / 32] & 7u) {
    height_ = 0;
    lon_ = ::google::protobuf::internal::NaN();
    lat_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PointLLH::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.PointLLH)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double lon = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_lon();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double lat = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_lat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double height = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.PointLLH)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.PointLLH)
  return false;
#undef DO_
}

void PointLLH::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.PointLLH)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double lon = 1 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->lon(), output);
  }

  // optional double lat = 2 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // optional double height = 3 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->height(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.PointLLH)
}

size_t PointLLH::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.PointLLH)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional double height = 3 [default = 0];
    if (has_height()) {
      total_size += 1 + 8;
    }

    // optional double lon = 1 [default = nan];
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // optional double lat = 2 [default = nan];
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PointLLH::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PointLLH*>(&from));
}

void PointLLH::MergeFrom(const PointLLH& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.PointLLH)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000002u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000004u) {
      lat_ = from.lat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PointLLH::CopyFrom(const PointLLH& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.PointLLH)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PointLLH::IsInitialized() const {
  return true;
}

void PointLLH::Swap(PointLLH* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PointLLH::InternalSwap(PointLLH* other) {
  std::swap(height_, other->height_);
  std::swap(lon_, other->lon_);
  std::swap(lat_, other->lat_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PointLLH::GetTypeName() const {
  return "atd.common.PointLLH";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PointLLH

// optional double lon = 1 [default = nan];
bool PointLLH::has_lon() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void PointLLH::set_has_lon() {
  _has_bits_[0] |= 0x00000002u;
}
void PointLLH::clear_has_lon() {
  _has_bits_[0] &= ~0x00000002u;
}
void PointLLH::clear_lon() {
  lon_ = ::google::protobuf::internal::NaN();
  clear_has_lon();
}
double PointLLH::lon() const {
  // @@protoc_insertion_point(field_get:atd.common.PointLLH.lon)
  return lon_;
}
void PointLLH::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:atd.common.PointLLH.lon)
}

// optional double lat = 2 [default = nan];
bool PointLLH::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void PointLLH::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
void PointLLH::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
void PointLLH::clear_lat() {
  lat_ = ::google::protobuf::internal::NaN();
  clear_has_lat();
}
double PointLLH::lat() const {
  // @@protoc_insertion_point(field_get:atd.common.PointLLH.lat)
  return lat_;
}
void PointLLH::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:atd.common.PointLLH.lat)
}

// optional double height = 3 [default = 0];
bool PointLLH::has_height() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void PointLLH::set_has_height() {
  _has_bits_[0] |= 0x00000001u;
}
void PointLLH::clear_has_height() {
  _has_bits_[0] &= ~0x00000001u;
}
void PointLLH::clear_height() {
  height_ = 0;
  clear_has_height();
}
double PointLLH::height() const {
  // @@protoc_insertion_point(field_get:atd.common.PointLLH.height)
  return height_;
}
void PointLLH::set_height(double value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:atd.common.PointLLH.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point2D::kXFieldNumber;
const int Point2D::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point2D::Point2D()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.Point2D)
}
Point2D::Point2D(const Point2D& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:atd.common.Point2D)
}

void Point2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
}

Point2D::~Point2D() {
  // @@protoc_insertion_point(destructor:atd.common.Point2D)
  SharedDtor();
}

void Point2D::SharedDtor() {
}

void Point2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Point2D& Point2D::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point2D* Point2D::New(::google::protobuf::Arena* arena) const {
  Point2D* n = new Point2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point2D::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.Point2D)
  if (_has_bits_[0 / 32] & 3u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.Point2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.Point2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.Point2D)
  return false;
#undef DO_
}

void Point2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.Point2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.Point2D)
}

size_t Point2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.Point2D)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 3u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point2D::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point2D*>(&from));
}

void Point2D::MergeFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.Point2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point2D::CopyFrom(const Point2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.Point2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point2D::IsInitialized() const {
  return true;
}

void Point2D::Swap(Point2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point2D::InternalSwap(Point2D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Point2D::GetTypeName() const {
  return "atd.common.Point2D";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point2D

// optional double x = 1 [default = nan];
bool Point2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point2D::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
double Point2D::x() const {
  // @@protoc_insertion_point(field_get:atd.common.Point2D.x)
  return x_;
}
void Point2D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Point2D.x)
}

// optional double y = 2 [default = nan];
bool Point2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point2D::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
double Point2D::y() const {
  // @@protoc_insertion_point(field_get:atd.common.Point2D.y)
  return y_;
}
void Point2D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Point2D.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Arrow2D::kXFieldNumber;
const int Arrow2D::kYFieldNumber;
const int Arrow2D::kYawFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Arrow2D::Arrow2D()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.Arrow2D)
}
Arrow2D::Arrow2D(const Arrow2D& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&yaw_) -
    reinterpret_cast<char*>(&x_) + sizeof(yaw_));
  // @@protoc_insertion_point(copy_constructor:atd.common.Arrow2D)
}

void Arrow2D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  yaw_ = ::google::protobuf::internal::NaN();
}

Arrow2D::~Arrow2D() {
  // @@protoc_insertion_point(destructor:atd.common.Arrow2D)
  SharedDtor();
}

void Arrow2D::SharedDtor() {
}

void Arrow2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Arrow2D& Arrow2D::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Arrow2D* Arrow2D::New(::google::protobuf::Arena* arena) const {
  Arrow2D* n = new Arrow2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Arrow2D::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.Arrow2D)
  if (_has_bits_[0 / 32] & 7u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
    yaw_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Arrow2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.Arrow2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double yaw = 3 [default = nan];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.Arrow2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.Arrow2D)
  return false;
#undef DO_
}

void Arrow2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.Arrow2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double yaw = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->yaw(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.Arrow2D)
}

size_t Arrow2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.Arrow2D)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double yaw = 3 [default = nan];
    if (has_yaw()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arrow2D::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Arrow2D*>(&from));
}

void Arrow2D::MergeFrom(const Arrow2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.Arrow2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      yaw_ = from.yaw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Arrow2D::CopyFrom(const Arrow2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.Arrow2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arrow2D::IsInitialized() const {
  return true;
}

void Arrow2D::Swap(Arrow2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Arrow2D::InternalSwap(Arrow2D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(yaw_, other->yaw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Arrow2D::GetTypeName() const {
  return "atd.common.Arrow2D";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Arrow2D

// optional double x = 1 [default = nan];
bool Arrow2D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Arrow2D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Arrow2D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Arrow2D::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
double Arrow2D::x() const {
  // @@protoc_insertion_point(field_get:atd.common.Arrow2D.x)
  return x_;
}
void Arrow2D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Arrow2D.x)
}

// optional double y = 2 [default = nan];
bool Arrow2D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Arrow2D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Arrow2D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Arrow2D::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
double Arrow2D::y() const {
  // @@protoc_insertion_point(field_get:atd.common.Arrow2D.y)
  return y_;
}
void Arrow2D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Arrow2D.y)
}

// optional double yaw = 3 [default = nan];
bool Arrow2D::has_yaw() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Arrow2D::set_has_yaw() {
  _has_bits_[0] |= 0x00000004u;
}
void Arrow2D::clear_has_yaw() {
  _has_bits_[0] &= ~0x00000004u;
}
void Arrow2D::clear_yaw() {
  yaw_ = ::google::protobuf::internal::NaN();
  clear_has_yaw();
}
double Arrow2D::yaw() const {
  // @@protoc_insertion_point(field_get:atd.common.Arrow2D.yaw)
  return yaw_;
}
void Arrow2D::set_yaw(double value) {
  set_has_yaw();
  yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Arrow2D.yaw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Point3D::kXFieldNumber;
const int Point3D::kYFieldNumber;
const int Point3D::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Point3D::Point3D()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.Point3D)
}
Point3D::Point3D(const Point3D& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:atd.common.Point3D)
}

void Point3D::SharedCtor() {
  _cached_size_ = 0;
  x_ = ::google::protobuf::internal::NaN();
  y_ = ::google::protobuf::internal::NaN();
  z_ = ::google::protobuf::internal::NaN();
}

Point3D::~Point3D() {
  // @@protoc_insertion_point(destructor:atd.common.Point3D)
  SharedDtor();
}

void Point3D::SharedDtor() {
}

void Point3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Point3D& Point3D::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Point3D* Point3D::New(::google::protobuf::Arena* arena) const {
  Point3D* n = new Point3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Point3D::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.Point3D)
  if (_has_bits_[0 / 32] & 7u) {
    x_ = ::google::protobuf::internal::NaN();
    y_ = ::google::protobuf::internal::NaN();
    z_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Point3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.Point3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double x = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double y = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double z = 3 [default = nan];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_z();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &z_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.Point3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.Point3D)
  return false;
#undef DO_
}

void Point3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.Point3D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double x = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->x(), output);
  }

  // optional double y = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->y(), output);
  }

  // optional double z = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->z(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.Point3D)
}

size_t Point3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.Point3D)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional double x = 1 [default = nan];
    if (has_x()) {
      total_size += 1 + 8;
    }

    // optional double y = 2 [default = nan];
    if (has_y()) {
      total_size += 1 + 8;
    }

    // optional double z = 3 [default = nan];
    if (has_z()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Point3D::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Point3D*>(&from));
}

void Point3D::MergeFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.Point3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    if (cached_has_bits & 0x00000004u) {
      z_ = from.z_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Point3D::CopyFrom(const Point3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.Point3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Point3D::IsInitialized() const {
  return true;
}

void Point3D::Swap(Point3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Point3D::InternalSwap(Point3D* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Point3D::GetTypeName() const {
  return "atd.common.Point3D";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Point3D

// optional double x = 1 [default = nan];
bool Point3D::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Point3D::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Point3D::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Point3D::clear_x() {
  x_ = ::google::protobuf::internal::NaN();
  clear_has_x();
}
double Point3D::x() const {
  // @@protoc_insertion_point(field_get:atd.common.Point3D.x)
  return x_;
}
void Point3D::set_x(double value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Point3D.x)
}

// optional double y = 2 [default = nan];
bool Point3D::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Point3D::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Point3D::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Point3D::clear_y() {
  y_ = ::google::protobuf::internal::NaN();
  clear_has_y();
}
double Point3D::y() const {
  // @@protoc_insertion_point(field_get:atd.common.Point3D.y)
  return y_;
}
void Point3D::set_y(double value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Point3D.y)
}

// optional double z = 3 [default = nan];
bool Point3D::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Point3D::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Point3D::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Point3D::clear_z() {
  z_ = ::google::protobuf::internal::NaN();
  clear_has_z();
}
double Point3D::z() const {
  // @@protoc_insertion_point(field_get:atd.common.Point3D.z)
  return z_;
}
void Point3D::set_z(double value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Point3D.z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Quaternion::kQxFieldNumber;
const int Quaternion::kQyFieldNumber;
const int Quaternion::kQzFieldNumber;
const int Quaternion::kQwFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Quaternion::Quaternion()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.Quaternion)
}
Quaternion::Quaternion(const Quaternion& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&qx_, &from.qx_,
    reinterpret_cast<char*>(&qw_) -
    reinterpret_cast<char*>(&qx_) + sizeof(qw_));
  // @@protoc_insertion_point(copy_constructor:atd.common.Quaternion)
}

void Quaternion::SharedCtor() {
  _cached_size_ = 0;
  qx_ = ::google::protobuf::internal::NaN();
  qy_ = ::google::protobuf::internal::NaN();
  qz_ = ::google::protobuf::internal::NaN();
  qw_ = ::google::protobuf::internal::NaN();
}

Quaternion::~Quaternion() {
  // @@protoc_insertion_point(destructor:atd.common.Quaternion)
  SharedDtor();
}

void Quaternion::SharedDtor() {
}

void Quaternion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Quaternion& Quaternion::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fgeometry_2eproto::InitDefaults();
  return *internal_default_instance();
}

Quaternion* Quaternion::New(::google::protobuf::Arena* arena) const {
  Quaternion* n = new Quaternion;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Quaternion::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.Quaternion)
  if (_has_bits_[0 / 32] & 15u) {
    qx_ = ::google::protobuf::internal::NaN();
    qy_ = ::google::protobuf::internal::NaN();
    qz_ = ::google::protobuf::internal::NaN();
    qw_ = ::google::protobuf::internal::NaN();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Quaternion::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.Quaternion)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double qx = 1 [default = nan];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_qx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qx_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qy = 2 [default = nan];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_qy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qz = 3 [default = nan];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_qz();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qz_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double qw = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_qw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.Quaternion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.Quaternion)
  return false;
#undef DO_
}

void Quaternion::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.Quaternion)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double qx = 1 [default = nan];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->qx(), output);
  }

  // optional double qy = 2 [default = nan];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->qy(), output);
  }

  // optional double qz = 3 [default = nan];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->qz(), output);
  }

  // optional double qw = 4 [default = nan];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->qw(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.Quaternion)
}

size_t Quaternion::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.Quaternion)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 15u) {
    // optional double qx = 1 [default = nan];
    if (has_qx()) {
      total_size += 1 + 8;
    }

    // optional double qy = 2 [default = nan];
    if (has_qy()) {
      total_size += 1 + 8;
    }

    // optional double qz = 3 [default = nan];
    if (has_qz()) {
      total_size += 1 + 8;
    }

    // optional double qw = 4 [default = nan];
    if (has_qw()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Quaternion::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Quaternion*>(&from));
}

void Quaternion::MergeFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.Quaternion)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      qx_ = from.qx_;
    }
    if (cached_has_bits & 0x00000002u) {
      qy_ = from.qy_;
    }
    if (cached_has_bits & 0x00000004u) {
      qz_ = from.qz_;
    }
    if (cached_has_bits & 0x00000008u) {
      qw_ = from.qw_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Quaternion::CopyFrom(const Quaternion& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.Quaternion)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Quaternion::IsInitialized() const {
  return true;
}

void Quaternion::Swap(Quaternion* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Quaternion::InternalSwap(Quaternion* other) {
  std::swap(qx_, other->qx_);
  std::swap(qy_, other->qy_);
  std::swap(qz_, other->qz_);
  std::swap(qw_, other->qw_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Quaternion::GetTypeName() const {
  return "atd.common.Quaternion";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Quaternion

// optional double qx = 1 [default = nan];
bool Quaternion::has_qx() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Quaternion::set_has_qx() {
  _has_bits_[0] |= 0x00000001u;
}
void Quaternion::clear_has_qx() {
  _has_bits_[0] &= ~0x00000001u;
}
void Quaternion::clear_qx() {
  qx_ = ::google::protobuf::internal::NaN();
  clear_has_qx();
}
double Quaternion::qx() const {
  // @@protoc_insertion_point(field_get:atd.common.Quaternion.qx)
  return qx_;
}
void Quaternion::set_qx(double value) {
  set_has_qx();
  qx_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Quaternion.qx)
}

// optional double qy = 2 [default = nan];
bool Quaternion::has_qy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Quaternion::set_has_qy() {
  _has_bits_[0] |= 0x00000002u;
}
void Quaternion::clear_has_qy() {
  _has_bits_[0] &= ~0x00000002u;
}
void Quaternion::clear_qy() {
  qy_ = ::google::protobuf::internal::NaN();
  clear_has_qy();
}
double Quaternion::qy() const {
  // @@protoc_insertion_point(field_get:atd.common.Quaternion.qy)
  return qy_;
}
void Quaternion::set_qy(double value) {
  set_has_qy();
  qy_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Quaternion.qy)
}

// optional double qz = 3 [default = nan];
bool Quaternion::has_qz() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Quaternion::set_has_qz() {
  _has_bits_[0] |= 0x00000004u;
}
void Quaternion::clear_has_qz() {
  _has_bits_[0] &= ~0x00000004u;
}
void Quaternion::clear_qz() {
  qz_ = ::google::protobuf::internal::NaN();
  clear_has_qz();
}
double Quaternion::qz() const {
  // @@protoc_insertion_point(field_get:atd.common.Quaternion.qz)
  return qz_;
}
void Quaternion::set_qz(double value) {
  set_has_qz();
  qz_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Quaternion.qz)
}

// optional double qw = 4 [default = nan];
bool Quaternion::has_qw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Quaternion::set_has_qw() {
  _has_bits_[0] |= 0x00000008u;
}
void Quaternion::clear_has_qw() {
  _has_bits_[0] &= ~0x00000008u;
}
void Quaternion::clear_qw() {
  qw_ = ::google::protobuf::internal::NaN();
  clear_has_qw();
}
double Quaternion::qw() const {
  // @@protoc_insertion_point(field_get:atd.common.Quaternion.qw)
  return qw_;
}
void Quaternion::set_qw(double value) {
  set_has_qw();
  qw_ = value;
  // @@protoc_insertion_point(field_set:atd.common.Quaternion.qw)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace atd

// @@protoc_insertion_point(global_scope)
