// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/common/vehicle_signal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/common/vehicle_signal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace common {
class VehicleSignalDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VehicleSignal> {
} _VehicleSignal_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fsignal_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _VehicleSignal_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _VehicleSignal_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fsignal_2eproto

bool VehicleSignal_TurnSignal_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const VehicleSignal_TurnSignal VehicleSignal::TURN_NONE;
const VehicleSignal_TurnSignal VehicleSignal::TURN_LEFT;
const VehicleSignal_TurnSignal VehicleSignal::TURN_RIGHT;
const VehicleSignal_TurnSignal VehicleSignal::TurnSignal_MIN;
const VehicleSignal_TurnSignal VehicleSignal::TurnSignal_MAX;
const int VehicleSignal::TurnSignal_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VehicleSignal::kTurnSignalFieldNumber;
const int VehicleSignal::kHighBeamFieldNumber;
const int VehicleSignal::kLowBeamFieldNumber;
const int VehicleSignal::kHornFieldNumber;
const int VehicleSignal::kEmergencyLightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VehicleSignal::VehicleSignal()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fsignal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.common.VehicleSignal)
}
VehicleSignal::VehicleSignal(const VehicleSignal& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&turn_signal_, &from.turn_signal_,
    reinterpret_cast<char*>(&emergency_light_) -
    reinterpret_cast<char*>(&turn_signal_) + sizeof(emergency_light_));
  // @@protoc_insertion_point(copy_constructor:atd.common.VehicleSignal)
}

void VehicleSignal::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&turn_signal_, 0, reinterpret_cast<char*>(&emergency_light_) -
    reinterpret_cast<char*>(&turn_signal_) + sizeof(emergency_light_));
}

VehicleSignal::~VehicleSignal() {
  // @@protoc_insertion_point(destructor:atd.common.VehicleSignal)
  SharedDtor();
}

void VehicleSignal::SharedDtor() {
}

void VehicleSignal::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VehicleSignal& VehicleSignal::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fsignal_2eproto::InitDefaults();
  return *internal_default_instance();
}

VehicleSignal* VehicleSignal::New(::google::protobuf::Arena* arena) const {
  VehicleSignal* n = new VehicleSignal;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VehicleSignal::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.common.VehicleSignal)
  if (_has_bits_[0 / 32] & 31u) {
    ::memset(&turn_signal_, 0, reinterpret_cast<char*>(&emergency_light_) -
      reinterpret_cast<char*>(&turn_signal_) + sizeof(emergency_light_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VehicleSignal::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.common.VehicleSignal)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.VehicleSignal.TurnSignal turn_signal = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::common::VehicleSignal_TurnSignal_IsValid(value)) {
            set_turn_signal(static_cast< ::atd::common::VehicleSignal_TurnSignal >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {
          set_has_high_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_low_beam();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool emergency_light = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_emergency_light();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &emergency_light_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.common.VehicleSignal)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.common.VehicleSignal)
  return false;
#undef DO_
}

void VehicleSignal::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.common.VehicleSignal)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.VehicleSignal.TurnSignal turn_signal = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->turn_signal(), output);
  }

  // optional bool high_beam = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->high_beam(), output);
  }

  // optional bool low_beam = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->low_beam(), output);
  }

  // optional bool horn = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->horn(), output);
  }

  // optional bool emergency_light = 5;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->emergency_light(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.common.VehicleSignal)
}

size_t VehicleSignal::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.common.VehicleSignal)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 31u) {
    // optional .atd.common.VehicleSignal.TurnSignal turn_signal = 1;
    if (has_turn_signal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->turn_signal());
    }

    // optional bool high_beam = 2;
    if (has_high_beam()) {
      total_size += 1 + 1;
    }

    // optional bool low_beam = 3;
    if (has_low_beam()) {
      total_size += 1 + 1;
    }

    // optional bool horn = 4;
    if (has_horn()) {
      total_size += 1 + 1;
    }

    // optional bool emergency_light = 5;
    if (has_emergency_light()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VehicleSignal::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VehicleSignal*>(&from));
}

void VehicleSignal::MergeFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.common.VehicleSignal)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      turn_signal_ = from.turn_signal_;
    }
    if (cached_has_bits & 0x00000002u) {
      high_beam_ = from.high_beam_;
    }
    if (cached_has_bits & 0x00000004u) {
      low_beam_ = from.low_beam_;
    }
    if (cached_has_bits & 0x00000008u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00000010u) {
      emergency_light_ = from.emergency_light_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VehicleSignal::CopyFrom(const VehicleSignal& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.common.VehicleSignal)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VehicleSignal::IsInitialized() const {
  return true;
}

void VehicleSignal::Swap(VehicleSignal* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VehicleSignal::InternalSwap(VehicleSignal* other) {
  std::swap(turn_signal_, other->turn_signal_);
  std::swap(high_beam_, other->high_beam_);
  std::swap(low_beam_, other->low_beam_);
  std::swap(horn_, other->horn_);
  std::swap(emergency_light_, other->emergency_light_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VehicleSignal::GetTypeName() const {
  return "atd.common.VehicleSignal";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VehicleSignal

// optional .atd.common.VehicleSignal.TurnSignal turn_signal = 1;
bool VehicleSignal::has_turn_signal() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VehicleSignal::set_has_turn_signal() {
  _has_bits_[0] |= 0x00000001u;
}
void VehicleSignal::clear_has_turn_signal() {
  _has_bits_[0] &= ~0x00000001u;
}
void VehicleSignal::clear_turn_signal() {
  turn_signal_ = 0;
  clear_has_turn_signal();
}
::atd::common::VehicleSignal_TurnSignal VehicleSignal::turn_signal() const {
  // @@protoc_insertion_point(field_get:atd.common.VehicleSignal.turn_signal)
  return static_cast< ::atd::common::VehicleSignal_TurnSignal >(turn_signal_);
}
void VehicleSignal::set_turn_signal(::atd::common::VehicleSignal_TurnSignal value) {
  assert(::atd::common::VehicleSignal_TurnSignal_IsValid(value));
  set_has_turn_signal();
  turn_signal_ = value;
  // @@protoc_insertion_point(field_set:atd.common.VehicleSignal.turn_signal)
}

// optional bool high_beam = 2;
bool VehicleSignal::has_high_beam() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VehicleSignal::set_has_high_beam() {
  _has_bits_[0] |= 0x00000002u;
}
void VehicleSignal::clear_has_high_beam() {
  _has_bits_[0] &= ~0x00000002u;
}
void VehicleSignal::clear_high_beam() {
  high_beam_ = false;
  clear_has_high_beam();
}
bool VehicleSignal::high_beam() const {
  // @@protoc_insertion_point(field_get:atd.common.VehicleSignal.high_beam)
  return high_beam_;
}
void VehicleSignal::set_high_beam(bool value) {
  set_has_high_beam();
  high_beam_ = value;
  // @@protoc_insertion_point(field_set:atd.common.VehicleSignal.high_beam)
}

// optional bool low_beam = 3;
bool VehicleSignal::has_low_beam() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VehicleSignal::set_has_low_beam() {
  _has_bits_[0] |= 0x00000004u;
}
void VehicleSignal::clear_has_low_beam() {
  _has_bits_[0] &= ~0x00000004u;
}
void VehicleSignal::clear_low_beam() {
  low_beam_ = false;
  clear_has_low_beam();
}
bool VehicleSignal::low_beam() const {
  // @@protoc_insertion_point(field_get:atd.common.VehicleSignal.low_beam)
  return low_beam_;
}
void VehicleSignal::set_low_beam(bool value) {
  set_has_low_beam();
  low_beam_ = value;
  // @@protoc_insertion_point(field_set:atd.common.VehicleSignal.low_beam)
}

// optional bool horn = 4;
bool VehicleSignal::has_horn() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VehicleSignal::set_has_horn() {
  _has_bits_[0] |= 0x00000008u;
}
void VehicleSignal::clear_has_horn() {
  _has_bits_[0] &= ~0x00000008u;
}
void VehicleSignal::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
bool VehicleSignal::horn() const {
  // @@protoc_insertion_point(field_get:atd.common.VehicleSignal.horn)
  return horn_;
}
void VehicleSignal::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:atd.common.VehicleSignal.horn)
}

// optional bool emergency_light = 5;
bool VehicleSignal::has_emergency_light() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VehicleSignal::set_has_emergency_light() {
  _has_bits_[0] |= 0x00000010u;
}
void VehicleSignal::clear_has_emergency_light() {
  _has_bits_[0] &= ~0x00000010u;
}
void VehicleSignal::clear_emergency_light() {
  emergency_light_ = false;
  clear_has_emergency_light();
}
bool VehicleSignal::emergency_light() const {
  // @@protoc_insertion_point(field_get:atd.common.VehicleSignal.emergency_light)
  return emergency_light_;
}
void VehicleSignal::set_emergency_light(bool value) {
  set_has_emergency_light();
  emergency_light_ = value;
  // @@protoc_insertion_point(field_set:atd.common.VehicleSignal.emergency_light)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace atd

// @@protoc_insertion_point(global_scope)
