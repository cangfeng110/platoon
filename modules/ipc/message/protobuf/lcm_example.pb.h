// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/lcm_example.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class DelimitedMsg;
class DelimitedMsgDefaultTypeInternal;
extern DelimitedMsgDefaultTypeInternal _DelimitedMsg_default_instance_;
class FixMsg;
class FixMsgDefaultTypeInternal;
extern FixMsgDefaultTypeInternal _FixMsg_default_instance_;
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
class testarray;
class testarrayDefaultTypeInternal;
extern testarrayDefaultTypeInternal _testarray_default_instance_;
}  // namespace common
}  // namespace atd

namespace atd {
namespace common {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto

// ===================================================================

class FixMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.common.FixMsg) */ {
 public:
  FixMsg();
  virtual ~FixMsg();

  FixMsg(const FixMsg& from);

  inline FixMsg& operator=(const FixMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const FixMsg& default_instance();

  static inline const FixMsg* internal_default_instance() {
    return reinterpret_cast<const FixMsg*>(
               &_FixMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(FixMsg* other);

  // implements Message ----------------------------------------------

  inline FixMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  FixMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const FixMsg& from);
  void MergeFrom(const FixMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(FixMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.common.testarray onearray = 3;
  int onearray_size() const;
  void clear_onearray();
  static const int kOnearrayFieldNumber = 3;
  const ::atd::common::testarray& onearray(int index) const;
  ::atd::common::testarray* mutable_onearray(int index);
  ::atd::common::testarray* add_onearray();
  ::google::protobuf::RepeatedPtrField< ::atd::common::testarray >*
      mutable_onearray();
  const ::google::protobuf::RepeatedPtrField< ::atd::common::testarray >&
      onearray() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // required double msg_num_float_64 = 6;
  bool has_msg_num_float_64() const;
  void clear_msg_num_float_64();
  static const int kMsgNumFloat64FieldNumber = 6;
  double msg_num_float_64() const;
  void set_msg_num_float_64(double value);

  // required float msg_num_float_32 = 5;
  bool has_msg_num_float_32() const;
  void clear_msg_num_float_32();
  static const int kMsgNumFloat32FieldNumber = 5;
  float msg_num_float_32() const;
  void set_msg_num_float_32(float value);

  // @@protoc_insertion_point(class_scope:atd.common.FixMsg)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_msg_num_float_32();
  void clear_has_msg_num_float_32();
  void set_has_msg_num_float_64();
  void clear_has_msg_num_float_64();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::common::testarray > onearray_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  double msg_num_float_64_;
  float msg_num_float_32_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelimitedMsg : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.common.DelimitedMsg) */ {
 public:
  DelimitedMsg();
  virtual ~DelimitedMsg();

  DelimitedMsg(const DelimitedMsg& from);

  inline DelimitedMsg& operator=(const DelimitedMsg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DelimitedMsg& default_instance();

  static inline const DelimitedMsg* internal_default_instance() {
    return reinterpret_cast<const DelimitedMsg*>(
               &_DelimitedMsg_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(DelimitedMsg* other);

  // implements Message ----------------------------------------------

  inline DelimitedMsg* New() const PROTOBUF_FINAL { return New(NULL); }

  DelimitedMsg* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DelimitedMsg& from);
  void MergeFrom(const DelimitedMsg& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DelimitedMsg* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes msg_bytes = 3;
  bool has_msg_bytes() const;
  void clear_msg_bytes();
  static const int kMsgBytesFieldNumber = 3;
  const ::std::string& msg_bytes() const;
  void set_msg_bytes(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_bytes(::std::string&& value);
  #endif
  void set_msg_bytes(const char* value);
  void set_msg_bytes(const void* value, size_t size);
  ::std::string* mutable_msg_bytes();
  ::std::string* release_msg_bytes();
  void set_allocated_msg_bytes(::std::string* msg_bytes);

  // required string msg_string = 4;
  bool has_msg_string() const;
  void clear_msg_string();
  static const int kMsgStringFieldNumber = 4;
  const ::std::string& msg_string() const;
  void set_msg_string(const ::std::string& value);
  #if LANG_CXX11
  void set_msg_string(::std::string&& value);
  #endif
  void set_msg_string(const char* value);
  void set_msg_string(const char* value, size_t size);
  ::std::string* mutable_msg_string();
  ::std::string* release_msg_string();
  void set_allocated_msg_string(::std::string* msg_string);

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // @@protoc_insertion_point(class_scope:atd.common.DelimitedMsg)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_msg_bytes();
  void clear_has_msg_bytes();
  void set_has_msg_string();
  void clear_has_msg_string();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_bytes_;
  ::google::protobuf::internal::ArenaStringPtr msg_string_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class testarray : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.common.testarray) */ {
 public:
  testarray();
  virtual ~testarray();

  testarray(const testarray& from);

  inline testarray& operator=(const testarray& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const testarray& default_instance();

  static inline const testarray* internal_default_instance() {
    return reinterpret_cast<const testarray*>(
               &_testarray_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(testarray* other);

  // implements Message ----------------------------------------------

  inline testarray* New() const PROTOBUF_FINAL { return New(NULL); }

  testarray* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const testarray& from);
  void MergeFrom(const testarray& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(testarray* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double msg_2 = 2;
  bool has_msg_2() const;
  void clear_msg_2();
  static const int kMsg2FieldNumber = 2;
  double msg_2() const;
  void set_msg_2(double value);

  // required float msg_1 = 1;
  bool has_msg_1() const;
  void clear_msg_1();
  static const int kMsg1FieldNumber = 1;
  float msg_1() const;
  void set_msg_1(float value);

  // @@protoc_insertion_point(class_scope:atd.common.testarray)
 private:
  void set_has_msg_1();
  void clear_has_msg_1();
  void set_has_msg_2();
  void clear_has_msg_2();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double msg_2_;
  float msg_1_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// FixMsg

// optional .atd.common.Header header = 1;
inline bool FixMsg::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FixMsg::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FixMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FixMsg::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& FixMsg::header() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* FixMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.FixMsg.header)
  return header_;
}
inline ::atd::common::Header* FixMsg::release_header() {
  // @@protoc_insertion_point(field_release:atd.common.FixMsg.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void FixMsg::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.FixMsg.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool FixMsg::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FixMsg::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FixMsg::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FixMsg::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& FixMsg::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* FixMsg::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.FixMsg.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* FixMsg::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.common.FixMsg.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void FixMsg::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.FixMsg.reservedmsg)
}

// repeated .atd.common.testarray onearray = 3;
inline int FixMsg::onearray_size() const {
  return onearray_.size();
}
inline void FixMsg::clear_onearray() {
  onearray_.Clear();
}
inline const ::atd::common::testarray& FixMsg::onearray(int index) const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.onearray)
  return onearray_.Get(index);
}
inline ::atd::common::testarray* FixMsg::mutable_onearray(int index) {
  // @@protoc_insertion_point(field_mutable:atd.common.FixMsg.onearray)
  return onearray_.Mutable(index);
}
inline ::atd::common::testarray* FixMsg::add_onearray() {
  // @@protoc_insertion_point(field_add:atd.common.FixMsg.onearray)
  return onearray_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::common::testarray >*
FixMsg::mutable_onearray() {
  // @@protoc_insertion_point(field_mutable_list:atd.common.FixMsg.onearray)
  return &onearray_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::common::testarray >&
FixMsg::onearray() const {
  // @@protoc_insertion_point(field_list:atd.common.FixMsg.onearray)
  return onearray_;
}

// required float msg_num_float_32 = 5;
inline bool FixMsg::has_msg_num_float_32() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FixMsg::set_has_msg_num_float_32() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FixMsg::clear_has_msg_num_float_32() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FixMsg::clear_msg_num_float_32() {
  msg_num_float_32_ = 0;
  clear_has_msg_num_float_32();
}
inline float FixMsg::msg_num_float_32() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.msg_num_float_32)
  return msg_num_float_32_;
}
inline void FixMsg::set_msg_num_float_32(float value) {
  set_has_msg_num_float_32();
  msg_num_float_32_ = value;
  // @@protoc_insertion_point(field_set:atd.common.FixMsg.msg_num_float_32)
}

// required double msg_num_float_64 = 6;
inline bool FixMsg::has_msg_num_float_64() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FixMsg::set_has_msg_num_float_64() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FixMsg::clear_has_msg_num_float_64() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FixMsg::clear_msg_num_float_64() {
  msg_num_float_64_ = 0;
  clear_has_msg_num_float_64();
}
inline double FixMsg::msg_num_float_64() const {
  // @@protoc_insertion_point(field_get:atd.common.FixMsg.msg_num_float_64)
  return msg_num_float_64_;
}
inline void FixMsg::set_msg_num_float_64(double value) {
  set_has_msg_num_float_64();
  msg_num_float_64_ = value;
  // @@protoc_insertion_point(field_set:atd.common.FixMsg.msg_num_float_64)
}

// -------------------------------------------------------------------

// DelimitedMsg

// optional .atd.common.Header header = 1;
inline bool DelimitedMsg::has_header() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelimitedMsg::set_has_header() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelimitedMsg::clear_has_header() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelimitedMsg::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& DelimitedMsg::header() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* DelimitedMsg::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.header)
  return header_;
}
inline ::atd::common::Header* DelimitedMsg::release_header() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DelimitedMsg::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool DelimitedMsg::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelimitedMsg::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelimitedMsg::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelimitedMsg::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& DelimitedMsg::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* DelimitedMsg::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* DelimitedMsg::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void DelimitedMsg::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.reservedmsg)
}

// required bytes msg_bytes = 3;
inline bool DelimitedMsg::has_msg_bytes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelimitedMsg::set_has_msg_bytes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelimitedMsg::clear_has_msg_bytes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelimitedMsg::clear_msg_bytes() {
  msg_bytes_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_bytes();
}
inline const ::std::string& DelimitedMsg::msg_bytes() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.msg_bytes)
  return msg_bytes_.GetNoArena();
}
inline void DelimitedMsg::set_msg_bytes(const ::std::string& value) {
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.common.DelimitedMsg.msg_bytes)
}
#if LANG_CXX11
inline void DelimitedMsg::set_msg_bytes(::std::string&& value) {
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.common.DelimitedMsg.msg_bytes)
}
#endif
inline void DelimitedMsg::set_msg_bytes(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.common.DelimitedMsg.msg_bytes)
}
inline void DelimitedMsg::set_msg_bytes(const void* value, size_t size) {
  set_has_msg_bytes();
  msg_bytes_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.common.DelimitedMsg.msg_bytes)
}
inline ::std::string* DelimitedMsg::mutable_msg_bytes() {
  set_has_msg_bytes();
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.msg_bytes)
  return msg_bytes_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelimitedMsg::release_msg_bytes() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.msg_bytes)
  clear_has_msg_bytes();
  return msg_bytes_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelimitedMsg::set_allocated_msg_bytes(::std::string* msg_bytes) {
  if (msg_bytes != NULL) {
    set_has_msg_bytes();
  } else {
    clear_has_msg_bytes();
  }
  msg_bytes_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_bytes);
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.msg_bytes)
}

// required string msg_string = 4;
inline bool DelimitedMsg::has_msg_string() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelimitedMsg::set_has_msg_string() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelimitedMsg::clear_has_msg_string() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelimitedMsg::clear_msg_string() {
  msg_string_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg_string();
}
inline const ::std::string& DelimitedMsg::msg_string() const {
  // @@protoc_insertion_point(field_get:atd.common.DelimitedMsg.msg_string)
  return msg_string_.GetNoArena();
}
inline void DelimitedMsg::set_msg_string(const ::std::string& value) {
  set_has_msg_string();
  msg_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:atd.common.DelimitedMsg.msg_string)
}
#if LANG_CXX11
inline void DelimitedMsg::set_msg_string(::std::string&& value) {
  set_has_msg_string();
  msg_string_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:atd.common.DelimitedMsg.msg_string)
}
#endif
inline void DelimitedMsg::set_msg_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg_string();
  msg_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:atd.common.DelimitedMsg.msg_string)
}
inline void DelimitedMsg::set_msg_string(const char* value, size_t size) {
  set_has_msg_string();
  msg_string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:atd.common.DelimitedMsg.msg_string)
}
inline ::std::string* DelimitedMsg::mutable_msg_string() {
  set_has_msg_string();
  // @@protoc_insertion_point(field_mutable:atd.common.DelimitedMsg.msg_string)
  return msg_string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelimitedMsg::release_msg_string() {
  // @@protoc_insertion_point(field_release:atd.common.DelimitedMsg.msg_string)
  clear_has_msg_string();
  return msg_string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelimitedMsg::set_allocated_msg_string(::std::string* msg_string) {
  if (msg_string != NULL) {
    set_has_msg_string();
  } else {
    clear_has_msg_string();
  }
  msg_string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg_string);
  // @@protoc_insertion_point(field_set_allocated:atd.common.DelimitedMsg.msg_string)
}

// -------------------------------------------------------------------

// testarray

// required float msg_1 = 1;
inline bool testarray::has_msg_1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void testarray::set_has_msg_1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void testarray::clear_has_msg_1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void testarray::clear_msg_1() {
  msg_1_ = 0;
  clear_has_msg_1();
}
inline float testarray::msg_1() const {
  // @@protoc_insertion_point(field_get:atd.common.testarray.msg_1)
  return msg_1_;
}
inline void testarray::set_msg_1(float value) {
  set_has_msg_1();
  msg_1_ = value;
  // @@protoc_insertion_point(field_set:atd.common.testarray.msg_1)
}

// required double msg_2 = 2;
inline bool testarray::has_msg_2() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void testarray::set_has_msg_2() {
  _has_bits_[0] |= 0x00000001u;
}
inline void testarray::clear_has_msg_2() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void testarray::clear_msg_2() {
  msg_2_ = 0;
  clear_has_msg_2();
}
inline double testarray::msg_2() const {
  // @@protoc_insertion_point(field_get:atd.common.testarray.msg_2)
  return msg_2_;
}
inline void testarray::set_msg_2(double value) {
  set_has_msg_2();
  msg_2_ = value;
  // @@protoc_insertion_point(field_set:atd.common.testarray.msg_2)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace common
}  // namespace atd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2flcm_5fexample_2eproto__INCLUDED
