// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/dr/dr.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/dr/dr.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace dr {
class DrStepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DrStep> {
} _DrStep_default_instance_;
class Debug_drstepDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Debug_drstep> {
} _Debug_drstep_default_instance_;
class DrStep_insDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DrStep_ins> {
} _DrStep_ins_default_instance_;
class DrListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DrList> {
} _DrList_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _DrStep_default_instance_.Shutdown();
  _Debug_drstep_default_instance_.Shutdown();
  _DrStep_ins_default_instance_.Shutdown();
  _DrList_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::InitDefaults();
  _DrStep_default_instance_.DefaultConstruct();
  _Debug_drstep_default_instance_.DefaultConstruct();
  _DrStep_ins_default_instance_.DefaultConstruct();
  _DrList_default_instance_.DefaultConstruct();
  _DrList_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _DrList_default_instance_.get_mutable()->reservedmsg_ = const_cast< ::atd::common::Reserved*>(
      ::atd::common::Reserved::internal_default_instance());
  _DrList_default_instance_.get_mutable()->debug_onedr_ = const_cast< ::atd::dr::Debug_drstep*>(
      ::atd::dr::Debug_drstep::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2freserved_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrStep::kCurTimestampFieldNumber;
const int DrStep::kDeltaXFieldNumber;
const int DrStep::kDeltaYFieldNumber;
const int DrStep::kDeltaYawFieldNumber;
const int DrStep::kSumXFieldNumber;
const int DrStep::kSumYFieldNumber;
const int DrStep::kSumYawFieldNumber;
const int DrStep::kBeliefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrStep::DrStep()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.dr.DrStep)
}
DrStep::DrStep(const DrStep& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_timestamp_, &from.cur_timestamp_,
    reinterpret_cast<char*>(&belief_) -
    reinterpret_cast<char*>(&cur_timestamp_) + sizeof(belief_));
  // @@protoc_insertion_point(copy_constructor:atd.dr.DrStep)
}

void DrStep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_timestamp_, 0, reinterpret_cast<char*>(&belief_) -
    reinterpret_cast<char*>(&cur_timestamp_) + sizeof(belief_));
}

DrStep::~DrStep() {
  // @@protoc_insertion_point(destructor:atd.dr.DrStep)
  SharedDtor();
}

void DrStep::SharedDtor() {
}

void DrStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DrStep& DrStep::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  return *internal_default_instance();
}

DrStep* DrStep::New(::google::protobuf::Arena* arena) const {
  DrStep* n = new DrStep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrStep::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.dr.DrStep)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&cur_timestamp_, 0, reinterpret_cast<char*>(&belief_) -
      reinterpret_cast<char*>(&cur_timestamp_) + sizeof(belief_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DrStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.dr.DrStep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cur_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_cur_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_delta_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_delta_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float delta_yaw = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_delta_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &delta_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sum_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_sum_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sum_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_sum_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sum_yaw = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_sum_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float belief = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_belief();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &belief_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.dr.DrStep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.dr.DrStep)
  return false;
#undef DO_
}

void DrStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.dr.DrStep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cur_timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cur_timestamp(), output);
  }

  // optional float delta_x = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->delta_x(), output);
  }

  // optional float delta_y = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->delta_y(), output);
  }

  // optional float delta_yaw = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->delta_yaw(), output);
  }

  // optional float sum_x = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sum_x(), output);
  }

  // optional float sum_y = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sum_y(), output);
  }

  // optional float sum_yaw = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sum_yaw(), output);
  }

  // optional float belief = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->belief(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.dr.DrStep)
}

size_t DrStep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.dr.DrStep)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional double cur_timestamp = 2;
    if (has_cur_timestamp()) {
      total_size += 1 + 8;
    }

    // optional float delta_x = 3;
    if (has_delta_x()) {
      total_size += 1 + 4;
    }

    // optional float delta_y = 4;
    if (has_delta_y()) {
      total_size += 1 + 4;
    }

    // optional float delta_yaw = 5;
    if (has_delta_yaw()) {
      total_size += 1 + 4;
    }

    // optional float sum_x = 6;
    if (has_sum_x()) {
      total_size += 1 + 4;
    }

    // optional float sum_y = 7;
    if (has_sum_y()) {
      total_size += 1 + 4;
    }

    // optional float sum_yaw = 8;
    if (has_sum_yaw()) {
      total_size += 1 + 4;
    }

    // optional float belief = 9;
    if (has_belief()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrStep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrStep*>(&from));
}

void DrStep::MergeFrom(const DrStep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.dr.DrStep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cur_timestamp_ = from.cur_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      delta_x_ = from.delta_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      delta_y_ = from.delta_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      delta_yaw_ = from.delta_yaw_;
    }
    if (cached_has_bits & 0x00000010u) {
      sum_x_ = from.sum_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      sum_y_ = from.sum_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      sum_yaw_ = from.sum_yaw_;
    }
    if (cached_has_bits & 0x00000080u) {
      belief_ = from.belief_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrStep::CopyFrom(const DrStep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.dr.DrStep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrStep::IsInitialized() const {
  return true;
}

void DrStep::Swap(DrStep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrStep::InternalSwap(DrStep* other) {
  std::swap(cur_timestamp_, other->cur_timestamp_);
  std::swap(delta_x_, other->delta_x_);
  std::swap(delta_y_, other->delta_y_);
  std::swap(delta_yaw_, other->delta_yaw_);
  std::swap(sum_x_, other->sum_x_);
  std::swap(sum_y_, other->sum_y_);
  std::swap(sum_yaw_, other->sum_yaw_);
  std::swap(belief_, other->belief_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DrStep::GetTypeName() const {
  return "atd.dr.DrStep";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrStep

// optional double cur_timestamp = 2;
bool DrStep::has_cur_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DrStep::set_has_cur_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void DrStep::clear_has_cur_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void DrStep::clear_cur_timestamp() {
  cur_timestamp_ = 0;
  clear_has_cur_timestamp();
}
double DrStep::cur_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.cur_timestamp)
  return cur_timestamp_;
}
void DrStep::set_cur_timestamp(double value) {
  set_has_cur_timestamp();
  cur_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.cur_timestamp)
}

// optional float delta_x = 3;
bool DrStep::has_delta_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DrStep::set_has_delta_x() {
  _has_bits_[0] |= 0x00000002u;
}
void DrStep::clear_has_delta_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void DrStep::clear_delta_x() {
  delta_x_ = 0;
  clear_has_delta_x();
}
float DrStep::delta_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.delta_x)
  return delta_x_;
}
void DrStep::set_delta_x(float value) {
  set_has_delta_x();
  delta_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.delta_x)
}

// optional float delta_y = 4;
bool DrStep::has_delta_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DrStep::set_has_delta_y() {
  _has_bits_[0] |= 0x00000004u;
}
void DrStep::clear_has_delta_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void DrStep::clear_delta_y() {
  delta_y_ = 0;
  clear_has_delta_y();
}
float DrStep::delta_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.delta_y)
  return delta_y_;
}
void DrStep::set_delta_y(float value) {
  set_has_delta_y();
  delta_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.delta_y)
}

// optional float delta_yaw = 5;
bool DrStep::has_delta_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DrStep::set_has_delta_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
void DrStep::clear_has_delta_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
void DrStep::clear_delta_yaw() {
  delta_yaw_ = 0;
  clear_has_delta_yaw();
}
float DrStep::delta_yaw() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.delta_yaw)
  return delta_yaw_;
}
void DrStep::set_delta_yaw(float value) {
  set_has_delta_yaw();
  delta_yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.delta_yaw)
}

// optional float sum_x = 6;
bool DrStep::has_sum_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DrStep::set_has_sum_x() {
  _has_bits_[0] |= 0x00000010u;
}
void DrStep::clear_has_sum_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void DrStep::clear_sum_x() {
  sum_x_ = 0;
  clear_has_sum_x();
}
float DrStep::sum_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.sum_x)
  return sum_x_;
}
void DrStep::set_sum_x(float value) {
  set_has_sum_x();
  sum_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.sum_x)
}

// optional float sum_y = 7;
bool DrStep::has_sum_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DrStep::set_has_sum_y() {
  _has_bits_[0] |= 0x00000020u;
}
void DrStep::clear_has_sum_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void DrStep::clear_sum_y() {
  sum_y_ = 0;
  clear_has_sum_y();
}
float DrStep::sum_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.sum_y)
  return sum_y_;
}
void DrStep::set_sum_y(float value) {
  set_has_sum_y();
  sum_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.sum_y)
}

// optional float sum_yaw = 8;
bool DrStep::has_sum_yaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DrStep::set_has_sum_yaw() {
  _has_bits_[0] |= 0x00000040u;
}
void DrStep::clear_has_sum_yaw() {
  _has_bits_[0] &= ~0x00000040u;
}
void DrStep::clear_sum_yaw() {
  sum_yaw_ = 0;
  clear_has_sum_yaw();
}
float DrStep::sum_yaw() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.sum_yaw)
  return sum_yaw_;
}
void DrStep::set_sum_yaw(float value) {
  set_has_sum_yaw();
  sum_yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.sum_yaw)
}

// optional float belief = 9;
bool DrStep::has_belief() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DrStep::set_has_belief() {
  _has_bits_[0] |= 0x00000080u;
}
void DrStep::clear_has_belief() {
  _has_bits_[0] &= ~0x00000080u;
}
void DrStep::clear_belief() {
  belief_ = 0;
  clear_has_belief();
}
float DrStep::belief() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.belief)
  return belief_;
}
void DrStep::set_belief(float value) {
  set_has_belief();
  belief_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.belief)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Debug_drstep::kTimediffFieldNumber;
const int Debug_drstep::kWheelSpeedFieldNumber;
const int Debug_drstep::kMoveRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Debug_drstep::Debug_drstep()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.dr.Debug_drstep)
}
Debug_drstep::Debug_drstep(const Debug_drstep& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timediff_, &from.timediff_,
    reinterpret_cast<char*>(&move_radius_) -
    reinterpret_cast<char*>(&timediff_) + sizeof(move_radius_));
  // @@protoc_insertion_point(copy_constructor:atd.dr.Debug_drstep)
}

void Debug_drstep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&timediff_, 0, reinterpret_cast<char*>(&move_radius_) -
    reinterpret_cast<char*>(&timediff_) + sizeof(move_radius_));
}

Debug_drstep::~Debug_drstep() {
  // @@protoc_insertion_point(destructor:atd.dr.Debug_drstep)
  SharedDtor();
}

void Debug_drstep::SharedDtor() {
}

void Debug_drstep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Debug_drstep& Debug_drstep::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  return *internal_default_instance();
}

Debug_drstep* Debug_drstep::New(::google::protobuf::Arena* arena) const {
  Debug_drstep* n = new Debug_drstep;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Debug_drstep::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.dr.Debug_drstep)
  if (_has_bits_[0 / 32] & 7u) {
    ::memset(&timediff_, 0, reinterpret_cast<char*>(&move_radius_) -
      reinterpret_cast<char*>(&timediff_) + sizeof(move_radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Debug_drstep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.dr.Debug_drstep)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double timediff = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_timediff();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &timediff_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float wheel_speed = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u)) {
          set_has_wheel_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &wheel_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float move_radius = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_move_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &move_radius_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.dr.Debug_drstep)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.dr.Debug_drstep)
  return false;
#undef DO_
}

void Debug_drstep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.dr.Debug_drstep)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double timediff = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->timediff(), output);
  }

  // optional float wheel_speed = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->wheel_speed(), output);
  }

  // optional float move_radius = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->move_radius(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.dr.Debug_drstep)
}

size_t Debug_drstep::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.dr.Debug_drstep)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional double timediff = 2;
    if (has_timediff()) {
      total_size += 1 + 8;
    }

    // optional float wheel_speed = 3;
    if (has_wheel_speed()) {
      total_size += 1 + 4;
    }

    // optional float move_radius = 4;
    if (has_move_radius()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Debug_drstep::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Debug_drstep*>(&from));
}

void Debug_drstep::MergeFrom(const Debug_drstep& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.dr.Debug_drstep)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      timediff_ = from.timediff_;
    }
    if (cached_has_bits & 0x00000002u) {
      wheel_speed_ = from.wheel_speed_;
    }
    if (cached_has_bits & 0x00000004u) {
      move_radius_ = from.move_radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Debug_drstep::CopyFrom(const Debug_drstep& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.dr.Debug_drstep)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Debug_drstep::IsInitialized() const {
  return true;
}

void Debug_drstep::Swap(Debug_drstep* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Debug_drstep::InternalSwap(Debug_drstep* other) {
  std::swap(timediff_, other->timediff_);
  std::swap(wheel_speed_, other->wheel_speed_);
  std::swap(move_radius_, other->move_radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Debug_drstep::GetTypeName() const {
  return "atd.dr.Debug_drstep";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Debug_drstep

// optional double timediff = 2;
bool Debug_drstep::has_timediff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Debug_drstep::set_has_timediff() {
  _has_bits_[0] |= 0x00000001u;
}
void Debug_drstep::clear_has_timediff() {
  _has_bits_[0] &= ~0x00000001u;
}
void Debug_drstep::clear_timediff() {
  timediff_ = 0;
  clear_has_timediff();
}
double Debug_drstep::timediff() const {
  // @@protoc_insertion_point(field_get:atd.dr.Debug_drstep.timediff)
  return timediff_;
}
void Debug_drstep::set_timediff(double value) {
  set_has_timediff();
  timediff_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.Debug_drstep.timediff)
}

// optional float wheel_speed = 3;
bool Debug_drstep::has_wheel_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Debug_drstep::set_has_wheel_speed() {
  _has_bits_[0] |= 0x00000002u;
}
void Debug_drstep::clear_has_wheel_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
void Debug_drstep::clear_wheel_speed() {
  wheel_speed_ = 0;
  clear_has_wheel_speed();
}
float Debug_drstep::wheel_speed() const {
  // @@protoc_insertion_point(field_get:atd.dr.Debug_drstep.wheel_speed)
  return wheel_speed_;
}
void Debug_drstep::set_wheel_speed(float value) {
  set_has_wheel_speed();
  wheel_speed_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.Debug_drstep.wheel_speed)
}

// optional float move_radius = 4;
bool Debug_drstep::has_move_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Debug_drstep::set_has_move_radius() {
  _has_bits_[0] |= 0x00000004u;
}
void Debug_drstep::clear_has_move_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
void Debug_drstep::clear_move_radius() {
  move_radius_ = 0;
  clear_has_move_radius();
}
float Debug_drstep::move_radius() const {
  // @@protoc_insertion_point(field_get:atd.dr.Debug_drstep.move_radius)
  return move_radius_;
}
void Debug_drstep::set_move_radius(float value) {
  set_has_move_radius();
  move_radius_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.Debug_drstep.move_radius)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrStep_ins::kCurTimestampFieldNumber;
const int DrStep_ins::kUtmXFieldNumber;
const int DrStep_ins::kUtmYFieldNumber;
const int DrStep_ins::kHeadingFieldNumber;
const int DrStep_ins::kSumXFieldNumber;
const int DrStep_ins::kSumYFieldNumber;
const int DrStep_ins::kSumYawFieldNumber;
const int DrStep_ins::kBeliefFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrStep_ins::DrStep_ins()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.dr.DrStep_ins)
}
DrStep_ins::DrStep_ins(const DrStep_ins& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&cur_timestamp_, &from.cur_timestamp_,
    reinterpret_cast<char*>(&belief_) -
    reinterpret_cast<char*>(&cur_timestamp_) + sizeof(belief_));
  // @@protoc_insertion_point(copy_constructor:atd.dr.DrStep_ins)
}

void DrStep_ins::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&cur_timestamp_, 0, reinterpret_cast<char*>(&belief_) -
    reinterpret_cast<char*>(&cur_timestamp_) + sizeof(belief_));
}

DrStep_ins::~DrStep_ins() {
  // @@protoc_insertion_point(destructor:atd.dr.DrStep_ins)
  SharedDtor();
}

void DrStep_ins::SharedDtor() {
}

void DrStep_ins::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DrStep_ins& DrStep_ins::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  return *internal_default_instance();
}

DrStep_ins* DrStep_ins::New(::google::protobuf::Arena* arena) const {
  DrStep_ins* n = new DrStep_ins;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrStep_ins::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.dr.DrStep_ins)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&cur_timestamp_, 0, reinterpret_cast<char*>(&belief_) -
      reinterpret_cast<char*>(&cur_timestamp_) + sizeof(belief_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DrStep_ins::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.dr.DrStep_ins)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double cur_timestamp = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_cur_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cur_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double utm_x = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_utm_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utm_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double utm_y = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_utm_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &utm_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float heading = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sum_x = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_sum_x();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sum_y = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(61u)) {
          set_has_sum_y();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float sum_yaw = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_sum_yaw();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sum_yaw_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float belief = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_belief();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &belief_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.dr.DrStep_ins)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.dr.DrStep_ins)
  return false;
#undef DO_
}

void DrStep_ins::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.dr.DrStep_ins)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double cur_timestamp = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cur_timestamp(), output);
  }

  // optional double utm_x = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->utm_x(), output);
  }

  // optional double utm_y = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->utm_y(), output);
  }

  // optional float heading = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->heading(), output);
  }

  // optional float sum_x = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sum_x(), output);
  }

  // optional float sum_y = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->sum_y(), output);
  }

  // optional float sum_yaw = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->sum_yaw(), output);
  }

  // optional float belief = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->belief(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.dr.DrStep_ins)
}

size_t DrStep_ins::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.dr.DrStep_ins)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional double cur_timestamp = 2;
    if (has_cur_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double utm_x = 3;
    if (has_utm_x()) {
      total_size += 1 + 8;
    }

    // optional double utm_y = 4;
    if (has_utm_y()) {
      total_size += 1 + 8;
    }

    // optional float heading = 5;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional float sum_x = 6;
    if (has_sum_x()) {
      total_size += 1 + 4;
    }

    // optional float sum_y = 7;
    if (has_sum_y()) {
      total_size += 1 + 4;
    }

    // optional float sum_yaw = 8;
    if (has_sum_yaw()) {
      total_size += 1 + 4;
    }

    // optional float belief = 9;
    if (has_belief()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrStep_ins::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrStep_ins*>(&from));
}

void DrStep_ins::MergeFrom(const DrStep_ins& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.dr.DrStep_ins)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      cur_timestamp_ = from.cur_timestamp_;
    }
    if (cached_has_bits & 0x00000002u) {
      utm_x_ = from.utm_x_;
    }
    if (cached_has_bits & 0x00000004u) {
      utm_y_ = from.utm_y_;
    }
    if (cached_has_bits & 0x00000008u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000010u) {
      sum_x_ = from.sum_x_;
    }
    if (cached_has_bits & 0x00000020u) {
      sum_y_ = from.sum_y_;
    }
    if (cached_has_bits & 0x00000040u) {
      sum_yaw_ = from.sum_yaw_;
    }
    if (cached_has_bits & 0x00000080u) {
      belief_ = from.belief_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrStep_ins::CopyFrom(const DrStep_ins& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.dr.DrStep_ins)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrStep_ins::IsInitialized() const {
  return true;
}

void DrStep_ins::Swap(DrStep_ins* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrStep_ins::InternalSwap(DrStep_ins* other) {
  std::swap(cur_timestamp_, other->cur_timestamp_);
  std::swap(utm_x_, other->utm_x_);
  std::swap(utm_y_, other->utm_y_);
  std::swap(heading_, other->heading_);
  std::swap(sum_x_, other->sum_x_);
  std::swap(sum_y_, other->sum_y_);
  std::swap(sum_yaw_, other->sum_yaw_);
  std::swap(belief_, other->belief_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DrStep_ins::GetTypeName() const {
  return "atd.dr.DrStep_ins";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrStep_ins

// optional double cur_timestamp = 2;
bool DrStep_ins::has_cur_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DrStep_ins::set_has_cur_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void DrStep_ins::clear_has_cur_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void DrStep_ins::clear_cur_timestamp() {
  cur_timestamp_ = 0;
  clear_has_cur_timestamp();
}
double DrStep_ins::cur_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.cur_timestamp)
  return cur_timestamp_;
}
void DrStep_ins::set_cur_timestamp(double value) {
  set_has_cur_timestamp();
  cur_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.cur_timestamp)
}

// optional double utm_x = 3;
bool DrStep_ins::has_utm_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DrStep_ins::set_has_utm_x() {
  _has_bits_[0] |= 0x00000002u;
}
void DrStep_ins::clear_has_utm_x() {
  _has_bits_[0] &= ~0x00000002u;
}
void DrStep_ins::clear_utm_x() {
  utm_x_ = 0;
  clear_has_utm_x();
}
double DrStep_ins::utm_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.utm_x)
  return utm_x_;
}
void DrStep_ins::set_utm_x(double value) {
  set_has_utm_x();
  utm_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.utm_x)
}

// optional double utm_y = 4;
bool DrStep_ins::has_utm_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DrStep_ins::set_has_utm_y() {
  _has_bits_[0] |= 0x00000004u;
}
void DrStep_ins::clear_has_utm_y() {
  _has_bits_[0] &= ~0x00000004u;
}
void DrStep_ins::clear_utm_y() {
  utm_y_ = 0;
  clear_has_utm_y();
}
double DrStep_ins::utm_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.utm_y)
  return utm_y_;
}
void DrStep_ins::set_utm_y(double value) {
  set_has_utm_y();
  utm_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.utm_y)
}

// optional float heading = 5;
bool DrStep_ins::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DrStep_ins::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
void DrStep_ins::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
void DrStep_ins::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
float DrStep_ins::heading() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.heading)
  return heading_;
}
void DrStep_ins::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.heading)
}

// optional float sum_x = 6;
bool DrStep_ins::has_sum_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DrStep_ins::set_has_sum_x() {
  _has_bits_[0] |= 0x00000010u;
}
void DrStep_ins::clear_has_sum_x() {
  _has_bits_[0] &= ~0x00000010u;
}
void DrStep_ins::clear_sum_x() {
  sum_x_ = 0;
  clear_has_sum_x();
}
float DrStep_ins::sum_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.sum_x)
  return sum_x_;
}
void DrStep_ins::set_sum_x(float value) {
  set_has_sum_x();
  sum_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.sum_x)
}

// optional float sum_y = 7;
bool DrStep_ins::has_sum_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void DrStep_ins::set_has_sum_y() {
  _has_bits_[0] |= 0x00000020u;
}
void DrStep_ins::clear_has_sum_y() {
  _has_bits_[0] &= ~0x00000020u;
}
void DrStep_ins::clear_sum_y() {
  sum_y_ = 0;
  clear_has_sum_y();
}
float DrStep_ins::sum_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.sum_y)
  return sum_y_;
}
void DrStep_ins::set_sum_y(float value) {
  set_has_sum_y();
  sum_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.sum_y)
}

// optional float sum_yaw = 8;
bool DrStep_ins::has_sum_yaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void DrStep_ins::set_has_sum_yaw() {
  _has_bits_[0] |= 0x00000040u;
}
void DrStep_ins::clear_has_sum_yaw() {
  _has_bits_[0] &= ~0x00000040u;
}
void DrStep_ins::clear_sum_yaw() {
  sum_yaw_ = 0;
  clear_has_sum_yaw();
}
float DrStep_ins::sum_yaw() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.sum_yaw)
  return sum_yaw_;
}
void DrStep_ins::set_sum_yaw(float value) {
  set_has_sum_yaw();
  sum_yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.sum_yaw)
}

// optional float belief = 9;
bool DrStep_ins::has_belief() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void DrStep_ins::set_has_belief() {
  _has_bits_[0] |= 0x00000080u;
}
void DrStep_ins::clear_has_belief() {
  _has_bits_[0] &= ~0x00000080u;
}
void DrStep_ins::clear_belief() {
  belief_ = 0;
  clear_has_belief();
}
float DrStep_ins::belief() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.belief)
  return belief_;
}
void DrStep_ins::set_belief(float value) {
  set_has_belief();
  belief_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.belief)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DrList::kHeaderFieldNumber;
const int DrList::kReservedmsgFieldNumber;
const int DrList::kLatestTimestampFieldNumber;
const int DrList::kOldestTimestampFieldNumber;
const int DrList::kOnedrFieldNumber;
const int DrList::kOnedrInsFieldNumber;
const int DrList::kDebugOnedrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DrList::DrList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.dr.DrList)
}
DrList::DrList(const DrList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      onedr_(from.onedr_),
      onedr_ins_(from.onedr_ins_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_reservedmsg()) {
    reservedmsg_ = new ::atd::common::Reserved(*from.reservedmsg_);
  } else {
    reservedmsg_ = NULL;
  }
  if (from.has_debug_onedr()) {
    debug_onedr_ = new ::atd::dr::Debug_drstep(*from.debug_onedr_);
  } else {
    debug_onedr_ = NULL;
  }
  ::memcpy(&latest_timestamp_, &from.latest_timestamp_,
    reinterpret_cast<char*>(&oldest_timestamp_) -
    reinterpret_cast<char*>(&latest_timestamp_) + sizeof(oldest_timestamp_));
  // @@protoc_insertion_point(copy_constructor:atd.dr.DrList)
}

void DrList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&oldest_timestamp_) -
    reinterpret_cast<char*>(&header_) + sizeof(oldest_timestamp_));
}

DrList::~DrList() {
  // @@protoc_insertion_point(destructor:atd.dr.DrList)
  SharedDtor();
}

void DrList::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete reservedmsg_;
  }
  if (this != internal_default_instance()) {
    delete debug_onedr_;
  }
}

void DrList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DrList& DrList::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::InitDefaults();
  return *internal_default_instance();
}

DrList* DrList::New(::google::protobuf::Arena* arena) const {
  DrList* n = new DrList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DrList::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.dr.DrList)
  onedr_.Clear();
  onedr_ins_.Clear();
  if (_has_bits_[0 / 32] & 7u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_reservedmsg()) {
      GOOGLE_DCHECK(reservedmsg_ != NULL);
      reservedmsg_->::atd::common::Reserved::Clear();
    }
    if (has_debug_onedr()) {
      GOOGLE_DCHECK(debug_onedr_ != NULL);
      debug_onedr_->::atd::dr::Debug_drstep::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 24u) {
    ::memset(&latest_timestamp_, 0, reinterpret_cast<char*>(&oldest_timestamp_) -
      reinterpret_cast<char*>(&latest_timestamp_) + sizeof(oldest_timestamp_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DrList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.dr.DrList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .atd.common.Header header = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Reserved reservedmsg = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reservedmsg()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double latest_timestamp = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(25u)) {
          set_has_latest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double oldest_timestamp = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(33u)) {
          set_has_oldest_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &oldest_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.dr.DrStep onedr = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onedr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .atd.dr.DrStep_ins onedr_ins = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onedr_ins()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.dr.Debug_drstep debug_onedr = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_debug_onedr()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.dr.DrList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.dr.DrList)
  return false;
#undef DO_
}

void DrList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.dr.DrList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .atd.common.Header header = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->header_, output);
  }

  // optional .atd.common.Reserved reservedmsg = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->reservedmsg_, output);
  }

  // optional double latest_timestamp = 3;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latest_timestamp(), output);
  }

  // optional double oldest_timestamp = 4;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->oldest_timestamp(), output);
  }

  // repeated .atd.dr.DrStep onedr = 5;
  for (unsigned int i = 0, n = this->onedr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, this->onedr(i), output);
  }

  // repeated .atd.dr.DrStep_ins onedr_ins = 6;
  for (unsigned int i = 0, n = this->onedr_ins_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, this->onedr_ins(i), output);
  }

  // optional .atd.dr.Debug_drstep debug_onedr = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->debug_onedr_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.dr.DrList)
}

size_t DrList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.dr.DrList)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  // repeated .atd.dr.DrStep onedr = 5;
  {
    unsigned int count = this->onedr_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onedr(i));
    }
  }

  // repeated .atd.dr.DrStep_ins onedr_ins = 6;
  {
    unsigned int count = this->onedr_ins_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->onedr_ins(i));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional .atd.common.Header header = 1;
    if (has_header()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.Reserved reservedmsg = 2;
    if (has_reservedmsg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->reservedmsg_);
    }

    // optional .atd.dr.Debug_drstep debug_onedr = 7;
    if (has_debug_onedr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->debug_onedr_);
    }

    // optional double latest_timestamp = 3;
    if (has_latest_timestamp()) {
      total_size += 1 + 8;
    }

    // optional double oldest_timestamp = 4;
    if (has_oldest_timestamp()) {
      total_size += 1 + 8;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DrList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DrList*>(&from));
}

void DrList::MergeFrom(const DrList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.dr.DrList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  onedr_.MergeFrom(from.onedr_);
  onedr_ins_.MergeFrom(from.onedr_ins_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_reservedmsg()->::atd::common::Reserved::MergeFrom(from.reservedmsg());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_debug_onedr()->::atd::dr::Debug_drstep::MergeFrom(from.debug_onedr());
    }
    if (cached_has_bits & 0x00000008u) {
      latest_timestamp_ = from.latest_timestamp_;
    }
    if (cached_has_bits & 0x00000010u) {
      oldest_timestamp_ = from.oldest_timestamp_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DrList::CopyFrom(const DrList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.dr.DrList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DrList::IsInitialized() const {
  return true;
}

void DrList::Swap(DrList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DrList::InternalSwap(DrList* other) {
  onedr_.InternalSwap(&other->onedr_);
  onedr_ins_.InternalSwap(&other->onedr_ins_);
  std::swap(header_, other->header_);
  std::swap(reservedmsg_, other->reservedmsg_);
  std::swap(debug_onedr_, other->debug_onedr_);
  std::swap(latest_timestamp_, other->latest_timestamp_);
  std::swap(oldest_timestamp_, other->oldest_timestamp_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DrList::GetTypeName() const {
  return "atd.dr.DrList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DrList

// optional .atd.common.Header header = 1;
bool DrList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void DrList::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void DrList::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void DrList::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& DrList::header() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* DrList::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.header)
  return header_;
}
::atd::common::Header* DrList::release_header() {
  // @@protoc_insertion_point(field_release:atd.dr.DrList.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void DrList::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.dr.DrList.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
bool DrList::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void DrList::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
void DrList::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
void DrList::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
const ::atd::common::Reserved& DrList::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
::atd::common::Reserved* DrList::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.reservedmsg)
  return reservedmsg_;
}
::atd::common::Reserved* DrList::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.dr.DrList.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
void DrList::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.dr.DrList.reservedmsg)
}

// optional double latest_timestamp = 3;
bool DrList::has_latest_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void DrList::set_has_latest_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
void DrList::clear_has_latest_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
void DrList::clear_latest_timestamp() {
  latest_timestamp_ = 0;
  clear_has_latest_timestamp();
}
double DrList::latest_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.latest_timestamp)
  return latest_timestamp_;
}
void DrList::set_latest_timestamp(double value) {
  set_has_latest_timestamp();
  latest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrList.latest_timestamp)
}

// optional double oldest_timestamp = 4;
bool DrList::has_oldest_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void DrList::set_has_oldest_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
void DrList::clear_has_oldest_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
void DrList::clear_oldest_timestamp() {
  oldest_timestamp_ = 0;
  clear_has_oldest_timestamp();
}
double DrList::oldest_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.oldest_timestamp)
  return oldest_timestamp_;
}
void DrList::set_oldest_timestamp(double value) {
  set_has_oldest_timestamp();
  oldest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrList.oldest_timestamp)
}

// repeated .atd.dr.DrStep onedr = 5;
int DrList::onedr_size() const {
  return onedr_.size();
}
void DrList::clear_onedr() {
  onedr_.Clear();
}
const ::atd::dr::DrStep& DrList::onedr(int index) const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.onedr)
  return onedr_.Get(index);
}
::atd::dr::DrStep* DrList::mutable_onedr(int index) {
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.onedr)
  return onedr_.Mutable(index);
}
::atd::dr::DrStep* DrList::add_onedr() {
  // @@protoc_insertion_point(field_add:atd.dr.DrList.onedr)
  return onedr_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep >*
DrList::mutable_onedr() {
  // @@protoc_insertion_point(field_mutable_list:atd.dr.DrList.onedr)
  return &onedr_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep >&
DrList::onedr() const {
  // @@protoc_insertion_point(field_list:atd.dr.DrList.onedr)
  return onedr_;
}

// repeated .atd.dr.DrStep_ins onedr_ins = 6;
int DrList::onedr_ins_size() const {
  return onedr_ins_.size();
}
void DrList::clear_onedr_ins() {
  onedr_ins_.Clear();
}
const ::atd::dr::DrStep_ins& DrList::onedr_ins(int index) const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.onedr_ins)
  return onedr_ins_.Get(index);
}
::atd::dr::DrStep_ins* DrList::mutable_onedr_ins(int index) {
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.onedr_ins)
  return onedr_ins_.Mutable(index);
}
::atd::dr::DrStep_ins* DrList::add_onedr_ins() {
  // @@protoc_insertion_point(field_add:atd.dr.DrList.onedr_ins)
  return onedr_ins_.Add();
}
::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep_ins >*
DrList::mutable_onedr_ins() {
  // @@protoc_insertion_point(field_mutable_list:atd.dr.DrList.onedr_ins)
  return &onedr_ins_;
}
const ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep_ins >&
DrList::onedr_ins() const {
  // @@protoc_insertion_point(field_list:atd.dr.DrList.onedr_ins)
  return onedr_ins_;
}

// optional .atd.dr.Debug_drstep debug_onedr = 7;
bool DrList::has_debug_onedr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void DrList::set_has_debug_onedr() {
  _has_bits_[0] |= 0x00000004u;
}
void DrList::clear_has_debug_onedr() {
  _has_bits_[0] &= ~0x00000004u;
}
void DrList::clear_debug_onedr() {
  if (debug_onedr_ != NULL) debug_onedr_->::atd::dr::Debug_drstep::Clear();
  clear_has_debug_onedr();
}
const ::atd::dr::Debug_drstep& DrList::debug_onedr() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.debug_onedr)
  return debug_onedr_ != NULL ? *debug_onedr_
                         : *::atd::dr::Debug_drstep::internal_default_instance();
}
::atd::dr::Debug_drstep* DrList::mutable_debug_onedr() {
  set_has_debug_onedr();
  if (debug_onedr_ == NULL) {
    debug_onedr_ = new ::atd::dr::Debug_drstep;
  }
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.debug_onedr)
  return debug_onedr_;
}
::atd::dr::Debug_drstep* DrList::release_debug_onedr() {
  // @@protoc_insertion_point(field_release:atd.dr.DrList.debug_onedr)
  clear_has_debug_onedr();
  ::atd::dr::Debug_drstep* temp = debug_onedr_;
  debug_onedr_ = NULL;
  return temp;
}
void DrList::set_allocated_debug_onedr(::atd::dr::Debug_drstep* debug_onedr) {
  delete debug_onedr_;
  debug_onedr_ = debug_onedr;
  if (debug_onedr) {
    set_has_debug_onedr();
  } else {
    clear_has_debug_onedr();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.dr.DrList.debug_onedr)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dr
}  // namespace atd

// @@protoc_insertion_point(global_scope)
