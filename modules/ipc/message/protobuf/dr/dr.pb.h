// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/dr/dr.proto

#ifndef PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto__INCLUDED
#define PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include "modules/ipc/message/protobuf/common/header.pb.h"
#include "modules/ipc/message/protobuf/common/reserved.pb.h"
// @@protoc_insertion_point(includes)
namespace atd {
namespace common {
class Header;
class HeaderDefaultTypeInternal;
extern HeaderDefaultTypeInternal _Header_default_instance_;
class Reserved;
class ReservedDefaultTypeInternal;
extern ReservedDefaultTypeInternal _Reserved_default_instance_;
}  // namespace common
namespace dr {
class Debug_drstep;
class Debug_drstepDefaultTypeInternal;
extern Debug_drstepDefaultTypeInternal _Debug_drstep_default_instance_;
class DrList;
class DrListDefaultTypeInternal;
extern DrListDefaultTypeInternal _DrList_default_instance_;
class DrStep;
class DrStepDefaultTypeInternal;
extern DrStepDefaultTypeInternal _DrStep_default_instance_;
class DrStep_ins;
class DrStep_insDefaultTypeInternal;
extern DrStep_insDefaultTypeInternal _DrStep_ins_default_instance_;
}  // namespace dr
}  // namespace atd

namespace atd {
namespace dr {

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto

// ===================================================================

class DrStep : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.dr.DrStep) */ {
 public:
  DrStep();
  virtual ~DrStep();

  DrStep(const DrStep& from);

  inline DrStep& operator=(const DrStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DrStep& default_instance();

  static inline const DrStep* internal_default_instance() {
    return reinterpret_cast<const DrStep*>(
               &_DrStep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(DrStep* other);

  // implements Message ----------------------------------------------

  inline DrStep* New() const PROTOBUF_FINAL { return New(NULL); }

  DrStep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DrStep& from);
  void MergeFrom(const DrStep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrStep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double cur_timestamp = 2;
  bool has_cur_timestamp() const;
  void clear_cur_timestamp();
  static const int kCurTimestampFieldNumber = 2;
  double cur_timestamp() const;
  void set_cur_timestamp(double value);

  // optional float delta_x = 3;
  bool has_delta_x() const;
  void clear_delta_x();
  static const int kDeltaXFieldNumber = 3;
  float delta_x() const;
  void set_delta_x(float value);

  // optional float delta_y = 4;
  bool has_delta_y() const;
  void clear_delta_y();
  static const int kDeltaYFieldNumber = 4;
  float delta_y() const;
  void set_delta_y(float value);

  // optional float delta_yaw = 5;
  bool has_delta_yaw() const;
  void clear_delta_yaw();
  static const int kDeltaYawFieldNumber = 5;
  float delta_yaw() const;
  void set_delta_yaw(float value);

  // optional float sum_x = 6;
  bool has_sum_x() const;
  void clear_sum_x();
  static const int kSumXFieldNumber = 6;
  float sum_x() const;
  void set_sum_x(float value);

  // optional float sum_y = 7;
  bool has_sum_y() const;
  void clear_sum_y();
  static const int kSumYFieldNumber = 7;
  float sum_y() const;
  void set_sum_y(float value);

  // optional float sum_yaw = 8;
  bool has_sum_yaw() const;
  void clear_sum_yaw();
  static const int kSumYawFieldNumber = 8;
  float sum_yaw() const;
  void set_sum_yaw(float value);

  // optional float belief = 9;
  bool has_belief() const;
  void clear_belief();
  static const int kBeliefFieldNumber = 9;
  float belief() const;
  void set_belief(float value);

  // @@protoc_insertion_point(class_scope:atd.dr.DrStep)
 private:
  void set_has_cur_timestamp();
  void clear_has_cur_timestamp();
  void set_has_delta_x();
  void clear_has_delta_x();
  void set_has_delta_y();
  void clear_has_delta_y();
  void set_has_delta_yaw();
  void clear_has_delta_yaw();
  void set_has_sum_x();
  void clear_has_sum_x();
  void set_has_sum_y();
  void clear_has_sum_y();
  void set_has_sum_yaw();
  void clear_has_sum_yaw();
  void set_has_belief();
  void clear_has_belief();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double cur_timestamp_;
  float delta_x_;
  float delta_y_;
  float delta_yaw_;
  float sum_x_;
  float sum_y_;
  float sum_yaw_;
  float belief_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Debug_drstep : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.dr.Debug_drstep) */ {
 public:
  Debug_drstep();
  virtual ~Debug_drstep();

  Debug_drstep(const Debug_drstep& from);

  inline Debug_drstep& operator=(const Debug_drstep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const Debug_drstep& default_instance();

  static inline const Debug_drstep* internal_default_instance() {
    return reinterpret_cast<const Debug_drstep*>(
               &_Debug_drstep_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Debug_drstep* other);

  // implements Message ----------------------------------------------

  inline Debug_drstep* New() const PROTOBUF_FINAL { return New(NULL); }

  Debug_drstep* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Debug_drstep& from);
  void MergeFrom(const Debug_drstep& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Debug_drstep* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double timediff = 2;
  bool has_timediff() const;
  void clear_timediff();
  static const int kTimediffFieldNumber = 2;
  double timediff() const;
  void set_timediff(double value);

  // optional float wheel_speed = 3;
  bool has_wheel_speed() const;
  void clear_wheel_speed();
  static const int kWheelSpeedFieldNumber = 3;
  float wheel_speed() const;
  void set_wheel_speed(float value);

  // optional float move_radius = 4;
  bool has_move_radius() const;
  void clear_move_radius();
  static const int kMoveRadiusFieldNumber = 4;
  float move_radius() const;
  void set_move_radius(float value);

  // @@protoc_insertion_point(class_scope:atd.dr.Debug_drstep)
 private:
  void set_has_timediff();
  void clear_has_timediff();
  void set_has_wheel_speed();
  void clear_has_wheel_speed();
  void set_has_move_radius();
  void clear_has_move_radius();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double timediff_;
  float wheel_speed_;
  float move_radius_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DrStep_ins : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.dr.DrStep_ins) */ {
 public:
  DrStep_ins();
  virtual ~DrStep_ins();

  DrStep_ins(const DrStep_ins& from);

  inline DrStep_ins& operator=(const DrStep_ins& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DrStep_ins& default_instance();

  static inline const DrStep_ins* internal_default_instance() {
    return reinterpret_cast<const DrStep_ins*>(
               &_DrStep_ins_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(DrStep_ins* other);

  // implements Message ----------------------------------------------

  inline DrStep_ins* New() const PROTOBUF_FINAL { return New(NULL); }

  DrStep_ins* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DrStep_ins& from);
  void MergeFrom(const DrStep_ins& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrStep_ins* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double cur_timestamp = 2;
  bool has_cur_timestamp() const;
  void clear_cur_timestamp();
  static const int kCurTimestampFieldNumber = 2;
  double cur_timestamp() const;
  void set_cur_timestamp(double value);

  // optional double utm_x = 3;
  bool has_utm_x() const;
  void clear_utm_x();
  static const int kUtmXFieldNumber = 3;
  double utm_x() const;
  void set_utm_x(double value);

  // optional double utm_y = 4;
  bool has_utm_y() const;
  void clear_utm_y();
  static const int kUtmYFieldNumber = 4;
  double utm_y() const;
  void set_utm_y(double value);

  // optional float heading = 5;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  float heading() const;
  void set_heading(float value);

  // optional float sum_x = 6;
  bool has_sum_x() const;
  void clear_sum_x();
  static const int kSumXFieldNumber = 6;
  float sum_x() const;
  void set_sum_x(float value);

  // optional float sum_y = 7;
  bool has_sum_y() const;
  void clear_sum_y();
  static const int kSumYFieldNumber = 7;
  float sum_y() const;
  void set_sum_y(float value);

  // optional float sum_yaw = 8;
  bool has_sum_yaw() const;
  void clear_sum_yaw();
  static const int kSumYawFieldNumber = 8;
  float sum_yaw() const;
  void set_sum_yaw(float value);

  // optional float belief = 9;
  bool has_belief() const;
  void clear_belief();
  static const int kBeliefFieldNumber = 9;
  float belief() const;
  void set_belief(float value);

  // @@protoc_insertion_point(class_scope:atd.dr.DrStep_ins)
 private:
  void set_has_cur_timestamp();
  void clear_has_cur_timestamp();
  void set_has_utm_x();
  void clear_has_utm_x();
  void set_has_utm_y();
  void clear_has_utm_y();
  void set_has_heading();
  void clear_has_heading();
  void set_has_sum_x();
  void clear_has_sum_x();
  void set_has_sum_y();
  void clear_has_sum_y();
  void set_has_sum_yaw();
  void clear_has_sum_yaw();
  void set_has_belief();
  void clear_has_belief();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  double cur_timestamp_;
  double utm_x_;
  double utm_y_;
  float heading_;
  float sum_x_;
  float sum_y_;
  float sum_yaw_;
  float belief_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DrList : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:atd.dr.DrList) */ {
 public:
  DrList();
  virtual ~DrList();

  DrList(const DrList& from);

  inline DrList& operator=(const DrList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DrList& default_instance();

  static inline const DrList* internal_default_instance() {
    return reinterpret_cast<const DrList*>(
               &_DrList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(DrList* other);

  // implements Message ----------------------------------------------

  inline DrList* New() const PROTOBUF_FINAL { return New(NULL); }

  DrList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DrList& from);
  void MergeFrom(const DrList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DrList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .atd.dr.DrStep onedr = 5;
  int onedr_size() const;
  void clear_onedr();
  static const int kOnedrFieldNumber = 5;
  const ::atd::dr::DrStep& onedr(int index) const;
  ::atd::dr::DrStep* mutable_onedr(int index);
  ::atd::dr::DrStep* add_onedr();
  ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep >*
      mutable_onedr();
  const ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep >&
      onedr() const;

  // repeated .atd.dr.DrStep_ins onedr_ins = 6;
  int onedr_ins_size() const;
  void clear_onedr_ins();
  static const int kOnedrInsFieldNumber = 6;
  const ::atd::dr::DrStep_ins& onedr_ins(int index) const;
  ::atd::dr::DrStep_ins* mutable_onedr_ins(int index);
  ::atd::dr::DrStep_ins* add_onedr_ins();
  ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep_ins >*
      mutable_onedr_ins();
  const ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep_ins >&
      onedr_ins() const;

  // optional .atd.common.Header header = 1;
  bool has_header() const;
  void clear_header();
  static const int kHeaderFieldNumber = 1;
  const ::atd::common::Header& header() const;
  ::atd::common::Header* mutable_header();
  ::atd::common::Header* release_header();
  void set_allocated_header(::atd::common::Header* header);

  // optional .atd.common.Reserved reservedmsg = 2;
  bool has_reservedmsg() const;
  void clear_reservedmsg();
  static const int kReservedmsgFieldNumber = 2;
  const ::atd::common::Reserved& reservedmsg() const;
  ::atd::common::Reserved* mutable_reservedmsg();
  ::atd::common::Reserved* release_reservedmsg();
  void set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg);

  // optional .atd.dr.Debug_drstep debug_onedr = 7;
  bool has_debug_onedr() const;
  void clear_debug_onedr();
  static const int kDebugOnedrFieldNumber = 7;
  const ::atd::dr::Debug_drstep& debug_onedr() const;
  ::atd::dr::Debug_drstep* mutable_debug_onedr();
  ::atd::dr::Debug_drstep* release_debug_onedr();
  void set_allocated_debug_onedr(::atd::dr::Debug_drstep* debug_onedr);

  // optional double latest_timestamp = 3;
  bool has_latest_timestamp() const;
  void clear_latest_timestamp();
  static const int kLatestTimestampFieldNumber = 3;
  double latest_timestamp() const;
  void set_latest_timestamp(double value);

  // optional double oldest_timestamp = 4;
  bool has_oldest_timestamp() const;
  void clear_oldest_timestamp();
  static const int kOldestTimestampFieldNumber = 4;
  double oldest_timestamp() const;
  void set_oldest_timestamp(double value);

  // @@protoc_insertion_point(class_scope:atd.dr.DrList)
 private:
  void set_has_header();
  void clear_has_header();
  void set_has_reservedmsg();
  void clear_has_reservedmsg();
  void set_has_latest_timestamp();
  void clear_has_latest_timestamp();
  void set_has_oldest_timestamp();
  void clear_has_oldest_timestamp();
  void set_has_debug_onedr();
  void clear_has_debug_onedr();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep > onedr_;
  ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep_ins > onedr_ins_;
  ::atd::common::Header* header_;
  ::atd::common::Reserved* reservedmsg_;
  ::atd::dr::Debug_drstep* debug_onedr_;
  double latest_timestamp_;
  double oldest_timestamp_;
  friend struct protobuf_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// DrStep

// optional double cur_timestamp = 2;
inline bool DrStep::has_cur_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrStep::set_has_cur_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrStep::clear_has_cur_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrStep::clear_cur_timestamp() {
  cur_timestamp_ = 0;
  clear_has_cur_timestamp();
}
inline double DrStep::cur_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.cur_timestamp)
  return cur_timestamp_;
}
inline void DrStep::set_cur_timestamp(double value) {
  set_has_cur_timestamp();
  cur_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.cur_timestamp)
}

// optional float delta_x = 3;
inline bool DrStep::has_delta_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrStep::set_has_delta_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrStep::clear_has_delta_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrStep::clear_delta_x() {
  delta_x_ = 0;
  clear_has_delta_x();
}
inline float DrStep::delta_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.delta_x)
  return delta_x_;
}
inline void DrStep::set_delta_x(float value) {
  set_has_delta_x();
  delta_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.delta_x)
}

// optional float delta_y = 4;
inline bool DrStep::has_delta_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrStep::set_has_delta_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrStep::clear_has_delta_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrStep::clear_delta_y() {
  delta_y_ = 0;
  clear_has_delta_y();
}
inline float DrStep::delta_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.delta_y)
  return delta_y_;
}
inline void DrStep::set_delta_y(float value) {
  set_has_delta_y();
  delta_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.delta_y)
}

// optional float delta_yaw = 5;
inline bool DrStep::has_delta_yaw() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrStep::set_has_delta_yaw() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrStep::clear_has_delta_yaw() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrStep::clear_delta_yaw() {
  delta_yaw_ = 0;
  clear_has_delta_yaw();
}
inline float DrStep::delta_yaw() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.delta_yaw)
  return delta_yaw_;
}
inline void DrStep::set_delta_yaw(float value) {
  set_has_delta_yaw();
  delta_yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.delta_yaw)
}

// optional float sum_x = 6;
inline bool DrStep::has_sum_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrStep::set_has_sum_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrStep::clear_has_sum_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrStep::clear_sum_x() {
  sum_x_ = 0;
  clear_has_sum_x();
}
inline float DrStep::sum_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.sum_x)
  return sum_x_;
}
inline void DrStep::set_sum_x(float value) {
  set_has_sum_x();
  sum_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.sum_x)
}

// optional float sum_y = 7;
inline bool DrStep::has_sum_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DrStep::set_has_sum_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DrStep::clear_has_sum_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DrStep::clear_sum_y() {
  sum_y_ = 0;
  clear_has_sum_y();
}
inline float DrStep::sum_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.sum_y)
  return sum_y_;
}
inline void DrStep::set_sum_y(float value) {
  set_has_sum_y();
  sum_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.sum_y)
}

// optional float sum_yaw = 8;
inline bool DrStep::has_sum_yaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DrStep::set_has_sum_yaw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DrStep::clear_has_sum_yaw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DrStep::clear_sum_yaw() {
  sum_yaw_ = 0;
  clear_has_sum_yaw();
}
inline float DrStep::sum_yaw() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.sum_yaw)
  return sum_yaw_;
}
inline void DrStep::set_sum_yaw(float value) {
  set_has_sum_yaw();
  sum_yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.sum_yaw)
}

// optional float belief = 9;
inline bool DrStep::has_belief() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DrStep::set_has_belief() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DrStep::clear_has_belief() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DrStep::clear_belief() {
  belief_ = 0;
  clear_has_belief();
}
inline float DrStep::belief() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep.belief)
  return belief_;
}
inline void DrStep::set_belief(float value) {
  set_has_belief();
  belief_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep.belief)
}

// -------------------------------------------------------------------

// Debug_drstep

// optional double timediff = 2;
inline bool Debug_drstep::has_timediff() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Debug_drstep::set_has_timediff() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Debug_drstep::clear_has_timediff() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Debug_drstep::clear_timediff() {
  timediff_ = 0;
  clear_has_timediff();
}
inline double Debug_drstep::timediff() const {
  // @@protoc_insertion_point(field_get:atd.dr.Debug_drstep.timediff)
  return timediff_;
}
inline void Debug_drstep::set_timediff(double value) {
  set_has_timediff();
  timediff_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.Debug_drstep.timediff)
}

// optional float wheel_speed = 3;
inline bool Debug_drstep::has_wheel_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Debug_drstep::set_has_wheel_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Debug_drstep::clear_has_wheel_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Debug_drstep::clear_wheel_speed() {
  wheel_speed_ = 0;
  clear_has_wheel_speed();
}
inline float Debug_drstep::wheel_speed() const {
  // @@protoc_insertion_point(field_get:atd.dr.Debug_drstep.wheel_speed)
  return wheel_speed_;
}
inline void Debug_drstep::set_wheel_speed(float value) {
  set_has_wheel_speed();
  wheel_speed_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.Debug_drstep.wheel_speed)
}

// optional float move_radius = 4;
inline bool Debug_drstep::has_move_radius() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Debug_drstep::set_has_move_radius() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Debug_drstep::clear_has_move_radius() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Debug_drstep::clear_move_radius() {
  move_radius_ = 0;
  clear_has_move_radius();
}
inline float Debug_drstep::move_radius() const {
  // @@protoc_insertion_point(field_get:atd.dr.Debug_drstep.move_radius)
  return move_radius_;
}
inline void Debug_drstep::set_move_radius(float value) {
  set_has_move_radius();
  move_radius_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.Debug_drstep.move_radius)
}

// -------------------------------------------------------------------

// DrStep_ins

// optional double cur_timestamp = 2;
inline bool DrStep_ins::has_cur_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrStep_ins::set_has_cur_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrStep_ins::clear_has_cur_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrStep_ins::clear_cur_timestamp() {
  cur_timestamp_ = 0;
  clear_has_cur_timestamp();
}
inline double DrStep_ins::cur_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.cur_timestamp)
  return cur_timestamp_;
}
inline void DrStep_ins::set_cur_timestamp(double value) {
  set_has_cur_timestamp();
  cur_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.cur_timestamp)
}

// optional double utm_x = 3;
inline bool DrStep_ins::has_utm_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrStep_ins::set_has_utm_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrStep_ins::clear_has_utm_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrStep_ins::clear_utm_x() {
  utm_x_ = 0;
  clear_has_utm_x();
}
inline double DrStep_ins::utm_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.utm_x)
  return utm_x_;
}
inline void DrStep_ins::set_utm_x(double value) {
  set_has_utm_x();
  utm_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.utm_x)
}

// optional double utm_y = 4;
inline bool DrStep_ins::has_utm_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrStep_ins::set_has_utm_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrStep_ins::clear_has_utm_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrStep_ins::clear_utm_y() {
  utm_y_ = 0;
  clear_has_utm_y();
}
inline double DrStep_ins::utm_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.utm_y)
  return utm_y_;
}
inline void DrStep_ins::set_utm_y(double value) {
  set_has_utm_y();
  utm_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.utm_y)
}

// optional float heading = 5;
inline bool DrStep_ins::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrStep_ins::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrStep_ins::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrStep_ins::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline float DrStep_ins::heading() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.heading)
  return heading_;
}
inline void DrStep_ins::set_heading(float value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.heading)
}

// optional float sum_x = 6;
inline bool DrStep_ins::has_sum_x() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrStep_ins::set_has_sum_x() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrStep_ins::clear_has_sum_x() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrStep_ins::clear_sum_x() {
  sum_x_ = 0;
  clear_has_sum_x();
}
inline float DrStep_ins::sum_x() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.sum_x)
  return sum_x_;
}
inline void DrStep_ins::set_sum_x(float value) {
  set_has_sum_x();
  sum_x_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.sum_x)
}

// optional float sum_y = 7;
inline bool DrStep_ins::has_sum_y() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DrStep_ins::set_has_sum_y() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DrStep_ins::clear_has_sum_y() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DrStep_ins::clear_sum_y() {
  sum_y_ = 0;
  clear_has_sum_y();
}
inline float DrStep_ins::sum_y() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.sum_y)
  return sum_y_;
}
inline void DrStep_ins::set_sum_y(float value) {
  set_has_sum_y();
  sum_y_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.sum_y)
}

// optional float sum_yaw = 8;
inline bool DrStep_ins::has_sum_yaw() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DrStep_ins::set_has_sum_yaw() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DrStep_ins::clear_has_sum_yaw() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DrStep_ins::clear_sum_yaw() {
  sum_yaw_ = 0;
  clear_has_sum_yaw();
}
inline float DrStep_ins::sum_yaw() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.sum_yaw)
  return sum_yaw_;
}
inline void DrStep_ins::set_sum_yaw(float value) {
  set_has_sum_yaw();
  sum_yaw_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.sum_yaw)
}

// optional float belief = 9;
inline bool DrStep_ins::has_belief() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DrStep_ins::set_has_belief() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DrStep_ins::clear_has_belief() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DrStep_ins::clear_belief() {
  belief_ = 0;
  clear_has_belief();
}
inline float DrStep_ins::belief() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrStep_ins.belief)
  return belief_;
}
inline void DrStep_ins::set_belief(float value) {
  set_has_belief();
  belief_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrStep_ins.belief)
}

// -------------------------------------------------------------------

// DrList

// optional .atd.common.Header header = 1;
inline bool DrList::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DrList::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DrList::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DrList::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
inline const ::atd::common::Header& DrList::header() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
inline ::atd::common::Header* DrList::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.header)
  return header_;
}
inline ::atd::common::Header* DrList::release_header() {
  // @@protoc_insertion_point(field_release:atd.dr.DrList.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
inline void DrList::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.dr.DrList.header)
}

// optional .atd.common.Reserved reservedmsg = 2;
inline bool DrList::has_reservedmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DrList::set_has_reservedmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DrList::clear_has_reservedmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DrList::clear_reservedmsg() {
  if (reservedmsg_ != NULL) reservedmsg_->::atd::common::Reserved::Clear();
  clear_has_reservedmsg();
}
inline const ::atd::common::Reserved& DrList::reservedmsg() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.reservedmsg)
  return reservedmsg_ != NULL ? *reservedmsg_
                         : *::atd::common::Reserved::internal_default_instance();
}
inline ::atd::common::Reserved* DrList::mutable_reservedmsg() {
  set_has_reservedmsg();
  if (reservedmsg_ == NULL) {
    reservedmsg_ = new ::atd::common::Reserved;
  }
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.reservedmsg)
  return reservedmsg_;
}
inline ::atd::common::Reserved* DrList::release_reservedmsg() {
  // @@protoc_insertion_point(field_release:atd.dr.DrList.reservedmsg)
  clear_has_reservedmsg();
  ::atd::common::Reserved* temp = reservedmsg_;
  reservedmsg_ = NULL;
  return temp;
}
inline void DrList::set_allocated_reservedmsg(::atd::common::Reserved* reservedmsg) {
  delete reservedmsg_;
  reservedmsg_ = reservedmsg;
  if (reservedmsg) {
    set_has_reservedmsg();
  } else {
    clear_has_reservedmsg();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.dr.DrList.reservedmsg)
}

// optional double latest_timestamp = 3;
inline bool DrList::has_latest_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DrList::set_has_latest_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DrList::clear_has_latest_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DrList::clear_latest_timestamp() {
  latest_timestamp_ = 0;
  clear_has_latest_timestamp();
}
inline double DrList::latest_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.latest_timestamp)
  return latest_timestamp_;
}
inline void DrList::set_latest_timestamp(double value) {
  set_has_latest_timestamp();
  latest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrList.latest_timestamp)
}

// optional double oldest_timestamp = 4;
inline bool DrList::has_oldest_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DrList::set_has_oldest_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DrList::clear_has_oldest_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DrList::clear_oldest_timestamp() {
  oldest_timestamp_ = 0;
  clear_has_oldest_timestamp();
}
inline double DrList::oldest_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.oldest_timestamp)
  return oldest_timestamp_;
}
inline void DrList::set_oldest_timestamp(double value) {
  set_has_oldest_timestamp();
  oldest_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.dr.DrList.oldest_timestamp)
}

// repeated .atd.dr.DrStep onedr = 5;
inline int DrList::onedr_size() const {
  return onedr_.size();
}
inline void DrList::clear_onedr() {
  onedr_.Clear();
}
inline const ::atd::dr::DrStep& DrList::onedr(int index) const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.onedr)
  return onedr_.Get(index);
}
inline ::atd::dr::DrStep* DrList::mutable_onedr(int index) {
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.onedr)
  return onedr_.Mutable(index);
}
inline ::atd::dr::DrStep* DrList::add_onedr() {
  // @@protoc_insertion_point(field_add:atd.dr.DrList.onedr)
  return onedr_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep >*
DrList::mutable_onedr() {
  // @@protoc_insertion_point(field_mutable_list:atd.dr.DrList.onedr)
  return &onedr_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep >&
DrList::onedr() const {
  // @@protoc_insertion_point(field_list:atd.dr.DrList.onedr)
  return onedr_;
}

// repeated .atd.dr.DrStep_ins onedr_ins = 6;
inline int DrList::onedr_ins_size() const {
  return onedr_ins_.size();
}
inline void DrList::clear_onedr_ins() {
  onedr_ins_.Clear();
}
inline const ::atd::dr::DrStep_ins& DrList::onedr_ins(int index) const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.onedr_ins)
  return onedr_ins_.Get(index);
}
inline ::atd::dr::DrStep_ins* DrList::mutable_onedr_ins(int index) {
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.onedr_ins)
  return onedr_ins_.Mutable(index);
}
inline ::atd::dr::DrStep_ins* DrList::add_onedr_ins() {
  // @@protoc_insertion_point(field_add:atd.dr.DrList.onedr_ins)
  return onedr_ins_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep_ins >*
DrList::mutable_onedr_ins() {
  // @@protoc_insertion_point(field_mutable_list:atd.dr.DrList.onedr_ins)
  return &onedr_ins_;
}
inline const ::google::protobuf::RepeatedPtrField< ::atd::dr::DrStep_ins >&
DrList::onedr_ins() const {
  // @@protoc_insertion_point(field_list:atd.dr.DrList.onedr_ins)
  return onedr_ins_;
}

// optional .atd.dr.Debug_drstep debug_onedr = 7;
inline bool DrList::has_debug_onedr() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DrList::set_has_debug_onedr() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DrList::clear_has_debug_onedr() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DrList::clear_debug_onedr() {
  if (debug_onedr_ != NULL) debug_onedr_->::atd::dr::Debug_drstep::Clear();
  clear_has_debug_onedr();
}
inline const ::atd::dr::Debug_drstep& DrList::debug_onedr() const {
  // @@protoc_insertion_point(field_get:atd.dr.DrList.debug_onedr)
  return debug_onedr_ != NULL ? *debug_onedr_
                         : *::atd::dr::Debug_drstep::internal_default_instance();
}
inline ::atd::dr::Debug_drstep* DrList::mutable_debug_onedr() {
  set_has_debug_onedr();
  if (debug_onedr_ == NULL) {
    debug_onedr_ = new ::atd::dr::Debug_drstep;
  }
  // @@protoc_insertion_point(field_mutable:atd.dr.DrList.debug_onedr)
  return debug_onedr_;
}
inline ::atd::dr::Debug_drstep* DrList::release_debug_onedr() {
  // @@protoc_insertion_point(field_release:atd.dr.DrList.debug_onedr)
  clear_has_debug_onedr();
  ::atd::dr::Debug_drstep* temp = debug_onedr_;
  debug_onedr_ = NULL;
  return temp;
}
inline void DrList::set_allocated_debug_onedr(::atd::dr::Debug_drstep* debug_onedr) {
  delete debug_onedr_;
  debug_onedr_ = debug_onedr;
  if (debug_onedr) {
    set_has_debug_onedr();
  } else {
    clear_has_debug_onedr();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.dr.DrList.debug_onedr)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace dr
}  // namespace atd

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_modules_2fipc_2fmessage_2fprotobuf_2fdr_2fdr_2eproto__INCLUDED
