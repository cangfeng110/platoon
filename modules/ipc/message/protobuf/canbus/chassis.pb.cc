// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: modules/ipc/message/protobuf/canbus/chassis.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "modules/ipc/message/protobuf/canbus/chassis.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace atd {
namespace canbus {
class ChassisDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Chassis> {
} _Chassis_default_instance_;
class ChassisGPSDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ChassisGPS> {
} _ChassisGPS_default_instance_;

namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fchassis_2eproto {

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};


void TableStruct::Shutdown() {
  _Chassis_default_instance_.Shutdown();
  _ChassisGPS_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fsignal_2eproto::InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fdrive_5fstate_2eproto::InitDefaults();
  _Chassis_default_instance_.DefaultConstruct();
  _ChassisGPS_default_instance_.DefaultConstruct();
  _Chassis_default_instance_.get_mutable()->header_ = const_cast< ::atd::common::Header*>(
      ::atd::common::Header::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->signal_ = const_cast< ::atd::common::VehicleSignal*>(
      ::atd::common::VehicleSignal::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->chassis_gps_ = const_cast< ::atd::canbus::ChassisGPS*>(
      ::atd::canbus::ChassisGPS::internal_default_instance());
  _Chassis_default_instance_.get_mutable()->engage_advice_ = const_cast< ::atd::common::EngageAdvice*>(
      ::atd::common::EngageAdvice::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fheader_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fvehicle_5fsignal_2eproto::AddDescriptors();
  ::atd::common::protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcommon_2fdrive_5fstate_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fchassis_2eproto

bool Chassis_DrivingMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_DrivingMode Chassis::COMPLETE_MANUAL;
const Chassis_DrivingMode Chassis::COMPLETE_AUTO_DRIVE;
const Chassis_DrivingMode Chassis::AUTO_STEER_ONLY;
const Chassis_DrivingMode Chassis::AUTO_SPEED_ONLY;
const Chassis_DrivingMode Chassis::EMERGENCY_MODE;
const Chassis_DrivingMode Chassis::DrivingMode_MIN;
const Chassis_DrivingMode Chassis::DrivingMode_MAX;
const int Chassis::DrivingMode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Chassis_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_ErrorCode Chassis::NO_ERROR;
const Chassis_ErrorCode Chassis::CMD_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::CHASSIS_ERROR;
const Chassis_ErrorCode Chassis::MANUAL_INTERVENTION;
const Chassis_ErrorCode Chassis::CHASSIS_CAN_NOT_IN_PERIOD;
const Chassis_ErrorCode Chassis::UNKNOWN_ERROR;
const Chassis_ErrorCode Chassis::ErrorCode_MIN;
const Chassis_ErrorCode Chassis::ErrorCode_MAX;
const int Chassis::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Chassis_GearPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Chassis_GearPosition Chassis::GEAR_NEUTRAL;
const Chassis_GearPosition Chassis::GEAR_DRIVE;
const Chassis_GearPosition Chassis::GEAR_REVERSE;
const Chassis_GearPosition Chassis::GEAR_PARKING;
const Chassis_GearPosition Chassis::GEAR_LOW;
const Chassis_GearPosition Chassis::GEAR_INVALID;
const Chassis_GearPosition Chassis::GEAR_NONE;
const Chassis_GearPosition Chassis::GearPosition_MIN;
const Chassis_GearPosition Chassis::GearPosition_MAX;
const int Chassis::GearPosition_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool GpsQuality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Chassis::kEngineStartedFieldNumber;
const int Chassis::kEngineRpmFieldNumber;
const int Chassis::kSpeedMpsFieldNumber;
const int Chassis::kOdometerMFieldNumber;
const int Chassis::kFuelRangeMFieldNumber;
const int Chassis::kThrottlePercentageFieldNumber;
const int Chassis::kBrakePercentageFieldNumber;
const int Chassis::kSteeringPercentageFieldNumber;
const int Chassis::kSteeringTorqueNmFieldNumber;
const int Chassis::kParkingBrakeFieldNumber;
const int Chassis::kHighBeamSignalFieldNumber;
const int Chassis::kLowBeamSignalFieldNumber;
const int Chassis::kLeftTurnSignalFieldNumber;
const int Chassis::kRightTurnSignalFieldNumber;
const int Chassis::kHornFieldNumber;
const int Chassis::kWiperFieldNumber;
const int Chassis::kDisengageStatusFieldNumber;
const int Chassis::kDrivingModeFieldNumber;
const int Chassis::kErrorCodeFieldNumber;
const int Chassis::kGearLocationFieldNumber;
const int Chassis::kSteeringTimestampFieldNumber;
const int Chassis::kHeaderFieldNumber;
const int Chassis::kChassisErrorMaskFieldNumber;
const int Chassis::kSignalFieldNumber;
const int Chassis::kChassisGpsFieldNumber;
const int Chassis::kEngageAdviceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Chassis::Chassis()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.canbus.Chassis)
}
Chassis::Chassis(const Chassis& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_header()) {
    header_ = new ::atd::common::Header(*from.header_);
  } else {
    header_ = NULL;
  }
  if (from.has_signal()) {
    signal_ = new ::atd::common::VehicleSignal(*from.signal_);
  } else {
    signal_ = NULL;
  }
  if (from.has_chassis_gps()) {
    chassis_gps_ = new ::atd::canbus::ChassisGPS(*from.chassis_gps_);
  } else {
    chassis_gps_ = NULL;
  }
  if (from.has_engage_advice()) {
    engage_advice_ = new ::atd::common::EngageAdvice(*from.engage_advice_);
  } else {
    engage_advice_ = NULL;
  }
  ::memcpy(&fuel_range_m_, &from.fuel_range_m_,
    reinterpret_cast<char*>(&steering_percentage_) -
    reinterpret_cast<char*>(&fuel_range_m_) + sizeof(steering_percentage_));
  // @@protoc_insertion_point(copy_constructor:atd.canbus.Chassis)
}

void Chassis::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&header_, 0, reinterpret_cast<char*>(&chassis_error_mask_) -
    reinterpret_cast<char*>(&header_) + sizeof(chassis_error_mask_));
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
}

Chassis::~Chassis() {
  // @@protoc_insertion_point(destructor:atd.canbus.Chassis)
  SharedDtor();
}

void Chassis::SharedDtor() {
  if (this != internal_default_instance()) {
    delete header_;
  }
  if (this != internal_default_instance()) {
    delete signal_;
  }
  if (this != internal_default_instance()) {
    delete chassis_gps_;
  }
  if (this != internal_default_instance()) {
    delete engage_advice_;
  }
}

void Chassis::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Chassis& Chassis::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

Chassis* Chassis::New(::google::protobuf::Arena* arena) const {
  Chassis* n = new Chassis;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Chassis::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.canbus.Chassis)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_header()) {
      GOOGLE_DCHECK(header_ != NULL);
      header_->::atd::common::Header::Clear();
    }
    if (has_signal()) {
      GOOGLE_DCHECK(signal_ != NULL);
      signal_->::atd::common::VehicleSignal::Clear();
    }
    if (has_chassis_gps()) {
      GOOGLE_DCHECK(chassis_gps_ != NULL);
      chassis_gps_->::atd::canbus::ChassisGPS::Clear();
    }
    if (has_engage_advice()) {
      GOOGLE_DCHECK(engage_advice_ != NULL);
      engage_advice_->::atd::common::EngageAdvice::Clear();
    }
  }
  if (_has_bits_[0 / 32] & 240u) {
    ::memset(&fuel_range_m_, 0, reinterpret_cast<char*>(&high_beam_signal_) -
      reinterpret_cast<char*>(&fuel_range_m_) + sizeof(high_beam_signal_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&low_beam_signal_, 0, reinterpret_cast<char*>(&error_code_) -
      reinterpret_cast<char*>(&low_beam_signal_) + sizeof(error_code_));
  }
  if (_has_bits_[16 / 32] & 16711680u) {
    ::memset(&steering_timestamp_, 0, reinterpret_cast<char*>(&chassis_error_mask_) -
      reinterpret_cast<char*>(&steering_timestamp_) + sizeof(chassis_error_mask_));
    steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
    engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
    speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
    odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
    throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  if (_has_bits_[24 / 32] & 50331648u) {
    brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
    steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Chassis::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.canbus.Chassis)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool engine_started = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_engine_started();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &engine_started_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float engine_rpm = 4 [default = nan];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u)) {
          set_has_engine_rpm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &engine_rpm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float speed_mps = 5 [default = nan];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u)) {
          set_has_speed_mps();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &speed_mps_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float odometer_m = 6 [default = nan];
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(53u)) {
          set_has_odometer_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &odometer_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 fuel_range_m = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_fuel_range_m();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fuel_range_m_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float throttle_percentage = 8 [default = nan];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(69u)) {
          set_has_throttle_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &throttle_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float brake_percentage = 9 [default = nan];
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(77u)) {
          set_has_brake_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &brake_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_percentage = 11 [default = nan];
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(93u)) {
          set_has_steering_percentage();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_percentage_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional float steering_torque_nm = 12 [default = nan];
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(101u)) {
          set_has_steering_torque_nm();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &steering_torque_nm_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool parking_brake = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_parking_brake();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &parking_brake_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool high_beam_signal = 14 [deprecated = true];
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(112u)) {
          set_has_high_beam_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &high_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool low_beam_signal = 15 [deprecated = true];
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(120u)) {
          set_has_low_beam_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &low_beam_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool left_turn_signal = 16 [deprecated = true];
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(128u)) {
          set_has_left_turn_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &left_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool right_turn_signal = 17 [deprecated = true];
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(136u)) {
          set_has_right_turn_signal();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &right_turn_signal_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool horn = 18 [deprecated = true];
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          set_has_horn();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horn_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool wiper = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_wiper();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wiper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool disengage_status = 20 [deprecated = true];
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(160u)) {
          set_has_disengage_status();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disengage_status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
      case 21: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(168u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::canbus::Chassis_DrivingMode_IsValid(value)) {
            set_driving_mode(static_cast< ::atd::canbus::Chassis_DrivingMode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(168u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
      case 22: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(176u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::canbus::Chassis_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::atd::canbus::Chassis_ErrorCode >(value));
          } else {
            unknown_fields_stream.WriteVarint32(176u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.canbus.Chassis.GearPosition gear_location = 23;
      case 23: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(184u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::canbus::Chassis_GearPosition_IsValid(value)) {
            set_gear_location(static_cast< ::atd::canbus::Chassis_GearPosition >(value));
          } else {
            unknown_fields_stream.WriteVarint32(184u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double steering_timestamp = 24;
      case 24: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(193u)) {
          set_has_steering_timestamp();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &steering_timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.Header header = 25;
      case 25: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(202u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_header()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 chassis_error_mask = 26 [default = 0];
      case 26: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(208u)) {
          set_has_chassis_error_mask();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &chassis_error_mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.VehicleSignal signal = 27;
      case 27: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(218u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signal()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.canbus.ChassisGPS chassis_gps = 28;
      case 28: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(226u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_chassis_gps()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.common.EngageAdvice engage_advice = 29;
      case 29: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(234u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_engage_advice()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.canbus.Chassis)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.canbus.Chassis)
  return false;
#undef DO_
}

void Chassis::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.canbus.Chassis)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional bool engine_started = 3;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->engine_started(), output);
  }

  // optional float engine_rpm = 4 [default = nan];
  if (cached_has_bits & 0x00100000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->engine_rpm(), output);
  }

  // optional float speed_mps = 5 [default = nan];
  if (cached_has_bits & 0x00200000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->speed_mps(), output);
  }

  // optional float odometer_m = 6 [default = nan];
  if (cached_has_bits & 0x00400000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->odometer_m(), output);
  }

  // optional int32 fuel_range_m = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fuel_range_m(), output);
  }

  // optional float throttle_percentage = 8 [default = nan];
  if (cached_has_bits & 0x00800000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(8, this->throttle_percentage(), output);
  }

  // optional float brake_percentage = 9 [default = nan];
  if (cached_has_bits & 0x01000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->brake_percentage(), output);
  }

  // optional float steering_percentage = 11 [default = nan];
  if (cached_has_bits & 0x02000000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(11, this->steering_percentage(), output);
  }

  // optional float steering_torque_nm = 12 [default = nan];
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(12, this->steering_torque_nm(), output);
  }

  // optional bool parking_brake = 13;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->parking_brake(), output);
  }

  // optional bool high_beam_signal = 14 [deprecated = true];
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->high_beam_signal(), output);
  }

  // optional bool low_beam_signal = 15 [deprecated = true];
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->low_beam_signal(), output);
  }

  // optional bool left_turn_signal = 16 [deprecated = true];
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->left_turn_signal(), output);
  }

  // optional bool right_turn_signal = 17 [deprecated = true];
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->right_turn_signal(), output);
  }

  // optional bool horn = 18 [deprecated = true];
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->horn(), output);
  }

  // optional bool wiper = 19;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->wiper(), output);
  }

  // optional bool disengage_status = 20 [deprecated = true];
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->disengage_status(), output);
  }

  // optional .atd.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      21, this->driving_mode(), output);
  }

  // optional .atd.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      22, this->error_code(), output);
  }

  // optional .atd.canbus.Chassis.GearPosition gear_location = 23;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->gear_location(), output);
  }

  // optional double steering_timestamp = 24;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(24, this->steering_timestamp(), output);
  }

  // optional .atd.common.Header header = 25;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      25, *this->header_, output);
  }

  // optional int32 chassis_error_mask = 26 [default = 0];
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->chassis_error_mask(), output);
  }

  // optional .atd.common.VehicleSignal signal = 27;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      27, *this->signal_, output);
  }

  // optional .atd.canbus.ChassisGPS chassis_gps = 28;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      28, *this->chassis_gps_, output);
  }

  // optional .atd.common.EngageAdvice engage_advice = 29;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      29, *this->engage_advice_, output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.canbus.Chassis)
}

size_t Chassis::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.canbus.Chassis)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional .atd.common.Header header = 25;
    if (has_header()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->header_);
    }

    // optional .atd.common.VehicleSignal signal = 27;
    if (has_signal()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->signal_);
    }

    // optional .atd.canbus.ChassisGPS chassis_gps = 28;
    if (has_chassis_gps()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->chassis_gps_);
    }

    // optional .atd.common.EngageAdvice engage_advice = 29;
    if (has_engage_advice()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->engage_advice_);
    }

    // optional int32 fuel_range_m = 7;
    if (has_fuel_range_m()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fuel_range_m());
    }

    // optional bool engine_started = 3;
    if (has_engine_started()) {
      total_size += 1 + 1;
    }

    // optional bool parking_brake = 13;
    if (has_parking_brake()) {
      total_size += 1 + 1;
    }

    // optional bool high_beam_signal = 14 [deprecated = true];
    if (has_high_beam_signal()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional bool low_beam_signal = 15 [deprecated = true];
    if (has_low_beam_signal()) {
      total_size += 1 + 1;
    }

    // optional bool left_turn_signal = 16 [deprecated = true];
    if (has_left_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool right_turn_signal = 17 [deprecated = true];
    if (has_right_turn_signal()) {
      total_size += 2 + 1;
    }

    // optional bool horn = 18 [deprecated = true];
    if (has_horn()) {
      total_size += 2 + 1;
    }

    // optional bool wiper = 19;
    if (has_wiper()) {
      total_size += 2 + 1;
    }

    // optional bool disengage_status = 20 [deprecated = true];
    if (has_disengage_status()) {
      total_size += 2 + 1;
    }

    // optional .atd.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
    if (has_driving_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->driving_mode());
    }

    // optional .atd.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
    if (has_error_code()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

  }
  if (_has_bits_[16 / 32] & 16711680u) {
    // optional double steering_timestamp = 24;
    if (has_steering_timestamp()) {
      total_size += 2 + 8;
    }

    // optional .atd.canbus.Chassis.GearPosition gear_location = 23;
    if (has_gear_location()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->gear_location());
    }

    // optional int32 chassis_error_mask = 26 [default = 0];
    if (has_chassis_error_mask()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->chassis_error_mask());
    }

    // optional float steering_torque_nm = 12 [default = nan];
    if (has_steering_torque_nm()) {
      total_size += 1 + 4;
    }

    // optional float engine_rpm = 4 [default = nan];
    if (has_engine_rpm()) {
      total_size += 1 + 4;
    }

    // optional float speed_mps = 5 [default = nan];
    if (has_speed_mps()) {
      total_size += 1 + 4;
    }

    // optional float odometer_m = 6 [default = nan];
    if (has_odometer_m()) {
      total_size += 1 + 4;
    }

    // optional float throttle_percentage = 8 [default = nan];
    if (has_throttle_percentage()) {
      total_size += 1 + 4;
    }

  }
  if (_has_bits_[24 / 32] & 50331648u) {
    // optional float brake_percentage = 9 [default = nan];
    if (has_brake_percentage()) {
      total_size += 1 + 4;
    }

    // optional float steering_percentage = 11 [default = nan];
    if (has_steering_percentage()) {
      total_size += 1 + 4;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Chassis::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Chassis*>(&from));
}

void Chassis::MergeFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.canbus.Chassis)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_header()->::atd::common::Header::MergeFrom(from.header());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_signal()->::atd::common::VehicleSignal::MergeFrom(from.signal());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_chassis_gps()->::atd::canbus::ChassisGPS::MergeFrom(from.chassis_gps());
    }
    if (cached_has_bits & 0x00000008u) {
      mutable_engage_advice()->::atd::common::EngageAdvice::MergeFrom(from.engage_advice());
    }
    if (cached_has_bits & 0x00000010u) {
      fuel_range_m_ = from.fuel_range_m_;
    }
    if (cached_has_bits & 0x00000020u) {
      engine_started_ = from.engine_started_;
    }
    if (cached_has_bits & 0x00000040u) {
      parking_brake_ = from.parking_brake_;
    }
    if (cached_has_bits & 0x00000080u) {
      high_beam_signal_ = from.high_beam_signal_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      low_beam_signal_ = from.low_beam_signal_;
    }
    if (cached_has_bits & 0x00000200u) {
      left_turn_signal_ = from.left_turn_signal_;
    }
    if (cached_has_bits & 0x00000400u) {
      right_turn_signal_ = from.right_turn_signal_;
    }
    if (cached_has_bits & 0x00000800u) {
      horn_ = from.horn_;
    }
    if (cached_has_bits & 0x00001000u) {
      wiper_ = from.wiper_;
    }
    if (cached_has_bits & 0x00002000u) {
      disengage_status_ = from.disengage_status_;
    }
    if (cached_has_bits & 0x00004000u) {
      driving_mode_ = from.driving_mode_;
    }
    if (cached_has_bits & 0x00008000u) {
      error_code_ = from.error_code_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 16711680u) {
    if (cached_has_bits & 0x00010000u) {
      steering_timestamp_ = from.steering_timestamp_;
    }
    if (cached_has_bits & 0x00020000u) {
      gear_location_ = from.gear_location_;
    }
    if (cached_has_bits & 0x00040000u) {
      chassis_error_mask_ = from.chassis_error_mask_;
    }
    if (cached_has_bits & 0x00080000u) {
      steering_torque_nm_ = from.steering_torque_nm_;
    }
    if (cached_has_bits & 0x00100000u) {
      engine_rpm_ = from.engine_rpm_;
    }
    if (cached_has_bits & 0x00200000u) {
      speed_mps_ = from.speed_mps_;
    }
    if (cached_has_bits & 0x00400000u) {
      odometer_m_ = from.odometer_m_;
    }
    if (cached_has_bits & 0x00800000u) {
      throttle_percentage_ = from.throttle_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 50331648u) {
    if (cached_has_bits & 0x01000000u) {
      brake_percentage_ = from.brake_percentage_;
    }
    if (cached_has_bits & 0x02000000u) {
      steering_percentage_ = from.steering_percentage_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Chassis::CopyFrom(const Chassis& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.canbus.Chassis)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Chassis::IsInitialized() const {
  return true;
}

void Chassis::Swap(Chassis* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Chassis::InternalSwap(Chassis* other) {
  std::swap(header_, other->header_);
  std::swap(signal_, other->signal_);
  std::swap(chassis_gps_, other->chassis_gps_);
  std::swap(engage_advice_, other->engage_advice_);
  std::swap(fuel_range_m_, other->fuel_range_m_);
  std::swap(engine_started_, other->engine_started_);
  std::swap(parking_brake_, other->parking_brake_);
  std::swap(high_beam_signal_, other->high_beam_signal_);
  std::swap(low_beam_signal_, other->low_beam_signal_);
  std::swap(left_turn_signal_, other->left_turn_signal_);
  std::swap(right_turn_signal_, other->right_turn_signal_);
  std::swap(horn_, other->horn_);
  std::swap(wiper_, other->wiper_);
  std::swap(disengage_status_, other->disengage_status_);
  std::swap(driving_mode_, other->driving_mode_);
  std::swap(error_code_, other->error_code_);
  std::swap(steering_timestamp_, other->steering_timestamp_);
  std::swap(gear_location_, other->gear_location_);
  std::swap(chassis_error_mask_, other->chassis_error_mask_);
  std::swap(steering_torque_nm_, other->steering_torque_nm_);
  std::swap(engine_rpm_, other->engine_rpm_);
  std::swap(speed_mps_, other->speed_mps_);
  std::swap(odometer_m_, other->odometer_m_);
  std::swap(throttle_percentage_, other->throttle_percentage_);
  std::swap(brake_percentage_, other->brake_percentage_);
  std::swap(steering_percentage_, other->steering_percentage_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Chassis::GetTypeName() const {
  return "atd.canbus.Chassis";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Chassis

// optional bool engine_started = 3;
bool Chassis::has_engine_started() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void Chassis::set_has_engine_started() {
  _has_bits_[0] |= 0x00000020u;
}
void Chassis::clear_has_engine_started() {
  _has_bits_[0] &= ~0x00000020u;
}
void Chassis::clear_engine_started() {
  engine_started_ = false;
  clear_has_engine_started();
}
bool Chassis::engine_started() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.engine_started)
  return engine_started_;
}
void Chassis::set_engine_started(bool value) {
  set_has_engine_started();
  engine_started_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.engine_started)
}

// optional float engine_rpm = 4 [default = nan];
bool Chassis::has_engine_rpm() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void Chassis::set_has_engine_rpm() {
  _has_bits_[0] |= 0x00100000u;
}
void Chassis::clear_has_engine_rpm() {
  _has_bits_[0] &= ~0x00100000u;
}
void Chassis::clear_engine_rpm() {
  engine_rpm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_engine_rpm();
}
float Chassis::engine_rpm() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.engine_rpm)
  return engine_rpm_;
}
void Chassis::set_engine_rpm(float value) {
  set_has_engine_rpm();
  engine_rpm_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.engine_rpm)
}

// optional float speed_mps = 5 [default = nan];
bool Chassis::has_speed_mps() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
void Chassis::set_has_speed_mps() {
  _has_bits_[0] |= 0x00200000u;
}
void Chassis::clear_has_speed_mps() {
  _has_bits_[0] &= ~0x00200000u;
}
void Chassis::clear_speed_mps() {
  speed_mps_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_speed_mps();
}
float Chassis::speed_mps() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.speed_mps)
  return speed_mps_;
}
void Chassis::set_speed_mps(float value) {
  set_has_speed_mps();
  speed_mps_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.speed_mps)
}

// optional float odometer_m = 6 [default = nan];
bool Chassis::has_odometer_m() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
void Chassis::set_has_odometer_m() {
  _has_bits_[0] |= 0x00400000u;
}
void Chassis::clear_has_odometer_m() {
  _has_bits_[0] &= ~0x00400000u;
}
void Chassis::clear_odometer_m() {
  odometer_m_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_odometer_m();
}
float Chassis::odometer_m() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.odometer_m)
  return odometer_m_;
}
void Chassis::set_odometer_m(float value) {
  set_has_odometer_m();
  odometer_m_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.odometer_m)
}

// optional int32 fuel_range_m = 7;
bool Chassis::has_fuel_range_m() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void Chassis::set_has_fuel_range_m() {
  _has_bits_[0] |= 0x00000010u;
}
void Chassis::clear_has_fuel_range_m() {
  _has_bits_[0] &= ~0x00000010u;
}
void Chassis::clear_fuel_range_m() {
  fuel_range_m_ = 0;
  clear_has_fuel_range_m();
}
::google::protobuf::int32 Chassis::fuel_range_m() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.fuel_range_m)
  return fuel_range_m_;
}
void Chassis::set_fuel_range_m(::google::protobuf::int32 value) {
  set_has_fuel_range_m();
  fuel_range_m_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.fuel_range_m)
}

// optional float throttle_percentage = 8 [default = nan];
bool Chassis::has_throttle_percentage() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
void Chassis::set_has_throttle_percentage() {
  _has_bits_[0] |= 0x00800000u;
}
void Chassis::clear_has_throttle_percentage() {
  _has_bits_[0] &= ~0x00800000u;
}
void Chassis::clear_throttle_percentage() {
  throttle_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_throttle_percentage();
}
float Chassis::throttle_percentage() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.throttle_percentage)
  return throttle_percentage_;
}
void Chassis::set_throttle_percentage(float value) {
  set_has_throttle_percentage();
  throttle_percentage_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.throttle_percentage)
}

// optional float brake_percentage = 9 [default = nan];
bool Chassis::has_brake_percentage() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
void Chassis::set_has_brake_percentage() {
  _has_bits_[0] |= 0x01000000u;
}
void Chassis::clear_has_brake_percentage() {
  _has_bits_[0] &= ~0x01000000u;
}
void Chassis::clear_brake_percentage() {
  brake_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_brake_percentage();
}
float Chassis::brake_percentage() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.brake_percentage)
  return brake_percentage_;
}
void Chassis::set_brake_percentage(float value) {
  set_has_brake_percentage();
  brake_percentage_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.brake_percentage)
}

// optional float steering_percentage = 11 [default = nan];
bool Chassis::has_steering_percentage() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
void Chassis::set_has_steering_percentage() {
  _has_bits_[0] |= 0x02000000u;
}
void Chassis::clear_has_steering_percentage() {
  _has_bits_[0] &= ~0x02000000u;
}
void Chassis::clear_steering_percentage() {
  steering_percentage_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_percentage();
}
float Chassis::steering_percentage() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.steering_percentage)
  return steering_percentage_;
}
void Chassis::set_steering_percentage(float value) {
  set_has_steering_percentage();
  steering_percentage_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.steering_percentage)
}

// optional float steering_torque_nm = 12 [default = nan];
bool Chassis::has_steering_torque_nm() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void Chassis::set_has_steering_torque_nm() {
  _has_bits_[0] |= 0x00080000u;
}
void Chassis::clear_has_steering_torque_nm() {
  _has_bits_[0] &= ~0x00080000u;
}
void Chassis::clear_steering_torque_nm() {
  steering_torque_nm_ = static_cast<float>(::google::protobuf::internal::NaN());
  clear_has_steering_torque_nm();
}
float Chassis::steering_torque_nm() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.steering_torque_nm)
  return steering_torque_nm_;
}
void Chassis::set_steering_torque_nm(float value) {
  set_has_steering_torque_nm();
  steering_torque_nm_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.steering_torque_nm)
}

// optional bool parking_brake = 13;
bool Chassis::has_parking_brake() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void Chassis::set_has_parking_brake() {
  _has_bits_[0] |= 0x00000040u;
}
void Chassis::clear_has_parking_brake() {
  _has_bits_[0] &= ~0x00000040u;
}
void Chassis::clear_parking_brake() {
  parking_brake_ = false;
  clear_has_parking_brake();
}
bool Chassis::parking_brake() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.parking_brake)
  return parking_brake_;
}
void Chassis::set_parking_brake(bool value) {
  set_has_parking_brake();
  parking_brake_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.parking_brake)
}

// optional bool high_beam_signal = 14 [deprecated = true];
bool Chassis::has_high_beam_signal() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void Chassis::set_has_high_beam_signal() {
  _has_bits_[0] |= 0x00000080u;
}
void Chassis::clear_has_high_beam_signal() {
  _has_bits_[0] &= ~0x00000080u;
}
void Chassis::clear_high_beam_signal() {
  high_beam_signal_ = false;
  clear_has_high_beam_signal();
}
bool Chassis::high_beam_signal() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.high_beam_signal)
  return high_beam_signal_;
}
void Chassis::set_high_beam_signal(bool value) {
  set_has_high_beam_signal();
  high_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.high_beam_signal)
}

// optional bool low_beam_signal = 15 [deprecated = true];
bool Chassis::has_low_beam_signal() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void Chassis::set_has_low_beam_signal() {
  _has_bits_[0] |= 0x00000100u;
}
void Chassis::clear_has_low_beam_signal() {
  _has_bits_[0] &= ~0x00000100u;
}
void Chassis::clear_low_beam_signal() {
  low_beam_signal_ = false;
  clear_has_low_beam_signal();
}
bool Chassis::low_beam_signal() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.low_beam_signal)
  return low_beam_signal_;
}
void Chassis::set_low_beam_signal(bool value) {
  set_has_low_beam_signal();
  low_beam_signal_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.low_beam_signal)
}

// optional bool left_turn_signal = 16 [deprecated = true];
bool Chassis::has_left_turn_signal() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void Chassis::set_has_left_turn_signal() {
  _has_bits_[0] |= 0x00000200u;
}
void Chassis::clear_has_left_turn_signal() {
  _has_bits_[0] &= ~0x00000200u;
}
void Chassis::clear_left_turn_signal() {
  left_turn_signal_ = false;
  clear_has_left_turn_signal();
}
bool Chassis::left_turn_signal() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.left_turn_signal)
  return left_turn_signal_;
}
void Chassis::set_left_turn_signal(bool value) {
  set_has_left_turn_signal();
  left_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.left_turn_signal)
}

// optional bool right_turn_signal = 17 [deprecated = true];
bool Chassis::has_right_turn_signal() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void Chassis::set_has_right_turn_signal() {
  _has_bits_[0] |= 0x00000400u;
}
void Chassis::clear_has_right_turn_signal() {
  _has_bits_[0] &= ~0x00000400u;
}
void Chassis::clear_right_turn_signal() {
  right_turn_signal_ = false;
  clear_has_right_turn_signal();
}
bool Chassis::right_turn_signal() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.right_turn_signal)
  return right_turn_signal_;
}
void Chassis::set_right_turn_signal(bool value) {
  set_has_right_turn_signal();
  right_turn_signal_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.right_turn_signal)
}

// optional bool horn = 18 [deprecated = true];
bool Chassis::has_horn() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void Chassis::set_has_horn() {
  _has_bits_[0] |= 0x00000800u;
}
void Chassis::clear_has_horn() {
  _has_bits_[0] &= ~0x00000800u;
}
void Chassis::clear_horn() {
  horn_ = false;
  clear_has_horn();
}
bool Chassis::horn() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.horn)
  return horn_;
}
void Chassis::set_horn(bool value) {
  set_has_horn();
  horn_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.horn)
}

// optional bool wiper = 19;
bool Chassis::has_wiper() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void Chassis::set_has_wiper() {
  _has_bits_[0] |= 0x00001000u;
}
void Chassis::clear_has_wiper() {
  _has_bits_[0] &= ~0x00001000u;
}
void Chassis::clear_wiper() {
  wiper_ = false;
  clear_has_wiper();
}
bool Chassis::wiper() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.wiper)
  return wiper_;
}
void Chassis::set_wiper(bool value) {
  set_has_wiper();
  wiper_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.wiper)
}

// optional bool disengage_status = 20 [deprecated = true];
bool Chassis::has_disengage_status() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void Chassis::set_has_disengage_status() {
  _has_bits_[0] |= 0x00002000u;
}
void Chassis::clear_has_disengage_status() {
  _has_bits_[0] &= ~0x00002000u;
}
void Chassis::clear_disengage_status() {
  disengage_status_ = false;
  clear_has_disengage_status();
}
bool Chassis::disengage_status() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.disengage_status)
  return disengage_status_;
}
void Chassis::set_disengage_status(bool value) {
  set_has_disengage_status();
  disengage_status_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.disengage_status)
}

// optional .atd.canbus.Chassis.DrivingMode driving_mode = 21 [default = COMPLETE_MANUAL];
bool Chassis::has_driving_mode() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void Chassis::set_has_driving_mode() {
  _has_bits_[0] |= 0x00004000u;
}
void Chassis::clear_has_driving_mode() {
  _has_bits_[0] &= ~0x00004000u;
}
void Chassis::clear_driving_mode() {
  driving_mode_ = 0;
  clear_has_driving_mode();
}
::atd::canbus::Chassis_DrivingMode Chassis::driving_mode() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.driving_mode)
  return static_cast< ::atd::canbus::Chassis_DrivingMode >(driving_mode_);
}
void Chassis::set_driving_mode(::atd::canbus::Chassis_DrivingMode value) {
  assert(::atd::canbus::Chassis_DrivingMode_IsValid(value));
  set_has_driving_mode();
  driving_mode_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.driving_mode)
}

// optional .atd.canbus.Chassis.ErrorCode error_code = 22 [default = NO_ERROR];
bool Chassis::has_error_code() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void Chassis::set_has_error_code() {
  _has_bits_[0] |= 0x00008000u;
}
void Chassis::clear_has_error_code() {
  _has_bits_[0] &= ~0x00008000u;
}
void Chassis::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
::atd::canbus::Chassis_ErrorCode Chassis::error_code() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.error_code)
  return static_cast< ::atd::canbus::Chassis_ErrorCode >(error_code_);
}
void Chassis::set_error_code(::atd::canbus::Chassis_ErrorCode value) {
  assert(::atd::canbus::Chassis_ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.error_code)
}

// optional .atd.canbus.Chassis.GearPosition gear_location = 23;
bool Chassis::has_gear_location() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void Chassis::set_has_gear_location() {
  _has_bits_[0] |= 0x00020000u;
}
void Chassis::clear_has_gear_location() {
  _has_bits_[0] &= ~0x00020000u;
}
void Chassis::clear_gear_location() {
  gear_location_ = 0;
  clear_has_gear_location();
}
::atd::canbus::Chassis_GearPosition Chassis::gear_location() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.gear_location)
  return static_cast< ::atd::canbus::Chassis_GearPosition >(gear_location_);
}
void Chassis::set_gear_location(::atd::canbus::Chassis_GearPosition value) {
  assert(::atd::canbus::Chassis_GearPosition_IsValid(value));
  set_has_gear_location();
  gear_location_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.gear_location)
}

// optional double steering_timestamp = 24;
bool Chassis::has_steering_timestamp() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void Chassis::set_has_steering_timestamp() {
  _has_bits_[0] |= 0x00010000u;
}
void Chassis::clear_has_steering_timestamp() {
  _has_bits_[0] &= ~0x00010000u;
}
void Chassis::clear_steering_timestamp() {
  steering_timestamp_ = 0;
  clear_has_steering_timestamp();
}
double Chassis::steering_timestamp() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.steering_timestamp)
  return steering_timestamp_;
}
void Chassis::set_steering_timestamp(double value) {
  set_has_steering_timestamp();
  steering_timestamp_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.steering_timestamp)
}

// optional .atd.common.Header header = 25;
bool Chassis::has_header() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Chassis::set_has_header() {
  _has_bits_[0] |= 0x00000001u;
}
void Chassis::clear_has_header() {
  _has_bits_[0] &= ~0x00000001u;
}
void Chassis::clear_header() {
  if (header_ != NULL) header_->::atd::common::Header::Clear();
  clear_has_header();
}
const ::atd::common::Header& Chassis::header() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.header)
  return header_ != NULL ? *header_
                         : *::atd::common::Header::internal_default_instance();
}
::atd::common::Header* Chassis::mutable_header() {
  set_has_header();
  if (header_ == NULL) {
    header_ = new ::atd::common::Header;
  }
  // @@protoc_insertion_point(field_mutable:atd.canbus.Chassis.header)
  return header_;
}
::atd::common::Header* Chassis::release_header() {
  // @@protoc_insertion_point(field_release:atd.canbus.Chassis.header)
  clear_has_header();
  ::atd::common::Header* temp = header_;
  header_ = NULL;
  return temp;
}
void Chassis::set_allocated_header(::atd::common::Header* header) {
  delete header_;
  header_ = header;
  if (header) {
    set_has_header();
  } else {
    clear_has_header();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.canbus.Chassis.header)
}

// optional int32 chassis_error_mask = 26 [default = 0];
bool Chassis::has_chassis_error_mask() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void Chassis::set_has_chassis_error_mask() {
  _has_bits_[0] |= 0x00040000u;
}
void Chassis::clear_has_chassis_error_mask() {
  _has_bits_[0] &= ~0x00040000u;
}
void Chassis::clear_chassis_error_mask() {
  chassis_error_mask_ = 0;
  clear_has_chassis_error_mask();
}
::google::protobuf::int32 Chassis::chassis_error_mask() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.chassis_error_mask)
  return chassis_error_mask_;
}
void Chassis::set_chassis_error_mask(::google::protobuf::int32 value) {
  set_has_chassis_error_mask();
  chassis_error_mask_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.Chassis.chassis_error_mask)
}

// optional .atd.common.VehicleSignal signal = 27;
bool Chassis::has_signal() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Chassis::set_has_signal() {
  _has_bits_[0] |= 0x00000002u;
}
void Chassis::clear_has_signal() {
  _has_bits_[0] &= ~0x00000002u;
}
void Chassis::clear_signal() {
  if (signal_ != NULL) signal_->::atd::common::VehicleSignal::Clear();
  clear_has_signal();
}
const ::atd::common::VehicleSignal& Chassis::signal() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.signal)
  return signal_ != NULL ? *signal_
                         : *::atd::common::VehicleSignal::internal_default_instance();
}
::atd::common::VehicleSignal* Chassis::mutable_signal() {
  set_has_signal();
  if (signal_ == NULL) {
    signal_ = new ::atd::common::VehicleSignal;
  }
  // @@protoc_insertion_point(field_mutable:atd.canbus.Chassis.signal)
  return signal_;
}
::atd::common::VehicleSignal* Chassis::release_signal() {
  // @@protoc_insertion_point(field_release:atd.canbus.Chassis.signal)
  clear_has_signal();
  ::atd::common::VehicleSignal* temp = signal_;
  signal_ = NULL;
  return temp;
}
void Chassis::set_allocated_signal(::atd::common::VehicleSignal* signal) {
  delete signal_;
  signal_ = signal;
  if (signal) {
    set_has_signal();
  } else {
    clear_has_signal();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.canbus.Chassis.signal)
}

// optional .atd.canbus.ChassisGPS chassis_gps = 28;
bool Chassis::has_chassis_gps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Chassis::set_has_chassis_gps() {
  _has_bits_[0] |= 0x00000004u;
}
void Chassis::clear_has_chassis_gps() {
  _has_bits_[0] &= ~0x00000004u;
}
void Chassis::clear_chassis_gps() {
  if (chassis_gps_ != NULL) chassis_gps_->::atd::canbus::ChassisGPS::Clear();
  clear_has_chassis_gps();
}
const ::atd::canbus::ChassisGPS& Chassis::chassis_gps() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.chassis_gps)
  return chassis_gps_ != NULL ? *chassis_gps_
                         : *::atd::canbus::ChassisGPS::internal_default_instance();
}
::atd::canbus::ChassisGPS* Chassis::mutable_chassis_gps() {
  set_has_chassis_gps();
  if (chassis_gps_ == NULL) {
    chassis_gps_ = new ::atd::canbus::ChassisGPS;
  }
  // @@protoc_insertion_point(field_mutable:atd.canbus.Chassis.chassis_gps)
  return chassis_gps_;
}
::atd::canbus::ChassisGPS* Chassis::release_chassis_gps() {
  // @@protoc_insertion_point(field_release:atd.canbus.Chassis.chassis_gps)
  clear_has_chassis_gps();
  ::atd::canbus::ChassisGPS* temp = chassis_gps_;
  chassis_gps_ = NULL;
  return temp;
}
void Chassis::set_allocated_chassis_gps(::atd::canbus::ChassisGPS* chassis_gps) {
  delete chassis_gps_;
  chassis_gps_ = chassis_gps;
  if (chassis_gps) {
    set_has_chassis_gps();
  } else {
    clear_has_chassis_gps();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.canbus.Chassis.chassis_gps)
}

// optional .atd.common.EngageAdvice engage_advice = 29;
bool Chassis::has_engage_advice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Chassis::set_has_engage_advice() {
  _has_bits_[0] |= 0x00000008u;
}
void Chassis::clear_has_engage_advice() {
  _has_bits_[0] &= ~0x00000008u;
}
void Chassis::clear_engage_advice() {
  if (engage_advice_ != NULL) engage_advice_->::atd::common::EngageAdvice::Clear();
  clear_has_engage_advice();
}
const ::atd::common::EngageAdvice& Chassis::engage_advice() const {
  // @@protoc_insertion_point(field_get:atd.canbus.Chassis.engage_advice)
  return engage_advice_ != NULL ? *engage_advice_
                         : *::atd::common::EngageAdvice::internal_default_instance();
}
::atd::common::EngageAdvice* Chassis::mutable_engage_advice() {
  set_has_engage_advice();
  if (engage_advice_ == NULL) {
    engage_advice_ = new ::atd::common::EngageAdvice;
  }
  // @@protoc_insertion_point(field_mutable:atd.canbus.Chassis.engage_advice)
  return engage_advice_;
}
::atd::common::EngageAdvice* Chassis::release_engage_advice() {
  // @@protoc_insertion_point(field_release:atd.canbus.Chassis.engage_advice)
  clear_has_engage_advice();
  ::atd::common::EngageAdvice* temp = engage_advice_;
  engage_advice_ = NULL;
  return temp;
}
void Chassis::set_allocated_engage_advice(::atd::common::EngageAdvice* engage_advice) {
  delete engage_advice_;
  engage_advice_ = engage_advice;
  if (engage_advice) {
    set_has_engage_advice();
  } else {
    clear_has_engage_advice();
  }
  // @@protoc_insertion_point(field_set_allocated:atd.canbus.Chassis.engage_advice)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ChassisGPS::kLatitudeFieldNumber;
const int ChassisGPS::kLongitudeFieldNumber;
const int ChassisGPS::kGpsValidFieldNumber;
const int ChassisGPS::kYearFieldNumber;
const int ChassisGPS::kMonthFieldNumber;
const int ChassisGPS::kDayFieldNumber;
const int ChassisGPS::kHoursFieldNumber;
const int ChassisGPS::kMinutesFieldNumber;
const int ChassisGPS::kSecondsFieldNumber;
const int ChassisGPS::kCompassDirectionFieldNumber;
const int ChassisGPS::kPdopFieldNumber;
const int ChassisGPS::kIsGpsFaultFieldNumber;
const int ChassisGPS::kIsInferredFieldNumber;
const int ChassisGPS::kAltitudeFieldNumber;
const int ChassisGPS::kHeadingFieldNumber;
const int ChassisGPS::kHdopFieldNumber;
const int ChassisGPS::kVdopFieldNumber;
const int ChassisGPS::kQualityFieldNumber;
const int ChassisGPS::kNumSatellitesFieldNumber;
const int ChassisGPS::kGpsSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ChassisGPS::ChassisGPS()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fchassis_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:atd.canbus.ChassisGPS)
}
ChassisGPS::ChassisGPS(const ChassisGPS& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(num_satellites_));
  // @@protoc_insertion_point(copy_constructor:atd.canbus.ChassisGPS)
}

void ChassisGPS::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&latitude_, 0, reinterpret_cast<char*>(&num_satellites_) -
    reinterpret_cast<char*>(&latitude_) + sizeof(num_satellites_));
}

ChassisGPS::~ChassisGPS() {
  // @@protoc_insertion_point(destructor:atd.canbus.ChassisGPS)
  SharedDtor();
}

void ChassisGPS::SharedDtor() {
}

void ChassisGPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ChassisGPS& ChassisGPS::default_instance() {
  protobuf_modules_2fipc_2fmessage_2fprotobuf_2fcanbus_2fchassis_2eproto::InitDefaults();
  return *internal_default_instance();
}

ChassisGPS* ChassisGPS::New(::google::protobuf::Arena* arena) const {
  ChassisGPS* n = new ChassisGPS;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ChassisGPS::Clear() {
// @@protoc_insertion_point(message_clear_start:atd.canbus.ChassisGPS)
  if (_has_bits_[0 / 32] & 255u) {
    ::memset(&latitude_, 0, reinterpret_cast<char*>(&seconds_) -
      reinterpret_cast<char*>(&latitude_) + sizeof(seconds_));
  }
  if (_has_bits_[8 / 32] & 65280u) {
    ::memset(&compass_direction_, 0, reinterpret_cast<char*>(&heading_) -
      reinterpret_cast<char*>(&compass_direction_) + sizeof(heading_));
  }
  if (_has_bits_[16 / 32] & 983040u) {
    ::memset(&hdop_, 0, reinterpret_cast<char*>(&num_satellites_) -
      reinterpret_cast<char*>(&hdop_) + sizeof(num_satellites_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ChassisGPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::io::LazyStringOutputStream unknown_fields_string(
      ::google::protobuf::NewPermanentCallback(&_internal_metadata_,
          &::google::protobuf::internal::InternalMetadataWithArenaLite::
              mutable_unknown_fields));
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_string, false);
  // @@protoc_insertion_point(parse_start:atd.canbus.ChassisGPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double latitude = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(9u)) {
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double longitude = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(17u)) {
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool gps_valid = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {
          set_has_gps_valid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gps_valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 year = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {
          set_has_year();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 month = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {
          set_has_month();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 day = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {
          set_has_day();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 hours = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {
          set_has_hours();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hours_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 minutes = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u)) {
          set_has_minutes();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minutes_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 seconds = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(72u)) {
          set_has_seconds();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seconds_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double compass_direction = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(81u)) {
          set_has_compass_direction();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &compass_direction_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double pdop = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(89u)) {
          set_has_pdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_gps_fault = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(96u)) {
          set_has_is_gps_fault();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gps_fault_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_inferred = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(104u)) {
          set_has_is_inferred();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_inferred_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double altitude = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(113u)) {
          set_has_altitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &altitude_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double heading = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(121u)) {
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double hdop = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(129u)) {
          set_has_hdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double vdop = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(137u)) {
          set_has_vdop();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &vdop_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .atd.canbus.GpsQuality quality = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(144u)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::atd::canbus::GpsQuality_IsValid(value)) {
            set_quality(static_cast< ::atd::canbus::GpsQuality >(value));
          } else {
            unknown_fields_stream.WriteVarint32(144u);
            unknown_fields_stream.WriteVarint32(value);
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 num_satellites = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(152u)) {
          set_has_num_satellites();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_satellites_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional double gps_speed = 20;
      case 20: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(161u)) {
          set_has_gps_speed();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gps_speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:atd.canbus.ChassisGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:atd.canbus.ChassisGPS)
  return false;
#undef DO_
}

void ChassisGPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:atd.canbus.ChassisGPS)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // optional double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  // optional bool gps_valid = 3;
  if (cached_has_bits & 0x00000400u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->gps_valid(), output);
  }

  // optional int32 year = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year(), output);
  }

  // optional int32 month = 5;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->month(), output);
  }

  // optional int32 day = 6;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->day(), output);
  }

  // optional int32 hours = 7;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hours(), output);
  }

  // optional int32 minutes = 8;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->minutes(), output);
  }

  // optional int32 seconds = 9;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->seconds(), output);
  }

  // optional double compass_direction = 10;
  if (cached_has_bits & 0x00000100u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->compass_direction(), output);
  }

  // optional double pdop = 11;
  if (cached_has_bits & 0x00000200u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->pdop(), output);
  }

  // optional bool is_gps_fault = 12;
  if (cached_has_bits & 0x00000800u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->is_gps_fault(), output);
  }

  // optional bool is_inferred = 13;
  if (cached_has_bits & 0x00001000u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->is_inferred(), output);
  }

  // optional double altitude = 14;
  if (cached_has_bits & 0x00004000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->altitude(), output);
  }

  // optional double heading = 15;
  if (cached_has_bits & 0x00008000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->heading(), output);
  }

  // optional double hdop = 16;
  if (cached_has_bits & 0x00010000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->hdop(), output);
  }

  // optional double vdop = 17;
  if (cached_has_bits & 0x00020000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->vdop(), output);
  }

  // optional .atd.canbus.GpsQuality quality = 18;
  if (cached_has_bits & 0x00002000u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      18, this->quality(), output);
  }

  // optional int32 num_satellites = 19;
  if (cached_has_bits & 0x00080000u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->num_satellites(), output);
  }

  // optional double gps_speed = 20;
  if (cached_has_bits & 0x00040000u) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->gps_speed(), output);
  }

  output->WriteRaw(unknown_fields().data(),
                   static_cast<int>(unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:atd.canbus.ChassisGPS)
}

size_t ChassisGPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:atd.canbus.ChassisGPS)
  size_t total_size = 0;

  total_size += unknown_fields().size();

  if (_has_bits_[0 / 32] & 255u) {
    // optional double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // optional double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // optional int32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // optional int32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // optional int32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 hours = 7;
    if (has_hours()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hours());
    }

    // optional int32 minutes = 8;
    if (has_minutes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minutes());
    }

    // optional int32 seconds = 9;
    if (has_seconds()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seconds());
    }

  }
  if (_has_bits_[8 / 32] & 65280u) {
    // optional double compass_direction = 10;
    if (has_compass_direction()) {
      total_size += 1 + 8;
    }

    // optional double pdop = 11;
    if (has_pdop()) {
      total_size += 1 + 8;
    }

    // optional bool gps_valid = 3;
    if (has_gps_valid()) {
      total_size += 1 + 1;
    }

    // optional bool is_gps_fault = 12;
    if (has_is_gps_fault()) {
      total_size += 1 + 1;
    }

    // optional bool is_inferred = 13;
    if (has_is_inferred()) {
      total_size += 1 + 1;
    }

    // optional .atd.canbus.GpsQuality quality = 18;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->quality());
    }

    // optional double altitude = 14;
    if (has_altitude()) {
      total_size += 1 + 8;
    }

    // optional double heading = 15;
    if (has_heading()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[16 / 32] & 983040u) {
    // optional double hdop = 16;
    if (has_hdop()) {
      total_size += 2 + 8;
    }

    // optional double vdop = 17;
    if (has_vdop()) {
      total_size += 2 + 8;
    }

    // optional double gps_speed = 20;
    if (has_gps_speed()) {
      total_size += 2 + 8;
    }

    // optional int32 num_satellites = 19;
    if (has_num_satellites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_satellites());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChassisGPS::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ChassisGPS*>(&from));
}

void ChassisGPS::MergeFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:atd.canbus.ChassisGPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000008u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000010u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000020u) {
      hours_ = from.hours_;
    }
    if (cached_has_bits & 0x00000040u) {
      minutes_ = from.minutes_;
    }
    if (cached_has_bits & 0x00000080u) {
      seconds_ = from.seconds_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 65280u) {
    if (cached_has_bits & 0x00000100u) {
      compass_direction_ = from.compass_direction_;
    }
    if (cached_has_bits & 0x00000200u) {
      pdop_ = from.pdop_;
    }
    if (cached_has_bits & 0x00000400u) {
      gps_valid_ = from.gps_valid_;
    }
    if (cached_has_bits & 0x00000800u) {
      is_gps_fault_ = from.is_gps_fault_;
    }
    if (cached_has_bits & 0x00001000u) {
      is_inferred_ = from.is_inferred_;
    }
    if (cached_has_bits & 0x00002000u) {
      quality_ = from.quality_;
    }
    if (cached_has_bits & 0x00004000u) {
      altitude_ = from.altitude_;
    }
    if (cached_has_bits & 0x00008000u) {
      heading_ = from.heading_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 983040u) {
    if (cached_has_bits & 0x00010000u) {
      hdop_ = from.hdop_;
    }
    if (cached_has_bits & 0x00020000u) {
      vdop_ = from.vdop_;
    }
    if (cached_has_bits & 0x00040000u) {
      gps_speed_ = from.gps_speed_;
    }
    if (cached_has_bits & 0x00080000u) {
      num_satellites_ = from.num_satellites_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ChassisGPS::CopyFrom(const ChassisGPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:atd.canbus.ChassisGPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChassisGPS::IsInitialized() const {
  return true;
}

void ChassisGPS::Swap(ChassisGPS* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ChassisGPS::InternalSwap(ChassisGPS* other) {
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(year_, other->year_);
  std::swap(month_, other->month_);
  std::swap(day_, other->day_);
  std::swap(hours_, other->hours_);
  std::swap(minutes_, other->minutes_);
  std::swap(seconds_, other->seconds_);
  std::swap(compass_direction_, other->compass_direction_);
  std::swap(pdop_, other->pdop_);
  std::swap(gps_valid_, other->gps_valid_);
  std::swap(is_gps_fault_, other->is_gps_fault_);
  std::swap(is_inferred_, other->is_inferred_);
  std::swap(quality_, other->quality_);
  std::swap(altitude_, other->altitude_);
  std::swap(heading_, other->heading_);
  std::swap(hdop_, other->hdop_);
  std::swap(vdop_, other->vdop_);
  std::swap(gps_speed_, other->gps_speed_);
  std::swap(num_satellites_, other->num_satellites_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ChassisGPS::GetTypeName() const {
  return "atd.canbus.ChassisGPS";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ChassisGPS

// optional double latitude = 1;
bool ChassisGPS::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ChassisGPS::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
void ChassisGPS::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
void ChassisGPS::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double ChassisGPS::latitude() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.latitude)
  return latitude_;
}
void ChassisGPS::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.latitude)
}

// optional double longitude = 2;
bool ChassisGPS::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ChassisGPS::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
void ChassisGPS::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
void ChassisGPS::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double ChassisGPS::longitude() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.longitude)
  return longitude_;
}
void ChassisGPS::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.longitude)
}

// optional bool gps_valid = 3;
bool ChassisGPS::has_gps_valid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void ChassisGPS::set_has_gps_valid() {
  _has_bits_[0] |= 0x00000400u;
}
void ChassisGPS::clear_has_gps_valid() {
  _has_bits_[0] &= ~0x00000400u;
}
void ChassisGPS::clear_gps_valid() {
  gps_valid_ = false;
  clear_has_gps_valid();
}
bool ChassisGPS::gps_valid() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.gps_valid)
  return gps_valid_;
}
void ChassisGPS::set_gps_valid(bool value) {
  set_has_gps_valid();
  gps_valid_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.gps_valid)
}

// optional int32 year = 4;
bool ChassisGPS::has_year() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ChassisGPS::set_has_year() {
  _has_bits_[0] |= 0x00000004u;
}
void ChassisGPS::clear_has_year() {
  _has_bits_[0] &= ~0x00000004u;
}
void ChassisGPS::clear_year() {
  year_ = 0;
  clear_has_year();
}
::google::protobuf::int32 ChassisGPS::year() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.year)
  return year_;
}
void ChassisGPS::set_year(::google::protobuf::int32 value) {
  set_has_year();
  year_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.year)
}

// optional int32 month = 5;
bool ChassisGPS::has_month() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ChassisGPS::set_has_month() {
  _has_bits_[0] |= 0x00000008u;
}
void ChassisGPS::clear_has_month() {
  _has_bits_[0] &= ~0x00000008u;
}
void ChassisGPS::clear_month() {
  month_ = 0;
  clear_has_month();
}
::google::protobuf::int32 ChassisGPS::month() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.month)
  return month_;
}
void ChassisGPS::set_month(::google::protobuf::int32 value) {
  set_has_month();
  month_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.month)
}

// optional int32 day = 6;
bool ChassisGPS::has_day() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void ChassisGPS::set_has_day() {
  _has_bits_[0] |= 0x00000010u;
}
void ChassisGPS::clear_has_day() {
  _has_bits_[0] &= ~0x00000010u;
}
void ChassisGPS::clear_day() {
  day_ = 0;
  clear_has_day();
}
::google::protobuf::int32 ChassisGPS::day() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.day)
  return day_;
}
void ChassisGPS::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.day)
}

// optional int32 hours = 7;
bool ChassisGPS::has_hours() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void ChassisGPS::set_has_hours() {
  _has_bits_[0] |= 0x00000020u;
}
void ChassisGPS::clear_has_hours() {
  _has_bits_[0] &= ~0x00000020u;
}
void ChassisGPS::clear_hours() {
  hours_ = 0;
  clear_has_hours();
}
::google::protobuf::int32 ChassisGPS::hours() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.hours)
  return hours_;
}
void ChassisGPS::set_hours(::google::protobuf::int32 value) {
  set_has_hours();
  hours_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.hours)
}

// optional int32 minutes = 8;
bool ChassisGPS::has_minutes() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void ChassisGPS::set_has_minutes() {
  _has_bits_[0] |= 0x00000040u;
}
void ChassisGPS::clear_has_minutes() {
  _has_bits_[0] &= ~0x00000040u;
}
void ChassisGPS::clear_minutes() {
  minutes_ = 0;
  clear_has_minutes();
}
::google::protobuf::int32 ChassisGPS::minutes() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.minutes)
  return minutes_;
}
void ChassisGPS::set_minutes(::google::protobuf::int32 value) {
  set_has_minutes();
  minutes_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.minutes)
}

// optional int32 seconds = 9;
bool ChassisGPS::has_seconds() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void ChassisGPS::set_has_seconds() {
  _has_bits_[0] |= 0x00000080u;
}
void ChassisGPS::clear_has_seconds() {
  _has_bits_[0] &= ~0x00000080u;
}
void ChassisGPS::clear_seconds() {
  seconds_ = 0;
  clear_has_seconds();
}
::google::protobuf::int32 ChassisGPS::seconds() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.seconds)
  return seconds_;
}
void ChassisGPS::set_seconds(::google::protobuf::int32 value) {
  set_has_seconds();
  seconds_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.seconds)
}

// optional double compass_direction = 10;
bool ChassisGPS::has_compass_direction() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void ChassisGPS::set_has_compass_direction() {
  _has_bits_[0] |= 0x00000100u;
}
void ChassisGPS::clear_has_compass_direction() {
  _has_bits_[0] &= ~0x00000100u;
}
void ChassisGPS::clear_compass_direction() {
  compass_direction_ = 0;
  clear_has_compass_direction();
}
double ChassisGPS::compass_direction() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.compass_direction)
  return compass_direction_;
}
void ChassisGPS::set_compass_direction(double value) {
  set_has_compass_direction();
  compass_direction_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.compass_direction)
}

// optional double pdop = 11;
bool ChassisGPS::has_pdop() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void ChassisGPS::set_has_pdop() {
  _has_bits_[0] |= 0x00000200u;
}
void ChassisGPS::clear_has_pdop() {
  _has_bits_[0] &= ~0x00000200u;
}
void ChassisGPS::clear_pdop() {
  pdop_ = 0;
  clear_has_pdop();
}
double ChassisGPS::pdop() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.pdop)
  return pdop_;
}
void ChassisGPS::set_pdop(double value) {
  set_has_pdop();
  pdop_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.pdop)
}

// optional bool is_gps_fault = 12;
bool ChassisGPS::has_is_gps_fault() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void ChassisGPS::set_has_is_gps_fault() {
  _has_bits_[0] |= 0x00000800u;
}
void ChassisGPS::clear_has_is_gps_fault() {
  _has_bits_[0] &= ~0x00000800u;
}
void ChassisGPS::clear_is_gps_fault() {
  is_gps_fault_ = false;
  clear_has_is_gps_fault();
}
bool ChassisGPS::is_gps_fault() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.is_gps_fault)
  return is_gps_fault_;
}
void ChassisGPS::set_is_gps_fault(bool value) {
  set_has_is_gps_fault();
  is_gps_fault_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.is_gps_fault)
}

// optional bool is_inferred = 13;
bool ChassisGPS::has_is_inferred() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void ChassisGPS::set_has_is_inferred() {
  _has_bits_[0] |= 0x00001000u;
}
void ChassisGPS::clear_has_is_inferred() {
  _has_bits_[0] &= ~0x00001000u;
}
void ChassisGPS::clear_is_inferred() {
  is_inferred_ = false;
  clear_has_is_inferred();
}
bool ChassisGPS::is_inferred() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.is_inferred)
  return is_inferred_;
}
void ChassisGPS::set_is_inferred(bool value) {
  set_has_is_inferred();
  is_inferred_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.is_inferred)
}

// optional double altitude = 14;
bool ChassisGPS::has_altitude() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void ChassisGPS::set_has_altitude() {
  _has_bits_[0] |= 0x00004000u;
}
void ChassisGPS::clear_has_altitude() {
  _has_bits_[0] &= ~0x00004000u;
}
void ChassisGPS::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
double ChassisGPS::altitude() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.altitude)
  return altitude_;
}
void ChassisGPS::set_altitude(double value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.altitude)
}

// optional double heading = 15;
bool ChassisGPS::has_heading() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void ChassisGPS::set_has_heading() {
  _has_bits_[0] |= 0x00008000u;
}
void ChassisGPS::clear_has_heading() {
  _has_bits_[0] &= ~0x00008000u;
}
void ChassisGPS::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
double ChassisGPS::heading() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.heading)
  return heading_;
}
void ChassisGPS::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.heading)
}

// optional double hdop = 16;
bool ChassisGPS::has_hdop() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void ChassisGPS::set_has_hdop() {
  _has_bits_[0] |= 0x00010000u;
}
void ChassisGPS::clear_has_hdop() {
  _has_bits_[0] &= ~0x00010000u;
}
void ChassisGPS::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
double ChassisGPS::hdop() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.hdop)
  return hdop_;
}
void ChassisGPS::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.hdop)
}

// optional double vdop = 17;
bool ChassisGPS::has_vdop() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void ChassisGPS::set_has_vdop() {
  _has_bits_[0] |= 0x00020000u;
}
void ChassisGPS::clear_has_vdop() {
  _has_bits_[0] &= ~0x00020000u;
}
void ChassisGPS::clear_vdop() {
  vdop_ = 0;
  clear_has_vdop();
}
double ChassisGPS::vdop() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.vdop)
  return vdop_;
}
void ChassisGPS::set_vdop(double value) {
  set_has_vdop();
  vdop_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.vdop)
}

// optional .atd.canbus.GpsQuality quality = 18;
bool ChassisGPS::has_quality() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void ChassisGPS::set_has_quality() {
  _has_bits_[0] |= 0x00002000u;
}
void ChassisGPS::clear_has_quality() {
  _has_bits_[0] &= ~0x00002000u;
}
void ChassisGPS::clear_quality() {
  quality_ = 0;
  clear_has_quality();
}
::atd::canbus::GpsQuality ChassisGPS::quality() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.quality)
  return static_cast< ::atd::canbus::GpsQuality >(quality_);
}
void ChassisGPS::set_quality(::atd::canbus::GpsQuality value) {
  assert(::atd::canbus::GpsQuality_IsValid(value));
  set_has_quality();
  quality_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.quality)
}

// optional int32 num_satellites = 19;
bool ChassisGPS::has_num_satellites() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void ChassisGPS::set_has_num_satellites() {
  _has_bits_[0] |= 0x00080000u;
}
void ChassisGPS::clear_has_num_satellites() {
  _has_bits_[0] &= ~0x00080000u;
}
void ChassisGPS::clear_num_satellites() {
  num_satellites_ = 0;
  clear_has_num_satellites();
}
::google::protobuf::int32 ChassisGPS::num_satellites() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.num_satellites)
  return num_satellites_;
}
void ChassisGPS::set_num_satellites(::google::protobuf::int32 value) {
  set_has_num_satellites();
  num_satellites_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.num_satellites)
}

// optional double gps_speed = 20;
bool ChassisGPS::has_gps_speed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void ChassisGPS::set_has_gps_speed() {
  _has_bits_[0] |= 0x00040000u;
}
void ChassisGPS::clear_has_gps_speed() {
  _has_bits_[0] &= ~0x00040000u;
}
void ChassisGPS::clear_gps_speed() {
  gps_speed_ = 0;
  clear_has_gps_speed();
}
double ChassisGPS::gps_speed() const {
  // @@protoc_insertion_point(field_get:atd.canbus.ChassisGPS.gps_speed)
  return gps_speed_;
}
void ChassisGPS::set_gps_speed(double value) {
  set_has_gps_speed();
  gps_speed_ = value;
  // @@protoc_insertion_point(field_set:atd.canbus.ChassisGPS.gps_speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace canbus
}  // namespace atd

// @@protoc_insertion_point(global_scope)
