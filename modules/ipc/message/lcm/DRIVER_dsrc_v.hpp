/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __DRIVER_dsrc_v_hpp__
#define __DRIVER_dsrc_v_hpp__

#include <string>
#include <vector>
#include "DRIVER_dsrc_o.hpp"


class DRIVER_dsrc_v
{
    public:
        std::string VID;

        std::string type;

        double     VLongitude;

        double     VLatitude;

        float      Angel;

        float      Speed;

        int16_t    WheelAngel;

        int16_t    Brake;

        int16_t    Accelerator;

        int16_t    Turnlight;

        int16_t    Gear;

        std::string VehicleStatus;

        int16_t    num;

        std::vector< DRIVER_dsrc_o > dectObject;

        std::string att1;

        std::string att2;

        int16_t    lostcount;

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "DRIVER_dsrc_v"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int DRIVER_dsrc_v::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int DRIVER_dsrc_v::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int DRIVER_dsrc_v::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t DRIVER_dsrc_v::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* DRIVER_dsrc_v::getTypeName()
{
    return "DRIVER_dsrc_v";
}

int DRIVER_dsrc_v::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    char* VID_cstr = (char*) this->VID.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &VID_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* type_cstr = (char*) this->type.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &type_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->VLongitude, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->VLatitude, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->Angel, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->Speed, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->WheelAngel, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->Brake, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->Accelerator, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->Turnlight, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->Gear, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* VehicleStatus_cstr = (char*) this->VehicleStatus.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &VehicleStatus_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->num, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->num; a0++) {
        tlen = this->dectObject[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    char* att1_cstr = (char*) this->att1.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &att1_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    char* att2_cstr = (char*) this->att2.c_str();
    tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &att2_cstr, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->lostcount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int DRIVER_dsrc_v::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    int32_t __VID_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__VID_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__VID_len__ > maxlen - pos) return -1;
    this->VID.assign(((const char*)buf) + offset + pos, __VID_len__ - 1);
    pos += __VID_len__;

    int32_t __type_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__type_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__type_len__ > maxlen - pos) return -1;
    this->type.assign(((const char*)buf) + offset + pos, __type_len__ - 1);
    pos += __type_len__;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->VLongitude, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->VLatitude, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->Angel, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->Speed, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->WheelAngel, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->Brake, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->Accelerator, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->Turnlight, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->Gear, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    int32_t __VehicleStatus_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__VehicleStatus_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__VehicleStatus_len__ > maxlen - pos) return -1;
    this->VehicleStatus.assign(((const char*)buf) + offset + pos, __VehicleStatus_len__ - 1);
    pos += __VehicleStatus_len__;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->num, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->dectObject.resize(this->num);
    for (int a0 = 0; a0 < this->num; a0++) {
        tlen = this->dectObject[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    int32_t __att1_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__att1_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__att1_len__ > maxlen - pos) return -1;
    this->att1.assign(((const char*)buf) + offset + pos, __att1_len__ - 1);
    pos += __att1_len__;

    int32_t __att2_len__;
    tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__att2_len__, 1);
    if(tlen < 0) return tlen; else pos += tlen;
    if(__att2_len__ > maxlen - pos) return -1;
    this->att2.assign(((const char*)buf) + offset + pos, __att2_len__ - 1);
    pos += __att2_len__;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->lostcount, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int DRIVER_dsrc_v::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += this->VID.size() + 4 + 1;
    enc_size += this->type.size() + 4 + 1;
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += this->VehicleStatus.size() + 4 + 1;
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->num; a0++) {
        enc_size += this->dectObject[a0]._getEncodedSizeNoHash();
    }
    enc_size += this->att1.size() + 4 + 1;
    enc_size += this->att2.size() + 4 + 1;
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    return enc_size;
}

uint64_t DRIVER_dsrc_v::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == DRIVER_dsrc_v::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)DRIVER_dsrc_v::getHash };

    uint64_t hash = 0xc5c2eb58471d2195LL +
         DRIVER_dsrc_o::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
