/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __UNIFIED_OBJECT_hpp__
#define __UNIFIED_OBJECT_hpp__

#include <vector>
#include "VALUE_3D.hpp"
#include "TRACK_STATUS.hpp"
#include "VALUE_2D.hpp"


class UNIFIED_OBJECT
{
    public:
        int16_t    nObjectID;

        int64_t    nTrackedAge;

        uint8_t    eLastUpdateSourceSensor;

        int64_t    nLastUpdateTime;

        float      fBoxHeadOrientation;

        VALUE_3D   stBoxSize;

        int8_t     bObjectClass;

        int8_t     bObservedMoving;

        int8_t     bMoving;

        float      State[5];

        float      P[5][5];

        int8_t     nTrackNum;

        std::vector< TRACK_STATUS > gstSenserTracked;

        int8_t     nTrajectoryLength;

        VALUE_2D   gstTrajectory[20];

    public:
        /**
         * Encode a message into binary form.
         *
         * @param buf The output buffer.
         * @param offset Encoding starts at thie byte offset into @p buf.
         * @param maxlen Maximum number of bytes to write.  This should generally be
         *  equal to getEncodedSize().
         * @return The number of bytes encoded, or <0 on error.
         */
        inline int encode(void *buf, int offset, int maxlen) const;

        /**
         * Check how many bytes are required to encode this message.
         */
        inline int getEncodedSize() const;

        /**
         * Decode a message from binary form into this instance.
         *
         * @param buf The buffer containing the encoded message.
         * @param offset The byte offset into @p buf where the encoded message starts.
         * @param maxlen The maximum number of bytes to reqad while decoding.
         * @return The number of bytes decoded, or <0 if an error occured.
         */
        inline int decode(const void *buf, int offset, int maxlen);

        /**
         * Retrieve the 64-bit fingerprint identifying the structure of the message.
         * Note that the fingerprint is the same for all instances of the same
         * message type, and is a fingerprint on the message type definition, not on
         * the message contents.
         */
        inline static int64_t getHash();

        /**
         * Returns "UNIFIED_OBJECT"
         */
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static uint64_t _computeHash(const __lcm_hash_ptr *p);
};

int UNIFIED_OBJECT::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = (int64_t)getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int UNIFIED_OBJECT::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int UNIFIED_OBJECT::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t UNIFIED_OBJECT::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* UNIFIED_OBJECT::getTypeName()
{
    return "UNIFIED_OBJECT";
}

int UNIFIED_OBJECT::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int16_t_encode_array(buf, offset + pos, maxlen - pos, &this->nObjectID, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->nTrackedAge, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->eLastUpdateSourceSensor, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->nLastUpdateTime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->fBoxHeadOrientation, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->stBoxSize._encodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->bObjectClass, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->bObservedMoving, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->bMoving, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->State[0], 5);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 5; a0++) {
        tlen = __float_encode_array(buf, offset + pos, maxlen - pos, &this->P[a0][0], 5);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->nTrackNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->nTrackNum; a0++) {
        tlen = this->gstSenserTracked[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->nTrajectoryLength, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 20; a0++) {
        tlen = this->gstTrajectory[a0]._encodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int UNIFIED_OBJECT::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int16_t_decode_array(buf, offset + pos, maxlen - pos, &this->nObjectID, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->nTrackedAge, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->eLastUpdateSourceSensor, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->nLastUpdateTime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->fBoxHeadOrientation, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->stBoxSize._decodeNoHash(buf, offset + pos, maxlen - pos);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->bObjectClass, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->bObservedMoving, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->bMoving, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->State[0], 5);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 5; a0++) {
        tlen = __float_decode_array(buf, offset + pos, maxlen - pos, &this->P[a0][0], 5);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->nTrackNum, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->gstSenserTracked.resize(this->nTrackNum);
    for (int a0 = 0; a0 < this->nTrackNum; a0++) {
        tlen = this->gstSenserTracked[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->nTrajectoryLength, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < 20; a0++) {
        tlen = this->gstTrajectory[a0]._decodeNoHash(buf, offset + pos, maxlen - pos);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int UNIFIED_OBJECT::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int16_t_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, 1);
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 1);
    enc_size += this->stBoxSize._getEncodedSizeNoHash();
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __float_encoded_array_size(NULL, 5);
    enc_size += 5 * __float_encoded_array_size(NULL, 5);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->nTrackNum; a0++) {
        enc_size += this->gstSenserTracked[a0]._getEncodedSizeNoHash();
    }
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < 20; a0++) {
        enc_size += this->gstTrajectory[a0]._getEncodedSizeNoHash();
    }
    return enc_size;
}

uint64_t UNIFIED_OBJECT::_computeHash(const __lcm_hash_ptr *p)
{
    const __lcm_hash_ptr *fp;
    for(fp = p; fp != NULL; fp = fp->parent)
        if(fp->v == UNIFIED_OBJECT::getHash)
            return 0;
    const __lcm_hash_ptr cp = { p, (void*)UNIFIED_OBJECT::getHash };

    uint64_t hash = 0xd721ea6ff49232f2LL +
         VALUE_3D::_computeHash(&cp) +
         TRACK_STATUS::_computeHash(&cp) +
         VALUE_2D::_computeHash(&cp);

    return (hash<<1) + ((hash>>63)&1);
}

#endif
